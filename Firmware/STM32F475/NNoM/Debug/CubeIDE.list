
CubeIDE.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000098c8  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00019ad8  08009a58  08009a58  00019a58  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08023530  08023530  000401dc  2**0
                  CONTENTS
  4 .ARM          00000008  08023530  08023530  00033530  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08023538  08023538  000401dc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08023538  08023538  00033538  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0802353c  0802353c  0003353c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001dc  20000000  08023540  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000570  200001dc  0802371c  000401dc  2**2
                  ALLOC
 10 ._user_heap_stack 00006004  2000074c  0802371c  0004074c  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  000401dc  2**0
                  CONTENTS, READONLY
 12 .debug_info   00024024  00000000  00000000  0004020a  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 0000459a  00000000  00000000  0006422e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000ce0  00000000  00000000  000687c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001fd8  00000000  00000000  000694a8  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00029963  00000000  00000000  0006b480  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000fec4  00000000  00000000  00094de3  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    001537a5  00000000  00000000  000a4ca7  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      000000ac  00000000  00000000  001f844c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003588  00000000  00000000  001f84f8  2**2
                  CONTENTS, READONLY, DEBUGGING
 21 .debug_loc    0000cf93  00000000  00000000  001fba80  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001dc 	.word	0x200001dc
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009a40 	.word	0x08009a40

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001e0 	.word	0x200001e0
 80001cc:	08009a40 	.word	0x08009a40

080001d0 <arm_relu_q7>:
 80001d0:	088b      	lsrs	r3, r1, #2
 80001d2:	b470      	push	{r4, r5, r6}
 80001d4:	d02f      	beq.n	8000236 <arm_relu_q7+0x66>
 80001d6:	1e5d      	subs	r5, r3, #1
 80001d8:	b2ad      	uxth	r5, r5
 80001da:	3501      	adds	r5, #1
 80001dc:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 80001e0:	2600      	movs	r6, #0
 80001e2:	4604      	mov	r4, r0
 80001e4:	f854 2b04 	ldr.w	r2, [r4], #4
 80001e8:	f002 3380 	and.w	r3, r2, #2155905152	; 0x80808080
 80001ec:	ea4f 13f3 	mov.w	r3, r3, ror #7
 80001f0:	42ac      	cmp	r4, r5
 80001f2:	fac6 f313 	qsub8	r3, r6, r3
 80001f6:	ea22 0303 	bic.w	r3, r2, r3
 80001fa:	6003      	str	r3, [r0, #0]
 80001fc:	4620      	mov	r0, r4
 80001fe:	d1f0      	bne.n	80001e2 <arm_relu_q7+0x12>
 8000200:	f011 0103 	ands.w	r1, r1, #3
 8000204:	d015      	beq.n	8000232 <arm_relu_q7+0x62>
 8000206:	f994 3000 	ldrsb.w	r3, [r4]
 800020a:	2b00      	cmp	r3, #0
 800020c:	bfbc      	itt	lt
 800020e:	2300      	movlt	r3, #0
 8000210:	7023      	strblt	r3, [r4, #0]
 8000212:	2901      	cmp	r1, #1
 8000214:	d00d      	beq.n	8000232 <arm_relu_q7+0x62>
 8000216:	f994 3001 	ldrsb.w	r3, [r4, #1]
 800021a:	2b00      	cmp	r3, #0
 800021c:	bfbc      	itt	lt
 800021e:	2300      	movlt	r3, #0
 8000220:	7063      	strblt	r3, [r4, #1]
 8000222:	2902      	cmp	r1, #2
 8000224:	d005      	beq.n	8000232 <arm_relu_q7+0x62>
 8000226:	f994 3002 	ldrsb.w	r3, [r4, #2]
 800022a:	2b00      	cmp	r3, #0
 800022c:	bfbc      	itt	lt
 800022e:	2300      	movlt	r3, #0
 8000230:	70a3      	strblt	r3, [r4, #2]
 8000232:	bc70      	pop	{r4, r5, r6}
 8000234:	4770      	bx	lr
 8000236:	4604      	mov	r4, r0
 8000238:	e7e2      	b.n	8000200 <arm_relu_q7+0x30>
 800023a:	bf00      	nop

0800023c <arm_convolve_1x1_HWC_q7_fast_nonsquare>:
 800023c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000240:	b08b      	sub	sp, #44	; 0x2c
 8000242:	f013 0f03 	tst.w	r3, #3
 8000246:	f8bd 5074 	ldrh.w	r5, [sp, #116]	; 0x74
 800024a:	9508      	str	r5, [sp, #32]
 800024c:	f8bd 5078 	ldrh.w	r5, [sp, #120]	; 0x78
 8000250:	f8bd 2054 	ldrh.w	r2, [sp, #84]	; 0x54
 8000254:	9509      	str	r5, [sp, #36]	; 0x24
 8000256:	f8bd 5084 	ldrh.w	r5, [sp, #132]	; 0x84
 800025a:	9205      	str	r2, [sp, #20]
 800025c:	4681      	mov	r9, r0
 800025e:	468e      	mov	lr, r1
 8000260:	f8bd c058 	ldrh.w	ip, [sp, #88]	; 0x58
 8000264:	f8bd 105c 	ldrh.w	r1, [sp, #92]	; 0x5c
 8000268:	f8bd 0060 	ldrh.w	r0, [sp, #96]	; 0x60
 800026c:	f8bd 7064 	ldrh.w	r7, [sp, #100]	; 0x64
 8000270:	f8bd 4068 	ldrh.w	r4, [sp, #104]	; 0x68
 8000274:	f8bd 606c 	ldrh.w	r6, [sp, #108]	; 0x6c
 8000278:	f8bd 8080 	ldrh.w	r8, [sp, #128]	; 0x80
 800027c:	9506      	str	r5, [sp, #24]
 800027e:	f040 809f 	bne.w	80003c0 <arm_convolve_1x1_HWC_q7_fast_nonsquare+0x184>
 8000282:	07d2      	lsls	r2, r2, #31
 8000284:	f100 809c 	bmi.w	80003c0 <arm_convolve_1x1_HWC_q7_fast_nonsquare+0x184>
 8000288:	f1bc 0f01 	cmp.w	ip, #1
 800028c:	f040 8098 	bne.w	80003c0 <arm_convolve_1x1_HWC_q7_fast_nonsquare+0x184>
 8000290:	2901      	cmp	r1, #1
 8000292:	f040 8095 	bne.w	80003c0 <arm_convolve_1x1_HWC_q7_fast_nonsquare+0x184>
 8000296:	2800      	cmp	r0, #0
 8000298:	f040 8092 	bne.w	80003c0 <arm_convolve_1x1_HWC_q7_fast_nonsquare+0x184>
 800029c:	2f00      	cmp	r7, #0
 800029e:	f040 808f 	bne.w	80003c0 <arm_convolve_1x1_HWC_q7_fast_nonsquare+0x184>
 80002a2:	2c01      	cmp	r4, #1
 80002a4:	f040 808c 	bne.w	80003c0 <arm_convolve_1x1_HWC_q7_fast_nonsquare+0x184>
 80002a8:	2e01      	cmp	r6, #1
 80002aa:	f040 8089 	bne.w	80003c0 <arm_convolve_1x1_HWC_q7_fast_nonsquare+0x184>
 80002ae:	2d00      	cmp	r5, #0
 80002b0:	d070      	beq.n	8000394 <arm_convolve_1x1_HWC_q7_fast_nonsquare+0x158>
 80002b2:	461e      	mov	r6, r3
 80002b4:	ea4f 0b43 	mov.w	fp, r3, lsl #1
 80002b8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80002ba:	f8dd a088 	ldr.w	sl, [sp, #136]	; 0x88
 80002be:	9704      	str	r7, [sp, #16]
 80002c0:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 80002c4:	463d      	mov	r5, r7
 80002c6:	f8cd e01c 	str.w	lr, [sp, #28]
 80002ca:	4647      	mov	r7, r8
 80002cc:	4698      	mov	r8, r3
 80002ce:	b19f      	cbz	r7, 80002f8 <arm_convolve_1x1_HWC_q7_fast_nonsquare+0xbc>
 80002d0:	9b07      	ldr	r3, [sp, #28]
 80002d2:	2000      	movs	r0, #0
 80002d4:	fb05 f503 	mul.w	r5, r5, r3
 80002d8:	4604      	mov	r4, r0
 80002da:	4428      	add	r0, r5
 80002dc:	4651      	mov	r1, sl
 80002de:	fb06 9000 	mla	r0, r6, r0, r9
 80002e2:	4632      	mov	r2, r6
 80002e4:	44da      	add	sl, fp
 80002e6:	f001 ffaf 	bl	8002248 <arm_q7_to_q15_reordered_no_shift>
 80002ea:	45d0      	cmp	r8, sl
 80002ec:	d056      	beq.n	800039c <arm_convolve_1x1_HWC_q7_fast_nonsquare+0x160>
 80002ee:	3401      	adds	r4, #1
 80002f0:	b224      	sxth	r4, r4
 80002f2:	42bc      	cmp	r4, r7
 80002f4:	4620      	mov	r0, r4
 80002f6:	dbf0      	blt.n	80002da <arm_convolve_1x1_HWC_q7_fast_nonsquare+0x9e>
 80002f8:	9b04      	ldr	r3, [sp, #16]
 80002fa:	9a06      	ldr	r2, [sp, #24]
 80002fc:	3301      	adds	r3, #1
 80002fe:	b21b      	sxth	r3, r3
 8000300:	4293      	cmp	r3, r2
 8000302:	9304      	str	r3, [sp, #16]
 8000304:	461d      	mov	r5, r3
 8000306:	dbe2      	blt.n	80002ce <arm_convolve_1x1_HWC_q7_fast_nonsquare+0x92>
 8000308:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800030a:	4553      	cmp	r3, sl
 800030c:	d042      	beq.n	8000394 <arm_convolve_1x1_HWC_q7_fast_nonsquare+0x158>
 800030e:	9b05      	ldr	r3, [sp, #20]
 8000310:	2b00      	cmp	r3, #0
 8000312:	d03f      	beq.n	8000394 <arm_convolve_1x1_HWC_q7_fast_nonsquare+0x158>
 8000314:	10b6      	asrs	r6, r6, #2
 8000316:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8000318:	f8dd e07c 	ldr.w	lr, [sp, #124]	; 0x7c
 800031c:	9d14      	ldr	r5, [sp, #80]	; 0x50
 800031e:	f8dd a020 	ldr.w	sl, [sp, #32]
 8000322:	f106 38ff 	add.w	r8, r6, #4294967295
 8000326:	f04f 0901 	mov.w	r9, #1
 800032a:	fa1f f888 	uxth.w	r8, r8
 800032e:	44c8      	add	r8, r9
 8000330:	fa09 f902 	lsl.w	r9, r9, r2
 8000334:	ea4f 0888 	mov.w	r8, r8, lsl #2
 8000338:	ea4f 0959 	mov.w	r9, r9, lsr #1
 800033c:	fa1f fc8e 	uxth.w	ip, lr
 8000340:	4693      	mov	fp, r2
 8000342:	ebae 030c 	sub.w	r3, lr, ip
 8000346:	b21b      	sxth	r3, r3
 8000348:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800034a:	56d3      	ldrsb	r3, [r2, r3]
 800034c:	fa03 f30a 	lsl.w	r3, r3, sl
 8000350:	444b      	add	r3, r9
 8000352:	b19e      	cbz	r6, 800037c <arm_convolve_1x1_HWC_q7_fast_nonsquare+0x140>
 8000354:	9c22      	ldr	r4, [sp, #136]	; 0x88
 8000356:	eb05 0708 	add.w	r7, r5, r8
 800035a:	f855 2b04 	ldr.w	r2, [r5], #4
 800035e:	6820      	ldr	r0, [r4, #0]
 8000360:	fa2f f182 	sxtb16	r1, r2
 8000364:	ea4f 2232 	mov.w	r2, r2, ror #8
 8000368:	fa2f f282 	sxtb16	r2, r2
 800036c:	fb21 3300 	smlad	r3, r1, r0, r3
 8000370:	6861      	ldr	r1, [r4, #4]
 8000372:	3408      	adds	r4, #8
 8000374:	fb22 3301 	smlad	r3, r2, r1, r3
 8000378:	42bd      	cmp	r5, r7
 800037a:	d1ee      	bne.n	800035a <arm_convolve_1x1_HWC_q7_fast_nonsquare+0x11e>
 800037c:	fa43 f30b 	asr.w	r3, r3, fp
 8000380:	f303 0307 	ssat	r3, #8, r3
 8000384:	f80e 3b01 	strb.w	r3, [lr], #1
 8000388:	9a05      	ldr	r2, [sp, #20]
 800038a:	ebae 030c 	sub.w	r3, lr, ip
 800038e:	b21b      	sxth	r3, r3
 8000390:	4293      	cmp	r3, r2
 8000392:	dbd6      	blt.n	8000342 <arm_convolve_1x1_HWC_q7_fast_nonsquare+0x106>
 8000394:	2000      	movs	r0, #0
 8000396:	b00b      	add	sp, #44	; 0x2c
 8000398:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800039c:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800039e:	9303      	str	r3, [sp, #12]
 80003a0:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 80003a2:	9302      	str	r3, [sp, #8]
 80003a4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80003a6:	9301      	str	r3, [sp, #4]
 80003a8:	9b08      	ldr	r3, [sp, #32]
 80003aa:	9300      	str	r3, [sp, #0]
 80003ac:	9a05      	ldr	r2, [sp, #20]
 80003ae:	9922      	ldr	r1, [sp, #136]	; 0x88
 80003b0:	9814      	ldr	r0, [sp, #80]	; 0x50
 80003b2:	4633      	mov	r3, r6
 80003b4:	f001 fcec 	bl	8001d90 <arm_nn_mat_mult_kernel_q7_q15_reordered>
 80003b8:	f8dd a088 	ldr.w	sl, [sp, #136]	; 0x88
 80003bc:	901f      	str	r0, [sp, #124]	; 0x7c
 80003be:	e796      	b.n	80002ee <arm_convolve_1x1_HWC_q7_fast_nonsquare+0xb2>
 80003c0:	f06f 0002 	mvn.w	r0, #2
 80003c4:	b00b      	add	sp, #44	; 0x2c
 80003c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80003ca:	bf00      	nop

080003cc <arm_convolve_HWC_q7_RGB>:
 80003cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80003d0:	b097      	sub	sp, #92	; 0x5c
 80003d2:	2a03      	cmp	r2, #3
 80003d4:	9311      	str	r3, [sp, #68]	; 0x44
 80003d6:	f8bd 3080 	ldrh.w	r3, [sp, #128]	; 0x80
 80003da:	9312      	str	r3, [sp, #72]	; 0x48
 80003dc:	f8bd 3084 	ldrh.w	r3, [sp, #132]	; 0x84
 80003e0:	9308      	str	r3, [sp, #32]
 80003e2:	f8bd 3088 	ldrh.w	r3, [sp, #136]	; 0x88
 80003e6:	9309      	str	r3, [sp, #36]	; 0x24
 80003e8:	f8bd 308c 	ldrh.w	r3, [sp, #140]	; 0x8c
 80003ec:	9306      	str	r3, [sp, #24]
 80003ee:	f8bd 3094 	ldrh.w	r3, [sp, #148]	; 0x94
 80003f2:	9313      	str	r3, [sp, #76]	; 0x4c
 80003f4:	f8bd 3098 	ldrh.w	r3, [sp, #152]	; 0x98
 80003f8:	930e      	str	r3, [sp, #56]	; 0x38
 80003fa:	f8bd 30a0 	ldrh.w	r3, [sp, #160]	; 0xa0
 80003fe:	930a      	str	r3, [sp, #40]	; 0x28
 8000400:	f040 8142 	bne.w	8000688 <arm_convolve_HWC_q7_RGB+0x2bc>
 8000404:	2b00      	cmp	r3, #0
 8000406:	f000 8113 	beq.w	8000630 <arm_convolve_HWC_q7_RGB+0x264>
 800040a:	9c08      	ldr	r4, [sp, #32]
 800040c:	0062      	lsls	r2, r4, #1
 800040e:	460e      	mov	r6, r1
 8000410:	9215      	str	r2, [sp, #84]	; 0x54
 8000412:	1911      	adds	r1, r2, r4
 8000414:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8000416:	0049      	lsls	r1, r1, #1
 8000418:	fb14 f304 	smulbb	r3, r4, r4
 800041c:	fb04 f101 	mul.w	r1, r4, r1
 8000420:	4605      	mov	r5, r0
 8000422:	9c29      	ldr	r4, [sp, #164]	; 0xa4
 8000424:	4250      	negs	r0, r2
 8000426:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 800042a:	b283      	uxth	r3, r0
 800042c:	4618      	mov	r0, r3
 800042e:	9314      	str	r3, [sp, #80]	; 0x50
 8000430:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 8000434:	2300      	movs	r3, #0
 8000436:	b292      	uxth	r2, r2
 8000438:	910c      	str	r1, [sp, #48]	; 0x30
 800043a:	920f      	str	r2, [sp, #60]	; 0x3c
 800043c:	900d      	str	r0, [sp, #52]	; 0x34
 800043e:	9310      	str	r3, [sp, #64]	; 0x40
 8000440:	461f      	mov	r7, r3
 8000442:	46a0      	mov	r8, r4
 8000444:	9a06      	ldr	r2, [sp, #24]
 8000446:	9908      	ldr	r1, [sp, #32]
 8000448:	fb02 1403 	mla	r4, r2, r3, r1
 800044c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800044e:	1aa4      	subs	r4, r4, r2
 8000450:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	; 0x34
 8000454:	920b      	str	r2, [sp, #44]	; 0x2c
 8000456:	2300      	movs	r3, #0
 8000458:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800045a:	9307      	str	r3, [sp, #28]
 800045c:	9205      	str	r2, [sp, #20]
 800045e:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8000460:	42a0      	cmp	r0, r4
 8000462:	da55      	bge.n	8000510 <arm_convolve_HWC_q7_RGB+0x144>
 8000464:	9a06      	ldr	r2, [sp, #24]
 8000466:	9908      	ldr	r1, [sp, #32]
 8000468:	f9bd 9014 	ldrsh.w	r9, [sp, #20]
 800046c:	fb02 1303 	mla	r3, r2, r3, r1
 8000470:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8000472:	4686      	mov	lr, r0
 8000474:	1a99      	subs	r1, r3, r2
 8000476:	4603      	mov	r3, r0
 8000478:	4589      	cmp	r9, r1
 800047a:	da42      	bge.n	8000502 <arm_convolve_HWC_q7_RGB+0x136>
 800047c:	f1be 0f00 	cmp.w	lr, #0
 8000480:	fb06 fa03 	mul.w	sl, r6, r3
 8000484:	db32      	blt.n	80004ec <arm_convolve_HWC_q7_RGB+0x120>
 8000486:	429e      	cmp	r6, r3
 8000488:	f340 80d6 	ble.w	8000638 <arm_convolve_HWC_q7_RGB+0x26c>
 800048c:	f108 0206 	add.w	r2, r8, #6
 8000490:	46cc      	mov	ip, r9
 8000492:	464b      	mov	r3, r9
 8000494:	e021      	b.n	80004da <arm_convolve_HWC_q7_RGB+0x10e>
 8000496:	eb0a 080c 	add.w	r8, sl, ip
 800049a:	4566      	cmp	r6, ip
 800049c:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 80004a0:	dd1f      	ble.n	80004e2 <arm_convolve_HWC_q7_RGB+0x116>
 80004a2:	f855 c008 	ldr.w	ip, [r5, r8]
 80004a6:	fa2f f88c 	sxtb16	r8, ip
 80004aa:	ea4f 4b18 	mov.w	fp, r8, lsr #16
 80004ae:	ea4f 2c3c 	mov.w	ip, ip, ror #8
 80004b2:	ea4f 4b0b 	mov.w	fp, fp, lsl #16
 80004b6:	fa2f fc8c 	sxtb16	ip, ip
 80004ba:	fa1f fc8c 	uxth.w	ip, ip
 80004be:	ea4b 0c0c 	orr.w	ip, fp, ip
 80004c2:	f822 8c06 	strh.w	r8, [r2, #-6]
 80004c6:	4690      	mov	r8, r2
 80004c8:	f8c0 c002 	str.w	ip, [r0, #2]
 80004cc:	3301      	adds	r3, #1
 80004ce:	b21b      	sxth	r3, r3
 80004d0:	428b      	cmp	r3, r1
 80004d2:	f102 0206 	add.w	r2, r2, #6
 80004d6:	469c      	mov	ip, r3
 80004d8:	da13      	bge.n	8000502 <arm_convolve_HWC_q7_RGB+0x136>
 80004da:	2b00      	cmp	r3, #0
 80004dc:	f1a2 0006 	sub.w	r0, r2, #6
 80004e0:	dad9      	bge.n	8000496 <arm_convolve_HWC_q7_RGB+0xca>
 80004e2:	6007      	str	r7, [r0, #0]
 80004e4:	4690      	mov	r8, r2
 80004e6:	f822 7c02 	strh.w	r7, [r2, #-2]
 80004ea:	e7ef      	b.n	80004cc <arm_convolve_HWC_q7_RGB+0x100>
 80004ec:	464b      	mov	r3, r9
 80004ee:	3301      	adds	r3, #1
 80004f0:	b21b      	sxth	r3, r3
 80004f2:	428b      	cmp	r3, r1
 80004f4:	f8c8 7000 	str.w	r7, [r8]
 80004f8:	f8a8 7004 	strh.w	r7, [r8, #4]
 80004fc:	f108 0806 	add.w	r8, r8, #6
 8000500:	dbf5      	blt.n	80004ee <arm_convolve_HWC_q7_RGB+0x122>
 8000502:	f10e 0e01 	add.w	lr, lr, #1
 8000506:	fa0f fe8e 	sxth.w	lr, lr
 800050a:	45a6      	cmp	lr, r4
 800050c:	4673      	mov	r3, lr
 800050e:	dbb3      	blt.n	8000478 <arm_convolve_HWC_q7_RGB+0xac>
 8000510:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000512:	4598      	cmp	r8, r3
 8000514:	f000 80a4 	beq.w	8000660 <arm_convolve_HWC_q7_RGB+0x294>
 8000518:	9b07      	ldr	r3, [sp, #28]
 800051a:	9906      	ldr	r1, [sp, #24]
 800051c:	3301      	adds	r3, #1
 800051e:	b21b      	sxth	r3, r3
 8000520:	461a      	mov	r2, r3
 8000522:	9307      	str	r3, [sp, #28]
 8000524:	9b05      	ldr	r3, [sp, #20]
 8000526:	440b      	add	r3, r1
 8000528:	990a      	ldr	r1, [sp, #40]	; 0x28
 800052a:	b29b      	uxth	r3, r3
 800052c:	428a      	cmp	r2, r1
 800052e:	9305      	str	r3, [sp, #20]
 8000530:	4613      	mov	r3, r2
 8000532:	db94      	blt.n	800045e <arm_convolve_HWC_q7_RGB+0x92>
 8000534:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8000536:	9906      	ldr	r1, [sp, #24]
 8000538:	3301      	adds	r3, #1
 800053a:	b21b      	sxth	r3, r3
 800053c:	461a      	mov	r2, r3
 800053e:	9310      	str	r3, [sp, #64]	; 0x40
 8000540:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8000542:	440b      	add	r3, r1
 8000544:	990a      	ldr	r1, [sp, #40]	; 0x28
 8000546:	b29b      	uxth	r3, r3
 8000548:	428a      	cmp	r2, r1
 800054a:	930d      	str	r3, [sp, #52]	; 0x34
 800054c:	4613      	mov	r3, r2
 800054e:	f6ff af79 	blt.w	8000444 <arm_convolve_HWC_q7_RGB+0x78>
 8000552:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 8000554:	4543      	cmp	r3, r8
 8000556:	d06b      	beq.n	8000630 <arm_convolve_HWC_q7_RGB+0x264>
 8000558:	9912      	ldr	r1, [sp, #72]	; 0x48
 800055a:	2900      	cmp	r1, #0
 800055c:	d068      	beq.n	8000630 <arm_convolve_HWC_q7_RGB+0x264>
 800055e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8000560:	9a08      	ldr	r2, [sp, #32]
 8000562:	980e      	ldr	r0, [sp, #56]	; 0x38
 8000564:	4f4b      	ldr	r7, [pc, #300]	; (8000694 <arm_convolve_HWC_q7_RGB+0x2c8>)
 8000566:	f8dd e044 	ldr.w	lr, [sp, #68]	; 0x44
 800056a:	461e      	mov	r6, r3
 800056c:	4416      	add	r6, r2
 800056e:	fb02 f606 	mul.w	r6, r2, r6
 8000572:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8000574:	468a      	mov	sl, r1
 8000576:	f3c6 068f 	ubfx	r6, r6, #2, #16
 800057a:	9927      	ldr	r1, [sp, #156]	; 0x9c
 800057c:	f003 0c03 	and.w	ip, r3, #3
 8000580:	1e73      	subs	r3, r6, #1
 8000582:	2201      	movs	r2, #1
 8000584:	b29b      	uxth	r3, r3
 8000586:	448a      	add	sl, r1
 8000588:	9929      	ldr	r1, [sp, #164]	; 0xa4
 800058a:	f8cd c020 	str.w	ip, [sp, #32]
 800058e:	4413      	add	r3, r2
 8000590:	f10c 39ff 	add.w	r9, ip, #4294967295
 8000594:	fa1f f989 	uxth.w	r9, r9
 8000598:	ea4f 0b83 	mov.w	fp, r3, lsl #2
 800059c:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 80005a0:	4082      	lsls	r2, r0
 80005a2:	9305      	str	r3, [sp, #20]
 80005a4:	9824      	ldr	r0, [sp, #144]	; 0x90
 80005a6:	f109 0301 	add.w	r3, r9, #1
 80005aa:	9307      	str	r3, [sp, #28]
 80005ac:	0853      	lsrs	r3, r2, #1
 80005ae:	f100 38ff 	add.w	r8, r0, #4294967295
 80005b2:	9306      	str	r3, [sp, #24]
 80005b4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80005b6:	f918 3f01 	ldrsb.w	r3, [r8, #1]!
 80005ba:	4093      	lsls	r3, r2
 80005bc:	9a06      	ldr	r2, [sp, #24]
 80005be:	4413      	add	r3, r2
 80005c0:	2e00      	cmp	r6, #0
 80005c2:	d05f      	beq.n	8000684 <arm_convolve_HWC_q7_RGB+0x2b8>
 80005c4:	9d29      	ldr	r5, [sp, #164]	; 0xa4
 80005c6:	eb0e 0c0b 	add.w	ip, lr, fp
 80005ca:	f85e 2b04 	ldr.w	r2, [lr], #4
 80005ce:	fa2f f082 	sxtb16	r0, r2
 80005d2:	b284      	uxth	r4, r0
 80005d4:	ea4f 2232 	mov.w	r2, r2, ror #8
 80005d8:	6829      	ldr	r1, [r5, #0]
 80005da:	fa2f f282 	sxtb16	r2, r2
 80005de:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80005e2:	fb24 3101 	smlad	r1, r4, r1, r3
 80005e6:	ea02 0307 	and.w	r3, r2, r7
 80005ea:	ea43 4310 	orr.w	r3, r3, r0, lsr #16
 80005ee:	686a      	ldr	r2, [r5, #4]
 80005f0:	3508      	adds	r5, #8
 80005f2:	fb23 1302 	smlad	r3, r3, r2, r1
 80005f6:	45f4      	cmp	ip, lr
 80005f8:	d1e7      	bne.n	80005ca <arm_convolve_HWC_q7_RGB+0x1fe>
 80005fa:	9905      	ldr	r1, [sp, #20]
 80005fc:	9a08      	ldr	r2, [sp, #32]
 80005fe:	b16a      	cbz	r2, 800061c <arm_convolve_HWC_q7_RGB+0x250>
 8000600:	f10e 32ff 	add.w	r2, lr, #4294967295
 8000604:	eb0e 0509 	add.w	r5, lr, r9
 8000608:	f912 0f01 	ldrsb.w	r0, [r2, #1]!
 800060c:	f831 4b02 	ldrh.w	r4, [r1], #2
 8000610:	4295      	cmp	r5, r2
 8000612:	fb14 3300 	smlabb	r3, r4, r0, r3
 8000616:	d1f7      	bne.n	8000608 <arm_convolve_HWC_q7_RGB+0x23c>
 8000618:	9a07      	ldr	r2, [sp, #28]
 800061a:	4496      	add	lr, r2
 800061c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800061e:	4113      	asrs	r3, r2
 8000620:	f303 0307 	ssat	r3, #8, r3
 8000624:	9a27      	ldr	r2, [sp, #156]	; 0x9c
 8000626:	f802 3b01 	strb.w	r3, [r2], #1
 800062a:	4592      	cmp	sl, r2
 800062c:	9227      	str	r2, [sp, #156]	; 0x9c
 800062e:	d1c1      	bne.n	80005b4 <arm_convolve_HWC_q7_RGB+0x1e8>
 8000630:	2000      	movs	r0, #0
 8000632:	b017      	add	sp, #92	; 0x5c
 8000634:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000638:	464b      	mov	r3, r9
 800063a:	3301      	adds	r3, #1
 800063c:	b21b      	sxth	r3, r3
 800063e:	428b      	cmp	r3, r1
 8000640:	f8c8 7000 	str.w	r7, [r8]
 8000644:	f8a8 7004 	strh.w	r7, [r8, #4]
 8000648:	f108 0806 	add.w	r8, r8, #6
 800064c:	dbf5      	blt.n	800063a <arm_convolve_HWC_q7_RGB+0x26e>
 800064e:	f10e 0e01 	add.w	lr, lr, #1
 8000652:	fa0f fe8e 	sxth.w	lr, lr
 8000656:	45a6      	cmp	lr, r4
 8000658:	4673      	mov	r3, lr
 800065a:	f6ff af0d 	blt.w	8000478 <arm_convolve_HWC_q7_RGB+0xac>
 800065e:	e757      	b.n	8000510 <arm_convolve_HWC_q7_RGB+0x144>
 8000660:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8000662:	9303      	str	r3, [sp, #12]
 8000664:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8000666:	9302      	str	r3, [sp, #8]
 8000668:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800066a:	9301      	str	r3, [sp, #4]
 800066c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800066e:	9300      	str	r3, [sp, #0]
 8000670:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8000672:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8000674:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8000676:	9811      	ldr	r0, [sp, #68]	; 0x44
 8000678:	f001 fa00 	bl	8001a7c <arm_nn_mat_mult_kernel_q7_q15>
 800067c:	f8dd 80a4 	ldr.w	r8, [sp, #164]	; 0xa4
 8000680:	9027      	str	r0, [sp, #156]	; 0x9c
 8000682:	e749      	b.n	8000518 <arm_convolve_HWC_q7_RGB+0x14c>
 8000684:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8000686:	e7b9      	b.n	80005fc <arm_convolve_HWC_q7_RGB+0x230>
 8000688:	f06f 0002 	mvn.w	r0, #2
 800068c:	b017      	add	sp, #92	; 0x5c
 800068e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000692:	bf00      	nop
 8000694:	ffff0000 	.word	0xffff0000

08000698 <arm_convolve_HWC_q7_basic>:
 8000698:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800069c:	b099      	sub	sp, #100	; 0x64
 800069e:	f8bd 5088 	ldrh.w	r5, [sp, #136]	; 0x88
 80006a2:	9515      	str	r5, [sp, #84]	; 0x54
 80006a4:	f8bd 508c 	ldrh.w	r5, [sp, #140]	; 0x8c
 80006a8:	950b      	str	r5, [sp, #44]	; 0x2c
 80006aa:	f8bd 5090 	ldrh.w	r5, [sp, #144]	; 0x90
 80006ae:	950c      	str	r5, [sp, #48]	; 0x30
 80006b0:	f8bd 5094 	ldrh.w	r5, [sp, #148]	; 0x94
 80006b4:	f8bd 40a8 	ldrh.w	r4, [sp, #168]	; 0xa8
 80006b8:	9509      	str	r5, [sp, #36]	; 0x24
 80006ba:	f8bd 509c 	ldrh.w	r5, [sp, #156]	; 0x9c
 80006be:	9516      	str	r5, [sp, #88]	; 0x58
 80006c0:	f8bd 50a0 	ldrh.w	r5, [sp, #160]	; 0xa0
 80006c4:	940d      	str	r4, [sp, #52]	; 0x34
 80006c6:	9511      	str	r5, [sp, #68]	; 0x44
 80006c8:	9007      	str	r0, [sp, #28]
 80006ca:	9206      	str	r2, [sp, #24]
 80006cc:	9314      	str	r3, [sp, #80]	; 0x50
 80006ce:	2c00      	cmp	r4, #0
 80006d0:	f000 80f8 	beq.w	80008c4 <arm_convolve_HWC_q7_basic+0x22c>
 80006d4:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
 80006d6:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 80006d8:	ea4f 0942 	mov.w	r9, r2, lsl #1
 80006dc:	4610      	mov	r0, r2
 80006de:	4263      	negs	r3, r4
 80006e0:	468b      	mov	fp, r1
 80006e2:	9c2b      	ldr	r4, [sp, #172]	; 0xac
 80006e4:	fb05 f109 	mul.w	r1, r5, r9
 80006e8:	fb15 f205 	smulbb	r2, r5, r5
 80006ec:	b29b      	uxth	r3, r3
 80006ee:	fb12 f200 	smulbb	r2, r2, r0
 80006f2:	fb05 f101 	mul.w	r1, r5, r1
 80006f6:	4618      	mov	r0, r3
 80006f8:	b292      	uxth	r2, r2
 80006fa:	9317      	str	r3, [sp, #92]	; 0x5c
 80006fc:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 8000700:	2300      	movs	r3, #0
 8000702:	9212      	str	r2, [sp, #72]	; 0x48
 8000704:	910f      	str	r1, [sp, #60]	; 0x3c
 8000706:	9010      	str	r0, [sp, #64]	; 0x40
 8000708:	9313      	str	r3, [sp, #76]	; 0x4c
 800070a:	46a2      	mov	sl, r4
 800070c:	461a      	mov	r2, r3
 800070e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8000710:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000712:	fb03 1302 	mla	r3, r3, r2, r1
 8000716:	990c      	ldr	r1, [sp, #48]	; 0x30
 8000718:	1a5b      	subs	r3, r3, r1
 800071a:	9305      	str	r3, [sp, #20]
 800071c:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
 8000720:	930e      	str	r3, [sp, #56]	; 0x38
 8000722:	2200      	movs	r2, #0
 8000724:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8000726:	920a      	str	r2, [sp, #40]	; 0x28
 8000728:	9308      	str	r3, [sp, #32]
 800072a:	990e      	ldr	r1, [sp, #56]	; 0x38
 800072c:	9805      	ldr	r0, [sp, #20]
 800072e:	4281      	cmp	r1, r0
 8000730:	da3b      	bge.n	80007aa <arm_convolve_HWC_q7_basic+0x112>
 8000732:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000734:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8000736:	f9bd 7020 	ldrsh.w	r7, [sp, #32]
 800073a:	fb03 0202 	mla	r2, r3, r2, r0
 800073e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000740:	460e      	mov	r6, r1
 8000742:	1ad5      	subs	r5, r2, r3
 8000744:	460a      	mov	r2, r1
 8000746:	42af      	cmp	r7, r5
 8000748:	da29      	bge.n	800079e <arm_convolve_HWC_q7_basic+0x106>
 800074a:	2e00      	cmp	r6, #0
 800074c:	fb0b f802 	mul.w	r8, fp, r2
 8000750:	f2c0 80c8 	blt.w	80008e4 <arm_convolve_HWC_q7_basic+0x24c>
 8000754:	4593      	cmp	fp, r2
 8000756:	f340 80b9 	ble.w	80008cc <arm_convolve_HWC_q7_basic+0x234>
 800075a:	46be      	mov	lr, r7
 800075c:	463c      	mov	r4, r7
 800075e:	e007      	b.n	8000770 <arm_convolve_HWC_q7_basic+0xd8>
 8000760:	3401      	adds	r4, #1
 8000762:	b224      	sxth	r4, r4
 8000764:	f006 fda0 	bl	80072a8 <memset>
 8000768:	42ac      	cmp	r4, r5
 800076a:	44ca      	add	sl, r9
 800076c:	46a6      	mov	lr, r4
 800076e:	da16      	bge.n	800079e <arm_convolve_HWC_q7_basic+0x106>
 8000770:	2c00      	cmp	r4, #0
 8000772:	4650      	mov	r0, sl
 8000774:	464a      	mov	r2, r9
 8000776:	f04f 0100 	mov.w	r1, #0
 800077a:	dbf1      	blt.n	8000760 <arm_convolve_HWC_q7_basic+0xc8>
 800077c:	45f3      	cmp	fp, lr
 800077e:	ddef      	ble.n	8000760 <arm_convolve_HWC_q7_basic+0xc8>
 8000780:	9907      	ldr	r1, [sp, #28]
 8000782:	9a06      	ldr	r2, [sp, #24]
 8000784:	eb08 000e 	add.w	r0, r8, lr
 8000788:	3401      	adds	r4, #1
 800078a:	fb02 1000 	mla	r0, r2, r0, r1
 800078e:	b224      	sxth	r4, r4
 8000790:	4651      	mov	r1, sl
 8000792:	f001 fd21 	bl	80021d8 <arm_q7_to_q15_no_shift>
 8000796:	42ac      	cmp	r4, r5
 8000798:	44ca      	add	sl, r9
 800079a:	46a6      	mov	lr, r4
 800079c:	dbe8      	blt.n	8000770 <arm_convolve_HWC_q7_basic+0xd8>
 800079e:	3601      	adds	r6, #1
 80007a0:	9b05      	ldr	r3, [sp, #20]
 80007a2:	b236      	sxth	r6, r6
 80007a4:	429e      	cmp	r6, r3
 80007a6:	4632      	mov	r2, r6
 80007a8:	dbcd      	blt.n	8000746 <arm_convolve_HWC_q7_basic+0xae>
 80007aa:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80007ac:	459a      	cmp	sl, r3
 80007ae:	f000 80a5 	beq.w	80008fc <arm_convolve_HWC_q7_basic+0x264>
 80007b2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80007b4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80007b6:	3201      	adds	r2, #1
 80007b8:	b213      	sxth	r3, r2
 80007ba:	9a08      	ldr	r2, [sp, #32]
 80007bc:	930a      	str	r3, [sp, #40]	; 0x28
 80007be:	440a      	add	r2, r1
 80007c0:	990d      	ldr	r1, [sp, #52]	; 0x34
 80007c2:	b292      	uxth	r2, r2
 80007c4:	428b      	cmp	r3, r1
 80007c6:	9208      	str	r2, [sp, #32]
 80007c8:	461a      	mov	r2, r3
 80007ca:	dbae      	blt.n	800072a <arm_convolve_HWC_q7_basic+0x92>
 80007cc:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80007ce:	9909      	ldr	r1, [sp, #36]	; 0x24
 80007d0:	3201      	adds	r2, #1
 80007d2:	b213      	sxth	r3, r2
 80007d4:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80007d6:	9313      	str	r3, [sp, #76]	; 0x4c
 80007d8:	440a      	add	r2, r1
 80007da:	990d      	ldr	r1, [sp, #52]	; 0x34
 80007dc:	b292      	uxth	r2, r2
 80007de:	428b      	cmp	r3, r1
 80007e0:	9210      	str	r2, [sp, #64]	; 0x40
 80007e2:	461a      	mov	r2, r3
 80007e4:	db93      	blt.n	800070e <arm_convolve_HWC_q7_basic+0x76>
 80007e6:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80007e8:	459a      	cmp	sl, r3
 80007ea:	d06b      	beq.n	80008c4 <arm_convolve_HWC_q7_basic+0x22c>
 80007ec:	9915      	ldr	r1, [sp, #84]	; 0x54
 80007ee:	2900      	cmp	r1, #0
 80007f0:	d068      	beq.n	80008c4 <arm_convolve_HWC_q7_basic+0x22c>
 80007f2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80007f4:	9b06      	ldr	r3, [sp, #24]
 80007f6:	9811      	ldr	r0, [sp, #68]	; 0x44
 80007f8:	4f4a      	ldr	r7, [pc, #296]	; (8000924 <arm_convolve_HWC_q7_basic+0x28c>)
 80007fa:	f8dd e050 	ldr.w	lr, [sp, #80]	; 0x50
 80007fe:	fb02 f303 	mul.w	r3, r2, r3
 8000802:	fb02 f303 	mul.w	r3, r2, r3
 8000806:	f3c3 068f 	ubfx	r6, r3, #2, #16
 800080a:	9b12      	ldr	r3, [sp, #72]	; 0x48
 800080c:	468a      	mov	sl, r1
 800080e:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8000810:	f003 0c03 	and.w	ip, r3, #3
 8000814:	1e73      	subs	r3, r6, #1
 8000816:	2201      	movs	r2, #1
 8000818:	b29b      	uxth	r3, r3
 800081a:	448a      	add	sl, r1
 800081c:	992b      	ldr	r1, [sp, #172]	; 0xac
 800081e:	f8cd c020 	str.w	ip, [sp, #32]
 8000822:	4413      	add	r3, r2
 8000824:	f10c 39ff 	add.w	r9, ip, #4294967295
 8000828:	fa1f f989 	uxth.w	r9, r9
 800082c:	ea4f 0b83 	mov.w	fp, r3, lsl #2
 8000830:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 8000834:	4082      	lsls	r2, r0
 8000836:	9305      	str	r3, [sp, #20]
 8000838:	9826      	ldr	r0, [sp, #152]	; 0x98
 800083a:	f109 0301 	add.w	r3, r9, #1
 800083e:	9307      	str	r3, [sp, #28]
 8000840:	0853      	lsrs	r3, r2, #1
 8000842:	f100 38ff 	add.w	r8, r0, #4294967295
 8000846:	9306      	str	r3, [sp, #24]
 8000848:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800084a:	f918 3f01 	ldrsb.w	r3, [r8, #1]!
 800084e:	4093      	lsls	r3, r2
 8000850:	9a06      	ldr	r2, [sp, #24]
 8000852:	4413      	add	r3, r2
 8000854:	2e00      	cmp	r6, #0
 8000856:	d063      	beq.n	8000920 <arm_convolve_HWC_q7_basic+0x288>
 8000858:	9d2b      	ldr	r5, [sp, #172]	; 0xac
 800085a:	eb0e 0c0b 	add.w	ip, lr, fp
 800085e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8000862:	fa2f f082 	sxtb16	r0, r2
 8000866:	b284      	uxth	r4, r0
 8000868:	ea4f 2232 	mov.w	r2, r2, ror #8
 800086c:	6829      	ldr	r1, [r5, #0]
 800086e:	fa2f f282 	sxtb16	r2, r2
 8000872:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000876:	fb24 3101 	smlad	r1, r4, r1, r3
 800087a:	ea02 0307 	and.w	r3, r2, r7
 800087e:	ea43 4310 	orr.w	r3, r3, r0, lsr #16
 8000882:	686a      	ldr	r2, [r5, #4]
 8000884:	3508      	adds	r5, #8
 8000886:	fb23 1302 	smlad	r3, r3, r2, r1
 800088a:	45e6      	cmp	lr, ip
 800088c:	d1e7      	bne.n	800085e <arm_convolve_HWC_q7_basic+0x1c6>
 800088e:	9905      	ldr	r1, [sp, #20]
 8000890:	9a08      	ldr	r2, [sp, #32]
 8000892:	b16a      	cbz	r2, 80008b0 <arm_convolve_HWC_q7_basic+0x218>
 8000894:	f10e 32ff 	add.w	r2, lr, #4294967295
 8000898:	eb0e 0509 	add.w	r5, lr, r9
 800089c:	f912 0f01 	ldrsb.w	r0, [r2, #1]!
 80008a0:	f831 4b02 	ldrh.w	r4, [r1], #2
 80008a4:	4295      	cmp	r5, r2
 80008a6:	fb14 3300 	smlabb	r3, r4, r0, r3
 80008aa:	d1f7      	bne.n	800089c <arm_convolve_HWC_q7_basic+0x204>
 80008ac:	9a07      	ldr	r2, [sp, #28]
 80008ae:	4496      	add	lr, r2
 80008b0:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80008b2:	4113      	asrs	r3, r2
 80008b4:	f303 0307 	ssat	r3, #8, r3
 80008b8:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80008ba:	f802 3b01 	strb.w	r3, [r2], #1
 80008be:	4552      	cmp	r2, sl
 80008c0:	9229      	str	r2, [sp, #164]	; 0xa4
 80008c2:	d1c1      	bne.n	8000848 <arm_convolve_HWC_q7_basic+0x1b0>
 80008c4:	2000      	movs	r0, #0
 80008c6:	b019      	add	sp, #100	; 0x64
 80008c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80008cc:	463c      	mov	r4, r7
 80008ce:	3401      	adds	r4, #1
 80008d0:	4650      	mov	r0, sl
 80008d2:	464a      	mov	r2, r9
 80008d4:	2100      	movs	r1, #0
 80008d6:	b224      	sxth	r4, r4
 80008d8:	f006 fce6 	bl	80072a8 <memset>
 80008dc:	42a5      	cmp	r5, r4
 80008de:	44ca      	add	sl, r9
 80008e0:	dcf5      	bgt.n	80008ce <arm_convolve_HWC_q7_basic+0x236>
 80008e2:	e75c      	b.n	800079e <arm_convolve_HWC_q7_basic+0x106>
 80008e4:	463c      	mov	r4, r7
 80008e6:	3401      	adds	r4, #1
 80008e8:	4650      	mov	r0, sl
 80008ea:	464a      	mov	r2, r9
 80008ec:	2100      	movs	r1, #0
 80008ee:	b224      	sxth	r4, r4
 80008f0:	f006 fcda 	bl	80072a8 <memset>
 80008f4:	42ac      	cmp	r4, r5
 80008f6:	44ca      	add	sl, r9
 80008f8:	dbf5      	blt.n	80008e6 <arm_convolve_HWC_q7_basic+0x24e>
 80008fa:	e750      	b.n	800079e <arm_convolve_HWC_q7_basic+0x106>
 80008fc:	9b29      	ldr	r3, [sp, #164]	; 0xa4
 80008fe:	9303      	str	r3, [sp, #12]
 8000900:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8000902:	9302      	str	r3, [sp, #8]
 8000904:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8000906:	9301      	str	r3, [sp, #4]
 8000908:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800090a:	9300      	str	r3, [sp, #0]
 800090c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800090e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8000910:	992b      	ldr	r1, [sp, #172]	; 0xac
 8000912:	9814      	ldr	r0, [sp, #80]	; 0x50
 8000914:	f001 f8b2 	bl	8001a7c <arm_nn_mat_mult_kernel_q7_q15>
 8000918:	f8dd a0ac 	ldr.w	sl, [sp, #172]	; 0xac
 800091c:	9029      	str	r0, [sp, #164]	; 0xa4
 800091e:	e748      	b.n	80007b2 <arm_convolve_HWC_q7_basic+0x11a>
 8000920:	992b      	ldr	r1, [sp, #172]	; 0xac
 8000922:	e7b5      	b.n	8000890 <arm_convolve_HWC_q7_basic+0x1f8>
 8000924:	ffff0000 	.word	0xffff0000

08000928 <arm_convolve_HWC_q7_basic_nonsquare>:
 8000928:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800092c:	b09b      	sub	sp, #108	; 0x6c
 800092e:	f8bd 60a8 	ldrh.w	r6, [sp, #168]	; 0xa8
 8000932:	960a      	str	r6, [sp, #40]	; 0x28
 8000934:	f8bd 60ac 	ldrh.w	r6, [sp, #172]	; 0xac
 8000938:	9616      	str	r6, [sp, #88]	; 0x58
 800093a:	f8bd 60b4 	ldrh.w	r6, [sp, #180]	; 0xb4
 800093e:	f8bd 40c4 	ldrh.w	r4, [sp, #196]	; 0xc4
 8000942:	9617      	str	r6, [sp, #92]	; 0x5c
 8000944:	f8bd 60b8 	ldrh.w	r6, [sp, #184]	; 0xb8
 8000948:	9418      	str	r4, [sp, #96]	; 0x60
 800094a:	9611      	str	r6, [sp, #68]	; 0x44
 800094c:	f8bd 60c0 	ldrh.w	r6, [sp, #192]	; 0xc0
 8000950:	f8bd 4094 	ldrh.w	r4, [sp, #148]	; 0x94
 8000954:	f8bd 70a0 	ldrh.w	r7, [sp, #160]	; 0xa0
 8000958:	960d      	str	r6, [sp, #52]	; 0x34
 800095a:	9e18      	ldr	r6, [sp, #96]	; 0x60
 800095c:	9414      	str	r4, [sp, #80]	; 0x50
 800095e:	f8bd 509c 	ldrh.w	r5, [sp, #156]	; 0x9c
 8000962:	f8bd 4098 	ldrh.w	r4, [sp, #152]	; 0x98
 8000966:	970c      	str	r7, [sp, #48]	; 0x30
 8000968:	f8bd 70a4 	ldrh.w	r7, [sp, #164]	; 0xa4
 800096c:	940b      	str	r4, [sp, #44]	; 0x2c
 800096e:	9515      	str	r5, [sp, #84]	; 0x54
 8000970:	9719      	str	r7, [sp, #100]	; 0x64
 8000972:	2e00      	cmp	r6, #0
 8000974:	f000 80fe 	beq.w	8000b74 <arm_convolve_HWC_q7_basic_nonsquare+0x24c>
 8000978:	ea4f 0943 	mov.w	r9, r3, lsl #1
 800097c:	9205      	str	r2, [sp, #20]
 800097e:	461a      	mov	r2, r3
 8000980:	468b      	mov	fp, r1
 8000982:	9007      	str	r0, [sp, #28]
 8000984:	fb14 f102 	smulbb	r1, r4, r2
 8000988:	fb09 f004 	mul.w	r0, r9, r4
 800098c:	9c32      	ldr	r4, [sp, #200]	; 0xc8
 800098e:	9306      	str	r3, [sp, #24]
 8000990:	fb05 f000 	mul.w	r0, r5, r0
 8000994:	fb11 f105 	smulbb	r1, r1, r5
 8000998:	427a      	negs	r2, r7
 800099a:	2300      	movs	r3, #0
 800099c:	b292      	uxth	r2, r2
 800099e:	eb04 0040 	add.w	r0, r4, r0, lsl #1
 80009a2:	b289      	uxth	r1, r1
 80009a4:	9210      	str	r2, [sp, #64]	; 0x40
 80009a6:	900f      	str	r0, [sp, #60]	; 0x3c
 80009a8:	9112      	str	r1, [sp, #72]	; 0x48
 80009aa:	9313      	str	r3, [sp, #76]	; 0x4c
 80009ac:	46a2      	mov	sl, r4
 80009ae:	461a      	mov	r2, r3
 80009b0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d061      	beq.n	8000a7a <arm_convolve_HWC_q7_basic_nonsquare+0x152>
 80009b6:	9915      	ldr	r1, [sp, #84]	; 0x54
 80009b8:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80009ba:	9819      	ldr	r0, [sp, #100]	; 0x64
 80009bc:	fb02 1303 	mla	r3, r2, r3, r1
 80009c0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80009c2:	1a1b      	subs	r3, r3, r0
 80009c4:	4251      	negs	r1, r2
 80009c6:	9304      	str	r3, [sp, #16]
 80009c8:	b28b      	uxth	r3, r1
 80009ca:	2200      	movs	r2, #0
 80009cc:	9308      	str	r3, [sp, #32]
 80009ce:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
 80009d2:	9209      	str	r2, [sp, #36]	; 0x24
 80009d4:	930e      	str	r3, [sp, #56]	; 0x38
 80009d6:	990e      	ldr	r1, [sp, #56]	; 0x38
 80009d8:	9804      	ldr	r0, [sp, #16]
 80009da:	4281      	cmp	r1, r0
 80009dc:	da3c      	bge.n	8000a58 <arm_convolve_HWC_q7_basic_nonsquare+0x130>
 80009de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80009e0:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80009e2:	f9bd 7020 	ldrsh.w	r7, [sp, #32]
 80009e6:	fb02 0203 	mla	r2, r2, r3, r0
 80009ea:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80009ec:	460e      	mov	r6, r1
 80009ee:	1ad5      	subs	r5, r2, r3
 80009f0:	460a      	mov	r2, r1
 80009f2:	42af      	cmp	r7, r5
 80009f4:	da2a      	bge.n	8000a4c <arm_convolve_HWC_q7_basic_nonsquare+0x124>
 80009f6:	2e00      	cmp	r6, #0
 80009f8:	fb0b f802 	mul.w	r8, fp, r2
 80009fc:	f2c0 80ca 	blt.w	8000b94 <arm_convolve_HWC_q7_basic_nonsquare+0x26c>
 8000a00:	9b05      	ldr	r3, [sp, #20]
 8000a02:	4293      	cmp	r3, r2
 8000a04:	f340 80ba 	ble.w	8000b7c <arm_convolve_HWC_q7_basic_nonsquare+0x254>
 8000a08:	46be      	mov	lr, r7
 8000a0a:	463c      	mov	r4, r7
 8000a0c:	e007      	b.n	8000a1e <arm_convolve_HWC_q7_basic_nonsquare+0xf6>
 8000a0e:	3401      	adds	r4, #1
 8000a10:	b224      	sxth	r4, r4
 8000a12:	f006 fc49 	bl	80072a8 <memset>
 8000a16:	42ac      	cmp	r4, r5
 8000a18:	44ca      	add	sl, r9
 8000a1a:	46a6      	mov	lr, r4
 8000a1c:	da16      	bge.n	8000a4c <arm_convolve_HWC_q7_basic_nonsquare+0x124>
 8000a1e:	2c00      	cmp	r4, #0
 8000a20:	4650      	mov	r0, sl
 8000a22:	464a      	mov	r2, r9
 8000a24:	f04f 0100 	mov.w	r1, #0
 8000a28:	dbf1      	blt.n	8000a0e <arm_convolve_HWC_q7_basic_nonsquare+0xe6>
 8000a2a:	45f3      	cmp	fp, lr
 8000a2c:	ddef      	ble.n	8000a0e <arm_convolve_HWC_q7_basic_nonsquare+0xe6>
 8000a2e:	9907      	ldr	r1, [sp, #28]
 8000a30:	9a06      	ldr	r2, [sp, #24]
 8000a32:	eb08 000e 	add.w	r0, r8, lr
 8000a36:	3401      	adds	r4, #1
 8000a38:	fb02 1000 	mla	r0, r2, r0, r1
 8000a3c:	b224      	sxth	r4, r4
 8000a3e:	4651      	mov	r1, sl
 8000a40:	f001 fbca 	bl	80021d8 <arm_q7_to_q15_no_shift>
 8000a44:	42ac      	cmp	r4, r5
 8000a46:	44ca      	add	sl, r9
 8000a48:	46a6      	mov	lr, r4
 8000a4a:	dbe8      	blt.n	8000a1e <arm_convolve_HWC_q7_basic_nonsquare+0xf6>
 8000a4c:	3601      	adds	r6, #1
 8000a4e:	9b04      	ldr	r3, [sp, #16]
 8000a50:	b236      	sxth	r6, r6
 8000a52:	429e      	cmp	r6, r3
 8000a54:	4632      	mov	r2, r6
 8000a56:	dbcc      	blt.n	80009f2 <arm_convolve_HWC_q7_basic_nonsquare+0xca>
 8000a58:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8000a5a:	459a      	cmp	sl, r3
 8000a5c:	f000 80a6 	beq.w	8000bac <arm_convolve_HWC_q7_basic_nonsquare+0x284>
 8000a60:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8000a62:	990a      	ldr	r1, [sp, #40]	; 0x28
 8000a64:	3201      	adds	r2, #1
 8000a66:	b213      	sxth	r3, r2
 8000a68:	9a08      	ldr	r2, [sp, #32]
 8000a6a:	9309      	str	r3, [sp, #36]	; 0x24
 8000a6c:	440a      	add	r2, r1
 8000a6e:	990d      	ldr	r1, [sp, #52]	; 0x34
 8000a70:	b292      	uxth	r2, r2
 8000a72:	428b      	cmp	r3, r1
 8000a74:	9208      	str	r2, [sp, #32]
 8000a76:	461a      	mov	r2, r3
 8000a78:	dbad      	blt.n	80009d6 <arm_convolve_HWC_q7_basic_nonsquare+0xae>
 8000a7a:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8000a7c:	9916      	ldr	r1, [sp, #88]	; 0x58
 8000a7e:	3201      	adds	r2, #1
 8000a80:	b213      	sxth	r3, r2
 8000a82:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8000a84:	9313      	str	r3, [sp, #76]	; 0x4c
 8000a86:	440a      	add	r2, r1
 8000a88:	9918      	ldr	r1, [sp, #96]	; 0x60
 8000a8a:	b292      	uxth	r2, r2
 8000a8c:	428b      	cmp	r3, r1
 8000a8e:	9210      	str	r2, [sp, #64]	; 0x40
 8000a90:	461a      	mov	r2, r3
 8000a92:	db8d      	blt.n	80009b0 <arm_convolve_HWC_q7_basic_nonsquare+0x88>
 8000a94:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8000a96:	4553      	cmp	r3, sl
 8000a98:	d06c      	beq.n	8000b74 <arm_convolve_HWC_q7_basic_nonsquare+0x24c>
 8000a9a:	9914      	ldr	r1, [sp, #80]	; 0x50
 8000a9c:	2900      	cmp	r1, #0
 8000a9e:	d069      	beq.n	8000b74 <arm_convolve_HWC_q7_basic_nonsquare+0x24c>
 8000aa0:	9b06      	ldr	r3, [sp, #24]
 8000aa2:	9e15      	ldr	r6, [sp, #84]	; 0x54
 8000aa4:	9811      	ldr	r0, [sp, #68]	; 0x44
 8000aa6:	4f4b      	ldr	r7, [pc, #300]	; (8000bd4 <arm_convolve_HWC_q7_basic_nonsquare+0x2ac>)
 8000aa8:	f8dd e090 	ldr.w	lr, [sp, #144]	; 0x90
 8000aac:	fb06 f603 	mul.w	r6, r6, r3
 8000ab0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8000ab2:	fb03 f306 	mul.w	r3, r3, r6
 8000ab6:	f3c3 068f 	ubfx	r6, r3, #2, #16
 8000aba:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8000abc:	468a      	mov	sl, r1
 8000abe:	992f      	ldr	r1, [sp, #188]	; 0xbc
 8000ac0:	f003 0c03 	and.w	ip, r3, #3
 8000ac4:	1e73      	subs	r3, r6, #1
 8000ac6:	2201      	movs	r2, #1
 8000ac8:	b29b      	uxth	r3, r3
 8000aca:	448a      	add	sl, r1
 8000acc:	9932      	ldr	r1, [sp, #200]	; 0xc8
 8000ace:	f8cd c01c 	str.w	ip, [sp, #28]
 8000ad2:	4413      	add	r3, r2
 8000ad4:	f10c 39ff 	add.w	r9, ip, #4294967295
 8000ad8:	fa1f f989 	uxth.w	r9, r9
 8000adc:	ea4f 0b83 	mov.w	fp, r3, lsl #2
 8000ae0:	eb01 03c3 	add.w	r3, r1, r3, lsl #3
 8000ae4:	4082      	lsls	r2, r0
 8000ae6:	9304      	str	r3, [sp, #16]
 8000ae8:	982c      	ldr	r0, [sp, #176]	; 0xb0
 8000aea:	f109 0301 	add.w	r3, r9, #1
 8000aee:	9306      	str	r3, [sp, #24]
 8000af0:	0853      	lsrs	r3, r2, #1
 8000af2:	f100 38ff 	add.w	r8, r0, #4294967295
 8000af6:	9305      	str	r3, [sp, #20]
 8000af8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8000afa:	f918 3f01 	ldrsb.w	r3, [r8, #1]!
 8000afe:	4093      	lsls	r3, r2
 8000b00:	9a05      	ldr	r2, [sp, #20]
 8000b02:	4413      	add	r3, r2
 8000b04:	2e00      	cmp	r6, #0
 8000b06:	d063      	beq.n	8000bd0 <arm_convolve_HWC_q7_basic_nonsquare+0x2a8>
 8000b08:	9d32      	ldr	r5, [sp, #200]	; 0xc8
 8000b0a:	eb0e 0c0b 	add.w	ip, lr, fp
 8000b0e:	f85e 2b04 	ldr.w	r2, [lr], #4
 8000b12:	fa2f f082 	sxtb16	r0, r2
 8000b16:	b284      	uxth	r4, r0
 8000b18:	ea4f 2232 	mov.w	r2, r2, ror #8
 8000b1c:	6829      	ldr	r1, [r5, #0]
 8000b1e:	fa2f f282 	sxtb16	r2, r2
 8000b22:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000b26:	fb24 3101 	smlad	r1, r4, r1, r3
 8000b2a:	ea02 0307 	and.w	r3, r2, r7
 8000b2e:	ea43 4310 	orr.w	r3, r3, r0, lsr #16
 8000b32:	686a      	ldr	r2, [r5, #4]
 8000b34:	3508      	adds	r5, #8
 8000b36:	fb23 1302 	smlad	r3, r3, r2, r1
 8000b3a:	45e6      	cmp	lr, ip
 8000b3c:	d1e7      	bne.n	8000b0e <arm_convolve_HWC_q7_basic_nonsquare+0x1e6>
 8000b3e:	9904      	ldr	r1, [sp, #16]
 8000b40:	9a07      	ldr	r2, [sp, #28]
 8000b42:	b16a      	cbz	r2, 8000b60 <arm_convolve_HWC_q7_basic_nonsquare+0x238>
 8000b44:	f10e 32ff 	add.w	r2, lr, #4294967295
 8000b48:	eb0e 0509 	add.w	r5, lr, r9
 8000b4c:	f912 0f01 	ldrsb.w	r0, [r2, #1]!
 8000b50:	f831 4b02 	ldrh.w	r4, [r1], #2
 8000b54:	4295      	cmp	r5, r2
 8000b56:	fb14 3300 	smlabb	r3, r4, r0, r3
 8000b5a:	d1f7      	bne.n	8000b4c <arm_convolve_HWC_q7_basic_nonsquare+0x224>
 8000b5c:	9a06      	ldr	r2, [sp, #24]
 8000b5e:	4496      	add	lr, r2
 8000b60:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8000b62:	4113      	asrs	r3, r2
 8000b64:	f303 0307 	ssat	r3, #8, r3
 8000b68:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8000b6a:	f802 3b01 	strb.w	r3, [r2], #1
 8000b6e:	4552      	cmp	r2, sl
 8000b70:	922f      	str	r2, [sp, #188]	; 0xbc
 8000b72:	d1c1      	bne.n	8000af8 <arm_convolve_HWC_q7_basic_nonsquare+0x1d0>
 8000b74:	2000      	movs	r0, #0
 8000b76:	b01b      	add	sp, #108	; 0x6c
 8000b78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000b7c:	463c      	mov	r4, r7
 8000b7e:	3401      	adds	r4, #1
 8000b80:	4650      	mov	r0, sl
 8000b82:	464a      	mov	r2, r9
 8000b84:	2100      	movs	r1, #0
 8000b86:	b224      	sxth	r4, r4
 8000b88:	f006 fb8e 	bl	80072a8 <memset>
 8000b8c:	42ac      	cmp	r4, r5
 8000b8e:	44ca      	add	sl, r9
 8000b90:	dbf5      	blt.n	8000b7e <arm_convolve_HWC_q7_basic_nonsquare+0x256>
 8000b92:	e75b      	b.n	8000a4c <arm_convolve_HWC_q7_basic_nonsquare+0x124>
 8000b94:	463c      	mov	r4, r7
 8000b96:	3401      	adds	r4, #1
 8000b98:	4650      	mov	r0, sl
 8000b9a:	464a      	mov	r2, r9
 8000b9c:	2100      	movs	r1, #0
 8000b9e:	b224      	sxth	r4, r4
 8000ba0:	f006 fb82 	bl	80072a8 <memset>
 8000ba4:	42ac      	cmp	r4, r5
 8000ba6:	44ca      	add	sl, r9
 8000ba8:	dbf5      	blt.n	8000b96 <arm_convolve_HWC_q7_basic_nonsquare+0x26e>
 8000baa:	e74f      	b.n	8000a4c <arm_convolve_HWC_q7_basic_nonsquare+0x124>
 8000bac:	9b2f      	ldr	r3, [sp, #188]	; 0xbc
 8000bae:	9303      	str	r3, [sp, #12]
 8000bb0:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
 8000bb2:	9302      	str	r3, [sp, #8]
 8000bb4:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8000bb6:	9301      	str	r3, [sp, #4]
 8000bb8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8000bba:	9300      	str	r3, [sp, #0]
 8000bbc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8000bbe:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8000bc0:	9932      	ldr	r1, [sp, #200]	; 0xc8
 8000bc2:	9824      	ldr	r0, [sp, #144]	; 0x90
 8000bc4:	f000 ff5a 	bl	8001a7c <arm_nn_mat_mult_kernel_q7_q15>
 8000bc8:	f8dd a0c8 	ldr.w	sl, [sp, #200]	; 0xc8
 8000bcc:	902f      	str	r0, [sp, #188]	; 0xbc
 8000bce:	e747      	b.n	8000a60 <arm_convolve_HWC_q7_basic_nonsquare+0x138>
 8000bd0:	9932      	ldr	r1, [sp, #200]	; 0xc8
 8000bd2:	e7b5      	b.n	8000b40 <arm_convolve_HWC_q7_basic_nonsquare+0x218>
 8000bd4:	ffff0000 	.word	0xffff0000

08000bd8 <arm_convolve_HWC_q7_fast>:
 8000bd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000bdc:	b09b      	sub	sp, #108	; 0x6c
 8000bde:	4693      	mov	fp, r2
 8000be0:	9314      	str	r3, [sp, #80]	; 0x50
 8000be2:	f8bd 3090 	ldrh.w	r3, [sp, #144]	; 0x90
 8000be6:	9004      	str	r0, [sp, #16]
 8000be8:	9315      	str	r3, [sp, #84]	; 0x54
 8000bea:	4618      	mov	r0, r3
 8000bec:	f8bd 3094 	ldrh.w	r3, [sp, #148]	; 0x94
 8000bf0:	930c      	str	r3, [sp, #48]	; 0x30
 8000bf2:	461a      	mov	r2, r3
 8000bf4:	f8bd 3098 	ldrh.w	r3, [sp, #152]	; 0x98
 8000bf8:	930b      	str	r3, [sp, #44]	; 0x2c
 8000bfa:	461c      	mov	r4, r3
 8000bfc:	f8bd 309c 	ldrh.w	r3, [sp, #156]	; 0x9c
 8000c00:	9309      	str	r3, [sp, #36]	; 0x24
 8000c02:	f8bd 30a4 	ldrh.w	r3, [sp, #164]	; 0xa4
 8000c06:	9316      	str	r3, [sp, #88]	; 0x58
 8000c08:	f8bd 30a8 	ldrh.w	r3, [sp, #168]	; 0xa8
 8000c0c:	9313      	str	r3, [sp, #76]	; 0x4c
 8000c0e:	f01b 0f03 	tst.w	fp, #3
 8000c12:	f8bd 30b0 	ldrh.w	r3, [sp, #176]	; 0xb0
 8000c16:	930d      	str	r3, [sp, #52]	; 0x34
 8000c18:	f040 8369 	bne.w	80012ee <arm_convolve_HWC_q7_fast+0x716>
 8000c1c:	f010 0301 	ands.w	r3, r0, #1
 8000c20:	f040 8365 	bne.w	80012ee <arm_convolve_HWC_q7_fast+0x716>
 8000c24:	460f      	mov	r7, r1
 8000c26:	2c00      	cmp	r4, #0
 8000c28:	f000 8366 	beq.w	80012f8 <arm_convolve_HWC_q7_fast+0x720>
 8000c2c:	fb02 f102 	mul.w	r1, r2, r2
 8000c30:	4264      	negs	r4, r4
 8000c32:	b2a0      	uxth	r0, r4
 8000c34:	0049      	lsls	r1, r1, #1
 8000c36:	9c2d      	ldr	r4, [sp, #180]	; 0xb4
 8000c38:	9011      	str	r0, [sp, #68]	; 0x44
 8000c3a:	fb12 f202 	smulbb	r2, r2, r2
 8000c3e:	fb0b f101 	mul.w	r1, fp, r1
 8000c42:	fb12 f20b 	smulbb	r2, r2, fp
 8000c46:	b292      	uxth	r2, r2
 8000c48:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 8000c4c:	9210      	str	r2, [sp, #64]	; 0x40
 8000c4e:	910e      	str	r1, [sp, #56]	; 0x38
 8000c50:	900f      	str	r0, [sp, #60]	; 0x3c
 8000c52:	9312      	str	r3, [sp, #72]	; 0x48
 8000c54:	ea4f 094b 	mov.w	r9, fp, lsl #1
 8000c58:	46a2      	mov	sl, r4
 8000c5a:	461a      	mov	r2, r3
 8000c5c:	f8cd b018 	str.w	fp, [sp, #24]
 8000c60:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8000c62:	2b00      	cmp	r3, #0
 8000c64:	d05e      	beq.n	8000d24 <arm_convolve_HWC_q7_fast+0x14c>
 8000c66:	990c      	ldr	r1, [sp, #48]	; 0x30
 8000c68:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000c6a:	fb03 1302 	mla	r3, r3, r2, r1
 8000c6e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8000c70:	1a5b      	subs	r3, r3, r1
 8000c72:	9305      	str	r3, [sp, #20]
 8000c74:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	; 0x3c
 8000c78:	930a      	str	r3, [sp, #40]	; 0x28
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8000c7e:	9208      	str	r2, [sp, #32]
 8000c80:	9307      	str	r3, [sp, #28]
 8000c82:	990a      	ldr	r1, [sp, #40]	; 0x28
 8000c84:	9805      	ldr	r0, [sp, #20]
 8000c86:	4281      	cmp	r1, r0
 8000c88:	da3b      	bge.n	8000d02 <arm_convolve_HWC_q7_fast+0x12a>
 8000c8a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000c8c:	980c      	ldr	r0, [sp, #48]	; 0x30
 8000c8e:	f9bd 801c 	ldrsh.w	r8, [sp, #28]
 8000c92:	fb03 0202 	mla	r2, r3, r2, r0
 8000c96:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8000c98:	460e      	mov	r6, r1
 8000c9a:	1ad5      	subs	r5, r2, r3
 8000c9c:	460a      	mov	r2, r1
 8000c9e:	45a8      	cmp	r8, r5
 8000ca0:	da29      	bge.n	8000cf6 <arm_convolve_HWC_q7_fast+0x11e>
 8000ca2:	2e00      	cmp	r6, #0
 8000ca4:	fb07 fb02 	mul.w	fp, r7, r2
 8000ca8:	f2c0 82a2 	blt.w	80011f0 <arm_convolve_HWC_q7_fast+0x618>
 8000cac:	4297      	cmp	r7, r2
 8000cae:	f340 8287 	ble.w	80011c0 <arm_convolve_HWC_q7_fast+0x5e8>
 8000cb2:	46c6      	mov	lr, r8
 8000cb4:	4644      	mov	r4, r8
 8000cb6:	e007      	b.n	8000cc8 <arm_convolve_HWC_q7_fast+0xf0>
 8000cb8:	3401      	adds	r4, #1
 8000cba:	b224      	sxth	r4, r4
 8000cbc:	f006 faf4 	bl	80072a8 <memset>
 8000cc0:	42ac      	cmp	r4, r5
 8000cc2:	44ca      	add	sl, r9
 8000cc4:	46a6      	mov	lr, r4
 8000cc6:	da16      	bge.n	8000cf6 <arm_convolve_HWC_q7_fast+0x11e>
 8000cc8:	2c00      	cmp	r4, #0
 8000cca:	4650      	mov	r0, sl
 8000ccc:	464a      	mov	r2, r9
 8000cce:	f04f 0100 	mov.w	r1, #0
 8000cd2:	dbf1      	blt.n	8000cb8 <arm_convolve_HWC_q7_fast+0xe0>
 8000cd4:	4577      	cmp	r7, lr
 8000cd6:	ddef      	ble.n	8000cb8 <arm_convolve_HWC_q7_fast+0xe0>
 8000cd8:	9904      	ldr	r1, [sp, #16]
 8000cda:	9a06      	ldr	r2, [sp, #24]
 8000cdc:	eb0b 000e 	add.w	r0, fp, lr
 8000ce0:	3401      	adds	r4, #1
 8000ce2:	fb02 1000 	mla	r0, r2, r0, r1
 8000ce6:	b224      	sxth	r4, r4
 8000ce8:	4651      	mov	r1, sl
 8000cea:	f001 faad 	bl	8002248 <arm_q7_to_q15_reordered_no_shift>
 8000cee:	42ac      	cmp	r4, r5
 8000cf0:	44ca      	add	sl, r9
 8000cf2:	46a6      	mov	lr, r4
 8000cf4:	dbe8      	blt.n	8000cc8 <arm_convolve_HWC_q7_fast+0xf0>
 8000cf6:	3601      	adds	r6, #1
 8000cf8:	9b05      	ldr	r3, [sp, #20]
 8000cfa:	b236      	sxth	r6, r6
 8000cfc:	429e      	cmp	r6, r3
 8000cfe:	4632      	mov	r2, r6
 8000d00:	dbcd      	blt.n	8000c9e <arm_convolve_HWC_q7_fast+0xc6>
 8000d02:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8000d04:	459a      	cmp	sl, r3
 8000d06:	f000 829d 	beq.w	8001244 <arm_convolve_HWC_q7_fast+0x66c>
 8000d0a:	9a08      	ldr	r2, [sp, #32]
 8000d0c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8000d0e:	3201      	adds	r2, #1
 8000d10:	b213      	sxth	r3, r2
 8000d12:	9a07      	ldr	r2, [sp, #28]
 8000d14:	9308      	str	r3, [sp, #32]
 8000d16:	440a      	add	r2, r1
 8000d18:	990d      	ldr	r1, [sp, #52]	; 0x34
 8000d1a:	b292      	uxth	r2, r2
 8000d1c:	428b      	cmp	r3, r1
 8000d1e:	9207      	str	r2, [sp, #28]
 8000d20:	461a      	mov	r2, r3
 8000d22:	dbae      	blt.n	8000c82 <arm_convolve_HWC_q7_fast+0xaa>
 8000d24:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8000d26:	9909      	ldr	r1, [sp, #36]	; 0x24
 8000d28:	3201      	adds	r2, #1
 8000d2a:	b213      	sxth	r3, r2
 8000d2c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8000d2e:	9312      	str	r3, [sp, #72]	; 0x48
 8000d30:	440a      	add	r2, r1
 8000d32:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8000d34:	b292      	uxth	r2, r2
 8000d36:	428b      	cmp	r3, r1
 8000d38:	920f      	str	r2, [sp, #60]	; 0x3c
 8000d3a:	461a      	mov	r2, r3
 8000d3c:	db90      	blt.n	8000c60 <arm_convolve_HWC_q7_fast+0x88>
 8000d3e:	f8dd b018 	ldr.w	fp, [sp, #24]
 8000d42:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8000d44:	1a52      	subs	r2, r2, r1
 8000d46:	429a      	cmp	r2, r3
 8000d48:	9211      	str	r2, [sp, #68]	; 0x44
 8000d4a:	f340 813b 	ble.w	8000fc4 <arm_convolve_HWC_q7_fast+0x3ec>
 8000d4e:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
 8000d52:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
 8000d56:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8000d58:	fb12 f204 	smulbb	r2, r2, r4
 8000d5c:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8000d5e:	fb05 f005 	mul.w	r0, r5, r5
 8000d62:	fb15 f105 	smulbb	r1, r5, r5
 8000d66:	1b12      	subs	r2, r2, r4
 8000d68:	0040      	lsls	r0, r0, #1
 8000d6a:	fb0b f405 	mul.w	r4, fp, r5
 8000d6e:	9d2d      	ldr	r5, [sp, #180]	; 0xb4
 8000d70:	9407      	str	r4, [sp, #28]
 8000d72:	b292      	uxth	r2, r2
 8000d74:	fb0b f000 	mul.w	r0, fp, r0
 8000d78:	fb11 f10b 	smulbb	r1, r1, fp
 8000d7c:	eb05 0040 	add.w	r0, r5, r0, lsl #1
 8000d80:	b289      	uxth	r1, r1
 8000d82:	9217      	str	r2, [sp, #92]	; 0x5c
 8000d84:	0062      	lsls	r2, r4, #1
 8000d86:	9208      	str	r2, [sp, #32]
 8000d88:	9010      	str	r0, [sp, #64]	; 0x40
 8000d8a:	9118      	str	r1, [sp, #96]	; 0x60
 8000d8c:	ea4f 084b 	mov.w	r8, fp, lsl #1
 8000d90:	461a      	mov	r2, r3
 8000d92:	46d1      	mov	r9, sl
 8000d94:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	f000 829c 	beq.w	80012d4 <arm_convolve_HWC_q7_fast+0x6fc>
 8000d9c:	9909      	ldr	r1, [sp, #36]	; 0x24
 8000d9e:	fb01 f202 	mul.w	r2, r1, r2
 8000da2:	1ad1      	subs	r1, r2, r3
 8000da4:	9219      	str	r2, [sp, #100]	; 0x64
 8000da6:	425a      	negs	r2, r3
 8000da8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000daa:	18cb      	adds	r3, r1, r3
 8000dac:	9305      	str	r3, [sp, #20]
 8000dae:	b293      	uxth	r3, r2
 8000db0:	2400      	movs	r4, #0
 8000db2:	930f      	str	r3, [sp, #60]	; 0x3c
 8000db4:	f9bd 305c 	ldrsh.w	r3, [sp, #92]	; 0x5c
 8000db8:	940a      	str	r4, [sp, #40]	; 0x28
 8000dba:	930e      	str	r3, [sp, #56]	; 0x38
 8000dbc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8000dbe:	9905      	ldr	r1, [sp, #20]
 8000dc0:	428a      	cmp	r2, r1
 8000dc2:	da3d      	bge.n	8000e40 <arm_convolve_HWC_q7_fast+0x268>
 8000dc4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000dc6:	990c      	ldr	r1, [sp, #48]	; 0x30
 8000dc8:	fb03 1404 	mla	r4, r3, r4, r1
 8000dcc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8000dce:	1ae5      	subs	r5, r4, r3
 8000dd0:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	; 0x3c
 8000dd4:	9306      	str	r3, [sp, #24]
 8000dd6:	4692      	mov	sl, r2
 8000dd8:	4616      	mov	r6, r2
 8000dda:	9a06      	ldr	r2, [sp, #24]
 8000ddc:	42aa      	cmp	r2, r5
 8000dde:	da29      	bge.n	8000e34 <arm_convolve_HWC_q7_fast+0x25c>
 8000de0:	4643      	mov	r3, r8
 8000de2:	fb07 fa0a 	mul.w	sl, r7, sl
 8000de6:	46b0      	mov	r8, r6
 8000de8:	4696      	mov	lr, r2
 8000dea:	4614      	mov	r4, r2
 8000dec:	461e      	mov	r6, r3
 8000dee:	e007      	b.n	8000e00 <arm_convolve_HWC_q7_fast+0x228>
 8000df0:	3401      	adds	r4, #1
 8000df2:	b224      	sxth	r4, r4
 8000df4:	f006 fa58 	bl	80072a8 <memset>
 8000df8:	42ac      	cmp	r4, r5
 8000dfa:	44b1      	add	r9, r6
 8000dfc:	46a6      	mov	lr, r4
 8000dfe:	da16      	bge.n	8000e2e <arm_convolve_HWC_q7_fast+0x256>
 8000e00:	2c00      	cmp	r4, #0
 8000e02:	4632      	mov	r2, r6
 8000e04:	f04f 0100 	mov.w	r1, #0
 8000e08:	4648      	mov	r0, r9
 8000e0a:	dbf1      	blt.n	8000df0 <arm_convolve_HWC_q7_fast+0x218>
 8000e0c:	4577      	cmp	r7, lr
 8000e0e:	ddef      	ble.n	8000df0 <arm_convolve_HWC_q7_fast+0x218>
 8000e10:	9b04      	ldr	r3, [sp, #16]
 8000e12:	eb0a 000e 	add.w	r0, sl, lr
 8000e16:	3401      	adds	r4, #1
 8000e18:	4649      	mov	r1, r9
 8000e1a:	b224      	sxth	r4, r4
 8000e1c:	fb0b 3000 	mla	r0, fp, r0, r3
 8000e20:	465a      	mov	r2, fp
 8000e22:	f001 fa11 	bl	8002248 <arm_q7_to_q15_reordered_no_shift>
 8000e26:	42ac      	cmp	r4, r5
 8000e28:	44b1      	add	r9, r6
 8000e2a:	46a6      	mov	lr, r4
 8000e2c:	dbe8      	blt.n	8000e00 <arm_convolve_HWC_q7_fast+0x228>
 8000e2e:	4633      	mov	r3, r6
 8000e30:	4646      	mov	r6, r8
 8000e32:	4698      	mov	r8, r3
 8000e34:	3601      	adds	r6, #1
 8000e36:	9b05      	ldr	r3, [sp, #20]
 8000e38:	b236      	sxth	r6, r6
 8000e3a:	429e      	cmp	r6, r3
 8000e3c:	46b2      	mov	sl, r6
 8000e3e:	dbcc      	blt.n	8000dda <arm_convolve_HWC_q7_fast+0x202>
 8000e40:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8000e42:	4599      	cmp	r9, r3
 8000e44:	f000 8234 	beq.w	80012b0 <arm_convolve_HWC_q7_fast+0x6d8>
 8000e48:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8000e4a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8000e4c:	3201      	adds	r2, #1
 8000e4e:	b213      	sxth	r3, r2
 8000e50:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8000e52:	930a      	str	r3, [sp, #40]	; 0x28
 8000e54:	440a      	add	r2, r1
 8000e56:	b292      	uxth	r2, r2
 8000e58:	920f      	str	r2, [sp, #60]	; 0x3c
 8000e5a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8000e5c:	4293      	cmp	r3, r2
 8000e5e:	461c      	mov	r4, r3
 8000e60:	dbac      	blt.n	8000dbc <arm_convolve_HWC_q7_fast+0x1e4>
 8000e62:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8000e64:	4293      	cmp	r3, r2
 8000e66:	da38      	bge.n	8000eda <arm_convolve_HWC_q7_fast+0x302>
 8000e68:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8000e6a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8000e6c:	f8dd a010 	ldr.w	sl, [sp, #16]
 8000e70:	f8cd 8014 	str.w	r8, [sp, #20]
 8000e74:	1ad5      	subs	r5, r2, r3
 8000e76:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8000e78:	46c8      	mov	r8, r9
 8000e7a:	4415      	add	r5, r2
 8000e7c:	4699      	mov	r9, r3
 8000e7e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8000e80:	42aa      	cmp	r2, r5
 8000e82:	da1b      	bge.n	8000ebc <arm_convolve_HWC_q7_fast+0x2e4>
 8000e84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8000e86:	fb03 f604 	mul.w	r6, r3, r4
 8000e8a:	463b      	mov	r3, r7
 8000e8c:	4610      	mov	r0, r2
 8000e8e:	4647      	mov	r7, r8
 8000e90:	4614      	mov	r4, r2
 8000e92:	4698      	mov	r8, r3
 8000e94:	fb08 6000 	mla	r0, r8, r0, r6
 8000e98:	eba0 0009 	sub.w	r0, r0, r9
 8000e9c:	fb0b a000 	mla	r0, fp, r0, sl
 8000ea0:	4639      	mov	r1, r7
 8000ea2:	9a07      	ldr	r2, [sp, #28]
 8000ea4:	3401      	adds	r4, #1
 8000ea6:	f001 f9cf 	bl	8002248 <arm_q7_to_q15_reordered_no_shift>
 8000eaa:	b224      	sxth	r4, r4
 8000eac:	9b08      	ldr	r3, [sp, #32]
 8000eae:	42ac      	cmp	r4, r5
 8000eb0:	441f      	add	r7, r3
 8000eb2:	4620      	mov	r0, r4
 8000eb4:	dbee      	blt.n	8000e94 <arm_convolve_HWC_q7_fast+0x2bc>
 8000eb6:	4643      	mov	r3, r8
 8000eb8:	46b8      	mov	r8, r7
 8000eba:	461f      	mov	r7, r3
 8000ebc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8000ebe:	4598      	cmp	r8, r3
 8000ec0:	f000 81e4 	beq.w	800128c <arm_convolve_HWC_q7_fast+0x6b4>
 8000ec4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8000ec6:	3201      	adds	r2, #1
 8000ec8:	b213      	sxth	r3, r2
 8000eca:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8000ecc:	930a      	str	r3, [sp, #40]	; 0x28
 8000ece:	4293      	cmp	r3, r2
 8000ed0:	461c      	mov	r4, r3
 8000ed2:	dbd4      	blt.n	8000e7e <arm_convolve_HWC_q7_fast+0x2a6>
 8000ed4:	46c1      	mov	r9, r8
 8000ed6:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8000eda:	461a      	mov	r2, r3
 8000edc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8000ede:	4619      	mov	r1, r3
 8000ee0:	4291      	cmp	r1, r2
 8000ee2:	dd60      	ble.n	8000fa6 <arm_convolve_HWC_q7_fast+0x3ce>
 8000ee4:	4613      	mov	r3, r2
 8000ee6:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
 8000eea:	9919      	ldr	r1, [sp, #100]	; 0x64
 8000eec:	fb13 f202 	smulbb	r2, r3, r2
 8000ef0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8000ef2:	1ac9      	subs	r1, r1, r3
 8000ef4:	1ad2      	subs	r2, r2, r3
 8000ef6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8000ef8:	18cb      	adds	r3, r1, r3
 8000efa:	9305      	str	r3, [sp, #20]
 8000efc:	b293      	uxth	r3, r2
 8000efe:	930f      	str	r3, [sp, #60]	; 0x3c
 8000f00:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8000f02:	9905      	ldr	r1, [sp, #20]
 8000f04:	428a      	cmp	r2, r1
 8000f06:	da3e      	bge.n	8000f86 <arm_convolve_HWC_q7_fast+0x3ae>
 8000f08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8000f0a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8000f0c:	980c      	ldr	r0, [sp, #48]	; 0x30
 8000f0e:	fb01 0503 	mla	r5, r1, r3, r0
 8000f12:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8000f14:	1aed      	subs	r5, r5, r3
 8000f16:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	; 0x3c
 8000f1a:	9306      	str	r3, [sp, #24]
 8000f1c:	4692      	mov	sl, r2
 8000f1e:	4616      	mov	r6, r2
 8000f20:	9a06      	ldr	r2, [sp, #24]
 8000f22:	42aa      	cmp	r2, r5
 8000f24:	da29      	bge.n	8000f7a <arm_convolve_HWC_q7_fast+0x3a2>
 8000f26:	4643      	mov	r3, r8
 8000f28:	fb07 fa0a 	mul.w	sl, r7, sl
 8000f2c:	46b0      	mov	r8, r6
 8000f2e:	4696      	mov	lr, r2
 8000f30:	4614      	mov	r4, r2
 8000f32:	461e      	mov	r6, r3
 8000f34:	e007      	b.n	8000f46 <arm_convolve_HWC_q7_fast+0x36e>
 8000f36:	3401      	adds	r4, #1
 8000f38:	b224      	sxth	r4, r4
 8000f3a:	f006 f9b5 	bl	80072a8 <memset>
 8000f3e:	42ac      	cmp	r4, r5
 8000f40:	44b1      	add	r9, r6
 8000f42:	46a6      	mov	lr, r4
 8000f44:	da16      	bge.n	8000f74 <arm_convolve_HWC_q7_fast+0x39c>
 8000f46:	2c00      	cmp	r4, #0
 8000f48:	4632      	mov	r2, r6
 8000f4a:	f04f 0100 	mov.w	r1, #0
 8000f4e:	4648      	mov	r0, r9
 8000f50:	dbf1      	blt.n	8000f36 <arm_convolve_HWC_q7_fast+0x35e>
 8000f52:	4577      	cmp	r7, lr
 8000f54:	ddef      	ble.n	8000f36 <arm_convolve_HWC_q7_fast+0x35e>
 8000f56:	9b04      	ldr	r3, [sp, #16]
 8000f58:	eb0a 000e 	add.w	r0, sl, lr
 8000f5c:	3401      	adds	r4, #1
 8000f5e:	4649      	mov	r1, r9
 8000f60:	b224      	sxth	r4, r4
 8000f62:	fb0b 3000 	mla	r0, fp, r0, r3
 8000f66:	465a      	mov	r2, fp
 8000f68:	f001 f96e 	bl	8002248 <arm_q7_to_q15_reordered_no_shift>
 8000f6c:	42ac      	cmp	r4, r5
 8000f6e:	44b1      	add	r9, r6
 8000f70:	46a6      	mov	lr, r4
 8000f72:	dbe8      	blt.n	8000f46 <arm_convolve_HWC_q7_fast+0x36e>
 8000f74:	4633      	mov	r3, r6
 8000f76:	4646      	mov	r6, r8
 8000f78:	4698      	mov	r8, r3
 8000f7a:	3601      	adds	r6, #1
 8000f7c:	9b05      	ldr	r3, [sp, #20]
 8000f7e:	b236      	sxth	r6, r6
 8000f80:	429e      	cmp	r6, r3
 8000f82:	46b2      	mov	sl, r6
 8000f84:	dbcc      	blt.n	8000f20 <arm_convolve_HWC_q7_fast+0x348>
 8000f86:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8000f88:	4599      	cmp	r9, r3
 8000f8a:	f000 8149 	beq.w	8001220 <arm_convolve_HWC_q7_fast+0x648>
 8000f8e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8000f90:	9909      	ldr	r1, [sp, #36]	; 0x24
 8000f92:	3201      	adds	r2, #1
 8000f94:	b213      	sxth	r3, r2
 8000f96:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8000f98:	930a      	str	r3, [sp, #40]	; 0x28
 8000f9a:	440a      	add	r2, r1
 8000f9c:	b292      	uxth	r2, r2
 8000f9e:	920f      	str	r2, [sp, #60]	; 0x3c
 8000fa0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8000fa2:	4293      	cmp	r3, r2
 8000fa4:	dbac      	blt.n	8000f00 <arm_convolve_HWC_q7_fast+0x328>
 8000fa6:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8000fa8:	9909      	ldr	r1, [sp, #36]	; 0x24
 8000faa:	3201      	adds	r2, #1
 8000fac:	b213      	sxth	r3, r2
 8000fae:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8000fb0:	9312      	str	r3, [sp, #72]	; 0x48
 8000fb2:	440a      	add	r2, r1
 8000fb4:	9911      	ldr	r1, [sp, #68]	; 0x44
 8000fb6:	b292      	uxth	r2, r2
 8000fb8:	428b      	cmp	r3, r1
 8000fba:	9217      	str	r2, [sp, #92]	; 0x5c
 8000fbc:	461a      	mov	r2, r3
 8000fbe:	f6ff aee9 	blt.w	8000d94 <arm_convolve_HWC_q7_fast+0x1bc>
 8000fc2:	46ca      	mov	sl, r9
 8000fc4:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8000fc6:	429a      	cmp	r2, r3
 8000fc8:	f340 8090 	ble.w	80010ec <arm_convolve_HWC_q7_fast+0x514>
 8000fcc:	f8bd 4024 	ldrh.w	r4, [sp, #36]	; 0x24
 8000fd0:	f8bd 2048 	ldrh.w	r2, [sp, #72]	; 0x48
 8000fd4:	990c      	ldr	r1, [sp, #48]	; 0x30
 8000fd6:	9d2d      	ldr	r5, [sp, #180]	; 0xb4
 8000fd8:	f8cd b018 	str.w	fp, [sp, #24]
 8000fdc:	fb12 f204 	smulbb	r2, r2, r4
 8000fe0:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 8000fe2:	fb01 f001 	mul.w	r0, r1, r1
 8000fe6:	1b12      	subs	r2, r2, r4
 8000fe8:	0040      	lsls	r0, r0, #1
 8000fea:	fb11 f101 	smulbb	r1, r1, r1
 8000fee:	b292      	uxth	r2, r2
 8000ff0:	fb0b f000 	mul.w	r0, fp, r0
 8000ff4:	fb11 f10b 	smulbb	r1, r1, fp
 8000ff8:	4264      	negs	r4, r4
 8000ffa:	eb05 0040 	add.w	r0, r5, r0, lsl #1
 8000ffe:	b289      	uxth	r1, r1
 8001000:	920f      	str	r2, [sp, #60]	; 0x3c
 8001002:	b2a2      	uxth	r2, r4
 8001004:	9211      	str	r2, [sp, #68]	; 0x44
 8001006:	900a      	str	r0, [sp, #40]	; 0x28
 8001008:	9110      	str	r1, [sp, #64]	; 0x40
 800100a:	ea4f 094b 	mov.w	r9, fp, lsl #1
 800100e:	461a      	mov	r2, r3
 8001010:	990c      	ldr	r1, [sp, #48]	; 0x30
 8001012:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001014:	fb03 1302 	mla	r3, r3, r2, r1
 8001018:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800101a:	1a5b      	subs	r3, r3, r1
 800101c:	9305      	str	r3, [sp, #20]
 800101e:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	; 0x3c
 8001022:	930e      	str	r3, [sp, #56]	; 0x38
 8001024:	2200      	movs	r2, #0
 8001026:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8001028:	9208      	str	r2, [sp, #32]
 800102a:	9307      	str	r3, [sp, #28]
 800102c:	990e      	ldr	r1, [sp, #56]	; 0x38
 800102e:	9805      	ldr	r0, [sp, #20]
 8001030:	4281      	cmp	r1, r0
 8001032:	da3b      	bge.n	80010ac <arm_convolve_HWC_q7_fast+0x4d4>
 8001034:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001036:	980c      	ldr	r0, [sp, #48]	; 0x30
 8001038:	f9bd 801c 	ldrsh.w	r8, [sp, #28]
 800103c:	fb03 0202 	mla	r2, r3, r2, r0
 8001040:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8001042:	460e      	mov	r6, r1
 8001044:	1ad5      	subs	r5, r2, r3
 8001046:	460a      	mov	r2, r1
 8001048:	45a8      	cmp	r8, r5
 800104a:	da29      	bge.n	80010a0 <arm_convolve_HWC_q7_fast+0x4c8>
 800104c:	2e00      	cmp	r6, #0
 800104e:	fb07 fb02 	mul.w	fp, r7, r2
 8001052:	f2c0 80d9 	blt.w	8001208 <arm_convolve_HWC_q7_fast+0x630>
 8001056:	4297      	cmp	r7, r2
 8001058:	f340 80be 	ble.w	80011d8 <arm_convolve_HWC_q7_fast+0x600>
 800105c:	46c6      	mov	lr, r8
 800105e:	4644      	mov	r4, r8
 8001060:	e007      	b.n	8001072 <arm_convolve_HWC_q7_fast+0x49a>
 8001062:	3401      	adds	r4, #1
 8001064:	b224      	sxth	r4, r4
 8001066:	f006 f91f 	bl	80072a8 <memset>
 800106a:	42ac      	cmp	r4, r5
 800106c:	44ca      	add	sl, r9
 800106e:	46a6      	mov	lr, r4
 8001070:	da16      	bge.n	80010a0 <arm_convolve_HWC_q7_fast+0x4c8>
 8001072:	2c00      	cmp	r4, #0
 8001074:	4650      	mov	r0, sl
 8001076:	464a      	mov	r2, r9
 8001078:	f04f 0100 	mov.w	r1, #0
 800107c:	dbf1      	blt.n	8001062 <arm_convolve_HWC_q7_fast+0x48a>
 800107e:	4577      	cmp	r7, lr
 8001080:	ddef      	ble.n	8001062 <arm_convolve_HWC_q7_fast+0x48a>
 8001082:	9904      	ldr	r1, [sp, #16]
 8001084:	9a06      	ldr	r2, [sp, #24]
 8001086:	eb0b 000e 	add.w	r0, fp, lr
 800108a:	3401      	adds	r4, #1
 800108c:	fb02 1000 	mla	r0, r2, r0, r1
 8001090:	b224      	sxth	r4, r4
 8001092:	4651      	mov	r1, sl
 8001094:	f001 f8d8 	bl	8002248 <arm_q7_to_q15_reordered_no_shift>
 8001098:	42ac      	cmp	r4, r5
 800109a:	44ca      	add	sl, r9
 800109c:	46a6      	mov	lr, r4
 800109e:	dbe8      	blt.n	8001072 <arm_convolve_HWC_q7_fast+0x49a>
 80010a0:	3601      	adds	r6, #1
 80010a2:	9b05      	ldr	r3, [sp, #20]
 80010a4:	b236      	sxth	r6, r6
 80010a6:	429e      	cmp	r6, r3
 80010a8:	4632      	mov	r2, r6
 80010aa:	dbcd      	blt.n	8001048 <arm_convolve_HWC_q7_fast+0x470>
 80010ac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80010ae:	459a      	cmp	sl, r3
 80010b0:	f000 80da 	beq.w	8001268 <arm_convolve_HWC_q7_fast+0x690>
 80010b4:	9a08      	ldr	r2, [sp, #32]
 80010b6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80010b8:	3201      	adds	r2, #1
 80010ba:	b213      	sxth	r3, r2
 80010bc:	9a07      	ldr	r2, [sp, #28]
 80010be:	9308      	str	r3, [sp, #32]
 80010c0:	440a      	add	r2, r1
 80010c2:	990d      	ldr	r1, [sp, #52]	; 0x34
 80010c4:	b292      	uxth	r2, r2
 80010c6:	428b      	cmp	r3, r1
 80010c8:	9207      	str	r2, [sp, #28]
 80010ca:	461a      	mov	r2, r3
 80010cc:	dbae      	blt.n	800102c <arm_convolve_HWC_q7_fast+0x454>
 80010ce:	9a12      	ldr	r2, [sp, #72]	; 0x48
 80010d0:	9909      	ldr	r1, [sp, #36]	; 0x24
 80010d2:	3201      	adds	r2, #1
 80010d4:	b213      	sxth	r3, r2
 80010d6:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80010d8:	9312      	str	r3, [sp, #72]	; 0x48
 80010da:	440a      	add	r2, r1
 80010dc:	990d      	ldr	r1, [sp, #52]	; 0x34
 80010de:	b292      	uxth	r2, r2
 80010e0:	428b      	cmp	r3, r1
 80010e2:	920f      	str	r2, [sp, #60]	; 0x3c
 80010e4:	461a      	mov	r2, r3
 80010e6:	db93      	blt.n	8001010 <arm_convolve_HWC_q7_fast+0x438>
 80010e8:	f8dd b018 	ldr.w	fp, [sp, #24]
 80010ec:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
 80010ee:	4553      	cmp	r3, sl
 80010f0:	d062      	beq.n	80011b8 <arm_convolve_HWC_q7_fast+0x5e0>
 80010f2:	9915      	ldr	r1, [sp, #84]	; 0x54
 80010f4:	2900      	cmp	r1, #0
 80010f6:	d05f      	beq.n	80011b8 <arm_convolve_HWC_q7_fast+0x5e0>
 80010f8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80010fa:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 80010fc:	f8dd e050 	ldr.w	lr, [sp, #80]	; 0x50
 8001100:	fb02 f50b 	mul.w	r5, r2, fp
 8001104:	fb02 f505 	mul.w	r5, r2, r5
 8001108:	fb12 f002 	smulbb	r0, r2, r2
 800110c:	4688      	mov	r8, r1
 800110e:	f3c5 058f 	ubfx	r5, r5, #2, #16
 8001112:	992b      	ldr	r1, [sp, #172]	; 0xac
 8001114:	fb10 f00b 	smulbb	r0, r0, fp
 8001118:	1e6b      	subs	r3, r5, #1
 800111a:	f000 0003 	and.w	r0, r0, #3
 800111e:	2201      	movs	r2, #1
 8001120:	4488      	add	r8, r1
 8001122:	b29b      	uxth	r3, r3
 8001124:	992d      	ldr	r1, [sp, #180]	; 0xb4
 8001126:	9005      	str	r0, [sp, #20]
 8001128:	4413      	add	r3, r2
 800112a:	f100 3cff 	add.w	ip, r0, #4294967295
 800112e:	40a2      	lsls	r2, r4
 8001130:	9c28      	ldr	r4, [sp, #160]	; 0xa0
 8001132:	fa1f fc8c 	uxth.w	ip, ip
 8001136:	ea4f 0983 	mov.w	r9, r3, lsl #2
 800113a:	eb01 0ac3 	add.w	sl, r1, r3, lsl #3
 800113e:	0853      	lsrs	r3, r2, #1
 8001140:	1e67      	subs	r7, r4, #1
 8001142:	f10c 0b01 	add.w	fp, ip, #1
 8001146:	9304      	str	r3, [sp, #16]
 8001148:	4640      	mov	r0, r8
 800114a:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800114c:	f917 3f01 	ldrsb.w	r3, [r7, #1]!
 8001150:	4093      	lsls	r3, r2
 8001152:	9a04      	ldr	r2, [sp, #16]
 8001154:	4413      	add	r3, r2
 8001156:	2d00      	cmp	r5, #0
 8001158:	f000 80c7 	beq.w	80012ea <arm_convolve_HWC_q7_fast+0x712>
 800115c:	9e2d      	ldr	r6, [sp, #180]	; 0xb4
 800115e:	eb0e 0809 	add.w	r8, lr, r9
 8001162:	f85e 2b04 	ldr.w	r2, [lr], #4
 8001166:	6834      	ldr	r4, [r6, #0]
 8001168:	fa2f f182 	sxtb16	r1, r2
 800116c:	ea4f 2232 	mov.w	r2, r2, ror #8
 8001170:	fa2f f282 	sxtb16	r2, r2
 8001174:	fb21 3304 	smlad	r3, r1, r4, r3
 8001178:	6871      	ldr	r1, [r6, #4]
 800117a:	3608      	adds	r6, #8
 800117c:	fb22 3301 	smlad	r3, r2, r1, r3
 8001180:	45c6      	cmp	lr, r8
 8001182:	d1ee      	bne.n	8001162 <arm_convolve_HWC_q7_fast+0x58a>
 8001184:	4651      	mov	r1, sl
 8001186:	9a05      	ldr	r2, [sp, #20]
 8001188:	b162      	cbz	r2, 80011a4 <arm_convolve_HWC_q7_fast+0x5cc>
 800118a:	f10e 32ff 	add.w	r2, lr, #4294967295
 800118e:	eb0e 080c 	add.w	r8, lr, ip
 8001192:	f912 4f01 	ldrsb.w	r4, [r2, #1]!
 8001196:	f831 6b02 	ldrh.w	r6, [r1], #2
 800119a:	4542      	cmp	r2, r8
 800119c:	fb16 3304 	smlabb	r3, r6, r4, r3
 80011a0:	d1f7      	bne.n	8001192 <arm_convolve_HWC_q7_fast+0x5ba>
 80011a2:	44de      	add	lr, fp
 80011a4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80011a6:	4113      	asrs	r3, r2
 80011a8:	f303 0307 	ssat	r3, #8, r3
 80011ac:	9a2b      	ldr	r2, [sp, #172]	; 0xac
 80011ae:	f802 3b01 	strb.w	r3, [r2], #1
 80011b2:	4282      	cmp	r2, r0
 80011b4:	922b      	str	r2, [sp, #172]	; 0xac
 80011b6:	d1c8      	bne.n	800114a <arm_convolve_HWC_q7_fast+0x572>
 80011b8:	2000      	movs	r0, #0
 80011ba:	b01b      	add	sp, #108	; 0x6c
 80011bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80011c0:	4644      	mov	r4, r8
 80011c2:	3401      	adds	r4, #1
 80011c4:	4650      	mov	r0, sl
 80011c6:	464a      	mov	r2, r9
 80011c8:	2100      	movs	r1, #0
 80011ca:	b224      	sxth	r4, r4
 80011cc:	f006 f86c 	bl	80072a8 <memset>
 80011d0:	42ac      	cmp	r4, r5
 80011d2:	44ca      	add	sl, r9
 80011d4:	dbf5      	blt.n	80011c2 <arm_convolve_HWC_q7_fast+0x5ea>
 80011d6:	e58e      	b.n	8000cf6 <arm_convolve_HWC_q7_fast+0x11e>
 80011d8:	4644      	mov	r4, r8
 80011da:	3401      	adds	r4, #1
 80011dc:	4650      	mov	r0, sl
 80011de:	464a      	mov	r2, r9
 80011e0:	2100      	movs	r1, #0
 80011e2:	b224      	sxth	r4, r4
 80011e4:	f006 f860 	bl	80072a8 <memset>
 80011e8:	42ac      	cmp	r4, r5
 80011ea:	44ca      	add	sl, r9
 80011ec:	dbf5      	blt.n	80011da <arm_convolve_HWC_q7_fast+0x602>
 80011ee:	e757      	b.n	80010a0 <arm_convolve_HWC_q7_fast+0x4c8>
 80011f0:	4644      	mov	r4, r8
 80011f2:	3401      	adds	r4, #1
 80011f4:	4650      	mov	r0, sl
 80011f6:	464a      	mov	r2, r9
 80011f8:	2100      	movs	r1, #0
 80011fa:	b224      	sxth	r4, r4
 80011fc:	f006 f854 	bl	80072a8 <memset>
 8001200:	42ac      	cmp	r4, r5
 8001202:	44ca      	add	sl, r9
 8001204:	dbf5      	blt.n	80011f2 <arm_convolve_HWC_q7_fast+0x61a>
 8001206:	e576      	b.n	8000cf6 <arm_convolve_HWC_q7_fast+0x11e>
 8001208:	4644      	mov	r4, r8
 800120a:	3401      	adds	r4, #1
 800120c:	4650      	mov	r0, sl
 800120e:	464a      	mov	r2, r9
 8001210:	2100      	movs	r1, #0
 8001212:	b224      	sxth	r4, r4
 8001214:	f006 f848 	bl	80072a8 <memset>
 8001218:	42ac      	cmp	r4, r5
 800121a:	44ca      	add	sl, r9
 800121c:	dbf5      	blt.n	800120a <arm_convolve_HWC_q7_fast+0x632>
 800121e:	e73f      	b.n	80010a0 <arm_convolve_HWC_q7_fast+0x4c8>
 8001220:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8001222:	9303      	str	r3, [sp, #12]
 8001224:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8001226:	9302      	str	r3, [sp, #8]
 8001228:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800122a:	9301      	str	r3, [sp, #4]
 800122c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800122e:	9300      	str	r3, [sp, #0]
 8001230:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8001232:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8001234:	992d      	ldr	r1, [sp, #180]	; 0xb4
 8001236:	9814      	ldr	r0, [sp, #80]	; 0x50
 8001238:	f000 fdaa 	bl	8001d90 <arm_nn_mat_mult_kernel_q7_q15_reordered>
 800123c:	f8dd 90b4 	ldr.w	r9, [sp, #180]	; 0xb4
 8001240:	902b      	str	r0, [sp, #172]	; 0xac
 8001242:	e6a4      	b.n	8000f8e <arm_convolve_HWC_q7_fast+0x3b6>
 8001244:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 8001246:	9303      	str	r3, [sp, #12]
 8001248:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800124a:	9302      	str	r3, [sp, #8]
 800124c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800124e:	9301      	str	r3, [sp, #4]
 8001250:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8001252:	9300      	str	r3, [sp, #0]
 8001254:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8001256:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8001258:	992d      	ldr	r1, [sp, #180]	; 0xb4
 800125a:	9814      	ldr	r0, [sp, #80]	; 0x50
 800125c:	f000 fd98 	bl	8001d90 <arm_nn_mat_mult_kernel_q7_q15_reordered>
 8001260:	f8dd a0b4 	ldr.w	sl, [sp, #180]	; 0xb4
 8001264:	902b      	str	r0, [sp, #172]	; 0xac
 8001266:	e550      	b.n	8000d0a <arm_convolve_HWC_q7_fast+0x132>
 8001268:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 800126a:	9303      	str	r3, [sp, #12]
 800126c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800126e:	9302      	str	r3, [sp, #8]
 8001270:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8001272:	9301      	str	r3, [sp, #4]
 8001274:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8001276:	9300      	str	r3, [sp, #0]
 8001278:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800127a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800127c:	992d      	ldr	r1, [sp, #180]	; 0xb4
 800127e:	9814      	ldr	r0, [sp, #80]	; 0x50
 8001280:	f000 fd86 	bl	8001d90 <arm_nn_mat_mult_kernel_q7_q15_reordered>
 8001284:	f8dd a0b4 	ldr.w	sl, [sp, #180]	; 0xb4
 8001288:	902b      	str	r0, [sp, #172]	; 0xac
 800128a:	e713      	b.n	80010b4 <arm_convolve_HWC_q7_fast+0x4dc>
 800128c:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 800128e:	9303      	str	r3, [sp, #12]
 8001290:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8001292:	9302      	str	r3, [sp, #8]
 8001294:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8001296:	9301      	str	r3, [sp, #4]
 8001298:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800129a:	9300      	str	r3, [sp, #0]
 800129c:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800129e:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80012a0:	992d      	ldr	r1, [sp, #180]	; 0xb4
 80012a2:	9814      	ldr	r0, [sp, #80]	; 0x50
 80012a4:	f000 fd74 	bl	8001d90 <arm_nn_mat_mult_kernel_q7_q15_reordered>
 80012a8:	f8dd 80b4 	ldr.w	r8, [sp, #180]	; 0xb4
 80012ac:	902b      	str	r0, [sp, #172]	; 0xac
 80012ae:	e609      	b.n	8000ec4 <arm_convolve_HWC_q7_fast+0x2ec>
 80012b0:	9b2b      	ldr	r3, [sp, #172]	; 0xac
 80012b2:	9303      	str	r3, [sp, #12]
 80012b4:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 80012b6:	9302      	str	r3, [sp, #8]
 80012b8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80012ba:	9301      	str	r3, [sp, #4]
 80012bc:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80012be:	9300      	str	r3, [sp, #0]
 80012c0:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80012c2:	9b18      	ldr	r3, [sp, #96]	; 0x60
 80012c4:	992d      	ldr	r1, [sp, #180]	; 0xb4
 80012c6:	9814      	ldr	r0, [sp, #80]	; 0x50
 80012c8:	f000 fd62 	bl	8001d90 <arm_nn_mat_mult_kernel_q7_q15_reordered>
 80012cc:	f8dd 90b4 	ldr.w	r9, [sp, #180]	; 0xb4
 80012d0:	902b      	str	r0, [sp, #172]	; 0xac
 80012d2:	e5b9      	b.n	8000e48 <arm_convolve_HWC_q7_fast+0x270>
 80012d4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80012d6:	fb03 f302 	mul.w	r3, r3, r2
 80012da:	9319      	str	r3, [sp, #100]	; 0x64
 80012dc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80012de:	930a      	str	r3, [sp, #40]	; 0x28
 80012e0:	461c      	mov	r4, r3
 80012e2:	f9bd 305c 	ldrsh.w	r3, [sp, #92]	; 0x5c
 80012e6:	930e      	str	r3, [sp, #56]	; 0x38
 80012e8:	e5be      	b.n	8000e68 <arm_convolve_HWC_q7_fast+0x290>
 80012ea:	992d      	ldr	r1, [sp, #180]	; 0xb4
 80012ec:	e74b      	b.n	8001186 <arm_convolve_HWC_q7_fast+0x5ae>
 80012ee:	f06f 0002 	mvn.w	r0, #2
 80012f2:	b01b      	add	sp, #108	; 0x6c
 80012f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80012f8:	4623      	mov	r3, r4
 80012fa:	f8dd a0b4 	ldr.w	sl, [sp, #180]	; 0xb4
 80012fe:	9412      	str	r4, [sp, #72]	; 0x48
 8001300:	4621      	mov	r1, r4
 8001302:	e51e      	b.n	8000d42 <arm_convolve_HWC_q7_fast+0x16a>

08001304 <arm_convolve_HWC_q7_fast_nonsquare>:
 8001304:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001308:	b0a1      	sub	sp, #132	; 0x84
 800130a:	f8bd e0c0 	ldrh.w	lr, [sp, #192]	; 0xc0
 800130e:	f8cd e028 	str.w	lr, [sp, #40]	; 0x28
 8001312:	f8bd e0c4 	ldrh.w	lr, [sp, #196]	; 0xc4
 8001316:	f8cd e044 	str.w	lr, [sp, #68]	; 0x44
 800131a:	f8bd e0cc 	ldrh.w	lr, [sp, #204]	; 0xcc
 800131e:	f8cd e068 	str.w	lr, [sp, #104]	; 0x68
 8001322:	f8bd e0d0 	ldrh.w	lr, [sp, #208]	; 0xd0
 8001326:	f8bd 40ac 	ldrh.w	r4, [sp, #172]	; 0xac
 800132a:	f8bd 70b8 	ldrh.w	r7, [sp, #184]	; 0xb8
 800132e:	f8cd e064 	str.w	lr, [sp, #100]	; 0x64
 8001332:	f8bd e0d8 	ldrh.w	lr, [sp, #216]	; 0xd8
 8001336:	9418      	str	r4, [sp, #96]	; 0x60
 8001338:	f8bd 50b0 	ldrh.w	r5, [sp, #176]	; 0xb0
 800133c:	f8bd 60b4 	ldrh.w	r6, [sp, #180]	; 0xb4
 8001340:	970c      	str	r7, [sp, #48]	; 0x30
 8001342:	f8cd e038 	str.w	lr, [sp, #56]	; 0x38
 8001346:	f8bd 70bc 	ldrh.w	r7, [sp, #188]	; 0xbc
 800134a:	f8bd e0dc 	ldrh.w	lr, [sp, #220]	; 0xdc
 800134e:	950d      	str	r5, [sp, #52]	; 0x34
 8001350:	079c      	lsls	r4, r3, #30
 8001352:	9616      	str	r6, [sp, #88]	; 0x58
 8001354:	9714      	str	r7, [sp, #80]	; 0x50
 8001356:	f8cd e078 	str.w	lr, [sp, #120]	; 0x78
 800135a:	f040 8384 	bne.w	8001a66 <arm_convolve_HWC_q7_fast_nonsquare+0x762>
 800135e:	9c18      	ldr	r4, [sp, #96]	; 0x60
 8001360:	f014 0401 	ands.w	r4, r4, #1
 8001364:	f040 837f 	bne.w	8001a66 <arm_convolve_HWC_q7_fast_nonsquare+0x762>
 8001368:	9205      	str	r2, [sp, #20]
 800136a:	4688      	mov	r8, r1
 800136c:	9004      	str	r0, [sp, #16]
 800136e:	469b      	mov	fp, r3
 8001370:	2f00      	cmp	r7, #0
 8001372:	f000 837d 	beq.w	8001a70 <arm_convolve_HWC_q7_fast_nonsquare+0x76c>
 8001376:	006a      	lsls	r2, r5, #1
 8001378:	9838      	ldr	r0, [sp, #224]	; 0xe0
 800137a:	9412      	str	r4, [sp, #72]	; 0x48
 800137c:	fb06 f202 	mul.w	r2, r6, r2
 8001380:	fb16 f305 	smulbb	r3, r6, r5
 8001384:	fb0b f202 	mul.w	r2, fp, r2
 8001388:	fb13 f30b 	smulbb	r3, r3, fp
 800138c:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8001390:	4279      	negs	r1, r7
 8001392:	920f      	str	r2, [sp, #60]	; 0x3c
 8001394:	b29a      	uxth	r2, r3
 8001396:	b28b      	uxth	r3, r1
 8001398:	9213      	str	r2, [sp, #76]	; 0x4c
 800139a:	9310      	str	r3, [sp, #64]	; 0x40
 800139c:	ea4f 094b 	mov.w	r9, fp, lsl #1
 80013a0:	4682      	mov	sl, r0
 80013a2:	4622      	mov	r2, r4
 80013a4:	f8cd b01c 	str.w	fp, [sp, #28]
 80013a8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d061      	beq.n	8001472 <arm_convolve_HWC_q7_fast_nonsquare+0x16e>
 80013ae:	9916      	ldr	r1, [sp, #88]	; 0x58
 80013b0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80013b2:	9814      	ldr	r0, [sp, #80]	; 0x50
 80013b4:	fb02 1303 	mla	r3, r2, r3, r1
 80013b8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80013ba:	1a1b      	subs	r3, r3, r0
 80013bc:	4251      	negs	r1, r2
 80013be:	9306      	str	r3, [sp, #24]
 80013c0:	b28b      	uxth	r3, r1
 80013c2:	2200      	movs	r2, #0
 80013c4:	9308      	str	r3, [sp, #32]
 80013c6:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
 80013ca:	9209      	str	r2, [sp, #36]	; 0x24
 80013cc:	930b      	str	r3, [sp, #44]	; 0x2c
 80013ce:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80013d0:	9806      	ldr	r0, [sp, #24]
 80013d2:	4281      	cmp	r1, r0
 80013d4:	da3c      	bge.n	8001450 <arm_convolve_HWC_q7_fast_nonsquare+0x14c>
 80013d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80013d8:	980d      	ldr	r0, [sp, #52]	; 0x34
 80013da:	f9bd 7020 	ldrsh.w	r7, [sp, #32]
 80013de:	fb02 0203 	mla	r2, r2, r3, r0
 80013e2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80013e4:	460e      	mov	r6, r1
 80013e6:	1ad5      	subs	r5, r2, r3
 80013e8:	460a      	mov	r2, r1
 80013ea:	42af      	cmp	r7, r5
 80013ec:	da2a      	bge.n	8001444 <arm_convolve_HWC_q7_fast_nonsquare+0x140>
 80013ee:	2e00      	cmp	r6, #0
 80013f0:	fb08 fb02 	mul.w	fp, r8, r2
 80013f4:	f2c0 82c1 	blt.w	800197a <arm_convolve_HWC_q7_fast_nonsquare+0x676>
 80013f8:	9b05      	ldr	r3, [sp, #20]
 80013fa:	4293      	cmp	r3, r2
 80013fc:	f340 82a5 	ble.w	800194a <arm_convolve_HWC_q7_fast_nonsquare+0x646>
 8001400:	46be      	mov	lr, r7
 8001402:	463c      	mov	r4, r7
 8001404:	e007      	b.n	8001416 <arm_convolve_HWC_q7_fast_nonsquare+0x112>
 8001406:	3401      	adds	r4, #1
 8001408:	b224      	sxth	r4, r4
 800140a:	f005 ff4d 	bl	80072a8 <memset>
 800140e:	42ac      	cmp	r4, r5
 8001410:	44ca      	add	sl, r9
 8001412:	46a6      	mov	lr, r4
 8001414:	da16      	bge.n	8001444 <arm_convolve_HWC_q7_fast_nonsquare+0x140>
 8001416:	2c00      	cmp	r4, #0
 8001418:	4650      	mov	r0, sl
 800141a:	464a      	mov	r2, r9
 800141c:	f04f 0100 	mov.w	r1, #0
 8001420:	dbf1      	blt.n	8001406 <arm_convolve_HWC_q7_fast_nonsquare+0x102>
 8001422:	45f0      	cmp	r8, lr
 8001424:	ddef      	ble.n	8001406 <arm_convolve_HWC_q7_fast_nonsquare+0x102>
 8001426:	9904      	ldr	r1, [sp, #16]
 8001428:	9a07      	ldr	r2, [sp, #28]
 800142a:	eb0b 000e 	add.w	r0, fp, lr
 800142e:	3401      	adds	r4, #1
 8001430:	fb02 1000 	mla	r0, r2, r0, r1
 8001434:	b224      	sxth	r4, r4
 8001436:	4651      	mov	r1, sl
 8001438:	f000 ff06 	bl	8002248 <arm_q7_to_q15_reordered_no_shift>
 800143c:	42ac      	cmp	r4, r5
 800143e:	44ca      	add	sl, r9
 8001440:	46a6      	mov	lr, r4
 8001442:	dbe8      	blt.n	8001416 <arm_convolve_HWC_q7_fast_nonsquare+0x112>
 8001444:	3601      	adds	r6, #1
 8001446:	9b06      	ldr	r3, [sp, #24]
 8001448:	b236      	sxth	r6, r6
 800144a:	429e      	cmp	r6, r3
 800144c:	4632      	mov	r2, r6
 800144e:	dbcc      	blt.n	80013ea <arm_convolve_HWC_q7_fast_nonsquare+0xe6>
 8001450:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8001452:	459a      	cmp	sl, r3
 8001454:	f000 82cc 	beq.w	80019f0 <arm_convolve_HWC_q7_fast_nonsquare+0x6ec>
 8001458:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800145a:	990a      	ldr	r1, [sp, #40]	; 0x28
 800145c:	3201      	adds	r2, #1
 800145e:	b213      	sxth	r3, r2
 8001460:	9a08      	ldr	r2, [sp, #32]
 8001462:	9309      	str	r3, [sp, #36]	; 0x24
 8001464:	440a      	add	r2, r1
 8001466:	990e      	ldr	r1, [sp, #56]	; 0x38
 8001468:	b292      	uxth	r2, r2
 800146a:	428b      	cmp	r3, r1
 800146c:	9208      	str	r2, [sp, #32]
 800146e:	461a      	mov	r2, r3
 8001470:	dbad      	blt.n	80013ce <arm_convolve_HWC_q7_fast_nonsquare+0xca>
 8001472:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8001474:	9911      	ldr	r1, [sp, #68]	; 0x44
 8001476:	3201      	adds	r2, #1
 8001478:	b213      	sxth	r3, r2
 800147a:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800147c:	9312      	str	r3, [sp, #72]	; 0x48
 800147e:	440a      	add	r2, r1
 8001480:	9914      	ldr	r1, [sp, #80]	; 0x50
 8001482:	b292      	uxth	r2, r2
 8001484:	428b      	cmp	r3, r1
 8001486:	9210      	str	r2, [sp, #64]	; 0x40
 8001488:	461a      	mov	r2, r3
 800148a:	db8d      	blt.n	80013a8 <arm_convolve_HWC_q7_fast_nonsquare+0xa4>
 800148c:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8001490:	9317      	str	r3, [sp, #92]	; 0x5c
 8001492:	4608      	mov	r0, r1
 8001494:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8001496:	1a13      	subs	r3, r2, r0
 8001498:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800149a:	931f      	str	r3, [sp, #124]	; 0x7c
 800149c:	4293      	cmp	r3, r2
 800149e:	f340 814f 	ble.w	8001740 <arm_convolve_HWC_q7_fast_nonsquare+0x43c>
 80014a2:	9c0d      	ldr	r4, [sp, #52]	; 0x34
 80014a4:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 80014a8:	f8bd 5044 	ldrh.w	r5, [sp, #68]	; 0x44
 80014ac:	9a16      	ldr	r2, [sp, #88]	; 0x58
 80014ae:	f8cd b070 	str.w	fp, [sp, #112]	; 0x70
 80014b2:	0061      	lsls	r1, r4, #1
 80014b4:	fb13 f305 	smulbb	r3, r3, r5
 80014b8:	fb02 f101 	mul.w	r1, r2, r1
 80014bc:	1a1b      	subs	r3, r3, r0
 80014be:	fb12 f204 	smulbb	r2, r2, r4
 80014c2:	fb0b f004 	mul.w	r0, fp, r4
 80014c6:	fb12 f20b 	smulbb	r2, r2, fp
 80014ca:	b29b      	uxth	r3, r3
 80014cc:	b292      	uxth	r2, r2
 80014ce:	931b      	str	r3, [sp, #108]	; 0x6c
 80014d0:	0043      	lsls	r3, r0, #1
 80014d2:	9c38      	ldr	r4, [sp, #224]	; 0xe0
 80014d4:	921d      	str	r2, [sp, #116]	; 0x74
 80014d6:	9309      	str	r3, [sp, #36]	; 0x24
 80014d8:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80014da:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80014dc:	9008      	str	r0, [sp, #32]
 80014de:	fb0b f101 	mul.w	r1, fp, r1
 80014e2:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 80014e6:	1a9b      	subs	r3, r3, r2
 80014e8:	ea4f 094b 	mov.w	r9, fp, lsl #1
 80014ec:	9110      	str	r1, [sp, #64]	; 0x40
 80014ee:	9313      	str	r3, [sp, #76]	; 0x4c
 80014f0:	46d3      	mov	fp, sl
 80014f2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	f000 82b1 	beq.w	8001a5c <arm_convolve_HWC_q7_fast_nonsquare+0x758>
 80014fa:	9a11      	ldr	r2, [sp, #68]	; 0x44
 80014fc:	9917      	ldr	r1, [sp, #92]	; 0x5c
 80014fe:	9816      	ldr	r0, [sp, #88]	; 0x58
 8001500:	f8dd a070 	ldr.w	sl, [sp, #112]	; 0x70
 8001504:	fb01 0102 	mla	r1, r1, r2, r0
 8001508:	425a      	negs	r2, r3
 800150a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800150c:	1acb      	subs	r3, r1, r3
 800150e:	9306      	str	r3, [sp, #24]
 8001510:	b293      	uxth	r3, r2
 8001512:	2400      	movs	r4, #0
 8001514:	930f      	str	r3, [sp, #60]	; 0x3c
 8001516:	f9bd 306c 	ldrsh.w	r3, [sp, #108]	; 0x6c
 800151a:	940b      	str	r4, [sp, #44]	; 0x2c
 800151c:	9315      	str	r3, [sp, #84]	; 0x54
 800151e:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8001520:	9906      	ldr	r1, [sp, #24]
 8001522:	428a      	cmp	r2, r1
 8001524:	da3d      	bge.n	80015a2 <arm_convolve_HWC_q7_fast_nonsquare+0x29e>
 8001526:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001528:	990d      	ldr	r1, [sp, #52]	; 0x34
 800152a:	fb04 1403 	mla	r4, r4, r3, r1
 800152e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8001530:	1ae5      	subs	r5, r4, r3
 8001532:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	; 0x3c
 8001536:	9307      	str	r3, [sp, #28]
 8001538:	4617      	mov	r7, r2
 800153a:	4616      	mov	r6, r2
 800153c:	9a07      	ldr	r2, [sp, #28]
 800153e:	42aa      	cmp	r2, r5
 8001540:	da29      	bge.n	8001596 <arm_convolve_HWC_q7_fast_nonsquare+0x292>
 8001542:	464b      	mov	r3, r9
 8001544:	fb08 f707 	mul.w	r7, r8, r7
 8001548:	46b1      	mov	r9, r6
 800154a:	4696      	mov	lr, r2
 800154c:	4614      	mov	r4, r2
 800154e:	461e      	mov	r6, r3
 8001550:	e007      	b.n	8001562 <arm_convolve_HWC_q7_fast_nonsquare+0x25e>
 8001552:	3401      	adds	r4, #1
 8001554:	b224      	sxth	r4, r4
 8001556:	f005 fea7 	bl	80072a8 <memset>
 800155a:	42ac      	cmp	r4, r5
 800155c:	44b3      	add	fp, r6
 800155e:	46a6      	mov	lr, r4
 8001560:	da16      	bge.n	8001590 <arm_convolve_HWC_q7_fast_nonsquare+0x28c>
 8001562:	2c00      	cmp	r4, #0
 8001564:	4632      	mov	r2, r6
 8001566:	f04f 0100 	mov.w	r1, #0
 800156a:	4658      	mov	r0, fp
 800156c:	dbf1      	blt.n	8001552 <arm_convolve_HWC_q7_fast_nonsquare+0x24e>
 800156e:	45f0      	cmp	r8, lr
 8001570:	ddef      	ble.n	8001552 <arm_convolve_HWC_q7_fast_nonsquare+0x24e>
 8001572:	9b04      	ldr	r3, [sp, #16]
 8001574:	eb07 000e 	add.w	r0, r7, lr
 8001578:	3401      	adds	r4, #1
 800157a:	4659      	mov	r1, fp
 800157c:	b224      	sxth	r4, r4
 800157e:	fb0a 3000 	mla	r0, sl, r0, r3
 8001582:	4652      	mov	r2, sl
 8001584:	f000 fe60 	bl	8002248 <arm_q7_to_q15_reordered_no_shift>
 8001588:	42ac      	cmp	r4, r5
 800158a:	44b3      	add	fp, r6
 800158c:	46a6      	mov	lr, r4
 800158e:	dbe8      	blt.n	8001562 <arm_convolve_HWC_q7_fast_nonsquare+0x25e>
 8001590:	4633      	mov	r3, r6
 8001592:	464e      	mov	r6, r9
 8001594:	4699      	mov	r9, r3
 8001596:	3601      	adds	r6, #1
 8001598:	9b06      	ldr	r3, [sp, #24]
 800159a:	b236      	sxth	r6, r6
 800159c:	429e      	cmp	r6, r3
 800159e:	4637      	mov	r7, r6
 80015a0:	dbcc      	blt.n	800153c <arm_convolve_HWC_q7_fast_nonsquare+0x238>
 80015a2:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80015a4:	459b      	cmp	fp, r3
 80015a6:	f000 8211 	beq.w	80019cc <arm_convolve_HWC_q7_fast_nonsquare+0x6c8>
 80015aa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80015ac:	990a      	ldr	r1, [sp, #40]	; 0x28
 80015ae:	3201      	adds	r2, #1
 80015b0:	b213      	sxth	r3, r2
 80015b2:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80015b4:	930b      	str	r3, [sp, #44]	; 0x2c
 80015b6:	440a      	add	r2, r1
 80015b8:	b292      	uxth	r2, r2
 80015ba:	920f      	str	r2, [sp, #60]	; 0x3c
 80015bc:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80015be:	4293      	cmp	r3, r2
 80015c0:	461c      	mov	r4, r3
 80015c2:	dbac      	blt.n	800151e <arm_convolve_HWC_q7_fast_nonsquare+0x21a>
 80015c4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80015c6:	42a3      	cmp	r3, r4
 80015c8:	dd3c      	ble.n	8001644 <arm_convolve_HWC_q7_fast_nonsquare+0x340>
 80015ca:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80015cc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80015ce:	9916      	ldr	r1, [sp, #88]	; 0x58
 80015d0:	f9bd 606c 	ldrsh.w	r6, [sp, #108]	; 0x6c
 80015d4:	f8cd 901c 	str.w	r9, [sp, #28]
 80015d8:	fb02 1503 	mla	r5, r2, r3, r1
 80015dc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80015de:	f8dd 9030 	ldr.w	r9, [sp, #48]	; 0x30
 80015e2:	f8dd a070 	ldr.w	sl, [sp, #112]	; 0x70
 80015e6:	9606      	str	r6, [sp, #24]
 80015e8:	465f      	mov	r7, fp
 80015ea:	46c3      	mov	fp, r8
 80015ec:	f8dd 8010 	ldr.w	r8, [sp, #16]
 80015f0:	1aed      	subs	r5, r5, r3
 80015f2:	9a06      	ldr	r2, [sp, #24]
 80015f4:	42aa      	cmp	r2, r5
 80015f6:	da15      	bge.n	8001624 <arm_convolve_HWC_q7_fast_nonsquare+0x320>
 80015f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80015fa:	4610      	mov	r0, r2
 80015fc:	fb04 f603 	mul.w	r6, r4, r3
 8001600:	4614      	mov	r4, r2
 8001602:	fb0b 6000 	mla	r0, fp, r0, r6
 8001606:	eba0 0009 	sub.w	r0, r0, r9
 800160a:	fb0a 8000 	mla	r0, sl, r0, r8
 800160e:	4639      	mov	r1, r7
 8001610:	9a08      	ldr	r2, [sp, #32]
 8001612:	3401      	adds	r4, #1
 8001614:	f000 fe18 	bl	8002248 <arm_q7_to_q15_reordered_no_shift>
 8001618:	b224      	sxth	r4, r4
 800161a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800161c:	42ac      	cmp	r4, r5
 800161e:	441f      	add	r7, r3
 8001620:	4620      	mov	r0, r4
 8001622:	dbee      	blt.n	8001602 <arm_convolve_HWC_q7_fast_nonsquare+0x2fe>
 8001624:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8001626:	429f      	cmp	r7, r3
 8001628:	f000 81bf 	beq.w	80019aa <arm_convolve_HWC_q7_fast_nonsquare+0x6a6>
 800162c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800162e:	3201      	adds	r2, #1
 8001630:	b213      	sxth	r3, r2
 8001632:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8001634:	930b      	str	r3, [sp, #44]	; 0x2c
 8001636:	4293      	cmp	r3, r2
 8001638:	461c      	mov	r4, r3
 800163a:	dbda      	blt.n	80015f2 <arm_convolve_HWC_q7_fast_nonsquare+0x2ee>
 800163c:	f8dd 901c 	ldr.w	r9, [sp, #28]
 8001640:	46d8      	mov	r8, fp
 8001642:	46bb      	mov	fp, r7
 8001644:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8001646:	42a3      	cmp	r3, r4
 8001648:	dd69      	ble.n	800171e <arm_convolve_HWC_q7_fast_nonsquare+0x41a>
 800164a:	f8bd 302c 	ldrh.w	r3, [sp, #44]	; 0x2c
 800164e:	f8bd 2028 	ldrh.w	r2, [sp, #40]	; 0x28
 8001652:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8001654:	9816      	ldr	r0, [sp, #88]	; 0x58
 8001656:	f8dd a070 	ldr.w	sl, [sp, #112]	; 0x70
 800165a:	fb13 f202 	smulbb	r2, r3, r2
 800165e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8001660:	fb01 0103 	mla	r1, r1, r3, r0
 8001664:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8001666:	1ad2      	subs	r2, r2, r3
 8001668:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800166a:	1acb      	subs	r3, r1, r3
 800166c:	9306      	str	r3, [sp, #24]
 800166e:	b293      	uxth	r3, r2
 8001670:	930f      	str	r3, [sp, #60]	; 0x3c
 8001672:	f9bd 306c 	ldrsh.w	r3, [sp, #108]	; 0x6c
 8001676:	9315      	str	r3, [sp, #84]	; 0x54
 8001678:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800167a:	9906      	ldr	r1, [sp, #24]
 800167c:	428a      	cmp	r2, r1
 800167e:	da3d      	bge.n	80016fc <arm_convolve_HWC_q7_fast_nonsquare+0x3f8>
 8001680:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8001682:	990d      	ldr	r1, [sp, #52]	; 0x34
 8001684:	fb04 1403 	mla	r4, r4, r3, r1
 8001688:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800168a:	1ae5      	subs	r5, r4, r3
 800168c:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	; 0x3c
 8001690:	9307      	str	r3, [sp, #28]
 8001692:	4617      	mov	r7, r2
 8001694:	4616      	mov	r6, r2
 8001696:	9a07      	ldr	r2, [sp, #28]
 8001698:	4295      	cmp	r5, r2
 800169a:	dd29      	ble.n	80016f0 <arm_convolve_HWC_q7_fast_nonsquare+0x3ec>
 800169c:	464b      	mov	r3, r9
 800169e:	fb08 f707 	mul.w	r7, r8, r7
 80016a2:	46b1      	mov	r9, r6
 80016a4:	4696      	mov	lr, r2
 80016a6:	4614      	mov	r4, r2
 80016a8:	461e      	mov	r6, r3
 80016aa:	e007      	b.n	80016bc <arm_convolve_HWC_q7_fast_nonsquare+0x3b8>
 80016ac:	3401      	adds	r4, #1
 80016ae:	b224      	sxth	r4, r4
 80016b0:	f005 fdfa 	bl	80072a8 <memset>
 80016b4:	42ac      	cmp	r4, r5
 80016b6:	44b3      	add	fp, r6
 80016b8:	46a6      	mov	lr, r4
 80016ba:	da16      	bge.n	80016ea <arm_convolve_HWC_q7_fast_nonsquare+0x3e6>
 80016bc:	2c00      	cmp	r4, #0
 80016be:	4632      	mov	r2, r6
 80016c0:	f04f 0100 	mov.w	r1, #0
 80016c4:	4658      	mov	r0, fp
 80016c6:	dbf1      	blt.n	80016ac <arm_convolve_HWC_q7_fast_nonsquare+0x3a8>
 80016c8:	45f0      	cmp	r8, lr
 80016ca:	ddef      	ble.n	80016ac <arm_convolve_HWC_q7_fast_nonsquare+0x3a8>
 80016cc:	9b04      	ldr	r3, [sp, #16]
 80016ce:	eb07 000e 	add.w	r0, r7, lr
 80016d2:	3401      	adds	r4, #1
 80016d4:	4659      	mov	r1, fp
 80016d6:	b224      	sxth	r4, r4
 80016d8:	fb0a 3000 	mla	r0, sl, r0, r3
 80016dc:	4652      	mov	r2, sl
 80016de:	f000 fdb3 	bl	8002248 <arm_q7_to_q15_reordered_no_shift>
 80016e2:	42ac      	cmp	r4, r5
 80016e4:	44b3      	add	fp, r6
 80016e6:	46a6      	mov	lr, r4
 80016e8:	dbe8      	blt.n	80016bc <arm_convolve_HWC_q7_fast_nonsquare+0x3b8>
 80016ea:	4633      	mov	r3, r6
 80016ec:	464e      	mov	r6, r9
 80016ee:	4699      	mov	r9, r3
 80016f0:	3601      	adds	r6, #1
 80016f2:	9b06      	ldr	r3, [sp, #24]
 80016f4:	b236      	sxth	r6, r6
 80016f6:	429e      	cmp	r6, r3
 80016f8:	4637      	mov	r7, r6
 80016fa:	dbcc      	blt.n	8001696 <arm_convolve_HWC_q7_fast_nonsquare+0x392>
 80016fc:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80016fe:	459b      	cmp	fp, r3
 8001700:	f000 8188 	beq.w	8001a14 <arm_convolve_HWC_q7_fast_nonsquare+0x710>
 8001704:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8001706:	990a      	ldr	r1, [sp, #40]	; 0x28
 8001708:	3201      	adds	r2, #1
 800170a:	b213      	sxth	r3, r2
 800170c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800170e:	930b      	str	r3, [sp, #44]	; 0x2c
 8001710:	440a      	add	r2, r1
 8001712:	b292      	uxth	r2, r2
 8001714:	920f      	str	r2, [sp, #60]	; 0x3c
 8001716:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8001718:	4293      	cmp	r3, r2
 800171a:	461c      	mov	r4, r3
 800171c:	dbac      	blt.n	8001678 <arm_convolve_HWC_q7_fast_nonsquare+0x374>
 800171e:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8001720:	9911      	ldr	r1, [sp, #68]	; 0x44
 8001722:	3201      	adds	r2, #1
 8001724:	b213      	sxth	r3, r2
 8001726:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8001728:	9312      	str	r3, [sp, #72]	; 0x48
 800172a:	440a      	add	r2, r1
 800172c:	b292      	uxth	r2, r2
 800172e:	921b      	str	r2, [sp, #108]	; 0x6c
 8001730:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
 8001732:	9317      	str	r3, [sp, #92]	; 0x5c
 8001734:	4293      	cmp	r3, r2
 8001736:	f6ff aedc 	blt.w	80014f2 <arm_convolve_HWC_q7_fast_nonsquare+0x1ee>
 800173a:	46da      	mov	sl, fp
 800173c:	f8dd b070 	ldr.w	fp, [sp, #112]	; 0x70
 8001740:	9b1e      	ldr	r3, [sp, #120]	; 0x78
 8001742:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8001744:	461a      	mov	r2, r3
 8001746:	4282      	cmp	r2, r0
 8001748:	f340 8094 	ble.w	8001874 <arm_convolve_HWC_q7_fast_nonsquare+0x570>
 800174c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800174e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8001750:	f8bd 4044 	ldrh.w	r4, [sp, #68]	; 0x44
 8001754:	f8cd b01c 	str.w	fp, [sp, #28]
 8001758:	0059      	lsls	r1, r3, #1
 800175a:	fb02 f101 	mul.w	r1, r2, r1
 800175e:	fb12 f203 	smulbb	r2, r2, r3
 8001762:	f8bd 3048 	ldrh.w	r3, [sp, #72]	; 0x48
 8001766:	fb13 f304 	smulbb	r3, r3, r4
 800176a:	9c14      	ldr	r4, [sp, #80]	; 0x50
 800176c:	1b1b      	subs	r3, r3, r4
 800176e:	9c38      	ldr	r4, [sp, #224]	; 0xe0
 8001770:	fb0b f101 	mul.w	r1, fp, r1
 8001774:	fb12 f20b 	smulbb	r2, r2, fp
 8001778:	b292      	uxth	r2, r2
 800177a:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 800177e:	b29b      	uxth	r3, r3
 8001780:	9213      	str	r2, [sp, #76]	; 0x4c
 8001782:	910b      	str	r1, [sp, #44]	; 0x2c
 8001784:	9310      	str	r3, [sp, #64]	; 0x40
 8001786:	ea4f 094b 	mov.w	r9, fp, lsl #1
 800178a:	4602      	mov	r2, r0
 800178c:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800178e:	2b00      	cmp	r3, #0
 8001790:	d061      	beq.n	8001856 <arm_convolve_HWC_q7_fast_nonsquare+0x552>
 8001792:	9916      	ldr	r1, [sp, #88]	; 0x58
 8001794:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8001796:	9814      	ldr	r0, [sp, #80]	; 0x50
 8001798:	fb02 1303 	mla	r3, r2, r3, r1
 800179c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800179e:	1a1b      	subs	r3, r3, r0
 80017a0:	4251      	negs	r1, r2
 80017a2:	9306      	str	r3, [sp, #24]
 80017a4:	b28b      	uxth	r3, r1
 80017a6:	2200      	movs	r2, #0
 80017a8:	9308      	str	r3, [sp, #32]
 80017aa:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	; 0x40
 80017ae:	9209      	str	r2, [sp, #36]	; 0x24
 80017b0:	930f      	str	r3, [sp, #60]	; 0x3c
 80017b2:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80017b4:	9806      	ldr	r0, [sp, #24]
 80017b6:	4281      	cmp	r1, r0
 80017b8:	da3c      	bge.n	8001834 <arm_convolve_HWC_q7_fast_nonsquare+0x530>
 80017ba:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80017bc:	980d      	ldr	r0, [sp, #52]	; 0x34
 80017be:	f9bd 7020 	ldrsh.w	r7, [sp, #32]
 80017c2:	fb02 0203 	mla	r2, r2, r3, r0
 80017c6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80017c8:	460e      	mov	r6, r1
 80017ca:	1ad5      	subs	r5, r2, r3
 80017cc:	460a      	mov	r2, r1
 80017ce:	42bd      	cmp	r5, r7
 80017d0:	dd2a      	ble.n	8001828 <arm_convolve_HWC_q7_fast_nonsquare+0x524>
 80017d2:	2e00      	cmp	r6, #0
 80017d4:	fb08 fb02 	mul.w	fp, r8, r2
 80017d8:	f2c0 80db 	blt.w	8001992 <arm_convolve_HWC_q7_fast_nonsquare+0x68e>
 80017dc:	9b05      	ldr	r3, [sp, #20]
 80017de:	4293      	cmp	r3, r2
 80017e0:	f340 80bf 	ble.w	8001962 <arm_convolve_HWC_q7_fast_nonsquare+0x65e>
 80017e4:	46be      	mov	lr, r7
 80017e6:	463c      	mov	r4, r7
 80017e8:	e007      	b.n	80017fa <arm_convolve_HWC_q7_fast_nonsquare+0x4f6>
 80017ea:	3401      	adds	r4, #1
 80017ec:	b224      	sxth	r4, r4
 80017ee:	f005 fd5b 	bl	80072a8 <memset>
 80017f2:	42ac      	cmp	r4, r5
 80017f4:	44ca      	add	sl, r9
 80017f6:	46a6      	mov	lr, r4
 80017f8:	da16      	bge.n	8001828 <arm_convolve_HWC_q7_fast_nonsquare+0x524>
 80017fa:	2c00      	cmp	r4, #0
 80017fc:	4650      	mov	r0, sl
 80017fe:	464a      	mov	r2, r9
 8001800:	f04f 0100 	mov.w	r1, #0
 8001804:	dbf1      	blt.n	80017ea <arm_convolve_HWC_q7_fast_nonsquare+0x4e6>
 8001806:	45f0      	cmp	r8, lr
 8001808:	ddef      	ble.n	80017ea <arm_convolve_HWC_q7_fast_nonsquare+0x4e6>
 800180a:	9904      	ldr	r1, [sp, #16]
 800180c:	9a07      	ldr	r2, [sp, #28]
 800180e:	eb0b 000e 	add.w	r0, fp, lr
 8001812:	3401      	adds	r4, #1
 8001814:	fb02 1000 	mla	r0, r2, r0, r1
 8001818:	b224      	sxth	r4, r4
 800181a:	4651      	mov	r1, sl
 800181c:	f000 fd14 	bl	8002248 <arm_q7_to_q15_reordered_no_shift>
 8001820:	42ac      	cmp	r4, r5
 8001822:	44ca      	add	sl, r9
 8001824:	46a6      	mov	lr, r4
 8001826:	dbe8      	blt.n	80017fa <arm_convolve_HWC_q7_fast_nonsquare+0x4f6>
 8001828:	3601      	adds	r6, #1
 800182a:	9b06      	ldr	r3, [sp, #24]
 800182c:	b236      	sxth	r6, r6
 800182e:	429e      	cmp	r6, r3
 8001830:	4632      	mov	r2, r6
 8001832:	dbcc      	blt.n	80017ce <arm_convolve_HWC_q7_fast_nonsquare+0x4ca>
 8001834:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8001836:	459a      	cmp	sl, r3
 8001838:	f000 80fe 	beq.w	8001a38 <arm_convolve_HWC_q7_fast_nonsquare+0x734>
 800183c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800183e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8001840:	3201      	adds	r2, #1
 8001842:	b213      	sxth	r3, r2
 8001844:	9a08      	ldr	r2, [sp, #32]
 8001846:	9309      	str	r3, [sp, #36]	; 0x24
 8001848:	440a      	add	r2, r1
 800184a:	990e      	ldr	r1, [sp, #56]	; 0x38
 800184c:	b292      	uxth	r2, r2
 800184e:	428b      	cmp	r3, r1
 8001850:	9208      	str	r2, [sp, #32]
 8001852:	461a      	mov	r2, r3
 8001854:	dbad      	blt.n	80017b2 <arm_convolve_HWC_q7_fast_nonsquare+0x4ae>
 8001856:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8001858:	9911      	ldr	r1, [sp, #68]	; 0x44
 800185a:	3201      	adds	r2, #1
 800185c:	b213      	sxth	r3, r2
 800185e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8001860:	9312      	str	r3, [sp, #72]	; 0x48
 8001862:	440a      	add	r2, r1
 8001864:	991e      	ldr	r1, [sp, #120]	; 0x78
 8001866:	b292      	uxth	r2, r2
 8001868:	428b      	cmp	r3, r1
 800186a:	9210      	str	r2, [sp, #64]	; 0x40
 800186c:	461a      	mov	r2, r3
 800186e:	db8d      	blt.n	800178c <arm_convolve_HWC_q7_fast_nonsquare+0x488>
 8001870:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8001874:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 8001876:	4553      	cmp	r3, sl
 8001878:	d063      	beq.n	8001942 <arm_convolve_HWC_q7_fast_nonsquare+0x63e>
 800187a:	9918      	ldr	r1, [sp, #96]	; 0x60
 800187c:	2900      	cmp	r1, #0
 800187e:	d060      	beq.n	8001942 <arm_convolve_HWC_q7_fast_nonsquare+0x63e>
 8001880:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8001882:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8001884:	9819      	ldr	r0, [sp, #100]	; 0x64
 8001886:	f8dd e0a8 	ldr.w	lr, [sp, #168]	; 0xa8
 800188a:	fb02 f50b 	mul.w	r5, r2, fp
 800188e:	fb03 f505 	mul.w	r5, r3, r5
 8001892:	fb13 f602 	smulbb	r6, r3, r2
 8001896:	f3c5 058f 	ubfx	r5, r5, #2, #16
 800189a:	4688      	mov	r8, r1
 800189c:	9935      	ldr	r1, [sp, #212]	; 0xd4
 800189e:	9505      	str	r5, [sp, #20]
 80018a0:	fb16 f60b 	smulbb	r6, r6, fp
 80018a4:	1e6b      	subs	r3, r5, #1
 80018a6:	2201      	movs	r2, #1
 80018a8:	4488      	add	r8, r1
 80018aa:	f006 0603 	and.w	r6, r6, #3
 80018ae:	b29b      	uxth	r3, r3
 80018b0:	9938      	ldr	r1, [sp, #224]	; 0xe0
 80018b2:	4413      	add	r3, r2
 80018b4:	f106 3cff 	add.w	ip, r6, #4294967295
 80018b8:	4082      	lsls	r2, r0
 80018ba:	9832      	ldr	r0, [sp, #200]	; 0xc8
 80018bc:	fa1f fc8c 	uxth.w	ip, ip
 80018c0:	ea4f 0983 	mov.w	r9, r3, lsl #2
 80018c4:	eb01 0ac3 	add.w	sl, r1, r3, lsl #3
 80018c8:	0853      	lsrs	r3, r2, #1
 80018ca:	1e47      	subs	r7, r0, #1
 80018cc:	f10c 0b01 	add.w	fp, ip, #1
 80018d0:	9304      	str	r3, [sp, #16]
 80018d2:	4645      	mov	r5, r8
 80018d4:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80018d6:	f917 3f01 	ldrsb.w	r3, [r7, #1]!
 80018da:	4093      	lsls	r3, r2
 80018dc:	9a04      	ldr	r2, [sp, #16]
 80018de:	4413      	add	r3, r2
 80018e0:	9a05      	ldr	r2, [sp, #20]
 80018e2:	2a00      	cmp	r2, #0
 80018e4:	f000 80bd 	beq.w	8001a62 <arm_convolve_HWC_q7_fast_nonsquare+0x75e>
 80018e8:	9c38      	ldr	r4, [sp, #224]	; 0xe0
 80018ea:	eb0e 0809 	add.w	r8, lr, r9
 80018ee:	f85e 2b04 	ldr.w	r2, [lr], #4
 80018f2:	6820      	ldr	r0, [r4, #0]
 80018f4:	fa2f f182 	sxtb16	r1, r2
 80018f8:	ea4f 2232 	mov.w	r2, r2, ror #8
 80018fc:	fa2f f282 	sxtb16	r2, r2
 8001900:	fb21 3300 	smlad	r3, r1, r0, r3
 8001904:	6861      	ldr	r1, [r4, #4]
 8001906:	3408      	adds	r4, #8
 8001908:	fb22 3301 	smlad	r3, r2, r1, r3
 800190c:	45c6      	cmp	lr, r8
 800190e:	d1ee      	bne.n	80018ee <arm_convolve_HWC_q7_fast_nonsquare+0x5ea>
 8001910:	4651      	mov	r1, sl
 8001912:	b166      	cbz	r6, 800192e <arm_convolve_HWC_q7_fast_nonsquare+0x62a>
 8001914:	f10e 32ff 	add.w	r2, lr, #4294967295
 8001918:	eb0e 080c 	add.w	r8, lr, ip
 800191c:	f912 0f01 	ldrsb.w	r0, [r2, #1]!
 8001920:	f831 4b02 	ldrh.w	r4, [r1], #2
 8001924:	4542      	cmp	r2, r8
 8001926:	fb14 3300 	smlabb	r3, r4, r0, r3
 800192a:	d1f7      	bne.n	800191c <arm_convolve_HWC_q7_fast_nonsquare+0x618>
 800192c:	44de      	add	lr, fp
 800192e:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8001930:	4113      	asrs	r3, r2
 8001932:	f303 0307 	ssat	r3, #8, r3
 8001936:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 8001938:	f802 3b01 	strb.w	r3, [r2], #1
 800193c:	42aa      	cmp	r2, r5
 800193e:	9235      	str	r2, [sp, #212]	; 0xd4
 8001940:	d1c8      	bne.n	80018d4 <arm_convolve_HWC_q7_fast_nonsquare+0x5d0>
 8001942:	2000      	movs	r0, #0
 8001944:	b021      	add	sp, #132	; 0x84
 8001946:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800194a:	463c      	mov	r4, r7
 800194c:	3401      	adds	r4, #1
 800194e:	4650      	mov	r0, sl
 8001950:	464a      	mov	r2, r9
 8001952:	2100      	movs	r1, #0
 8001954:	b224      	sxth	r4, r4
 8001956:	f005 fca7 	bl	80072a8 <memset>
 800195a:	42ac      	cmp	r4, r5
 800195c:	44ca      	add	sl, r9
 800195e:	dbf5      	blt.n	800194c <arm_convolve_HWC_q7_fast_nonsquare+0x648>
 8001960:	e570      	b.n	8001444 <arm_convolve_HWC_q7_fast_nonsquare+0x140>
 8001962:	463c      	mov	r4, r7
 8001964:	3401      	adds	r4, #1
 8001966:	4650      	mov	r0, sl
 8001968:	464a      	mov	r2, r9
 800196a:	2100      	movs	r1, #0
 800196c:	b224      	sxth	r4, r4
 800196e:	f005 fc9b 	bl	80072a8 <memset>
 8001972:	42a5      	cmp	r5, r4
 8001974:	44ca      	add	sl, r9
 8001976:	dcf5      	bgt.n	8001964 <arm_convolve_HWC_q7_fast_nonsquare+0x660>
 8001978:	e756      	b.n	8001828 <arm_convolve_HWC_q7_fast_nonsquare+0x524>
 800197a:	463c      	mov	r4, r7
 800197c:	3401      	adds	r4, #1
 800197e:	4650      	mov	r0, sl
 8001980:	464a      	mov	r2, r9
 8001982:	2100      	movs	r1, #0
 8001984:	b224      	sxth	r4, r4
 8001986:	f005 fc8f 	bl	80072a8 <memset>
 800198a:	42ac      	cmp	r4, r5
 800198c:	44ca      	add	sl, r9
 800198e:	dbf5      	blt.n	800197c <arm_convolve_HWC_q7_fast_nonsquare+0x678>
 8001990:	e558      	b.n	8001444 <arm_convolve_HWC_q7_fast_nonsquare+0x140>
 8001992:	463c      	mov	r4, r7
 8001994:	3401      	adds	r4, #1
 8001996:	4650      	mov	r0, sl
 8001998:	464a      	mov	r2, r9
 800199a:	2100      	movs	r1, #0
 800199c:	b224      	sxth	r4, r4
 800199e:	f005 fc83 	bl	80072a8 <memset>
 80019a2:	42ac      	cmp	r4, r5
 80019a4:	44ca      	add	sl, r9
 80019a6:	dbf5      	blt.n	8001994 <arm_convolve_HWC_q7_fast_nonsquare+0x690>
 80019a8:	e73e      	b.n	8001828 <arm_convolve_HWC_q7_fast_nonsquare+0x524>
 80019aa:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 80019ac:	9303      	str	r3, [sp, #12]
 80019ae:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 80019b0:	9302      	str	r3, [sp, #8]
 80019b2:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80019b4:	9301      	str	r3, [sp, #4]
 80019b6:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80019b8:	9300      	str	r3, [sp, #0]
 80019ba:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80019bc:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80019be:	9938      	ldr	r1, [sp, #224]	; 0xe0
 80019c0:	982a      	ldr	r0, [sp, #168]	; 0xa8
 80019c2:	f000 f9e5 	bl	8001d90 <arm_nn_mat_mult_kernel_q7_q15_reordered>
 80019c6:	9f38      	ldr	r7, [sp, #224]	; 0xe0
 80019c8:	9035      	str	r0, [sp, #212]	; 0xd4
 80019ca:	e62f      	b.n	800162c <arm_convolve_HWC_q7_fast_nonsquare+0x328>
 80019cc:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 80019ce:	9303      	str	r3, [sp, #12]
 80019d0:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 80019d2:	9302      	str	r3, [sp, #8]
 80019d4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80019d6:	9301      	str	r3, [sp, #4]
 80019d8:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80019da:	9300      	str	r3, [sp, #0]
 80019dc:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80019de:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 80019e0:	9938      	ldr	r1, [sp, #224]	; 0xe0
 80019e2:	982a      	ldr	r0, [sp, #168]	; 0xa8
 80019e4:	f000 f9d4 	bl	8001d90 <arm_nn_mat_mult_kernel_q7_q15_reordered>
 80019e8:	f8dd b0e0 	ldr.w	fp, [sp, #224]	; 0xe0
 80019ec:	9035      	str	r0, [sp, #212]	; 0xd4
 80019ee:	e5dc      	b.n	80015aa <arm_convolve_HWC_q7_fast_nonsquare+0x2a6>
 80019f0:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 80019f2:	9303      	str	r3, [sp, #12]
 80019f4:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 80019f6:	9302      	str	r3, [sp, #8]
 80019f8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80019fa:	9301      	str	r3, [sp, #4]
 80019fc:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 80019fe:	9300      	str	r3, [sp, #0]
 8001a00:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8001a02:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8001a04:	9938      	ldr	r1, [sp, #224]	; 0xe0
 8001a06:	982a      	ldr	r0, [sp, #168]	; 0xa8
 8001a08:	f000 f9c2 	bl	8001d90 <arm_nn_mat_mult_kernel_q7_q15_reordered>
 8001a0c:	f8dd a0e0 	ldr.w	sl, [sp, #224]	; 0xe0
 8001a10:	9035      	str	r0, [sp, #212]	; 0xd4
 8001a12:	e521      	b.n	8001458 <arm_convolve_HWC_q7_fast_nonsquare+0x154>
 8001a14:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 8001a16:	9303      	str	r3, [sp, #12]
 8001a18:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8001a1a:	9302      	str	r3, [sp, #8]
 8001a1c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8001a1e:	9301      	str	r3, [sp, #4]
 8001a20:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8001a22:	9300      	str	r3, [sp, #0]
 8001a24:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8001a26:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8001a28:	9938      	ldr	r1, [sp, #224]	; 0xe0
 8001a2a:	982a      	ldr	r0, [sp, #168]	; 0xa8
 8001a2c:	f000 f9b0 	bl	8001d90 <arm_nn_mat_mult_kernel_q7_q15_reordered>
 8001a30:	f8dd b0e0 	ldr.w	fp, [sp, #224]	; 0xe0
 8001a34:	9035      	str	r0, [sp, #212]	; 0xd4
 8001a36:	e665      	b.n	8001704 <arm_convolve_HWC_q7_fast_nonsquare+0x400>
 8001a38:	9b35      	ldr	r3, [sp, #212]	; 0xd4
 8001a3a:	9303      	str	r3, [sp, #12]
 8001a3c:	9b32      	ldr	r3, [sp, #200]	; 0xc8
 8001a3e:	9302      	str	r3, [sp, #8]
 8001a40:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8001a42:	9301      	str	r3, [sp, #4]
 8001a44:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8001a46:	9300      	str	r3, [sp, #0]
 8001a48:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8001a4a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8001a4c:	9938      	ldr	r1, [sp, #224]	; 0xe0
 8001a4e:	982a      	ldr	r0, [sp, #168]	; 0xa8
 8001a50:	f000 f99e 	bl	8001d90 <arm_nn_mat_mult_kernel_q7_q15_reordered>
 8001a54:	f8dd a0e0 	ldr.w	sl, [sp, #224]	; 0xe0
 8001a58:	9035      	str	r0, [sp, #212]	; 0xd4
 8001a5a:	e6ef      	b.n	800183c <arm_convolve_HWC_q7_fast_nonsquare+0x538>
 8001a5c:	461c      	mov	r4, r3
 8001a5e:	930b      	str	r3, [sp, #44]	; 0x2c
 8001a60:	e5b0      	b.n	80015c4 <arm_convolve_HWC_q7_fast_nonsquare+0x2c0>
 8001a62:	9938      	ldr	r1, [sp, #224]	; 0xe0
 8001a64:	e755      	b.n	8001912 <arm_convolve_HWC_q7_fast_nonsquare+0x60e>
 8001a66:	f06f 0002 	mvn.w	r0, #2
 8001a6a:	b021      	add	sp, #132	; 0x84
 8001a6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001a70:	9717      	str	r7, [sp, #92]	; 0x5c
 8001a72:	f8dd a0e0 	ldr.w	sl, [sp, #224]	; 0xe0
 8001a76:	9712      	str	r7, [sp, #72]	; 0x48
 8001a78:	4638      	mov	r0, r7
 8001a7a:	e50b      	b.n	8001494 <arm_convolve_HWC_q7_fast_nonsquare+0x190>

08001a7c <arm_nn_mat_mult_kernel_q7_q15>:
 8001a7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001a80:	b099      	sub	sp, #100	; 0x64
 8001a82:	4683      	mov	fp, r0
 8001a84:	f8bd 4088 	ldrh.w	r4, [sp, #136]	; 0x88
 8001a88:	9e25      	ldr	r6, [sp, #148]	; 0x94
 8001a8a:	940b      	str	r4, [sp, #44]	; 0x2c
 8001a8c:	f8bd 408c 	ldrh.w	r4, [sp, #140]	; 0x8c
 8001a90:	9109      	str	r1, [sp, #36]	; 0x24
 8001a92:	18b0      	adds	r0, r6, r2
 8001a94:	468e      	mov	lr, r1
 8001a96:	9305      	str	r3, [sp, #20]
 8001a98:	4619      	mov	r1, r3
 8001a9a:	0853      	lsrs	r3, r2, #1
 8001a9c:	4625      	mov	r5, r4
 8001a9e:	940a      	str	r4, [sp, #40]	; 0x28
 8001aa0:	9216      	str	r2, [sp, #88]	; 0x58
 8001aa2:	4606      	mov	r6, r0
 8001aa4:	9015      	str	r0, [sp, #84]	; 0x54
 8001aa6:	f000 80e9 	beq.w	8001c7c <arm_nn_mat_mult_kernel_q7_q15+0x200>
 8001aaa:	3b01      	subs	r3, #1
 8001aac:	b29b      	uxth	r3, r3
 8001aae:	0888      	lsrs	r0, r1, #2
 8001ab0:	461f      	mov	r7, r3
 8001ab2:	9317      	str	r3, [sp, #92]	; 0x5c
 8001ab4:	2301      	movs	r3, #1
 8001ab6:	f001 0203 	and.w	r2, r1, #3
 8001aba:	900d      	str	r0, [sp, #52]	; 0x34
 8001abc:	40ab      	lsls	r3, r5
 8001abe:	3801      	subs	r0, #1
 8001ac0:	eb0e 0141 	add.w	r1, lr, r1, lsl #1
 8001ac4:	1e54      	subs	r4, r2, #1
 8001ac6:	085b      	lsrs	r3, r3, #1
 8001ac8:	b280      	uxth	r0, r0
 8001aca:	3001      	adds	r0, #1
 8001acc:	b2a4      	uxth	r4, r4
 8001ace:	920e      	str	r2, [sp, #56]	; 0x38
 8001ad0:	930c      	str	r3, [sp, #48]	; 0x30
 8001ad2:	460a      	mov	r2, r1
 8001ad4:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8001ad6:	9110      	str	r1, [sp, #64]	; 0x40
 8001ad8:	ea4f 0cc0 	mov.w	ip, r0, lsl #3
 8001adc:	4639      	mov	r1, r7
 8001ade:	9413      	str	r4, [sp, #76]	; 0x4c
 8001ae0:	4627      	mov	r7, r4
 8001ae2:	0084      	lsls	r4, r0, #2
 8001ae4:	4610      	mov	r0, r2
 8001ae6:	4672      	mov	r2, lr
 8001ae8:	4462      	add	r2, ip
 8001aea:	3302      	adds	r3, #2
 8001aec:	9211      	str	r2, [sp, #68]	; 0x44
 8001aee:	9304      	str	r3, [sp, #16]
 8001af0:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8001af2:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8001af4:	9408      	str	r4, [sp, #32]
 8001af6:	3102      	adds	r1, #2
 8001af8:	eb02 0241 	add.w	r2, r2, r1, lsl #1
 8001afc:	3302      	adds	r3, #2
 8001afe:	4460      	add	r0, ip
 8001b00:	920f      	str	r2, [sp, #60]	; 0x3c
 8001b02:	9307      	str	r3, [sp, #28]
 8001b04:	1c7a      	adds	r2, r7, #1
 8001b06:	1cb3      	adds	r3, r6, #2
 8001b08:	9012      	str	r0, [sp, #72]	; 0x48
 8001b0a:	9214      	str	r2, [sp, #80]	; 0x50
 8001b0c:	9306      	str	r3, [sp, #24]
 8001b0e:	9a04      	ldr	r2, [sp, #16]
 8001b10:	9b05      	ldr	r3, [sp, #20]
 8001b12:	f912 cc02 	ldrsb.w	ip, [r2, #-2]
 8001b16:	f912 0c01 	ldrsb.w	r0, [r2, #-1]
 8001b1a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8001b1c:	fa0c fc02 	lsl.w	ip, ip, r2
 8001b20:	4090      	lsls	r0, r2
 8001b22:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8001b24:	445b      	add	r3, fp
 8001b26:	4494      	add	ip, r2
 8001b28:	4410      	add	r0, r2
 8001b2a:	9303      	str	r3, [sp, #12]
 8001b2c:	461a      	mov	r2, r3
 8001b2e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	f000 8122 	beq.w	8001d7a <arm_nn_mat_mult_kernel_q7_q15+0x2fe>
 8001b36:	9b08      	ldr	r3, [sp, #32]
 8001b38:	f8dd a040 	ldr.w	sl, [sp, #64]	; 0x40
 8001b3c:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 8001b40:	9201      	str	r2, [sp, #4]
 8001b42:	445b      	add	r3, fp
 8001b44:	9302      	str	r3, [sp, #8]
 8001b46:	4665      	mov	r5, ip
 8001b48:	4603      	mov	r3, r0
 8001b4a:	9901      	ldr	r1, [sp, #4]
 8001b4c:	f85b 2b04 	ldr.w	r2, [fp], #4
 8001b50:	f851 4b04 	ldr.w	r4, [r1], #4
 8001b54:	9101      	str	r1, [sp, #4]
 8001b56:	fa2f f182 	sxtb16	r1, r2
 8001b5a:	ea4f 2232 	mov.w	r2, r2, ror #8
 8001b5e:	fa2f f282 	sxtb16	r2, r2
 8001b62:	0c17      	lsrs	r7, r2, #16
 8001b64:	ea4f 2e34 	mov.w	lr, r4, ror #8
 8001b68:	043f      	lsls	r7, r7, #16
 8001b6a:	fa2f fe8e 	sxtb16	lr, lr
 8001b6e:	ea4f 461e 	mov.w	r6, lr, lsr #16
 8001b72:	fa1f f881 	uxth.w	r8, r1
 8001b76:	fa2f f484 	sxtb16	r4, r4
 8001b7a:	0436      	lsls	r6, r6, #16
 8001b7c:	ea47 4711 	orr.w	r7, r7, r1, lsr #16
 8001b80:	b2a1      	uxth	r1, r4
 8001b82:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8001b86:	ea46 4414 	orr.w	r4, r6, r4, lsr #16
 8001b8a:	ea48 4202 	orr.w	r2, r8, r2, lsl #16
 8001b8e:	f8d9 6000 	ldr.w	r6, [r9]
 8001b92:	f8da e000 	ldr.w	lr, [sl]
 8001b96:	fb22 cc06 	smlad	ip, r2, r6, ip
 8001b9a:	fb22 520e 	smlad	r2, r2, lr, r5
 8001b9e:	fb21 0006 	smlad	r0, r1, r6, r0
 8001ba2:	fb21 310e 	smlad	r1, r1, lr, r3
 8001ba6:	f8d9 6004 	ldr.w	r6, [r9, #4]
 8001baa:	f8da 3004 	ldr.w	r3, [sl, #4]
 8001bae:	f109 0908 	add.w	r9, r9, #8
 8001bb2:	f10a 0a08 	add.w	sl, sl, #8
 8001bb6:	fb27 cc06 	smlad	ip, r7, r6, ip
 8001bba:	fb27 2503 	smlad	r5, r7, r3, r2
 8001bbe:	fb24 0006 	smlad	r0, r4, r6, r0
 8001bc2:	fb24 1303 	smlad	r3, r4, r3, r1
 8001bc6:	9a02      	ldr	r2, [sp, #8]
 8001bc8:	455a      	cmp	r2, fp
 8001bca:	d1be      	bne.n	8001b4a <arm_nn_mat_mult_kernel_q7_q15+0xce>
 8001bcc:	9a03      	ldr	r2, [sp, #12]
 8001bce:	9908      	ldr	r1, [sp, #32]
 8001bd0:	f8dd 8048 	ldr.w	r8, [sp, #72]	; 0x48
 8001bd4:	f8dd e044 	ldr.w	lr, [sp, #68]	; 0x44
 8001bd8:	440a      	add	r2, r1
 8001bda:	9203      	str	r2, [sp, #12]
 8001bdc:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8001bde:	b1d2      	cbz	r2, 8001c16 <arm_nn_mat_mult_kernel_q7_q15+0x19a>
 8001be0:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8001be2:	f8dd a00c 	ldr.w	sl, [sp, #12]
 8001be6:	f10b 32ff 	add.w	r2, fp, #4294967295
 8001bea:	eb0b 0901 	add.w	r9, fp, r1
 8001bee:	f912 7f01 	ldrsb.w	r7, [r2, #1]!
 8001bf2:	f93e 6b02 	ldrsh.w	r6, [lr], #2
 8001bf6:	f938 4b02 	ldrsh.w	r4, [r8], #2
 8001bfa:	f91a 1b01 	ldrsb.w	r1, [sl], #1
 8001bfe:	4591      	cmp	r9, r2
 8001c00:	fb16 cc07 	smlabb	ip, r6, r7, ip
 8001c04:	fb14 5507 	smlabb	r5, r4, r7, r5
 8001c08:	fb16 0001 	smlabb	r0, r6, r1, r0
 8001c0c:	fb14 3301 	smlabb	r3, r4, r1, r3
 8001c10:	d1ed      	bne.n	8001bee <arm_nn_mat_mult_kernel_q7_q15+0x172>
 8001c12:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8001c14:	4493      	add	fp, r2
 8001c16:	990a      	ldr	r1, [sp, #40]	; 0x28
 8001c18:	fa4c fc01 	asr.w	ip, ip, r1
 8001c1c:	f30c 0c07 	ssat	ip, #8, ip
 8001c20:	9c07      	ldr	r4, [sp, #28]
 8001c22:	460a      	mov	r2, r1
 8001c24:	f804 cc02 	strb.w	ip, [r4, #-2]
 8001c28:	4108      	asrs	r0, r1
 8001c2a:	f300 0007 	ssat	r0, #8, r0
 8001c2e:	f804 0c01 	strb.w	r0, [r4, #-1]
 8001c32:	4115      	asrs	r5, r2
 8001c34:	f305 0507 	ssat	r5, #8, r5
 8001c38:	9806      	ldr	r0, [sp, #24]
 8001c3a:	4113      	asrs	r3, r2
 8001c3c:	f800 5c02 	strb.w	r5, [r0, #-2]
 8001c40:	f303 0307 	ssat	r3, #8, r3
 8001c44:	f800 3c01 	strb.w	r3, [r0, #-1]
 8001c48:	9b05      	ldr	r3, [sp, #20]
 8001c4a:	9a04      	ldr	r2, [sp, #16]
 8001c4c:	449b      	add	fp, r3
 8001c4e:	1ca3      	adds	r3, r4, #2
 8001c50:	9307      	str	r3, [sp, #28]
 8001c52:	1c83      	adds	r3, r0, #2
 8001c54:	3202      	adds	r2, #2
 8001c56:	9306      	str	r3, [sp, #24]
 8001c58:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8001c5a:	9204      	str	r2, [sp, #16]
 8001c5c:	4615      	mov	r5, r2
 8001c5e:	429d      	cmp	r5, r3
 8001c60:	f47f af55 	bne.w	8001b0e <arm_nn_mat_mult_kernel_q7_q15+0x92>
 8001c64:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8001c66:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8001c68:	3301      	adds	r3, #1
 8001c6a:	005b      	lsls	r3, r3, #1
 8001c6c:	441a      	add	r2, r3
 8001c6e:	9224      	str	r2, [sp, #144]	; 0x90
 8001c70:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8001c72:	441a      	add	r2, r3
 8001c74:	9225      	str	r2, [sp, #148]	; 0x94
 8001c76:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8001c78:	441a      	add	r2, r3
 8001c7a:	9215      	str	r2, [sp, #84]	; 0x54
 8001c7c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8001c7e:	07da      	lsls	r2, r3, #31
 8001c80:	d575      	bpl.n	8001d6e <arm_nn_mat_mult_kernel_q7_q15+0x2f2>
 8001c82:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8001c84:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8001c86:	f993 0000 	ldrsb.w	r0, [r3]
 8001c8a:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8001c8c:	4090      	lsls	r0, r2
 8001c8e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8001c90:	2301      	movs	r3, #1
 8001c92:	4093      	lsls	r3, r2
 8001c94:	9a05      	ldr	r2, [sp, #20]
 8001c96:	eb00 0053 	add.w	r0, r0, r3, lsr #1
 8001c9a:	0893      	lsrs	r3, r2, #2
 8001c9c:	eb06 0842 	add.w	r8, r6, r2, lsl #1
 8001ca0:	d072      	beq.n	8001d88 <arm_nn_mat_mult_kernel_q7_q15+0x30c>
 8001ca2:	f103 39ff 	add.w	r9, r3, #4294967295
 8001ca6:	fa1f f989 	uxth.w	r9, r9
 8001caa:	f109 0901 	add.w	r9, r9, #1
 8001cae:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 8001d8c <arm_nn_mat_mult_kernel_q7_q15+0x310>
 8001cb2:	eb0b 0e89 	add.w	lr, fp, r9, lsl #2
 8001cb6:	4647      	mov	r7, r8
 8001cb8:	4602      	mov	r2, r0
 8001cba:	f85b 3b04 	ldr.w	r3, [fp], #4
 8001cbe:	fa2f f483 	sxtb16	r4, r3
 8001cc2:	ea4f 2333 	mov.w	r3, r3, ror #8
 8001cc6:	b2a1      	uxth	r1, r4
 8001cc8:	fa2f f383 	sxtb16	r3, r3
 8001ccc:	ea03 050c 	and.w	r5, r3, ip
 8001cd0:	ea45 4414 	orr.w	r4, r5, r4, lsr #16
 8001cd4:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8001cd8:	6831      	ldr	r1, [r6, #0]
 8001cda:	fb23 0001 	smlad	r0, r3, r1, r0
 8001cde:	6839      	ldr	r1, [r7, #0]
 8001ce0:	fb23 2301 	smlad	r3, r3, r1, r2
 8001ce4:	6871      	ldr	r1, [r6, #4]
 8001ce6:	687a      	ldr	r2, [r7, #4]
 8001ce8:	3608      	adds	r6, #8
 8001cea:	3708      	adds	r7, #8
 8001cec:	fb24 0001 	smlad	r0, r4, r1, r0
 8001cf0:	fb24 3202 	smlad	r2, r4, r2, r3
 8001cf4:	45de      	cmp	lr, fp
 8001cf6:	d1e0      	bne.n	8001cba <arm_nn_mat_mult_kernel_q7_q15+0x23e>
 8001cf8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001cfa:	ea4f 09c9 	mov.w	r9, r9, lsl #3
 8001cfe:	444b      	add	r3, r9
 8001d00:	44c8      	add	r8, r9
 8001d02:	9309      	str	r3, [sp, #36]	; 0x24
 8001d04:	9b05      	ldr	r3, [sp, #20]
 8001d06:	f013 0303 	ands.w	r3, r3, #3
 8001d0a:	d01f      	beq.n	8001d4c <arm_nn_mat_mult_kernel_q7_q15+0x2d0>
 8001d0c:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8001d0e:	f99b 1000 	ldrsb.w	r1, [fp]
 8001d12:	8835      	ldrh	r5, [r6, #0]
 8001d14:	f8b8 4000 	ldrh.w	r4, [r8]
 8001d18:	2b01      	cmp	r3, #1
 8001d1a:	fb15 0001 	smlabb	r0, r5, r1, r0
 8001d1e:	fb14 2201 	smlabb	r2, r4, r1, r2
 8001d22:	d013      	beq.n	8001d4c <arm_nn_mat_mult_kernel_q7_q15+0x2d0>
 8001d24:	f99b 1001 	ldrsb.w	r1, [fp, #1]
 8001d28:	8875      	ldrh	r5, [r6, #2]
 8001d2a:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8001d2e:	2b02      	cmp	r3, #2
 8001d30:	fb15 0001 	smlabb	r0, r5, r1, r0
 8001d34:	fb14 2201 	smlabb	r2, r4, r1, r2
 8001d38:	d008      	beq.n	8001d4c <arm_nn_mat_mult_kernel_q7_q15+0x2d0>
 8001d3a:	f99b 3002 	ldrsb.w	r3, [fp, #2]
 8001d3e:	88b4      	ldrh	r4, [r6, #4]
 8001d40:	f8b8 1004 	ldrh.w	r1, [r8, #4]
 8001d44:	fb14 0003 	smlabb	r0, r4, r3, r0
 8001d48:	fb11 2203 	smlabb	r2, r1, r3, r2
 8001d4c:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8001d4e:	9925      	ldr	r1, [sp, #148]	; 0x94
 8001d50:	fa40 f304 	asr.w	r3, r0, r4
 8001d54:	3101      	adds	r1, #1
 8001d56:	f303 0307 	ssat	r3, #8, r3
 8001d5a:	9825      	ldr	r0, [sp, #148]	; 0x94
 8001d5c:	7003      	strb	r3, [r0, #0]
 8001d5e:	fa42 f304 	asr.w	r3, r2, r4
 8001d62:	f303 0307 	ssat	r3, #8, r3
 8001d66:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8001d68:	9125      	str	r1, [sp, #148]	; 0x94
 8001d6a:	7013      	strb	r3, [r2, #0]
 8001d6c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8001d6e:	9a25      	ldr	r2, [sp, #148]	; 0x94
 8001d70:	4413      	add	r3, r2
 8001d72:	4618      	mov	r0, r3
 8001d74:	b019      	add	sp, #100	; 0x64
 8001d76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001d7a:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
 8001d7e:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 8001d82:	4603      	mov	r3, r0
 8001d84:	4665      	mov	r5, ip
 8001d86:	e729      	b.n	8001bdc <arm_nn_mat_mult_kernel_q7_q15+0x160>
 8001d88:	4602      	mov	r2, r0
 8001d8a:	e7bb      	b.n	8001d04 <arm_nn_mat_mult_kernel_q7_q15+0x288>
 8001d8c:	ffff0000 	.word	0xffff0000

08001d90 <arm_nn_mat_mult_kernel_q7_q15_reordered>:
 8001d90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001d94:	b097      	sub	sp, #92	; 0x5c
 8001d96:	4683      	mov	fp, r0
 8001d98:	f8bd 4080 	ldrh.w	r4, [sp, #128]	; 0x80
 8001d9c:	9823      	ldr	r0, [sp, #140]	; 0x8c
 8001d9e:	940d      	str	r4, [sp, #52]	; 0x34
 8001da0:	f8bd 4084 	ldrh.w	r4, [sp, #132]	; 0x84
 8001da4:	940e      	str	r4, [sp, #56]	; 0x38
 8001da6:	9215      	str	r2, [sp, #84]	; 0x54
 8001da8:	9108      	str	r1, [sp, #32]
 8001daa:	9305      	str	r3, [sp, #20]
 8001dac:	4410      	add	r0, r2
 8001dae:	2a00      	cmp	r2, #0
 8001db0:	f000 80d0 	beq.w	8001f54 <arm_nn_mat_mult_kernel_q7_q15_reordered+0x1c4>
 8001db4:	4627      	mov	r7, r4
 8001db6:	089c      	lsrs	r4, r3, #2
 8001db8:	468e      	mov	lr, r1
 8001dba:	461e      	mov	r6, r3
 8001dbc:	1e61      	subs	r1, r4, #1
 8001dbe:	f003 0303 	and.w	r3, r3, #3
 8001dc2:	940b      	str	r4, [sp, #44]	; 0x2c
 8001dc4:	1e54      	subs	r4, r2, #1
 8001dc6:	f04f 0c01 	mov.w	ip, #1
 8001dca:	1e5d      	subs	r5, r3, #1
 8001dcc:	b289      	uxth	r1, r1
 8001dce:	930c      	str	r3, [sp, #48]	; 0x30
 8001dd0:	f024 0401 	bic.w	r4, r4, #1
 8001dd4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8001dd6:	9302      	str	r3, [sp, #8]
 8001dd8:	3101      	adds	r1, #1
 8001dda:	3402      	adds	r4, #2
 8001ddc:	3002      	adds	r0, #2
 8001dde:	fa0c f307 	lsl.w	r3, ip, r7
 8001de2:	00ca      	lsls	r2, r1, #3
 8001de4:	eb0e 0646 	add.w	r6, lr, r6, lsl #1
 8001de8:	fa23 f30c 	lsr.w	r3, r3, ip
 8001dec:	9414      	str	r4, [sp, #80]	; 0x50
 8001dee:	9003      	str	r0, [sp, #12]
 8001df0:	0088      	lsls	r0, r1, #2
 8001df2:	4671      	mov	r1, lr
 8001df4:	4411      	add	r1, r2
 8001df6:	9006      	str	r0, [sp, #24]
 8001df8:	9c14      	ldr	r4, [sp, #80]	; 0x50
 8001dfa:	930a      	str	r3, [sp, #40]	; 0x28
 8001dfc:	18b0      	adds	r0, r6, r2
 8001dfe:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8001e00:	9a02      	ldr	r2, [sp, #8]
 8001e02:	9110      	str	r1, [sp, #64]	; 0x40
 8001e04:	b2ad      	uxth	r5, r5
 8001e06:	eb05 010c 	add.w	r1, r5, ip
 8001e0a:	4422      	add	r2, r4
 8001e0c:	3302      	adds	r3, #2
 8001e0e:	960f      	str	r6, [sp, #60]	; 0x3c
 8001e10:	9512      	str	r5, [sp, #72]	; 0x48
 8001e12:	9011      	str	r0, [sp, #68]	; 0x44
 8001e14:	9113      	str	r1, [sp, #76]	; 0x4c
 8001e16:	9209      	str	r2, [sp, #36]	; 0x24
 8001e18:	9304      	str	r3, [sp, #16]
 8001e1a:	9a02      	ldr	r2, [sp, #8]
 8001e1c:	990a      	ldr	r1, [sp, #40]	; 0x28
 8001e1e:	f992 6000 	ldrsb.w	r6, [r2]
 8001e22:	f992 3001 	ldrsb.w	r3, [r2, #1]
 8001e26:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8001e28:	4096      	lsls	r6, r2
 8001e2a:	4093      	lsls	r3, r2
 8001e2c:	9a05      	ldr	r2, [sp, #20]
 8001e2e:	eb0b 0a02 	add.w	sl, fp, r2
 8001e32:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8001e34:	440e      	add	r6, r1
 8001e36:	440b      	add	r3, r1
 8001e38:	2a00      	cmp	r2, #0
 8001e3a:	f000 808e 	beq.w	8001f5a <arm_nn_mat_mult_kernel_q7_q15_reordered+0x1ca>
 8001e3e:	9a06      	ldr	r2, [sp, #24]
 8001e40:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
 8001e44:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8001e48:	f8cd a01c 	str.w	sl, [sp, #28]
 8001e4c:	445a      	add	r2, fp
 8001e4e:	9201      	str	r2, [sp, #4]
 8001e50:	4637      	mov	r7, r6
 8001e52:	461a      	mov	r2, r3
 8001e54:	f85b 1b04 	ldr.w	r1, [fp], #4
 8001e58:	f85a 0b04 	ldr.w	r0, [sl], #4
 8001e5c:	fa2f fc81 	sxtb16	ip, r1
 8001e60:	ea4f 2430 	mov.w	r4, r0, ror #8
 8001e64:	ea4f 2131 	mov.w	r1, r1, ror #8
 8001e68:	fa2f f484 	sxtb16	r4, r4
 8001e6c:	fa2f f181 	sxtb16	r1, r1
 8001e70:	fa2f f080 	sxtb16	r0, r0
 8001e74:	f8d8 e000 	ldr.w	lr, [r8]
 8001e78:	f8d9 5000 	ldr.w	r5, [r9]
 8001e7c:	fb2c 660e 	smlad	r6, ip, lr, r6
 8001e80:	fb2c 7705 	smlad	r7, ip, r5, r7
 8001e84:	fb20 330e 	smlad	r3, r0, lr, r3
 8001e88:	fb20 2205 	smlad	r2, r0, r5, r2
 8001e8c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8001e90:	f8d9 e004 	ldr.w	lr, [r9, #4]
 8001e94:	f108 0808 	add.w	r8, r8, #8
 8001e98:	f109 0908 	add.w	r9, r9, #8
 8001e9c:	fb21 6600 	smlad	r6, r1, r0, r6
 8001ea0:	fb21 770e 	smlad	r7, r1, lr, r7
 8001ea4:	fb24 3300 	smlad	r3, r4, r0, r3
 8001ea8:	fb24 220e 	smlad	r2, r4, lr, r2
 8001eac:	9901      	ldr	r1, [sp, #4]
 8001eae:	458b      	cmp	fp, r1
 8001eb0:	d1d0      	bne.n	8001e54 <arm_nn_mat_mult_kernel_q7_q15_reordered+0xc4>
 8001eb2:	f8dd a01c 	ldr.w	sl, [sp, #28]
 8001eb6:	9906      	ldr	r1, [sp, #24]
 8001eb8:	f8dd 8044 	ldr.w	r8, [sp, #68]	; 0x44
 8001ebc:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
 8001ec0:	448a      	add	sl, r1
 8001ec2:	990c      	ldr	r1, [sp, #48]	; 0x30
 8001ec4:	b1c1      	cbz	r1, 8001ef8 <arm_nn_mat_mult_kernel_q7_q15_reordered+0x168>
 8001ec6:	9812      	ldr	r0, [sp, #72]	; 0x48
 8001ec8:	f10b 31ff 	add.w	r1, fp, #4294967295
 8001ecc:	eb0b 0900 	add.w	r9, fp, r0
 8001ed0:	f911 ef01 	ldrsb.w	lr, [r1, #1]!
 8001ed4:	f93c 5b02 	ldrsh.w	r5, [ip], #2
 8001ed8:	f938 4b02 	ldrsh.w	r4, [r8], #2
 8001edc:	f91a 0b01 	ldrsb.w	r0, [sl], #1
 8001ee0:	4589      	cmp	r9, r1
 8001ee2:	fb15 660e 	smlabb	r6, r5, lr, r6
 8001ee6:	fb14 770e 	smlabb	r7, r4, lr, r7
 8001eea:	fb15 3300 	smlabb	r3, r5, r0, r3
 8001eee:	fb14 2200 	smlabb	r2, r4, r0, r2
 8001ef2:	d1ed      	bne.n	8001ed0 <arm_nn_mat_mult_kernel_q7_q15_reordered+0x140>
 8001ef4:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8001ef6:	448b      	add	fp, r1
 8001ef8:	990e      	ldr	r1, [sp, #56]	; 0x38
 8001efa:	410e      	asrs	r6, r1
 8001efc:	f306 0607 	ssat	r6, #8, r6
 8001f00:	9c04      	ldr	r4, [sp, #16]
 8001f02:	410b      	asrs	r3, r1
 8001f04:	4620      	mov	r0, r4
 8001f06:	f804 6c02 	strb.w	r6, [r4, #-2]
 8001f0a:	f303 0307 	ssat	r3, #8, r3
 8001f0e:	f804 3c01 	strb.w	r3, [r4, #-1]
 8001f12:	410f      	asrs	r7, r1
 8001f14:	f307 0707 	ssat	r7, #8, r7
 8001f18:	9c03      	ldr	r4, [sp, #12]
 8001f1a:	410a      	asrs	r2, r1
 8001f1c:	f804 7c02 	strb.w	r7, [r4, #-2]
 8001f20:	f302 0207 	ssat	r2, #8, r2
 8001f24:	9b02      	ldr	r3, [sp, #8]
 8001f26:	f804 2c01 	strb.w	r2, [r4, #-1]
 8001f2a:	3302      	adds	r3, #2
 8001f2c:	461d      	mov	r5, r3
 8001f2e:	9302      	str	r3, [sp, #8]
 8001f30:	4623      	mov	r3, r4
 8001f32:	9a05      	ldr	r2, [sp, #20]
 8001f34:	3302      	adds	r3, #2
 8001f36:	9303      	str	r3, [sp, #12]
 8001f38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8001f3a:	4493      	add	fp, r2
 8001f3c:	1c82      	adds	r2, r0, #2
 8001f3e:	9204      	str	r2, [sp, #16]
 8001f40:	461a      	mov	r2, r3
 8001f42:	42aa      	cmp	r2, r5
 8001f44:	f47f af69 	bne.w	8001e1a <arm_nn_mat_mult_kernel_q7_q15_reordered+0x8a>
 8001f48:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8001f4a:	9a14      	ldr	r2, [sp, #80]	; 0x50
 8001f4c:	4413      	add	r3, r2
 8001f4e:	4618      	mov	r0, r3
 8001f50:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8001f52:	4418      	add	r0, r3
 8001f54:	b017      	add	sp, #92	; 0x5c
 8001f56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001f5a:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 8001f5e:	f8dd c020 	ldr.w	ip, [sp, #32]
 8001f62:	461a      	mov	r2, r3
 8001f64:	4637      	mov	r7, r6
 8001f66:	e7ac      	b.n	8001ec2 <arm_nn_mat_mult_kernel_q7_q15_reordered+0x132>

08001f68 <arm_fully_connected_q7_opt>:
 8001f68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001f6c:	b08f      	sub	sp, #60	; 0x3c
 8001f6e:	089d      	lsrs	r5, r3, #2
 8001f70:	f8bd 4060 	ldrh.w	r4, [sp, #96]	; 0x60
 8001f74:	9402      	str	r4, [sp, #8]
 8001f76:	f8bd 4064 	ldrh.w	r4, [sp, #100]	; 0x64
 8001f7a:	9400      	str	r4, [sp, #0]
 8001f7c:	4626      	mov	r6, r4
 8001f7e:	460c      	mov	r4, r1
 8001f80:	991c      	ldr	r1, [sp, #112]	; 0x70
 8001f82:	930d      	str	r3, [sp, #52]	; 0x34
 8001f84:	4617      	mov	r7, r2
 8001f86:	920c      	str	r2, [sp, #48]	; 0x30
 8001f88:	f000 f95e 	bl	8002248 <arm_q7_to_q15_reordered_no_shift>
 8001f8c:	2d00      	cmp	r5, #0
 8001f8e:	f000 80bc 	beq.w	800210a <arm_fully_connected_q7_opt+0x1a2>
 8001f92:	f007 0203 	and.w	r2, r7, #3
 8001f96:	08bb      	lsrs	r3, r7, #2
 8001f98:	3d01      	subs	r5, #1
 8001f9a:	1e51      	subs	r1, r2, #1
 8001f9c:	9305      	str	r3, [sp, #20]
 8001f9e:	3b01      	subs	r3, #1
 8001fa0:	b289      	uxth	r1, r1
 8001fa2:	9206      	str	r2, [sp, #24]
 8001fa4:	b2aa      	uxth	r2, r5
 8001fa6:	b29d      	uxth	r5, r3
 8001fa8:	2301      	movs	r3, #1
 8001faa:	441d      	add	r5, r3
 8001fac:	18c8      	adds	r0, r1, r3
 8001fae:	40b3      	lsls	r3, r6
 8001fb0:	0049      	lsls	r1, r1, #1
 8001fb2:	012e      	lsls	r6, r5, #4
 8001fb4:	085b      	lsrs	r3, r3, #1
 8001fb6:	9607      	str	r6, [sp, #28]
 8001fb8:	9108      	str	r1, [sp, #32]
 8001fba:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 8001fbc:	991a      	ldr	r1, [sp, #104]	; 0x68
 8001fbe:	9304      	str	r3, [sp, #16]
 8001fc0:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8001fc2:	920b      	str	r2, [sp, #44]	; 0x2c
 8001fc4:	3202      	adds	r2, #2
 8001fc6:	eb06 05c5 	add.w	r5, r6, r5, lsl #3
 8001fca:	0080      	lsls	r0, r0, #2
 8001fcc:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8001fd0:	3304      	adds	r3, #4
 8001fd2:	9509      	str	r5, [sp, #36]	; 0x24
 8001fd4:	900a      	str	r0, [sp, #40]	; 0x28
 8001fd6:	9203      	str	r2, [sp, #12]
 8001fd8:	f101 0b04 	add.w	fp, r1, #4
 8001fdc:	9301      	str	r3, [sp, #4]
 8001fde:	9d02      	ldr	r5, [sp, #8]
 8001fe0:	f91b 0c04 	ldrsb.w	r0, [fp, #-4]
 8001fe4:	f91b 2c03 	ldrsb.w	r2, [fp, #-3]
 8001fe8:	f91b 1c02 	ldrsb.w	r1, [fp, #-2]
 8001fec:	f91b 3c01 	ldrsb.w	r3, [fp, #-1]
 8001ff0:	9e04      	ldr	r6, [sp, #16]
 8001ff2:	40a8      	lsls	r0, r5
 8001ff4:	40aa      	lsls	r2, r5
 8001ff6:	40a9      	lsls	r1, r5
 8001ff8:	40ab      	lsls	r3, r5
 8001ffa:	9d05      	ldr	r5, [sp, #20]
 8001ffc:	4430      	add	r0, r6
 8001ffe:	4432      	add	r2, r6
 8002000:	4431      	add	r1, r6
 8002002:	4433      	add	r3, r6
 8002004:	2d00      	cmp	r5, #0
 8002006:	f000 80e3 	beq.w	80021d0 <arm_fully_connected_q7_opt+0x268>
 800200a:	9d07      	ldr	r5, [sp, #28]
 800200c:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 800200e:	1967      	adds	r7, r4, r5
 8002010:	f8d4 8000 	ldr.w	r8, [r4]
 8002014:	6835      	ldr	r5, [r6, #0]
 8002016:	fa2f fe88 	sxtb16	lr, r8
 800201a:	ea4f 2838 	mov.w	r8, r8, ror #8
 800201e:	fa2f f888 	sxtb16	r8, r8
 8002022:	fb2e 0005 	smlad	r0, lr, r5, r0
 8002026:	fb28 2805 	smlad	r8, r8, r5, r2
 800202a:	6862      	ldr	r2, [r4, #4]
 800202c:	fa2f fe82 	sxtb16	lr, r2
 8002030:	ea4f 2232 	mov.w	r2, r2, ror #8
 8002034:	fa2f f282 	sxtb16	r2, r2
 8002038:	fb2e 1105 	smlad	r1, lr, r5, r1
 800203c:	fb22 3305 	smlad	r3, r2, r5, r3
 8002040:	f8d4 e008 	ldr.w	lr, [r4, #8]
 8002044:	f8d6 c004 	ldr.w	ip, [r6, #4]
 8002048:	fa2f f58e 	sxtb16	r5, lr
 800204c:	ea4f 223e 	mov.w	r2, lr, ror #8
 8002050:	3608      	adds	r6, #8
 8002052:	fa2f f282 	sxtb16	r2, r2
 8002056:	fb25 000c 	smlad	r0, r5, ip, r0
 800205a:	fb22 820c 	smlad	r2, r2, ip, r8
 800205e:	68e5      	ldr	r5, [r4, #12]
 8002060:	fa2f fe85 	sxtb16	lr, r5
 8002064:	3410      	adds	r4, #16
 8002066:	ea4f 2535 	mov.w	r5, r5, ror #8
 800206a:	fa2f f585 	sxtb16	r5, r5
 800206e:	fb2e 110c 	smlad	r1, lr, ip, r1
 8002072:	fb25 330c 	smlad	r3, r5, ip, r3
 8002076:	42bc      	cmp	r4, r7
 8002078:	d1ca      	bne.n	8002010 <arm_fully_connected_q7_opt+0xa8>
 800207a:	f8dd a024 	ldr.w	sl, [sp, #36]	; 0x24
 800207e:	9d06      	ldr	r5, [sp, #24]
 8002080:	b1e5      	cbz	r5, 80020bc <arm_fully_connected_q7_opt+0x154>
 8002082:	9e08      	ldr	r6, [sp, #32]
 8002084:	f1aa 0702 	sub.w	r7, sl, #2
 8002088:	1d25      	adds	r5, r4, #4
 800208a:	44b2      	add	sl, r6
 800208c:	f937 6f02 	ldrsh.w	r6, [r7, #2]!
 8002090:	f915 9c04 	ldrsb.w	r9, [r5, #-4]
 8002094:	f915 8c03 	ldrsb.w	r8, [r5, #-3]
 8002098:	f915 cc02 	ldrsb.w	ip, [r5, #-2]
 800209c:	f915 ec01 	ldrsb.w	lr, [r5, #-1]
 80020a0:	45ba      	cmp	sl, r7
 80020a2:	fb16 0009 	smlabb	r0, r6, r9, r0
 80020a6:	fb16 2208 	smlabb	r2, r6, r8, r2
 80020aa:	fb16 110c 	smlabb	r1, r6, ip, r1
 80020ae:	fb16 330e 	smlabb	r3, r6, lr, r3
 80020b2:	f105 0504 	add.w	r5, r5, #4
 80020b6:	d1e9      	bne.n	800208c <arm_fully_connected_q7_opt+0x124>
 80020b8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80020ba:	442c      	add	r4, r5
 80020bc:	9f00      	ldr	r7, [sp, #0]
 80020be:	4138      	asrs	r0, r7
 80020c0:	f300 0007 	ssat	r0, #8, r0
 80020c4:	9e01      	ldr	r6, [sp, #4]
 80020c6:	413a      	asrs	r2, r7
 80020c8:	f806 0c04 	strb.w	r0, [r6, #-4]
 80020cc:	f302 0207 	ssat	r2, #8, r2
 80020d0:	f806 2c03 	strb.w	r2, [r6, #-3]
 80020d4:	4139      	asrs	r1, r7
 80020d6:	f301 0107 	ssat	r1, #8, r1
 80020da:	f806 1c02 	strb.w	r1, [r6, #-2]
 80020de:	413b      	asrs	r3, r7
 80020e0:	f303 0307 	ssat	r3, #8, r3
 80020e4:	f806 3c01 	strb.w	r3, [r6, #-1]
 80020e8:	1d33      	adds	r3, r6, #4
 80020ea:	9301      	str	r3, [sp, #4]
 80020ec:	9b03      	ldr	r3, [sp, #12]
 80020ee:	f10b 0b04 	add.w	fp, fp, #4
 80020f2:	455b      	cmp	r3, fp
 80020f4:	f47f af73 	bne.w	8001fde <arm_fully_connected_q7_opt+0x76>
 80020f8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80020fa:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 80020fc:	3301      	adds	r3, #1
 80020fe:	009b      	lsls	r3, r3, #2
 8002100:	441a      	add	r2, r3
 8002102:	921a      	str	r2, [sp, #104]	; 0x68
 8002104:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8002106:	441a      	add	r2, r3
 8002108:	921b      	str	r2, [sp, #108]	; 0x6c
 800210a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800210c:	f013 0e03 	ands.w	lr, r3, #3
 8002110:	d058      	beq.n	80021c4 <arm_fully_connected_q7_opt+0x25c>
 8002112:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002114:	0893      	lsrs	r3, r2, #2
 8002116:	f002 0203 	and.w	r2, r2, #3
 800211a:	f103 3bff 	add.w	fp, r3, #4294967295
 800211e:	9301      	str	r3, [sp, #4]
 8002120:	9203      	str	r2, [sp, #12]
 8002122:	1e53      	subs	r3, r2, #1
 8002124:	9a00      	ldr	r2, [sp, #0]
 8002126:	f04f 0c01 	mov.w	ip, #1
 800212a:	fa1f fb8b 	uxth.w	fp, fp
 800212e:	44e3      	add	fp, ip
 8002130:	fa0c fc02 	lsl.w	ip, ip, r2
 8002134:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8002136:	f10e 3eff 	add.w	lr, lr, #4294967295
 800213a:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800213e:	fa12 fe8e 	uxtah	lr, r2, lr
 8002142:	1e57      	subs	r7, r2, #1
 8002144:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8002146:	f8cd a010 	str.w	sl, [sp, #16]
 800214a:	b29b      	uxth	r3, r3
 800214c:	f8dd a06c 	ldr.w	sl, [sp, #108]	; 0x6c
 8002150:	eb02 0bcb 	add.w	fp, r2, fp, lsl #3
 8002154:	ea4f 0943 	mov.w	r9, r3, lsl #1
 8002158:	f103 0801 	add.w	r8, r3, #1
 800215c:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 8002160:	9a02      	ldr	r2, [sp, #8]
 8002162:	f917 3f01 	ldrsb.w	r3, [r7, #1]!
 8002166:	4093      	lsls	r3, r2
 8002168:	9a01      	ldr	r2, [sp, #4]
 800216a:	4463      	add	r3, ip
 800216c:	b372      	cbz	r2, 80021cc <arm_fully_connected_q7_opt+0x264>
 800216e:	9a04      	ldr	r2, [sp, #16]
 8002170:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 8002172:	18a6      	adds	r6, r4, r2
 8002174:	f854 2b04 	ldr.w	r2, [r4], #4
 8002178:	6829      	ldr	r1, [r5, #0]
 800217a:	fa2f f082 	sxtb16	r0, r2
 800217e:	ea4f 2232 	mov.w	r2, r2, ror #8
 8002182:	fa2f f282 	sxtb16	r2, r2
 8002186:	fb21 3300 	smlad	r3, r1, r0, r3
 800218a:	6869      	ldr	r1, [r5, #4]
 800218c:	3508      	adds	r5, #8
 800218e:	fb21 3302 	smlad	r3, r1, r2, r3
 8002192:	42b4      	cmp	r4, r6
 8002194:	d1ee      	bne.n	8002174 <arm_fully_connected_q7_opt+0x20c>
 8002196:	465e      	mov	r6, fp
 8002198:	9a03      	ldr	r2, [sp, #12]
 800219a:	b15a      	cbz	r2, 80021b4 <arm_fully_connected_q7_opt+0x24c>
 800219c:	1eb2      	subs	r2, r6, #2
 800219e:	4621      	mov	r1, r4
 80021a0:	444e      	add	r6, r9
 80021a2:	f832 5f02 	ldrh.w	r5, [r2, #2]!
 80021a6:	f911 0b01 	ldrsb.w	r0, [r1], #1
 80021aa:	4296      	cmp	r6, r2
 80021ac:	fb15 3300 	smlabb	r3, r5, r0, r3
 80021b0:	d1f7      	bne.n	80021a2 <arm_fully_connected_q7_opt+0x23a>
 80021b2:	4444      	add	r4, r8
 80021b4:	9a00      	ldr	r2, [sp, #0]
 80021b6:	4113      	asrs	r3, r2
 80021b8:	f303 0307 	ssat	r3, #8, r3
 80021bc:	45be      	cmp	lr, r7
 80021be:	f80a 3b01 	strb.w	r3, [sl], #1
 80021c2:	d1cd      	bne.n	8002160 <arm_fully_connected_q7_opt+0x1f8>
 80021c4:	2000      	movs	r0, #0
 80021c6:	b00f      	add	sp, #60	; 0x3c
 80021c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80021cc:	9e1c      	ldr	r6, [sp, #112]	; 0x70
 80021ce:	e7e3      	b.n	8002198 <arm_fully_connected_q7_opt+0x230>
 80021d0:	f8dd a070 	ldr.w	sl, [sp, #112]	; 0x70
 80021d4:	e753      	b.n	800207e <arm_fully_connected_q7_opt+0x116>
 80021d6:	bf00      	nop

080021d8 <arm_q7_to_q15_no_shift>:
 80021d8:	ea5f 0c92 	movs.w	ip, r2, lsr #2
 80021dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80021e0:	d02e      	beq.n	8002240 <arm_q7_to_q15_no_shift+0x68>
 80021e2:	f8df e060 	ldr.w	lr, [pc, #96]	; 8002244 <arm_q7_to_q15_no_shift+0x6c>
 80021e6:	eb00 078c 	add.w	r7, r0, ip, lsl #2
 80021ea:	460c      	mov	r4, r1
 80021ec:	f850 3b04 	ldr.w	r3, [r0], #4
 80021f0:	fa2f f883 	sxtb16	r8, r3
 80021f4:	ea4f 2333 	mov.w	r3, r3, ror #8
 80021f8:	fa1f f588 	uxth.w	r5, r8
 80021fc:	fa2f f383 	sxtb16	r3, r3
 8002200:	ea03 060e 	and.w	r6, r3, lr
 8002204:	ea46 4618 	orr.w	r6, r6, r8, lsr #16
 8002208:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
 800220c:	42b8      	cmp	r0, r7
 800220e:	6066      	str	r6, [r4, #4]
 8002210:	6023      	str	r3, [r4, #0]
 8002212:	f104 0408 	add.w	r4, r4, #8
 8002216:	d1e9      	bne.n	80021ec <arm_q7_to_q15_no_shift+0x14>
 8002218:	eb01 01cc 	add.w	r1, r1, ip, lsl #3
 800221c:	f012 0203 	ands.w	r2, r2, #3
 8002220:	d00c      	beq.n	800223c <arm_q7_to_q15_no_shift+0x64>
 8002222:	f997 3000 	ldrsb.w	r3, [r7]
 8002226:	800b      	strh	r3, [r1, #0]
 8002228:	2a01      	cmp	r2, #1
 800222a:	d007      	beq.n	800223c <arm_q7_to_q15_no_shift+0x64>
 800222c:	f997 3001 	ldrsb.w	r3, [r7, #1]
 8002230:	804b      	strh	r3, [r1, #2]
 8002232:	2a02      	cmp	r2, #2
 8002234:	bf1c      	itt	ne
 8002236:	f997 3002 	ldrsbne.w	r3, [r7, #2]
 800223a:	808b      	strhne	r3, [r1, #4]
 800223c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002240:	4607      	mov	r7, r0
 8002242:	e7eb      	b.n	800221c <arm_q7_to_q15_no_shift+0x44>
 8002244:	ffff0000 	.word	0xffff0000

08002248 <arm_q7_to_q15_reordered_no_shift>:
 8002248:	b4f0      	push	{r4, r5, r6, r7}
 800224a:	0897      	lsrs	r7, r2, #2
 800224c:	d027      	beq.n	800229e <arm_q7_to_q15_reordered_no_shift+0x56>
 800224e:	f101 0408 	add.w	r4, r1, #8
 8002252:	eb00 0687 	add.w	r6, r0, r7, lsl #2
 8002256:	f850 3b04 	ldr.w	r3, [r0], #4
 800225a:	fa2f f583 	sxtb16	r5, r3
 800225e:	42b0      	cmp	r0, r6
 8002260:	ea4f 2333 	mov.w	r3, r3, ror #8
 8002264:	f844 5c08 	str.w	r5, [r4, #-8]
 8002268:	fa2f f383 	sxtb16	r3, r3
 800226c:	f104 0408 	add.w	r4, r4, #8
 8002270:	f844 3c0c 	str.w	r3, [r4, #-12]
 8002274:	d1ef      	bne.n	8002256 <arm_q7_to_q15_reordered_no_shift+0xe>
 8002276:	eb01 01c7 	add.w	r1, r1, r7, lsl #3
 800227a:	f012 0203 	ands.w	r2, r2, #3
 800227e:	d00c      	beq.n	800229a <arm_q7_to_q15_reordered_no_shift+0x52>
 8002280:	f996 3000 	ldrsb.w	r3, [r6]
 8002284:	800b      	strh	r3, [r1, #0]
 8002286:	2a01      	cmp	r2, #1
 8002288:	d007      	beq.n	800229a <arm_q7_to_q15_reordered_no_shift+0x52>
 800228a:	f996 3001 	ldrsb.w	r3, [r6, #1]
 800228e:	804b      	strh	r3, [r1, #2]
 8002290:	2a02      	cmp	r2, #2
 8002292:	bf1c      	itt	ne
 8002294:	f996 3002 	ldrsbne.w	r3, [r6, #2]
 8002298:	808b      	strhne	r3, [r1, #4]
 800229a:	bcf0      	pop	{r4, r5, r6, r7}
 800229c:	4770      	bx	lr
 800229e:	4606      	mov	r6, r0
 80022a0:	e7eb      	b.n	800227a <arm_q7_to_q15_reordered_no_shift+0x32>
 80022a2:	bf00      	nop

080022a4 <arm_maxpool_q7_HWC>:
 80022a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80022a8:	b091      	sub	sp, #68	; 0x44
 80022aa:	4617      	mov	r7, r2
 80022ac:	930a      	str	r3, [sp, #40]	; 0x28
 80022ae:	f8bd 3068 	ldrh.w	r3, [sp, #104]	; 0x68
 80022b2:	9307      	str	r3, [sp, #28]
 80022b4:	f8bd 306c 	ldrh.w	r3, [sp, #108]	; 0x6c
 80022b8:	930b      	str	r3, [sp, #44]	; 0x2c
 80022ba:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 80022be:	9004      	str	r0, [sp, #16]
 80022c0:	9309      	str	r3, [sp, #36]	; 0x24
 80022c2:	4608      	mov	r0, r1
 80022c4:	9106      	str	r1, [sp, #24]
 80022c6:	2900      	cmp	r1, #0
 80022c8:	f000 8145 	beq.w	8002556 <arm_maxpool_q7_HWC+0x2b2>
 80022cc:	f007 0103 	and.w	r1, r7, #3
 80022d0:	0892      	lsrs	r2, r2, #2
 80022d2:	9202      	str	r2, [sp, #8]
 80022d4:	460c      	mov	r4, r1
 80022d6:	9101      	str	r1, [sp, #4]
 80022d8:	2b00      	cmp	r3, #0
 80022da:	f000 812b 	beq.w	8002534 <arm_maxpool_q7_HWC+0x290>
 80022de:	1e53      	subs	r3, r2, #1
 80022e0:	b29b      	uxth	r3, r3
 80022e2:	3301      	adds	r3, #1
 80022e4:	1e62      	subs	r2, r4, #1
 80022e6:	ea4f 0883 	mov.w	r8, r3, lsl #2
 80022ea:	b293      	uxth	r3, r2
 80022ec:	2100      	movs	r1, #0
 80022ee:	9303      	str	r3, [sp, #12]
 80022f0:	fb00 f307 	mul.w	r3, r0, r7
 80022f4:	910e      	str	r1, [sp, #56]	; 0x38
 80022f6:	930d      	str	r3, [sp, #52]	; 0x34
 80022f8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80022fa:	9804      	ldr	r0, [sp, #16]
 80022fc:	fb01 3203 	mla	r2, r1, r3, r3
 8002300:	1882      	adds	r2, r0, r2
 8002302:	920c      	str	r2, [sp, #48]	; 0x30
 8002304:	9a06      	ldr	r2, [sp, #24]
 8002306:	2300      	movs	r3, #0
 8002308:	fb01 f202 	mul.w	r2, r1, r2
 800230c:	9208      	str	r2, [sp, #32]
 800230e:	9305      	str	r3, [sp, #20]
 8002310:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8002312:	9908      	ldr	r1, [sp, #32]
 8002314:	9c07      	ldr	r4, [sp, #28]
 8002316:	9804      	ldr	r0, [sp, #16]
 8002318:	18ce      	adds	r6, r1, r3
 800231a:	fb03 f302 	mul.w	r3, r3, r2
 800231e:	1b1a      	subs	r2, r3, r4
 8002320:	fb07 0606 	mla	r6, r7, r6, r0
 8002324:	f100 810e 	bmi.w	8002544 <arm_maxpool_q7_HWC+0x2a0>
 8002328:	eb03 0b01 	add.w	fp, r3, r1
 800232c:	ebab 0b04 	sub.w	fp, fp, r4
 8002330:	fb07 0b0b 	mla	fp, r7, fp, r0
 8002334:	980a      	ldr	r0, [sp, #40]	; 0x28
 8002336:	9906      	ldr	r1, [sp, #24]
 8002338:	4402      	add	r2, r0
 800233a:	428a      	cmp	r2, r1
 800233c:	f280 8100 	bge.w	8002540 <arm_maxpool_q7_HWC+0x29c>
 8002340:	9a08      	ldr	r2, [sp, #32]
 8002342:	189d      	adds	r5, r3, r2
 8002344:	9b07      	ldr	r3, [sp, #28]
 8002346:	1aed      	subs	r5, r5, r3
 8002348:	9b04      	ldr	r3, [sp, #16]
 800234a:	4405      	add	r5, r0
 800234c:	fb07 3505 	mla	r5, r7, r5, r3
 8002350:	4659      	mov	r1, fp
 8002352:	463a      	mov	r2, r7
 8002354:	4630      	mov	r0, r6
 8002356:	44bb      	add	fp, r7
 8002358:	f004 ff8d 	bl	8007276 <memmove>
 800235c:	455d      	cmp	r5, fp
 800235e:	bf88      	it	hi
 8002360:	eb06 0a08 	addhi.w	sl, r6, r8
 8002364:	d942      	bls.n	80023ec <arm_maxpool_q7_HWC+0x148>
 8002366:	9b02      	ldr	r3, [sp, #8]
 8002368:	2b00      	cmp	r3, #0
 800236a:	f000 80e6 	beq.w	800253a <arm_maxpool_q7_HWC+0x296>
 800236e:	46dc      	mov	ip, fp
 8002370:	4633      	mov	r3, r6
 8002372:	f85c 2b04 	ldr.w	r2, [ip], #4
 8002376:	4619      	mov	r1, r3
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	fa4f fe82 	sxtb.w	lr, r2
 800237e:	fa4f f983 	sxtb.w	r9, r3
 8002382:	45ce      	cmp	lr, r9
 8002384:	bfc8      	it	gt
 8002386:	f36e 0307 	bfigt	r3, lr, #0, #8
 800238a:	f343 2e07 	sbfx	lr, r3, #8, #8
 800238e:	f342 2407 	sbfx	r4, r2, #8, #8
 8002392:	45a6      	cmp	lr, r4
 8002394:	bfb8      	it	lt
 8002396:	f364 230f 	bfilt	r3, r4, #8, #8
 800239a:	f343 4407 	sbfx	r4, r3, #16, #8
 800239e:	f342 4007 	sbfx	r0, r2, #16, #8
 80023a2:	4284      	cmp	r4, r0
 80023a4:	bfb8      	it	lt
 80023a6:	f360 4317 	bfilt	r3, r0, #16, #8
 80023aa:	1612      	asrs	r2, r2, #24
 80023ac:	ebb2 6f23 	cmp.w	r2, r3, asr #24
 80023b0:	bfc8      	it	gt
 80023b2:	f362 631f 	bfigt	r3, r2, #24, #8
 80023b6:	f841 3b04 	str.w	r3, [r1], #4
 80023ba:	458a      	cmp	sl, r1
 80023bc:	460b      	mov	r3, r1
 80023be:	d1d8      	bne.n	8002372 <arm_maxpool_q7_HWC+0xce>
 80023c0:	eb0b 0408 	add.w	r4, fp, r8
 80023c4:	4653      	mov	r3, sl
 80023c6:	9a01      	ldr	r2, [sp, #4]
 80023c8:	b16a      	cbz	r2, 80023e6 <arm_maxpool_q7_HWC+0x142>
 80023ca:	9903      	ldr	r1, [sp, #12]
 80023cc:	1e62      	subs	r2, r4, #1
 80023ce:	440c      	add	r4, r1
 80023d0:	f912 1f01 	ldrsb.w	r1, [r2, #1]!
 80023d4:	f993 0000 	ldrsb.w	r0, [r3]
 80023d8:	4288      	cmp	r0, r1
 80023da:	bfb8      	it	lt
 80023dc:	7019      	strblt	r1, [r3, #0]
 80023de:	42a2      	cmp	r2, r4
 80023e0:	f103 0301 	add.w	r3, r3, #1
 80023e4:	d1f4      	bne.n	80023d0 <arm_maxpool_q7_HWC+0x12c>
 80023e6:	44bb      	add	fp, r7
 80023e8:	455d      	cmp	r5, fp
 80023ea:	d8bc      	bhi.n	8002366 <arm_maxpool_q7_HWC+0xc2>
 80023ec:	9b05      	ldr	r3, [sp, #20]
 80023ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80023f0:	3301      	adds	r3, #1
 80023f2:	b21b      	sxth	r3, r3
 80023f4:	429a      	cmp	r2, r3
 80023f6:	9305      	str	r3, [sp, #20]
 80023f8:	dc8a      	bgt.n	8002310 <arm_maxpool_q7_HWC+0x6c>
 80023fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80023fc:	9a06      	ldr	r2, [sp, #24]
 80023fe:	3301      	adds	r3, #1
 8002400:	b21b      	sxth	r3, r3
 8002402:	4293      	cmp	r3, r2
 8002404:	930e      	str	r3, [sp, #56]	; 0x38
 8002406:	4619      	mov	r1, r3
 8002408:	f6ff af76 	blt.w	80022f8 <arm_maxpool_q7_HWC+0x54>
 800240c:	9c09      	ldr	r4, [sp, #36]	; 0x24
 800240e:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8002410:	9708      	str	r7, [sp, #32]
 8002412:	fb14 f307 	smulbb	r3, r4, r7
 8002416:	b29b      	uxth	r3, r3
 8002418:	089a      	lsrs	r2, r3, #2
 800241a:	9202      	str	r2, [sp, #8]
 800241c:	f003 0303 	and.w	r3, r3, #3
 8002420:	3a01      	subs	r2, #1
 8002422:	1e58      	subs	r0, r3, #1
 8002424:	9303      	str	r3, [sp, #12]
 8002426:	b292      	uxth	r2, r2
 8002428:	9b06      	ldr	r3, [sp, #24]
 800242a:	3201      	adds	r2, #1
 800242c:	fb03 f103 	mul.w	r1, r3, r3
 8002430:	0092      	lsls	r2, r2, #2
 8002432:	920e      	str	r2, [sp, #56]	; 0x38
 8002434:	460a      	mov	r2, r1
 8002436:	9904      	ldr	r1, [sp, #16]
 8002438:	fb07 1202 	mla	r2, r7, r2, r1
 800243c:	920c      	str	r2, [sp, #48]	; 0x30
 800243e:	4622      	mov	r2, r4
 8002440:	2300      	movs	r3, #0
 8002442:	fb07 f202 	mul.w	r2, r7, r2
 8002446:	fa1f fb80 	uxth.w	fp, r0
 800244a:	9305      	str	r3, [sp, #20]
 800244c:	920f      	str	r2, [sp, #60]	; 0x3c
 800244e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002450:	9908      	ldr	r1, [sp, #32]
 8002452:	981e      	ldr	r0, [sp, #120]	; 0x78
 8002454:	fb02 f703 	mul.w	r7, r2, r3
 8002458:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800245a:	fb02 f303 	mul.w	r3, r2, r3
 800245e:	9a07      	ldr	r2, [sp, #28]
 8002460:	1a9b      	subs	r3, r3, r2
 8002462:	fb01 0707 	mla	r7, r1, r7, r0
 8002466:	d473      	bmi.n	8002550 <arm_maxpool_q7_HWC+0x2ac>
 8002468:	9a06      	ldr	r2, [sp, #24]
 800246a:	fb02 fa03 	mul.w	sl, r2, r3
 800246e:	460a      	mov	r2, r1
 8002470:	9904      	ldr	r1, [sp, #16]
 8002472:	fb02 1a0a 	mla	sl, r2, sl, r1
 8002476:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002478:	9906      	ldr	r1, [sp, #24]
 800247a:	4413      	add	r3, r2
 800247c:	428b      	cmp	r3, r1
 800247e:	da65      	bge.n	800254c <arm_maxpool_q7_HWC+0x2a8>
 8002480:	fb01 f303 	mul.w	r3, r1, r3
 8002484:	9a08      	ldr	r2, [sp, #32]
 8002486:	9904      	ldr	r1, [sp, #16]
 8002488:	fb02 1503 	mla	r5, r2, r3, r1
 800248c:	4651      	mov	r1, sl
 800248e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8002490:	4638      	mov	r0, r7
 8002492:	44b2      	add	sl, r6
 8002494:	f004 feef 	bl	8007276 <memmove>
 8002498:	4555      	cmp	r5, sl
 800249a:	d944      	bls.n	8002526 <arm_maxpool_q7_HWC+0x282>
 800249c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800249e:	18bb      	adds	r3, r7, r2
 80024a0:	eb0a 0902 	add.w	r9, sl, r2
 80024a4:	9301      	str	r3, [sp, #4]
 80024a6:	9b02      	ldr	r3, [sp, #8]
 80024a8:	4651      	mov	r1, sl
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	d04c      	beq.n	8002548 <arm_maxpool_q7_HWC+0x2a4>
 80024ae:	463b      	mov	r3, r7
 80024b0:	f851 2b04 	ldr.w	r2, [r1], #4
 80024b4:	4618      	mov	r0, r3
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	fa4f fc82 	sxtb.w	ip, r2
 80024bc:	fa4f f883 	sxtb.w	r8, r3
 80024c0:	45e0      	cmp	r8, ip
 80024c2:	bfb8      	it	lt
 80024c4:	f36c 0307 	bfilt	r3, ip, #0, #8
 80024c8:	f343 2c07 	sbfx	ip, r3, #8, #8
 80024cc:	f342 2e07 	sbfx	lr, r2, #8, #8
 80024d0:	45f4      	cmp	ip, lr
 80024d2:	bfb8      	it	lt
 80024d4:	f36e 230f 	bfilt	r3, lr, #8, #8
 80024d8:	f343 4e07 	sbfx	lr, r3, #16, #8
 80024dc:	f342 4407 	sbfx	r4, r2, #16, #8
 80024e0:	45a6      	cmp	lr, r4
 80024e2:	bfb8      	it	lt
 80024e4:	f364 4317 	bfilt	r3, r4, #16, #8
 80024e8:	1612      	asrs	r2, r2, #24
 80024ea:	ebb2 6f23 	cmp.w	r2, r3, asr #24
 80024ee:	bfc8      	it	gt
 80024f0:	f362 631f 	bfigt	r3, r2, #24, #8
 80024f4:	f840 3b04 	str.w	r3, [r0], #4
 80024f8:	4589      	cmp	r9, r1
 80024fa:	4603      	mov	r3, r0
 80024fc:	d1d8      	bne.n	80024b0 <arm_maxpool_q7_HWC+0x20c>
 80024fe:	9b01      	ldr	r3, [sp, #4]
 8002500:	9a03      	ldr	r2, [sp, #12]
 8002502:	b162      	cbz	r2, 800251e <arm_maxpool_q7_HWC+0x27a>
 8002504:	1e4a      	subs	r2, r1, #1
 8002506:	4459      	add	r1, fp
 8002508:	f912 0f01 	ldrsb.w	r0, [r2, #1]!
 800250c:	f993 4000 	ldrsb.w	r4, [r3]
 8002510:	4284      	cmp	r4, r0
 8002512:	bfb8      	it	lt
 8002514:	7018      	strblt	r0, [r3, #0]
 8002516:	4291      	cmp	r1, r2
 8002518:	f103 0301 	add.w	r3, r3, #1
 800251c:	d1f4      	bne.n	8002508 <arm_maxpool_q7_HWC+0x264>
 800251e:	44b2      	add	sl, r6
 8002520:	4555      	cmp	r5, sl
 8002522:	44b1      	add	r9, r6
 8002524:	d8bf      	bhi.n	80024a6 <arm_maxpool_q7_HWC+0x202>
 8002526:	9b05      	ldr	r3, [sp, #20]
 8002528:	9909      	ldr	r1, [sp, #36]	; 0x24
 800252a:	3301      	adds	r3, #1
 800252c:	b21b      	sxth	r3, r3
 800252e:	428b      	cmp	r3, r1
 8002530:	9305      	str	r3, [sp, #20]
 8002532:	db8c      	blt.n	800244e <arm_maxpool_q7_HWC+0x1aa>
 8002534:	b011      	add	sp, #68	; 0x44
 8002536:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800253a:	465c      	mov	r4, fp
 800253c:	4633      	mov	r3, r6
 800253e:	e742      	b.n	80023c6 <arm_maxpool_q7_HWC+0x122>
 8002540:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002542:	e705      	b.n	8002350 <arm_maxpool_q7_HWC+0xac>
 8002544:	46b3      	mov	fp, r6
 8002546:	e6f5      	b.n	8002334 <arm_maxpool_q7_HWC+0x90>
 8002548:	463b      	mov	r3, r7
 800254a:	e7d9      	b.n	8002500 <arm_maxpool_q7_HWC+0x25c>
 800254c:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800254e:	e79d      	b.n	800248c <arm_maxpool_q7_HWC+0x1e8>
 8002550:	f8dd a010 	ldr.w	sl, [sp, #16]
 8002554:	e78f      	b.n	8002476 <arm_maxpool_q7_HWC+0x1d2>
 8002556:	2b00      	cmp	r3, #0
 8002558:	d0ec      	beq.n	8002534 <arm_maxpool_q7_HWC+0x290>
 800255a:	910d      	str	r1, [sp, #52]	; 0x34
 800255c:	e756      	b.n	800240c <arm_maxpool_q7_HWC+0x168>
 800255e:	bf00      	nop

08002560 <arm_avepool_q7_HWC>:
 8002560:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002564:	b093      	sub	sp, #76	; 0x4c
 8002566:	4690      	mov	r8, r2
 8002568:	930a      	str	r3, [sp, #40]	; 0x28
 800256a:	f8bd 3070 	ldrh.w	r3, [sp, #112]	; 0x70
 800256e:	9307      	str	r3, [sp, #28]
 8002570:	f8bd 3074 	ldrh.w	r3, [sp, #116]	; 0x74
 8002574:	930b      	str	r3, [sp, #44]	; 0x2c
 8002576:	f8bd 3078 	ldrh.w	r3, [sp, #120]	; 0x78
 800257a:	9004      	str	r0, [sp, #16]
 800257c:	9309      	str	r3, [sp, #36]	; 0x24
 800257e:	9e1f      	ldr	r6, [sp, #124]	; 0x7c
 8002580:	9106      	str	r1, [sp, #24]
 8002582:	4608      	mov	r0, r1
 8002584:	2900      	cmp	r1, #0
 8002586:	f000 8184 	beq.w	8002892 <arm_avepool_q7_HWC+0x332>
 800258a:	0892      	lsrs	r2, r2, #2
 800258c:	f008 0103 	and.w	r1, r8, #3
 8002590:	9200      	str	r2, [sp, #0]
 8002592:	910e      	str	r1, [sp, #56]	; 0x38
 8002594:	2b00      	cmp	r3, #0
 8002596:	f000 815d 	beq.w	8002854 <arm_avepool_q7_HWC+0x2f4>
 800259a:	1e53      	subs	r3, r2, #1
 800259c:	b29b      	uxth	r3, r3
 800259e:	1e4a      	subs	r2, r1, #1
 80025a0:	3301      	adds	r3, #1
 80025a2:	009c      	lsls	r4, r3, #2
 80025a4:	b292      	uxth	r2, r2
 80025a6:	eb06 03c3 	add.w	r3, r6, r3, lsl #3
 80025aa:	9302      	str	r3, [sp, #8]
 80025ac:	0053      	lsls	r3, r2, #1
 80025ae:	9301      	str	r3, [sp, #4]
 80025b0:	eb06 0348 	add.w	r3, r6, r8, lsl #1
 80025b4:	2100      	movs	r1, #0
 80025b6:	930d      	str	r3, [sp, #52]	; 0x34
 80025b8:	4fb8      	ldr	r7, [pc, #736]	; (800289c <arm_avepool_q7_HWC+0x33c>)
 80025ba:	940c      	str	r4, [sp, #48]	; 0x30
 80025bc:	fb08 f300 	mul.w	r3, r8, r0
 80025c0:	9111      	str	r1, [sp, #68]	; 0x44
 80025c2:	9310      	str	r3, [sp, #64]	; 0x40
 80025c4:	4644      	mov	r4, r8
 80025c6:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80025c8:	9804      	ldr	r0, [sp, #16]
 80025ca:	fb01 3203 	mla	r2, r1, r3, r3
 80025ce:	1882      	adds	r2, r0, r2
 80025d0:	920f      	str	r2, [sp, #60]	; 0x3c
 80025d2:	9a06      	ldr	r2, [sp, #24]
 80025d4:	2300      	movs	r3, #0
 80025d6:	fb01 f202 	mul.w	r2, r1, r2
 80025da:	9208      	str	r2, [sp, #32]
 80025dc:	9305      	str	r3, [sp, #20]
 80025de:	980b      	ldr	r0, [sp, #44]	; 0x2c
 80025e0:	9908      	ldr	r1, [sp, #32]
 80025e2:	9d04      	ldr	r5, [sp, #16]
 80025e4:	185a      	adds	r2, r3, r1
 80025e6:	fb00 f303 	mul.w	r3, r0, r3
 80025ea:	9807      	ldr	r0, [sp, #28]
 80025ec:	fb04 5202 	mla	r2, r4, r2, r5
 80025f0:	9203      	str	r2, [sp, #12]
 80025f2:	1a1a      	subs	r2, r3, r0
 80025f4:	f100 8140 	bmi.w	8002878 <arm_avepool_q7_HWC+0x318>
 80025f8:	eb03 0b01 	add.w	fp, r3, r1
 80025fc:	ebab 0b00 	sub.w	fp, fp, r0
 8002600:	fb04 5b0b 	mla	fp, r4, fp, r5
 8002604:	980a      	ldr	r0, [sp, #40]	; 0x28
 8002606:	9906      	ldr	r1, [sp, #24]
 8002608:	4402      	add	r2, r0
 800260a:	428a      	cmp	r2, r1
 800260c:	f280 8128 	bge.w	8002860 <arm_avepool_q7_HWC+0x300>
 8002610:	9a08      	ldr	r2, [sp, #32]
 8002612:	189d      	adds	r5, r3, r2
 8002614:	9b07      	ldr	r3, [sp, #28]
 8002616:	1aed      	subs	r5, r5, r3
 8002618:	9b04      	ldr	r3, [sp, #16]
 800261a:	4405      	add	r5, r0
 800261c:	fb04 3505 	mla	r5, r4, r5, r3
 8002620:	4658      	mov	r0, fp
 8002622:	4622      	mov	r2, r4
 8002624:	4631      	mov	r1, r6
 8002626:	44a3      	add	fp, r4
 8002628:	f7ff fdd6 	bl	80021d8 <arm_q7_to_q15_no_shift>
 800262c:	455d      	cmp	r5, fp
 800262e:	f240 8121 	bls.w	8002874 <arm_avepool_q7_HWC+0x314>
 8002632:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8002634:	46b0      	mov	r8, r6
 8002636:	9e0e      	ldr	r6, [sp, #56]	; 0x38
 8002638:	eb0b 0903 	add.w	r9, fp, r3
 800263c:	f04f 0a01 	mov.w	sl, #1
 8002640:	9b00      	ldr	r3, [sp, #0]
 8002642:	2b00      	cmp	r3, #0
 8002644:	f000 8109 	beq.w	800285a <arm_avepool_q7_HWC+0x2fa>
 8002648:	46c4      	mov	ip, r8
 800264a:	46de      	mov	lr, fp
 800264c:	f85e 3b04 	ldr.w	r3, [lr], #4
 8002650:	fa2f f183 	sxtb16	r1, r3
 8002654:	b28a      	uxth	r2, r1
 8002656:	f8dc 0000 	ldr.w	r0, [ip]
 800265a:	ea4f 2333 	mov.w	r3, r3, ror #8
 800265e:	f10c 0c08 	add.w	ip, ip, #8
 8002662:	fa2f f383 	sxtb16	r3, r3
 8002666:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800266a:	fa92 f210 	qadd16	r2, r2, r0
 800266e:	f84c 2c08 	str.w	r2, [ip, #-8]
 8002672:	f85c 2c04 	ldr.w	r2, [ip, #-4]
 8002676:	403b      	ands	r3, r7
 8002678:	45ce      	cmp	lr, r9
 800267a:	ea43 4311 	orr.w	r3, r3, r1, lsr #16
 800267e:	fa93 f312 	qadd16	r3, r3, r2
 8002682:	f84c 3c04 	str.w	r3, [ip, #-4]
 8002686:	d1e1      	bne.n	800264c <arm_avepool_q7_HWC+0xec>
 8002688:	f8dd e008 	ldr.w	lr, [sp, #8]
 800268c:	4648      	mov	r0, r9
 800268e:	b15e      	cbz	r6, 80026a8 <arm_avepool_q7_HWC+0x148>
 8002690:	9b01      	ldr	r3, [sp, #4]
 8002692:	f1ae 0102 	sub.w	r1, lr, #2
 8002696:	449e      	add	lr, r3
 8002698:	f910 3b01 	ldrsb.w	r3, [r0], #1
 800269c:	884a      	ldrh	r2, [r1, #2]
 800269e:	4413      	add	r3, r2
 80026a0:	f821 3f02 	strh.w	r3, [r1, #2]!
 80026a4:	458e      	cmp	lr, r1
 80026a6:	d1f7      	bne.n	8002698 <arm_avepool_q7_HWC+0x138>
 80026a8:	f10a 0a01 	add.w	sl, sl, #1
 80026ac:	44a3      	add	fp, r4
 80026ae:	fa1f f38a 	uxth.w	r3, sl
 80026b2:	455d      	cmp	r5, fp
 80026b4:	44a1      	add	r9, r4
 80026b6:	fa0f fa83 	sxth.w	sl, r3
 80026ba:	d8c1      	bhi.n	8002640 <arm_avepool_q7_HWC+0xe0>
 80026bc:	4646      	mov	r6, r8
 80026be:	b164      	cbz	r4, 80026da <arm_avepool_q7_HWC+0x17a>
 80026c0:	9a03      	ldr	r2, [sp, #12]
 80026c2:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
 80026c6:	1e50      	subs	r0, r2, #1
 80026c8:	4631      	mov	r1, r6
 80026ca:	f931 2b02 	ldrsh.w	r2, [r1], #2
 80026ce:	fb92 f2f3 	sdiv	r2, r2, r3
 80026d2:	4588      	cmp	r8, r1
 80026d4:	f800 2f01 	strb.w	r2, [r0, #1]!
 80026d8:	d1f7      	bne.n	80026ca <arm_avepool_q7_HWC+0x16a>
 80026da:	9b05      	ldr	r3, [sp, #20]
 80026dc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80026de:	3301      	adds	r3, #1
 80026e0:	b21b      	sxth	r3, r3
 80026e2:	428b      	cmp	r3, r1
 80026e4:	9305      	str	r3, [sp, #20]
 80026e6:	f6ff af7a 	blt.w	80025de <arm_avepool_q7_HWC+0x7e>
 80026ea:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80026ec:	9a06      	ldr	r2, [sp, #24]
 80026ee:	3301      	adds	r3, #1
 80026f0:	b21b      	sxth	r3, r3
 80026f2:	4293      	cmp	r3, r2
 80026f4:	9311      	str	r3, [sp, #68]	; 0x44
 80026f6:	4619      	mov	r1, r3
 80026f8:	f6ff af65 	blt.w	80025c6 <arm_avepool_q7_HWC+0x66>
 80026fc:	46a0      	mov	r8, r4
 80026fe:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 8002702:	4c66      	ldr	r4, [pc, #408]	; (800289c <arm_avepool_q7_HWC+0x33c>)
 8002704:	f8cd 8014 	str.w	r8, [sp, #20]
 8002708:	fb1e f308 	smulbb	r3, lr, r8
 800270c:	b29b      	uxth	r3, r3
 800270e:	089a      	lsrs	r2, r3, #2
 8002710:	9201      	str	r2, [sp, #4]
 8002712:	3a01      	subs	r2, #1
 8002714:	461d      	mov	r5, r3
 8002716:	9311      	str	r3, [sp, #68]	; 0x44
 8002718:	b292      	uxth	r2, r2
 800271a:	f003 0303 	and.w	r3, r3, #3
 800271e:	1e58      	subs	r0, r3, #1
 8002720:	3201      	adds	r2, #1
 8002722:	9302      	str	r3, [sp, #8]
 8002724:	9b06      	ldr	r3, [sp, #24]
 8002726:	0097      	lsls	r7, r2, #2
 8002728:	eb06 02c2 	add.w	r2, r6, r2, lsl #3
 800272c:	fb03 f103 	mul.w	r1, r3, r3
 8002730:	9200      	str	r2, [sp, #0]
 8002732:	eb06 0245 	add.w	r2, r6, r5, lsl #1
 8002736:	920e      	str	r2, [sp, #56]	; 0x38
 8002738:	460a      	mov	r2, r1
 800273a:	9904      	ldr	r1, [sp, #16]
 800273c:	970d      	str	r7, [sp, #52]	; 0x34
 800273e:	fb08 1202 	mla	r2, r8, r2, r1
 8002742:	b280      	uxth	r0, r0
 8002744:	2300      	movs	r3, #0
 8002746:	920c      	str	r2, [sp, #48]	; 0x30
 8002748:	9f10      	ldr	r7, [sp, #64]	; 0x40
 800274a:	9303      	str	r3, [sp, #12]
 800274c:	fb08 f20e 	mul.w	r2, r8, lr
 8002750:	920f      	str	r2, [sp, #60]	; 0x3c
 8002752:	ea4f 0b40 	mov.w	fp, r0, lsl #1
 8002756:	4672      	mov	r2, lr
 8002758:	9805      	ldr	r0, [sp, #20]
 800275a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800275c:	fb03 f202 	mul.w	r2, r3, r2
 8002760:	fb00 f202 	mul.w	r2, r0, r2
 8002764:	9208      	str	r2, [sp, #32]
 8002766:	9a07      	ldr	r2, [sp, #28]
 8002768:	fb01 f303 	mul.w	r3, r1, r3
 800276c:	1a9b      	subs	r3, r3, r2
 800276e:	f100 808b 	bmi.w	8002888 <arm_avepool_q7_HWC+0x328>
 8002772:	9a06      	ldr	r2, [sp, #24]
 8002774:	fb02 fa03 	mul.w	sl, r2, r3
 8002778:	9a04      	ldr	r2, [sp, #16]
 800277a:	fb00 2a0a 	mla	sl, r0, sl, r2
 800277e:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8002780:	9906      	ldr	r1, [sp, #24]
 8002782:	4413      	add	r3, r2
 8002784:	428b      	cmp	r3, r1
 8002786:	da7d      	bge.n	8002884 <arm_avepool_q7_HWC+0x324>
 8002788:	fb01 f303 	mul.w	r3, r1, r3
 800278c:	9a05      	ldr	r2, [sp, #20]
 800278e:	9904      	ldr	r1, [sp, #16]
 8002790:	fb02 1503 	mla	r5, r2, r3, r1
 8002794:	4650      	mov	r0, sl
 8002796:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 8002798:	4631      	mov	r1, r6
 800279a:	44ba      	add	sl, r7
 800279c:	f7ff fd1c 	bl	80021d8 <arm_q7_to_q15_no_shift>
 80027a0:	4555      	cmp	r5, sl
 80027a2:	d974      	bls.n	800288e <arm_avepool_q7_HWC+0x32e>
 80027a4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80027a6:	f04f 0901 	mov.w	r9, #1
 80027aa:	eb0a 0803 	add.w	r8, sl, r3
 80027ae:	9b01      	ldr	r3, [sp, #4]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d064      	beq.n	800287e <arm_avepool_q7_HWC+0x31e>
 80027b4:	46b4      	mov	ip, r6
 80027b6:	46d6      	mov	lr, sl
 80027b8:	f85e 3b04 	ldr.w	r3, [lr], #4
 80027bc:	fa2f f183 	sxtb16	r1, r3
 80027c0:	b28a      	uxth	r2, r1
 80027c2:	f8dc 0000 	ldr.w	r0, [ip]
 80027c6:	ea4f 2333 	mov.w	r3, r3, ror #8
 80027ca:	f10c 0c08 	add.w	ip, ip, #8
 80027ce:	fa2f f383 	sxtb16	r3, r3
 80027d2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80027d6:	fa92 f210 	qadd16	r2, r2, r0
 80027da:	f84c 2c08 	str.w	r2, [ip, #-8]
 80027de:	f85c 2c04 	ldr.w	r2, [ip, #-4]
 80027e2:	4023      	ands	r3, r4
 80027e4:	45c6      	cmp	lr, r8
 80027e6:	ea43 4311 	orr.w	r3, r3, r1, lsr #16
 80027ea:	fa93 f312 	qadd16	r3, r3, r2
 80027ee:	f84c 3c04 	str.w	r3, [ip, #-4]
 80027f2:	d1e1      	bne.n	80027b8 <arm_avepool_q7_HWC+0x258>
 80027f4:	f8dd e000 	ldr.w	lr, [sp]
 80027f8:	4640      	mov	r0, r8
 80027fa:	9b02      	ldr	r3, [sp, #8]
 80027fc:	b153      	cbz	r3, 8002814 <arm_avepool_q7_HWC+0x2b4>
 80027fe:	f1ae 0102 	sub.w	r1, lr, #2
 8002802:	44de      	add	lr, fp
 8002804:	f910 3b01 	ldrsb.w	r3, [r0], #1
 8002808:	884a      	ldrh	r2, [r1, #2]
 800280a:	4413      	add	r3, r2
 800280c:	f821 3f02 	strh.w	r3, [r1, #2]!
 8002810:	458e      	cmp	lr, r1
 8002812:	d1f7      	bne.n	8002804 <arm_avepool_q7_HWC+0x2a4>
 8002814:	f109 0301 	add.w	r3, r9, #1
 8002818:	44ba      	add	sl, r7
 800281a:	b29b      	uxth	r3, r3
 800281c:	4555      	cmp	r5, sl
 800281e:	44b8      	add	r8, r7
 8002820:	fa0f f983 	sxth.w	r9, r3
 8002824:	d8c3      	bhi.n	80027ae <arm_avepool_q7_HWC+0x24e>
 8002826:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8002828:	b16a      	cbz	r2, 8002846 <arm_avepool_q7_HWC+0x2e6>
 800282a:	9920      	ldr	r1, [sp, #128]	; 0x80
 800282c:	9a08      	ldr	r2, [sp, #32]
 800282e:	9d0e      	ldr	r5, [sp, #56]	; 0x38
 8002830:	440a      	add	r2, r1
 8002832:	4610      	mov	r0, r2
 8002834:	4631      	mov	r1, r6
 8002836:	f931 2b02 	ldrsh.w	r2, [r1], #2
 800283a:	fb92 f2f3 	sdiv	r2, r2, r3
 800283e:	42a9      	cmp	r1, r5
 8002840:	f800 2b01 	strb.w	r2, [r0], #1
 8002844:	d1f7      	bne.n	8002836 <arm_avepool_q7_HWC+0x2d6>
 8002846:	9b03      	ldr	r3, [sp, #12]
 8002848:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800284a:	3301      	adds	r3, #1
 800284c:	b21b      	sxth	r3, r3
 800284e:	429a      	cmp	r2, r3
 8002850:	9303      	str	r3, [sp, #12]
 8002852:	dc81      	bgt.n	8002758 <arm_avepool_q7_HWC+0x1f8>
 8002854:	b013      	add	sp, #76	; 0x4c
 8002856:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800285a:	46c6      	mov	lr, r8
 800285c:	4658      	mov	r0, fp
 800285e:	e716      	b.n	800268e <arm_avepool_q7_HWC+0x12e>
 8002860:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8002862:	4658      	mov	r0, fp
 8002864:	4622      	mov	r2, r4
 8002866:	4631      	mov	r1, r6
 8002868:	44a3      	add	fp, r4
 800286a:	f7ff fcb5 	bl	80021d8 <arm_q7_to_q15_no_shift>
 800286e:	455d      	cmp	r5, fp
 8002870:	f63f aedf 	bhi.w	8002632 <arm_avepool_q7_HWC+0xd2>
 8002874:	2301      	movs	r3, #1
 8002876:	e722      	b.n	80026be <arm_avepool_q7_HWC+0x15e>
 8002878:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800287c:	e6c2      	b.n	8002604 <arm_avepool_q7_HWC+0xa4>
 800287e:	46b6      	mov	lr, r6
 8002880:	4650      	mov	r0, sl
 8002882:	e7ba      	b.n	80027fa <arm_avepool_q7_HWC+0x29a>
 8002884:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8002886:	e785      	b.n	8002794 <arm_avepool_q7_HWC+0x234>
 8002888:	f8dd a010 	ldr.w	sl, [sp, #16]
 800288c:	e777      	b.n	800277e <arm_avepool_q7_HWC+0x21e>
 800288e:	2301      	movs	r3, #1
 8002890:	e7c9      	b.n	8002826 <arm_avepool_q7_HWC+0x2c6>
 8002892:	2b00      	cmp	r3, #0
 8002894:	d0de      	beq.n	8002854 <arm_avepool_q7_HWC+0x2f4>
 8002896:	9110      	str	r1, [sp, #64]	; 0x40
 8002898:	e731      	b.n	80026fe <arm_avepool_q7_HWC+0x19e>
 800289a:	bf00      	nop
 800289c:	ffff0000 	.word	0xffff0000

080028a0 <arm_softmax_q7>:
 80028a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80028a4:	b083      	sub	sp, #12
 80028a6:	2900      	cmp	r1, #0
 80028a8:	f000 80e5 	beq.w	8002a76 <arm_softmax_q7+0x1d6>
 80028ac:	f06f 047f 	mvn.w	r4, #127	; 0x7f
 80028b0:	2300      	movs	r3, #0
 80028b2:	56c5      	ldrsb	r5, [r0, r3]
 80028b4:	3301      	adds	r3, #1
 80028b6:	42ac      	cmp	r4, r5
 80028b8:	b21b      	sxth	r3, r3
 80028ba:	bfb8      	it	lt
 80028bc:	462c      	movlt	r4, r5
 80028be:	428b      	cmp	r3, r1
 80028c0:	dbf7      	blt.n	80028b2 <arm_softmax_q7+0x12>
 80028c2:	3c08      	subs	r4, #8
 80028c4:	b2a4      	uxth	r4, r4
 80028c6:	fa5f f884 	uxtb.w	r8, r4
 80028ca:	0425      	lsls	r5, r4, #16
 80028cc:	ea48 6804 	orr.w	r8, r8, r4, lsl #24
 80028d0:	f405 057f 	and.w	r5, r5, #16711680	; 0xff0000
 80028d4:	0223      	lsls	r3, r4, #8
 80028d6:	b29b      	uxth	r3, r3
 80028d8:	ea48 0805 	orr.w	r8, r8, r5
 80028dc:	ea48 0803 	orr.w	r8, r8, r3
 80028e0:	b223      	sxth	r3, r4
 80028e2:	9300      	str	r3, [sp, #0]
 80028e4:	088b      	lsrs	r3, r1, #2
 80028e6:	9301      	str	r3, [sp, #4]
 80028e8:	f000 80cb 	beq.w	8002a82 <arm_softmax_q7+0x1e2>
 80028ec:	f103 3bff 	add.w	fp, r3, #4294967295
 80028f0:	fa1f f98b 	uxth.w	r9, fp
 80028f4:	f109 0901 	add.w	r9, r9, #1
 80028f8:	f8df a19c 	ldr.w	sl, [pc, #412]	; 8002a98 <arm_softmax_q7+0x1f8>
 80028fc:	eb00 0989 	add.w	r9, r0, r9, lsl #2
 8002900:	4684      	mov	ip, r0
 8002902:	2500      	movs	r5, #0
 8002904:	f04f 0e01 	mov.w	lr, #1
 8002908:	f85c 4b04 	ldr.w	r4, [ip], #4
 800290c:	fac4 f408 	ssub8	r4, r4, r8
 8002910:	fa2f f384 	sxtb16	r3, r4
 8002914:	b29e      	uxth	r6, r3
 8002916:	ea4f 2434 	mov.w	r4, r4, ror #8
 800291a:	fa2f f484 	sxtb16	r4, r4
 800291e:	ea46 4604 	orr.w	r6, r6, r4, lsl #16
 8002922:	f3a6 0603 	usat16	r6, #3, r6
 8002926:	b2f7      	uxtb	r7, r6
 8002928:	fa0e f707 	lsl.w	r7, lr, r7
 800292c:	f3c6 4607 	ubfx	r6, r6, #16, #8
 8002930:	ea04 040a 	and.w	r4, r4, sl
 8002934:	443d      	add	r5, r7
 8002936:	fa0e f606 	lsl.w	r6, lr, r6
 800293a:	ea44 4313 	orr.w	r3, r4, r3, lsr #16
 800293e:	442e      	add	r6, r5
 8002940:	f3a3 0303 	usat16	r3, #3, r3
 8002944:	b2dd      	uxtb	r5, r3
 8002946:	fa0e f505 	lsl.w	r5, lr, r5
 800294a:	f3c3 4307 	ubfx	r3, r3, #16, #8
 800294e:	4435      	add	r5, r6
 8002950:	fa0e f303 	lsl.w	r3, lr, r3
 8002954:	45e1      	cmp	r9, ip
 8002956:	441d      	add	r5, r3
 8002958:	d1d6      	bne.n	8002908 <arm_softmax_q7+0x68>
 800295a:	f011 0103 	ands.w	r1, r1, #3
 800295e:	f000 8095 	beq.w	8002a8c <arm_softmax_q7+0x1ec>
 8002962:	f99c 3000 	ldrsb.w	r3, [ip]
 8002966:	9f00      	ldr	r7, [sp, #0]
 8002968:	1bdb      	subs	r3, r3, r7
 800296a:	f383 0303 	usat	r3, #3, r3
 800296e:	2601      	movs	r6, #1
 8002970:	b2db      	uxtb	r3, r3
 8002972:	fa06 f303 	lsl.w	r3, r6, r3
 8002976:	441d      	add	r5, r3
 8002978:	f111 33ff 	adds.w	r3, r1, #4294967295
 800297c:	d012      	beq.n	80029a4 <arm_softmax_q7+0x104>
 800297e:	f99c 4001 	ldrsb.w	r4, [ip, #1]
 8002982:	1be4      	subs	r4, r4, r7
 8002984:	f384 0403 	usat	r4, #3, r4
 8002988:	b2e4      	uxtb	r4, r4
 800298a:	fa06 f404 	lsl.w	r4, r6, r4
 800298e:	2902      	cmp	r1, #2
 8002990:	4425      	add	r5, r4
 8002992:	d007      	beq.n	80029a4 <arm_softmax_q7+0x104>
 8002994:	f99c 4002 	ldrsb.w	r4, [ip, #2]
 8002998:	1be4      	subs	r4, r4, r7
 800299a:	f384 0403 	usat	r4, #3, r4
 800299e:	b2e4      	uxtb	r4, r4
 80029a0:	40a6      	lsls	r6, r4
 80029a2:	4435      	add	r5, r6
 80029a4:	f44f 1480 	mov.w	r4, #1048576	; 0x100000
 80029a8:	fb94 f5f5 	sdiv	r5, r4, r5
 80029ac:	9c01      	ldr	r4, [sp, #4]
 80029ae:	2c00      	cmp	r4, #0
 80029b0:	d04b      	beq.n	8002a4a <arm_softmax_q7+0x1aa>
 80029b2:	f104 3bff 	add.w	fp, r4, #4294967295
 80029b6:	fa1f fb8b 	uxth.w	fp, fp
 80029ba:	f10b 0b01 	add.w	fp, fp, #1
 80029be:	ea4f 0b8b 	mov.w	fp, fp, lsl #2
 80029c2:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8002a98 <arm_softmax_q7+0x1f8>
 80029c6:	eb00 090b 	add.w	r9, r0, fp
 80029ca:	1d17      	adds	r7, r2, #4
 80029cc:	f04f 3c0d 	mov.w	ip, #218959117	; 0xd0d0d0d
 80029d0:	f850 4b04 	ldr.w	r4, [r0], #4
 80029d4:	facc f404 	ssub8	r4, ip, r4
 80029d8:	fa84 f408 	sadd8	r4, r4, r8
 80029dc:	fa2f fe84 	sxtb16	lr, r4
 80029e0:	fa1f f68e 	uxth.w	r6, lr
 80029e4:	ea4f 2434 	mov.w	r4, r4, ror #8
 80029e8:	fa2f f484 	sxtb16	r4, r4
 80029ec:	ea46 4604 	orr.w	r6, r6, r4, lsl #16
 80029f0:	f3a6 0605 	usat16	r6, #5, r6
 80029f4:	b2f3      	uxtb	r3, r6
 80029f6:	fa45 f303 	asr.w	r3, r5, r3
 80029fa:	f303 0307 	ssat	r3, #8, r3
 80029fe:	f3c6 4607 	ubfx	r6, r6, #16, #8
 8002a02:	fa45 f606 	asr.w	r6, r5, r6
 8002a06:	f807 3c04 	strb.w	r3, [r7, #-4]
 8002a0a:	f306 0607 	ssat	r6, #8, r6
 8002a0e:	ea04 030a 	and.w	r3, r4, sl
 8002a12:	ea43 431e 	orr.w	r3, r3, lr, lsr #16
 8002a16:	f807 6c03 	strb.w	r6, [r7, #-3]
 8002a1a:	f3a3 0305 	usat16	r3, #5, r3
 8002a1e:	b2dc      	uxtb	r4, r3
 8002a20:	fa45 f404 	asr.w	r4, r5, r4
 8002a24:	f304 0407 	ssat	r4, #8, r4
 8002a28:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8002a2c:	fa45 f303 	asr.w	r3, r5, r3
 8002a30:	f807 4c02 	strb.w	r4, [r7, #-2]
 8002a34:	f303 0307 	ssat	r3, #8, r3
 8002a38:	4548      	cmp	r0, r9
 8002a3a:	f807 3c01 	strb.w	r3, [r7, #-1]
 8002a3e:	f107 0704 	add.w	r7, r7, #4
 8002a42:	d1c5      	bne.n	80029d0 <arm_softmax_q7+0x130>
 8002a44:	445a      	add	r2, fp
 8002a46:	b199      	cbz	r1, 8002a70 <arm_softmax_q7+0x1d0>
 8002a48:	1e4b      	subs	r3, r1, #1
 8002a4a:	9c00      	ldr	r4, [sp, #0]
 8002a4c:	fa10 f183 	uxtah	r1, r0, r3
 8002a50:	340d      	adds	r4, #13
 8002a52:	3801      	subs	r0, #1
 8002a54:	f910 3f01 	ldrsb.w	r3, [r0, #1]!
 8002a58:	1ae3      	subs	r3, r4, r3
 8002a5a:	f383 0305 	usat	r3, #5, r3
 8002a5e:	b2db      	uxtb	r3, r3
 8002a60:	fa45 f303 	asr.w	r3, r5, r3
 8002a64:	f303 0307 	ssat	r3, #8, r3
 8002a68:	4281      	cmp	r1, r0
 8002a6a:	f802 3b01 	strb.w	r3, [r2], #1
 8002a6e:	d1f1      	bne.n	8002a54 <arm_softmax_q7+0x1b4>
 8002a70:	b003      	add	sp, #12
 8002a72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002a76:	f06f 0387 	mvn.w	r3, #135	; 0x87
 8002a7a:	f04f 3878 	mov.w	r8, #2021161080	; 0x78787878
 8002a7e:	9300      	str	r3, [sp, #0]
 8002a80:	e730      	b.n	80028e4 <arm_softmax_q7+0x44>
 8002a82:	2900      	cmp	r1, #0
 8002a84:	d0f4      	beq.n	8002a70 <arm_softmax_q7+0x1d0>
 8002a86:	461d      	mov	r5, r3
 8002a88:	4684      	mov	ip, r0
 8002a8a:	e76a      	b.n	8002962 <arm_softmax_q7+0xc2>
 8002a8c:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002a90:	fb93 f5f5 	sdiv	r5, r3, r5
 8002a94:	e78f      	b.n	80029b6 <arm_softmax_q7+0x116>
 8002a96:	bf00      	nop
 8002a98:	ffff0000 	.word	0xffff0000

08002a9c <strlen>:
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8002aa2:	2a00      	cmp	r2, #0
 8002aa4:	d1fb      	bne.n	8002a9e <strlen+0x2>
 8002aa6:	1a18      	subs	r0, r3, r0
 8002aa8:	3801      	subs	r0, #1
 8002aaa:	4770      	bx	lr
 8002aac:	0000      	movs	r0, r0
	...

08002ab0 <memchr>:
 8002ab0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8002ab4:	2a10      	cmp	r2, #16
 8002ab6:	db2b      	blt.n	8002b10 <memchr+0x60>
 8002ab8:	f010 0f07 	tst.w	r0, #7
 8002abc:	d008      	beq.n	8002ad0 <memchr+0x20>
 8002abe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8002ac2:	3a01      	subs	r2, #1
 8002ac4:	428b      	cmp	r3, r1
 8002ac6:	d02d      	beq.n	8002b24 <memchr+0x74>
 8002ac8:	f010 0f07 	tst.w	r0, #7
 8002acc:	b342      	cbz	r2, 8002b20 <memchr+0x70>
 8002ace:	d1f6      	bne.n	8002abe <memchr+0xe>
 8002ad0:	b4f0      	push	{r4, r5, r6, r7}
 8002ad2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8002ad6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 8002ada:	f022 0407 	bic.w	r4, r2, #7
 8002ade:	f07f 0700 	mvns.w	r7, #0
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8002ae8:	3c08      	subs	r4, #8
 8002aea:	ea85 0501 	eor.w	r5, r5, r1
 8002aee:	ea86 0601 	eor.w	r6, r6, r1
 8002af2:	fa85 f547 	uadd8	r5, r5, r7
 8002af6:	faa3 f587 	sel	r5, r3, r7
 8002afa:	fa86 f647 	uadd8	r6, r6, r7
 8002afe:	faa5 f687 	sel	r6, r5, r7
 8002b02:	b98e      	cbnz	r6, 8002b28 <memchr+0x78>
 8002b04:	d1ee      	bne.n	8002ae4 <memchr+0x34>
 8002b06:	bcf0      	pop	{r4, r5, r6, r7}
 8002b08:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8002b0c:	f002 0207 	and.w	r2, r2, #7
 8002b10:	b132      	cbz	r2, 8002b20 <memchr+0x70>
 8002b12:	f810 3b01 	ldrb.w	r3, [r0], #1
 8002b16:	3a01      	subs	r2, #1
 8002b18:	ea83 0301 	eor.w	r3, r3, r1
 8002b1c:	b113      	cbz	r3, 8002b24 <memchr+0x74>
 8002b1e:	d1f8      	bne.n	8002b12 <memchr+0x62>
 8002b20:	2000      	movs	r0, #0
 8002b22:	4770      	bx	lr
 8002b24:	3801      	subs	r0, #1
 8002b26:	4770      	bx	lr
 8002b28:	2d00      	cmp	r5, #0
 8002b2a:	bf06      	itte	eq
 8002b2c:	4635      	moveq	r5, r6
 8002b2e:	3803      	subeq	r0, #3
 8002b30:	3807      	subne	r0, #7
 8002b32:	f015 0f01 	tst.w	r5, #1
 8002b36:	d107      	bne.n	8002b48 <memchr+0x98>
 8002b38:	3001      	adds	r0, #1
 8002b3a:	f415 7f80 	tst.w	r5, #256	; 0x100
 8002b3e:	bf02      	ittt	eq
 8002b40:	3001      	addeq	r0, #1
 8002b42:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8002b46:	3001      	addeq	r0, #1
 8002b48:	bcf0      	pop	{r4, r5, r6, r7}
 8002b4a:	3801      	subs	r0, #1
 8002b4c:	4770      	bx	lr
 8002b4e:	bf00      	nop

08002b50 <__aeabi_drsub>:
 8002b50:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8002b54:	e002      	b.n	8002b5c <__adddf3>
 8002b56:	bf00      	nop

08002b58 <__aeabi_dsub>:
 8002b58:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08002b5c <__adddf3>:
 8002b5c:	b530      	push	{r4, r5, lr}
 8002b5e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8002b62:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8002b66:	ea94 0f05 	teq	r4, r5
 8002b6a:	bf08      	it	eq
 8002b6c:	ea90 0f02 	teqeq	r0, r2
 8002b70:	bf1f      	itttt	ne
 8002b72:	ea54 0c00 	orrsne.w	ip, r4, r0
 8002b76:	ea55 0c02 	orrsne.w	ip, r5, r2
 8002b7a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8002b7e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8002b82:	f000 80e2 	beq.w	8002d4a <__adddf3+0x1ee>
 8002b86:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8002b8a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8002b8e:	bfb8      	it	lt
 8002b90:	426d      	neglt	r5, r5
 8002b92:	dd0c      	ble.n	8002bae <__adddf3+0x52>
 8002b94:	442c      	add	r4, r5
 8002b96:	ea80 0202 	eor.w	r2, r0, r2
 8002b9a:	ea81 0303 	eor.w	r3, r1, r3
 8002b9e:	ea82 0000 	eor.w	r0, r2, r0
 8002ba2:	ea83 0101 	eor.w	r1, r3, r1
 8002ba6:	ea80 0202 	eor.w	r2, r0, r2
 8002baa:	ea81 0303 	eor.w	r3, r1, r3
 8002bae:	2d36      	cmp	r5, #54	; 0x36
 8002bb0:	bf88      	it	hi
 8002bb2:	bd30      	pophi	{r4, r5, pc}
 8002bb4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8002bb8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8002bbc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8002bc0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8002bc4:	d002      	beq.n	8002bcc <__adddf3+0x70>
 8002bc6:	4240      	negs	r0, r0
 8002bc8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8002bcc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8002bd0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8002bd4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8002bd8:	d002      	beq.n	8002be0 <__adddf3+0x84>
 8002bda:	4252      	negs	r2, r2
 8002bdc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8002be0:	ea94 0f05 	teq	r4, r5
 8002be4:	f000 80a7 	beq.w	8002d36 <__adddf3+0x1da>
 8002be8:	f1a4 0401 	sub.w	r4, r4, #1
 8002bec:	f1d5 0e20 	rsbs	lr, r5, #32
 8002bf0:	db0d      	blt.n	8002c0e <__adddf3+0xb2>
 8002bf2:	fa02 fc0e 	lsl.w	ip, r2, lr
 8002bf6:	fa22 f205 	lsr.w	r2, r2, r5
 8002bfa:	1880      	adds	r0, r0, r2
 8002bfc:	f141 0100 	adc.w	r1, r1, #0
 8002c00:	fa03 f20e 	lsl.w	r2, r3, lr
 8002c04:	1880      	adds	r0, r0, r2
 8002c06:	fa43 f305 	asr.w	r3, r3, r5
 8002c0a:	4159      	adcs	r1, r3
 8002c0c:	e00e      	b.n	8002c2c <__adddf3+0xd0>
 8002c0e:	f1a5 0520 	sub.w	r5, r5, #32
 8002c12:	f10e 0e20 	add.w	lr, lr, #32
 8002c16:	2a01      	cmp	r2, #1
 8002c18:	fa03 fc0e 	lsl.w	ip, r3, lr
 8002c1c:	bf28      	it	cs
 8002c1e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8002c22:	fa43 f305 	asr.w	r3, r3, r5
 8002c26:	18c0      	adds	r0, r0, r3
 8002c28:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8002c2c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8002c30:	d507      	bpl.n	8002c42 <__adddf3+0xe6>
 8002c32:	f04f 0e00 	mov.w	lr, #0
 8002c36:	f1dc 0c00 	rsbs	ip, ip, #0
 8002c3a:	eb7e 0000 	sbcs.w	r0, lr, r0
 8002c3e:	eb6e 0101 	sbc.w	r1, lr, r1
 8002c42:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8002c46:	d31b      	bcc.n	8002c80 <__adddf3+0x124>
 8002c48:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8002c4c:	d30c      	bcc.n	8002c68 <__adddf3+0x10c>
 8002c4e:	0849      	lsrs	r1, r1, #1
 8002c50:	ea5f 0030 	movs.w	r0, r0, rrx
 8002c54:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8002c58:	f104 0401 	add.w	r4, r4, #1
 8002c5c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8002c60:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8002c64:	f080 809a 	bcs.w	8002d9c <__adddf3+0x240>
 8002c68:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8002c6c:	bf08      	it	eq
 8002c6e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8002c72:	f150 0000 	adcs.w	r0, r0, #0
 8002c76:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8002c7a:	ea41 0105 	orr.w	r1, r1, r5
 8002c7e:	bd30      	pop	{r4, r5, pc}
 8002c80:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8002c84:	4140      	adcs	r0, r0
 8002c86:	eb41 0101 	adc.w	r1, r1, r1
 8002c8a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8002c8e:	f1a4 0401 	sub.w	r4, r4, #1
 8002c92:	d1e9      	bne.n	8002c68 <__adddf3+0x10c>
 8002c94:	f091 0f00 	teq	r1, #0
 8002c98:	bf04      	itt	eq
 8002c9a:	4601      	moveq	r1, r0
 8002c9c:	2000      	moveq	r0, #0
 8002c9e:	fab1 f381 	clz	r3, r1
 8002ca2:	bf08      	it	eq
 8002ca4:	3320      	addeq	r3, #32
 8002ca6:	f1a3 030b 	sub.w	r3, r3, #11
 8002caa:	f1b3 0220 	subs.w	r2, r3, #32
 8002cae:	da0c      	bge.n	8002cca <__adddf3+0x16e>
 8002cb0:	320c      	adds	r2, #12
 8002cb2:	dd08      	ble.n	8002cc6 <__adddf3+0x16a>
 8002cb4:	f102 0c14 	add.w	ip, r2, #20
 8002cb8:	f1c2 020c 	rsb	r2, r2, #12
 8002cbc:	fa01 f00c 	lsl.w	r0, r1, ip
 8002cc0:	fa21 f102 	lsr.w	r1, r1, r2
 8002cc4:	e00c      	b.n	8002ce0 <__adddf3+0x184>
 8002cc6:	f102 0214 	add.w	r2, r2, #20
 8002cca:	bfd8      	it	le
 8002ccc:	f1c2 0c20 	rsble	ip, r2, #32
 8002cd0:	fa01 f102 	lsl.w	r1, r1, r2
 8002cd4:	fa20 fc0c 	lsr.w	ip, r0, ip
 8002cd8:	bfdc      	itt	le
 8002cda:	ea41 010c 	orrle.w	r1, r1, ip
 8002cde:	4090      	lslle	r0, r2
 8002ce0:	1ae4      	subs	r4, r4, r3
 8002ce2:	bfa2      	ittt	ge
 8002ce4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8002ce8:	4329      	orrge	r1, r5
 8002cea:	bd30      	popge	{r4, r5, pc}
 8002cec:	ea6f 0404 	mvn.w	r4, r4
 8002cf0:	3c1f      	subs	r4, #31
 8002cf2:	da1c      	bge.n	8002d2e <__adddf3+0x1d2>
 8002cf4:	340c      	adds	r4, #12
 8002cf6:	dc0e      	bgt.n	8002d16 <__adddf3+0x1ba>
 8002cf8:	f104 0414 	add.w	r4, r4, #20
 8002cfc:	f1c4 0220 	rsb	r2, r4, #32
 8002d00:	fa20 f004 	lsr.w	r0, r0, r4
 8002d04:	fa01 f302 	lsl.w	r3, r1, r2
 8002d08:	ea40 0003 	orr.w	r0, r0, r3
 8002d0c:	fa21 f304 	lsr.w	r3, r1, r4
 8002d10:	ea45 0103 	orr.w	r1, r5, r3
 8002d14:	bd30      	pop	{r4, r5, pc}
 8002d16:	f1c4 040c 	rsb	r4, r4, #12
 8002d1a:	f1c4 0220 	rsb	r2, r4, #32
 8002d1e:	fa20 f002 	lsr.w	r0, r0, r2
 8002d22:	fa01 f304 	lsl.w	r3, r1, r4
 8002d26:	ea40 0003 	orr.w	r0, r0, r3
 8002d2a:	4629      	mov	r1, r5
 8002d2c:	bd30      	pop	{r4, r5, pc}
 8002d2e:	fa21 f004 	lsr.w	r0, r1, r4
 8002d32:	4629      	mov	r1, r5
 8002d34:	bd30      	pop	{r4, r5, pc}
 8002d36:	f094 0f00 	teq	r4, #0
 8002d3a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8002d3e:	bf06      	itte	eq
 8002d40:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8002d44:	3401      	addeq	r4, #1
 8002d46:	3d01      	subne	r5, #1
 8002d48:	e74e      	b.n	8002be8 <__adddf3+0x8c>
 8002d4a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8002d4e:	bf18      	it	ne
 8002d50:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8002d54:	d029      	beq.n	8002daa <__adddf3+0x24e>
 8002d56:	ea94 0f05 	teq	r4, r5
 8002d5a:	bf08      	it	eq
 8002d5c:	ea90 0f02 	teqeq	r0, r2
 8002d60:	d005      	beq.n	8002d6e <__adddf3+0x212>
 8002d62:	ea54 0c00 	orrs.w	ip, r4, r0
 8002d66:	bf04      	itt	eq
 8002d68:	4619      	moveq	r1, r3
 8002d6a:	4610      	moveq	r0, r2
 8002d6c:	bd30      	pop	{r4, r5, pc}
 8002d6e:	ea91 0f03 	teq	r1, r3
 8002d72:	bf1e      	ittt	ne
 8002d74:	2100      	movne	r1, #0
 8002d76:	2000      	movne	r0, #0
 8002d78:	bd30      	popne	{r4, r5, pc}
 8002d7a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8002d7e:	d105      	bne.n	8002d8c <__adddf3+0x230>
 8002d80:	0040      	lsls	r0, r0, #1
 8002d82:	4149      	adcs	r1, r1
 8002d84:	bf28      	it	cs
 8002d86:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8002d8a:	bd30      	pop	{r4, r5, pc}
 8002d8c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8002d90:	bf3c      	itt	cc
 8002d92:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8002d96:	bd30      	popcc	{r4, r5, pc}
 8002d98:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8002d9c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8002da0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8002da4:	f04f 0000 	mov.w	r0, #0
 8002da8:	bd30      	pop	{r4, r5, pc}
 8002daa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8002dae:	bf1a      	itte	ne
 8002db0:	4619      	movne	r1, r3
 8002db2:	4610      	movne	r0, r2
 8002db4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8002db8:	bf1c      	itt	ne
 8002dba:	460b      	movne	r3, r1
 8002dbc:	4602      	movne	r2, r0
 8002dbe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8002dc2:	bf06      	itte	eq
 8002dc4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8002dc8:	ea91 0f03 	teqeq	r1, r3
 8002dcc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8002dd0:	bd30      	pop	{r4, r5, pc}
 8002dd2:	bf00      	nop

08002dd4 <__aeabi_ui2d>:
 8002dd4:	f090 0f00 	teq	r0, #0
 8002dd8:	bf04      	itt	eq
 8002dda:	2100      	moveq	r1, #0
 8002ddc:	4770      	bxeq	lr
 8002dde:	b530      	push	{r4, r5, lr}
 8002de0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8002de4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8002de8:	f04f 0500 	mov.w	r5, #0
 8002dec:	f04f 0100 	mov.w	r1, #0
 8002df0:	e750      	b.n	8002c94 <__adddf3+0x138>
 8002df2:	bf00      	nop

08002df4 <__aeabi_i2d>:
 8002df4:	f090 0f00 	teq	r0, #0
 8002df8:	bf04      	itt	eq
 8002dfa:	2100      	moveq	r1, #0
 8002dfc:	4770      	bxeq	lr
 8002dfe:	b530      	push	{r4, r5, lr}
 8002e00:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8002e04:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8002e08:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8002e0c:	bf48      	it	mi
 8002e0e:	4240      	negmi	r0, r0
 8002e10:	f04f 0100 	mov.w	r1, #0
 8002e14:	e73e      	b.n	8002c94 <__adddf3+0x138>
 8002e16:	bf00      	nop

08002e18 <__aeabi_f2d>:
 8002e18:	0042      	lsls	r2, r0, #1
 8002e1a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8002e1e:	ea4f 0131 	mov.w	r1, r1, rrx
 8002e22:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8002e26:	bf1f      	itttt	ne
 8002e28:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8002e2c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8002e30:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8002e34:	4770      	bxne	lr
 8002e36:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8002e3a:	bf08      	it	eq
 8002e3c:	4770      	bxeq	lr
 8002e3e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8002e42:	bf04      	itt	eq
 8002e44:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8002e48:	4770      	bxeq	lr
 8002e4a:	b530      	push	{r4, r5, lr}
 8002e4c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8002e50:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8002e54:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8002e58:	e71c      	b.n	8002c94 <__adddf3+0x138>
 8002e5a:	bf00      	nop

08002e5c <__aeabi_ul2d>:
 8002e5c:	ea50 0201 	orrs.w	r2, r0, r1
 8002e60:	bf08      	it	eq
 8002e62:	4770      	bxeq	lr
 8002e64:	b530      	push	{r4, r5, lr}
 8002e66:	f04f 0500 	mov.w	r5, #0
 8002e6a:	e00a      	b.n	8002e82 <__aeabi_l2d+0x16>

08002e6c <__aeabi_l2d>:
 8002e6c:	ea50 0201 	orrs.w	r2, r0, r1
 8002e70:	bf08      	it	eq
 8002e72:	4770      	bxeq	lr
 8002e74:	b530      	push	{r4, r5, lr}
 8002e76:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8002e7a:	d502      	bpl.n	8002e82 <__aeabi_l2d+0x16>
 8002e7c:	4240      	negs	r0, r0
 8002e7e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8002e82:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8002e86:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8002e8a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8002e8e:	f43f aed8 	beq.w	8002c42 <__adddf3+0xe6>
 8002e92:	f04f 0203 	mov.w	r2, #3
 8002e96:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8002e9a:	bf18      	it	ne
 8002e9c:	3203      	addne	r2, #3
 8002e9e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8002ea2:	bf18      	it	ne
 8002ea4:	3203      	addne	r2, #3
 8002ea6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8002eaa:	f1c2 0320 	rsb	r3, r2, #32
 8002eae:	fa00 fc03 	lsl.w	ip, r0, r3
 8002eb2:	fa20 f002 	lsr.w	r0, r0, r2
 8002eb6:	fa01 fe03 	lsl.w	lr, r1, r3
 8002eba:	ea40 000e 	orr.w	r0, r0, lr
 8002ebe:	fa21 f102 	lsr.w	r1, r1, r2
 8002ec2:	4414      	add	r4, r2
 8002ec4:	e6bd      	b.n	8002c42 <__adddf3+0xe6>
 8002ec6:	bf00      	nop

08002ec8 <__aeabi_dmul>:
 8002ec8:	b570      	push	{r4, r5, r6, lr}
 8002eca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8002ece:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8002ed2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8002ed6:	bf1d      	ittte	ne
 8002ed8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8002edc:	ea94 0f0c 	teqne	r4, ip
 8002ee0:	ea95 0f0c 	teqne	r5, ip
 8002ee4:	f000 f8de 	bleq	80030a4 <__aeabi_dmul+0x1dc>
 8002ee8:	442c      	add	r4, r5
 8002eea:	ea81 0603 	eor.w	r6, r1, r3
 8002eee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8002ef2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8002ef6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8002efa:	bf18      	it	ne
 8002efc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8002f00:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8002f04:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002f08:	d038      	beq.n	8002f7c <__aeabi_dmul+0xb4>
 8002f0a:	fba0 ce02 	umull	ip, lr, r0, r2
 8002f0e:	f04f 0500 	mov.w	r5, #0
 8002f12:	fbe1 e502 	umlal	lr, r5, r1, r2
 8002f16:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8002f1a:	fbe0 e503 	umlal	lr, r5, r0, r3
 8002f1e:	f04f 0600 	mov.w	r6, #0
 8002f22:	fbe1 5603 	umlal	r5, r6, r1, r3
 8002f26:	f09c 0f00 	teq	ip, #0
 8002f2a:	bf18      	it	ne
 8002f2c:	f04e 0e01 	orrne.w	lr, lr, #1
 8002f30:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8002f34:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8002f38:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8002f3c:	d204      	bcs.n	8002f48 <__aeabi_dmul+0x80>
 8002f3e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8002f42:	416d      	adcs	r5, r5
 8002f44:	eb46 0606 	adc.w	r6, r6, r6
 8002f48:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8002f4c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8002f50:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8002f54:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8002f58:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8002f5c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8002f60:	bf88      	it	hi
 8002f62:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8002f66:	d81e      	bhi.n	8002fa6 <__aeabi_dmul+0xde>
 8002f68:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8002f6c:	bf08      	it	eq
 8002f6e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8002f72:	f150 0000 	adcs.w	r0, r0, #0
 8002f76:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8002f7a:	bd70      	pop	{r4, r5, r6, pc}
 8002f7c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8002f80:	ea46 0101 	orr.w	r1, r6, r1
 8002f84:	ea40 0002 	orr.w	r0, r0, r2
 8002f88:	ea81 0103 	eor.w	r1, r1, r3
 8002f8c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8002f90:	bfc2      	ittt	gt
 8002f92:	ebd4 050c 	rsbsgt	r5, r4, ip
 8002f96:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8002f9a:	bd70      	popgt	{r4, r5, r6, pc}
 8002f9c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8002fa0:	f04f 0e00 	mov.w	lr, #0
 8002fa4:	3c01      	subs	r4, #1
 8002fa6:	f300 80ab 	bgt.w	8003100 <__aeabi_dmul+0x238>
 8002faa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8002fae:	bfde      	ittt	le
 8002fb0:	2000      	movle	r0, #0
 8002fb2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8002fb6:	bd70      	pople	{r4, r5, r6, pc}
 8002fb8:	f1c4 0400 	rsb	r4, r4, #0
 8002fbc:	3c20      	subs	r4, #32
 8002fbe:	da35      	bge.n	800302c <__aeabi_dmul+0x164>
 8002fc0:	340c      	adds	r4, #12
 8002fc2:	dc1b      	bgt.n	8002ffc <__aeabi_dmul+0x134>
 8002fc4:	f104 0414 	add.w	r4, r4, #20
 8002fc8:	f1c4 0520 	rsb	r5, r4, #32
 8002fcc:	fa00 f305 	lsl.w	r3, r0, r5
 8002fd0:	fa20 f004 	lsr.w	r0, r0, r4
 8002fd4:	fa01 f205 	lsl.w	r2, r1, r5
 8002fd8:	ea40 0002 	orr.w	r0, r0, r2
 8002fdc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8002fe0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8002fe4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8002fe8:	fa21 f604 	lsr.w	r6, r1, r4
 8002fec:	eb42 0106 	adc.w	r1, r2, r6
 8002ff0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8002ff4:	bf08      	it	eq
 8002ff6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8002ffa:	bd70      	pop	{r4, r5, r6, pc}
 8002ffc:	f1c4 040c 	rsb	r4, r4, #12
 8003000:	f1c4 0520 	rsb	r5, r4, #32
 8003004:	fa00 f304 	lsl.w	r3, r0, r4
 8003008:	fa20 f005 	lsr.w	r0, r0, r5
 800300c:	fa01 f204 	lsl.w	r2, r1, r4
 8003010:	ea40 0002 	orr.w	r0, r0, r2
 8003014:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8003018:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800301c:	f141 0100 	adc.w	r1, r1, #0
 8003020:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8003024:	bf08      	it	eq
 8003026:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800302a:	bd70      	pop	{r4, r5, r6, pc}
 800302c:	f1c4 0520 	rsb	r5, r4, #32
 8003030:	fa00 f205 	lsl.w	r2, r0, r5
 8003034:	ea4e 0e02 	orr.w	lr, lr, r2
 8003038:	fa20 f304 	lsr.w	r3, r0, r4
 800303c:	fa01 f205 	lsl.w	r2, r1, r5
 8003040:	ea43 0302 	orr.w	r3, r3, r2
 8003044:	fa21 f004 	lsr.w	r0, r1, r4
 8003048:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800304c:	fa21 f204 	lsr.w	r2, r1, r4
 8003050:	ea20 0002 	bic.w	r0, r0, r2
 8003054:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8003058:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800305c:	bf08      	it	eq
 800305e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8003062:	bd70      	pop	{r4, r5, r6, pc}
 8003064:	f094 0f00 	teq	r4, #0
 8003068:	d10f      	bne.n	800308a <__aeabi_dmul+0x1c2>
 800306a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800306e:	0040      	lsls	r0, r0, #1
 8003070:	eb41 0101 	adc.w	r1, r1, r1
 8003074:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8003078:	bf08      	it	eq
 800307a:	3c01      	subeq	r4, #1
 800307c:	d0f7      	beq.n	800306e <__aeabi_dmul+0x1a6>
 800307e:	ea41 0106 	orr.w	r1, r1, r6
 8003082:	f095 0f00 	teq	r5, #0
 8003086:	bf18      	it	ne
 8003088:	4770      	bxne	lr
 800308a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800308e:	0052      	lsls	r2, r2, #1
 8003090:	eb43 0303 	adc.w	r3, r3, r3
 8003094:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8003098:	bf08      	it	eq
 800309a:	3d01      	subeq	r5, #1
 800309c:	d0f7      	beq.n	800308e <__aeabi_dmul+0x1c6>
 800309e:	ea43 0306 	orr.w	r3, r3, r6
 80030a2:	4770      	bx	lr
 80030a4:	ea94 0f0c 	teq	r4, ip
 80030a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80030ac:	bf18      	it	ne
 80030ae:	ea95 0f0c 	teqne	r5, ip
 80030b2:	d00c      	beq.n	80030ce <__aeabi_dmul+0x206>
 80030b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80030b8:	bf18      	it	ne
 80030ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80030be:	d1d1      	bne.n	8003064 <__aeabi_dmul+0x19c>
 80030c0:	ea81 0103 	eor.w	r1, r1, r3
 80030c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80030c8:	f04f 0000 	mov.w	r0, #0
 80030cc:	bd70      	pop	{r4, r5, r6, pc}
 80030ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80030d2:	bf06      	itte	eq
 80030d4:	4610      	moveq	r0, r2
 80030d6:	4619      	moveq	r1, r3
 80030d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80030dc:	d019      	beq.n	8003112 <__aeabi_dmul+0x24a>
 80030de:	ea94 0f0c 	teq	r4, ip
 80030e2:	d102      	bne.n	80030ea <__aeabi_dmul+0x222>
 80030e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80030e8:	d113      	bne.n	8003112 <__aeabi_dmul+0x24a>
 80030ea:	ea95 0f0c 	teq	r5, ip
 80030ee:	d105      	bne.n	80030fc <__aeabi_dmul+0x234>
 80030f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80030f4:	bf1c      	itt	ne
 80030f6:	4610      	movne	r0, r2
 80030f8:	4619      	movne	r1, r3
 80030fa:	d10a      	bne.n	8003112 <__aeabi_dmul+0x24a>
 80030fc:	ea81 0103 	eor.w	r1, r1, r3
 8003100:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8003104:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8003108:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800310c:	f04f 0000 	mov.w	r0, #0
 8003110:	bd70      	pop	{r4, r5, r6, pc}
 8003112:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8003116:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800311a:	bd70      	pop	{r4, r5, r6, pc}

0800311c <__aeabi_ddiv>:
 800311c:	b570      	push	{r4, r5, r6, lr}
 800311e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8003122:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8003126:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800312a:	bf1d      	ittte	ne
 800312c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8003130:	ea94 0f0c 	teqne	r4, ip
 8003134:	ea95 0f0c 	teqne	r5, ip
 8003138:	f000 f8a7 	bleq	800328a <__aeabi_ddiv+0x16e>
 800313c:	eba4 0405 	sub.w	r4, r4, r5
 8003140:	ea81 0e03 	eor.w	lr, r1, r3
 8003144:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8003148:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800314c:	f000 8088 	beq.w	8003260 <__aeabi_ddiv+0x144>
 8003150:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8003154:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8003158:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800315c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8003160:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8003164:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8003168:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800316c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8003170:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8003174:	429d      	cmp	r5, r3
 8003176:	bf08      	it	eq
 8003178:	4296      	cmpeq	r6, r2
 800317a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800317e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8003182:	d202      	bcs.n	800318a <__aeabi_ddiv+0x6e>
 8003184:	085b      	lsrs	r3, r3, #1
 8003186:	ea4f 0232 	mov.w	r2, r2, rrx
 800318a:	1ab6      	subs	r6, r6, r2
 800318c:	eb65 0503 	sbc.w	r5, r5, r3
 8003190:	085b      	lsrs	r3, r3, #1
 8003192:	ea4f 0232 	mov.w	r2, r2, rrx
 8003196:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800319a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800319e:	ebb6 0e02 	subs.w	lr, r6, r2
 80031a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80031a6:	bf22      	ittt	cs
 80031a8:	1ab6      	subcs	r6, r6, r2
 80031aa:	4675      	movcs	r5, lr
 80031ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80031b0:	085b      	lsrs	r3, r3, #1
 80031b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80031b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80031ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80031be:	bf22      	ittt	cs
 80031c0:	1ab6      	subcs	r6, r6, r2
 80031c2:	4675      	movcs	r5, lr
 80031c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80031c8:	085b      	lsrs	r3, r3, #1
 80031ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80031ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80031d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80031d6:	bf22      	ittt	cs
 80031d8:	1ab6      	subcs	r6, r6, r2
 80031da:	4675      	movcs	r5, lr
 80031dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80031e0:	085b      	lsrs	r3, r3, #1
 80031e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80031e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80031ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80031ee:	bf22      	ittt	cs
 80031f0:	1ab6      	subcs	r6, r6, r2
 80031f2:	4675      	movcs	r5, lr
 80031f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80031f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80031fc:	d018      	beq.n	8003230 <__aeabi_ddiv+0x114>
 80031fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8003202:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8003206:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800320a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800320e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8003212:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8003216:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800321a:	d1c0      	bne.n	800319e <__aeabi_ddiv+0x82>
 800321c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8003220:	d10b      	bne.n	800323a <__aeabi_ddiv+0x11e>
 8003222:	ea41 0100 	orr.w	r1, r1, r0
 8003226:	f04f 0000 	mov.w	r0, #0
 800322a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800322e:	e7b6      	b.n	800319e <__aeabi_ddiv+0x82>
 8003230:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8003234:	bf04      	itt	eq
 8003236:	4301      	orreq	r1, r0
 8003238:	2000      	moveq	r0, #0
 800323a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800323e:	bf88      	it	hi
 8003240:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8003244:	f63f aeaf 	bhi.w	8002fa6 <__aeabi_dmul+0xde>
 8003248:	ebb5 0c03 	subs.w	ip, r5, r3
 800324c:	bf04      	itt	eq
 800324e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8003252:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8003256:	f150 0000 	adcs.w	r0, r0, #0
 800325a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800325e:	bd70      	pop	{r4, r5, r6, pc}
 8003260:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8003264:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8003268:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800326c:	bfc2      	ittt	gt
 800326e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8003272:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8003276:	bd70      	popgt	{r4, r5, r6, pc}
 8003278:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800327c:	f04f 0e00 	mov.w	lr, #0
 8003280:	3c01      	subs	r4, #1
 8003282:	e690      	b.n	8002fa6 <__aeabi_dmul+0xde>
 8003284:	ea45 0e06 	orr.w	lr, r5, r6
 8003288:	e68d      	b.n	8002fa6 <__aeabi_dmul+0xde>
 800328a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800328e:	ea94 0f0c 	teq	r4, ip
 8003292:	bf08      	it	eq
 8003294:	ea95 0f0c 	teqeq	r5, ip
 8003298:	f43f af3b 	beq.w	8003112 <__aeabi_dmul+0x24a>
 800329c:	ea94 0f0c 	teq	r4, ip
 80032a0:	d10a      	bne.n	80032b8 <__aeabi_ddiv+0x19c>
 80032a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80032a6:	f47f af34 	bne.w	8003112 <__aeabi_dmul+0x24a>
 80032aa:	ea95 0f0c 	teq	r5, ip
 80032ae:	f47f af25 	bne.w	80030fc <__aeabi_dmul+0x234>
 80032b2:	4610      	mov	r0, r2
 80032b4:	4619      	mov	r1, r3
 80032b6:	e72c      	b.n	8003112 <__aeabi_dmul+0x24a>
 80032b8:	ea95 0f0c 	teq	r5, ip
 80032bc:	d106      	bne.n	80032cc <__aeabi_ddiv+0x1b0>
 80032be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80032c2:	f43f aefd 	beq.w	80030c0 <__aeabi_dmul+0x1f8>
 80032c6:	4610      	mov	r0, r2
 80032c8:	4619      	mov	r1, r3
 80032ca:	e722      	b.n	8003112 <__aeabi_dmul+0x24a>
 80032cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80032d0:	bf18      	it	ne
 80032d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80032d6:	f47f aec5 	bne.w	8003064 <__aeabi_dmul+0x19c>
 80032da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80032de:	f47f af0d 	bne.w	80030fc <__aeabi_dmul+0x234>
 80032e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80032e6:	f47f aeeb 	bne.w	80030c0 <__aeabi_dmul+0x1f8>
 80032ea:	e712      	b.n	8003112 <__aeabi_dmul+0x24a>

080032ec <__gedf2>:
 80032ec:	f04f 3cff 	mov.w	ip, #4294967295
 80032f0:	e006      	b.n	8003300 <__cmpdf2+0x4>
 80032f2:	bf00      	nop

080032f4 <__ledf2>:
 80032f4:	f04f 0c01 	mov.w	ip, #1
 80032f8:	e002      	b.n	8003300 <__cmpdf2+0x4>
 80032fa:	bf00      	nop

080032fc <__cmpdf2>:
 80032fc:	f04f 0c01 	mov.w	ip, #1
 8003300:	f84d cd04 	str.w	ip, [sp, #-4]!
 8003304:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8003308:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800330c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8003310:	bf18      	it	ne
 8003312:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8003316:	d01b      	beq.n	8003350 <__cmpdf2+0x54>
 8003318:	b001      	add	sp, #4
 800331a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800331e:	bf0c      	ite	eq
 8003320:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8003324:	ea91 0f03 	teqne	r1, r3
 8003328:	bf02      	ittt	eq
 800332a:	ea90 0f02 	teqeq	r0, r2
 800332e:	2000      	moveq	r0, #0
 8003330:	4770      	bxeq	lr
 8003332:	f110 0f00 	cmn.w	r0, #0
 8003336:	ea91 0f03 	teq	r1, r3
 800333a:	bf58      	it	pl
 800333c:	4299      	cmppl	r1, r3
 800333e:	bf08      	it	eq
 8003340:	4290      	cmpeq	r0, r2
 8003342:	bf2c      	ite	cs
 8003344:	17d8      	asrcs	r0, r3, #31
 8003346:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800334a:	f040 0001 	orr.w	r0, r0, #1
 800334e:	4770      	bx	lr
 8003350:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8003354:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8003358:	d102      	bne.n	8003360 <__cmpdf2+0x64>
 800335a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800335e:	d107      	bne.n	8003370 <__cmpdf2+0x74>
 8003360:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8003364:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8003368:	d1d6      	bne.n	8003318 <__cmpdf2+0x1c>
 800336a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800336e:	d0d3      	beq.n	8003318 <__cmpdf2+0x1c>
 8003370:	f85d 0b04 	ldr.w	r0, [sp], #4
 8003374:	4770      	bx	lr
 8003376:	bf00      	nop

08003378 <__aeabi_cdrcmple>:
 8003378:	4684      	mov	ip, r0
 800337a:	4610      	mov	r0, r2
 800337c:	4662      	mov	r2, ip
 800337e:	468c      	mov	ip, r1
 8003380:	4619      	mov	r1, r3
 8003382:	4663      	mov	r3, ip
 8003384:	e000      	b.n	8003388 <__aeabi_cdcmpeq>
 8003386:	bf00      	nop

08003388 <__aeabi_cdcmpeq>:
 8003388:	b501      	push	{r0, lr}
 800338a:	f7ff ffb7 	bl	80032fc <__cmpdf2>
 800338e:	2800      	cmp	r0, #0
 8003390:	bf48      	it	mi
 8003392:	f110 0f00 	cmnmi.w	r0, #0
 8003396:	bd01      	pop	{r0, pc}

08003398 <__aeabi_dcmpeq>:
 8003398:	f84d ed08 	str.w	lr, [sp, #-8]!
 800339c:	f7ff fff4 	bl	8003388 <__aeabi_cdcmpeq>
 80033a0:	bf0c      	ite	eq
 80033a2:	2001      	moveq	r0, #1
 80033a4:	2000      	movne	r0, #0
 80033a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80033aa:	bf00      	nop

080033ac <__aeabi_dcmplt>:
 80033ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80033b0:	f7ff ffea 	bl	8003388 <__aeabi_cdcmpeq>
 80033b4:	bf34      	ite	cc
 80033b6:	2001      	movcc	r0, #1
 80033b8:	2000      	movcs	r0, #0
 80033ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80033be:	bf00      	nop

080033c0 <__aeabi_dcmple>:
 80033c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80033c4:	f7ff ffe0 	bl	8003388 <__aeabi_cdcmpeq>
 80033c8:	bf94      	ite	ls
 80033ca:	2001      	movls	r0, #1
 80033cc:	2000      	movhi	r0, #0
 80033ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80033d2:	bf00      	nop

080033d4 <__aeabi_dcmpge>:
 80033d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80033d8:	f7ff ffce 	bl	8003378 <__aeabi_cdrcmple>
 80033dc:	bf94      	ite	ls
 80033de:	2001      	movls	r0, #1
 80033e0:	2000      	movhi	r0, #0
 80033e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80033e6:	bf00      	nop

080033e8 <__aeabi_dcmpgt>:
 80033e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80033ec:	f7ff ffc4 	bl	8003378 <__aeabi_cdrcmple>
 80033f0:	bf34      	ite	cc
 80033f2:	2001      	movcc	r0, #1
 80033f4:	2000      	movcs	r0, #0
 80033f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80033fa:	bf00      	nop

080033fc <__aeabi_dcmpun>:
 80033fc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8003400:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8003404:	d102      	bne.n	800340c <__aeabi_dcmpun+0x10>
 8003406:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800340a:	d10a      	bne.n	8003422 <__aeabi_dcmpun+0x26>
 800340c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8003410:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8003414:	d102      	bne.n	800341c <__aeabi_dcmpun+0x20>
 8003416:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800341a:	d102      	bne.n	8003422 <__aeabi_dcmpun+0x26>
 800341c:	f04f 0000 	mov.w	r0, #0
 8003420:	4770      	bx	lr
 8003422:	f04f 0001 	mov.w	r0, #1
 8003426:	4770      	bx	lr

08003428 <__aeabi_d2iz>:
 8003428:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800342c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8003430:	d215      	bcs.n	800345e <__aeabi_d2iz+0x36>
 8003432:	d511      	bpl.n	8003458 <__aeabi_d2iz+0x30>
 8003434:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8003438:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 800343c:	d912      	bls.n	8003464 <__aeabi_d2iz+0x3c>
 800343e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8003442:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8003446:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800344a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800344e:	fa23 f002 	lsr.w	r0, r3, r2
 8003452:	bf18      	it	ne
 8003454:	4240      	negne	r0, r0
 8003456:	4770      	bx	lr
 8003458:	f04f 0000 	mov.w	r0, #0
 800345c:	4770      	bx	lr
 800345e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8003462:	d105      	bne.n	8003470 <__aeabi_d2iz+0x48>
 8003464:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8003468:	bf08      	it	eq
 800346a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 800346e:	4770      	bx	lr
 8003470:	f04f 0000 	mov.w	r0, #0
 8003474:	4770      	bx	lr
 8003476:	bf00      	nop

08003478 <__aeabi_uldivmod>:
 8003478:	b953      	cbnz	r3, 8003490 <__aeabi_uldivmod+0x18>
 800347a:	b94a      	cbnz	r2, 8003490 <__aeabi_uldivmod+0x18>
 800347c:	2900      	cmp	r1, #0
 800347e:	bf08      	it	eq
 8003480:	2800      	cmpeq	r0, #0
 8003482:	bf1c      	itt	ne
 8003484:	f04f 31ff 	movne.w	r1, #4294967295
 8003488:	f04f 30ff 	movne.w	r0, #4294967295
 800348c:	f000 b972 	b.w	8003774 <__aeabi_idiv0>
 8003490:	f1ad 0c08 	sub.w	ip, sp, #8
 8003494:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8003498:	f000 f806 	bl	80034a8 <__udivmoddi4>
 800349c:	f8dd e004 	ldr.w	lr, [sp, #4]
 80034a0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80034a4:	b004      	add	sp, #16
 80034a6:	4770      	bx	lr

080034a8 <__udivmoddi4>:
 80034a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80034ac:	9e08      	ldr	r6, [sp, #32]
 80034ae:	4604      	mov	r4, r0
 80034b0:	4688      	mov	r8, r1
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d14b      	bne.n	800354e <__udivmoddi4+0xa6>
 80034b6:	428a      	cmp	r2, r1
 80034b8:	4615      	mov	r5, r2
 80034ba:	d967      	bls.n	800358c <__udivmoddi4+0xe4>
 80034bc:	fab2 f282 	clz	r2, r2
 80034c0:	b14a      	cbz	r2, 80034d6 <__udivmoddi4+0x2e>
 80034c2:	f1c2 0720 	rsb	r7, r2, #32
 80034c6:	fa01 f302 	lsl.w	r3, r1, r2
 80034ca:	fa20 f707 	lsr.w	r7, r0, r7
 80034ce:	4095      	lsls	r5, r2
 80034d0:	ea47 0803 	orr.w	r8, r7, r3
 80034d4:	4094      	lsls	r4, r2
 80034d6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80034da:	0c23      	lsrs	r3, r4, #16
 80034dc:	fbb8 f7fe 	udiv	r7, r8, lr
 80034e0:	fa1f fc85 	uxth.w	ip, r5
 80034e4:	fb0e 8817 	mls	r8, lr, r7, r8
 80034e8:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80034ec:	fb07 f10c 	mul.w	r1, r7, ip
 80034f0:	4299      	cmp	r1, r3
 80034f2:	d909      	bls.n	8003508 <__udivmoddi4+0x60>
 80034f4:	18eb      	adds	r3, r5, r3
 80034f6:	f107 30ff 	add.w	r0, r7, #4294967295
 80034fa:	f080 811b 	bcs.w	8003734 <__udivmoddi4+0x28c>
 80034fe:	4299      	cmp	r1, r3
 8003500:	f240 8118 	bls.w	8003734 <__udivmoddi4+0x28c>
 8003504:	3f02      	subs	r7, #2
 8003506:	442b      	add	r3, r5
 8003508:	1a5b      	subs	r3, r3, r1
 800350a:	b2a4      	uxth	r4, r4
 800350c:	fbb3 f0fe 	udiv	r0, r3, lr
 8003510:	fb0e 3310 	mls	r3, lr, r0, r3
 8003514:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8003518:	fb00 fc0c 	mul.w	ip, r0, ip
 800351c:	45a4      	cmp	ip, r4
 800351e:	d909      	bls.n	8003534 <__udivmoddi4+0x8c>
 8003520:	192c      	adds	r4, r5, r4
 8003522:	f100 33ff 	add.w	r3, r0, #4294967295
 8003526:	f080 8107 	bcs.w	8003738 <__udivmoddi4+0x290>
 800352a:	45a4      	cmp	ip, r4
 800352c:	f240 8104 	bls.w	8003738 <__udivmoddi4+0x290>
 8003530:	3802      	subs	r0, #2
 8003532:	442c      	add	r4, r5
 8003534:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8003538:	eba4 040c 	sub.w	r4, r4, ip
 800353c:	2700      	movs	r7, #0
 800353e:	b11e      	cbz	r6, 8003548 <__udivmoddi4+0xa0>
 8003540:	40d4      	lsrs	r4, r2
 8003542:	2300      	movs	r3, #0
 8003544:	e9c6 4300 	strd	r4, r3, [r6]
 8003548:	4639      	mov	r1, r7
 800354a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800354e:	428b      	cmp	r3, r1
 8003550:	d909      	bls.n	8003566 <__udivmoddi4+0xbe>
 8003552:	2e00      	cmp	r6, #0
 8003554:	f000 80eb 	beq.w	800372e <__udivmoddi4+0x286>
 8003558:	2700      	movs	r7, #0
 800355a:	e9c6 0100 	strd	r0, r1, [r6]
 800355e:	4638      	mov	r0, r7
 8003560:	4639      	mov	r1, r7
 8003562:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003566:	fab3 f783 	clz	r7, r3
 800356a:	2f00      	cmp	r7, #0
 800356c:	d147      	bne.n	80035fe <__udivmoddi4+0x156>
 800356e:	428b      	cmp	r3, r1
 8003570:	d302      	bcc.n	8003578 <__udivmoddi4+0xd0>
 8003572:	4282      	cmp	r2, r0
 8003574:	f200 80fa 	bhi.w	800376c <__udivmoddi4+0x2c4>
 8003578:	1a84      	subs	r4, r0, r2
 800357a:	eb61 0303 	sbc.w	r3, r1, r3
 800357e:	2001      	movs	r0, #1
 8003580:	4698      	mov	r8, r3
 8003582:	2e00      	cmp	r6, #0
 8003584:	d0e0      	beq.n	8003548 <__udivmoddi4+0xa0>
 8003586:	e9c6 4800 	strd	r4, r8, [r6]
 800358a:	e7dd      	b.n	8003548 <__udivmoddi4+0xa0>
 800358c:	b902      	cbnz	r2, 8003590 <__udivmoddi4+0xe8>
 800358e:	deff      	udf	#255	; 0xff
 8003590:	fab2 f282 	clz	r2, r2
 8003594:	2a00      	cmp	r2, #0
 8003596:	f040 808f 	bne.w	80036b8 <__udivmoddi4+0x210>
 800359a:	1b49      	subs	r1, r1, r5
 800359c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80035a0:	fa1f f885 	uxth.w	r8, r5
 80035a4:	2701      	movs	r7, #1
 80035a6:	fbb1 fcfe 	udiv	ip, r1, lr
 80035aa:	0c23      	lsrs	r3, r4, #16
 80035ac:	fb0e 111c 	mls	r1, lr, ip, r1
 80035b0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80035b4:	fb08 f10c 	mul.w	r1, r8, ip
 80035b8:	4299      	cmp	r1, r3
 80035ba:	d907      	bls.n	80035cc <__udivmoddi4+0x124>
 80035bc:	18eb      	adds	r3, r5, r3
 80035be:	f10c 30ff 	add.w	r0, ip, #4294967295
 80035c2:	d202      	bcs.n	80035ca <__udivmoddi4+0x122>
 80035c4:	4299      	cmp	r1, r3
 80035c6:	f200 80cd 	bhi.w	8003764 <__udivmoddi4+0x2bc>
 80035ca:	4684      	mov	ip, r0
 80035cc:	1a59      	subs	r1, r3, r1
 80035ce:	b2a3      	uxth	r3, r4
 80035d0:	fbb1 f0fe 	udiv	r0, r1, lr
 80035d4:	fb0e 1410 	mls	r4, lr, r0, r1
 80035d8:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 80035dc:	fb08 f800 	mul.w	r8, r8, r0
 80035e0:	45a0      	cmp	r8, r4
 80035e2:	d907      	bls.n	80035f4 <__udivmoddi4+0x14c>
 80035e4:	192c      	adds	r4, r5, r4
 80035e6:	f100 33ff 	add.w	r3, r0, #4294967295
 80035ea:	d202      	bcs.n	80035f2 <__udivmoddi4+0x14a>
 80035ec:	45a0      	cmp	r8, r4
 80035ee:	f200 80b6 	bhi.w	800375e <__udivmoddi4+0x2b6>
 80035f2:	4618      	mov	r0, r3
 80035f4:	eba4 0408 	sub.w	r4, r4, r8
 80035f8:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80035fc:	e79f      	b.n	800353e <__udivmoddi4+0x96>
 80035fe:	f1c7 0c20 	rsb	ip, r7, #32
 8003602:	40bb      	lsls	r3, r7
 8003604:	fa22 fe0c 	lsr.w	lr, r2, ip
 8003608:	ea4e 0e03 	orr.w	lr, lr, r3
 800360c:	fa01 f407 	lsl.w	r4, r1, r7
 8003610:	fa20 f50c 	lsr.w	r5, r0, ip
 8003614:	fa21 f30c 	lsr.w	r3, r1, ip
 8003618:	ea4f 481e 	mov.w	r8, lr, lsr #16
 800361c:	4325      	orrs	r5, r4
 800361e:	fbb3 f9f8 	udiv	r9, r3, r8
 8003622:	0c2c      	lsrs	r4, r5, #16
 8003624:	fb08 3319 	mls	r3, r8, r9, r3
 8003628:	fa1f fa8e 	uxth.w	sl, lr
 800362c:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8003630:	fb09 f40a 	mul.w	r4, r9, sl
 8003634:	429c      	cmp	r4, r3
 8003636:	fa02 f207 	lsl.w	r2, r2, r7
 800363a:	fa00 f107 	lsl.w	r1, r0, r7
 800363e:	d90b      	bls.n	8003658 <__udivmoddi4+0x1b0>
 8003640:	eb1e 0303 	adds.w	r3, lr, r3
 8003644:	f109 30ff 	add.w	r0, r9, #4294967295
 8003648:	f080 8087 	bcs.w	800375a <__udivmoddi4+0x2b2>
 800364c:	429c      	cmp	r4, r3
 800364e:	f240 8084 	bls.w	800375a <__udivmoddi4+0x2b2>
 8003652:	f1a9 0902 	sub.w	r9, r9, #2
 8003656:	4473      	add	r3, lr
 8003658:	1b1b      	subs	r3, r3, r4
 800365a:	b2ad      	uxth	r5, r5
 800365c:	fbb3 f0f8 	udiv	r0, r3, r8
 8003660:	fb08 3310 	mls	r3, r8, r0, r3
 8003664:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8003668:	fb00 fa0a 	mul.w	sl, r0, sl
 800366c:	45a2      	cmp	sl, r4
 800366e:	d908      	bls.n	8003682 <__udivmoddi4+0x1da>
 8003670:	eb1e 0404 	adds.w	r4, lr, r4
 8003674:	f100 33ff 	add.w	r3, r0, #4294967295
 8003678:	d26b      	bcs.n	8003752 <__udivmoddi4+0x2aa>
 800367a:	45a2      	cmp	sl, r4
 800367c:	d969      	bls.n	8003752 <__udivmoddi4+0x2aa>
 800367e:	3802      	subs	r0, #2
 8003680:	4474      	add	r4, lr
 8003682:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8003686:	fba0 8902 	umull	r8, r9, r0, r2
 800368a:	eba4 040a 	sub.w	r4, r4, sl
 800368e:	454c      	cmp	r4, r9
 8003690:	46c2      	mov	sl, r8
 8003692:	464b      	mov	r3, r9
 8003694:	d354      	bcc.n	8003740 <__udivmoddi4+0x298>
 8003696:	d051      	beq.n	800373c <__udivmoddi4+0x294>
 8003698:	2e00      	cmp	r6, #0
 800369a:	d069      	beq.n	8003770 <__udivmoddi4+0x2c8>
 800369c:	ebb1 050a 	subs.w	r5, r1, sl
 80036a0:	eb64 0403 	sbc.w	r4, r4, r3
 80036a4:	fa04 fc0c 	lsl.w	ip, r4, ip
 80036a8:	40fd      	lsrs	r5, r7
 80036aa:	40fc      	lsrs	r4, r7
 80036ac:	ea4c 0505 	orr.w	r5, ip, r5
 80036b0:	e9c6 5400 	strd	r5, r4, [r6]
 80036b4:	2700      	movs	r7, #0
 80036b6:	e747      	b.n	8003548 <__udivmoddi4+0xa0>
 80036b8:	f1c2 0320 	rsb	r3, r2, #32
 80036bc:	fa20 f703 	lsr.w	r7, r0, r3
 80036c0:	4095      	lsls	r5, r2
 80036c2:	fa01 f002 	lsl.w	r0, r1, r2
 80036c6:	fa21 f303 	lsr.w	r3, r1, r3
 80036ca:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80036ce:	4338      	orrs	r0, r7
 80036d0:	0c01      	lsrs	r1, r0, #16
 80036d2:	fbb3 f7fe 	udiv	r7, r3, lr
 80036d6:	fa1f f885 	uxth.w	r8, r5
 80036da:	fb0e 3317 	mls	r3, lr, r7, r3
 80036de:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80036e2:	fb07 f308 	mul.w	r3, r7, r8
 80036e6:	428b      	cmp	r3, r1
 80036e8:	fa04 f402 	lsl.w	r4, r4, r2
 80036ec:	d907      	bls.n	80036fe <__udivmoddi4+0x256>
 80036ee:	1869      	adds	r1, r5, r1
 80036f0:	f107 3cff 	add.w	ip, r7, #4294967295
 80036f4:	d22f      	bcs.n	8003756 <__udivmoddi4+0x2ae>
 80036f6:	428b      	cmp	r3, r1
 80036f8:	d92d      	bls.n	8003756 <__udivmoddi4+0x2ae>
 80036fa:	3f02      	subs	r7, #2
 80036fc:	4429      	add	r1, r5
 80036fe:	1acb      	subs	r3, r1, r3
 8003700:	b281      	uxth	r1, r0
 8003702:	fbb3 f0fe 	udiv	r0, r3, lr
 8003706:	fb0e 3310 	mls	r3, lr, r0, r3
 800370a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800370e:	fb00 f308 	mul.w	r3, r0, r8
 8003712:	428b      	cmp	r3, r1
 8003714:	d907      	bls.n	8003726 <__udivmoddi4+0x27e>
 8003716:	1869      	adds	r1, r5, r1
 8003718:	f100 3cff 	add.w	ip, r0, #4294967295
 800371c:	d217      	bcs.n	800374e <__udivmoddi4+0x2a6>
 800371e:	428b      	cmp	r3, r1
 8003720:	d915      	bls.n	800374e <__udivmoddi4+0x2a6>
 8003722:	3802      	subs	r0, #2
 8003724:	4429      	add	r1, r5
 8003726:	1ac9      	subs	r1, r1, r3
 8003728:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 800372c:	e73b      	b.n	80035a6 <__udivmoddi4+0xfe>
 800372e:	4637      	mov	r7, r6
 8003730:	4630      	mov	r0, r6
 8003732:	e709      	b.n	8003548 <__udivmoddi4+0xa0>
 8003734:	4607      	mov	r7, r0
 8003736:	e6e7      	b.n	8003508 <__udivmoddi4+0x60>
 8003738:	4618      	mov	r0, r3
 800373a:	e6fb      	b.n	8003534 <__udivmoddi4+0x8c>
 800373c:	4541      	cmp	r1, r8
 800373e:	d2ab      	bcs.n	8003698 <__udivmoddi4+0x1f0>
 8003740:	ebb8 0a02 	subs.w	sl, r8, r2
 8003744:	eb69 020e 	sbc.w	r2, r9, lr
 8003748:	3801      	subs	r0, #1
 800374a:	4613      	mov	r3, r2
 800374c:	e7a4      	b.n	8003698 <__udivmoddi4+0x1f0>
 800374e:	4660      	mov	r0, ip
 8003750:	e7e9      	b.n	8003726 <__udivmoddi4+0x27e>
 8003752:	4618      	mov	r0, r3
 8003754:	e795      	b.n	8003682 <__udivmoddi4+0x1da>
 8003756:	4667      	mov	r7, ip
 8003758:	e7d1      	b.n	80036fe <__udivmoddi4+0x256>
 800375a:	4681      	mov	r9, r0
 800375c:	e77c      	b.n	8003658 <__udivmoddi4+0x1b0>
 800375e:	3802      	subs	r0, #2
 8003760:	442c      	add	r4, r5
 8003762:	e747      	b.n	80035f4 <__udivmoddi4+0x14c>
 8003764:	f1ac 0c02 	sub.w	ip, ip, #2
 8003768:	442b      	add	r3, r5
 800376a:	e72f      	b.n	80035cc <__udivmoddi4+0x124>
 800376c:	4638      	mov	r0, r7
 800376e:	e708      	b.n	8003582 <__udivmoddi4+0xda>
 8003770:	4637      	mov	r7, r6
 8003772:	e6e9      	b.n	8003548 <__udivmoddi4+0xa0>

08003774 <__aeabi_idiv0>:
 8003774:	4770      	bx	lr
 8003776:	bf00      	nop

08003778 <ResetTimer>:
#include "CycleCounter.h"

void ResetTimer(){
 8003778:	b410      	push	{r4}
	DWT_CYCCNT   = (unsigned int *)0xE0001004; //address of the register
	DWT_CONTROL  = (unsigned int *)0xE0001000; //address of the register
 800377a:	4b08      	ldr	r3, [pc, #32]	; (800379c <ResetTimer+0x24>)
	SCB_DEMCR    = (unsigned int *)0xE000EDFC; //address of the register
	*SCB_DEMCR   = *SCB_DEMCR | 0x01000000;
 800377c:	4c08      	ldr	r4, [pc, #32]	; (80037a0 <ResetTimer+0x28>)
	DWT_CONTROL  = (unsigned int *)0xE0001000; //address of the register
 800377e:	4a09      	ldr	r2, [pc, #36]	; (80037a4 <ResetTimer+0x2c>)
 8003780:	601a      	str	r2, [r3, #0]
	DWT_CYCCNT   = (unsigned int *)0xE0001004; //address of the register
 8003782:	4909      	ldr	r1, [pc, #36]	; (80037a8 <ResetTimer+0x30>)
	*SCB_DEMCR   = *SCB_DEMCR | 0x01000000;
 8003784:	6823      	ldr	r3, [r4, #0]
	DWT_CYCCNT   = (unsigned int *)0xE0001004; //address of the register
 8003786:	4809      	ldr	r0, [pc, #36]	; (80037ac <ResetTimer+0x34>)
 8003788:	6008      	str	r0, [r1, #0]
	*SCB_DEMCR   = *SCB_DEMCR | 0x01000000;
 800378a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
	*DWT_CYCCNT  = 0; // reset the counter
 800378e:	2100      	movs	r1, #0
	*SCB_DEMCR   = *SCB_DEMCR | 0x01000000;
 8003790:	6023      	str	r3, [r4, #0]
	*DWT_CYCCNT  = 0; // reset the counter
 8003792:	6001      	str	r1, [r0, #0]
	*DWT_CONTROL = 0; 
}
 8003794:	f85d 4b04 	ldr.w	r4, [sp], #4
	*DWT_CONTROL = 0; 
 8003798:	6011      	str	r1, [r2, #0]
}
 800379a:	4770      	bx	lr
 800379c:	200001f8 	.word	0x200001f8
 80037a0:	e000edfc 	.word	0xe000edfc
 80037a4:	e0001000 	.word	0xe0001000
 80037a8:	200001fc 	.word	0x200001fc
 80037ac:	e0001004 	.word	0xe0001004

080037b0 <StartTimer>:

void StartTimer(){
	*DWT_CONTROL = *DWT_CONTROL | 1 ; // enable the counter
 80037b0:	4b03      	ldr	r3, [pc, #12]	; (80037c0 <StartTimer+0x10>)
 80037b2:	681a      	ldr	r2, [r3, #0]
 80037b4:	6813      	ldr	r3, [r2, #0]
 80037b6:	f043 0301 	orr.w	r3, r3, #1
 80037ba:	6013      	str	r3, [r2, #0]
}
 80037bc:	4770      	bx	lr
 80037be:	bf00      	nop
 80037c0:	200001f8 	.word	0x200001f8

080037c4 <StopTimer>:

void StopTimer(){
	*DWT_CONTROL = *DWT_CONTROL & 0 ; // disable the counter    
 80037c4:	4b02      	ldr	r3, [pc, #8]	; (80037d0 <StopTimer+0xc>)
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	2200      	movs	r2, #0
 80037ca:	6819      	ldr	r1, [r3, #0]
 80037cc:	601a      	str	r2, [r3, #0]
}
 80037ce:	4770      	bx	lr
 80037d0:	200001f8 	.word	0x200001f8

080037d4 <getCycles>:

unsigned int getCycles(){
	return *DWT_CYCCNT;
 80037d4:	4b01      	ldr	r3, [pc, #4]	; (80037dc <getCycles+0x8>)
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	6818      	ldr	r0, [r3, #0]
}
 80037da:	4770      	bx	lr
 80037dc:	200001fc 	.word	0x200001fc

080037e0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80037e0:	b530      	push	{r4, r5, lr}
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80037e2:	2100      	movs	r1, #0
{
 80037e4:	b0b9      	sub	sp, #228	; 0xe4
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80037e6:	460c      	mov	r4, r1
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80037e8:	2224      	movs	r2, #36	; 0x24
 80037ea:	a806      	add	r0, sp, #24
 80037ec:	f003 fd5c 	bl	80072a8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80037f0:	4621      	mov	r1, r4
 80037f2:	a816      	add	r0, sp, #88	; 0x58
 80037f4:	2288      	movs	r2, #136	; 0x88
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80037f6:	e9cd 4400 	strd	r4, r4, [sp]
 80037fa:	e9cd 4402 	strd	r4, r4, [sp, #8]
 80037fe:	9404      	str	r4, [sp, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8003800:	f003 fd52 	bl	80072a8 <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8003804:	2302      	movs	r3, #2
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8003806:	f44f 7080 	mov.w	r0, #256	; 0x100
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
  RCC_OscInitStruct.PLL.PLLM = 1;
 800380a:	2501      	movs	r5, #1
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800380c:	2110      	movs	r1, #16
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800380e:	9305      	str	r3, [sp, #20]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8003810:	e9cd 330f 	strd	r3, r3, [sp, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 10;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8003814:	e9cd 3314 	strd	r3, r3, [sp, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 10;
 8003818:	220a      	movs	r2, #10
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800381a:	9008      	str	r0, [sp, #32]
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 800381c:	2307      	movs	r3, #7
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800381e:	a805      	add	r0, sp, #20
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8003820:	9109      	str	r1, [sp, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLN = 10;
 8003822:	e9cd 5211 	strd	r5, r2, [sp, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8003826:	9313      	str	r3, [sp, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003828:	f002 f988 	bl	8005b3c <HAL_RCC_OscConfig>
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800382c:	220f      	movs	r2, #15
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800382e:	2303      	movs	r3, #3
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8003830:	2104      	movs	r1, #4
 8003832:	4668      	mov	r0, sp
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003834:	e9cd 2300 	strd	r2, r3, [sp]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8003838:	e9cd 4402 	strd	r4, r4, [sp, #8]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800383c:	9404      	str	r4, [sp, #16]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800383e:	f002 fced 	bl	800621c <HAL_RCC_ClockConfig>
  {
    Error_Handler();
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003842:	a816      	add	r0, sp, #88	; 0x58
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8003844:	9516      	str	r5, [sp, #88]	; 0x58
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8003846:	9424      	str	r4, [sp, #144]	; 0x90
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8003848:	f002 feb0 	bl	80065ac <HAL_RCCEx_PeriphCLKConfig>
  {
    Error_Handler();
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 800384c:	f44f 7000 	mov.w	r0, #512	; 0x200
 8003850:	f002 f8d6 	bl	8005a00 <HAL_PWREx_ControlVoltageScaling>
  {
    Error_Handler();
  }
}
 8003854:	b039      	add	sp, #228	; 0xe4
 8003856:	bd30      	pop	{r4, r5, pc}

08003858 <main>:
{
 8003858:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800385c:	f6ad 0da4 	subw	sp, sp, #2212	; 0x8a4
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003860:	b672      	cpsid	i
  HAL_Init();
 8003862:	f001 ff45 	bl	80056f0 <HAL_Init>
  SystemClock_Config();
 8003866:	f7ff ffbb 	bl	80037e0 <SystemClock_Config>
  */
static void MX_GPIO_Init(void)
{

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800386a:	4bbf      	ldr	r3, [pc, #764]	; (8003b68 <main+0x310>)
  huart1.Instance = USART1;
 800386c:	4cbf      	ldr	r4, [pc, #764]	; (8003b6c <main+0x314>)
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800386e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
static nnom_model_t* nnom_model_create(void)
{
	static nnom_model_t model;
	nnom_layer_t* layer[15];

	new_model(&model);
 8003870:	4ebf      	ldr	r6, [pc, #764]	; (8003b70 <main+0x318>)
  huart1.Instance = USART1;
 8003872:	49c0      	ldr	r1, [pc, #768]	; (8003b74 <main+0x31c>)
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003874:	f042 0202 	orr.w	r2, r2, #2
 8003878:	64da      	str	r2, [r3, #76]	; 0x4c
 800387a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
  huart1.Instance = USART1;
 800387c:	6021      	str	r1, [r4, #0]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800387e:	f003 0302 	and.w	r3, r3, #2
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003882:	2700      	movs	r7, #0
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003884:	930b      	str	r3, [sp, #44]	; 0x2c
  huart1.Init.BaudRate = 115200;
 8003886:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
  huart1.Init.Mode = UART_MODE_TX_RX;
 800388a:	230c      	movs	r3, #12
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800388c:	4620      	mov	r0, r4
  uint8_t x_data[BUFFER_SIZE] = {};
 800388e:	ad28      	add	r5, sp, #160	; 0xa0
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003890:	6163      	str	r3, [r4, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003892:	990b      	ldr	r1, [sp, #44]	; 0x2c
  huart1.Init.BaudRate = 115200;
 8003894:	6062      	str	r2, [r4, #4]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8003896:	e9c4 7702 	strd	r7, r7, [r4, #8]
  huart1.Init.Parity = UART_PARITY_NONE;
 800389a:	6127      	str	r7, [r4, #16]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800389c:	e9c4 7706 	strd	r7, r7, [r4, #24]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80038a0:	e9c4 7708 	strd	r7, r7, [r4, #32]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80038a4:	f003 fa66 	bl	8006d74 <HAL_UART_Init>
  uint8_t x_data[BUFFER_SIZE] = {};
 80038a8:	4639      	mov	r1, r7
 80038aa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80038ae:	4628      	mov	r0, r5
 80038b0:	f003 fcfa 	bl	80072a8 <memset>
 80038b4:	4630      	mov	r0, r6

	layer[0] = Input(shape(32, 32, 1), nnom_input_data);
 80038b6:	f10d 0898 	add.w	r8, sp, #152	; 0x98
  uint8_t byte_received = 0;
 80038ba:	f88d 701e 	strb.w	r7, [sp, #30]
	new_model(&model);
 80038be:	f000 fb87 	bl	8003fd0 <new_model>
	layer[0] = Input(shape(32, 32, 1), nnom_input_data);
 80038c2:	2220      	movs	r2, #32
 80038c4:	2301      	movs	r3, #1
 80038c6:	4640      	mov	r0, r8
 80038c8:	4611      	mov	r1, r2
 80038ca:	f001 fbbf 	bl	800504c <shape>
 80038ce:	e898 0003 	ldmia.w	r8, {r0, r1}
 80038d2:	4aa9      	ldr	r2, [pc, #676]	; (8003b78 <main+0x320>)
 80038d4:	f001 fb64 	bl	8004fa0 <Input>
	layer[1] = model.hook(Conv2D(10, kernel(7, 7), stride(1, 1), PADDING_VALID, &conv2d_w, &conv2d_b), layer[0]);
 80038d8:	f10d 0890 	add.w	r8, sp, #144	; 0x90
 80038dc:	2207      	movs	r2, #7
	layer[0] = Input(shape(32, 32, 1), nnom_input_data);
 80038de:	4682      	mov	sl, r0
	layer[1] = model.hook(Conv2D(10, kernel(7, 7), stride(1, 1), PADDING_VALID, &conv2d_w, &conv2d_b), layer[0]);
 80038e0:	4611      	mov	r1, r2
 80038e2:	4640      	mov	r0, r8
 80038e4:	f8d6 900c 	ldr.w	r9, [r6, #12]
 80038e8:	f001 fbb8 	bl	800505c <kernel>
 80038ec:	2201      	movs	r2, #1
 80038ee:	4611      	mov	r1, r2
 80038f0:	a822      	add	r0, sp, #136	; 0x88
 80038f2:	f001 fbbb 	bl	800506c <stride>
 80038f6:	49a1      	ldr	r1, [pc, #644]	; (8003b7c <main+0x324>)
 80038f8:	4aa1      	ldr	r2, [pc, #644]	; (8003b80 <main+0x328>)
 80038fa:	f8bd 308c 	ldrh.w	r3, [sp, #140]	; 0x8c
 80038fe:	9701      	str	r7, [sp, #4]
 8003900:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8003904:	f8ad 3000 	strh.w	r3, [sp]
 8003908:	e898 0006 	ldmia.w	r8, {r1, r2}
 800390c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800390e:	200a      	movs	r0, #10
 8003910:	f001 fa2a 	bl	8004d68 <Conv2D>
 8003914:	4651      	mov	r1, sl
 8003916:	47c8      	blx	r9
 8003918:	4681      	mov	r9, r0
	layer[2] = model.active(act_relu(), layer[1]);
 800391a:	f8d6 8018 	ldr.w	r8, [r6, #24]
 800391e:	f001 f8a3 	bl	8004a68 <act_relu>
 8003922:	4649      	mov	r1, r9
 8003924:	47c0      	blx	r8
	layer[3] = model.hook(MaxPool(kernel(2, 2), stride(2, 2), PADDING_VALID), layer[2]);
 8003926:	f10d 0880 	add.w	r8, sp, #128	; 0x80
 800392a:	2202      	movs	r2, #2
 800392c:	68f3      	ldr	r3, [r6, #12]
 800392e:	9305      	str	r3, [sp, #20]
	layer[2] = model.active(act_relu(), layer[1]);
 8003930:	4683      	mov	fp, r0
	layer[3] = model.hook(MaxPool(kernel(2, 2), stride(2, 2), PADDING_VALID), layer[2]);
 8003932:	4611      	mov	r1, r2
 8003934:	4640      	mov	r0, r8
 8003936:	f001 fb91 	bl	800505c <kernel>
 800393a:	f10d 0978 	add.w	r9, sp, #120	; 0x78
 800393e:	2202      	movs	r2, #2
 8003940:	4648      	mov	r0, r9
 8003942:	4611      	mov	r1, r2
 8003944:	f001 fb92 	bl	800506c <stride>
 8003948:	9700      	str	r7, [sp, #0]
 800394a:	e899 000c 	ldmia.w	r9, {r2, r3}
 800394e:	e898 0003 	ldmia.w	r8, {r0, r1}
 8003952:	f001 fce1 	bl	8005318 <MaxPool>
 8003956:	9b05      	ldr	r3, [sp, #20]
 8003958:	4659      	mov	r1, fp
 800395a:	4798      	blx	r3
	layer[4] = model.hook(Conv2D(50, kernel(4, 4), stride(1, 1), PADDING_VALID, &conv2d_1_w, &conv2d_1_b), layer[3]);
 800395c:	f10d 0870 	add.w	r8, sp, #112	; 0x70
 8003960:	2204      	movs	r2, #4
	layer[3] = model.hook(MaxPool(kernel(2, 2), stride(2, 2), PADDING_VALID), layer[2]);
 8003962:	4683      	mov	fp, r0
	layer[4] = model.hook(Conv2D(50, kernel(4, 4), stride(1, 1), PADDING_VALID, &conv2d_1_w, &conv2d_1_b), layer[3]);
 8003964:	4611      	mov	r1, r2
 8003966:	4640      	mov	r0, r8
 8003968:	f8d6 900c 	ldr.w	r9, [r6, #12]
 800396c:	f001 fb76 	bl	800505c <kernel>
 8003970:	2201      	movs	r2, #1
 8003972:	4611      	mov	r1, r2
 8003974:	a81a      	add	r0, sp, #104	; 0x68
 8003976:	f001 fb79 	bl	800506c <stride>
 800397a:	4982      	ldr	r1, [pc, #520]	; (8003b84 <main+0x32c>)
 800397c:	4a82      	ldr	r2, [pc, #520]	; (8003b88 <main+0x330>)
 800397e:	f8bd 306c 	ldrh.w	r3, [sp, #108]	; 0x6c
 8003982:	9701      	str	r7, [sp, #4]
 8003984:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8003988:	f8ad 3000 	strh.w	r3, [sp]
 800398c:	e898 0006 	ldmia.w	r8, {r1, r2}
 8003990:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8003992:	2032      	movs	r0, #50	; 0x32
 8003994:	f001 f9e8 	bl	8004d68 <Conv2D>
 8003998:	4659      	mov	r1, fp
 800399a:	47c8      	blx	r9
 800399c:	4681      	mov	r9, r0
	layer[5] = model.active(act_relu(), layer[4]);
 800399e:	f8d6 8018 	ldr.w	r8, [r6, #24]
 80039a2:	f001 f861 	bl	8004a68 <act_relu>
 80039a6:	4649      	mov	r1, r9
 80039a8:	47c0      	blx	r8
	layer[6] = model.hook(MaxPool(kernel(2, 2), stride(2, 2), PADDING_VALID), layer[5]);
 80039aa:	f10d 0860 	add.w	r8, sp, #96	; 0x60
 80039ae:	2202      	movs	r2, #2
 80039b0:	68f3      	ldr	r3, [r6, #12]
 80039b2:	9305      	str	r3, [sp, #20]
	layer[5] = model.active(act_relu(), layer[4]);
 80039b4:	4683      	mov	fp, r0
	layer[6] = model.hook(MaxPool(kernel(2, 2), stride(2, 2), PADDING_VALID), layer[5]);
 80039b6:	4611      	mov	r1, r2
 80039b8:	4640      	mov	r0, r8
 80039ba:	f001 fb4f 	bl	800505c <kernel>
 80039be:	f10d 0958 	add.w	r9, sp, #88	; 0x58
 80039c2:	2202      	movs	r2, #2
 80039c4:	4648      	mov	r0, r9
 80039c6:	4611      	mov	r1, r2
 80039c8:	f001 fb50 	bl	800506c <stride>
 80039cc:	9700      	str	r7, [sp, #0]
 80039ce:	e899 000c 	ldmia.w	r9, {r2, r3}
 80039d2:	e898 0003 	ldmia.w	r8, {r0, r1}
 80039d6:	f001 fc9f 	bl	8005318 <MaxPool>
 80039da:	9b05      	ldr	r3, [sp, #20]
 80039dc:	4659      	mov	r1, fp
 80039de:	4798      	blx	r3
	layer[7] = model.hook(Conv2D(100, kernel(4, 4), stride(1, 1), PADDING_VALID, &conv2d_2_w, &conv2d_2_b), layer[6]);
 80039e0:	f10d 0850 	add.w	r8, sp, #80	; 0x50
 80039e4:	2204      	movs	r2, #4
	layer[6] = model.hook(MaxPool(kernel(2, 2), stride(2, 2), PADDING_VALID), layer[5]);
 80039e6:	4683      	mov	fp, r0
	layer[7] = model.hook(Conv2D(100, kernel(4, 4), stride(1, 1), PADDING_VALID, &conv2d_2_w, &conv2d_2_b), layer[6]);
 80039e8:	4611      	mov	r1, r2
 80039ea:	4640      	mov	r0, r8
 80039ec:	f8d6 900c 	ldr.w	r9, [r6, #12]
 80039f0:	f001 fb34 	bl	800505c <kernel>
 80039f4:	2201      	movs	r2, #1
 80039f6:	4611      	mov	r1, r2
 80039f8:	a812      	add	r0, sp, #72	; 0x48
 80039fa:	f001 fb37 	bl	800506c <stride>
 80039fe:	4963      	ldr	r1, [pc, #396]	; (8003b8c <main+0x334>)
 8003a00:	4a63      	ldr	r2, [pc, #396]	; (8003b90 <main+0x338>)
 8003a02:	f8bd 304c 	ldrh.w	r3, [sp, #76]	; 0x4c
 8003a06:	9701      	str	r7, [sp, #4]
 8003a08:	e9cd 2102 	strd	r2, r1, [sp, #8]
 8003a0c:	f8ad 3000 	strh.w	r3, [sp]
 8003a10:	e898 0006 	ldmia.w	r8, {r1, r2}
 8003a14:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8003a16:	2064      	movs	r0, #100	; 0x64
 8003a18:	f001 f9a6 	bl	8004d68 <Conv2D>
 8003a1c:	4659      	mov	r1, fp
 8003a1e:	47c8      	blx	r9
 8003a20:	4681      	mov	r9, r0
	layer[8] = model.active(act_relu(), layer[7]);
 8003a22:	f8d6 8018 	ldr.w	r8, [r6, #24]
 8003a26:	f001 f81f 	bl	8004a68 <act_relu>
 8003a2a:	4649      	mov	r1, r9
 8003a2c:	47c0      	blx	r8
	layer[9] = model.hook(MaxPool(kernel(2, 2), stride(2, 2), PADDING_VALID), layer[8]);
 8003a2e:	f10d 0840 	add.w	r8, sp, #64	; 0x40
 8003a32:	2202      	movs	r2, #2
 8003a34:	68f3      	ldr	r3, [r6, #12]
 8003a36:	9305      	str	r3, [sp, #20]
 8003a38:	4611      	mov	r1, r2
	layer[8] = model.active(act_relu(), layer[7]);
 8003a3a:	4683      	mov	fp, r0
	layer[9] = model.hook(MaxPool(kernel(2, 2), stride(2, 2), PADDING_VALID), layer[8]);
 8003a3c:	4640      	mov	r0, r8
 8003a3e:	f001 fb0d 	bl	800505c <kernel>
 8003a42:	f10d 0938 	add.w	r9, sp, #56	; 0x38
 8003a46:	2202      	movs	r2, #2
 8003a48:	4648      	mov	r0, r9
 8003a4a:	4611      	mov	r1, r2
 8003a4c:	f001 fb0e 	bl	800506c <stride>
 8003a50:	9700      	str	r7, [sp, #0]
 8003a52:	e899 000c 	ldmia.w	r9, {r2, r3}
 8003a56:	e898 0003 	ldmia.w	r8, {r0, r1}
 8003a5a:	f001 fc5d 	bl	8005318 <MaxPool>
 8003a5e:	9b05      	ldr	r3, [sp, #20]
 8003a60:	4659      	mov	r1, fp
 8003a62:	4798      	blx	r3
	layer[10] = model.hook(Dense(100, &dense_w, &dense_b), layer[9]);
 8003a64:	4a4b      	ldr	r2, [pc, #300]	; (8003b94 <main+0x33c>)
 8003a66:	494c      	ldr	r1, [pc, #304]	; (8003b98 <main+0x340>)
 8003a68:	68f7      	ldr	r7, [r6, #12]
	layer[9] = model.hook(MaxPool(kernel(2, 2), stride(2, 2), PADDING_VALID), layer[8]);
 8003a6a:	4680      	mov	r8, r0
	layer[10] = model.hook(Dense(100, &dense_w, &dense_b), layer[9]);
 8003a6c:	2064      	movs	r0, #100	; 0x64
 8003a6e:	f001 fa43 	bl	8004ef8 <Dense>
 8003a72:	4641      	mov	r1, r8
 8003a74:	47b8      	blx	r7
 8003a76:	4680      	mov	r8, r0
	layer[11] = model.active(act_relu(), layer[10]);
 8003a78:	69b7      	ldr	r7, [r6, #24]
 8003a7a:	f000 fff5 	bl	8004a68 <act_relu>
 8003a7e:	4641      	mov	r1, r8
 8003a80:	47b8      	blx	r7
	layer[12] = model.hook(Dense(43, &dense_1_w, &dense_1_b), layer[11]);
 8003a82:	4a46      	ldr	r2, [pc, #280]	; (8003b9c <main+0x344>)
 8003a84:	4946      	ldr	r1, [pc, #280]	; (8003ba0 <main+0x348>)
 8003a86:	68f7      	ldr	r7, [r6, #12]
	layer[11] = model.active(act_relu(), layer[10]);
 8003a88:	4680      	mov	r8, r0
	layer[12] = model.hook(Dense(43, &dense_1_w, &dense_1_b), layer[11]);
 8003a8a:	202b      	movs	r0, #43	; 0x2b
 8003a8c:	f001 fa34 	bl	8004ef8 <Dense>
 8003a90:	4641      	mov	r1, r8
 8003a92:	47b8      	blx	r7
 8003a94:	4680      	mov	r8, r0
	layer[13] = model.hook(Softmax(), layer[12]);
 8003a96:	68f7      	ldr	r7, [r6, #12]
 8003a98:	f001 fcce 	bl	8005438 <Softmax>
 8003a9c:	4641      	mov	r1, r8
 8003a9e:	47b8      	blx	r7
	layer[14] = model.hook(Output(shape(43,1,1), nnom_output_data), layer[13]);
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	af0c      	add	r7, sp, #48	; 0x30
 8003aa4:	461a      	mov	r2, r3
	layer[13] = model.hook(Softmax(), layer[12]);
 8003aa6:	4681      	mov	r9, r0
	layer[14] = model.hook(Output(shape(43,1,1), nnom_output_data), layer[13]);
 8003aa8:	212b      	movs	r1, #43	; 0x2b
 8003aaa:	4638      	mov	r0, r7
 8003aac:	f8d6 800c 	ldr.w	r8, [r6, #12]
 8003ab0:	f001 facc 	bl	800504c <shape>
 8003ab4:	4a3b      	ldr	r2, [pc, #236]	; (8003ba4 <main+0x34c>)
 8003ab6:	e897 0003 	ldmia.w	r7, {r0, r1}
 8003aba:	f001 fc93 	bl	80053e4 <Output>
 8003abe:	4649      	mov	r1, r9
 8003ac0:	47c0      	blx	r8
	model_compile(&model, layer[0], layer[14]);
 8003ac2:	4651      	mov	r1, sl
 8003ac4:	4602      	mov	r2, r0
 8003ac6:	4630      	mov	r0, r6
 8003ac8:	f000 fe5a 	bl	8004780 <model_compile>
 8003acc:	f20d 469f 	addw	r6, sp, #1183	; 0x49f
{
 8003ad0:	2700      	movs	r7, #0
	  int uart_status = HAL_UART_Receive(&huart1, &byte_received, sizeof(uint8_t), 100);
 8003ad2:	2364      	movs	r3, #100	; 0x64
 8003ad4:	2201      	movs	r2, #1
 8003ad6:	f10d 011e 	add.w	r1, sp, #30
 8003ada:	4620      	mov	r0, r4
 8003adc:	f003 f832 	bl	8006b44 <HAL_UART_Receive>
	  	  if (uart_status == HAL_OK)
 8003ae0:	2800      	cmp	r0, #0
 8003ae2:	d13c      	bne.n	8003b5e <main+0x306>
	  	  	x_data[array_pos] = byte_received;
 8003ae4:	f89d 301e 	ldrb.w	r3, [sp, #30]
 8003ae8:	55eb      	strb	r3, [r5, r7]
	  	  	array_pos++;
 8003aea:	3701      	adds	r7, #1
	  	  if (array_pos == BUFFER_SIZE)
 8003aec:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
 8003af0:	d1ef      	bne.n	8003ad2 <main+0x27a>
 8003af2:	f10d 029f 	add.w	r2, sp, #159	; 0x9f
 8003af6:	4631      	mov	r1, r6
		  		fArray[i] = (int8_t) x_data[i] >> 1 & 0b01111111;
 8003af8:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8003afc:	085b      	lsrs	r3, r3, #1
		  	for (int i = 0; i < BUFFER_SIZE; i++)
 8003afe:	42b2      	cmp	r2, r6
		  		fArray[i] = (int8_t) x_data[i] >> 1 & 0b01111111;
 8003b00:	f801 3f01 	strb.w	r3, [r1, #1]!
		  	for (int i = 0; i < BUFFER_SIZE; i++)
 8003b04:	d1f8      	bne.n	8003af8 <main+0x2a0>
	  	  	memcpy(nnom_input_data, fArray, 32*32);
 8003b06:	f50d 6194 	add.w	r1, sp, #1184	; 0x4a0
 8003b0a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003b0e:	481a      	ldr	r0, [pc, #104]	; (8003b78 <main+0x320>)
 8003b10:	f003 fba6 	bl	8007260 <memcpy>
	  	  	ResetTimer();
 8003b14:	f7ff fe30 	bl	8003778 <ResetTimer>
	  	  	StartTimer();
 8003b18:	f7ff fe4a 	bl	80037b0 <StartTimer>
	  	  	nnom_predict(model, &pred_label, &probability);
 8003b1c:	aa09      	add	r2, sp, #36	; 0x24
 8003b1e:	a908      	add	r1, sp, #32
 8003b20:	4813      	ldr	r0, [pc, #76]	; (8003b70 <main+0x318>)
 8003b22:	f001 fd2f 	bl	8005584 <nnom_predict>
	  	  	StopTimer();
 8003b26:	f7ff fe4d 	bl	80037c4 <StopTimer>
	  	  	uint8_t best_output = (uint8_t) pred_label;
 8003b2a:	9b08      	ldr	r3, [sp, #32]
 8003b2c:	f88d 301f 	strb.w	r3, [sp, #31]
	  	    uint32_t cycles_count = getCycles();
 8003b30:	f7ff fe50 	bl	80037d4 <getCycles>
	  	  	HAL_UART_Transmit(&huart1, &best_output, 1, 200);
 8003b34:	f10d 011f 	add.w	r1, sp, #31
	  	    uint32_t cycles_count = getCycles();
 8003b38:	900a      	str	r0, [sp, #40]	; 0x28
	  	  	HAL_UART_Transmit(&huart1, &best_output, 1, 200);
 8003b3a:	23c8      	movs	r3, #200	; 0xc8
 8003b3c:	2201      	movs	r2, #1
 8003b3e:	4620      	mov	r0, r4
 8003b40:	f002 ff44 	bl	80069cc <HAL_UART_Transmit>
	  	  	HAL_UART_Transmit(&huart1, &probability, sizeof(float), 200);
 8003b44:	a909      	add	r1, sp, #36	; 0x24
 8003b46:	23c8      	movs	r3, #200	; 0xc8
 8003b48:	2204      	movs	r2, #4
 8003b4a:	4620      	mov	r0, r4
 8003b4c:	f002 ff3e 	bl	80069cc <HAL_UART_Transmit>
	  	  	HAL_UART_Transmit(&huart1, &cycles_count, sizeof(uint32_t), 200);
 8003b50:	23c8      	movs	r3, #200	; 0xc8
 8003b52:	2204      	movs	r2, #4
 8003b54:	a90a      	add	r1, sp, #40	; 0x28
 8003b56:	4620      	mov	r0, r4
 8003b58:	f002 ff38 	bl	80069cc <HAL_UART_Transmit>
 8003b5c:	e7b8      	b.n	8003ad0 <main+0x278>
	  	  if (array_pos == BUFFER_SIZE)
 8003b5e:	f5b7 6f80 	cmp.w	r7, #1024	; 0x400
 8003b62:	d1b6      	bne.n	8003ad2 <main+0x27a>
 8003b64:	e7c5      	b.n	8003af2 <main+0x29a>
 8003b66:	bf00      	nop
 8003b68:	40021000 	.word	0x40021000
 8003b6c:	200006c4 	.word	0x200006c4
 8003b70:	20000200 	.word	0x20000200
 8003b74:	40013800 	.word	0x40013800
 8003b78:	20000288 	.word	0x20000288
 8003b7c:	0801f2d0 	.word	0x0801f2d0
 8003b80:	0801f2e4 	.word	0x0801f2e4
 8003b84:	08009a58 	.word	0x08009a58
 8003b88:	08009a94 	.word	0x08009a94
 8003b8c:	0800b9dc 	.word	0x0800b9dc
 8003b90:	0800ba48 	.word	0x0800ba48
 8003b94:	080205e0 	.word	0x080205e0
 8003b98:	0802064c 	.word	0x0802064c
 8003b9c:	0801f4d8 	.word	0x0801f4d8
 8003ba0:	0801f50c 	.word	0x0801f50c
 8003ba4:	20000688 	.word	0x20000688

08003ba8 <HAL_MspInit>:
{
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003ba8:	4b0a      	ldr	r3, [pc, #40]	; (8003bd4 <HAL_MspInit+0x2c>)
 8003baa:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003bac:	f042 0201 	orr.w	r2, r2, #1
 8003bb0:	661a      	str	r2, [r3, #96]	; 0x60
 8003bb2:	6e1a      	ldr	r2, [r3, #96]	; 0x60
{
 8003bb4:	b082      	sub	sp, #8
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003bb6:	f002 0201 	and.w	r2, r2, #1
 8003bba:	9200      	str	r2, [sp, #0]
 8003bbc:	9a00      	ldr	r2, [sp, #0]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003bbe:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8003bc0:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8003bc4:	659a      	str	r2, [r3, #88]	; 0x58
 8003bc6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bc8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003bcc:	9301      	str	r3, [sp, #4]
 8003bce:	9b01      	ldr	r3, [sp, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003bd0:	b002      	add	sp, #8
 8003bd2:	4770      	bx	lr
 8003bd4:	40021000 	.word	0x40021000

08003bd8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003bd8:	b570      	push	{r4, r5, r6, lr}
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  if(huart->Instance==USART1)
 8003bda:	6801      	ldr	r1, [r0, #0]
 8003bdc:	4a17      	ldr	r2, [pc, #92]	; (8003c3c <HAL_UART_MspInit+0x64>)
{
 8003bde:	b088      	sub	sp, #32
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003be0:	2300      	movs	r3, #0
  if(huart->Instance==USART1)
 8003be2:	4291      	cmp	r1, r2
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003be4:	e9cd 3303 	strd	r3, r3, [sp, #12]
 8003be8:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8003bec:	9307      	str	r3, [sp, #28]
  if(huart->Instance==USART1)
 8003bee:	d001      	beq.n	8003bf4 <HAL_UART_MspInit+0x1c>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8003bf0:	b008      	add	sp, #32
 8003bf2:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_RCC_USART1_CLK_ENABLE();
 8003bf4:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8003bf8:	f503 3304 	add.w	r3, r3, #135168	; 0x21000
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003bfc:	4810      	ldr	r0, [pc, #64]	; (8003c40 <HAL_UART_MspInit+0x68>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8003bfe:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003c00:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003c04:	661a      	str	r2, [r3, #96]	; 0x60
 8003c06:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8003c08:	f402 4280 	and.w	r2, r2, #16384	; 0x4000
 8003c0c:	9201      	str	r2, [sp, #4]
 8003c0e:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c10:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8003c12:	f042 0202 	orr.w	r2, r2, #2
 8003c16:	64da      	str	r2, [r3, #76]	; 0x4c
 8003c18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c1a:	f003 0302 	and.w	r3, r3, #2
 8003c1e:	9302      	str	r3, [sp, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c20:	2203      	movs	r2, #3
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003c22:	2307      	movs	r3, #7
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c24:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003c26:	25c0      	movs	r5, #192	; 0xc0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c28:	2402      	movs	r4, #2
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c2a:	9e02      	ldr	r6, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c2c:	e9cd 5403 	strd	r5, r4, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003c30:	e9cd 2306 	strd	r2, r3, [sp, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003c34:	f001 fde4 	bl	8005800 <HAL_GPIO_Init>
}
 8003c38:	b008      	add	sp, #32
 8003c3a:	bd70      	pop	{r4, r5, r6, pc}
 8003c3c:	40013800 	.word	0x40013800
 8003c40:	48000400 	.word	0x48000400

08003c44 <NMI_Handler>:

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8003c44:	4770      	bx	lr
 8003c46:	bf00      	nop

08003c48 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003c48:	e7fe      	b.n	8003c48 <HardFault_Handler>
 8003c4a:	bf00      	nop

08003c4c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003c4c:	e7fe      	b.n	8003c4c <MemManage_Handler>
 8003c4e:	bf00      	nop

08003c50 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003c50:	e7fe      	b.n	8003c50 <BusFault_Handler>
 8003c52:	bf00      	nop

08003c54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003c54:	e7fe      	b.n	8003c54 <UsageFault_Handler>
 8003c56:	bf00      	nop

08003c58 <SVC_Handler>:
 8003c58:	4770      	bx	lr
 8003c5a:	bf00      	nop

08003c5c <DebugMon_Handler>:
 8003c5c:	4770      	bx	lr
 8003c5e:	bf00      	nop

08003c60 <PendSV_Handler>:
 8003c60:	4770      	bx	lr
 8003c62:	bf00      	nop

08003c64 <SysTick_Handler>:
void SysTick_Handler(void)
{
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003c64:	f001 bd58 	b.w	8005718 <HAL_IncTick>

08003c68 <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003c68:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c6a:	1e16      	subs	r6, r2, #0
 8003c6c:	dd07      	ble.n	8003c7e <_read+0x16>
 8003c6e:	460c      	mov	r4, r1
 8003c70:	198d      	adds	r5, r1, r6
	{
		*ptr++ = __io_getchar();
 8003c72:	f3af 8000 	nop.w
 8003c76:	f804 0b01 	strb.w	r0, [r4], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c7a:	42a5      	cmp	r5, r4
 8003c7c:	d1f9      	bne.n	8003c72 <_read+0xa>
	}

return len;
}
 8003c7e:	4630      	mov	r0, r6
 8003c80:	bd70      	pop	{r4, r5, r6, pc}
 8003c82:	bf00      	nop

08003c84 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003c84:	b570      	push	{r4, r5, r6, lr}
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c86:	1e16      	subs	r6, r2, #0
 8003c88:	dd07      	ble.n	8003c9a <_write+0x16>
 8003c8a:	460c      	mov	r4, r1
 8003c8c:	198d      	adds	r5, r1, r6
	{
		__io_putchar(*ptr++);
 8003c8e:	f814 0b01 	ldrb.w	r0, [r4], #1
 8003c92:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003c96:	42ac      	cmp	r4, r5
 8003c98:	d1f9      	bne.n	8003c8e <_write+0xa>
	}
	return len;
}
 8003c9a:	4630      	mov	r0, r6
 8003c9c:	bd70      	pop	{r4, r5, r6, pc}
 8003c9e:	bf00      	nop

08003ca0 <_close>:

int _close(int file)
{
	return -1;
}
 8003ca0:	f04f 30ff 	mov.w	r0, #4294967295
 8003ca4:	4770      	bx	lr
 8003ca6:	bf00      	nop

08003ca8 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8003ca8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003cac:	604b      	str	r3, [r1, #4]
	return 0;
}
 8003cae:	2000      	movs	r0, #0
 8003cb0:	4770      	bx	lr
 8003cb2:	bf00      	nop

08003cb4 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8003cb4:	2001      	movs	r0, #1
 8003cb6:	4770      	bx	lr

08003cb8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8003cb8:	2000      	movs	r0, #0
 8003cba:	4770      	bx	lr

08003cbc <_sbrk>:
{
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8003cbc:	4a0c      	ldr	r2, [pc, #48]	; (8003cf0 <_sbrk+0x34>)
{
 8003cbe:	b508      	push	{r3, lr}
	if (heap_end == 0)
 8003cc0:	6813      	ldr	r3, [r2, #0]
 8003cc2:	b133      	cbz	r3, 8003cd2 <_sbrk+0x16>
		heap_end = &end;

	prev_heap_end = heap_end;
	if (heap_end + incr > stack_ptr)
 8003cc4:	4418      	add	r0, r3
 8003cc6:	4669      	mov	r1, sp
 8003cc8:	4288      	cmp	r0, r1
 8003cca:	d808      	bhi.n	8003cde <_sbrk+0x22>
	{
		errno = ENOMEM;
		return (caddr_t) -1;
	}

	heap_end += incr;
 8003ccc:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap_end;
}
 8003cce:	4618      	mov	r0, r3
 8003cd0:	bd08      	pop	{r3, pc}
		heap_end = &end;
 8003cd2:	4b08      	ldr	r3, [pc, #32]	; (8003cf4 <_sbrk+0x38>)
 8003cd4:	6013      	str	r3, [r2, #0]
	if (heap_end + incr > stack_ptr)
 8003cd6:	4418      	add	r0, r3
 8003cd8:	4669      	mov	r1, sp
 8003cda:	4288      	cmp	r0, r1
 8003cdc:	d9f6      	bls.n	8003ccc <_sbrk+0x10>
		errno = ENOMEM;
 8003cde:	f003 fa85 	bl	80071ec <__errno>
 8003ce2:	230c      	movs	r3, #12
 8003ce4:	6003      	str	r3, [r0, #0]
		return (caddr_t) -1;
 8003ce6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003cea:	4618      	mov	r0, r3
 8003cec:	bd08      	pop	{r3, pc}
 8003cee:	bf00      	nop
 8003cf0:	200006b4 	.word	0x200006b4
 8003cf4:	20000750 	.word	0x20000750

08003cf8 <SystemInit>:

void SystemInit(void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003cf8:	4911      	ldr	r1, [pc, #68]	; (8003d40 <SystemInit+0x48>)
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8003cfa:	4b12      	ldr	r3, [pc, #72]	; (8003d44 <SystemInit+0x4c>)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003cfc:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8003d00:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
{
 8003d04:	b410      	push	{r4}
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003d06:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  RCC->CR |= RCC_CR_MSION;
 8003d0a:	681a      	ldr	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8003d0c:	2000      	movs	r0, #0
  RCC->CR |= RCC_CR_MSION;
 8003d0e:	f042 0201 	orr.w	r2, r2, #1
 8003d12:	601a      	str	r2, [r3, #0]
  RCC->CFGR = 0x00000000U;
 8003d14:	6098      	str	r0, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8003d16:	681a      	ldr	r2, [r3, #0]
 8003d18:	f022 52a8 	bic.w	r2, r2, #352321536	; 0x15000000
 8003d1c:	f422 2210 	bic.w	r2, r2, #589824	; 0x90000

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8003d20:	f44f 5480 	mov.w	r4, #4096	; 0x1000
  RCC->CR &= 0xEAF6FFFFU;
 8003d24:	601a      	str	r2, [r3, #0]
  RCC->PLLCFGR = 0x00001000U;
 8003d26:	60dc      	str	r4, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8003d28:	681a      	ldr	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003d2a:	f04f 6400 	mov.w	r4, #134217728	; 0x8000000
  RCC->CR &= 0xFFFBFFFFU;
 8003d2e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003d32:	601a      	str	r2, [r3, #0]
  RCC->CIER = 0x00000000U;
 8003d34:	6198      	str	r0, [r3, #24]
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8003d36:	608c      	str	r4, [r1, #8]
#endif
}
 8003d38:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003d3c:	4770      	bx	lr
 8003d3e:	bf00      	nop
 8003d40:	e000ed00 	.word	0xe000ed00
 8003d44:	40021000 	.word	0x40021000

08003d48 <model_active>:

// This api will merge activation to layer's actail to avoid the extra layer for activation
static nnom_layer_t *model_active(nnom_activation_t *act, nnom_layer_t *target)
{
	// simple and easy
	target->actail = act;
 8003d48:	6108      	str	r0, [r1, #16]
	return target;
}
 8003d4a:	4608      	mov	r0, r1
 8003d4c:	4770      	bx	lr
 8003d4e:	bf00      	nop

08003d50 <model_add>:
{
 8003d50:	b508      	push	{r3, lr}
	if (layer == NULL)
 8003d52:	b179      	cbz	r1, 8003d74 <model_add+0x24>
	last = find_last(model->head);
 8003d54:	6803      	ldr	r3, [r0, #0]
	if (layer == NULL)
 8003d56:	b90b      	cbnz	r3, 8003d5c <model_add+0xc>
 8003d58:	e009      	b.n	8003d6e <model_add+0x1e>
	while (layer->out->hook.io != NULL)
 8003d5a:	695b      	ldr	r3, [r3, #20]
 8003d5c:	69da      	ldr	r2, [r3, #28]
 8003d5e:	6813      	ldr	r3, [r2, #0]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d1fa      	bne.n	8003d5a <model_add+0xa>
		last->out->hook.io = curr->in; // hook IO
 8003d64:	698b      	ldr	r3, [r1, #24]
 8003d66:	6013      	str	r3, [r2, #0]
	return NN_SUCCESS;
 8003d68:	2000      	movs	r0, #0
		curr->in->hook.io = last->out;
 8003d6a:	601a      	str	r2, [r3, #0]
}
 8003d6c:	bd08      	pop	{r3, pc}
		model->head = curr;
 8003d6e:	6001      	str	r1, [r0, #0]
	return NN_SUCCESS;
 8003d70:	4618      	mov	r0, r3
}
 8003d72:	bd08      	pop	{r3, pc}
		NNOM_LOG("Error: added a NULL layer, could be no memory while creating layer.\n");
 8003d74:	4802      	ldr	r0, [pc, #8]	; (8003d80 <model_add+0x30>)
 8003d76:	f004 f839 	bl	8007dec <puts>
		return NN_NO_MEMORY;
 8003d7a:	f06f 0006 	mvn.w	r0, #6
}
 8003d7e:	bd08      	pop	{r3, pc}
 8003d80:	08023004 	.word	0x08023004

08003d84 <model_mergex.constprop.9>:
static nnom_layer_t *model_mergex(nnom_layer_t *method, int num, ...)
 8003d84:	b40e      	push	{r1, r2, r3}
 8003d86:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if (method == NULL)
 8003d8a:	4681      	mov	r9, r0
static nnom_layer_t *model_mergex(nnom_layer_t *method, int num, ...)
 8003d8c:	b082      	sub	sp, #8
	if (method == NULL)
 8003d8e:	2800      	cmp	r0, #0
 8003d90:	d03e      	beq.n	8003e10 <model_mergex.constprop.9+0x8c>
 8003d92:	f8d0 a018 	ldr.w	sl, [r0, #24]
		nnom_memory_taken += size; //test
 8003d96:	f8df b09c 	ldr.w	fp, [pc, #156]	; 8003e34 <model_mergex.constprop.9+0xb0>
 8003d9a:	ae0c      	add	r6, sp, #48	; 0x30
 8003d9c:	f10d 0838 	add.w	r8, sp, #56	; 0x38
		in_layer = va_arg(valist, nnom_layer_t *);
 8003da0:	3604      	adds	r6, #4
 8003da2:	f856 7c04 	ldr.w	r7, [r6, #-4]
 8003da6:	9601      	str	r6, [sp, #4]
		output_io_hook = allocate_hook(in_layer->out);
 8003da8:	69fc      	ldr	r4, [r7, #28]
	if (io == NULL)
 8003daa:	b19c      	cbz	r4, 8003dd4 <model_mergex.constprop.9+0x50>
	if (hook->io == NULL)
 8003dac:	6823      	ldr	r3, [r4, #0]
 8003dae:	b90b      	cbnz	r3, 8003db4 <model_mergex.constprop.9+0x30>
 8003db0:	e010      	b.n	8003dd4 <model_mergex.constprop.9+0x50>
		while (hook->next != NULL)
 8003db2:	461c      	mov	r4, r3
 8003db4:	6863      	ldr	r3, [r4, #4]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d1fb      	bne.n	8003db2 <model_mergex.constprop.9+0x2e>
	void *p = nnom_malloc(size);
 8003dba:	2101      	movs	r1, #1
 8003dbc:	2008      	movs	r0, #8
 8003dbe:	f003 fa0d 	bl	80071dc <calloc>
	if (p)
 8003dc2:	2800      	cmp	r0, #0
 8003dc4:	d032      	beq.n	8003e2c <model_mergex.constprop.9+0xa8>
		nnom_memory_taken += size; //test
 8003dc6:	f8db 3000 	ldr.w	r3, [fp]
		hook->next = nnom_mem(sizeof(nnom_layer_hook_t));
 8003dca:	6060      	str	r0, [r4, #4]
		nnom_memory_taken += size; //test
 8003dcc:	3308      	adds	r3, #8
		hook->next = nnom_mem(sizeof(nnom_layer_hook_t));
 8003dce:	4604      	mov	r4, r0
		nnom_memory_taken += size; //test
 8003dd0:	f8cb 3000 	str.w	r3, [fp]
	if (io == NULL)
 8003dd4:	f1ba 0f00 	cmp.w	sl, #0
 8003dd8:	d021      	beq.n	8003e1e <model_mergex.constprop.9+0x9a>
	if (io->hook.io == NULL)
 8003dda:	f8da 3000 	ldr.w	r3, [sl]
 8003dde:	b31b      	cbz	r3, 8003e28 <model_mergex.constprop.9+0xa4>
 8003de0:	4655      	mov	r5, sl
 8003de2:	e000      	b.n	8003de6 <model_mergex.constprop.9+0x62>
		while (io->aux != NULL)
 8003de4:	461d      	mov	r5, r3
 8003de6:	68ab      	ldr	r3, [r5, #8]
 8003de8:	2b00      	cmp	r3, #0
 8003dea:	d1fb      	bne.n	8003de4 <model_mergex.constprop.9+0x60>
	void *p = nnom_malloc(size);
 8003dec:	2101      	movs	r1, #1
 8003dee:	201c      	movs	r0, #28
 8003df0:	f003 f9f4 	bl	80071dc <calloc>
	if (p)
 8003df4:	b190      	cbz	r0, 8003e1c <model_mergex.constprop.9+0x98>
		nnom_memory_taken += size; //test
 8003df6:	f8db 3000 	ldr.w	r3, [fp]
		io->aux->owner = io->owner;
 8003dfa:	696a      	ldr	r2, [r5, #20]
		io->aux = nnom_mem(sizeof(nnom_layer_io_t));
 8003dfc:	60a8      	str	r0, [r5, #8]
		nnom_memory_taken += size; //test
 8003dfe:	331c      	adds	r3, #28
		io->aux->owner = io->owner;
 8003e00:	6142      	str	r2, [r0, #20]
		nnom_memory_taken += size; //test
 8003e02:	f8cb 3000 	str.w	r3, [fp]
		method_in_io->hook.io = in_layer->out;
 8003e06:	69fb      	ldr	r3, [r7, #28]
		output_io_hook->io = method_in_io;
 8003e08:	6020      	str	r0, [r4, #0]
	for (int i = 0; i < num; i++)
 8003e0a:	4546      	cmp	r6, r8
		method_in_io->hook.io = in_layer->out;
 8003e0c:	6003      	str	r3, [r0, #0]
	for (int i = 0; i < num; i++)
 8003e0e:	d1c7      	bne.n	8003da0 <model_mergex.constprop.9+0x1c>
}
 8003e10:	4648      	mov	r0, r9
 8003e12:	b002      	add	sp, #8
 8003e14:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e18:	b003      	add	sp, #12
 8003e1a:	4770      	bx	lr
		io->aux = nnom_mem(sizeof(nnom_layer_io_t));
 8003e1c:	60a8      	str	r0, [r5, #8]
		output_io_hook->io = method_in_io;
 8003e1e:	2300      	movs	r3, #0
		method_in_io->hook.io = in_layer->out;
 8003e20:	69fa      	ldr	r2, [r7, #28]
		output_io_hook->io = method_in_io;
 8003e22:	6023      	str	r3, [r4, #0]
		method_in_io->hook.io = in_layer->out;
 8003e24:	601a      	str	r2, [r3, #0]
 8003e26:	deff      	udf	#255	; 0xff
	if (io->hook.io == NULL)
 8003e28:	4650      	mov	r0, sl
 8003e2a:	e7ec      	b.n	8003e06 <model_mergex.constprop.9+0x82>
		hook->next = nnom_mem(sizeof(nnom_layer_hook_t));
 8003e2c:	6060      	str	r0, [r4, #4]
			return NULL;
 8003e2e:	4604      	mov	r4, r0
 8003e30:	e7d0      	b.n	8003dd4 <model_mergex.constprop.9+0x50>
 8003e32:	bf00      	nop
 8003e34:	200006b8 	.word	0x200006b8

08003e38 <model_merge>:
	return model_mergex(method, 2, in1, in2);
 8003e38:	4613      	mov	r3, r2
 8003e3a:	460a      	mov	r2, r1
 8003e3c:	2102      	movs	r1, #2
 8003e3e:	f7ff bfa1 	b.w	8003d84 <model_mergex.constprop.9>
 8003e42:	bf00      	nop

08003e44 <model_mergex>:
{
 8003e44:	b40e      	push	{r1, r2, r3}
 8003e46:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e4a:	b084      	sub	sp, #16
 8003e4c:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
	if (method == NULL)
 8003e50:	9001      	str	r0, [sp, #4]
 8003e52:	2800      	cmp	r0, #0
 8003e54:	d045      	beq.n	8003ee2 <model_mergex+0x9e>
	va_start(valist, num);
 8003e56:	ad0e      	add	r5, sp, #56	; 0x38
	for (int i = 0; i < num; i++)
 8003e58:	f1b8 0f00 	cmp.w	r8, #0
	va_start(valist, num);
 8003e5c:	9503      	str	r5, [sp, #12]
	for (int i = 0; i < num; i++)
 8003e5e:	dd40      	ble.n	8003ee2 <model_mergex+0x9e>
 8003e60:	f8d0 a018 	ldr.w	sl, [r0, #24]
		nnom_memory_taken += size; //test
 8003e64:	f8df b0a0 	ldr.w	fp, [pc, #160]	; 8003f08 <model_mergex+0xc4>
	for (int i = 0; i < num; i++)
 8003e68:	2700      	movs	r7, #0
		in_layer = va_arg(valist, nnom_layer_t *);
 8003e6a:	3504      	adds	r5, #4
 8003e6c:	f855 6c04 	ldr.w	r6, [r5, #-4]
 8003e70:	9503      	str	r5, [sp, #12]
		output_io_hook = allocate_hook(in_layer->out);
 8003e72:	69f4      	ldr	r4, [r6, #28]
	if (io == NULL)
 8003e74:	b19c      	cbz	r4, 8003e9e <model_mergex+0x5a>
	if (hook->io == NULL)
 8003e76:	6823      	ldr	r3, [r4, #0]
 8003e78:	b90b      	cbnz	r3, 8003e7e <model_mergex+0x3a>
 8003e7a:	e010      	b.n	8003e9e <model_mergex+0x5a>
		while (hook->next != NULL)
 8003e7c:	461c      	mov	r4, r3
 8003e7e:	6863      	ldr	r3, [r4, #4]
 8003e80:	2b00      	cmp	r3, #0
 8003e82:	d1fb      	bne.n	8003e7c <model_mergex+0x38>
	void *p = nnom_malloc(size);
 8003e84:	2101      	movs	r1, #1
 8003e86:	2008      	movs	r0, #8
 8003e88:	f003 f9a8 	bl	80071dc <calloc>
	if (p)
 8003e8c:	2800      	cmp	r0, #0
 8003e8e:	d037      	beq.n	8003f00 <model_mergex+0xbc>
		nnom_memory_taken += size; //test
 8003e90:	f8db 3000 	ldr.w	r3, [fp]
		hook->next = nnom_mem(sizeof(nnom_layer_hook_t));
 8003e94:	6060      	str	r0, [r4, #4]
		nnom_memory_taken += size; //test
 8003e96:	3308      	adds	r3, #8
		hook->next = nnom_mem(sizeof(nnom_layer_hook_t));
 8003e98:	4604      	mov	r4, r0
		nnom_memory_taken += size; //test
 8003e9a:	f8cb 3000 	str.w	r3, [fp]
	if (io == NULL)
 8003e9e:	f1ba 0f00 	cmp.w	sl, #0
 8003ea2:	d026      	beq.n	8003ef2 <model_mergex+0xae>
	if (io->hook.io == NULL)
 8003ea4:	f8da 3000 	ldr.w	r3, [sl]
 8003ea8:	b343      	cbz	r3, 8003efc <model_mergex+0xb8>
 8003eaa:	46d1      	mov	r9, sl
 8003eac:	e000      	b.n	8003eb0 <model_mergex+0x6c>
		while (io->aux != NULL)
 8003eae:	4699      	mov	r9, r3
 8003eb0:	f8d9 3008 	ldr.w	r3, [r9, #8]
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d1fa      	bne.n	8003eae <model_mergex+0x6a>
	void *p = nnom_malloc(size);
 8003eb8:	2101      	movs	r1, #1
 8003eba:	201c      	movs	r0, #28
 8003ebc:	f003 f98e 	bl	80071dc <calloc>
	if (p)
 8003ec0:	b1a8      	cbz	r0, 8003eee <model_mergex+0xaa>
		nnom_memory_taken += size; //test
 8003ec2:	f8db 3000 	ldr.w	r3, [fp]
		io->aux->owner = io->owner;
 8003ec6:	f8d9 2014 	ldr.w	r2, [r9, #20]
		io->aux = nnom_mem(sizeof(nnom_layer_io_t));
 8003eca:	f8c9 0008 	str.w	r0, [r9, #8]
		nnom_memory_taken += size; //test
 8003ece:	331c      	adds	r3, #28
		io->aux->owner = io->owner;
 8003ed0:	6142      	str	r2, [r0, #20]
		nnom_memory_taken += size; //test
 8003ed2:	f8cb 3000 	str.w	r3, [fp]
	for (int i = 0; i < num; i++)
 8003ed6:	3701      	adds	r7, #1
		method_in_io->hook.io = in_layer->out;
 8003ed8:	69f3      	ldr	r3, [r6, #28]
		output_io_hook->io = method_in_io;
 8003eda:	6020      	str	r0, [r4, #0]
	for (int i = 0; i < num; i++)
 8003edc:	45b8      	cmp	r8, r7
		method_in_io->hook.io = in_layer->out;
 8003ede:	6003      	str	r3, [r0, #0]
	for (int i = 0; i < num; i++)
 8003ee0:	d1c3      	bne.n	8003e6a <model_mergex+0x26>
}
 8003ee2:	9801      	ldr	r0, [sp, #4]
 8003ee4:	b004      	add	sp, #16
 8003ee6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003eea:	b003      	add	sp, #12
 8003eec:	4770      	bx	lr
		io->aux = nnom_mem(sizeof(nnom_layer_io_t));
 8003eee:	f8c9 0008 	str.w	r0, [r9, #8]
		output_io_hook->io = method_in_io;
 8003ef2:	2300      	movs	r3, #0
		method_in_io->hook.io = in_layer->out;
 8003ef4:	69f2      	ldr	r2, [r6, #28]
		output_io_hook->io = method_in_io;
 8003ef6:	6023      	str	r3, [r4, #0]
		method_in_io->hook.io = in_layer->out;
 8003ef8:	601a      	str	r2, [r3, #0]
 8003efa:	deff      	udf	#255	; 0xff
	if (io->hook.io == NULL)
 8003efc:	4650      	mov	r0, sl
 8003efe:	e7ea      	b.n	8003ed6 <model_mergex+0x92>
		hook->next = nnom_mem(sizeof(nnom_layer_hook_t));
 8003f00:	6060      	str	r0, [r4, #4]
			return NULL;
 8003f02:	4604      	mov	r4, r0
 8003f04:	e7cb      	b.n	8003e9e <model_mergex+0x5a>
 8003f06:	bf00      	nop
 8003f08:	200006b8 	.word	0x200006b8

08003f0c <model_hook>:
{
 8003f0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (last == NULL || curr == NULL)
 8003f0e:	2900      	cmp	r1, #0
 8003f10:	d03b      	beq.n	8003f8a <model_hook+0x7e>
 8003f12:	4607      	mov	r7, r0
 8003f14:	b1d8      	cbz	r0, 8003f4e <model_hook+0x42>
	last_io_hook = allocate_hook(last->out);
 8003f16:	69ce      	ldr	r6, [r1, #28]
	if (io == NULL)
 8003f18:	2e00      	cmp	r6, #0
 8003f1a:	d038      	beq.n	8003f8e <model_hook+0x82>
	if (hook->io == NULL)
 8003f1c:	6833      	ldr	r3, [r6, #0]
	hook = &io->hook;
 8003f1e:	4634      	mov	r4, r6
	if (hook->io == NULL)
 8003f20:	b90b      	cbnz	r3, 8003f26 <model_hook+0x1a>
 8003f22:	e00e      	b.n	8003f42 <model_hook+0x36>
		while (hook->next != NULL)
 8003f24:	461c      	mov	r4, r3
 8003f26:	6863      	ldr	r3, [r4, #4]
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d1fb      	bne.n	8003f24 <model_hook+0x18>
	void *p = nnom_malloc(size);
 8003f2c:	2101      	movs	r1, #1
 8003f2e:	2008      	movs	r0, #8
 8003f30:	f003 f954 	bl	80071dc <calloc>
	if (p)
 8003f34:	b330      	cbz	r0, 8003f84 <model_hook+0x78>
		nnom_memory_taken += size; //test
 8003f36:	4a17      	ldr	r2, [pc, #92]	; (8003f94 <model_hook+0x88>)
		hook->next = nnom_mem(sizeof(nnom_layer_hook_t));
 8003f38:	6060      	str	r0, [r4, #4]
		nnom_memory_taken += size; //test
 8003f3a:	6813      	ldr	r3, [r2, #0]
 8003f3c:	3308      	adds	r3, #8
		hook->next = nnom_mem(sizeof(nnom_layer_hook_t));
 8003f3e:	4604      	mov	r4, r0
		nnom_memory_taken += size; //test
 8003f40:	6013      	str	r3, [r2, #0]
	curr_in_io = allocate_io(curr->in);
 8003f42:	69bd      	ldr	r5, [r7, #24]
	if (io == NULL)
 8003f44:	b1d5      	cbz	r5, 8003f7c <model_hook+0x70>
	if (io->hook.io == NULL)
 8003f46:	682b      	ldr	r3, [r5, #0]
 8003f48:	b923      	cbnz	r3, 8003f54 <model_hook+0x48>
	last_io_hook->io = curr_in_io;
 8003f4a:	6025      	str	r5, [r4, #0]
	curr_in_io->hook.io = last->out;
 8003f4c:	602e      	str	r6, [r5, #0]
}
 8003f4e:	4638      	mov	r0, r7
 8003f50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		while (io->aux != NULL)
 8003f52:	461d      	mov	r5, r3
 8003f54:	68ab      	ldr	r3, [r5, #8]
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d1fb      	bne.n	8003f52 <model_hook+0x46>
	void *p = nnom_malloc(size);
 8003f5a:	2101      	movs	r1, #1
 8003f5c:	201c      	movs	r0, #28
 8003f5e:	f003 f93d 	bl	80071dc <calloc>
	if (p)
 8003f62:	b150      	cbz	r0, 8003f7a <model_hook+0x6e>
		nnom_memory_taken += size; //test
 8003f64:	4a0b      	ldr	r2, [pc, #44]	; (8003f94 <model_hook+0x88>)
		io->aux->owner = io->owner;
 8003f66:	6969      	ldr	r1, [r5, #20]
		nnom_memory_taken += size; //test
 8003f68:	6813      	ldr	r3, [r2, #0]
		io->aux = nnom_mem(sizeof(nnom_layer_io_t));
 8003f6a:	60a8      	str	r0, [r5, #8]
		io->aux->owner = io->owner;
 8003f6c:	4605      	mov	r5, r0
		nnom_memory_taken += size; //test
 8003f6e:	331c      	adds	r3, #28
		io->aux->owner = io->owner;
 8003f70:	6141      	str	r1, [r0, #20]
		nnom_memory_taken += size; //test
 8003f72:	6013      	str	r3, [r2, #0]
	last_io_hook->io = curr_in_io;
 8003f74:	6025      	str	r5, [r4, #0]
	curr_in_io->hook.io = last->out;
 8003f76:	602e      	str	r6, [r5, #0]
 8003f78:	e7e9      	b.n	8003f4e <model_hook+0x42>
		io->aux = nnom_mem(sizeof(nnom_layer_io_t));
 8003f7a:	60a8      	str	r0, [r5, #8]
	last_io_hook->io = curr_in_io;
 8003f7c:	2300      	movs	r3, #0
 8003f7e:	6023      	str	r3, [r4, #0]
	curr_in_io->hook.io = last->out;
 8003f80:	601e      	str	r6, [r3, #0]
 8003f82:	deff      	udf	#255	; 0xff
		hook->next = nnom_mem(sizeof(nnom_layer_hook_t));
 8003f84:	6060      	str	r0, [r4, #4]
			return NULL;
 8003f86:	4604      	mov	r4, r0
 8003f88:	e7db      	b.n	8003f42 <model_hook+0x36>
		return NULL;
 8003f8a:	460f      	mov	r7, r1
 8003f8c:	e7df      	b.n	8003f4e <model_hook+0x42>
		return NULL;
 8003f8e:	4634      	mov	r4, r6
 8003f90:	e7d7      	b.n	8003f42 <model_hook+0x36>
 8003f92:	bf00      	nop
 8003f94:	200006b8 	.word	0x200006b8

08003f98 <nnom_mem>:
	if (value % alignment == 0)
 8003f98:	f010 0303 	ands.w	r3, r0, #3
{
 8003f9c:	b510      	push	{r4, lr}
 8003f9e:	4604      	mov	r4, r0
	value += alignment - value % alignment;
 8003fa0:	bf1c      	itt	ne
 8003fa2:	3404      	addne	r4, #4
 8003fa4:	1ae4      	subne	r4, r4, r3
	void *p = nnom_malloc(size);
 8003fa6:	2101      	movs	r1, #1
 8003fa8:	4620      	mov	r0, r4
 8003faa:	f003 f917 	bl	80071dc <calloc>
	if (p)
 8003fae:	b118      	cbz	r0, 8003fb8 <nnom_mem+0x20>
		nnom_memory_taken += size; //test
 8003fb0:	4a02      	ldr	r2, [pc, #8]	; (8003fbc <nnom_mem+0x24>)
 8003fb2:	6813      	ldr	r3, [r2, #0]
 8003fb4:	441c      	add	r4, r3
 8003fb6:	6014      	str	r4, [r2, #0]
}
 8003fb8:	bd10      	pop	{r4, pc}
 8003fba:	bf00      	nop
 8003fbc:	200006b8 	.word	0x200006b8

08003fc0 <nnom_alignto>:
	if (value % alignment == 0)
 8003fc0:	fbb0 f3f1 	udiv	r3, r0, r1
 8003fc4:	fb01 0313 	mls	r3, r1, r3, r0
 8003fc8:	b10b      	cbz	r3, 8003fce <nnom_alignto+0xe>
 8003fca:	4408      	add	r0, r1
	value += alignment - value % alignment;
 8003fcc:	1ac0      	subs	r0, r0, r3
}
 8003fce:	4770      	bx	lr

08003fd0 <new_model>:

// when model=NULL, it create a new sequential model
nnom_model_t *new_model(nnom_model_t *model)
{
 8003fd0:	b538      	push	{r3, r4, r5, lr}
	nnom_model_t *m = model;
	if (m == NULL)
 8003fd2:	b198      	cbz	r0, 8003ffc <new_model+0x2c>
 8003fd4:	4604      	mov	r4, r0
		m = nnom_mem(sizeof(nnom_model_t));
		m->is_alloc = true;
	}
	else
	{
		memset(m, 0, sizeof(nnom_model_t));
 8003fd6:	2288      	movs	r2, #136	; 0x88
 8003fd8:	2100      	movs	r1, #0
 8003fda:	f003 f965 	bl	80072a8 <memset>
		m->is_alloc = false;
 8003fde:	2300      	movs	r3, #0
 8003fe0:	f884 3085 	strb.w	r3, [r4, #133]	; 0x85
 8003fe4:	4620      	mov	r0, r4
	}

	// set methods
	m->add = model_add;
 8003fe6:	4d0c      	ldr	r5, [pc, #48]	; (8004018 <new_model+0x48>)
	m->hook = model_hook;
 8003fe8:	4c0c      	ldr	r4, [pc, #48]	; (800401c <new_model+0x4c>)
	m->merge = model_merge;
 8003fea:	490d      	ldr	r1, [pc, #52]	; (8004020 <new_model+0x50>)
	m->mergex = model_mergex;
 8003fec:	4a0d      	ldr	r2, [pc, #52]	; (8004024 <new_model+0x54>)
	m->active = model_active;
 8003fee:	4b0e      	ldr	r3, [pc, #56]	; (8004028 <new_model+0x58>)
 8003ff0:	6183      	str	r3, [r0, #24]
	m->hook = model_hook;
 8003ff2:	e9c0 5402 	strd	r5, r4, [r0, #8]
	m->mergex = model_mergex;
 8003ff6:	e9c0 1204 	strd	r1, r2, [r0, #16]

	return m;
}
 8003ffa:	bd38      	pop	{r3, r4, r5, pc}
	void *p = nnom_malloc(size);
 8003ffc:	2101      	movs	r1, #1
 8003ffe:	2088      	movs	r0, #136	; 0x88
 8004000:	f003 f8ec 	bl	80071dc <calloc>
	if (p)
 8004004:	b118      	cbz	r0, 800400e <new_model+0x3e>
		nnom_memory_taken += size; //test
 8004006:	4a09      	ldr	r2, [pc, #36]	; (800402c <new_model+0x5c>)
 8004008:	6813      	ldr	r3, [r2, #0]
 800400a:	3388      	adds	r3, #136	; 0x88
 800400c:	6013      	str	r3, [r2, #0]
		m->is_alloc = true;
 800400e:	2301      	movs	r3, #1
 8004010:	f880 3085 	strb.w	r3, [r0, #133]	; 0x85
 8004014:	e7e7      	b.n	8003fe6 <new_model+0x16>
 8004016:	bf00      	nop
 8004018:	08003d51 	.word	0x08003d51
 800401c:	08003f0d 	.word	0x08003f0d
 8004020:	08003e39 	.word	0x08003e39
 8004024:	08003e45 	.word	0x08003e45
 8004028:	08003d49 	.word	0x08003d49
 800402c:	200006b8 	.word	0x200006b8

08004030 <compile_layers>:
// This function will return when
// 	1) if the layer has multiple input but not all of them are filled by last layers. returns NN_MORE_TODO
//	2) if all the output hooked are nested called. return NN_SUCCESS
//	3) if the layer is output layer. return NN_SUCCESS
nnom_status_t compile_layers(nnom_layer_t *start, nnom_mem_block_t *block_pool, uint32_t *layer_count)
{
 8004030:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004034:	b087      	sub	sp, #28
	nnom_layer_hook_t *hook;

	nnom_mem_block_t *in_blk;
	nnom_mem_block_t *out_blk;
	
	uint32_t local_layer_count = 1;
 8004036:	2301      	movs	r3, #1
{
 8004038:	9002      	str	r0, [sp, #8]
 800403a:	460d      	mov	r5, r1
	uint32_t local_layer_count = 1;
 800403c:	9305      	str	r3, [sp, #20]
	
	if(layer_count == NULL)
 800403e:	2a00      	cmp	r2, #0
 8004040:	f000 826f 	beq.w	8004522 <compile_layers+0x4f2>
 8004044:	4693      	mov	fp, r2
		layer_count = &local_layer_count;

	in = layer->in;
	out = layer->out;

	while (layer)
 8004046:	9b02      	ldr	r3, [sp, #8]
 8004048:	2b00      	cmp	r3, #0
 800404a:	f000 813d 	beq.w	80042c8 <compile_layers+0x298>
 800404e:	461c      	mov	r4, r3
 8004050:	f8cd b00c 	str.w	fp, [sp, #12]
	{
		// check input
		in = layer->in;
 8004054:	69a6      	ldr	r6, [r4, #24]

		// check if this layer is the input layer
		// the first layer has no input hooked, and the io is not initialized
		if (in->hook.io == NULL)
 8004056:	6832      	ldr	r2, [r6, #0]
 8004058:	2a00      	cmp	r2, #0
 800405a:	f000 8141 	beq.w	80042e0 <compile_layers+0x2b0>
 800405e:	4633      	mov	r3, r6
 8004060:	e000      	b.n	8004064 <compile_layers+0x34>
 8004062:	681a      	ldr	r2, [r3, #0]
		else
		{
			// get the mem for every input from its hooked output. 
			while (in != NULL)
			{
				in->mem = in->hook.io->mem;
 8004064:	6912      	ldr	r2, [r2, #16]
 8004066:	611a      	str	r2, [r3, #16]
				in = in->aux;
 8004068:	689b      	ldr	r3, [r3, #8]
			while (in != NULL)
 800406a:	2b00      	cmp	r3, #0
 800406c:	d1f9      	bne.n	8004062 <compile_layers+0x32>
			}
		}

		// if there are mutiple inputs, wait utill all blocks filled
		in = layer->in;
		if (in != NULL && in->aux != NULL)
 800406e:	68b3      	ldr	r3, [r6, #8]
 8004070:	b153      	cbz	r3, 8004088 <compile_layers+0x58>
		{
			while (in != NULL)
			{
				// if the mem (of its hooked output) is not allocated or is not filled. 
				// It not the time to run the layer yet, return and waits for next nested called. 
				if (in->mem == NULL || in->mem->state != NNOM_BUF_FILLED)
 8004072:	6933      	ldr	r3, [r6, #16]
 8004074:	2b00      	cmp	r3, #0
 8004076:	f000 824f 	beq.w	8004518 <compile_layers+0x4e8>
 800407a:	7a5b      	ldrb	r3, [r3, #9]
 800407c:	2b01      	cmp	r3, #1
 800407e:	f040 824b 	bne.w	8004518 <compile_layers+0x4e8>
					return NN_MORE_TODO;
				in = in->aux;
 8004082:	68b6      	ldr	r6, [r6, #8]
			while (in != NULL)
 8004084:	2e00      	cmp	r6, #0
 8004086:	d1f4      	bne.n	8004072 <compile_layers+0x42>
		// 4. allocate output buffer for each output module. 
		// 5.1 if there is only one layer hooked to the output. we dont use nested call, but continue in this big while loop. 
		// 5.2 nested call the hooked output layers (if there are > 1 hooked to the output of this layer)

		// 1. calculate output shape while all inputs are filled
		layer->build(layer);
 8004088:	6863      	ldr	r3, [r4, #4]
 800408a:	4620      	mov	r0, r4
 800408c:	4798      	blx	r3
	if (start == curr)
 800408e:	9b02      	ldr	r3, [sp, #8]
 8004090:	42a3      	cmp	r3, r4
 8004092:	d103      	bne.n	800409c <compile_layers+0x6c>
 8004094:	e006      	b.n	80040a4 <compile_layers+0x74>
		if (curr == layer)
 8004096:	42a3      	cmp	r3, r4
 8004098:	d004      	beq.n	80040a4 <compile_layers+0x74>
 800409a:	4613      	mov	r3, r2
	while (layer->shortcut != NULL)
 800409c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800409e:	2a00      	cmp	r2, #0
 80040a0:	d1f9      	bne.n	8004096 <compile_layers+0x66>
	layer->shortcut = curr;
 80040a2:	629c      	str	r4, [r3, #40]	; 0x28

		// 2. add to shortcut list. 
		layer_shortcut_add(start, layer);

		// 3. assign for computational buf
		if (layer->comp != NULL)
 80040a4:	68e0      	ldr	r0, [r4, #12]
 80040a6:	2800      	cmp	r0, #0
 80040a8:	d03d      	beq.n	8004126 <compile_layers+0xf6>
		if (list[idx].owners == 0)
 80040aa:	7a2b      	ldrb	r3, [r5, #8]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	f000 823b 	beq.w	8004528 <compile_layers+0x4f8>
 80040b2:	7d2b      	ldrb	r3, [r5, #20]
 80040b4:	f105 020c 	add.w	r2, r5, #12
 80040b8:	b30b      	cbz	r3, 80040fe <compile_layers+0xce>
 80040ba:	f895 3020 	ldrb.w	r3, [r5, #32]
 80040be:	f105 0218 	add.w	r2, r5, #24
 80040c2:	b1e3      	cbz	r3, 80040fe <compile_layers+0xce>
 80040c4:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
 80040c8:	f105 0224 	add.w	r2, r5, #36	; 0x24
 80040cc:	b1bb      	cbz	r3, 80040fe <compile_layers+0xce>
 80040ce:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
 80040d2:	f105 0230 	add.w	r2, r5, #48	; 0x30
 80040d6:	b193      	cbz	r3, 80040fe <compile_layers+0xce>
 80040d8:	f895 3044 	ldrb.w	r3, [r5, #68]	; 0x44
 80040dc:	f105 023c 	add.w	r2, r5, #60	; 0x3c
 80040e0:	b16b      	cbz	r3, 80040fe <compile_layers+0xce>
 80040e2:	f895 3050 	ldrb.w	r3, [r5, #80]	; 0x50
 80040e6:	f105 0248 	add.w	r2, r5, #72	; 0x48
 80040ea:	b143      	cbz	r3, 80040fe <compile_layers+0xce>
 80040ec:	f895 305c 	ldrb.w	r3, [r5, #92]	; 0x5c
 80040f0:	f105 0254 	add.w	r2, r5, #84	; 0x54
 80040f4:	b11b      	cbz	r3, 80040fe <compile_layers+0xce>
 80040f6:	f895 3068 	ldrb.w	r3, [r5, #104]	; 0x68
 80040fa:	f105 0260 	add.w	r2, r5, #96	; 0x60
		//if (shape_size(&layer->comp->shape) > 0)
		{
			layer->comp->mem = allocate_block(block_pool);
			layer->comp->mem->owners += 1; // add us to buffer users
 80040fe:	3301      	adds	r3, #1
			layer->comp->mem->state = NNOM_BUF_FILLED;
 8004100:	2101      	movs	r1, #1
			layer->comp->mem = allocate_block(block_pool);
 8004102:	f840 2b04 	str.w	r2, [r0], #4
			layer->comp->mem->owners += 1; // add us to buffer users
 8004106:	7213      	strb	r3, [r2, #8]
			layer->comp->mem->state = NNOM_BUF_FILLED;
 8004108:	7251      	strb	r1, [r2, #9]
			// record maximum mem size in this block
			mem_size = nnom_alignto(shape_size(&layer->comp->shape), 4);
 800410a:	f000 ff95 	bl	8005038 <shape_size>
	if (value % alignment == 0)
 800410e:	f010 0303 	ands.w	r3, r0, #3
	value += alignment - value % alignment;
 8004112:	bf1c      	itt	ne
 8004114:	3004      	addne	r0, #4
 8004116:	1ac0      	subne	r0, r0, r3
			layer->comp->mem->size =
				mem_size > layer->comp->mem->size ? mem_size : layer->comp->mem->size;
 8004118:	68e3      	ldr	r3, [r4, #12]
 800411a:	681a      	ldr	r2, [r3, #0]
 800411c:	6853      	ldr	r3, [r2, #4]
 800411e:	4298      	cmp	r0, r3
 8004120:	bf38      	it	cc
 8004122:	4618      	movcc	r0, r3
			layer->comp->mem->size =
 8004124:	6050      	str	r0, [r2, #4]
		}

		// print current layer's info. 
		// show names, activations, mem block size
		print_layer_info(layer, (*layer_count)++);
 8004126:	9a03      	ldr	r2, [sp, #12]
	size_t in_size = io_mem_size(layer->in);
 8004128:	69a7      	ldr	r7, [r4, #24]
		print_layer_info(layer, (*layer_count)++);
 800412a:	f8d2 a000 	ldr.w	sl, [r2]
 800412e:	f10a 0301 	add.w	r3, sl, #1
 8004132:	6013      	str	r3, [r2, #0]
	if (io != NULL)
 8004134:	2f00      	cmp	r7, #0
 8004136:	f000 8121 	beq.w	800437c <compile_layers+0x34c>
	size_t size = 0;
 800413a:	2600      	movs	r6, #0
			size += tensor_size(io->tensor);
 800413c:	68f8      	ldr	r0, [r7, #12]
 800413e:	f001 f99d 	bl	800547c <tensor_size>
			io = io->aux;
 8004142:	68bf      	ldr	r7, [r7, #8]
			size += tensor_size(io->tensor);
 8004144:	4406      	add	r6, r0
		while (io)
 8004146:	2f00      	cmp	r7, #0
 8004148:	d1f8      	bne.n	800413c <compile_layers+0x10c>
	size_t out_size = io_mem_size(layer->out);
 800414a:	f8d4 801c 	ldr.w	r8, [r4, #28]
	if (io != NULL)
 800414e:	f1b8 0f00 	cmp.w	r8, #0
 8004152:	f000 810a 	beq.w	800436a <compile_layers+0x33a>
	size_t size = 0;
 8004156:	4643      	mov	r3, r8
 8004158:	2700      	movs	r7, #0
 800415a:	46a0      	mov	r8, r4
 800415c:	461c      	mov	r4, r3
			size += tensor_size(io->tensor);
 800415e:	68e0      	ldr	r0, [r4, #12]
 8004160:	f001 f98c 	bl	800547c <tensor_size>
			io = io->aux;
 8004164:	68a4      	ldr	r4, [r4, #8]
			size += tensor_size(io->tensor);
 8004166:	4407      	add	r7, r0
		while (io)
 8004168:	2c00      	cmp	r4, #0
 800416a:	d1f8      	bne.n	800415e <compile_layers+0x12e>
 800416c:	4644      	mov	r4, r8
	if (layer->comp != NULL)
 800416e:	68e0      	ldr	r0, [r4, #12]
	size_t mac = layer->stat.macc;
 8004170:	f8d4 8020 	ldr.w	r8, [r4, #32]
	if (layer->comp != NULL)
 8004174:	2800      	cmp	r0, #0
 8004176:	f000 80ff 	beq.w	8004378 <compile_layers+0x348>
		compsize = shape_size(&layer->comp->shape);
 800417a:	3004      	adds	r0, #4
 800417c:	f000 ff5c 	bl	8005038 <shape_size>
 8004180:	9001      	str	r0, [sp, #4]
	NNOM_LOG("#%-3d %-10s - ", layer_count, default_layer_names[layer->type]);
 8004182:	7d23      	ldrb	r3, [r4, #20]
 8004184:	4aa9      	ldr	r2, [pc, #676]	; (800442c <compile_layers+0x3fc>)
 8004186:	48aa      	ldr	r0, [pc, #680]	; (8004430 <compile_layers+0x400>)
 8004188:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 800418c:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8004190:	4651      	mov	r1, sl
 8004192:	f003 fda3 	bl	8007cdc <iprintf>
	if (layer->actail != NULL)
 8004196:	6923      	ldr	r3, [r4, #16]
 8004198:	2b00      	cmp	r3, #0
 800419a:	f000 80f7 	beq.w	800438c <compile_layers+0x35c>
		NNOM_LOG("%-8s - ", default_activation_names[layer->actail->type]);
 800419e:	7b99      	ldrb	r1, [r3, #14]
 80041a0:	4ba4      	ldr	r3, [pc, #656]	; (8004434 <compile_layers+0x404>)
 80041a2:	48a5      	ldr	r0, [pc, #660]	; (8004438 <compile_layers+0x408>)
 80041a4:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
 80041a8:	f003 fd98 	bl	8007cdc <iprintf>
	NNOM_LOG("(");
 80041ac:	2028      	movs	r0, #40	; 0x28
 80041ae:	f003 fdad 	bl	8007d0c <putchar>
			NNOM_LOG("     ");
 80041b2:	f8df b2b0 	ldr.w	fp, [pc, #688]	; 8004464 <compile_layers+0x434>
			NNOM_LOG("%4d,", layer->out->tensor->dim[i]);
 80041b6:	f8df a2b0 	ldr.w	sl, [pc, #688]	; 8004468 <compile_layers+0x438>
	for (int i = 0; i < 3; i++)
 80041ba:	f04f 0900 	mov.w	r9, #0
		if (layer->out->tensor->num_dim > i)
 80041be:	69e3      	ldr	r3, [r4, #28]
 80041c0:	68db      	ldr	r3, [r3, #12]
 80041c2:	7a1a      	ldrb	r2, [r3, #8]
 80041c4:	454a      	cmp	r2, r9
			NNOM_LOG("%4d,", layer->out->tensor->dim[i]);
 80041c6:	4650      	mov	r0, sl
		if (layer->out->tensor->num_dim > i)
 80041c8:	f340 8086 	ble.w	80042d8 <compile_layers+0x2a8>
			NNOM_LOG("%4d,", layer->out->tensor->dim[i]);
 80041cc:	685b      	ldr	r3, [r3, #4]
 80041ce:	f833 1019 	ldrh.w	r1, [r3, r9, lsl #1]
 80041d2:	f003 fd83 	bl	8007cdc <iprintf>
	for (int i = 0; i < 3; i++)
 80041d6:	f109 0901 	add.w	r9, r9, #1
 80041da:	f1b9 0f03 	cmp.w	r9, #3
 80041de:	d1ee      	bne.n	80041be <compile_layers+0x18e>
	NNOM_LOG(")  ");
 80041e0:	4896      	ldr	r0, [pc, #600]	; (800443c <compile_layers+0x40c>)
 80041e2:	f003 fd7b 	bl	8007cdc <iprintf>
	if(mac == 0)
 80041e6:	f1b8 0f00 	cmp.w	r8, #0
 80041ea:	f000 80d3 	beq.w	8004394 <compile_layers+0x364>
	else if (mac < 10000)
 80041ee:	f242 730f 	movw	r3, #9999	; 0x270f
 80041f2:	4598      	cmp	r8, r3
 80041f4:	f240 8170 	bls.w	80044d8 <compile_layers+0x4a8>
	else if (mac < 1000*1000)
 80041f8:	4b91      	ldr	r3, [pc, #580]	; (8004440 <compile_layers+0x410>)
 80041fa:	4598      	cmp	r8, r3
 80041fc:	f240 8184 	bls.w	8004508 <compile_layers+0x4d8>
	else if (mac < 1000*1000*1000)
 8004200:	4b90      	ldr	r3, [pc, #576]	; (8004444 <compile_layers+0x414>)
 8004202:	4598      	cmp	r8, r3
 8004204:	f240 816d 	bls.w	80044e2 <compile_layers+0x4b2>
		NNOM_LOG("%3d.%02dG ", mac/(1000*1000*1000), mac%(1000*1000*1000)/(10*1000*1000)); // xxx.xx G
 8004208:	4b8f      	ldr	r3, [pc, #572]	; (8004448 <compile_layers+0x418>)
 800420a:	4890      	ldr	r0, [pc, #576]	; (800444c <compile_layers+0x41c>)
 800420c:	ea4f 2158 	mov.w	r1, r8, lsr #9
 8004210:	fba3 3101 	umull	r3, r1, r3, r1
 8004214:	4b8e      	ldr	r3, [pc, #568]	; (8004450 <compile_layers+0x420>)
 8004216:	09c9      	lsrs	r1, r1, #7
 8004218:	fb03 8211 	mls	r2, r3, r1, r8
 800421c:	f103 533f 	add.w	r3, r3, #801112064	; 0x2fc00000
 8004220:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
 8004224:	336b      	adds	r3, #107	; 0x6b
 8004226:	fba3 3202 	umull	r3, r2, r3, r2
 800422a:	0d92      	lsrs	r2, r2, #22
 800422c:	f003 fd56 	bl	8007cdc <iprintf>
	NNOM_LOG("(%6d,%6d,%6d)", in_size, out_size, compsize);
 8004230:	4631      	mov	r1, r6
 8004232:	9b01      	ldr	r3, [sp, #4]
 8004234:	4887      	ldr	r0, [pc, #540]	; (8004454 <compile_layers+0x424>)
 8004236:	463a      	mov	r2, r7
 8004238:	f003 fd50 	bl	8007cdc <iprintf>

		// 4. allocate output buffer for each output module. 
		// check output
		if (layer->out == NULL)
 800423c:	69e6      	ldr	r6, [r4, #28]
 800423e:	2e00      	cmp	r6, #0
 8004240:	d042      	beq.n	80042c8 <compile_layers+0x298>
 8004242:	69a3      	ldr	r3, [r4, #24]
			return NN_SUCCESS;

		// 5.1 if there is only one layer hooked to the output. we dont use nested call, but continue in this big while loop. 
		// if the layer is Single Output, continue the loop directly. To reduce nested level
		if (layer->out->aux == NULL && layer->out->hook.next == NULL)
 8004244:	68b2      	ldr	r2, [r6, #8]
 8004246:	7e19      	ldrb	r1, [r3, #24]
 8004248:	2a00      	cmp	r2, #0
 800424a:	f040 816f 	bne.w	800452c <compile_layers+0x4fc>
 800424e:	6872      	ldr	r2, [r6, #4]
 8004250:	2a00      	cmp	r2, #0
 8004252:	f040 816b 	bne.w	800452c <compile_layers+0x4fc>
		{
			// single buf layer.
			if (layer->in->type == LAYER_BUF_NULL || layer->out->type == LAYER_BUF_NULL)
 8004256:	b119      	cbz	r1, 8004260 <compile_layers+0x230>
 8004258:	7e32      	ldrb	r2, [r6, #24]
 800425a:	2a00      	cmp	r2, #0
 800425c:	f040 809e 	bne.w	800439c <compile_layers+0x36c>
			{
				// pass to next layer directly, like we never touch the buffer(dont change life-time)
				layer->out->mem = layer->in->mem;
 8004260:	691b      	ldr	r3, [r3, #16]
 8004262:	6133      	str	r3, [r6, #16]
	NNOM_LOG("   ");
 8004264:	487c      	ldr	r0, [pc, #496]	; (8004458 <compile_layers+0x428>)
			NNOM_LOG("- ");
 8004266:	f8df 9204 	ldr.w	r9, [pc, #516]	; 800446c <compile_layers+0x43c>
			NNOM_LOG("%d ", block_pool[i].owners);
 800426a:	f8df 8204 	ldr.w	r8, [pc, #516]	; 8004470 <compile_layers+0x440>
	NNOM_LOG("   ");
 800426e:	f003 fd35 	bl	8007cdc <iprintf>
 8004272:	462f      	mov	r7, r5
	for (int i = 0; i < NNOM_BLOCK_NUM; i++)
 8004274:	2600      	movs	r6, #0
 8004276:	e006      	b.n	8004286 <compile_layers+0x256>
 8004278:	3601      	adds	r6, #1
			NNOM_LOG("%d ", block_pool[i].owners);
 800427a:	f003 fd2f 	bl	8007cdc <iprintf>
	for (int i = 0; i < NNOM_BLOCK_NUM; i++)
 800427e:	2e08      	cmp	r6, #8
 8004280:	f107 070c 	add.w	r7, r7, #12
 8004284:	d00e      	beq.n	80042a4 <compile_layers+0x274>
		if (i % 4 == 0)
 8004286:	07b0      	lsls	r0, r6, #30
 8004288:	d022      	beq.n	80042d0 <compile_layers+0x2a0>
		if (block_pool[i].owners)
 800428a:	7a3b      	ldrb	r3, [r7, #8]
			NNOM_LOG("%d ", block_pool[i].owners);
 800428c:	4640      	mov	r0, r8
 800428e:	4619      	mov	r1, r3
		if (block_pool[i].owners)
 8004290:	2b00      	cmp	r3, #0
 8004292:	d1f1      	bne.n	8004278 <compile_layers+0x248>
			NNOM_LOG("- ");
 8004294:	4648      	mov	r0, r9
	for (int i = 0; i < NNOM_BLOCK_NUM; i++)
 8004296:	3601      	adds	r6, #1
			NNOM_LOG("- ");
 8004298:	f003 fd20 	bl	8007cdc <iprintf>
	for (int i = 0; i < NNOM_BLOCK_NUM; i++)
 800429c:	2e08      	cmp	r6, #8
 800429e:	f107 070c 	add.w	r7, r7, #12
 80042a2:	d1f0      	bne.n	8004286 <compile_layers+0x256>
	NNOM_LOG("\n");
 80042a4:	200a      	movs	r0, #10
 80042a6:	f003 fd31 	bl	8007d0c <putchar>
				
				// print memory before release
				print_memory_block_info(block_pool);
				// computational buf
				release_comp_mem(layer);
 80042aa:	68e3      	ldr	r3, [r4, #12]
	if (layer->comp != NULL)
 80042ac:	b12b      	cbz	r3, 80042ba <compile_layers+0x28a>
		release_block(layer->comp->mem);
 80042ae:	681a      	ldr	r2, [r3, #0]
	if (block->owners > 0)
 80042b0:	7a13      	ldrb	r3, [r2, #8]
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d164      	bne.n	8004380 <compile_layers+0x350>
		block->state = NNOM_BUF_EMPTY;
 80042b6:	2300      	movs	r3, #0
 80042b8:	7253      	strb	r3, [r2, #9]
		}
		// Multiple output ended.

		// return if this is output layer.
		// the output layer's output io is hooked to nothing.
		if (layer->out->hook.io == NULL)
 80042ba:	69e3      	ldr	r3, [r4, #28]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	b11b      	cbz	r3, 80042c8 <compile_layers+0x298>
			return NN_SUCCESS;

		// single output layer, this function continue to analyse next layer.
		// switch to next layer.
		layer = layer->out->hook.io->owner;
 80042c0:	695c      	ldr	r4, [r3, #20]
	while (layer)
 80042c2:	2c00      	cmp	r4, #0
 80042c4:	f47f aec6 	bne.w	8004054 <compile_layers+0x24>
	}

	// seems to be redundants
	return NN_SUCCESS;
 80042c8:	2000      	movs	r0, #0
}
 80042ca:	b007      	add	sp, #28
 80042cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			NNOM_LOG(" ");
 80042d0:	2020      	movs	r0, #32
 80042d2:	f003 fd1b 	bl	8007d0c <putchar>
 80042d6:	e7d8      	b.n	800428a <compile_layers+0x25a>
			NNOM_LOG("     ");
 80042d8:	4658      	mov	r0, fp
 80042da:	f003 fcff 	bl	8007cdc <iprintf>
 80042de:	e77a      	b.n	80041d6 <compile_layers+0x1a6>
			if (in->mem == NULL)
 80042e0:	6933      	ldr	r3, [r6, #16]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	f47f aec3 	bne.w	800406e <compile_layers+0x3e>
		if (list[idx].owners == 0)
 80042e8:	7a2b      	ldrb	r3, [r5, #8]
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	f000 8225 	beq.w	800473a <compile_layers+0x70a>
 80042f0:	7d2b      	ldrb	r3, [r5, #20]
 80042f2:	f105 070c 	add.w	r7, r5, #12
 80042f6:	b30b      	cbz	r3, 800433c <compile_layers+0x30c>
 80042f8:	f895 3020 	ldrb.w	r3, [r5, #32]
 80042fc:	f105 0718 	add.w	r7, r5, #24
 8004300:	b1e3      	cbz	r3, 800433c <compile_layers+0x30c>
 8004302:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
 8004306:	f105 0724 	add.w	r7, r5, #36	; 0x24
 800430a:	b1bb      	cbz	r3, 800433c <compile_layers+0x30c>
 800430c:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
 8004310:	f105 0730 	add.w	r7, r5, #48	; 0x30
 8004314:	b193      	cbz	r3, 800433c <compile_layers+0x30c>
 8004316:	f895 3044 	ldrb.w	r3, [r5, #68]	; 0x44
 800431a:	f105 073c 	add.w	r7, r5, #60	; 0x3c
 800431e:	b16b      	cbz	r3, 800433c <compile_layers+0x30c>
 8004320:	f895 3050 	ldrb.w	r3, [r5, #80]	; 0x50
 8004324:	f105 0748 	add.w	r7, r5, #72	; 0x48
 8004328:	b143      	cbz	r3, 800433c <compile_layers+0x30c>
 800432a:	f895 305c 	ldrb.w	r3, [r5, #92]	; 0x5c
 800432e:	f105 0754 	add.w	r7, r5, #84	; 0x54
 8004332:	b11b      	cbz	r3, 800433c <compile_layers+0x30c>
 8004334:	f895 3068 	ldrb.w	r3, [r5, #104]	; 0x68
 8004338:	f105 0760 	add.w	r7, r5, #96	; 0x60
				in_blk->owners += 1; // add 1
 800433c:	3301      	adds	r3, #1
 800433e:	723b      	strb	r3, [r7, #8]
				mem_size = nnom_alignto(tensor_size(in->tensor), 4);
 8004340:	68f0      	ldr	r0, [r6, #12]
 8004342:	f001 f89b 	bl	800547c <tensor_size>
	if (value % alignment == 0)
 8004346:	f010 0303 	ands.w	r3, r0, #3
	value += alignment - value % alignment;
 800434a:	bf1c      	itt	ne
 800434c:	3004      	addne	r0, #4
 800434e:	1ac0      	subne	r0, r0, r3
				in_blk->size = mem_size > in_blk->size ? mem_size : in_blk->size;
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	4298      	cmp	r0, r3
 8004354:	bf38      	it	cc
 8004356:	4618      	movcc	r0, r3
				in->mem->state = NNOM_BUF_FILLED; //mark input buff filled
 8004358:	2301      	movs	r3, #1
				in_blk->size = mem_size > in_blk->size ? mem_size : in_blk->size;
 800435a:	6078      	str	r0, [r7, #4]
				in->mem = in_blk;
 800435c:	6137      	str	r7, [r6, #16]
				in->mem->state = NNOM_BUF_FILLED; //mark input buff filled
 800435e:	727b      	strb	r3, [r7, #9]
 8004360:	69a6      	ldr	r6, [r4, #24]
		if (in != NULL && in->aux != NULL)
 8004362:	2e00      	cmp	r6, #0
 8004364:	f43f ae90 	beq.w	8004088 <compile_layers+0x58>
 8004368:	e681      	b.n	800406e <compile_layers+0x3e>
	if (layer->comp != NULL)
 800436a:	68e0      	ldr	r0, [r4, #12]
	size_t size = 0;
 800436c:	4647      	mov	r7, r8
	size_t mac = layer->stat.macc;
 800436e:	f8d4 8020 	ldr.w	r8, [r4, #32]
	if (layer->comp != NULL)
 8004372:	2800      	cmp	r0, #0
 8004374:	f47f af01 	bne.w	800417a <compile_layers+0x14a>
		compsize = 0;
 8004378:	9001      	str	r0, [sp, #4]
 800437a:	e702      	b.n	8004182 <compile_layers+0x152>
	size_t size = 0;
 800437c:	463e      	mov	r6, r7
 800437e:	e6e4      	b.n	800414a <compile_layers+0x11a>
		block->owners -= 1;
 8004380:	3b01      	subs	r3, #1
 8004382:	b2db      	uxtb	r3, r3
 8004384:	7213      	strb	r3, [r2, #8]
	if (block->owners == 0)
 8004386:	2b00      	cmp	r3, #0
 8004388:	d197      	bne.n	80042ba <compile_layers+0x28a>
 800438a:	e794      	b.n	80042b6 <compile_layers+0x286>
		NNOM_LOG("         - ");
 800438c:	4833      	ldr	r0, [pc, #204]	; (800445c <compile_layers+0x42c>)
 800438e:	f003 fca5 	bl	8007cdc <iprintf>
 8004392:	e70b      	b.n	80041ac <compile_layers+0x17c>
		NNOM_LOG("        ");
 8004394:	4832      	ldr	r0, [pc, #200]	; (8004460 <compile_layers+0x430>)
 8004396:	f003 fca1 	bl	8007cdc <iprintf>
 800439a:	e749      	b.n	8004230 <compile_layers+0x200>
		if (list[idx].owners == 0)
 800439c:	7a2b      	ldrb	r3, [r5, #8]
 800439e:	2b00      	cmp	r3, #0
 80043a0:	f000 817e 	beq.w	80046a0 <compile_layers+0x670>
 80043a4:	7d2b      	ldrb	r3, [r5, #20]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	f000 817c 	beq.w	80046a4 <compile_layers+0x674>
 80043ac:	f895 3020 	ldrb.w	r3, [r5, #32]
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	f000 8179 	beq.w	80046a8 <compile_layers+0x678>
 80043b6:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
 80043ba:	2b00      	cmp	r3, #0
 80043bc:	f000 8176 	beq.w	80046ac <compile_layers+0x67c>
 80043c0:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	f000 8179 	beq.w	80046bc <compile_layers+0x68c>
 80043ca:	f895 3044 	ldrb.w	r3, [r5, #68]	; 0x44
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	f000 8176 	beq.w	80046c0 <compile_layers+0x690>
 80043d4:	f895 3050 	ldrb.w	r3, [r5, #80]	; 0x50
 80043d8:	2b00      	cmp	r3, #0
 80043da:	f000 8173 	beq.w	80046c4 <compile_layers+0x694>
 80043de:	f895 305c 	ldrb.w	r3, [r5, #92]	; 0x5c
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	bf14      	ite	ne
 80043e6:	2760      	movne	r7, #96	; 0x60
 80043e8:	2754      	moveq	r7, #84	; 0x54
				if (out_blk == NULL)
 80043ea:	19ef      	adds	r7, r5, r7
 80043ec:	f000 81a2 	beq.w	8004734 <compile_layers+0x704>
				out_blk->owners = 1;
 80043f0:	f240 1301 	movw	r3, #257	; 0x101
 80043f4:	813b      	strh	r3, [r7, #8]
				mem_size = nnom_alignto(tensor_size(layer->out->tensor), 4);
 80043f6:	68f0      	ldr	r0, [r6, #12]
			NNOM_LOG("- ");
 80043f8:	f8df 9070 	ldr.w	r9, [pc, #112]	; 800446c <compile_layers+0x43c>
			NNOM_LOG("%d ", block_pool[i].owners);
 80043fc:	f8df 8070 	ldr.w	r8, [pc, #112]	; 8004470 <compile_layers+0x440>
				mem_size = nnom_alignto(tensor_size(layer->out->tensor), 4);
 8004400:	f001 f83c 	bl	800547c <tensor_size>
 8004404:	4603      	mov	r3, r0
	if (value % alignment == 0)
 8004406:	f010 0203 	ands.w	r2, r0, #3
	value += alignment - value % alignment;
 800440a:	bf1c      	itt	ne
 800440c:	3304      	addne	r3, #4
 800440e:	1a9b      	subne	r3, r3, r2
				out_blk->size = mem_size > out_blk->size ? mem_size : out_blk->size;
 8004410:	687a      	ldr	r2, [r7, #4]
				layer->out->mem = out_blk;
 8004412:	69e1      	ldr	r1, [r4, #28]
	NNOM_LOG("   ");
 8004414:	4810      	ldr	r0, [pc, #64]	; (8004458 <compile_layers+0x428>)
				out_blk->size = mem_size > out_blk->size ? mem_size : out_blk->size;
 8004416:	4293      	cmp	r3, r2
 8004418:	bf38      	it	cc
 800441a:	4613      	movcc	r3, r2
 800441c:	607b      	str	r3, [r7, #4]
				layer->out->mem = out_blk;
 800441e:	610f      	str	r7, [r1, #16]
	NNOM_LOG("   ");
 8004420:	f003 fc5c 	bl	8007cdc <iprintf>
 8004424:	462f      	mov	r7, r5
	for (int i = 0; i < NNOM_BLOCK_NUM; i++)
 8004426:	2600      	movs	r6, #0
 8004428:	e02b      	b.n	8004482 <compile_layers+0x452>
 800442a:	bf00      	nop
 800442c:	08022e48 	.word	0x08022e48
 8004430:	08022dac 	.word	0x08022dac
 8004434:	08022e30 	.word	0x08022e30
 8004438:	08022dbc 	.word	0x08022dbc
 800443c:	08022de0 	.word	0x08022de0
 8004440:	000f423f 	.word	0x000f423f
 8004444:	3b9ac9ff 	.word	0x3b9ac9ff
 8004448:	00044b83 	.word	0x00044b83
 800444c:	08022e0c 	.word	0x08022e0c
 8004450:	3b9aca00 	.word	0x3b9aca00
 8004454:	08022e18 	.word	0x08022e18
 8004458:	08022e28 	.word	0x08022e28
 800445c:	08022dc4 	.word	0x08022dc4
 8004460:	08022de4 	.word	0x08022de4
 8004464:	08022dd8 	.word	0x08022dd8
 8004468:	08022dd0 	.word	0x08022dd0
 800446c:	08022db8 	.word	0x08022db8
 8004470:	08022e2c 	.word	0x08022e2c
 8004474:	3601      	adds	r6, #1
			NNOM_LOG("%d ", block_pool[i].owners);
 8004476:	f003 fc31 	bl	8007cdc <iprintf>
	for (int i = 0; i < NNOM_BLOCK_NUM; i++)
 800447a:	2e08      	cmp	r6, #8
 800447c:	f107 070c 	add.w	r7, r7, #12
 8004480:	d00e      	beq.n	80044a0 <compile_layers+0x470>
		if (i % 4 == 0)
 8004482:	07b1      	lsls	r1, r6, #30
 8004484:	d020      	beq.n	80044c8 <compile_layers+0x498>
		if (block_pool[i].owners)
 8004486:	7a3b      	ldrb	r3, [r7, #8]
			NNOM_LOG("%d ", block_pool[i].owners);
 8004488:	4640      	mov	r0, r8
 800448a:	4619      	mov	r1, r3
		if (block_pool[i].owners)
 800448c:	2b00      	cmp	r3, #0
 800448e:	d1f1      	bne.n	8004474 <compile_layers+0x444>
			NNOM_LOG("- ");
 8004490:	4648      	mov	r0, r9
	for (int i = 0; i < NNOM_BLOCK_NUM; i++)
 8004492:	3601      	adds	r6, #1
			NNOM_LOG("- ");
 8004494:	f003 fc22 	bl	8007cdc <iprintf>
	for (int i = 0; i < NNOM_BLOCK_NUM; i++)
 8004498:	2e08      	cmp	r6, #8
 800449a:	f107 070c 	add.w	r7, r7, #12
 800449e:	d1f0      	bne.n	8004482 <compile_layers+0x452>
	NNOM_LOG("\n");
 80044a0:	200a      	movs	r0, #10
 80044a2:	f003 fc33 	bl	8007d0c <putchar>
				release_input_mem(layer);
 80044a6:	69a3      	ldr	r3, [r4, #24]
	while (in != NULL)
 80044a8:	b14b      	cbz	r3, 80044be <compile_layers+0x48e>
		block->state = NNOM_BUF_EMPTY;
 80044aa:	2600      	movs	r6, #0
		release_block(in->mem);
 80044ac:	6919      	ldr	r1, [r3, #16]
	if (block->owners > 0)
 80044ae:	7a08      	ldrb	r0, [r1, #8]
		block->owners -= 1;
 80044b0:	1e42      	subs	r2, r0, #1
 80044b2:	b2d2      	uxtb	r2, r2
	if (block->owners > 0)
 80044b4:	b960      	cbnz	r0, 80044d0 <compile_layers+0x4a0>
		block->state = NNOM_BUF_EMPTY;
 80044b6:	724e      	strb	r6, [r1, #9]
		in = in->aux;
 80044b8:	689b      	ldr	r3, [r3, #8]
	while (in != NULL)
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d1f6      	bne.n	80044ac <compile_layers+0x47c>
				release_comp_mem(layer);
 80044be:	68e3      	ldr	r3, [r4, #12]
	if (layer->comp != NULL)
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	f47f aef4 	bne.w	80042ae <compile_layers+0x27e>
 80044c6:	e6f8      	b.n	80042ba <compile_layers+0x28a>
			NNOM_LOG(" ");
 80044c8:	2020      	movs	r0, #32
 80044ca:	f003 fc1f 	bl	8007d0c <putchar>
 80044ce:	e7da      	b.n	8004486 <compile_layers+0x456>
		block->owners -= 1;
 80044d0:	720a      	strb	r2, [r1, #8]
	if (block->owners == 0)
 80044d2:	2a00      	cmp	r2, #0
 80044d4:	d1f0      	bne.n	80044b8 <compile_layers+0x488>
 80044d6:	e7ee      	b.n	80044b6 <compile_layers+0x486>
		NNOM_LOG("%7d ", mac);
 80044d8:	4641      	mov	r1, r8
 80044da:	48a0      	ldr	r0, [pc, #640]	; (800475c <compile_layers+0x72c>)
 80044dc:	f003 fbfe 	bl	8007cdc <iprintf>
 80044e0:	e6a6      	b.n	8004230 <compile_layers+0x200>
		NNOM_LOG("%3d.%02dM ", mac/(1000*1000), mac%(1000*1000)/(10*1000)); // xxx.xx M
 80044e2:	f103 63f0 	add.w	r3, r3, #125829120	; 0x7800000
 80044e6:	f503 338a 	add.w	r3, r3, #70656	; 0x11400
 80044ea:	3384      	adds	r3, #132	; 0x84
 80044ec:	fba3 3108 	umull	r3, r1, r3, r8
 80044f0:	4a9b      	ldr	r2, [pc, #620]	; (8004760 <compile_layers+0x730>)
 80044f2:	4b9c      	ldr	r3, [pc, #624]	; (8004764 <compile_layers+0x734>)
 80044f4:	489c      	ldr	r0, [pc, #624]	; (8004768 <compile_layers+0x738>)
 80044f6:	0c89      	lsrs	r1, r1, #18
 80044f8:	fb02 8211 	mls	r2, r2, r1, r8
 80044fc:	fba3 3202 	umull	r3, r2, r3, r2
 8004500:	0b52      	lsrs	r2, r2, #13
 8004502:	f003 fbeb 	bl	8007cdc <iprintf>
 8004506:	e693      	b.n	8004230 <compile_layers+0x200>
		NNOM_LOG("%6dk ", mac/1000);
 8004508:	4b98      	ldr	r3, [pc, #608]	; (800476c <compile_layers+0x73c>)
 800450a:	4899      	ldr	r0, [pc, #612]	; (8004770 <compile_layers+0x740>)
 800450c:	fba3 3108 	umull	r3, r1, r3, r8
 8004510:	0989      	lsrs	r1, r1, #6
 8004512:	f003 fbe3 	bl	8007cdc <iprintf>
 8004516:	e68b      	b.n	8004230 <compile_layers+0x200>
					return NN_MORE_TODO;
 8004518:	f06f 0007 	mvn.w	r0, #7
}
 800451c:	b007      	add	sp, #28
 800451e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		layer_count = &local_layer_count;
 8004522:	f10d 0b14 	add.w	fp, sp, #20
 8004526:	e58e      	b.n	8004046 <compile_layers+0x16>
		if (list[idx].owners == 0)
 8004528:	462a      	mov	r2, r5
 800452a:	e5e8      	b.n	80040fe <compile_layers+0xce>
 800452c:	f8dd b00c 	ldr.w	fp, [sp, #12]
			if (layer->in->type == LAYER_BUF_NULL || layer->out->type == LAYER_BUF_NULL)
 8004530:	b111      	cbz	r1, 8004538 <compile_layers+0x508>
 8004532:	7e32      	ldrb	r2, [r6, #24]
 8004534:	2a00      	cmp	r2, #0
 8004536:	d168      	bne.n	800460a <compile_layers+0x5da>
				layer->out->mem = layer->in->mem;
 8004538:	691a      	ldr	r2, [r3, #16]
 800453a:	6132      	str	r2, [r6, #16]
	size_t num = 0;
 800453c:	2300      	movs	r3, #0
		hook = hook->next;
 800453e:	6876      	ldr	r6, [r6, #4]
		num++;
 8004540:	3301      	adds	r3, #1
	while (hook != NULL)
 8004542:	2e00      	cmp	r6, #0
 8004544:	d1fb      	bne.n	800453e <compile_layers+0x50e>
				layer->out->mem->owners += nnom_hook_length(&layer->out->hook); // set the mem lifetime.// test
 8004546:	7a11      	ldrb	r1, [r2, #8]
	NNOM_LOG("   ");
 8004548:	488a      	ldr	r0, [pc, #552]	; (8004774 <compile_layers+0x744>)
			NNOM_LOG("- ");
 800454a:	f8df 922c 	ldr.w	r9, [pc, #556]	; 8004778 <compile_layers+0x748>
			NNOM_LOG("%d ", block_pool[i].owners);
 800454e:	f8df 822c 	ldr.w	r8, [pc, #556]	; 800477c <compile_layers+0x74c>
				layer->out->mem->owners += nnom_hook_length(&layer->out->hook); // set the mem lifetime.// test
 8004552:	440b      	add	r3, r1
				layer->out->mem->state = NNOM_BUF_FILLED;
 8004554:	2101      	movs	r1, #1
				layer->out->mem->owners += nnom_hook_length(&layer->out->hook); // set the mem lifetime.// test
 8004556:	7213      	strb	r3, [r2, #8]
				layer->out->mem->state = NNOM_BUF_FILLED;
 8004558:	7251      	strb	r1, [r2, #9]
	NNOM_LOG("   ");
 800455a:	f003 fbbf 	bl	8007cdc <iprintf>
 800455e:	462f      	mov	r7, r5
 8004560:	e006      	b.n	8004570 <compile_layers+0x540>
	for (int i = 0; i < NNOM_BLOCK_NUM; i++)
 8004562:	3601      	adds	r6, #1
			NNOM_LOG("%d ", block_pool[i].owners);
 8004564:	f003 fbba 	bl	8007cdc <iprintf>
	for (int i = 0; i < NNOM_BLOCK_NUM; i++)
 8004568:	2e08      	cmp	r6, #8
 800456a:	f107 070c 	add.w	r7, r7, #12
 800456e:	d00f      	beq.n	8004590 <compile_layers+0x560>
		if (i % 4 == 0)
 8004570:	07b2      	lsls	r2, r6, #30
 8004572:	f000 808d 	beq.w	8004690 <compile_layers+0x660>
		if (block_pool[i].owners)
 8004576:	7a3b      	ldrb	r3, [r7, #8]
			NNOM_LOG("%d ", block_pool[i].owners);
 8004578:	4640      	mov	r0, r8
 800457a:	4619      	mov	r1, r3
		if (block_pool[i].owners)
 800457c:	2b00      	cmp	r3, #0
 800457e:	d1f0      	bne.n	8004562 <compile_layers+0x532>
			NNOM_LOG("- ");
 8004580:	4648      	mov	r0, r9
	for (int i = 0; i < NNOM_BLOCK_NUM; i++)
 8004582:	3601      	adds	r6, #1
			NNOM_LOG("- ");
 8004584:	f003 fbaa 	bl	8007cdc <iprintf>
	for (int i = 0; i < NNOM_BLOCK_NUM; i++)
 8004588:	2e08      	cmp	r6, #8
 800458a:	f107 070c 	add.w	r7, r7, #12
 800458e:	d1ef      	bne.n	8004570 <compile_layers+0x540>
	NNOM_LOG("\n");
 8004590:	200a      	movs	r0, #10
 8004592:	f003 fbbb 	bl	8007d0c <putchar>
				release_input_mem(layer);
 8004596:	69a3      	ldr	r3, [r4, #24]
	while (in != NULL)
 8004598:	b153      	cbz	r3, 80045b0 <compile_layers+0x580>
		block->state = NNOM_BUF_EMPTY;
 800459a:	2600      	movs	r6, #0
		release_block(in->mem);
 800459c:	6919      	ldr	r1, [r3, #16]
	if (block->owners > 0)
 800459e:	7a08      	ldrb	r0, [r1, #8]
		block->owners -= 1;
 80045a0:	1e42      	subs	r2, r0, #1
 80045a2:	b2d2      	uxtb	r2, r2
	if (block->owners > 0)
 80045a4:	2800      	cmp	r0, #0
 80045a6:	d177      	bne.n	8004698 <compile_layers+0x668>
		block->state = NNOM_BUF_EMPTY;
 80045a8:	724e      	strb	r6, [r1, #9]
		in = in->aux;
 80045aa:	689b      	ldr	r3, [r3, #8]
	while (in != NULL)
 80045ac:	2b00      	cmp	r3, #0
 80045ae:	d1f5      	bne.n	800459c <compile_layers+0x56c>
				release_comp_mem(layer);
 80045b0:	68e3      	ldr	r3, [r4, #12]
	if (layer->comp != NULL)
 80045b2:	b12b      	cbz	r3, 80045c0 <compile_layers+0x590>
		release_block(layer->comp->mem);
 80045b4:	681a      	ldr	r2, [r3, #0]
	if (block->owners > 0)
 80045b6:	7a13      	ldrb	r3, [r2, #8]
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d179      	bne.n	80046b0 <compile_layers+0x680>
		block->state = NNOM_BUF_EMPTY;
 80045bc:	2300      	movs	r3, #0
 80045be:	7253      	strb	r3, [r2, #9]
			out = layer->out;
 80045c0:	69e7      	ldr	r7, [r4, #28]
			while (out != NULL)
 80045c2:	2f00      	cmp	r7, #0
 80045c4:	f43f ae80 	beq.w	80042c8 <compile_layers+0x298>
				hook = &out->hook;
 80045c8:	463e      	mov	r6, r7
				while (hook != NULL && hook->io != NULL)
 80045ca:	6833      	ldr	r3, [r6, #0]
 80045cc:	b193      	cbz	r3, 80045f4 <compile_layers+0x5c4>
					result = layer_shortcut_add(layer, hook->io->owner);
 80045ce:	6958      	ldr	r0, [r3, #20]
	if (start == curr)
 80045d0:	42a0      	cmp	r0, r4
 80045d2:	d008      	beq.n	80045e6 <compile_layers+0x5b6>
 80045d4:	4623      	mov	r3, r4
 80045d6:	e002      	b.n	80045de <compile_layers+0x5ae>
		if (curr == layer)
 80045d8:	4298      	cmp	r0, r3
 80045da:	d008      	beq.n	80045ee <compile_layers+0x5be>
 80045dc:	4613      	mov	r3, r2
	while (layer->shortcut != NULL)
 80045de:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80045e0:	2a00      	cmp	r2, #0
 80045e2:	d1f9      	bne.n	80045d8 <compile_layers+0x5a8>
	layer->shortcut = curr;
 80045e4:	6298      	str	r0, [r3, #40]	; 0x28
						compile_layers(hook->io->owner, block_pool, layer_count);
 80045e6:	465a      	mov	r2, fp
 80045e8:	4629      	mov	r1, r5
 80045ea:	f7ff fd21 	bl	8004030 <compile_layers>
					hook = hook->next;
 80045ee:	6876      	ldr	r6, [r6, #4]
				while (hook != NULL && hook->io != NULL)
 80045f0:	2e00      	cmp	r6, #0
 80045f2:	d1ea      	bne.n	80045ca <compile_layers+0x59a>
				out = out->aux;
 80045f4:	68bf      	ldr	r7, [r7, #8]
			while (out != NULL)
 80045f6:	2f00      	cmp	r7, #0
 80045f8:	d1e6      	bne.n	80045c8 <compile_layers+0x598>
	return NN_SUCCESS;
 80045fa:	2000      	movs	r0, #0
 80045fc:	e665      	b.n	80042ca <compile_layers+0x29a>
					out->mem->state = NNOM_BUF_FILLED;
 80045fe:	2301      	movs	r3, #1
					out->mem->owners = nnom_hook_length(&out->hook); // set lifetime of the buffer = the num of hooked layers
 8004600:	720a      	strb	r2, [r1, #8]
					out->mem->state = NNOM_BUF_FILLED;
 8004602:	724b      	strb	r3, [r1, #9]
					out = out->aux;
 8004604:	68b6      	ldr	r6, [r6, #8]
				while (out != NULL && out->hook.io != NULL) // the output layer have no output IO
 8004606:	2e00      	cmp	r6, #0
 8004608:	d05e      	beq.n	80046c8 <compile_layers+0x698>
 800460a:	6833      	ldr	r3, [r6, #0]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d05b      	beq.n	80046c8 <compile_layers+0x698>
		if (list[idx].owners == 0)
 8004610:	7a2b      	ldrb	r3, [r5, #8]
 8004612:	2b00      	cmp	r3, #0
 8004614:	f000 8095 	beq.w	8004742 <compile_layers+0x712>
 8004618:	7d2b      	ldrb	r3, [r5, #20]
 800461a:	2b00      	cmp	r3, #0
 800461c:	f000 808f 	beq.w	800473e <compile_layers+0x70e>
 8004620:	f895 3020 	ldrb.w	r3, [r5, #32]
 8004624:	2b00      	cmp	r3, #0
 8004626:	f000 8090 	beq.w	800474a <compile_layers+0x71a>
 800462a:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
 800462e:	2b00      	cmp	r3, #0
 8004630:	f000 8089 	beq.w	8004746 <compile_layers+0x716>
 8004634:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
 8004638:	2b00      	cmp	r3, #0
 800463a:	f000 808a 	beq.w	8004752 <compile_layers+0x722>
 800463e:	f895 3044 	ldrb.w	r3, [r5, #68]	; 0x44
 8004642:	2b00      	cmp	r3, #0
 8004644:	f000 8083 	beq.w	800474e <compile_layers+0x71e>
 8004648:	f895 3050 	ldrb.w	r3, [r5, #80]	; 0x50
 800464c:	2b00      	cmp	r3, #0
 800464e:	f000 8082 	beq.w	8004756 <compile_layers+0x726>
 8004652:	f895 305c 	ldrb.w	r3, [r5, #92]	; 0x5c
 8004656:	2b00      	cmp	r3, #0
 8004658:	bf14      	ite	ne
 800465a:	2360      	movne	r3, #96	; 0x60
 800465c:	2354      	moveq	r3, #84	; 0x54
	free = &list[idx];
 800465e:	442b      	add	r3, r5
					out->mem = allocate_block(block_pool);
 8004660:	6133      	str	r3, [r6, #16]
					if (out->mem == NULL)
 8004662:	2b00      	cmp	r3, #0
 8004664:	d066      	beq.n	8004734 <compile_layers+0x704>
					mem_size = nnom_alignto(tensor_size(out->tensor), 4);
 8004666:	68f0      	ldr	r0, [r6, #12]
 8004668:	f000 ff08 	bl	800547c <tensor_size>
					out->mem->size = mem_size > out->mem->size ? mem_size : out->mem->size;
 800466c:	6931      	ldr	r1, [r6, #16]
	if (value % alignment == 0)
 800466e:	f010 0303 	ands.w	r3, r0, #3
	value += alignment - value % alignment;
 8004672:	bf1c      	itt	ne
 8004674:	3004      	addne	r0, #4
 8004676:	1ac0      	subne	r0, r0, r3
					out->mem->size = mem_size > out->mem->size ? mem_size : out->mem->size;
 8004678:	684b      	ldr	r3, [r1, #4]
 800467a:	4298      	cmp	r0, r3
 800467c:	bf38      	it	cc
 800467e:	4618      	movcc	r0, r3
 8004680:	6048      	str	r0, [r1, #4]
					out->mem->owners = nnom_hook_length(&out->hook); // set lifetime of the buffer = the num of hooked layers
 8004682:	4633      	mov	r3, r6
	size_t num = 0;
 8004684:	2200      	movs	r2, #0
		hook = hook->next;
 8004686:	685b      	ldr	r3, [r3, #4]
		num++;
 8004688:	3201      	adds	r2, #1
	while (hook != NULL)
 800468a:	2b00      	cmp	r3, #0
 800468c:	d1fb      	bne.n	8004686 <compile_layers+0x656>
 800468e:	e7b6      	b.n	80045fe <compile_layers+0x5ce>
			NNOM_LOG(" ");
 8004690:	2020      	movs	r0, #32
 8004692:	f003 fb3b 	bl	8007d0c <putchar>
 8004696:	e76e      	b.n	8004576 <compile_layers+0x546>
		block->owners -= 1;
 8004698:	720a      	strb	r2, [r1, #8]
	if (block->owners == 0)
 800469a:	2a00      	cmp	r2, #0
 800469c:	d185      	bne.n	80045aa <compile_layers+0x57a>
 800469e:	e783      	b.n	80045a8 <compile_layers+0x578>
		if (list[idx].owners == 0)
 80046a0:	462f      	mov	r7, r5
 80046a2:	e6a5      	b.n	80043f0 <compile_layers+0x3c0>
 80046a4:	270c      	movs	r7, #12
 80046a6:	e6a0      	b.n	80043ea <compile_layers+0x3ba>
 80046a8:	2718      	movs	r7, #24
 80046aa:	e69e      	b.n	80043ea <compile_layers+0x3ba>
 80046ac:	2724      	movs	r7, #36	; 0x24
 80046ae:	e69c      	b.n	80043ea <compile_layers+0x3ba>
		block->owners -= 1;
 80046b0:	3b01      	subs	r3, #1
 80046b2:	b2db      	uxtb	r3, r3
 80046b4:	7213      	strb	r3, [r2, #8]
	if (block->owners == 0)
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d182      	bne.n	80045c0 <compile_layers+0x590>
 80046ba:	e77f      	b.n	80045bc <compile_layers+0x58c>
		if (list[idx].owners == 0)
 80046bc:	2730      	movs	r7, #48	; 0x30
 80046be:	e694      	b.n	80043ea <compile_layers+0x3ba>
 80046c0:	273c      	movs	r7, #60	; 0x3c
 80046c2:	e692      	b.n	80043ea <compile_layers+0x3ba>
 80046c4:	2748      	movs	r7, #72	; 0x48
 80046c6:	e690      	b.n	80043ea <compile_layers+0x3ba>
	NNOM_LOG("   ");
 80046c8:	482a      	ldr	r0, [pc, #168]	; (8004774 <compile_layers+0x744>)
			NNOM_LOG("- ");
 80046ca:	f8df 90ac 	ldr.w	r9, [pc, #172]	; 8004778 <compile_layers+0x748>
			NNOM_LOG("%d ", block_pool[i].owners);
 80046ce:	f8df 80ac 	ldr.w	r8, [pc, #172]	; 800477c <compile_layers+0x74c>
	NNOM_LOG("   ");
 80046d2:	f003 fb03 	bl	8007cdc <iprintf>
 80046d6:	462f      	mov	r7, r5
	for (int i = 0; i < NNOM_BLOCK_NUM; i++)
 80046d8:	2600      	movs	r6, #0
 80046da:	e006      	b.n	80046ea <compile_layers+0x6ba>
			NNOM_LOG("%d ", block_pool[i].owners);
 80046dc:	f003 fafe 	bl	8007cdc <iprintf>
	for (int i = 0; i < NNOM_BLOCK_NUM; i++)
 80046e0:	3601      	adds	r6, #1
 80046e2:	2e08      	cmp	r6, #8
 80046e4:	f107 070c 	add.w	r7, r7, #12
 80046e8:	d00e      	beq.n	8004708 <compile_layers+0x6d8>
		if (i % 4 == 0)
 80046ea:	07b3      	lsls	r3, r6, #30
 80046ec:	d008      	beq.n	8004700 <compile_layers+0x6d0>
		if (block_pool[i].owners)
 80046ee:	7a3b      	ldrb	r3, [r7, #8]
			NNOM_LOG("%d ", block_pool[i].owners);
 80046f0:	4640      	mov	r0, r8
 80046f2:	4619      	mov	r1, r3
		if (block_pool[i].owners)
 80046f4:	2b00      	cmp	r3, #0
 80046f6:	d1f1      	bne.n	80046dc <compile_layers+0x6ac>
			NNOM_LOG("- ");
 80046f8:	4648      	mov	r0, r9
 80046fa:	f003 faef 	bl	8007cdc <iprintf>
 80046fe:	e7ef      	b.n	80046e0 <compile_layers+0x6b0>
			NNOM_LOG(" ");
 8004700:	2020      	movs	r0, #32
 8004702:	f003 fb03 	bl	8007d0c <putchar>
 8004706:	e7f2      	b.n	80046ee <compile_layers+0x6be>
	NNOM_LOG("\n");
 8004708:	200a      	movs	r0, #10
 800470a:	f003 faff 	bl	8007d0c <putchar>
				release_input_mem(layer);
 800470e:	69a3      	ldr	r3, [r4, #24]
	while (in != NULL)
 8004710:	2b00      	cmp	r3, #0
 8004712:	f43f af4d 	beq.w	80045b0 <compile_layers+0x580>
		block->state = NNOM_BUF_EMPTY;
 8004716:	2600      	movs	r6, #0
		release_block(in->mem);
 8004718:	6918      	ldr	r0, [r3, #16]
	if (block->owners > 0)
 800471a:	7a01      	ldrb	r1, [r0, #8]
		block->owners -= 1;
 800471c:	1e4a      	subs	r2, r1, #1
 800471e:	b2d2      	uxtb	r2, r2
	if (block->owners > 0)
 8004720:	b921      	cbnz	r1, 800472c <compile_layers+0x6fc>
		block->state = NNOM_BUF_EMPTY;
 8004722:	7246      	strb	r6, [r0, #9]
		in = in->aux;
 8004724:	689b      	ldr	r3, [r3, #8]
	while (in != NULL)
 8004726:	2b00      	cmp	r3, #0
 8004728:	d1f6      	bne.n	8004718 <compile_layers+0x6e8>
 800472a:	e741      	b.n	80045b0 <compile_layers+0x580>
		block->owners -= 1;
 800472c:	7202      	strb	r2, [r0, #8]
	if (block->owners == 0)
 800472e:	2a00      	cmp	r2, #0
 8004730:	d1f8      	bne.n	8004724 <compile_layers+0x6f4>
 8004732:	e7f6      	b.n	8004722 <compile_layers+0x6f2>
					return NN_NO_MEMORY;
 8004734:	f06f 0006 	mvn.w	r0, #6
 8004738:	e6f0      	b.n	800451c <compile_layers+0x4ec>
		if (list[idx].owners == 0)
 800473a:	462f      	mov	r7, r5
 800473c:	e5fe      	b.n	800433c <compile_layers+0x30c>
 800473e:	230c      	movs	r3, #12
 8004740:	e78d      	b.n	800465e <compile_layers+0x62e>
					out->mem = allocate_block(block_pool);
 8004742:	6135      	str	r5, [r6, #16]
 8004744:	e78f      	b.n	8004666 <compile_layers+0x636>
		if (list[idx].owners == 0)
 8004746:	2324      	movs	r3, #36	; 0x24
 8004748:	e789      	b.n	800465e <compile_layers+0x62e>
 800474a:	2318      	movs	r3, #24
 800474c:	e787      	b.n	800465e <compile_layers+0x62e>
 800474e:	233c      	movs	r3, #60	; 0x3c
 8004750:	e785      	b.n	800465e <compile_layers+0x62e>
 8004752:	2330      	movs	r3, #48	; 0x30
 8004754:	e783      	b.n	800465e <compile_layers+0x62e>
 8004756:	2348      	movs	r3, #72	; 0x48
 8004758:	e781      	b.n	800465e <compile_layers+0x62e>
 800475a:	bf00      	nop
 800475c:	08022df0 	.word	0x08022df0
 8004760:	000f4240 	.word	0x000f4240
 8004764:	d1b71759 	.word	0xd1b71759
 8004768:	08022e00 	.word	0x08022e00
 800476c:	10624dd3 	.word	0x10624dd3
 8004770:	08022df8 	.word	0x08022df8
 8004774:	08022e28 	.word	0x08022e28
 8004778:	08022db8 	.word	0x08022db8
 800477c:	08022e2c 	.word	0x08022e2c

08004780 <model_compile>:

// a compiler can be use for both sequencial / functional model.
// the output layer is optional only when the model is single output model
// in this case, if output = NULL, the compile can find it by its own. 
nnom_status_t model_compile(nnom_model_t *m, nnom_layer_t *input, nnom_layer_t *output)
{
 8004780:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004784:	b082      	sub	sp, #8
	size_t buf_size;
	uint8_t *buf;
	uint32_t layer_num = 1;
 8004786:	2301      	movs	r3, #1
 8004788:	9301      	str	r3, [sp, #4]
	uint32_t time = nnom_ms_get();
	
	NNOM_NULL_CHECK(m);
 800478a:	2800      	cmp	r0, #0
 800478c:	f000 80f1 	beq.w	8004972 <model_compile+0x1f2>
 8004790:	460d      	mov	r5, r1
	NNOM_NULL_CHECK(input);
 8004792:	2900      	cmp	r1, #0
 8004794:	f000 80ed 	beq.w	8004972 <model_compile+0x1f2>
 8004798:	4616      	mov	r6, r2
 800479a:	4604      	mov	r4, r0

	m->head = input;
	m->tail = output;
 800479c:	e9c0 1200 	strd	r1, r2, [r0]
	if (output == NULL)
 80047a0:	2a00      	cmp	r2, #0
 80047a2:	f000 80d4 	beq.w	800494e <model_compile+0x1ce>
		m->tail = find_last(input);

	NNOM_LOG("\nNNoM version %d.%d.%d\n", NNOM_MAJORVERSION, NNOM_SUBVERSION, NNOM_REVISION);
 80047a6:	2300      	movs	r3, #0
 80047a8:	4619      	mov	r1, r3
 80047aa:	2203      	movs	r2, #3
 80047ac:	4874      	ldr	r0, [pc, #464]	; (8004980 <model_compile+0x200>)
 80047ae:	f003 fa95 	bl	8007cdc <iprintf>
	NNOM_LOG("Start compiling model...\n");
 80047b2:	4874      	ldr	r0, [pc, #464]	; (8004984 <model_compile+0x204>)
 80047b4:	f003 fb1a 	bl	8007dec <puts>
	NNOM_LOG("Layer(#)         Activation    output shape    ops(MAC)   mem(in, out, buf)      mem blk lifetime\n");
 80047b8:	4873      	ldr	r0, [pc, #460]	; (8004988 <model_compile+0x208>)
 80047ba:	f003 fb17 	bl	8007dec <puts>
	NNOM_LOG("-------------------------------------------------------------------------------------------------\n");
 80047be:	4873      	ldr	r0, [pc, #460]	; (800498c <model_compile+0x20c>)
 80047c0:	f003 fb14 	bl	8007dec <puts>

	// compile layers, started from list head, nested run till the end of models
	compile_layers(m->head, m->blocks, &layer_num);
 80047c4:	aa01      	add	r2, sp, #4
 80047c6:	f104 0120 	add.w	r1, r4, #32
 80047ca:	6820      	ldr	r0, [r4, #0]
 80047cc:	f7ff fc30 	bl	8004030 <compile_layers>

	NNOM_LOG("-------------------------------------------------------------------------------------------------\n");
 80047d0:	486e      	ldr	r0, [pc, #440]	; (800498c <model_compile+0x20c>)
 80047d2:	f003 fb0b 	bl	8007dec <puts>
 80047d6:	e000      	b.n	80047da <model_compile+0x5a>
	while (layer->shortcut != NULL)
 80047d8:	461d      	mov	r5, r3
 80047da:	6aab      	ldr	r3, [r5, #40]	; 0x28
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d1fb      	bne.n	80047d8 <model_compile+0x58>

	// if model's tail is not the last layer which built by user.
	if (output != layer_shortcut_find_last(input))
 80047e0:	42ae      	cmp	r6, r5
 80047e2:	d01b      	beq.n	800481c <model_compile+0x9c>
		NNOM_LOG("WARNING: model returned at #%d %s layer, but this layer is not the end of shortcut list \n",
 80047e4:	6821      	ldr	r1, [r4, #0]
	if (start == NULL)
 80047e6:	b181      	cbz	r1, 800480a <model_compile+0x8a>
	while (start->out->hook.io != NULL)
 80047e8:	69cb      	ldr	r3, [r1, #28]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	b163      	cbz	r3, 8004808 <model_compile+0x88>
		if (layer == start)
 80047ee:	42b1      	cmp	r1, r6
		i++;
 80047f0:	f04f 0102 	mov.w	r1, #2
		if (layer == start)
 80047f4:	d102      	bne.n	80047fc <model_compile+0x7c>
 80047f6:	e008      	b.n	800480a <model_compile+0x8a>
 80047f8:	4296      	cmp	r6, r2
 80047fa:	d006      	beq.n	800480a <model_compile+0x8a>
		start = start->out->hook.io->owner;
 80047fc:	695a      	ldr	r2, [r3, #20]
	while (start->out->hook.io != NULL)
 80047fe:	69d3      	ldr	r3, [r2, #28]
 8004800:	681b      	ldr	r3, [r3, #0]
		i++;
 8004802:	3101      	adds	r1, #1
	while (start->out->hook.io != NULL)
 8004804:	2b00      	cmp	r3, #0
 8004806:	d1f7      	bne.n	80047f8 <model_compile+0x78>
		return 0;
 8004808:	4619      	mov	r1, r3
		NNOM_LOG("WARNING: model returned at #%d %s layer, but this layer is not the end of shortcut list \n",
 800480a:	7d33      	ldrb	r3, [r6, #20]
 800480c:	4a60      	ldr	r2, [pc, #384]	; (8004990 <model_compile+0x210>)
 800480e:	4861      	ldr	r0, [pc, #388]	; (8004994 <model_compile+0x214>)
 8004810:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8004814:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8004818:	f003 fa60 	bl	8007cdc <iprintf>
	NNOM_LOG("Memory cost by each block:\n ");
 800481c:	485e      	ldr	r0, [pc, #376]	; (8004998 <model_compile+0x218>)
		NNOM_LOG("blk_%d:%d  ", index, m->blocks[index].size);
 800481e:	f8df 818c 	ldr.w	r8, [pc, #396]	; 80049ac <model_compile+0x22c>
	NNOM_LOG("Memory cost by each block:\n ");
 8004822:	f003 fa5b 	bl	8007cdc <iprintf>
	uint32_t total_mem = 0;
 8004826:	2700      	movs	r7, #0
	for (index = 0; index < NNOM_BLOCK_NUM; index++)
 8004828:	463d      	mov	r5, r7
 800482a:	4626      	mov	r6, r4
		total_mem += m->blocks[index].size;
 800482c:	6a73      	ldr	r3, [r6, #36]	; 0x24
		NNOM_LOG("blk_%d:%d  ", index, m->blocks[index].size);
 800482e:	4629      	mov	r1, r5
 8004830:	461a      	mov	r2, r3
	for (index = 0; index < NNOM_BLOCK_NUM; index++)
 8004832:	3501      	adds	r5, #1
		NNOM_LOG("blk_%d:%d  ", index, m->blocks[index].size);
 8004834:	4640      	mov	r0, r8
		total_mem += m->blocks[index].size;
 8004836:	441f      	add	r7, r3
		NNOM_LOG("blk_%d:%d  ", index, m->blocks[index].size);
 8004838:	f003 fa50 	bl	8007cdc <iprintf>
	for (index = 0; index < NNOM_BLOCK_NUM; index++)
 800483c:	2d08      	cmp	r5, #8
 800483e:	f106 060c 	add.w	r6, r6, #12
 8004842:	d1f3      	bne.n	800482c <model_compile+0xac>
	NNOM_LOG("\n Total memory cost by network buffers: %d bytes\n", total_mem);
 8004844:	4639      	mov	r1, r7
 8004846:	4855      	ldr	r0, [pc, #340]	; (800499c <model_compile+0x21c>)
 8004848:	f003 fa48 	bl	8007cdc <iprintf>
	if (value % alignment == 0)
 800484c:	f017 0503 	ands.w	r5, r7, #3
	value += alignment - value % alignment;
 8004850:	bf1a      	itte	ne
 8004852:	1d3a      	addne	r2, r7, #4
 8004854:	1b55      	subne	r5, r2, r5
	if (value % alignment == 0)
 8004856:	463d      	moveq	r5, r7
	void *p = nnom_malloc(size);
 8004858:	2101      	movs	r1, #1
 800485a:	4628      	mov	r0, r5
 800485c:	f002 fcbe 	bl	80071dc <calloc>
	if (p)
 8004860:	2800      	cmp	r0, #0
 8004862:	d06b      	beq.n	800493c <model_compile+0x1bc>
		nnom_memory_taken += size; //test
 8004864:	4b4e      	ldr	r3, [pc, #312]	; (80049a0 <model_compile+0x220>)
		if (m->blocks[index].size == 0)
 8004866:	6a61      	ldr	r1, [r4, #36]	; 0x24
		nnom_memory_taken += size; //test
 8004868:	681a      	ldr	r2, [r3, #0]
 800486a:	442a      	add	r2, r5
 800486c:	601a      	str	r2, [r3, #0]
		if (m->blocks[index].size == 0)
 800486e:	b311      	cbz	r1, 80048b6 <model_compile+0x136>
 8004870:	6b23      	ldr	r3, [r4, #48]	; 0x30
		m->blocks[index].blk = (void *)((uint8_t*)buf + mem_offset);
 8004872:	6220      	str	r0, [r4, #32]
		if (m->blocks[index].size == 0)
 8004874:	b1fb      	cbz	r3, 80048b6 <model_compile+0x136>
 8004876:	6be2      	ldr	r2, [r4, #60]	; 0x3c
		m->blocks[index].blk = (void *)((uint8_t*)buf + mem_offset);
 8004878:	1845      	adds	r5, r0, r1
		mem_offset += m->blocks[index].size;
 800487a:	440b      	add	r3, r1
		m->blocks[index].blk = (void *)((uint8_t*)buf + mem_offset);
 800487c:	62e5      	str	r5, [r4, #44]	; 0x2c
		if (m->blocks[index].size == 0)
 800487e:	b1d2      	cbz	r2, 80048b6 <model_compile+0x136>
 8004880:	6ca1      	ldr	r1, [r4, #72]	; 0x48
		m->blocks[index].blk = (void *)((uint8_t*)buf + mem_offset);
 8004882:	18c5      	adds	r5, r0, r3
		mem_offset += m->blocks[index].size;
 8004884:	441a      	add	r2, r3
		m->blocks[index].blk = (void *)((uint8_t*)buf + mem_offset);
 8004886:	63a5      	str	r5, [r4, #56]	; 0x38
		if (m->blocks[index].size == 0)
 8004888:	b1a9      	cbz	r1, 80048b6 <model_compile+0x136>
 800488a:	6d63      	ldr	r3, [r4, #84]	; 0x54
		m->blocks[index].blk = (void *)((uint8_t*)buf + mem_offset);
 800488c:	1885      	adds	r5, r0, r2
 800488e:	6465      	str	r5, [r4, #68]	; 0x44
		mem_offset += m->blocks[index].size;
 8004890:	440a      	add	r2, r1
		if (m->blocks[index].size == 0)
 8004892:	b183      	cbz	r3, 80048b6 <model_compile+0x136>
 8004894:	6e21      	ldr	r1, [r4, #96]	; 0x60
		m->blocks[index].blk = (void *)((uint8_t*)buf + mem_offset);
 8004896:	1885      	adds	r5, r0, r2
		mem_offset += m->blocks[index].size;
 8004898:	4413      	add	r3, r2
		m->blocks[index].blk = (void *)((uint8_t*)buf + mem_offset);
 800489a:	6525      	str	r5, [r4, #80]	; 0x50
		if (m->blocks[index].size == 0)
 800489c:	b159      	cbz	r1, 80048b6 <model_compile+0x136>
 800489e:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
		m->blocks[index].blk = (void *)((uint8_t*)buf + mem_offset);
 80048a0:	18c5      	adds	r5, r0, r3
 80048a2:	65e5      	str	r5, [r4, #92]	; 0x5c
		mem_offset += m->blocks[index].size;
 80048a4:	440b      	add	r3, r1
		if (m->blocks[index].size == 0)
 80048a6:	b132      	cbz	r2, 80048b6 <model_compile+0x136>
 80048a8:	6fa1      	ldr	r1, [r4, #120]	; 0x78
		m->blocks[index].blk = (void *)((uint8_t*)buf + mem_offset);
 80048aa:	18c5      	adds	r5, r0, r3
 80048ac:	66a5      	str	r5, [r4, #104]	; 0x68
		mem_offset += m->blocks[index].size;
 80048ae:	4413      	add	r3, r2
		if (m->blocks[index].size == 0)
 80048b0:	b109      	cbz	r1, 80048b6 <model_compile+0x136>
		m->blocks[index].blk = (void *)((uint8_t*)buf + mem_offset);
 80048b2:	4418      	add	r0, r3
 80048b4:	6760      	str	r0, [r4, #116]	; 0x74
	nnom_layer_t *layer = m->head;
 80048b6:	6825      	ldr	r5, [r4, #0]
	while (layer)
 80048b8:	2d00      	cmp	r5, #0
 80048ba:	d052      	beq.n	8004962 <model_compile+0x1e2>
 80048bc:	4628      	mov	r0, r5
		io = layer->in;
 80048be:	6983      	ldr	r3, [r0, #24]
		while (io)
 80048c0:	b133      	cbz	r3, 80048d0 <model_compile+0x150>
			io->tensor->p_data = io->mem->blk;
 80048c2:	e9d3 2103 	ldrd	r2, r1, [r3, #12]
			io = io->aux;
 80048c6:	689b      	ldr	r3, [r3, #8]
			io->tensor->p_data = io->mem->blk;
 80048c8:	6809      	ldr	r1, [r1, #0]
 80048ca:	6011      	str	r1, [r2, #0]
		while (io)
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d1f8      	bne.n	80048c2 <model_compile+0x142>
		io = layer->out;
 80048d0:	69c3      	ldr	r3, [r0, #28]
		while (io)
 80048d2:	b133      	cbz	r3, 80048e2 <model_compile+0x162>
			io->tensor->p_data = io->mem->blk;
 80048d4:	e9d3 2103 	ldrd	r2, r1, [r3, #12]
			io = io->aux;
 80048d8:	689b      	ldr	r3, [r3, #8]
			io->tensor->p_data = io->mem->blk;
 80048da:	6809      	ldr	r1, [r1, #0]
 80048dc:	6011      	str	r1, [r2, #0]
		while (io)
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d1f8      	bne.n	80048d4 <model_compile+0x154>
		layer = layer->shortcut;
 80048e2:	6a80      	ldr	r0, [r0, #40]	; 0x28
	while (layer)
 80048e4:	2800      	cmp	r0, #0
 80048e6:	d1ea      	bne.n	80048be <model_compile+0x13e>
		if (layer->actail != NULL)
 80048e8:	692e      	ldr	r6, [r5, #16]
 80048ea:	b17e      	cbz	r6, 800490c <model_compile+0x18c>
			layer->actail->data = layer->out->tensor->p_data;
 80048ec:	69eb      	ldr	r3, [r5, #28]
 80048ee:	68d8      	ldr	r0, [r3, #12]
 80048f0:	6803      	ldr	r3, [r0, #0]
 80048f2:	6073      	str	r3, [r6, #4]
			layer->actail->size = tensor_size(layer->out->tensor);
 80048f4:	f000 fdc2 	bl	800547c <tensor_size>
			if(layer->actail->qfmt.m == 0 && layer->actail->qfmt.n == 0)
 80048f8:	692b      	ldr	r3, [r5, #16]
			layer->actail->size = tensor_size(layer->out->tensor);
 80048fa:	60b0      	str	r0, [r6, #8]
			if(layer->actail->qfmt.m == 0 && layer->actail->qfmt.n == 0)
 80048fc:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8004900:	b922      	cbnz	r2, 800490c <model_compile+0x18c>
				layer->actail->qfmt = layer->out->tensor->qfmt;
 8004902:	69ea      	ldr	r2, [r5, #28]
 8004904:	68d2      	ldr	r2, [r2, #12]
 8004906:	f8b2 2009 	ldrh.w	r2, [r2, #9]
 800490a:	819a      	strh	r2, [r3, #12]
		if (layer->shortcut == NULL)
 800490c:	6aad      	ldr	r5, [r5, #40]	; 0x28
 800490e:	2d00      	cmp	r5, #0
 8004910:	d1ea      	bne.n	80048e8 <model_compile+0x168>

	// finally set the output buff to tailed activation on each layer
	set_tailed_activation(m);

	// calculate the total operations and set it to the model
	model_set_ops(m);
 8004912:	6823      	ldr	r3, [r4, #0]
	while (layer)
 8004914:	b34b      	cbz	r3, 800496a <model_compile+0x1ea>
		total_ops += layer->stat.macc;
 8004916:	6a1a      	ldr	r2, [r3, #32]
		if (layer->shortcut == NULL)
 8004918:	6a9b      	ldr	r3, [r3, #40]	; 0x28
		total_ops += layer->stat.macc;
 800491a:	4610      	mov	r0, r2
 800491c:	2100      	movs	r1, #0
		if (layer->shortcut == NULL)
 800491e:	b13b      	cbz	r3, 8004930 <model_compile+0x1b0>
		total_ops += layer->stat.macc;
 8004920:	6a1a      	ldr	r2, [r3, #32]
		if (layer->shortcut == NULL)
 8004922:	6a9b      	ldr	r3, [r3, #40]	; 0x28
		total_ops += layer->stat.macc;
 8004924:	1880      	adds	r0, r0, r2
 8004926:	f141 0100 	adc.w	r1, r1, #0
		if (layer->shortcut == NULL)
 800492a:	2b00      	cmp	r3, #0
 800492c:	d1f8      	bne.n	8004920 <model_compile+0x1a0>
 800492e:	4602      	mov	r2, r0
	m->total_ops = total_ops;
 8004930:	f8c4 2080 	str.w	r2, [r4, #128]	; 0x80
	
	// print the time. 
	if(nnom_ms_get())
		NNOM_LOG("Compling done in %d ms\n", nnom_ms_get() - time);

	return NN_SUCCESS;
 8004934:	2000      	movs	r0, #0
}
 8004936:	b002      	add	sp, #8
 8004938:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		NNOM_LOG("ERROR: No enough memory for network buffer, required %d bytes\n", buf_size);
 800493c:	4639      	mov	r1, r7
 800493e:	4819      	ldr	r0, [pc, #100]	; (80049a4 <model_compile+0x224>)
 8004940:	f003 f9cc 	bl	8007cdc <iprintf>
		return NN_NO_MEMORY;
 8004944:	f06f 0006 	mvn.w	r0, #6
}
 8004948:	b002      	add	sp, #8
 800494a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	while (layer->out->hook.io != NULL)
 800494e:	69cb      	ldr	r3, [r1, #28]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	b163      	cbz	r3, 800496e <model_compile+0x1ee>
		layer = layer->out->hook.io->owner;
 8004954:	695a      	ldr	r2, [r3, #20]
	while (layer->out->hook.io != NULL)
 8004956:	69d3      	ldr	r3, [r2, #28]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d1fa      	bne.n	8004954 <model_compile+0x1d4>
		m->tail = find_last(input);
 800495e:	6062      	str	r2, [r4, #4]
 8004960:	e721      	b.n	80047a6 <model_compile+0x26>
	NNOM_NULL_CHECK(m->head);
 8004962:	4811      	ldr	r0, [pc, #68]	; (80049a8 <model_compile+0x228>)
 8004964:	f003 fa42 	bl	8007dec <puts>
 8004968:	e7d3      	b.n	8004912 <model_compile+0x192>
	while (layer)
 800496a:	461a      	mov	r2, r3
 800496c:	e7e0      	b.n	8004930 <model_compile+0x1b0>
	while (layer->out->hook.io != NULL)
 800496e:	460a      	mov	r2, r1
 8004970:	e7f5      	b.n	800495e <model_compile+0x1de>
	NNOM_NULL_CHECK(m);
 8004972:	480d      	ldr	r0, [pc, #52]	; (80049a8 <model_compile+0x228>)
 8004974:	f003 fa3a 	bl	8007dec <puts>
 8004978:	f04f 30ff 	mov.w	r0, #4294967295
 800497c:	e7db      	b.n	8004936 <model_compile+0x1b6>
 800497e:	bf00      	nop
 8004980:	08023048 	.word	0x08023048
 8004984:	08023060 	.word	0x08023060
 8004988:	0802307c 	.word	0x0802307c
 800498c:	080230e0 	.word	0x080230e0
 8004990:	08022e48 	.word	0x08022e48
 8004994:	08023144 	.word	0x08023144
 8004998:	08022fa4 	.word	0x08022fa4
 800499c:	08022fd0 	.word	0x08022fd0
 80049a0:	200006b8 	.word	0x200006b8
 80049a4:	080231a0 	.word	0x080231a0
 80049a8:	08023244 	.word	0x08023244
 80049ac:	08022fc4 	.word	0x08022fc4

080049b0 <model_run_to>:
	return result;
}

// run the model, until the end_layer. If end_layer == NULL, run all layers.
nnom_status_t model_run_to(nnom_model_t *m, nnom_layer_t *end_layer)
{
 80049b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	uint32_t layer_num = 1;
	nnom_status_t result;
	nnom_layer_t *layer;
	NNOM_NULL_CHECK(m);
 80049b4:	2800      	cmp	r0, #0
 80049b6:	d03d      	beq.n	8004a34 <model_run_to+0x84>
	NNOM_NULL_CHECK(m->head);
 80049b8:	6804      	ldr	r4, [r0, #0]
 80049ba:	4605      	mov	r5, r0
 80049bc:	2c00      	cmp	r4, #0
 80049be:	d039      	beq.n	8004a34 <model_run_to+0x84>
 80049c0:	4689      	mov	r9, r1
	uint32_t layer_num = 1;
 80049c2:	2701      	movs	r7, #1
	layer->stat.time = nnom_us_get() - start;
 80049c4:	f04f 0800 	mov.w	r8, #0
 80049c8:	e009      	b.n	80049de <model_run_to+0x2e>
		{
			NNOM_LOG("Error: #%d %s layer return error code:%d\n", layer_num, default_layer_names[layer->type], result);
			return result;
		}
		// run callback
		if(m->layer_callback != NULL)
 80049ca:	69eb      	ldr	r3, [r5, #28]
 80049cc:	b113      	cbz	r3, 80049d4 <model_run_to+0x24>
		{
			result = m->layer_callback(m, layer);
 80049ce:	4798      	blx	r3
			if (result != NN_SUCCESS)
 80049d0:	4601      	mov	r1, r0
 80049d2:	bb08      	cbnz	r0, 8004a18 <model_run_to+0x68>
				NNOM_LOG("Error: Callback return error code %d at #%d %s layer\n", result, layer_num, default_layer_names[layer->type]);
				return result;
			}
		}		
		// check if finished
		if (layer == end_layer || layer->shortcut == NULL)
 80049d4:	45a1      	cmp	r9, r4
 80049d6:	d01c      	beq.n	8004a12 <model_run_to+0x62>
 80049d8:	6aa4      	ldr	r4, [r4, #40]	; 0x28
 80049da:	b1d4      	cbz	r4, 8004a12 <model_run_to+0x62>
			break;
		layer = layer->shortcut;
		layer_num++;
 80049dc:	3701      	adds	r7, #1
	result = layer->run(layer);
 80049de:	6823      	ldr	r3, [r4, #0]
 80049e0:	4620      	mov	r0, r4
 80049e2:	4798      	blx	r3
	if (layer->actail != NULL)
 80049e4:	6923      	ldr	r3, [r4, #16]
	result = layer->run(layer);
 80049e6:	4606      	mov	r6, r0
		layer->actail->run(layer->actail);
 80049e8:	4618      	mov	r0, r3
	if (layer->actail != NULL)
 80049ea:	b10b      	cbz	r3, 80049f0 <model_run_to+0x40>
		layer->actail->run(layer->actail);
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	4798      	blx	r3
			result = m->layer_callback(m, layer);
 80049f0:	4621      	mov	r1, r4
 80049f2:	4628      	mov	r0, r5
	layer->stat.time = nnom_us_get() - start;
 80049f4:	f8c4 8024 	str.w	r8, [r4, #36]	; 0x24
		if (result != NN_SUCCESS)
 80049f8:	2e00      	cmp	r6, #0
 80049fa:	d0e6      	beq.n	80049ca <model_run_to+0x1a>
			NNOM_LOG("Error: #%d %s layer return error code:%d\n", layer_num, default_layer_names[layer->type], result);
 80049fc:	7d23      	ldrb	r3, [r4, #20]
 80049fe:	4a10      	ldr	r2, [pc, #64]	; (8004a40 <model_run_to+0x90>)
 8004a00:	4810      	ldr	r0, [pc, #64]	; (8004a44 <model_run_to+0x94>)
 8004a02:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8004a06:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8004a0a:	4639      	mov	r1, r7
 8004a0c:	4633      	mov	r3, r6
 8004a0e:	f003 f965 	bl	8007cdc <iprintf>
	}

	return NN_SUCCESS;
}
 8004a12:	4630      	mov	r0, r6
 8004a14:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				NNOM_LOG("Error: Callback return error code %d at #%d %s layer\n", result, layer_num, default_layer_names[layer->type]);
 8004a18:	7d22      	ldrb	r2, [r4, #20]
 8004a1a:	4c09      	ldr	r4, [pc, #36]	; (8004a40 <model_run_to+0x90>)
 8004a1c:	480a      	ldr	r0, [pc, #40]	; (8004a48 <model_run_to+0x98>)
 8004a1e:	eb02 0342 	add.w	r3, r2, r2, lsl #1
			result = m->layer_callback(m, layer);
 8004a22:	460e      	mov	r6, r1
				NNOM_LOG("Error: Callback return error code %d at #%d %s layer\n", result, layer_num, default_layer_names[layer->type]);
 8004a24:	463a      	mov	r2, r7
 8004a26:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004a2a:	f003 f957 	bl	8007cdc <iprintf>
}
 8004a2e:	4630      	mov	r0, r6
 8004a30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	NNOM_NULL_CHECK(m);
 8004a34:	4805      	ldr	r0, [pc, #20]	; (8004a4c <model_run_to+0x9c>)
 8004a36:	f003 f9d9 	bl	8007dec <puts>
 8004a3a:	f04f 36ff 	mov.w	r6, #4294967295
 8004a3e:	e7e8      	b.n	8004a12 <model_run_to+0x62>
 8004a40:	08022e48 	.word	0x08022e48
 8004a44:	080231e0 	.word	0x080231e0
 8004a48:	0802320c 	.word	0x0802320c
 8004a4c:	08023244 	.word	0x08023244

08004a50 <model_run>:

// run all layers.
nnom_status_t model_run(nnom_model_t *m)
{
	return model_run_to(m, NULL);
 8004a50:	2100      	movs	r1, #0
 8004a52:	f7ff bfad 	b.w	80049b0 <model_run_to>
 8004a56:	bf00      	nop

08004a58 <relu_run>:
#include "arm_nnfunctions.h"
#endif

// porting
static nnom_status_t relu_run(nnom_activation_t* act)
{
 8004a58:	b508      	push	{r3, lr}
#ifdef NNOM_USING_CMSIS_NN
	arm_relu_q7(act->data, act->size);
 8004a5a:	8901      	ldrh	r1, [r0, #8]
 8004a5c:	6840      	ldr	r0, [r0, #4]
 8004a5e:	f7fb fbb7 	bl	80001d0 <arm_relu_q7>
#else
	local_relu_q7(act->data, act->size);
#endif
	return NN_SUCCESS;
}
 8004a62:	2000      	movs	r0, #0
 8004a64:	bd08      	pop	{r3, pc}
 8004a66:	bf00      	nop

08004a68 <act_relu>:
	return NN_SUCCESS;
}

//
nnom_activation_t* act_relu(void)
{
 8004a68:	b508      	push	{r3, lr}
	nnom_activation_t* act = nnom_mem(sizeof(nnom_activation_t));
 8004a6a:	2010      	movs	r0, #16
 8004a6c:	f7ff fa94 	bl	8003f98 <nnom_mem>
	act->run = relu_run;
 8004a70:	4a02      	ldr	r2, [pc, #8]	; (8004a7c <act_relu+0x14>)
 8004a72:	6002      	str	r2, [r0, #0]
	act->type = ACT_RELU;
 8004a74:	2200      	movs	r2, #0
 8004a76:	7382      	strb	r2, [r0, #14]
	return act;
}
 8004a78:	bd08      	pop	{r3, pc}
 8004a7a:	bf00      	nop
 8004a7c:	08004a59 	.word	0x08004a59

08004a80 <default_build>:

// this is call while output shape is not defined.
// this will set the output shape same as input shape, and it set only the primary IO
// this cannot be used as first layer, of course...
nnom_status_t default_build(nnom_layer_t *layer)
{
 8004a80:	b538      	push	{r3, r4, r5, lr}
 8004a82:	4604      	mov	r4, r0
	// get the last layer's output as input shape
	layer->in->tensor = layer->in->hook.io->tensor;
	// output tensor
	// 1. allocate a new tensor for output
	// 2. set the same dim, qfmt to the new tensor.
	layer->out->tensor = new_tensor(NULL, layer->in->tensor->num_dim);
 8004a84:	e9d4 2506 	ldrd	r2, r5, [r4, #24]
	layer->in->tensor = layer->in->hook.io->tensor;
 8004a88:	6813      	ldr	r3, [r2, #0]
 8004a8a:	68db      	ldr	r3, [r3, #12]
 8004a8c:	60d3      	str	r3, [r2, #12]
	layer->out->tensor = new_tensor(NULL, layer->in->tensor->num_dim);
 8004a8e:	7a19      	ldrb	r1, [r3, #8]
 8004a90:	2000      	movs	r0, #0
 8004a92:	f000 fd03 	bl	800549c <new_tensor>
	tensor_cpy_attributes(layer->out->tensor, layer->in->tensor);
 8004a96:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
	layer->out->tensor = new_tensor(NULL, layer->in->tensor->num_dim);
 8004a9a:	60e8      	str	r0, [r5, #12]
	tensor_cpy_attributes(layer->out->tensor, layer->in->tensor);
 8004a9c:	68d1      	ldr	r1, [r2, #12]
 8004a9e:	68d8      	ldr	r0, [r3, #12]
 8004aa0:	f000 fd60 	bl	8005564 <tensor_cpy_attributes>

	// now this build has passed the input tensors (shapes, formats) to the new tensors. 
	return NN_SUCCESS;
}
 8004aa4:	2000      	movs	r0, #0
 8004aa6:	bd38      	pop	{r3, r4, r5, pc}

08004aa8 <conv2d_build>:
}



nnom_status_t conv2d_build(nnom_layer_t *layer)
{
 8004aa8:	b530      	push	{r4, r5, lr}
 8004aaa:	4604      	mov	r4, r0

	// get the tensor from last layer's output
	layer->in->tensor = layer->in->hook.io->tensor;

	// create new tensor for output
	layer->out->tensor = new_tensor(NULL, layer->in->tensor->num_dim);
 8004aac:	e9d4 2506 	ldrd	r2, r5, [r4, #24]
	layer->in->tensor = layer->in->hook.io->tensor;
 8004ab0:	6813      	ldr	r3, [r2, #0]
 8004ab2:	68db      	ldr	r3, [r3, #12]
 8004ab4:	60d3      	str	r3, [r2, #12]
	layer->out->tensor = new_tensor(NULL, layer->in->tensor->num_dim);
 8004ab6:	7a19      	ldrb	r1, [r3, #8]
{
 8004ab8:	b083      	sub	sp, #12
	layer->out->tensor = new_tensor(NULL, layer->in->tensor->num_dim);
 8004aba:	2000      	movs	r0, #0
 8004abc:	f000 fcee 	bl	800549c <new_tensor>
	// copy then change later. 
	tensor_cpy_attributes(layer->out->tensor, layer->in->tensor);
 8004ac0:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
	layer->out->tensor = new_tensor(NULL, layer->in->tensor->num_dim);
 8004ac4:	60e8      	str	r0, [r5, #12]
	tensor_cpy_attributes(layer->out->tensor, layer->in->tensor);
 8004ac6:	68d1      	ldr	r1, [r2, #12]
 8004ac8:	68d8      	ldr	r0, [r3, #12]
 8004aca:	f000 fd4b 	bl	8005564 <tensor_cpy_attributes>

	// now we set up the tensor shape, always HWC format
	if (cl->padding_type == PADDING_SAME)
 8004ace:	f894 3040 	ldrb.w	r3, [r4, #64]	; 0x40
 8004ad2:	2b01      	cmp	r3, #1
	{
		layer->out->tensor->dim[0] = NN_CEILIF(layer->in->tensor->dim[0], cl->stride.h);
 8004ad4:	e9d4 3206 	ldrd	r3, r2, [r4, #24]
 8004ad8:	68db      	ldr	r3, [r3, #12]
 8004ada:	68d1      	ldr	r1, [r2, #12]
 8004adc:	685a      	ldr	r2, [r3, #4]
	if (cl->padding_type == PADDING_SAME)
 8004ade:	d039      	beq.n	8004b54 <conv2d_build+0xac>
		layer->out->tensor->dim[1] = NN_CEILIF(layer->in->tensor->dim[1], cl->stride.w);
		layer->out->tensor->dim[2] = cl->filter_mult; // channel stays the same
	}
	else
	{
		layer->out->tensor->dim[0] = NN_CEILIF(layer->in->tensor->dim[0] - cl->kernel.h + 1, cl->stride.h);
 8004ae0:	8da5      	ldrh	r5, [r4, #44]	; 0x2c
 8004ae2:	8813      	ldrh	r3, [r2, #0]
 8004ae4:	8e60      	ldrh	r0, [r4, #50]	; 0x32
 8004ae6:	6849      	ldr	r1, [r1, #4]
 8004ae8:	1b5b      	subs	r3, r3, r5
 8004aea:	4403      	add	r3, r0
 8004aec:	fb93 f3f0 	sdiv	r3, r3, r0
 8004af0:	800b      	strh	r3, [r1, #0]
		layer->out->tensor->dim[1] = NN_CEILIF(layer->in->tensor->dim[1] - cl->kernel.w + 1, cl->stride.w);
 8004af2:	8de5      	ldrh	r5, [r4, #46]	; 0x2e
 8004af4:	8853      	ldrh	r3, [r2, #2]
 8004af6:	8ea0      	ldrh	r0, [r4, #52]	; 0x34
 8004af8:	1b5b      	subs	r3, r3, r5
		layer->out->tensor->dim[2] = cl->filter_mult;
 8004afa:	6c65      	ldr	r5, [r4, #68]	; 0x44
 8004afc:	808d      	strh	r5, [r1, #4]
		layer->out->tensor->dim[1] = NN_CEILIF(layer->in->tensor->dim[1] - cl->kernel.w + 1, cl->stride.w);
 8004afe:	4403      	add	r3, r0
 8004b00:	fb93 f3f0 	sdiv	r3, r3, r0
 8004b04:	804b      	strh	r3, [r1, #2]
	}

	// bufferA size: (1D shape)
	// 2*ch_im_in*dim_kernel*dim_kernel
	layer->comp->shape = shape(2 * 2 * layer->in->tensor->dim[2] * cl->kernel.w * cl->kernel.h, 1, 1);
 8004b06:	8893      	ldrh	r3, [r2, #4]
 8004b08:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
 8004b0a:	8da1      	ldrh	r1, [r4, #44]	; 0x2c
 8004b0c:	68e5      	ldr	r5, [r4, #12]
 8004b0e:	009b      	lsls	r3, r3, #2
 8004b10:	fb02 f203 	mul.w	r2, r2, r3
 8004b14:	2301      	movs	r3, #1
 8004b16:	fb01 f102 	mul.w	r1, r1, r2
 8004b1a:	4668      	mov	r0, sp
 8004b1c:	461a      	mov	r2, r3
 8004b1e:	f000 fa95 	bl	800504c <shape>
	// computational cost: K x K x Cin x Hour x Wout x Cout
	layer->stat.macc = cl->kernel.w * cl->kernel.h * layer->in->tensor->dim[2] * tensor_size(layer->out->tensor);
 8004b22:	69a3      	ldr	r3, [r4, #24]
	layer->comp->shape = shape(2 * 2 * layer->in->tensor->dim[2] * cl->kernel.w * cl->kernel.h, 1, 1);
 8004b24:	9800      	ldr	r0, [sp, #0]
	layer->stat.macc = cl->kernel.w * cl->kernel.h * layer->in->tensor->dim[2] * tensor_size(layer->out->tensor);
 8004b26:	68db      	ldr	r3, [r3, #12]
	layer->comp->shape = shape(2 * 2 * layer->in->tensor->dim[2] * cl->kernel.w * cl->kernel.h, 1, 1);
 8004b28:	6068      	str	r0, [r5, #4]
 8004b2a:	f8bd 2004 	ldrh.w	r2, [sp, #4]
	layer->stat.macc = cl->kernel.w * cl->kernel.h * layer->in->tensor->dim[2] * tensor_size(layer->out->tensor);
 8004b2e:	685b      	ldr	r3, [r3, #4]
 8004b30:	69e1      	ldr	r1, [r4, #28]
	layer->comp->shape = shape(2 * 2 * layer->in->tensor->dim[2] * cl->kernel.w * cl->kernel.h, 1, 1);
 8004b32:	812a      	strh	r2, [r5, #8]
	layer->stat.macc = cl->kernel.w * cl->kernel.h * layer->in->tensor->dim[2] * tensor_size(layer->out->tensor);
 8004b34:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
 8004b36:	8da5      	ldrh	r5, [r4, #44]	; 0x2c
 8004b38:	889b      	ldrh	r3, [r3, #4]
 8004b3a:	68c8      	ldr	r0, [r1, #12]
 8004b3c:	fb05 f502 	mul.w	r5, r5, r2
 8004b40:	fb05 f503 	mul.w	r5, r5, r3
 8004b44:	f000 fc9a 	bl	800547c <tensor_size>
 8004b48:	fb00 f005 	mul.w	r0, r0, r5
 8004b4c:	6220      	str	r0, [r4, #32]
	return NN_SUCCESS;
}
 8004b4e:	2000      	movs	r0, #0
 8004b50:	b003      	add	sp, #12
 8004b52:	bd30      	pop	{r4, r5, pc}
		layer->out->tensor->dim[0] = NN_CEILIF(layer->in->tensor->dim[0], cl->stride.h);
 8004b54:	8e60      	ldrh	r0, [r4, #50]	; 0x32
 8004b56:	8813      	ldrh	r3, [r2, #0]
 8004b58:	6849      	ldr	r1, [r1, #4]
		layer->out->tensor->dim[2] = cl->filter_mult; // channel stays the same
 8004b5a:	6c65      	ldr	r5, [r4, #68]	; 0x44
		layer->out->tensor->dim[0] = NN_CEILIF(layer->in->tensor->dim[0], cl->stride.h);
 8004b5c:	4403      	add	r3, r0
 8004b5e:	3b01      	subs	r3, #1
 8004b60:	fb93 f3f0 	sdiv	r3, r3, r0
 8004b64:	800b      	strh	r3, [r1, #0]
		layer->out->tensor->dim[1] = NN_CEILIF(layer->in->tensor->dim[1], cl->stride.w);
 8004b66:	8ea0      	ldrh	r0, [r4, #52]	; 0x34
 8004b68:	8853      	ldrh	r3, [r2, #2]
		layer->out->tensor->dim[2] = cl->filter_mult; // channel stays the same
 8004b6a:	808d      	strh	r5, [r1, #4]
		layer->out->tensor->dim[1] = NN_CEILIF(layer->in->tensor->dim[1], cl->stride.w);
 8004b6c:	4403      	add	r3, r0
 8004b6e:	3b01      	subs	r3, #1
 8004b70:	fb93 f3f0 	sdiv	r3, r3, r0
 8004b74:	804b      	strh	r3, [r1, #2]
 8004b76:	e7c6      	b.n	8004b06 <conv2d_build+0x5e>

08004b78 <conv2d_run>:


nnom_status_t conv2d_run(nnom_layer_t *layer)
{
 8004b78:	e9d0 2306 	ldrd	r2, r3, [r0, #24]
 8004b7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b80:	68de      	ldr	r6, [r3, #12]
 8004b82:	68c3      	ldr	r3, [r0, #12]
#else
	// HWC format
	#ifdef NNOM_USING_CMSIS_NN
	//RGB
	// ch_im_in = 3, w = h
	if (layer->in->tensor->dim[2] == 3 && layer->in->tensor->dim[0] == layer->in->tensor->dim[1])
 8004b84:	68d2      	ldr	r2, [r2, #12]
 8004b86:	681f      	ldr	r7, [r3, #0]
 8004b88:	6851      	ldr	r1, [r2, #4]
 8004b8a:	f8d7 e000 	ldr.w	lr, [r7]
 8004b8e:	888d      	ldrh	r5, [r1, #4]
 8004b90:	f8d6 a004 	ldr.w	sl, [r6, #4]
 8004b94:	f990 b039 	ldrsb.w	fp, [r0, #57]	; 0x39
 8004b98:	f990 4038 	ldrsb.w	r4, [r0, #56]	; 0x38
 8004b9c:	6833      	ldr	r3, [r6, #0]
 8004b9e:	f8ba 8002 	ldrh.w	r8, [sl, #2]
 8004ba2:	f8ba 6004 	ldrh.w	r6, [sl, #4]
{
 8004ba6:	4684      	mov	ip, r0
 8004ba8:	b097      	sub	sp, #92	; 0x5c
 8004baa:	f8dc 7048 	ldr.w	r7, [ip, #72]	; 0x48
 8004bae:	6810      	ldr	r0, [r2, #0]
 8004bb0:	683f      	ldr	r7, [r7, #0]
 8004bb2:	9711      	str	r7, [sp, #68]	; 0x44
 8004bb4:	f8dc 704c 	ldr.w	r7, [ip, #76]	; 0x4c
 8004bb8:	880a      	ldrh	r2, [r1, #0]
 8004bba:	683f      	ldr	r7, [r7, #0]
 8004bbc:	9714      	str	r7, [sp, #80]	; 0x50
 8004bbe:	f8bc 703c 	ldrh.w	r7, [ip, #60]	; 0x3c
 8004bc2:	9712      	str	r7, [sp, #72]	; 0x48
	if (layer->in->tensor->dim[2] == 3 && layer->in->tensor->dim[0] == layer->in->tensor->dim[1])
 8004bc4:	2d03      	cmp	r5, #3
 8004bc6:	f8bc 7034 	ldrh.w	r7, [ip, #52]	; 0x34
 8004bca:	8849      	ldrh	r1, [r1, #2]
 8004bcc:	f8bc 902e 	ldrh.w	r9, [ip, #46]	; 0x2e
 8004bd0:	9713      	str	r7, [sp, #76]	; 0x4c
 8004bd2:	fa1f fb8b 	uxth.w	fp, fp
 8004bd6:	b2a4      	uxth	r4, r4
 8004bd8:	d04d      	beq.n	8004c76 <conv2d_run+0xfe>
			(q15_t *)(layer->comp->mem->blk), NULL);

	// check if can use optimized function
	//	ch_im_in is multiple of 4
	//	ch_im_out is multiple of 2
	if (layer->in->tensor->dim[2] % 4 == 0 &&
 8004bda:	07af      	lsls	r7, r5, #30
 8004bdc:	d132      	bne.n	8004c44 <conv2d_run+0xcc>
 8004bde:	f016 0701 	ands.w	r7, r6, #1
 8004be2:	9715      	str	r7, [sp, #84]	; 0x54
 8004be4:	d12e      	bne.n	8004c44 <conv2d_run+0xcc>
		layer->out->tensor->dim[2] % 2 == 0)
	{
		// 1x1 fast
		if (cl->kernel.w == 1 && cl->kernel.h == 1)
 8004be6:	f8dc 702c 	ldr.w	r7, [ip, #44]	; 0x2c
 8004bea:	f1b7 1f01 	cmp.w	r7, #65537	; 0x10001
 8004bee:	f000 8094 	beq.w	8004d1a <conv2d_run+0x1a2>
				cl->kernel.w, cl->kernel.h, cl->pad.w, cl->pad.h, cl->stride.w, cl->stride.h,
				cl->bias->p_value, cl->bias_shift,
				cl->output_shift, layer->out->tensor->p_data, layer->out->tensor->dim[1], layer->out->tensor->dim[0],
				(q15_t *)(layer->comp->mem->blk), NULL);
		// opt square shape
		if (layer->in->tensor->dim[0] == layer->in->tensor->dim[1])
 8004bf2:	4291      	cmp	r1, r2
 8004bf4:	d07d      	beq.n	8004cf2 <conv2d_run+0x17a>
				cl->bias->p_value, cl->bias_shift,
				cl->output_shift, layer->out->tensor->p_data,
				layer->out->tensor->dim[1], (q15_t *)(layer->comp->mem->blk), NULL);
		// opt none square shape
		else
			return (nnom_status_t)arm_convolve_HWC_q7_fast_nonsquare(
 8004bf6:	9f15      	ldr	r7, [sp, #84]	; 0x54
 8004bf8:	e9cd e70e 	strd	lr, r7, [sp, #56]	; 0x38
 8004bfc:	f8bc 7032 	ldrh.w	r7, [ip, #50]	; 0x32
 8004c00:	f8ba e000 	ldrh.w	lr, [sl]
 8004c04:	9715      	str	r7, [sp, #84]	; 0x54
 8004c06:	f8bc 703a 	ldrh.w	r7, [ip, #58]	; 0x3a
 8004c0a:	f8bc c02c 	ldrh.w	ip, [ip, #44]	; 0x2c
 8004c0e:	f8cd c00c 	str.w	ip, [sp, #12]
 8004c12:	e9cd 430a 	strd	r4, r3, [sp, #40]	; 0x28
 8004c16:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004c18:	9308      	str	r3, [sp, #32]
 8004c1a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004c1c:	9306      	str	r3, [sp, #24]
 8004c1e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004c20:	9304      	str	r3, [sp, #16]
 8004c22:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004c24:	9300      	str	r3, [sp, #0]
 8004c26:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8004c28:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8004c2c:	e9cd 6901 	strd	r6, r9, [sp, #4]
 8004c30:	462b      	mov	r3, r5
 8004c32:	9407      	str	r4, [sp, #28]
 8004c34:	9705      	str	r7, [sp, #20]
 8004c36:	e9cd 8e0c 	strd	r8, lr, [sp, #48]	; 0x30
 8004c3a:	f7fc fb63 	bl	8001304 <arm_convolve_HWC_q7_fast_nonsquare>
				layer->out->tensor->p_data,
				layer->out->tensor->dim[1], layer->out->tensor->dim[0], (q15_t *)(layer->comp->mem->blk), NULL);
	return NN_SUCCESS;
	#endif
#endif // end of CHW/HWC
}
 8004c3e:	b017      	add	sp, #92	; 0x5c
 8004c40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (layer->in->tensor->dim[0] == layer->in->tensor->dim[1])
 8004c44:	4291      	cmp	r1, r2
 8004c46:	d118      	bne.n	8004c7a <conv2d_run+0x102>
			return (nnom_status_t)arm_convolve_HWC_q7_basic(
 8004c48:	e9cd 4306 	strd	r4, r3, [sp, #24]
 8004c4c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004c4e:	9304      	str	r3, [sp, #16]
 8004c50:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004c52:	9303      	str	r3, [sp, #12]
 8004c54:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004c56:	f8cd b014 	str.w	fp, [sp, #20]
 8004c5a:	2700      	movs	r7, #0
 8004c5c:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8004c60:	e9cd 8e08 	strd	r8, lr, [sp, #32]
 8004c64:	9600      	str	r6, [sp, #0]
 8004c66:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004c68:	970a      	str	r7, [sp, #40]	; 0x28
 8004c6a:	462a      	mov	r2, r5
 8004c6c:	f7fb fd14 	bl	8000698 <arm_convolve_HWC_q7_basic>
}
 8004c70:	b017      	add	sp, #92	; 0x5c
 8004c72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (layer->in->tensor->dim[2] == 3 && layer->in->tensor->dim[0] == layer->in->tensor->dim[1])
 8004c76:	4291      	cmp	r1, r2
 8004c78:	d026      	beq.n	8004cc8 <conv2d_run+0x150>
			return (nnom_status_t)arm_convolve_HWC_q7_basic_nonsquare(
 8004c7a:	2700      	movs	r7, #0
 8004c7c:	e9cd e70e 	strd	lr, r7, [sp, #56]	; 0x38
 8004c80:	f8bc 7032 	ldrh.w	r7, [ip, #50]	; 0x32
 8004c84:	f8bc e03a 	ldrh.w	lr, [ip, #58]	; 0x3a
 8004c88:	9715      	str	r7, [sp, #84]	; 0x54
 8004c8a:	f8bc c02c 	ldrh.w	ip, [ip, #44]	; 0x2c
 8004c8e:	f8ba 7000 	ldrh.w	r7, [sl]
 8004c92:	930b      	str	r3, [sp, #44]	; 0x2c
 8004c94:	462b      	mov	r3, r5
 8004c96:	9d14      	ldr	r5, [sp, #80]	; 0x50
 8004c98:	9508      	str	r5, [sp, #32]
 8004c9a:	9d13      	ldr	r5, [sp, #76]	; 0x4c
 8004c9c:	9506      	str	r5, [sp, #24]
 8004c9e:	9d12      	ldr	r5, [sp, #72]	; 0x48
 8004ca0:	9504      	str	r5, [sp, #16]
 8004ca2:	9d11      	ldr	r5, [sp, #68]	; 0x44
 8004ca4:	9500      	str	r5, [sp, #0]
 8004ca6:	e9cd b409 	strd	fp, r4, [sp, #36]	; 0x24
 8004caa:	e9cd 6901 	strd	r6, r9, [sp, #4]
 8004cae:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8004cb0:	f8cd e014 	str.w	lr, [sp, #20]
 8004cb4:	f8cd c00c 	str.w	ip, [sp, #12]
 8004cb8:	9407      	str	r4, [sp, #28]
 8004cba:	e9cd 870c 	strd	r8, r7, [sp, #48]	; 0x30
 8004cbe:	f7fb fe33 	bl	8000928 <arm_convolve_HWC_q7_basic_nonsquare>
}
 8004cc2:	b017      	add	sp, #92	; 0x5c
 8004cc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return (nnom_status_t)arm_convolve_HWC_q7_RGB(
 8004cc8:	e9cd 4306 	strd	r4, r3, [sp, #24]
 8004ccc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004cce:	9304      	str	r3, [sp, #16]
 8004cd0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004cd2:	9303      	str	r3, [sp, #12]
 8004cd4:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004cd6:	f8cd b014 	str.w	fp, [sp, #20]
 8004cda:	2700      	movs	r7, #0
 8004cdc:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8004ce0:	e9cd 8e08 	strd	r8, lr, [sp, #32]
 8004ce4:	9600      	str	r6, [sp, #0]
 8004ce6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004ce8:	970a      	str	r7, [sp, #40]	; 0x28
 8004cea:	462a      	mov	r2, r5
 8004cec:	f7fb fb6e 	bl	80003cc <arm_convolve_HWC_q7_RGB>
 8004cf0:	e7be      	b.n	8004c70 <conv2d_run+0xf8>
			return (nnom_status_t)arm_convolve_HWC_q7_fast(
 8004cf2:	e9cd 3807 	strd	r3, r8, [sp, #28]
 8004cf6:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004cf8:	9304      	str	r3, [sp, #16]
 8004cfa:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004cfc:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8004cfe:	9303      	str	r3, [sp, #12]
 8004d00:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004d02:	9600      	str	r6, [sp, #0]
 8004d04:	e9cd e209 	strd	lr, r2, [sp, #36]	; 0x24
 8004d08:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8004d0c:	e9cd b405 	strd	fp, r4, [sp, #20]
 8004d10:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004d12:	462a      	mov	r2, r5
 8004d14:	f7fb ff60 	bl	8000bd8 <arm_convolve_HWC_q7_fast>
 8004d18:	e7aa      	b.n	8004c70 <conv2d_run+0xf8>
			return (nnom_status_t)arm_convolve_1x1_HWC_q7_fast_nonsquare(
 8004d1a:	9f15      	ldr	r7, [sp, #84]	; 0x54
 8004d1c:	e9cd e70e 	strd	lr, r7, [sp, #56]	; 0x38
 8004d20:	f8bc 7032 	ldrh.w	r7, [ip, #50]	; 0x32
 8004d24:	f8bc e03a 	ldrh.w	lr, [ip, #58]	; 0x3a
 8004d28:	9715      	str	r7, [sp, #84]	; 0x54
 8004d2a:	f8bc c02c 	ldrh.w	ip, [ip, #44]	; 0x2c
 8004d2e:	f8ba 7000 	ldrh.w	r7, [sl]
 8004d32:	f8cd c00c 	str.w	ip, [sp, #12]
 8004d36:	e9cd 430a 	strd	r4, r3, [sp, #40]	; 0x28
 8004d3a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004d3c:	9308      	str	r3, [sp, #32]
 8004d3e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8004d40:	9306      	str	r3, [sp, #24]
 8004d42:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8004d44:	9304      	str	r3, [sp, #16]
 8004d46:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004d48:	9300      	str	r3, [sp, #0]
 8004d4a:	9c15      	ldr	r4, [sp, #84]	; 0x54
 8004d4c:	f8cd b024 	str.w	fp, [sp, #36]	; 0x24
 8004d50:	e9cd 6901 	strd	r6, r9, [sp, #4]
 8004d54:	462b      	mov	r3, r5
 8004d56:	9407      	str	r4, [sp, #28]
 8004d58:	f8cd e014 	str.w	lr, [sp, #20]
 8004d5c:	e9cd 870c 	strd	r8, r7, [sp, #48]	; 0x30
 8004d60:	f7fb fa6c 	bl	800023c <arm_convolve_1x1_HWC_q7_fast_nonsquare>
 8004d64:	e784      	b.n	8004c70 <conv2d_run+0xf8>
 8004d66:	bf00      	nop

08004d68 <Conv2D>:
{
 8004d68:	b082      	sub	sp, #8
 8004d6a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004d6e:	b083      	sub	sp, #12
 8004d70:	4681      	mov	r9, r0
 8004d72:	466d      	mov	r5, sp
	layer = nnom_mem(mem_size);
 8004d74:	2094      	movs	r0, #148	; 0x94
{
 8004d76:	930b      	str	r3, [sp, #44]	; 0x2c
 8004d78:	f89d 6034 	ldrb.w	r6, [sp, #52]	; 0x34
 8004d7c:	e885 0006 	stmia.w	r5, {r1, r2}
 8004d80:	e9dd 780e 	ldrd	r7, r8, [sp, #56]	; 0x38
	layer = nnom_mem(mem_size);
 8004d84:	f7ff f908 	bl	8003f98 <nnom_mem>
	if (layer == NULL)
 8004d88:	4604      	mov	r4, r0
 8004d8a:	2800      	cmp	r0, #0
 8004d8c:	d049      	beq.n	8004e22 <Conv2D+0xba>
	in->type = LAYER_BUF_TEMP;
 8004d8e:	2301      	movs	r3, #1
	layer->super.type = NNOM_CONV_2D;
 8004d90:	2204      	movs	r2, #4
 8004d92:	7502      	strb	r2, [r0, #20]
	in->type = LAYER_BUF_TEMP;
 8004d94:	f880 3068 	strb.w	r3, [r0, #104]	; 0x68
	out->type = LAYER_BUF_TEMP;
 8004d98:	f880 3084 	strb.w	r3, [r0, #132]	; 0x84
	comp->type = LAYER_BUF_TEMP;
 8004d9c:	f880 3092 	strb.w	r3, [r0, #146]	; 0x92
	layer->super.in = io_init(layer, in);
 8004da0:	f100 0150 	add.w	r1, r0, #80	; 0x50
 8004da4:	f000 f96a 	bl	800507c <io_init>
	layer->super.out = io_init(layer, out);
 8004da8:	f104 016c 	add.w	r1, r4, #108	; 0x6c
	layer->super.in = io_init(layer, in);
 8004dac:	61a0      	str	r0, [r4, #24]
	layer->super.out = io_init(layer, out);
 8004dae:	4620      	mov	r0, r4
 8004db0:	f000 f964 	bl	800507c <io_init>
 8004db4:	61e0      	str	r0, [r4, #28]
	layer->kernel = k;
 8004db6:	e895 0003 	ldmia.w	r5, {r0, r1}
	layer->output_shift = w->shift;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
	layer->super.run = conv2d_run;
 8004dc0:	4d1b      	ldr	r5, [pc, #108]	; (8004e30 <Conv2D+0xc8>)
	layer->super.build = conv2d_build;
 8004dc2:	4a1c      	ldr	r2, [pc, #112]	; (8004e34 <Conv2D+0xcc>)
	layer->bias_shift = b->shift; // bias is quantized to have maximum shift of weights
 8004dc4:	f8d8 c004 	ldr.w	ip, [r8, #4]
	layer->kernel = k;
 8004dc8:	62e0      	str	r0, [r4, #44]	; 0x2c
 8004dca:	8621      	strh	r1, [r4, #48]	; 0x30
	layer->stride = s;
 8004dcc:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8004dce:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
	layer->bias = b;
 8004dd2:	f8c4 804c 	str.w	r8, [r4, #76]	; 0x4c
	comp = (void *)((uint8_t*)out + sizeof(nnom_layer_io_t));
 8004dd6:	f104 0188 	add.w	r1, r4, #136	; 0x88
	if (layer->padding_type == PADDING_SAME)
 8004dda:	2e01      	cmp	r6, #1
	layer->weights = w;
 8004ddc:	64a7      	str	r7, [r4, #72]	; 0x48
	layer->bias_shift = b->shift; // bias is quantized to have maximum shift of weights
 8004dde:	f884 c039 	strb.w	ip, [r4, #57]	; 0x39
	layer->filter_mult = filters; // for convs, this means filter number
 8004de2:	f8c4 9044 	str.w	r9, [r4, #68]	; 0x44
	layer->padding_type = pad_type;
 8004de6:	f884 6040 	strb.w	r6, [r4, #64]	; 0x40
	layer->super.comp = comp;
 8004dea:	60e1      	str	r1, [r4, #12]
	layer->super.build = conv2d_build;
 8004dec:	e9c4 5200 	strd	r5, r2, [r4]
	layer->stride = s;
 8004df0:	f8c4 0032 	str.w	r0, [r4, #50]	; 0x32
 8004df4:	86e3      	strh	r3, [r4, #54]	; 0x36
	if (layer->padding_type == PADDING_SAME)
 8004df6:	d114      	bne.n	8004e22 <Conv2D+0xba>
		layer->pad.w = (k.w - 1) / 2;
 8004df8:	f8bd 1002 	ldrh.w	r1, [sp, #2]
		layer->pad.h = (k.h - 1) / 2;
 8004dfc:	f8bd 2000 	ldrh.w	r2, [sp]
		layer->pad.c = (k.c - 1) / 2;
 8004e00:	f8bd 3004 	ldrh.w	r3, [sp, #4]
		layer->pad.w = (k.w - 1) / 2;
 8004e04:	3901      	subs	r1, #1
		layer->pad.h = (k.h - 1) / 2;
 8004e06:	3a01      	subs	r2, #1
		layer->pad.c = (k.c - 1) / 2;
 8004e08:	3b01      	subs	r3, #1
		layer->pad.w = (k.w - 1) / 2;
 8004e0a:	eb01 71d1 	add.w	r1, r1, r1, lsr #31
		layer->pad.h = (k.h - 1) / 2;
 8004e0e:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
		layer->pad.c = (k.c - 1) / 2;
 8004e12:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
		layer->pad.w = (k.w - 1) / 2;
 8004e16:	1049      	asrs	r1, r1, #1
		layer->pad.h = (k.h - 1) / 2;
 8004e18:	1052      	asrs	r2, r2, #1
		layer->pad.c = (k.c - 1) / 2;
 8004e1a:	105b      	asrs	r3, r3, #1
		layer->pad.w = (k.w - 1) / 2;
 8004e1c:	87a1      	strh	r1, [r4, #60]	; 0x3c
		layer->pad.h = (k.h - 1) / 2;
 8004e1e:	8762      	strh	r2, [r4, #58]	; 0x3a
		layer->pad.c = (k.c - 1) / 2;
 8004e20:	87e3      	strh	r3, [r4, #62]	; 0x3e
}
 8004e22:	4620      	mov	r0, r4
 8004e24:	b003      	add	sp, #12
 8004e26:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004e2a:	b002      	add	sp, #8
 8004e2c:	4770      	bx	lr
 8004e2e:	bf00      	nop
 8004e30:	08004b79 	.word	0x08004b79
 8004e34:	08004aa9 	.word	0x08004aa9

08004e38 <dense_build>:

	return (nnom_layer_t *)layer;
}

nnom_status_t dense_build(nnom_layer_t *layer)
{
 8004e38:	b570      	push	{r4, r5, r6, lr}

	// get the tensor from last layer's output
	layer->in->tensor = layer->in->hook.io->tensor;

	// create new tensor for output
	layer->out->tensor = new_tensor(NULL, 1);
 8004e3a:	e9d0 3506 	ldrd	r3, r5, [r0, #24]
	layer->in->tensor = layer->in->hook.io->tensor;
 8004e3e:	681a      	ldr	r2, [r3, #0]
 8004e40:	68d2      	ldr	r2, [r2, #12]
 8004e42:	60da      	str	r2, [r3, #12]
{
 8004e44:	b084      	sub	sp, #16
 8004e46:	4604      	mov	r4, r0
	layer->out->tensor = new_tensor(NULL, 1);
 8004e48:	2101      	movs	r1, #1
 8004e4a:	2000      	movs	r0, #0
 8004e4c:	f000 fb26 	bl	800549c <new_tensor>
	// setup new tensor
	nnom_qformat_t qfmt = {0 , 0}; // fill this later when layer API changed. 
 8004e50:	2600      	movs	r6, #0
	nnom_shape_data_t dim[1] = {cl->output_unit};
	tensor_set_attribuites(layer->out->tensor, qfmt, 1, dim);
 8004e52:	69e2      	ldr	r2, [r4, #28]
	nnom_shape_data_t dim[1] = {cl->output_unit};
 8004e54:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
	nnom_qformat_t qfmt = {0 , 0}; // fill this later when layer API changed. 
 8004e56:	f8ad 6008 	strh.w	r6, [sp, #8]
	nnom_shape_data_t dim[1] = {cl->output_unit};
 8004e5a:	ab04      	add	r3, sp, #16
	layer->out->tensor = new_tensor(NULL, 1);
 8004e5c:	60e8      	str	r0, [r5, #12]
	nnom_shape_data_t dim[1] = {cl->output_unit};
 8004e5e:	f823 1d04 	strh.w	r1, [r3, #-4]!
	tensor_set_attribuites(layer->out->tensor, qfmt, 1, dim);
 8004e62:	68d0      	ldr	r0, [r2, #12]
 8004e64:	9902      	ldr	r1, [sp, #8]
 8004e66:	2201      	movs	r2, #1
 8004e68:	f000 fb2a 	bl	80054c0 <tensor_set_attribuites>

	// vec_buffer size: dim_vec (*2, q7->q15) ? I am not sure this is right
	layer->comp->shape = shape(tensor_size(layer->in->tensor)*2, 1, 1);
 8004e6c:	69a3      	ldr	r3, [r4, #24]
 8004e6e:	68d8      	ldr	r0, [r3, #12]
 8004e70:	f000 fb04 	bl	800547c <tensor_size>
 8004e74:	2301      	movs	r3, #1
 8004e76:	fa00 f103 	lsl.w	r1, r0, r3
 8004e7a:	68e5      	ldr	r5, [r4, #12]
 8004e7c:	4668      	mov	r0, sp
 8004e7e:	461a      	mov	r2, r3
 8004e80:	f000 f8e4 	bl	800504c <shape>
 8004e84:	9800      	ldr	r0, [sp, #0]

	// computational cost: In * out
	layer->stat.macc = tensor_size(layer->in->tensor) * tensor_size(layer->out->tensor);
 8004e86:	69a3      	ldr	r3, [r4, #24]
	layer->comp->shape = shape(tensor_size(layer->in->tensor)*2, 1, 1);
 8004e88:	6068      	str	r0, [r5, #4]
 8004e8a:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 8004e8e:	812a      	strh	r2, [r5, #8]
	layer->stat.macc = tensor_size(layer->in->tensor) * tensor_size(layer->out->tensor);
 8004e90:	68d8      	ldr	r0, [r3, #12]
 8004e92:	f000 faf3 	bl	800547c <tensor_size>
 8004e96:	69e3      	ldr	r3, [r4, #28]
 8004e98:	4605      	mov	r5, r0
 8004e9a:	68d8      	ldr	r0, [r3, #12]
 8004e9c:	f000 faee 	bl	800547c <tensor_size>
 8004ea0:	fb00 f005 	mul.w	r0, r0, r5
 8004ea4:	6220      	str	r0, [r4, #32]
	return NN_SUCCESS;
}
 8004ea6:	4630      	mov	r0, r6
 8004ea8:	b004      	add	sp, #16
 8004eaa:	bd70      	pop	{r4, r5, r6, pc}

08004eac <dense_run>:

nnom_status_t dense_run(nnom_layer_t *layer)
{
 8004eac:	b5f0      	push	{r4, r5, r6, r7, lr}
		result = (nnom_status_t)arm_fully_connected_q7_opt(
	#else
		local_fully_connected_q7_opt(
	#endif
#endif
			layer->in->tensor->p_data,
 8004eae:	6982      	ldr	r2, [r0, #24]
			cl->weights->p_value,
 8004eb0:	6b03      	ldr	r3, [r0, #48]	; 0x30
{
 8004eb2:	4604      	mov	r4, r0
			layer->in->tensor->p_data,
 8004eb4:	68d0      	ldr	r0, [r2, #12]
			cl->weights->p_value,
 8004eb6:	681f      	ldr	r7, [r3, #0]
			layer->in->tensor->p_data,
 8004eb8:	6806      	ldr	r6, [r0, #0]
{
 8004eba:	b087      	sub	sp, #28
			tensor_size(layer->in->tensor), layer->out->tensor->dim[0],
 8004ebc:	f000 fade 	bl	800547c <tensor_size>
 8004ec0:	69e2      	ldr	r2, [r4, #28]
			cl->bias_shift, cl->output_shift,
			cl->bias->p_value,
			layer->out->tensor->p_data, (q15_t *)(layer->comp->mem->blk));
 8004ec2:	68e3      	ldr	r3, [r4, #12]
			tensor_size(layer->in->tensor), layer->out->tensor->dim[0],
 8004ec4:	68d2      	ldr	r2, [r2, #12]
			layer->out->tensor->p_data, (q15_t *)(layer->comp->mem->blk));
 8004ec6:	6819      	ldr	r1, [r3, #0]
		result = (nnom_status_t)arm_fully_connected_q7_opt(
 8004ec8:	6853      	ldr	r3, [r2, #4]
 8004eca:	6809      	ldr	r1, [r1, #0]
 8004ecc:	881b      	ldrh	r3, [r3, #0]
 8004ece:	9104      	str	r1, [sp, #16]
 8004ed0:	6811      	ldr	r1, [r2, #0]
 8004ed2:	f994 5038 	ldrsb.w	r5, [r4, #56]	; 0x38
			cl->bias->p_value,
 8004ed6:	6b62      	ldr	r2, [r4, #52]	; 0x34
		result = (nnom_status_t)arm_fully_connected_q7_opt(
 8004ed8:	f994 4039 	ldrsb.w	r4, [r4, #57]	; 0x39
 8004edc:	9103      	str	r1, [sp, #12]
 8004ede:	6812      	ldr	r2, [r2, #0]
 8004ee0:	9202      	str	r2, [sp, #8]
 8004ee2:	b2ad      	uxth	r5, r5
 8004ee4:	b2a4      	uxth	r4, r4
 8004ee6:	b282      	uxth	r2, r0
 8004ee8:	4639      	mov	r1, r7
 8004eea:	4630      	mov	r0, r6
 8004eec:	e9cd 4500 	strd	r4, r5, [sp]
 8004ef0:	f7fd f83a 	bl	8001f68 <arm_fully_connected_q7_opt>


	return result;
}
 8004ef4:	b007      	add	sp, #28
 8004ef6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004ef8 <Dense>:
{
 8004ef8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004efa:	4607      	mov	r7, r0
	layer = nnom_mem(mem_size);
 8004efc:	2080      	movs	r0, #128	; 0x80
{
 8004efe:	460d      	mov	r5, r1
 8004f00:	4616      	mov	r6, r2
	layer = nnom_mem(mem_size);
 8004f02:	f7ff f849 	bl	8003f98 <nnom_mem>
	if (layer == NULL)
 8004f06:	4604      	mov	r4, r0
 8004f08:	b320      	cbz	r0, 8004f54 <Dense+0x5c>
	in->type = LAYER_BUF_TEMP;
 8004f0a:	2301      	movs	r3, #1
	layer->super.type = NNOM_DENSE;
 8004f0c:	2207      	movs	r2, #7
 8004f0e:	7502      	strb	r2, [r0, #20]
	in->type = LAYER_BUF_TEMP;
 8004f10:	f880 3054 	strb.w	r3, [r0, #84]	; 0x54
	out->type = LAYER_BUF_TEMP;
 8004f14:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
	comp->type = LAYER_BUF_TEMP;
 8004f18:	f880 307e 	strb.w	r3, [r0, #126]	; 0x7e
	layer->super.in = io_init(layer, in);
 8004f1c:	f100 013c 	add.w	r1, r0, #60	; 0x3c
 8004f20:	f000 f8ac 	bl	800507c <io_init>
	layer->super.out = io_init(layer, out);
 8004f24:	f104 0158 	add.w	r1, r4, #88	; 0x58
	layer->super.in = io_init(layer, in);
 8004f28:	61a0      	str	r0, [r4, #24]
	layer->super.out = io_init(layer, out);
 8004f2a:	4620      	mov	r0, r4
 8004f2c:	f000 f8a6 	bl	800507c <io_init>
	layer->output_shift = w->shift;
 8004f30:	686b      	ldr	r3, [r5, #4]
 8004f32:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
	layer->super.run = dense_run;
 8004f36:	4a08      	ldr	r2, [pc, #32]	; (8004f58 <Dense+0x60>)
	layer->super.build = dense_build;
 8004f38:	4b08      	ldr	r3, [pc, #32]	; (8004f5c <Dense+0x64>)
	layer->bias_shift = b->shift; // bias is quantized to have maximum shift of weights
 8004f3a:	f8d6 c004 	ldr.w	ip, [r6, #4]
 8004f3e:	f884 c039 	strb.w	ip, [r4, #57]	; 0x39
	layer->super.build = dense_build;
 8004f42:	e9c4 2300 	strd	r2, r3, [r4]
	comp = (void *)((uint8_t*)out + sizeof(nnom_layer_io_t));
 8004f46:	f104 0174 	add.w	r1, r4, #116	; 0x74
	layer->super.out = io_init(layer, out);
 8004f4a:	61e0      	str	r0, [r4, #28]
	layer->bias = b;
 8004f4c:	6366      	str	r6, [r4, #52]	; 0x34
	layer->weights = w;
 8004f4e:	6325      	str	r5, [r4, #48]	; 0x30
	layer->output_unit = output_unit;
 8004f50:	62e7      	str	r7, [r4, #44]	; 0x2c
	layer->super.comp = comp;
 8004f52:	60e1      	str	r1, [r4, #12]
}
 8004f54:	4620      	mov	r0, r4
 8004f56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004f58:	08004ead 	.word	0x08004ead
 8004f5c:	08004e39 	.word	0x08004e39

08004f60 <input_build>:

	return (nnom_layer_t *)layer;
}

nnom_status_t input_build(nnom_layer_t* layer)
{
 8004f60:	b538      	push	{r3, r4, r5, lr}
 8004f62:	4604      	mov	r4, r0
	// the input tensor of inputlayer has assigned previously 

	// output tensor
	// 1. allocate a new tensor for output
	// 2. set the same dim, qfmt to the new tensor.
	layer->out->tensor = new_tensor(NULL, layer->in->tensor->num_dim);
 8004f64:	e9d4 3506 	ldrd	r3, r5, [r4, #24]
 8004f68:	68db      	ldr	r3, [r3, #12]
 8004f6a:	2000      	movs	r0, #0
 8004f6c:	7a19      	ldrb	r1, [r3, #8]
 8004f6e:	f000 fa95 	bl	800549c <new_tensor>
	tensor_cpy_attributes(layer->out->tensor, layer->in->tensor);
 8004f72:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
	layer->out->tensor = new_tensor(NULL, layer->in->tensor->num_dim);
 8004f76:	60e8      	str	r0, [r5, #12]
	tensor_cpy_attributes(layer->out->tensor, layer->in->tensor);
 8004f78:	68d1      	ldr	r1, [r2, #12]
 8004f7a:	68d8      	ldr	r0, [r3, #12]
 8004f7c:	f000 faf2 	bl	8005564 <tensor_cpy_attributes>

	// now this build has passed the input tensors (shapes, formats) to the new tensors. 
	return NN_SUCCESS;
}
 8004f80:	2000      	movs	r0, #0
 8004f82:	bd38      	pop	{r3, r4, r5, pc}

08004f84 <input_run>:


nnom_status_t input_run(nnom_layer_t *layer)
{
 8004f84:	b538      	push	{r3, r4, r5, lr}
	nnom_io_layer_t *cl = (nnom_io_layer_t *)layer;
#ifdef NNOM_USING_CHW
	tensor_hwc2chw_q7(layer->out->tensor, layer->in->tensor);
#else
	memcpy(layer->in->tensor->p_data, cl->buf, tensor_size(layer->in->tensor));
 8004f86:	6983      	ldr	r3, [r0, #24]
 8004f88:	6b45      	ldr	r5, [r0, #52]	; 0x34
 8004f8a:	68d8      	ldr	r0, [r3, #12]
 8004f8c:	6804      	ldr	r4, [r0, #0]
 8004f8e:	f000 fa75 	bl	800547c <tensor_size>
 8004f92:	4629      	mov	r1, r5
 8004f94:	4602      	mov	r2, r0
 8004f96:	4620      	mov	r0, r4
 8004f98:	f002 f962 	bl	8007260 <memcpy>
#endif
	return NN_SUCCESS;
}
 8004f9c:	2000      	movs	r0, #0
 8004f9e:	bd38      	pop	{r3, r4, r5, pc}

08004fa0 <Input>:
{
 8004fa0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004fa2:	b085      	sub	sp, #20
 8004fa4:	466d      	mov	r5, sp
 8004fa6:	e885 0003 	stmia.w	r5, {r0, r1}
	layer = nnom_mem(mem_size);
 8004faa:	2070      	movs	r0, #112	; 0x70
{
 8004fac:	4617      	mov	r7, r2
	layer = nnom_mem(mem_size);
 8004fae:	f7fe fff3 	bl	8003f98 <nnom_mem>
	if (layer == NULL)
 8004fb2:	4604      	mov	r4, r0
 8004fb4:	2800      	cmp	r0, #0
 8004fb6:	d037      	beq.n	8005028 <Input+0x88>
	layer->super.type = NNOM_INPUT;
 8004fb8:	2302      	movs	r3, #2
	layer->super.build = input_build;
 8004fba:	4a1d      	ldr	r2, [pc, #116]	; (8005030 <Input+0x90>)
	layer->super.run = input_run;
 8004fbc:	491d      	ldr	r1, [pc, #116]	; (8005034 <Input+0x94>)
	layer->super.type = NNOM_INPUT;
 8004fbe:	7503      	strb	r3, [r0, #20]
	out->type = LAYER_BUF_NULL;
 8004fc0:	2600      	movs	r6, #0
	in->type = LAYER_BUF_TEMP;
 8004fc2:	2301      	movs	r3, #1
	layer->super.build = input_build;
 8004fc4:	6042      	str	r2, [r0, #4]
	in->type = LAYER_BUF_TEMP;
 8004fc6:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
	layer->super.run = input_run;
 8004fca:	6001      	str	r1, [r0, #0]
	out->type = LAYER_BUF_NULL;
 8004fcc:	f880 606c 	strb.w	r6, [r0, #108]	; 0x6c
	layer->super.in = io_init(layer, in);
 8004fd0:	f100 0138 	add.w	r1, r0, #56	; 0x38
 8004fd4:	f000 f852 	bl	800507c <io_init>
	layer->super.out = io_init(layer, out);
 8004fd8:	f104 0154 	add.w	r1, r4, #84	; 0x54
	layer->super.in = io_init(layer, in);
 8004fdc:	61a0      	str	r0, [r4, #24]
	layer->super.out = io_init(layer, out);
 8004fde:	4620      	mov	r0, r4
 8004fe0:	f000 f84c 	bl	800507c <io_init>
 8004fe4:	61e0      	str	r0, [r4, #28]
	layer->shape = input_shape;
 8004fe6:	e895 0003 	ldmia.w	r5, {r0, r1}
	nnom_shape_data_t dim[3] = { input_shape.h, input_shape.w, input_shape.c };
 8004fea:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8004fee:	f8bd 5000 	ldrh.w	r5, [sp]
 8004ff2:	f8bd 3004 	ldrh.w	r3, [sp, #4]
	layer->shape = input_shape;
 8004ff6:	62e0      	str	r0, [r4, #44]	; 0x2c
 8004ff8:	8621      	strh	r1, [r4, #48]	; 0x30
	layer->super.in->tensor = new_tensor(NULL, 3); 
 8004ffa:	4630      	mov	r0, r6
 8004ffc:	2103      	movs	r1, #3
	layer->buf = p_buf;
 8004ffe:	6367      	str	r7, [r4, #52]	; 0x34
	nnom_shape_data_t dim[3] = { input_shape.h, input_shape.w, input_shape.c };
 8005000:	f8ad 5008 	strh.w	r5, [sp, #8]
 8005004:	f8ad 200a 	strh.w	r2, [sp, #10]
 8005008:	f8ad 300c 	strh.w	r3, [sp, #12]
	layer->super.in->tensor = new_tensor(NULL, 3); 
 800500c:	69a5      	ldr	r5, [r4, #24]
 800500e:	f000 fa45 	bl	800549c <new_tensor>
	tensor_set_attribuites(layer->super.in->tensor, layer->super.in->tensor->qfmt, 3, dim);
 8005012:	69a3      	ldr	r3, [r4, #24]
	layer->super.in->tensor = new_tensor(NULL, 3); 
 8005014:	60e8      	str	r0, [r5, #12]
	tensor_set_attribuites(layer->super.in->tensor, layer->super.in->tensor->qfmt, 3, dim);
 8005016:	68d8      	ldr	r0, [r3, #12]
 8005018:	7a43      	ldrb	r3, [r0, #9]
 800501a:	7a81      	ldrb	r1, [r0, #10]
 800501c:	2203      	movs	r2, #3
 800501e:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
 8005022:	ab02      	add	r3, sp, #8
 8005024:	f000 fa4c 	bl	80054c0 <tensor_set_attribuites>
}
 8005028:	4620      	mov	r0, r4
 800502a:	b005      	add	sp, #20
 800502c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800502e:	bf00      	nop
 8005030:	08004f61 	.word	0x08004f61
 8005034:	08004f85 	.word	0x08004f85

08005038 <shape_size>:
#include "nnom_local.h"
#include "nnom_layers.h"

size_t shape_size(nnom_shape_t *s)
{
	if (s == NULL)
 8005038:	b130      	cbz	r0, 8005048 <shape_size+0x10>
		return 0;
	return s->h * s->w * s->c;
 800503a:	8802      	ldrh	r2, [r0, #0]
 800503c:	8843      	ldrh	r3, [r0, #2]
 800503e:	8880      	ldrh	r0, [r0, #4]
 8005040:	fb03 f302 	mul.w	r3, r3, r2
 8005044:	fb00 f003 	mul.w	r0, r0, r3
}
 8005048:	4770      	bx	lr
 800504a:	bf00      	nop

0800504c <shape>:

nnom_shape_t shape(size_t h, size_t w, size_t c)
{
 800504c:	b410      	push	{r4}
	nnom_shape_t s;
	s.h = h;
 800504e:	8001      	strh	r1, [r0, #0]
	s.w = w;
 8005050:	8042      	strh	r2, [r0, #2]
	s.c = c;
 8005052:	8083      	strh	r3, [r0, #4]
	return s;
}
 8005054:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005058:	4770      	bx	lr
 800505a:	bf00      	nop

0800505c <kernel>:
nnom_shape_t kernel(size_t h, size_t w)
{
 800505c:	b410      	push	{r4}
	return s;
 800505e:	2401      	movs	r4, #1
 8005060:	8084      	strh	r4, [r0, #4]
	s.h = h;
 8005062:	8001      	strh	r1, [r0, #0]
	s.w = w;
 8005064:	8042      	strh	r2, [r0, #2]
	return shape(h, w, 1);
}
 8005066:	f85d 4b04 	ldr.w	r4, [sp], #4
 800506a:	4770      	bx	lr

0800506c <stride>:
 800506c:	b410      	push	{r4}
 800506e:	2401      	movs	r4, #1
 8005070:	8084      	strh	r4, [r0, #4]
 8005072:	8001      	strh	r1, [r0, #0]
 8005074:	8042      	strh	r2, [r0, #2]
 8005076:	f85d 4b04 	ldr.w	r4, [sp], #4
 800507a:	4770      	bx	lr

0800507c <io_init>:

// this function has to be used while assign a io for a layer.
// because the io needs to know who is its owner.
nnom_layer_io_t *io_init(void *owner_layer, nnom_layer_io_t *io)
{
	io->owner = (nnom_layer_t *)owner_layer;
 800507c:	6148      	str	r0, [r1, #20]
	return io;
}
 800507e:	4608      	mov	r0, r1
 8005080:	4770      	bx	lr
 8005082:	bf00      	nop

08005084 <local_maxpool_q7_HWC>:
	const uint16_t stride_y,     // stride
	const uint16_t dim_im_out_x, // output image dimension x or W
	const uint16_t dim_im_out_y, // output image dimension y or H
	q7_t *bufferA,               // a buffer for local storage, NULL by now
	q7_t *Im_out)
{
 8005084:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005088:	b095      	sub	sp, #84	; 0x54
 800508a:	468b      	mov	fp, r1
 800508c:	9201      	str	r2, [sp, #4]
 800508e:	f8bd 2078 	ldrh.w	r2, [sp, #120]	; 0x78
 8005092:	9209      	str	r2, [sp, #36]	; 0x24
 8005094:	f8bd 207c 	ldrh.w	r2, [sp, #124]	; 0x7c
 8005098:	920e      	str	r2, [sp, #56]	; 0x38
 800509a:	f8bd 2080 	ldrh.w	r2, [sp, #128]	; 0x80
 800509e:	9208      	str	r2, [sp, #32]
 80050a0:	f8bd 2084 	ldrh.w	r2, [sp, #132]	; 0x84
 80050a4:	920d      	str	r2, [sp, #52]	; 0x34
 80050a6:	f8bd 2088 	ldrh.w	r2, [sp, #136]	; 0x88
 80050aa:	9202      	str	r2, [sp, #8]
 80050ac:	f8bd 208c 	ldrh.w	r2, [sp, #140]	; 0x8c
 80050b0:	920c      	str	r2, [sp, #48]	; 0x30
 80050b2:	f8bd 1094 	ldrh.w	r1, [sp, #148]	; 0x94
 80050b6:	f8bd 2090 	ldrh.w	r2, [sp, #144]	; 0x90
 80050ba:	9012      	str	r0, [sp, #72]	; 0x48
 80050bc:	9203      	str	r2, [sp, #12]
 80050be:	910f      	str	r1, [sp, #60]	; 0x3c
    int16_t i_ch_in, i_x, i_y;
    int16_t k_x, k_y;

    for (i_ch_in = 0; i_ch_in < ch_im_in; i_ch_in++)
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	f000 8082 	beq.w	80051ca <local_maxpool_q7_HWC+0x146>
 80050c6:	2900      	cmp	r1, #0
 80050c8:	d07f      	beq.n	80051ca <local_maxpool_q7_HWC+0x146>
 80050ca:	2a00      	cmp	r2, #0
 80050cc:	d07d      	beq.n	80051ca <local_maxpool_q7_HWC+0x146>
 80050ce:	9a08      	ldr	r2, [sp, #32]
 80050d0:	4251      	negs	r1, r2
 80050d2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80050d4:	4252      	negs	r2, r2
 80050d6:	469a      	mov	sl, r3
 80050d8:	b289      	uxth	r1, r1
 80050da:	2300      	movs	r3, #0
 80050dc:	b292      	uxth	r2, r2
 80050de:	9311      	str	r3, [sp, #68]	; 0x44
 80050e0:	9110      	str	r1, [sp, #64]	; 0x40
 80050e2:	9213      	str	r2, [sp, #76]	; 0x4c
 80050e4:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80050e6:	910a      	str	r1, [sp, #40]	; 0x28
 80050e8:	9927      	ldr	r1, [sp, #156]	; 0x9c
 80050ea:	4419      	add	r1, r3
 80050ec:	9107      	str	r1, [sp, #28]
                {
                    for (k_x = i_x * stride_x - padding_x; k_x < i_x * stride_x - padding_x + dim_kernel_x; k_x++)
                    {
                        if (k_y >= 0 && k_x >= 0 && k_y < dim_im_in_y && k_x < dim_im_in_x)
                        {
                            if (Im_in[i_ch_in + ch_im_in * (k_x + k_y * dim_im_in_x)] > max)
 80050ee:	9912      	ldr	r1, [sp, #72]	; 0x48
        for (i_y = 0; i_y < dim_im_out_y; i_y++)
 80050f0:	2200      	movs	r2, #0
                            if (Im_in[i_ch_in + ch_im_in * (k_x + k_y * dim_im_in_x)] > max)
 80050f2:	18cb      	adds	r3, r1, r3
        for (i_y = 0; i_y < dim_im_out_y; i_y++)
 80050f4:	920b      	str	r2, [sp, #44]	; 0x2c
                            if (Im_in[i_ch_in + ch_im_in * (k_x + k_y * dim_im_in_x)] > max)
 80050f6:	9306      	str	r3, [sp, #24]
                for (k_y = i_y * stride_y - padding_y; k_y < i_y * stride_y - padding_y + dim_kernel_y; k_y++)
 80050f8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80050fa:	990e      	ldr	r1, [sp, #56]	; 0x38
 80050fc:	f8dd 9040 	ldr.w	r9, [sp, #64]	; 0x40
 8005100:	fb02 1603 	mla	r6, r2, r3, r1
 8005104:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005106:	1af6      	subs	r6, r6, r3
                                max = Im_in[i_ch_in + ch_im_in * (k_x + k_y * dim_im_in_x)];
                            }
                        }
                    }
                }
                Im_out[i_ch_in + ch_im_in * (i_x + i_y * dim_im_out_x)] = max;
 8005108:	9b03      	ldr	r3, [sp, #12]
 800510a:	fb03 f302 	mul.w	r3, r3, r2
            for (i_x = 0; i_x < dim_im_out_x; i_x++)
 800510e:	f04f 0e00 	mov.w	lr, #0
                Im_out[i_ch_in + ch_im_in * (i_x + i_y * dim_im_out_x)] = max;
 8005112:	9304      	str	r3, [sp, #16]
                for (k_y = i_y * stride_y - padding_y; k_y < i_y * stride_y - padding_y + dim_kernel_y; k_y++)
 8005114:	f9bd 3028 	ldrsh.w	r3, [sp, #40]	; 0x28
 8005118:	9305      	str	r3, [sp, #20]
            for (i_x = 0; i_x < dim_im_out_x; i_x++)
 800511a:	4677      	mov	r7, lr
                for (k_y = i_y * stride_y - padding_y; k_y < i_y * stride_y - padding_y + dim_kernel_y; k_y++)
 800511c:	9b05      	ldr	r3, [sp, #20]
 800511e:	42b3      	cmp	r3, r6
 8005120:	da6a      	bge.n	80051f8 <local_maxpool_q7_HWC+0x174>
                    for (k_x = i_x * stride_x - padding_x; k_x < i_x * stride_x - padding_x + dim_kernel_x; k_x++)
 8005122:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005124:	9a02      	ldr	r2, [sp, #8]
 8005126:	fb07 1202 	mla	r2, r7, r2, r1
 800512a:	9908      	ldr	r1, [sp, #32]
 800512c:	fa0f f589 	sxth.w	r5, r9
 8005130:	1a52      	subs	r2, r2, r1
                int max = -129;
 8005132:	f06f 0880 	mvn.w	r8, #128	; 0x80
                for (k_y = i_y * stride_y - padding_y; k_y < i_y * stride_y - padding_y + dim_kernel_y; k_y++)
 8005136:	4619      	mov	r1, r3
                    for (k_x = i_x * stride_x - padding_x; k_x < i_x * stride_x - padding_x + dim_kernel_x; k_x++)
 8005138:	4295      	cmp	r5, r2
 800513a:	da1a      	bge.n	8005172 <local_maxpool_q7_HWC+0xee>
 800513c:	2900      	cmp	r1, #0
                            if (Im_in[i_ch_in + ch_im_in * (k_x + k_y * dim_im_in_x)] > max)
 800513e:	fb03 fc0b 	mul.w	ip, r3, fp
 8005142:	db4e      	blt.n	80051e2 <local_maxpool_q7_HWC+0x15e>
 8005144:	9801      	ldr	r0, [sp, #4]
 8005146:	4298      	cmp	r0, r3
                    for (k_x = i_x * stride_x - padding_x; k_x < i_x * stride_x - padding_x + dim_kernel_x; k_x++)
 8005148:	462b      	mov	r3, r5
 800514a:	dd41      	ble.n	80051d0 <local_maxpool_q7_HWC+0x14c>
                            if (Im_in[i_ch_in + ch_im_in * (k_x + k_y * dim_im_in_x)] > max)
 800514c:	462c      	mov	r4, r5
 800514e:	1c58      	adds	r0, r3, #1
                        if (k_y >= 0 && k_x >= 0 && k_y < dim_im_in_y && k_x < dim_im_in_x)
 8005150:	2b00      	cmp	r3, #0
 8005152:	b203      	sxth	r3, r0
 8005154:	db0a      	blt.n	800516c <local_maxpool_q7_HWC+0xe8>
                            if (Im_in[i_ch_in + ch_im_in * (k_x + k_y * dim_im_in_x)] > max)
 8005156:	eb0c 0004 	add.w	r0, ip, r4
                        if (k_y >= 0 && k_x >= 0 && k_y < dim_im_in_y && k_x < dim_im_in_x)
 800515a:	45a3      	cmp	fp, r4
                            if (Im_in[i_ch_in + ch_im_in * (k_x + k_y * dim_im_in_x)] > max)
 800515c:	fb0a f000 	mul.w	r0, sl, r0
                        if (k_y >= 0 && k_x >= 0 && k_y < dim_im_in_y && k_x < dim_im_in_x)
 8005160:	dd04      	ble.n	800516c <local_maxpool_q7_HWC+0xe8>
                            if (Im_in[i_ch_in + ch_im_in * (k_x + k_y * dim_im_in_x)] > max)
 8005162:	9c06      	ldr	r4, [sp, #24]
 8005164:	5620      	ldrsb	r0, [r4, r0]
 8005166:	4580      	cmp	r8, r0
 8005168:	bfb8      	it	lt
 800516a:	4680      	movlt	r8, r0
                    for (k_x = i_x * stride_x - padding_x; k_x < i_x * stride_x - padding_x + dim_kernel_x; k_x++)
 800516c:	4293      	cmp	r3, r2
 800516e:	461c      	mov	r4, r3
 8005170:	dbed      	blt.n	800514e <local_maxpool_q7_HWC+0xca>
 8005172:	3101      	adds	r1, #1
 8005174:	b209      	sxth	r1, r1
                for (k_y = i_y * stride_y - padding_y; k_y < i_y * stride_y - padding_y + dim_kernel_y; k_y++)
 8005176:	42b1      	cmp	r1, r6
 8005178:	460b      	mov	r3, r1
 800517a:	dbdd      	blt.n	8005138 <local_maxpool_q7_HWC+0xb4>
 800517c:	fa4f f888 	sxtb.w	r8, r8
                Im_out[i_ch_in + ch_im_in * (i_x + i_y * dim_im_out_x)] = max;
 8005180:	9b04      	ldr	r3, [sp, #16]
 8005182:	441f      	add	r7, r3
 8005184:	9b02      	ldr	r3, [sp, #8]
 8005186:	fb0a f707 	mul.w	r7, sl, r7
 800518a:	4499      	add	r9, r3
 800518c:	9b07      	ldr	r3, [sp, #28]
 800518e:	f10e 0e01 	add.w	lr, lr, #1
 8005192:	f803 8007 	strb.w	r8, [r3, r7]
            for (i_x = 0; i_x < dim_im_out_x; i_x++)
 8005196:	9b03      	ldr	r3, [sp, #12]
 8005198:	fa0f fe8e 	sxth.w	lr, lr
 800519c:	459e      	cmp	lr, r3
 800519e:	fa1f f989 	uxth.w	r9, r9
 80051a2:	4677      	mov	r7, lr
 80051a4:	dbba      	blt.n	800511c <local_maxpool_q7_HWC+0x98>
 80051a6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80051a8:	990c      	ldr	r1, [sp, #48]	; 0x30
 80051aa:	3301      	adds	r3, #1
 80051ac:	b21a      	sxth	r2, r3
 80051ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80051b0:	920b      	str	r2, [sp, #44]	; 0x2c
 80051b2:	440b      	add	r3, r1
        for (i_y = 0; i_y < dim_im_out_y; i_y++)
 80051b4:	990f      	ldr	r1, [sp, #60]	; 0x3c
 80051b6:	b29b      	uxth	r3, r3
 80051b8:	428a      	cmp	r2, r1
 80051ba:	930a      	str	r3, [sp, #40]	; 0x28
 80051bc:	db9c      	blt.n	80050f8 <local_maxpool_q7_HWC+0x74>
 80051be:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80051c0:	3301      	adds	r3, #1
 80051c2:	b21b      	sxth	r3, r3
    for (i_ch_in = 0; i_ch_in < ch_im_in; i_ch_in++)
 80051c4:	4553      	cmp	r3, sl
 80051c6:	9311      	str	r3, [sp, #68]	; 0x44
 80051c8:	db8c      	blt.n	80050e4 <local_maxpool_q7_HWC+0x60>
            }
        }
    }
}
 80051ca:	b015      	add	sp, #84	; 0x54
 80051cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80051d0:	3301      	adds	r3, #1
 80051d2:	b21b      	sxth	r3, r3
                    for (k_x = i_x * stride_x - padding_x; k_x < i_x * stride_x - padding_x + dim_kernel_x; k_x++)
 80051d4:	429a      	cmp	r2, r3
 80051d6:	ddcc      	ble.n	8005172 <local_maxpool_q7_HWC+0xee>
 80051d8:	3301      	adds	r3, #1
 80051da:	b21b      	sxth	r3, r3
 80051dc:	429a      	cmp	r2, r3
 80051de:	dcf7      	bgt.n	80051d0 <local_maxpool_q7_HWC+0x14c>
 80051e0:	e7c7      	b.n	8005172 <local_maxpool_q7_HWC+0xee>
 80051e2:	462b      	mov	r3, r5
 80051e4:	3301      	adds	r3, #1
 80051e6:	b21b      	sxth	r3, r3
 80051e8:	429a      	cmp	r2, r3
 80051ea:	dcfb      	bgt.n	80051e4 <local_maxpool_q7_HWC+0x160>
 80051ec:	3101      	adds	r1, #1
 80051ee:	b209      	sxth	r1, r1
                for (k_y = i_y * stride_y - padding_y; k_y < i_y * stride_y - padding_y + dim_kernel_y; k_y++)
 80051f0:	42b1      	cmp	r1, r6
 80051f2:	460b      	mov	r3, r1
 80051f4:	dba0      	blt.n	8005138 <local_maxpool_q7_HWC+0xb4>
 80051f6:	e7c1      	b.n	800517c <local_maxpool_q7_HWC+0xf8>
 80051f8:	f04f 087f 	mov.w	r8, #127	; 0x7f
 80051fc:	e7c0      	b.n	8005180 <local_maxpool_q7_HWC+0xfc>
 80051fe:	bf00      	nop

08005200 <maxpooling_build>:
	}
	return (nnom_layer_t *)layer;
}

nnom_status_t maxpooling_build(nnom_layer_t *layer)
{
 8005200:	b538      	push	{r3, r4, r5, lr}
 8005202:	4604      	mov	r4, r0

	// get the tensor from last layer's output
	layer->in->tensor = layer->in->hook.io->tensor;

	// create new tensor for output
	layer->out->tensor = new_tensor(NULL, layer->in->tensor->num_dim);
 8005204:	e9d4 2506 	ldrd	r2, r5, [r4, #24]
	layer->in->tensor = layer->in->hook.io->tensor;
 8005208:	6813      	ldr	r3, [r2, #0]
 800520a:	68db      	ldr	r3, [r3, #12]
 800520c:	60d3      	str	r3, [r2, #12]
	layer->out->tensor = new_tensor(NULL, layer->in->tensor->num_dim);
 800520e:	7a19      	ldrb	r1, [r3, #8]
 8005210:	2000      	movs	r0, #0
 8005212:	f000 f943 	bl	800549c <new_tensor>
	// copy then change later. 
	tensor_cpy_attributes(layer->out->tensor, layer->in->tensor);
 8005216:	e9d4 2306 	ldrd	r2, r3, [r4, #24]
	layer->out->tensor = new_tensor(NULL, layer->in->tensor->num_dim);
 800521a:	60e8      	str	r0, [r5, #12]
	tensor_cpy_attributes(layer->out->tensor, layer->in->tensor);
 800521c:	68d1      	ldr	r1, [r2, #12]
 800521e:	68d8      	ldr	r0, [r3, #12]
 8005220:	f000 f9a0 	bl	8005564 <tensor_cpy_attributes>

	// now we set up the tensor shape, always HWC format
	if (cl->padding_type == PADDING_SAME)
 8005224:	f894 303e 	ldrb.w	r3, [r4, #62]	; 0x3e
 8005228:	2b01      	cmp	r3, #1
	{
		layer->out->tensor->dim[0] = NN_CEILIF(layer->in->tensor->dim[0], cl->stride.h);
 800522a:	e9d4 3206 	ldrd	r3, r2, [r4, #24]
 800522e:	68db      	ldr	r3, [r3, #12]
 8005230:	68d2      	ldr	r2, [r2, #12]
 8005232:	6859      	ldr	r1, [r3, #4]
	if (cl->padding_type == PADDING_SAME)
 8005234:	d014      	beq.n	8005260 <maxpooling_build+0x60>
		layer->out->tensor->dim[1] = NN_CEILIF(layer->in->tensor->dim[1], cl->stride.w);
		layer->out->tensor->dim[2] = layer->in->tensor->dim[2]; // channel stays the same
	}
	else
	{
		layer->out->tensor->dim[0] = NN_CEILIF(layer->in->tensor->dim[0] - cl->kernel.h + 1, cl->stride.h);
 8005236:	8da5      	ldrh	r5, [r4, #44]	; 0x2c
 8005238:	880b      	ldrh	r3, [r1, #0]
 800523a:	8e60      	ldrh	r0, [r4, #50]	; 0x32
 800523c:	6852      	ldr	r2, [r2, #4]
 800523e:	1b5b      	subs	r3, r3, r5
 8005240:	4403      	add	r3, r0
 8005242:	fb93 f3f0 	sdiv	r3, r3, r0
 8005246:	8013      	strh	r3, [r2, #0]
		layer->out->tensor->dim[1] = NN_CEILIF(layer->in->tensor->dim[1] - cl->kernel.w + 1, cl->stride.w);
 8005248:	884b      	ldrh	r3, [r1, #2]
 800524a:	8de5      	ldrh	r5, [r4, #46]	; 0x2e
 800524c:	8ea0      	ldrh	r0, [r4, #52]	; 0x34
 800524e:	1b5b      	subs	r3, r3, r5
 8005250:	4403      	add	r3, r0
 8005252:	fb93 f3f0 	sdiv	r3, r3, r0
 8005256:	8053      	strh	r3, [r2, #2]
		layer->out->tensor->dim[2] = layer->in->tensor->dim[2];
 8005258:	888b      	ldrh	r3, [r1, #4]
 800525a:	8093      	strh	r3, [r2, #4]
	}

	return NN_SUCCESS;
}
 800525c:	2000      	movs	r0, #0
 800525e:	bd38      	pop	{r3, r4, r5, pc}
		layer->out->tensor->dim[0] = NN_CEILIF(layer->in->tensor->dim[0], cl->stride.h);
 8005260:	8e60      	ldrh	r0, [r4, #50]	; 0x32
 8005262:	880b      	ldrh	r3, [r1, #0]
 8005264:	6852      	ldr	r2, [r2, #4]
 8005266:	4403      	add	r3, r0
 8005268:	3b01      	subs	r3, #1
 800526a:	fb93 f3f0 	sdiv	r3, r3, r0
 800526e:	8013      	strh	r3, [r2, #0]
		layer->out->tensor->dim[1] = NN_CEILIF(layer->in->tensor->dim[1], cl->stride.w);
 8005270:	8ea0      	ldrh	r0, [r4, #52]	; 0x34
 8005272:	884b      	ldrh	r3, [r1, #2]
 8005274:	4403      	add	r3, r0
 8005276:	3b01      	subs	r3, #1
 8005278:	fb93 f3f0 	sdiv	r3, r3, r0
 800527c:	8053      	strh	r3, [r2, #2]
		layer->out->tensor->dim[2] = layer->in->tensor->dim[2]; // channel stays the same
 800527e:	888b      	ldrh	r3, [r1, #4]
 8005280:	8093      	strh	r3, [r2, #4]
}
 8005282:	2000      	movs	r0, #0
 8005284:	bd38      	pop	{r3, r4, r5, pc}
 8005286:	bf00      	nop

08005288 <maxpool_run>:

nnom_status_t maxpool_run(nnom_layer_t *layer)
{
 8005288:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800528c:	e9d0 2506 	ldrd	r2, r5, [r0, #24]
			layer->out->mem->blk);
#else //end of CHW
	// HWC
	#ifdef NNOM_USING_CMSIS_NN
	// 2D, square
	if (layer->in->tensor->dim[1] == layer->in->tensor->dim[0] &&
 8005290:	68d3      	ldr	r3, [r2, #12]
 8005292:	68ec      	ldr	r4, [r5, #12]
 8005294:	685b      	ldr	r3, [r3, #4]
 8005296:	6916      	ldr	r6, [r2, #16]
 8005298:	8859      	ldrh	r1, [r3, #2]
 800529a:	881a      	ldrh	r2, [r3, #0]
 800529c:	6864      	ldr	r4, [r4, #4]
 800529e:	692d      	ldr	r5, [r5, #16]
 80052a0:	889f      	ldrh	r7, [r3, #4]
 80052a2:	f8d5 c000 	ldr.w	ip, [r5]
 80052a6:	6836      	ldr	r6, [r6, #0]
 80052a8:	8865      	ldrh	r5, [r4, #2]
 80052aa:	8dc3      	ldrh	r3, [r0, #46]	; 0x2e
 80052ac:	8824      	ldrh	r4, [r4, #0]
 80052ae:	f8b0 903a 	ldrh.w	r9, [r0, #58]	; 0x3a
 80052b2:	f8b0 a034 	ldrh.w	sl, [r0, #52]	; 0x34
 80052b6:	4291      	cmp	r1, r2
{
 80052b8:	b08a      	sub	sp, #40	; 0x28
	if (layer->in->tensor->dim[1] == layer->in->tensor->dim[0] &&
 80052ba:	d101      	bne.n	80052c0 <maxpool_run+0x38>
 80052bc:	42ac      	cmp	r4, r5
 80052be:	d01e      	beq.n	80052fe <maxpool_run+0x76>
	// none square 2D, or 1D
	else
	#endif
	{
		// CMSIS-NN does not support none-square pooling, we have to use local implementation
		local_maxpool_q7_HWC(layer->in->mem->blk, 				
 80052c0:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
 80052c4:	f8b0 c032 	ldrh.w	ip, [r0, #50]	; 0x32
 80052c8:	9407      	str	r4, [sp, #28]
 80052ca:	8f04      	ldrh	r4, [r0, #56]	; 0x38
 80052cc:	f8b0 802c 	ldrh.w	r8, [r0, #44]	; 0x2c
 80052d0:	f8cd 8004 	str.w	r8, [sp, #4]
 80052d4:	f04f 0e00 	mov.w	lr, #0
 80052d8:	9300      	str	r3, [sp, #0]
 80052da:	9506      	str	r5, [sp, #24]
 80052dc:	f8cd a010 	str.w	sl, [sp, #16]
 80052e0:	f8cd 9008 	str.w	r9, [sp, #8]
 80052e4:	463b      	mov	r3, r7
 80052e6:	4630      	mov	r0, r6
 80052e8:	f8cd e020 	str.w	lr, [sp, #32]
 80052ec:	f8cd c014 	str.w	ip, [sp, #20]
 80052f0:	9403      	str	r4, [sp, #12]
 80052f2:	f7ff fec7 	bl	8005084 <local_maxpool_q7_HWC>
				NULL,
				layer->out->mem->blk);
	}
#endif // CHW/HWC
	return NN_SUCCESS;
}
 80052f6:	2000      	movs	r0, #0
 80052f8:	b00a      	add	sp, #40	; 0x28
 80052fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		arm_maxpool_q7_HWC(
 80052fe:	2500      	movs	r5, #0
 8005300:	f8cd c010 	str.w	ip, [sp, #16]
 8005304:	e9cd a401 	strd	sl, r4, [sp, #4]
 8005308:	f8cd 9000 	str.w	r9, [sp]
 800530c:	463a      	mov	r2, r7
 800530e:	4630      	mov	r0, r6
 8005310:	9503      	str	r5, [sp, #12]
 8005312:	f7fc ffc7 	bl	80022a4 <arm_maxpool_q7_HWC>
 8005316:	e7ee      	b.n	80052f6 <maxpool_run+0x6e>

08005318 <MaxPool>:
{
 8005318:	b5f0      	push	{r4, r5, r6, r7, lr}
 800531a:	b085      	sub	sp, #20
 800531c:	ad02      	add	r5, sp, #8
 800531e:	e885 0003 	stmia.w	r5, {r0, r1}
 8005322:	466e      	mov	r6, sp
	layer = nnom_mem(mem_size);
 8005324:	2088      	movs	r0, #136	; 0x88
{
 8005326:	e886 000c 	stmia.w	r6, {r2, r3}
 800532a:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
	layer = nnom_mem(mem_size);
 800532e:	f7fe fe33 	bl	8003f98 <nnom_mem>
	if (layer == NULL)
 8005332:	4604      	mov	r4, r0
 8005334:	b350      	cbz	r0, 800538c <MaxPool+0x74>
	layer->super.type = NNOM_MAXPOOL;
 8005336:	2210      	movs	r2, #16
	layer->super.run = maxpool_run;
 8005338:	4b1f      	ldr	r3, [pc, #124]	; (80053b8 <MaxPool+0xa0>)
	layer->super.type = NNOM_MAXPOOL;
 800533a:	7502      	strb	r2, [r0, #20]
	layer->super.run = maxpool_run;
 800533c:	6003      	str	r3, [r0, #0]
	layer->super.build = maxpooling_build;
 800533e:	4a1f      	ldr	r2, [pc, #124]	; (80053bc <MaxPool+0xa4>)
 8005340:	6042      	str	r2, [r0, #4]
	in->type = LAYER_BUF_TEMP;
 8005342:	2301      	movs	r3, #1
 8005344:	f880 305c 	strb.w	r3, [r0, #92]	; 0x5c
	out->type = LAYER_BUF_TEMP;
 8005348:	f880 3078 	strb.w	r3, [r0, #120]	; 0x78
	comp->type = LAYER_BUF_TEMP;
 800534c:	f880 3086 	strb.w	r3, [r0, #134]	; 0x86
	layer->super.in = io_init(layer, in);
 8005350:	f100 0144 	add.w	r1, r0, #68	; 0x44
 8005354:	f7ff fe92 	bl	800507c <io_init>
	layer->super.out = io_init(layer, out);
 8005358:	f104 0160 	add.w	r1, r4, #96	; 0x60
	layer->super.in = io_init(layer, in);
 800535c:	61a0      	str	r0, [r4, #24]
	layer->super.out = io_init(layer, out);
 800535e:	4620      	mov	r0, r4
 8005360:	f7ff fe8c 	bl	800507c <io_init>
 8005364:	61e0      	str	r0, [r4, #28]
	layer->kernel = k;
 8005366:	e895 0003 	ldmia.w	r5, {r0, r1}
	layer->stride = s;
 800536a:	88b2      	ldrh	r2, [r6, #4]
	layer->kernel = k;
 800536c:	62e0      	str	r0, [r4, #44]	; 0x2c
	comp = (void *)((uint8_t*)out + sizeof(nnom_layer_io_t));
 800536e:	f104 037c 	add.w	r3, r4, #124	; 0x7c
	layer->stride = s;
 8005372:	9800      	ldr	r0, [sp, #0]
 8005374:	86e2      	strh	r2, [r4, #54]	; 0x36
	if (layer->padding_type == PADDING_SAME)
 8005376:	2f01      	cmp	r7, #1
	layer->kernel = k;
 8005378:	8621      	strh	r1, [r4, #48]	; 0x30
	layer->padding_type = pad_type;
 800537a:	f884 703e 	strb.w	r7, [r4, #62]	; 0x3e
	layer->super.comp = comp;
 800537e:	60e3      	str	r3, [r4, #12]
	layer->stride = s;
 8005380:	f8c4 0032 	str.w	r0, [r4, #50]	; 0x32
	if (layer->padding_type == PADDING_SAME)
 8005384:	d005      	beq.n	8005392 <MaxPool+0x7a>
		layer->pad.h = 0;
 8005386:	2300      	movs	r3, #0
 8005388:	63a3      	str	r3, [r4, #56]	; 0x38
		layer->pad.c = 0;
 800538a:	87a3      	strh	r3, [r4, #60]	; 0x3c
}
 800538c:	4620      	mov	r0, r4
 800538e:	b005      	add	sp, #20
 8005390:	bdf0      	pop	{r4, r5, r6, r7, pc}
		layer->pad.h = (k.h - 1) / 2;
 8005392:	f8bd 2008 	ldrh.w	r2, [sp, #8]
		layer->pad.w = (k.w - 1) / 2;
 8005396:	f8bd 300a 	ldrh.w	r3, [sp, #10]
		layer->pad.c = 1; // no meaning
 800539a:	87a7      	strh	r7, [r4, #60]	; 0x3c
		layer->pad.h = (k.h - 1) / 2;
 800539c:	3a01      	subs	r2, #1
		layer->pad.w = (k.w - 1) / 2;
 800539e:	3b01      	subs	r3, #1
		layer->pad.h = (k.h - 1) / 2;
 80053a0:	eb02 72d2 	add.w	r2, r2, r2, lsr #31
		layer->pad.w = (k.w - 1) / 2;
 80053a4:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
		layer->pad.h = (k.h - 1) / 2;
 80053a8:	1052      	asrs	r2, r2, #1
		layer->pad.w = (k.w - 1) / 2;
 80053aa:	105b      	asrs	r3, r3, #1
}
 80053ac:	4620      	mov	r0, r4
		layer->pad.h = (k.h - 1) / 2;
 80053ae:	8722      	strh	r2, [r4, #56]	; 0x38
		layer->pad.w = (k.w - 1) / 2;
 80053b0:	8763      	strh	r3, [r4, #58]	; 0x3a
}
 80053b2:	b005      	add	sp, #20
 80053b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80053b6:	bf00      	nop
 80053b8:	08005289 	.word	0x08005289
 80053bc:	08005201 	.word	0x08005201

080053c0 <output_run>:


nnom_status_t output_run(nnom_layer_t *layer)
{
	nnom_io_layer_t *cl = (nnom_io_layer_t *)layer;
	memcpy(cl->buf, layer->in->tensor->p_data, tensor_size(layer->out->tensor)); // in->memory -> user memory
 80053c0:	e9d0 2106 	ldrd	r2, r1, [r0, #24]
{
 80053c4:	b538      	push	{r3, r4, r5, lr}
	memcpy(cl->buf, layer->in->tensor->p_data, tensor_size(layer->out->tensor)); // in->memory -> user memory
 80053c6:	68d2      	ldr	r2, [r2, #12]
{
 80053c8:	4603      	mov	r3, r0
	memcpy(cl->buf, layer->in->tensor->p_data, tensor_size(layer->out->tensor)); // in->memory -> user memory
 80053ca:	68c8      	ldr	r0, [r1, #12]
 80053cc:	6815      	ldr	r5, [r2, #0]
 80053ce:	6b5c      	ldr	r4, [r3, #52]	; 0x34
 80053d0:	f000 f854 	bl	800547c <tensor_size>
 80053d4:	4629      	mov	r1, r5
 80053d6:	4602      	mov	r2, r0
 80053d8:	4620      	mov	r0, r4
 80053da:	f001 ff41 	bl	8007260 <memcpy>
	return NN_SUCCESS;
}
 80053de:	2000      	movs	r0, #0
 80053e0:	bd38      	pop	{r3, r4, r5, pc}
 80053e2:	bf00      	nop

080053e4 <Output>:
{
 80053e4:	b500      	push	{lr}
 80053e6:	b083      	sub	sp, #12
 80053e8:	466b      	mov	r3, sp
 80053ea:	e883 0003 	stmia.w	r3, {r0, r1}
	nnom_layer_t *layer = Input(output_shape, p_buf);
 80053ee:	e893 0003 	ldmia.w	r3, {r0, r1}
 80053f2:	f7ff fdd5 	bl	8004fa0 <Input>
	if (layer != NULL)
 80053f6:	b128      	cbz	r0, 8005404 <Output+0x20>
		layer->run = output_run;
 80053f8:	4a04      	ldr	r2, [pc, #16]	; (800540c <Output+0x28>)
		layer->build = default_build;
 80053fa:	4b05      	ldr	r3, [pc, #20]	; (8005410 <Output+0x2c>)
 80053fc:	e9c0 2300 	strd	r2, r3, [r0]
		layer->type = NNOM_OUTPUT;
 8005400:	2103      	movs	r1, #3
 8005402:	7501      	strb	r1, [r0, #20]
}
 8005404:	b003      	add	sp, #12
 8005406:	f85d fb04 	ldr.w	pc, [sp], #4
 800540a:	bf00      	nop
 800540c:	080053c1 	.word	0x080053c1
 8005410:	08004a81 	.word	0x08004a81

08005414 <softmax_run>:

	return layer;
}

nnom_status_t softmax_run(nnom_layer_t *layer)
{
 8005414:	b538      	push	{r3, r4, r5, lr}
	#ifdef NNOM_USING_CMSIS_NN
	// temporary fixed for mutiple dimension input. 
	arm_softmax_q7(layer->in->tensor->p_data, tensor_size(layer->out->tensor), layer->out->tensor->p_data);
 8005416:	e9d0 3206 	ldrd	r3, r2, [r0, #24]
{
 800541a:	4604      	mov	r4, r0
	arm_softmax_q7(layer->in->tensor->p_data, tensor_size(layer->out->tensor), layer->out->tensor->p_data);
 800541c:	68db      	ldr	r3, [r3, #12]
 800541e:	68d0      	ldr	r0, [r2, #12]
 8005420:	681d      	ldr	r5, [r3, #0]
 8005422:	f000 f82b 	bl	800547c <tensor_size>
 8005426:	69e3      	ldr	r3, [r4, #28]
 8005428:	68db      	ldr	r3, [r3, #12]
 800542a:	b281      	uxth	r1, r0
 800542c:	681a      	ldr	r2, [r3, #0]
 800542e:	4628      	mov	r0, r5
 8005430:	f7fd fa36 	bl	80028a0 <arm_softmax_q7>
	#else
	local_softmax_q7(layer->in->tensor->p_data, tensor_size(layer->out->tensor), layer->out->tensor->p_data);
	#endif
	return NN_SUCCESS;
}
 8005434:	2000      	movs	r0, #0
 8005436:	bd38      	pop	{r3, r4, r5, pc}

08005438 <Softmax>:
{
 8005438:	b510      	push	{r4, lr}
	layer = nnom_mem(mem_size);
 800543a:	2064      	movs	r0, #100	; 0x64
 800543c:	f7fe fdac 	bl	8003f98 <nnom_mem>
	if (layer == NULL)
 8005440:	4604      	mov	r4, r0
 8005442:	b1a8      	cbz	r0, 8005470 <Softmax+0x38>
	layer->build = default_build;
 8005444:	4a0b      	ldr	r2, [pc, #44]	; (8005474 <Softmax+0x3c>)
	layer->run = softmax_run;
 8005446:	490c      	ldr	r1, [pc, #48]	; (8005478 <Softmax+0x40>)
	layer->type = NNOM_SOFTMAX;
 8005448:	230f      	movs	r3, #15
 800544a:	7503      	strb	r3, [r0, #20]
	in->type = LAYER_BUF_TEMP;
 800544c:	2301      	movs	r3, #1
	layer->build = default_build;
 800544e:	e9c0 1200 	strd	r1, r2, [r0]
	in->type = LAYER_BUF_TEMP;
 8005452:	f880 3044 	strb.w	r3, [r0, #68]	; 0x44
	out->type = LAYER_BUF_TEMP;
 8005456:	f880 3060 	strb.w	r3, [r0, #96]	; 0x60
	layer->in = io_init(layer, in);
 800545a:	f100 012c 	add.w	r1, r0, #44	; 0x2c
 800545e:	f7ff fe0d 	bl	800507c <io_init>
	layer->out = io_init(layer, out);
 8005462:	f104 0148 	add.w	r1, r4, #72	; 0x48
	layer->in = io_init(layer, in);
 8005466:	61a0      	str	r0, [r4, #24]
	layer->out = io_init(layer, out);
 8005468:	4620      	mov	r0, r4
 800546a:	f7ff fe07 	bl	800507c <io_init>
 800546e:	61e0      	str	r0, [r4, #28]
}
 8005470:	4620      	mov	r0, r4
 8005472:	bd10      	pop	{r4, pc}
 8005474:	08004a81 	.word	0x08004a81
 8005478:	08005415 	.word	0x08005415

0800547c <tensor_size>:

 // tensor size
size_t tensor_size(nnom_tensor_t* t)
{
	size_t size = 0;
	if (t)
 800547c:	b168      	cbz	r0, 800549a <tensor_size+0x1e>
	{
		size = t->dim[0];
		for (int i = 1; i < t->num_dim; i++)
 800547e:	7a01      	ldrb	r1, [r0, #8]
		size = t->dim[0];
 8005480:	6843      	ldr	r3, [r0, #4]
		for (int i = 1; i < t->num_dim; i++)
 8005482:	2901      	cmp	r1, #1
		size = t->dim[0];
 8005484:	8818      	ldrh	r0, [r3, #0]
		for (int i = 1; i < t->num_dim; i++)
 8005486:	d908      	bls.n	800549a <tensor_size+0x1e>
 8005488:	eb03 0141 	add.w	r1, r3, r1, lsl #1
 800548c:	3302      	adds	r3, #2
			size *= t->dim[i];
 800548e:	f833 2b02 	ldrh.w	r2, [r3], #2
		for (int i = 1; i < t->num_dim; i++)
 8005492:	4299      	cmp	r1, r3
			size *= t->dim[i];
 8005494:	fb02 f000 	mul.w	r0, r2, r0
		for (int i = 1; i < t->num_dim; i++)
 8005498:	d1f9      	bne.n	800548e <tensor_size+0x12>
	}
	return size;
}
 800549a:	4770      	bx	lr

0800549c <new_tensor>:

// initial tensor
nnom_tensor_t* new_tensor(nnom_tensor_t* t, uint32_t num_dim)
{
 800549c:	b510      	push	{r4, lr}
 800549e:	460c      	mov	r4, r1
	if (t)
 80054a0:	b108      	cbz	r0, 80054a6 <new_tensor+0xa>
		nnom_free(t);
 80054a2:	f001 fed5 	bl	8007250 <free>
	t = nnom_mem(nnom_alignto(sizeof(nnom_tensor_t), 4) + num_dim*sizeof(nnom_shape_data_t));
 80054a6:	2104      	movs	r1, #4
 80054a8:	200c      	movs	r0, #12
 80054aa:	f7fe fd89 	bl	8003fc0 <nnom_alignto>
 80054ae:	eb00 0044 	add.w	r0, r0, r4, lsl #1
 80054b2:	f7fe fd71 	bl	8003f98 <nnom_mem>
	t->dim = (nnom_shape_data_t*)((uint8_t*)t + sizeof(nnom_tensor_t));
 80054b6:	f100 020c 	add.w	r2, r0, #12
 80054ba:	6042      	str	r2, [r0, #4]
	return t;
}
 80054bc:	bd10      	pop	{r4, pc}
 80054be:	bf00      	nop

080054c0 <tensor_set_attribuites>:

// initial tensor
nnom_tensor_t* tensor_set_attribuites(nnom_tensor_t* t, nnom_qformat_t qfmt, uint32_t num_dim, nnom_shape_data_t* dim)
{
 80054c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80054c4:	b083      	sub	sp, #12
 80054c6:	ac02      	add	r4, sp, #8
 80054c8:	f824 1d04 	strh.w	r1, [r4, #-4]!
	t->qfmt = qfmt;
 80054cc:	8821      	ldrh	r1, [r4, #0]
	t->num_dim = num_dim;
 80054ce:	7202      	strb	r2, [r0, #8]
	t->qfmt = qfmt;
 80054d0:	f8a0 1009 	strh.w	r1, [r0, #9]
	for (int i = 0; i < num_dim; i++)
 80054d4:	b39a      	cbz	r2, 800553e <tensor_set_attribuites+0x7e>
		t->dim[i] = dim[i];
 80054d6:	6847      	ldr	r7, [r0, #4]
 80054d8:	1d19      	adds	r1, r3, #4
 80054da:	1d3c      	adds	r4, r7, #4
 80054dc:	42a3      	cmp	r3, r4
 80054de:	bf38      	it	cc
 80054e0:	428f      	cmpcc	r7, r1
 80054e2:	d331      	bcc.n	8005548 <tensor_set_attribuites+0x88>
 80054e4:	2a0d      	cmp	r2, #13
 80054e6:	d92f      	bls.n	8005548 <tensor_set_attribuites+0x88>
 80054e8:	f3c3 0c40 	ubfx	ip, r3, #1, #1
 80054ec:	f1bc 0f00 	cmp.w	ip, #0
 80054f0:	d028      	beq.n	8005544 <tensor_set_attribuites+0x84>
 80054f2:	8819      	ldrh	r1, [r3, #0]
 80054f4:	8039      	strh	r1, [r7, #0]
	for (int i = 0; i < num_dim; i++)
 80054f6:	f04f 0e01 	mov.w	lr, #1
 80054fa:	ea4f 044c 	mov.w	r4, ip, lsl #1
 80054fe:	eba2 080c 	sub.w	r8, r2, ip
 8005502:	191d      	adds	r5, r3, r4
 8005504:	ea4f 0958 	mov.w	r9, r8, lsr #1
 8005508:	443c      	add	r4, r7
 800550a:	2100      	movs	r1, #0
 800550c:	3101      	adds	r1, #1
		t->dim[i] = dim[i];
 800550e:	f855 6b04 	ldr.w	r6, [r5], #4
 8005512:	f844 6b04 	str.w	r6, [r4], #4
 8005516:	4589      	cmp	r9, r1
 8005518:	d8f8      	bhi.n	800550c <tensor_set_attribuites+0x4c>
 800551a:	f028 0101 	bic.w	r1, r8, #1
 800551e:	4588      	cmp	r8, r1
 8005520:	448c      	add	ip, r1
 8005522:	448e      	add	lr, r1
 8005524:	d00b      	beq.n	800553e <tensor_set_attribuites+0x7e>
	for (int i = 0; i < num_dim; i++)
 8005526:	f10e 0e01 	add.w	lr, lr, #1
		t->dim[i] = dim[i];
 800552a:	f833 101c 	ldrh.w	r1, [r3, ip, lsl #1]
 800552e:	f827 101c 	strh.w	r1, [r7, ip, lsl #1]
	for (int i = 0; i < num_dim; i++)
 8005532:	4596      	cmp	lr, r2
 8005534:	d203      	bcs.n	800553e <tensor_set_attribuites+0x7e>
		t->dim[i] = dim[i];
 8005536:	f833 301e 	ldrh.w	r3, [r3, lr, lsl #1]
 800553a:	f827 301e 	strh.w	r3, [r7, lr, lsl #1]
	return t;
}
 800553e:	b003      	add	sp, #12
 8005540:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	for (int i = 0; i < num_dim; i++)
 8005544:	46e6      	mov	lr, ip
 8005546:	e7d8      	b.n	80054fa <tensor_set_attribuites+0x3a>
 8005548:	3b02      	subs	r3, #2
 800554a:	eb03 0242 	add.w	r2, r3, r2, lsl #1
 800554e:	3f02      	subs	r7, #2
		t->dim[i] = dim[i];
 8005550:	f833 1f02 	ldrh.w	r1, [r3, #2]!
 8005554:	f827 1f02 	strh.w	r1, [r7, #2]!
	for (int i = 0; i < num_dim; i++)
 8005558:	4293      	cmp	r3, r2
 800555a:	d1f9      	bne.n	8005550 <tensor_set_attribuites+0x90>
}
 800555c:	b003      	add	sp, #12
 800555e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005562:	bf00      	nop

08005564 <tensor_cpy_attributes>:


// this method copy the attributes of a tensor to a new tensor
// Note, the tensors must have the same lenght. this method wont cpy the memory pointer data (we will assign memory later after building)
nnom_tensor_t* tensor_cpy_attributes(nnom_tensor_t* des, nnom_tensor_t* src)
{
 8005564:	b510      	push	{r4, lr}
	des->num_dim = src->num_dim;
 8005566:	7a0b      	ldrb	r3, [r1, #8]
 8005568:	7203      	strb	r3, [r0, #8]
	des->qfmt = src->qfmt;
 800556a:	f8b1 3009 	ldrh.w	r3, [r1, #9]
 800556e:	f8a0 3009 	strh.w	r3, [r0, #9]
	memcpy(des->dim, src->dim, src->num_dim * sizeof(nnom_shape_data_t));
 8005572:	7a0a      	ldrb	r2, [r1, #8]
 8005574:	6849      	ldr	r1, [r1, #4]
{
 8005576:	4604      	mov	r4, r0
	memcpy(des->dim, src->dim, src->num_dim * sizeof(nnom_shape_data_t));
 8005578:	0052      	lsls	r2, r2, #1
 800557a:	6840      	ldr	r0, [r0, #4]
 800557c:	f001 fe70 	bl	8007260 <memcpy>
	return des;
}
 8005580:	4620      	mov	r0, r4
 8005582:	bd10      	pop	{r4, pc}

08005584 <nnom_predict>:
nnom_status_t nnom_predict(nnom_model_t *m, uint32_t *label, float *prob)
{
	int32_t max_val, max_index, sum;
	int8_t *output;

	if (!m)
 8005584:	2800      	cmp	r0, #0
 8005586:	d05d      	beq.n	8005644 <nnom_predict+0xc0>
{
 8005588:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800558c:	4606      	mov	r6, r0
 800558e:	4690      	mov	r8, r2
 8005590:	4689      	mov	r9, r1
		return NN_ARGUMENT_ERROR;

	model_run(m);
 8005592:	f7ff fa5d 	bl	8004a50 <model_run>

	// get the output memory
	output = m->tail->out->mem->blk;
 8005596:	6873      	ldr	r3, [r6, #4]
 8005598:	69db      	ldr	r3, [r3, #28]

	// multiple neural output
	if (tensor_size(m->tail->out->tensor) > 1)
 800559a:	e9d3 0203 	ldrd	r0, r2, [r3, #12]
	output = m->tail->out->mem->blk;
 800559e:	6815      	ldr	r5, [r2, #0]
	if (tensor_size(m->tail->out->tensor) > 1)
 80055a0:	f7ff ff6c 	bl	800547c <tensor_size>
 80055a4:	2801      	cmp	r0, #1
 80055a6:	d92f      	bls.n	8005608 <nnom_predict+0x84>
	{
		// Top 1
		max_val = output[0];
 80055a8:	f995 7000 	ldrsb.w	r7, [r5]
		max_index = 0;
		sum = max_val;
		for (uint32_t i = 1; i < tensor_size(m->tail->out->tensor); i++)
 80055ac:	2401      	movs	r4, #1
		sum = max_val;
 80055ae:	46bb      	mov	fp, r7
		max_index = 0;
 80055b0:	f04f 0a00 	mov.w	sl, #0
		for (uint32_t i = 1; i < tensor_size(m->tail->out->tensor); i++)
 80055b4:	e007      	b.n	80055c6 <nnom_predict+0x42>
		{
			if (output[i] > max_val)
 80055b6:	f915 3f01 	ldrsb.w	r3, [r5, #1]!
 80055ba:	42bb      	cmp	r3, r7
			{
				max_val = output[i];
				max_index = i;
 80055bc:	bfc4      	itt	gt
 80055be:	46a2      	movgt	sl, r4
 80055c0:	461f      	movgt	r7, r3
			}
			sum += output[i];
 80055c2:	449b      	add	fp, r3
		for (uint32_t i = 1; i < tensor_size(m->tail->out->tensor); i++)
 80055c4:	3401      	adds	r4, #1
 80055c6:	6873      	ldr	r3, [r6, #4]
 80055c8:	69db      	ldr	r3, [r3, #28]
 80055ca:	68d8      	ldr	r0, [r3, #12]
 80055cc:	f7ff ff56 	bl	800547c <tensor_size>
 80055d0:	42a0      	cmp	r0, r4
 80055d2:	d8f0      	bhi.n	80055b6 <nnom_predict+0x32>
		}
		// send results
		*label = max_index;
 80055d4:	f8c9 a000 	str.w	sl, [r9]
		if(sum !=0)
 80055d8:	f1bb 0f00 	cmp.w	fp, #0
 80055dc:	d105      	bne.n	80055ea <nnom_predict+0x66>
			*prob = (float)max_val/(float)sum; 
		else
			*prob = 0; 
 80055de:	2300      	movs	r3, #0
			*label = 1;
		else
			*label = 0;
	}
	
	return NN_SUCCESS;
 80055e0:	4658      	mov	r0, fp
			*prob = 0; 
 80055e2:	f8c8 3000 	str.w	r3, [r8]
}
 80055e6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			*prob = (float)max_val/(float)sum; 
 80055ea:	ee07 ba10 	vmov	s14, fp
 80055ee:	ee07 7a90 	vmov	s15, r7
 80055f2:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 80055f6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
	return NN_SUCCESS;
 80055fa:	2000      	movs	r0, #0
			*prob = (float)max_val/(float)sum; 
 80055fc:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8005600:	ed88 7a00 	vstr	s14, [r8]
}
 8005604:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		*prob = (float)output[0] / 127.f;
 8005608:	f995 3000 	ldrsb.w	r3, [r5]
 800560c:	eddf 6a0f 	vldr	s13, [pc, #60]	; 800564c <nnom_predict+0xc8>
 8005610:	ee07 3a90 	vmov	s15, r3
 8005614:	eef8 7ae7 	vcvt.f32.s32	s15, s15
		if (*prob >= 0.5f)
 8005618:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
		*prob = (float)output[0] / 127.f;
 800561c:	ee67 7aa6 	vmul.f32	s15, s15, s13
		if (*prob >= 0.5f)
 8005620:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005624:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
		*prob = (float)output[0] / 127.f;
 8005628:	edc8 7a00 	vstr	s15, [r8]
		if (*prob >= 0.5f)
 800562c:	da04      	bge.n	8005638 <nnom_predict+0xb4>
			*label = 0;
 800562e:	2000      	movs	r0, #0
 8005630:	f8c9 0000 	str.w	r0, [r9]
}
 8005634:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
			*label = 1;
 8005638:	2301      	movs	r3, #1
 800563a:	f8c9 3000 	str.w	r3, [r9]
	return NN_SUCCESS;
 800563e:	2000      	movs	r0, #0
}
 8005640:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return NN_ARGUMENT_ERROR;
 8005644:	f04f 30ff 	mov.w	r0, #4294967295
}
 8005648:	4770      	bx	lr
 800564a:	bf00      	nop
 800564c:	3c010204 	.word	0x3c010204

08005650 <Reset_Handler>:
 8005650:	f8df d034 	ldr.w	sp, [pc, #52]	; 8005688 <LoopForever+0x2>
 8005654:	2100      	movs	r1, #0
 8005656:	e003      	b.n	8005660 <LoopCopyDataInit>

08005658 <CopyDataInit>:
 8005658:	4b0c      	ldr	r3, [pc, #48]	; (800568c <LoopForever+0x6>)
 800565a:	585b      	ldr	r3, [r3, r1]
 800565c:	5043      	str	r3, [r0, r1]
 800565e:	3104      	adds	r1, #4

08005660 <LoopCopyDataInit>:
 8005660:	480b      	ldr	r0, [pc, #44]	; (8005690 <LoopForever+0xa>)
 8005662:	4b0c      	ldr	r3, [pc, #48]	; (8005694 <LoopForever+0xe>)
 8005664:	1842      	adds	r2, r0, r1
 8005666:	429a      	cmp	r2, r3
 8005668:	d3f6      	bcc.n	8005658 <CopyDataInit>
 800566a:	4a0b      	ldr	r2, [pc, #44]	; (8005698 <LoopForever+0x12>)
 800566c:	e002      	b.n	8005674 <LoopFillZerobss>

0800566e <FillZerobss>:
 800566e:	2300      	movs	r3, #0
 8005670:	f842 3b04 	str.w	r3, [r2], #4

08005674 <LoopFillZerobss>:
 8005674:	4b09      	ldr	r3, [pc, #36]	; (800569c <LoopForever+0x16>)
 8005676:	429a      	cmp	r2, r3
 8005678:	d3f9      	bcc.n	800566e <FillZerobss>
 800567a:	f7fe fb3d 	bl	8003cf8 <SystemInit>
 800567e:	f001 fdbb 	bl	80071f8 <__libc_init_array>
 8005682:	f7fe f8e9 	bl	8003858 <main>

08005686 <LoopForever>:
 8005686:	e7fe      	b.n	8005686 <LoopForever>
 8005688:	20018000 	.word	0x20018000
 800568c:	08023540 	.word	0x08023540
 8005690:	20000000 	.word	0x20000000
 8005694:	200001dc 	.word	0x200001dc
 8005698:	200001dc 	.word	0x200001dc
 800569c:	2000074c 	.word	0x2000074c

080056a0 <ADC1_2_IRQHandler>:
 80056a0:	e7fe      	b.n	80056a0 <ADC1_2_IRQHandler>
	...

080056a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80056a4:	b538      	push	{r3, r4, r5, lr}
  HAL_StatusTypeDef  status = HAL_OK;

  if (uwTickFreq != 0U)
 80056a6:	4b0f      	ldr	r3, [pc, #60]	; (80056e4 <HAL_InitTick+0x40>)
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	b90b      	cbnz	r3, 80056b0 <HAL_InitTick+0xc>
      status = HAL_ERROR;
    }
  }
  else
  {
    status = HAL_ERROR;
 80056ac:	2001      	movs	r0, #1
  }

  /* Return function status */
  return status;
}
 80056ae:	bd38      	pop	{r3, r4, r5, pc}
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80056b0:	490d      	ldr	r1, [pc, #52]	; (80056e8 <HAL_InitTick+0x44>)
 80056b2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80056b6:	4605      	mov	r5, r0
 80056b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80056bc:	6808      	ldr	r0, [r1, #0]
 80056be:	fbb0 f0f3 	udiv	r0, r0, r3
 80056c2:	f000 f883 	bl	80057cc <HAL_SYSTICK_Config>
 80056c6:	4604      	mov	r4, r0
 80056c8:	2800      	cmp	r0, #0
 80056ca:	d1ef      	bne.n	80056ac <HAL_InitTick+0x8>
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80056cc:	2d0f      	cmp	r5, #15
 80056ce:	d8ed      	bhi.n	80056ac <HAL_InitTick+0x8>
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80056d0:	4602      	mov	r2, r0
 80056d2:	4629      	mov	r1, r5
 80056d4:	f04f 30ff 	mov.w	r0, #4294967295
 80056d8:	f000 f842 	bl	8005760 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80056dc:	4b03      	ldr	r3, [pc, #12]	; (80056ec <HAL_InitTick+0x48>)
 80056de:	4620      	mov	r0, r4
 80056e0:	601d      	str	r5, [r3, #0]
}
 80056e2:	bd38      	pop	{r3, r4, r5, pc}
 80056e4:	20000004 	.word	0x20000004
 80056e8:	20000000 	.word	0x20000000
 80056ec:	20000008 	.word	0x20000008

080056f0 <HAL_Init>:
{
 80056f0:	b500      	push	{lr}
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80056f2:	2003      	movs	r0, #3
{
 80056f4:	b083      	sub	sp, #12
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80056f6:	f000 f821 	bl	800573c <HAL_NVIC_SetPriorityGrouping>
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80056fa:	2000      	movs	r0, #0
 80056fc:	f7ff ffd2 	bl	80056a4 <HAL_InitTick>
 8005700:	b118      	cbz	r0, 800570a <HAL_Init+0x1a>
    status = HAL_ERROR;
 8005702:	2001      	movs	r0, #1
}
 8005704:	b003      	add	sp, #12
 8005706:	f85d fb04 	ldr.w	pc, [sp], #4
 800570a:	9001      	str	r0, [sp, #4]
    HAL_MspInit();
 800570c:	f7fe fa4c 	bl	8003ba8 <HAL_MspInit>
 8005710:	9801      	ldr	r0, [sp, #4]
}
 8005712:	b003      	add	sp, #12
 8005714:	f85d fb04 	ldr.w	pc, [sp], #4

08005718 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += uwTickFreq;
 8005718:	4a03      	ldr	r2, [pc, #12]	; (8005728 <HAL_IncTick+0x10>)
 800571a:	4904      	ldr	r1, [pc, #16]	; (800572c <HAL_IncTick+0x14>)
 800571c:	6813      	ldr	r3, [r2, #0]
 800571e:	6809      	ldr	r1, [r1, #0]
 8005720:	440b      	add	r3, r1
 8005722:	6013      	str	r3, [r2, #0]
}
 8005724:	4770      	bx	lr
 8005726:	bf00      	nop
 8005728:	20000744 	.word	0x20000744
 800572c:	20000004 	.word	0x20000004

08005730 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8005730:	4b01      	ldr	r3, [pc, #4]	; (8005738 <HAL_GetTick+0x8>)
 8005732:	6818      	ldr	r0, [r3, #0]
}
 8005734:	4770      	bx	lr
 8005736:	bf00      	nop
 8005738:	20000744 	.word	0x20000744

0800573c <HAL_NVIC_SetPriorityGrouping>:
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800573c:	4a07      	ldr	r2, [pc, #28]	; (800575c <HAL_NVIC_SetPriorityGrouping+0x20>)
 800573e:	68d3      	ldr	r3, [r2, #12]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8005740:	f64f 01ff 	movw	r1, #63743	; 0xf8ff
 8005744:	400b      	ands	r3, r1
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8005746:	0200      	lsls	r0, r0, #8
 8005748:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800574c:	f400 60e0 	and.w	r0, r0, #1792	; 0x700
 8005750:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
  reg_value  =  (reg_value                                   |
 8005754:	4303      	orrs	r3, r0
  SCB->AIRCR =  reg_value;
 8005756:	60d3      	str	r3, [r2, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8005758:	4770      	bx	lr
 800575a:	bf00      	nop
 800575c:	e000ed00 	.word	0xe000ed00

08005760 <HAL_NVIC_SetPriority>:
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8005760:	4b18      	ldr	r3, [pc, #96]	; (80057c4 <HAL_NVIC_SetPriority+0x64>)
 8005762:	68db      	ldr	r3, [r3, #12]
 8005764:	f3c3 2302 	ubfx	r3, r3, #8, #3
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8005768:	b430      	push	{r4, r5}
{
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800576a:	f1c3 0507 	rsb	r5, r3, #7
 800576e:	2d04      	cmp	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005770:	f103 0404 	add.w	r4, r3, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8005774:	bf28      	it	cs
 8005776:	2504      	movcs	r5, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8005778:	2c06      	cmp	r4, #6
 800577a:	d919      	bls.n	80057b0 <HAL_NVIC_SetPriority+0x50>
 800577c:	3b03      	subs	r3, #3
 800577e:	f04f 34ff 	mov.w	r4, #4294967295
 8005782:	409c      	lsls	r4, r3
 8005784:	ea22 0404 	bic.w	r4, r2, r4

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8005788:	f04f 32ff 	mov.w	r2, #4294967295
 800578c:	40aa      	lsls	r2, r5
 800578e:	ea21 0102 	bic.w	r1, r1, r2
 8005792:	fa01 f203 	lsl.w	r2, r1, r3
 8005796:	4322      	orrs	r2, r4
 8005798:	0112      	lsls	r2, r2, #4
  if ((int32_t)(IRQn) >= 0)
 800579a:	2800      	cmp	r0, #0
 800579c:	b2d2      	uxtb	r2, r2
 800579e:	db0a      	blt.n	80057b6 <HAL_NVIC_SetPriority+0x56>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80057a0:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 80057a4:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 80057a8:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 80057ac:	bc30      	pop	{r4, r5}
 80057ae:	4770      	bx	lr
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80057b0:	2400      	movs	r4, #0
 80057b2:	4623      	mov	r3, r4
 80057b4:	e7e8      	b.n	8005788 <HAL_NVIC_SetPriority+0x28>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80057b6:	4b04      	ldr	r3, [pc, #16]	; (80057c8 <HAL_NVIC_SetPriority+0x68>)
 80057b8:	f000 000f 	and.w	r0, r0, #15
 80057bc:	4403      	add	r3, r0
 80057be:	761a      	strb	r2, [r3, #24]
 80057c0:	bc30      	pop	{r4, r5}
 80057c2:	4770      	bx	lr
 80057c4:	e000ed00 	.word	0xe000ed00
 80057c8:	e000ecfc 	.word	0xe000ecfc

080057cc <HAL_SYSTICK_Config>:
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80057cc:	3801      	subs	r0, #1
 80057ce:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 80057d2:	d20e      	bcs.n	80057f2 <HAL_SYSTICK_Config+0x26>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80057d4:	4b08      	ldr	r3, [pc, #32]	; (80057f8 <HAL_SYSTICK_Config+0x2c>)
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80057d6:	b410      	push	{r4}
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80057d8:	4c08      	ldr	r4, [pc, #32]	; (80057fc <HAL_SYSTICK_Config+0x30>)
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80057da:	6058      	str	r0, [r3, #4]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80057dc:	20f0      	movs	r0, #240	; 0xf0
 80057de:	f884 0023 	strb.w	r0, [r4, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80057e2:	2200      	movs	r2, #0
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80057e4:	2107      	movs	r1, #7
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80057e6:	4610      	mov	r0, r2
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80057e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80057ea:	6019      	str	r1, [r3, #0]
   return SysTick_Config(TicksNumb);
}
 80057ec:	f85d 4b04 	ldr.w	r4, [sp], #4
 80057f0:	4770      	bx	lr
    return (1UL);                                                   /* Reload value impossible */
 80057f2:	2001      	movs	r0, #1
 80057f4:	4770      	bx	lr
 80057f6:	bf00      	nop
 80057f8:	e000e010 	.word	0xe000e010
 80057fc:	e000ed00 	.word	0xe000ed00

08005800 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8005800:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8005804:	f8d1 9000 	ldr.w	r9, [r1]
{
 8005808:	b083      	sub	sp, #12
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800580a:	f1b9 0f00 	cmp.w	r9, #0
 800580e:	f000 80b1 	beq.w	8005974 <HAL_GPIO_Init+0x174>
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
        SYSCFG->EXTICR[position >> 2u] = temp;

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8005812:	f8df b1d8 	ldr.w	fp, [pc, #472]	; 80059ec <HAL_GPIO_Init+0x1ec>
 8005816:	4688      	mov	r8, r1
  uint32_t position = 0x00u;
 8005818:	2500      	movs	r5, #0
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800581a:	2301      	movs	r3, #1
 800581c:	fa03 f705 	lsl.w	r7, r3, r5
    if (iocurrent != 0x00u)
 8005820:	ea17 0a09 	ands.w	sl, r7, r9
 8005824:	f000 80a1 	beq.w	800596a <HAL_GPIO_Init+0x16a>
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8005828:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800582c:	f023 0110 	bic.w	r1, r3, #16
 8005830:	006c      	lsls	r4, r5, #1
 8005832:	2203      	movs	r2, #3
 8005834:	3901      	subs	r1, #1
 8005836:	40a2      	lsls	r2, r4
 8005838:	2901      	cmp	r1, #1
 800583a:	ea6f 0202 	mvn.w	r2, r2
 800583e:	d80e      	bhi.n	800585e <HAL_GPIO_Init+0x5e>
        temp = GPIOx->OSPEEDR;
 8005840:	6886      	ldr	r6, [r0, #8]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005842:	f8d8 100c 	ldr.w	r1, [r8, #12]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8005846:	4016      	ands	r6, r2
        temp |= (GPIO_Init->Speed << (position * 2u));
 8005848:	40a1      	lsls	r1, r4
 800584a:	4331      	orrs	r1, r6
        GPIOx->OSPEEDR = temp;
 800584c:	6081      	str	r1, [r0, #8]
        temp = GPIOx->OTYPER;
 800584e:	6846      	ldr	r6, [r0, #4]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8005850:	f3c3 1100 	ubfx	r1, r3, #4, #1
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8005854:	ea26 0607 	bic.w	r6, r6, r7
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 8005858:	40a9      	lsls	r1, r5
 800585a:	4331      	orrs	r1, r6
        GPIOx->OTYPER = temp;
 800585c:	6041      	str	r1, [r0, #4]
 800585e:	f8d8 6008 	ldr.w	r6, [r8, #8]
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 8005862:	f003 0103 	and.w	r1, r3, #3
 8005866:	2903      	cmp	r1, #3
 8005868:	fa06 f604 	lsl.w	r6, r6, r4
 800586c:	f000 8085 	beq.w	800597a <HAL_GPIO_Init+0x17a>
      temp = GPIOx->PUPDR;
 8005870:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8005872:	4017      	ands	r7, r2
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8005874:	433e      	orrs	r6, r7
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005876:	2b02      	cmp	r3, #2
      GPIOx->PUPDR = temp;
 8005878:	60c6      	str	r6, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800587a:	f040 808d 	bne.w	8005998 <HAL_GPIO_Init+0x198>
        temp = GPIOx->AFR[position >> 3u];
 800587e:	ea4f 0ed5 	mov.w	lr, r5, lsr #3
 8005882:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8005886:	f005 0707 	and.w	r7, r5, #7
        temp = GPIOx->AFR[position >> 3u];
 800588a:	f8de 6020 	ldr.w	r6, [lr, #32]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 800588e:	00bf      	lsls	r7, r7, #2
 8005890:	f04f 0c0f 	mov.w	ip, #15
 8005894:	fa0c fc07 	lsl.w	ip, ip, r7
 8005898:	ea26 0c0c 	bic.w	ip, r6, ip
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800589c:	f8d8 6010 	ldr.w	r6, [r8, #16]
 80058a0:	40be      	lsls	r6, r7
 80058a2:	ea46 060c 	orr.w	r6, r6, ip
        GPIOx->AFR[position >> 3u] = temp;
 80058a6:	f8ce 6020 	str.w	r6, [lr, #32]
      temp = GPIOx->MODER;
 80058aa:	6806      	ldr	r6, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80058ac:	40a1      	lsls	r1, r4
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80058ae:	4032      	ands	r2, r6
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 80058b0:	4311      	orrs	r1, r2
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80058b2:	00da      	lsls	r2, r3, #3
      GPIOx->MODER = temp;
 80058b4:	6001      	str	r1, [r0, #0]
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80058b6:	d558      	bpl.n	800596a <HAL_GPIO_Init+0x16a>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80058b8:	4945      	ldr	r1, [pc, #276]	; (80059d0 <HAL_GPIO_Init+0x1d0>)
 80058ba:	6e0a      	ldr	r2, [r1, #96]	; 0x60
 80058bc:	f042 0201 	orr.w	r2, r2, #1
 80058c0:	660a      	str	r2, [r1, #96]	; 0x60
 80058c2:	6e0a      	ldr	r2, [r1, #96]	; 0x60
 80058c4:	f025 0403 	bic.w	r4, r5, #3
 80058c8:	f104 4480 	add.w	r4, r4, #1073741824	; 0x40000000
 80058cc:	f002 0201 	and.w	r2, r2, #1
 80058d0:	f504 3480 	add.w	r4, r4, #65536	; 0x10000
 80058d4:	9201      	str	r2, [sp, #4]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80058d6:	f005 0203 	and.w	r2, r5, #3
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80058da:	9901      	ldr	r1, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2u];
 80058dc:	68a6      	ldr	r6, [r4, #8]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80058de:	0092      	lsls	r2, r2, #2
 80058e0:	210f      	movs	r1, #15
 80058e2:	4091      	lsls	r1, r2
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80058e4:	f1b0 4f90 	cmp.w	r0, #1207959552	; 0x48000000
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80058e8:	ea26 0101 	bic.w	r1, r6, r1
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80058ec:	d016      	beq.n	800591c <HAL_GPIO_Init+0x11c>
 80058ee:	4e39      	ldr	r6, [pc, #228]	; (80059d4 <HAL_GPIO_Init+0x1d4>)
 80058f0:	42b0      	cmp	r0, r6
 80058f2:	d059      	beq.n	80059a8 <HAL_GPIO_Init+0x1a8>
 80058f4:	4e38      	ldr	r6, [pc, #224]	; (80059d8 <HAL_GPIO_Init+0x1d8>)
 80058f6:	42b0      	cmp	r0, r6
 80058f8:	d051      	beq.n	800599e <HAL_GPIO_Init+0x19e>
 80058fa:	4e38      	ldr	r6, [pc, #224]	; (80059dc <HAL_GPIO_Init+0x1dc>)
 80058fc:	42b0      	cmp	r0, r6
 80058fe:	d05d      	beq.n	80059bc <HAL_GPIO_Init+0x1bc>
 8005900:	4e37      	ldr	r6, [pc, #220]	; (80059e0 <HAL_GPIO_Init+0x1e0>)
 8005902:	42b0      	cmp	r0, r6
 8005904:	d05f      	beq.n	80059c6 <HAL_GPIO_Init+0x1c6>
 8005906:	4e37      	ldr	r6, [pc, #220]	; (80059e4 <HAL_GPIO_Init+0x1e4>)
 8005908:	42b0      	cmp	r0, r6
 800590a:	d052      	beq.n	80059b2 <HAL_GPIO_Init+0x1b2>
 800590c:	4e36      	ldr	r6, [pc, #216]	; (80059e8 <HAL_GPIO_Init+0x1e8>)
 800590e:	42b0      	cmp	r0, r6
 8005910:	bf0c      	ite	eq
 8005912:	2606      	moveq	r6, #6
 8005914:	2607      	movne	r6, #7
 8005916:	fa06 f202 	lsl.w	r2, r6, r2
 800591a:	4311      	orrs	r1, r2
        SYSCFG->EXTICR[position >> 2u] = temp;
 800591c:	60a1      	str	r1, [r4, #8]
        temp = EXTI->IMR1;
 800591e:	f8db 2000 	ldr.w	r2, [fp]
        temp &= ~(iocurrent);
 8005922:	ea6f 010a 	mvn.w	r1, sl
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8005926:	03df      	lsls	r7, r3, #15
        temp &= ~(iocurrent);
 8005928:	bf54      	ite	pl
 800592a:	400a      	andpl	r2, r1
        {
          temp |= iocurrent;
 800592c:	ea4a 0202 	orrmi.w	r2, sl, r2
        }
        EXTI->IMR1 = temp;
 8005930:	f8cb 2000 	str.w	r2, [fp]

        temp = EXTI->EMR1;
 8005934:	f8db 2004 	ldr.w	r2, [fp, #4]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8005938:	039e      	lsls	r6, r3, #14
        temp &= ~(iocurrent);
 800593a:	bf54      	ite	pl
 800593c:	400a      	andpl	r2, r1
        {
          temp |= iocurrent;
 800593e:	ea4a 0202 	orrmi.w	r2, sl, r2
        }
        EXTI->EMR1 = temp;
 8005942:	f8cb 2004 	str.w	r2, [fp, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8005946:	f8db 2008 	ldr.w	r2, [fp, #8]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800594a:	02dc      	lsls	r4, r3, #11
        temp &= ~(iocurrent);
 800594c:	bf54      	ite	pl
 800594e:	400a      	andpl	r2, r1
        {
          temp |= iocurrent;
 8005950:	ea4a 0202 	orrmi.w	r2, sl, r2
        }
        EXTI->RTSR1 = temp;
 8005954:	f8cb 2008 	str.w	r2, [fp, #8]

        temp = EXTI->FTSR1;
 8005958:	f8db 200c 	ldr.w	r2, [fp, #12]
        temp &= ~(iocurrent);
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800595c:	029b      	lsls	r3, r3, #10
        temp &= ~(iocurrent);
 800595e:	bf54      	ite	pl
 8005960:	400a      	andpl	r2, r1
        {
          temp |= iocurrent;
 8005962:	ea4a 0202 	orrmi.w	r2, sl, r2
        }
        EXTI->FTSR1 = temp;
 8005966:	f8cb 200c 	str.w	r2, [fp, #12]
      }
    }

    position++;
 800596a:	3501      	adds	r5, #1
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800596c:	fa39 f305 	lsrs.w	r3, r9, r5
 8005970:	f47f af53 	bne.w	800581a <HAL_GPIO_Init+0x1a>
  }
}
 8005974:	b003      	add	sp, #12
 8005976:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        temp = GPIOx->ASCR;
 800597a:	f8d0 c02c 	ldr.w	ip, [r0, #44]	; 0x2c
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 800597e:	f3c3 0ec0 	ubfx	lr, r3, #3, #1
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8005982:	ea2c 0c07 	bic.w	ip, ip, r7
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 8005986:	4677      	mov	r7, lr
 8005988:	40af      	lsls	r7, r5
 800598a:	ea47 070c 	orr.w	r7, r7, ip
        GPIOx->ASCR = temp;
 800598e:	62c7      	str	r7, [r0, #44]	; 0x2c
      temp = GPIOx->PUPDR;
 8005990:	68c7      	ldr	r7, [r0, #12]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8005992:	4017      	ands	r7, r2
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 8005994:	433e      	orrs	r6, r7
      GPIOx->PUPDR = temp;
 8005996:	60c6      	str	r6, [r0, #12]
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8005998:	2b12      	cmp	r3, #18
 800599a:	d186      	bne.n	80058aa <HAL_GPIO_Init+0xaa>
 800599c:	e76f      	b.n	800587e <HAL_GPIO_Init+0x7e>
 800599e:	2602      	movs	r6, #2
 80059a0:	fa06 f202 	lsl.w	r2, r6, r2
 80059a4:	4311      	orrs	r1, r2
 80059a6:	e7b9      	b.n	800591c <HAL_GPIO_Init+0x11c>
 80059a8:	2601      	movs	r6, #1
 80059aa:	fa06 f202 	lsl.w	r2, r6, r2
 80059ae:	4311      	orrs	r1, r2
 80059b0:	e7b4      	b.n	800591c <HAL_GPIO_Init+0x11c>
 80059b2:	2605      	movs	r6, #5
 80059b4:	fa06 f202 	lsl.w	r2, r6, r2
 80059b8:	4311      	orrs	r1, r2
 80059ba:	e7af      	b.n	800591c <HAL_GPIO_Init+0x11c>
 80059bc:	2603      	movs	r6, #3
 80059be:	fa06 f202 	lsl.w	r2, r6, r2
 80059c2:	4311      	orrs	r1, r2
 80059c4:	e7aa      	b.n	800591c <HAL_GPIO_Init+0x11c>
 80059c6:	2604      	movs	r6, #4
 80059c8:	fa06 f202 	lsl.w	r2, r6, r2
 80059cc:	4311      	orrs	r1, r2
 80059ce:	e7a5      	b.n	800591c <HAL_GPIO_Init+0x11c>
 80059d0:	40021000 	.word	0x40021000
 80059d4:	48000400 	.word	0x48000400
 80059d8:	48000800 	.word	0x48000800
 80059dc:	48000c00 	.word	0x48000c00
 80059e0:	48001000 	.word	0x48001000
 80059e4:	48001400 	.word	0x48001400
 80059e8:	48001800 	.word	0x48001800
 80059ec:	40010400 	.word	0x40010400

080059f0 <HAL_PWREx_GetVoltageRange>:
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 80059f0:	4b02      	ldr	r3, [pc, #8]	; (80059fc <HAL_PWREx_GetVoltageRange+0xc>)
 80059f2:	6818      	ldr	r0, [r3, #0]
#endif
}
 80059f4:	f400 60c0 	and.w	r0, r0, #1536	; 0x600
 80059f8:	4770      	bx	lr
 80059fa:	bf00      	nop
 80059fc:	40007000 	.word	0x40007000

08005a00 <HAL_PWREx_ControlVoltageScaling>:
#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8005a00:	4a1e      	ldr	r2, [pc, #120]	; (8005a7c <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8005a02:	6813      	ldr	r3, [r2, #0]
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005a04:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8005a08:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005a0c:	d00a      	beq.n	8005a24 <HAL_PWREx_ControlVoltageScaling+0x24>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 8005a0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005a12:	d02e      	beq.n	8005a72 <HAL_PWREx_ControlVoltageScaling+0x72>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005a14:	6813      	ldr	r3, [r2, #0]
 8005a16:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8005a1a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005a1e:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 8005a20:	2000      	movs	r0, #0
 8005a22:	4770      	bx	lr
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8005a24:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005a28:	d023      	beq.n	8005a72 <HAL_PWREx_ControlVoltageScaling+0x72>
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005a2a:	6811      	ldr	r1, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005a2c:	4b14      	ldr	r3, [pc, #80]	; (8005a80 <HAL_PWREx_ControlVoltageScaling+0x80>)
 8005a2e:	4815      	ldr	r0, [pc, #84]	; (8005a84 <HAL_PWREx_ControlVoltageScaling+0x84>)
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005a30:	f421 61c0 	bic.w	r1, r1, #1536	; 0x600
 8005a34:	f441 7100 	orr.w	r1, r1, #512	; 0x200
{
 8005a38:	b410      	push	{r4}
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005a3a:	6011      	str	r1, [r2, #0]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005a3c:	681c      	ldr	r4, [r3, #0]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005a3e:	6951      	ldr	r1, [r2, #20]
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005a40:	2332      	movs	r3, #50	; 0x32
 8005a42:	fb03 f304 	mul.w	r3, r3, r4
 8005a46:	fba0 0303 	umull	r0, r3, r0, r3
 8005a4a:	0c9b      	lsrs	r3, r3, #18
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005a4c:	0548      	lsls	r0, r1, #21
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005a4e:	f103 0301 	add.w	r3, r3, #1
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005a52:	d506      	bpl.n	8005a62 <HAL_PWREx_ControlVoltageScaling+0x62>
 8005a54:	e000      	b.n	8005a58 <HAL_PWREx_ControlVoltageScaling+0x58>
 8005a56:	b123      	cbz	r3, 8005a62 <HAL_PWREx_ControlVoltageScaling+0x62>
 8005a58:	6951      	ldr	r1, [r2, #20]
 8005a5a:	0549      	lsls	r1, r1, #21
        wait_loop_index--;
 8005a5c:	f103 33ff 	add.w	r3, r3, #4294967295
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005a60:	d4f9      	bmi.n	8005a56 <HAL_PWREx_ControlVoltageScaling+0x56>
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005a62:	4b06      	ldr	r3, [pc, #24]	; (8005a7c <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8005a64:	695b      	ldr	r3, [r3, #20]
 8005a66:	055b      	lsls	r3, r3, #21
 8005a68:	d405      	bmi.n	8005a76 <HAL_PWREx_ControlVoltageScaling+0x76>
  return HAL_OK;
 8005a6a:	2000      	movs	r0, #0
}
 8005a6c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005a70:	4770      	bx	lr
  return HAL_OK;
 8005a72:	2000      	movs	r0, #0
}
 8005a74:	4770      	bx	lr
        return HAL_TIMEOUT;
 8005a76:	2003      	movs	r0, #3
 8005a78:	e7f8      	b.n	8005a6c <HAL_PWREx_ControlVoltageScaling+0x6c>
 8005a7a:	bf00      	nop
 8005a7c:	40007000 	.word	0x40007000
 8005a80:	20000000 	.word	0x20000000
 8005a84:	431bde83 	.word	0x431bde83

08005a88 <HAL_RCC_GetSysClockFreq>:
{
  uint32_t msirange = 0U, sysclockfreq = 0U;
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005a88:	4a28      	ldr	r2, [pc, #160]	; (8005b2c <HAL_RCC_GetSysClockFreq+0xa4>)
 8005a8a:	6893      	ldr	r3, [r2, #8]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005a8c:	68d2      	ldr	r2, [r2, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005a8e:	f013 030c 	ands.w	r3, r3, #12
 8005a92:	d008      	beq.n	8005aa6 <HAL_RCC_GetSysClockFreq+0x1e>
 8005a94:	2b0c      	cmp	r3, #12
 8005a96:	d038      	beq.n	8005b0a <HAL_RCC_GetSysClockFreq+0x82>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8005a98:	2b04      	cmp	r3, #4
 8005a9a:	d034      	beq.n	8005b06 <HAL_RCC_GetSysClockFreq+0x7e>
 8005a9c:	2b08      	cmp	r3, #8
 8005a9e:	4824      	ldr	r0, [pc, #144]	; (8005b30 <HAL_RCC_GetSysClockFreq+0xa8>)
 8005aa0:	bf18      	it	ne
 8005aa2:	2000      	movne	r0, #0
 8005aa4:	4770      	bx	lr
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8005aa6:	4a21      	ldr	r2, [pc, #132]	; (8005b2c <HAL_RCC_GetSysClockFreq+0xa4>)
 8005aa8:	6811      	ldr	r1, [r2, #0]
 8005aaa:	0709      	lsls	r1, r1, #28
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005aac:	bf54      	ite	pl
 8005aae:	f8d2 2094 	ldrpl.w	r2, [r2, #148]	; 0x94
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005ab2:	6812      	ldrmi	r2, [r2, #0]
    msirange = MSIRangeTable[msirange];
 8005ab4:	491f      	ldr	r1, [pc, #124]	; (8005b34 <HAL_RCC_GetSysClockFreq+0xac>)
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8005ab6:	bf54      	ite	pl
 8005ab8:	f3c2 2203 	ubfxpl	r2, r2, #8, #4
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8005abc:	f3c2 1203 	ubfxmi	r2, r2, #4, #4
    msirange = MSIRangeTable[msirange];
 8005ac0:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005ac4:	b303      	cbz	r3, 8005b08 <HAL_RCC_GetSysClockFreq+0x80>
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8005ac6:	2b0c      	cmp	r3, #12
 8005ac8:	d12d      	bne.n	8005b26 <HAL_RCC_GetSysClockFreq+0x9e>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005aca:	4b18      	ldr	r3, [pc, #96]	; (8005b2c <HAL_RCC_GetSysClockFreq+0xa4>)
 8005acc:	68db      	ldr	r3, [r3, #12]
 8005ace:	f003 0303 	and.w	r3, r3, #3

    switch (pllsource)
 8005ad2:	2b02      	cmp	r3, #2
 8005ad4:	d025      	beq.n	8005b22 <HAL_RCC_GetSysClockFreq+0x9a>
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
      break;

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8005ad6:	4a16      	ldr	r2, [pc, #88]	; (8005b30 <HAL_RCC_GetSysClockFreq+0xa8>)
 8005ad8:	2b03      	cmp	r3, #3
 8005ada:	bf08      	it	eq
 8005adc:	4610      	moveq	r0, r2
    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
      break;
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005ade:	4b13      	ldr	r3, [pc, #76]	; (8005b2c <HAL_RCC_GetSysClockFreq+0xa4>)
 8005ae0:	68d9      	ldr	r1, [r3, #12]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005ae2:	68da      	ldr	r2, [r3, #12]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005ae4:	68db      	ldr	r3, [r3, #12]
 8005ae6:	f3c3 6341 	ubfx	r3, r3, #25, #2
 8005aea:	3301      	adds	r3, #1
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005aec:	f3c1 1102 	ubfx	r1, r1, #4, #3
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005af0:	f3c2 2206 	ubfx	r2, r2, #8, #7
 8005af4:	fb00 f202 	mul.w	r2, r0, r2
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005af8:	3101      	adds	r1, #1
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005afa:	0058      	lsls	r0, r3, #1
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8005afc:	fbb2 f3f1 	udiv	r3, r2, r1
    sysclockfreq = pllvco / pllr;
 8005b00:	fbb3 f0f0 	udiv	r0, r3, r0
 8005b04:	4770      	bx	lr
    sysclockfreq = HSI_VALUE;
 8005b06:	480c      	ldr	r0, [pc, #48]	; (8005b38 <HAL_RCC_GetSysClockFreq+0xb0>)
  }

  return sysclockfreq;
}
 8005b08:	4770      	bx	lr
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005b0a:	f002 0203 	and.w	r2, r2, #3
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8005b0e:	2a01      	cmp	r2, #1
 8005b10:	d0c9      	beq.n	8005aa6 <HAL_RCC_GetSysClockFreq+0x1e>
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005b12:	4b06      	ldr	r3, [pc, #24]	; (8005b2c <HAL_RCC_GetSysClockFreq+0xa4>)
 8005b14:	68db      	ldr	r3, [r3, #12]
 8005b16:	f003 0303 	and.w	r3, r3, #3
    switch (pllsource)
 8005b1a:	2b02      	cmp	r3, #2
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8005b1c:	f04f 0000 	mov.w	r0, #0
    switch (pllsource)
 8005b20:	d1d9      	bne.n	8005ad6 <HAL_RCC_GetSysClockFreq+0x4e>
      pllvco = HSI_VALUE;
 8005b22:	4805      	ldr	r0, [pc, #20]	; (8005b38 <HAL_RCC_GetSysClockFreq+0xb0>)
 8005b24:	e7db      	b.n	8005ade <HAL_RCC_GetSysClockFreq+0x56>
 8005b26:	2000      	movs	r0, #0
  return sysclockfreq;
 8005b28:	4770      	bx	lr
 8005b2a:	bf00      	nop
 8005b2c:	40021000 	.word	0x40021000
 8005b30:	007a1200 	.word	0x007a1200
 8005b34:	08022d7c 	.word	0x08022d7c
 8005b38:	00f42400 	.word	0x00f42400

08005b3c <HAL_RCC_OscConfig>:
  if(RCC_OscInitStruct == NULL)
 8005b3c:	2800      	cmp	r0, #0
 8005b3e:	f000 81a4 	beq.w	8005e8a <HAL_RCC_OscConfig+0x34e>
{
 8005b42:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005b46:	4ab2      	ldr	r2, [pc, #712]	; (8005e10 <HAL_RCC_OscConfig+0x2d4>)
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005b48:	6803      	ldr	r3, [r0, #0]
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005b4a:	6895      	ldr	r5, [r2, #8]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005b4c:	68d6      	ldr	r6, [r2, #12]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005b4e:	06da      	lsls	r2, r3, #27
{
 8005b50:	b085      	sub	sp, #20
 8005b52:	4604      	mov	r4, r0
  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005b54:	f005 050c 	and.w	r5, r5, #12
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005b58:	f006 0603 	and.w	r6, r6, #3
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 8005b5c:	d52e      	bpl.n	8005bbc <HAL_RCC_OscConfig+0x80>
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8005b5e:	2d00      	cmp	r5, #0
 8005b60:	f000 810e 	beq.w	8005d80 <HAL_RCC_OscConfig+0x244>
 8005b64:	2d0c      	cmp	r5, #12
 8005b66:	f000 8108 	beq.w	8005d7a <HAL_RCC_OscConfig+0x23e>
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005b6a:	69a3      	ldr	r3, [r4, #24]
        __HAL_RCC_MSI_ENABLE();
 8005b6c:	4fa8      	ldr	r7, [pc, #672]	; (8005e10 <HAL_RCC_OscConfig+0x2d4>)
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	f000 8177 	beq.w	8005e62 <HAL_RCC_OscConfig+0x326>
        __HAL_RCC_MSI_ENABLE();
 8005b74:	683b      	ldr	r3, [r7, #0]
 8005b76:	f043 0301 	orr.w	r3, r3, #1
 8005b7a:	603b      	str	r3, [r7, #0]
        tickstart = HAL_GetTick();
 8005b7c:	f7ff fdd8 	bl	8005730 <HAL_GetTick>
 8005b80:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005b82:	e006      	b.n	8005b92 <HAL_RCC_OscConfig+0x56>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005b84:	f7ff fdd4 	bl	8005730 <HAL_GetTick>
 8005b88:	eba0 0008 	sub.w	r0, r0, r8
 8005b8c:	2802      	cmp	r0, #2
 8005b8e:	f200 8178 	bhi.w	8005e82 <HAL_RCC_OscConfig+0x346>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	079b      	lsls	r3, r3, #30
 8005b96:	d5f5      	bpl.n	8005b84 <HAL_RCC_OscConfig+0x48>
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005b98:	683b      	ldr	r3, [r7, #0]
 8005b9a:	f043 0308 	orr.w	r3, r3, #8
 8005b9e:	603b      	str	r3, [r7, #0]
 8005ba0:	683b      	ldr	r3, [r7, #0]
 8005ba2:	6a22      	ldr	r2, [r4, #32]
 8005ba4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005ba8:	4313      	orrs	r3, r2
 8005baa:	603b      	str	r3, [r7, #0]
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	69e2      	ldr	r2, [r4, #28]
 8005bb0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005bb4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005bb8:	607b      	str	r3, [r7, #4]
 8005bba:	6823      	ldr	r3, [r4, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005bbc:	07d9      	lsls	r1, r3, #31
 8005bbe:	f100 80b3 	bmi.w	8005d28 <HAL_RCC_OscConfig+0x1ec>
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005bc2:	0799      	lsls	r1, r3, #30
 8005bc4:	d523      	bpl.n	8005c0e <HAL_RCC_OscConfig+0xd2>
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8005bc6:	2d04      	cmp	r5, #4
 8005bc8:	f000 813b 	beq.w	8005e42 <HAL_RCC_OscConfig+0x306>
 8005bcc:	2d0c      	cmp	r5, #12
 8005bce:	f000 8135 	beq.w	8005e3c <HAL_RCC_OscConfig+0x300>
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005bd2:	68e3      	ldr	r3, [r4, #12]
        __HAL_RCC_HSI_ENABLE();
 8005bd4:	4e8e      	ldr	r6, [pc, #568]	; (8005e10 <HAL_RCC_OscConfig+0x2d4>)
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	f000 8183 	beq.w	8005ee2 <HAL_RCC_OscConfig+0x3a6>
        __HAL_RCC_HSI_ENABLE();
 8005bdc:	6833      	ldr	r3, [r6, #0]
 8005bde:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005be2:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8005be4:	f7ff fda4 	bl	8005730 <HAL_GetTick>
 8005be8:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005bea:	e005      	b.n	8005bf8 <HAL_RCC_OscConfig+0xbc>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005bec:	f7ff fda0 	bl	8005730 <HAL_GetTick>
 8005bf0:	1bc0      	subs	r0, r0, r7
 8005bf2:	2802      	cmp	r0, #2
 8005bf4:	f200 8145 	bhi.w	8005e82 <HAL_RCC_OscConfig+0x346>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005bf8:	6833      	ldr	r3, [r6, #0]
 8005bfa:	055b      	lsls	r3, r3, #21
 8005bfc:	d5f6      	bpl.n	8005bec <HAL_RCC_OscConfig+0xb0>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005bfe:	6873      	ldr	r3, [r6, #4]
 8005c00:	6922      	ldr	r2, [r4, #16]
 8005c02:	f023 53f8 	bic.w	r3, r3, #520093696	; 0x1f000000
 8005c06:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8005c0a:	6073      	str	r3, [r6, #4]
 8005c0c:	6823      	ldr	r3, [r4, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005c0e:	0719      	lsls	r1, r3, #28
 8005c10:	d519      	bpl.n	8005c46 <HAL_RCC_OscConfig+0x10a>
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005c12:	6963      	ldr	r3, [r4, #20]
      __HAL_RCC_LSI_ENABLE();
 8005c14:	4e7e      	ldr	r6, [pc, #504]	; (8005e10 <HAL_RCC_OscConfig+0x2d4>)
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	f000 814d 	beq.w	8005eb6 <HAL_RCC_OscConfig+0x37a>
      __HAL_RCC_LSI_ENABLE();
 8005c1c:	f8d6 3094 	ldr.w	r3, [r6, #148]	; 0x94
 8005c20:	f043 0301 	orr.w	r3, r3, #1
 8005c24:	f8c6 3094 	str.w	r3, [r6, #148]	; 0x94
      tickstart = HAL_GetTick();
 8005c28:	f7ff fd82 	bl	8005730 <HAL_GetTick>
 8005c2c:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005c2e:	e005      	b.n	8005c3c <HAL_RCC_OscConfig+0x100>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005c30:	f7ff fd7e 	bl	8005730 <HAL_GetTick>
 8005c34:	1bc0      	subs	r0, r0, r7
 8005c36:	2802      	cmp	r0, #2
 8005c38:	f200 8123 	bhi.w	8005e82 <HAL_RCC_OscConfig+0x346>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8005c3c:	f8d6 3094 	ldr.w	r3, [r6, #148]	; 0x94
 8005c40:	079a      	lsls	r2, r3, #30
 8005c42:	d5f5      	bpl.n	8005c30 <HAL_RCC_OscConfig+0xf4>
 8005c44:	6823      	ldr	r3, [r4, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005c46:	0758      	lsls	r0, r3, #29
 8005c48:	d541      	bpl.n	8005cce <HAL_RCC_OscConfig+0x192>
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8005c4a:	4b71      	ldr	r3, [pc, #452]	; (8005e10 <HAL_RCC_OscConfig+0x2d4>)
 8005c4c:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005c4e:	00d1      	lsls	r1, r2, #3
 8005c50:	f100 8145 	bmi.w	8005ede <HAL_RCC_OscConfig+0x3a2>
      __HAL_RCC_PWR_CLK_ENABLE();
 8005c54:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8005c56:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8005c5a:	659a      	str	r2, [r3, #88]	; 0x58
 8005c5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c62:	9301      	str	r3, [sp, #4]
 8005c64:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 8005c66:	2701      	movs	r7, #1
    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005c68:	4e6a      	ldr	r6, [pc, #424]	; (8005e14 <HAL_RCC_OscConfig+0x2d8>)
 8005c6a:	6832      	ldr	r2, [r6, #0]
 8005c6c:	05d2      	lsls	r2, r2, #23
 8005c6e:	f140 81af 	bpl.w	8005fd0 <HAL_RCC_OscConfig+0x494>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005c72:	68a3      	ldr	r3, [r4, #8]
 8005c74:	2b01      	cmp	r3, #1
 8005c76:	f000 81bd 	beq.w	8005ff4 <HAL_RCC_OscConfig+0x4b8>
 8005c7a:	2b05      	cmp	r3, #5
 8005c7c:	f000 8188 	beq.w	8005f90 <HAL_RCC_OscConfig+0x454>
 8005c80:	4e63      	ldr	r6, [pc, #396]	; (8005e10 <HAL_RCC_OscConfig+0x2d4>)
 8005c82:	f8d6 2090 	ldr.w	r2, [r6, #144]	; 0x90
 8005c86:	f022 0201 	bic.w	r2, r2, #1
 8005c8a:	f8c6 2090 	str.w	r2, [r6, #144]	; 0x90
 8005c8e:	f8d6 2090 	ldr.w	r2, [r6, #144]	; 0x90
 8005c92:	f022 0204 	bic.w	r2, r2, #4
 8005c96:	f8c6 2090 	str.w	r2, [r6, #144]	; 0x90
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	f040 8185 	bne.w	8005faa <HAL_RCC_OscConfig+0x46e>
      tickstart = HAL_GetTick();
 8005ca0:	f7ff fd46 	bl	8005730 <HAL_GetTick>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005ca4:	f241 3888 	movw	r8, #5000	; 0x1388
      tickstart = HAL_GetTick();
 8005ca8:	4681      	mov	r9, r0
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005caa:	e006      	b.n	8005cba <HAL_RCC_OscConfig+0x17e>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005cac:	f7ff fd40 	bl	8005730 <HAL_GetTick>
 8005cb0:	eba0 0009 	sub.w	r0, r0, r9
 8005cb4:	4540      	cmp	r0, r8
 8005cb6:	f200 80e4 	bhi.w	8005e82 <HAL_RCC_OscConfig+0x346>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005cba:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 8005cbe:	0799      	lsls	r1, r3, #30
 8005cc0:	d4f4      	bmi.n	8005cac <HAL_RCC_OscConfig+0x170>
    if(pwrclkchanged == SET)
 8005cc2:	b127      	cbz	r7, 8005cce <HAL_RCC_OscConfig+0x192>
      __HAL_RCC_PWR_CLK_DISABLE();
 8005cc4:	4a52      	ldr	r2, [pc, #328]	; (8005e10 <HAL_RCC_OscConfig+0x2d4>)
 8005cc6:	6d93      	ldr	r3, [r2, #88]	; 0x58
 8005cc8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005ccc:	6593      	str	r3, [r2, #88]	; 0x58
  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005cce:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 8005cd0:	b333      	cbz	r3, 8005d20 <HAL_RCC_OscConfig+0x1e4>
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005cd2:	2b02      	cmp	r3, #2
 8005cd4:	f000 81ba 	beq.w	800604c <HAL_RCC_OscConfig+0x510>
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8005cd8:	2d0c      	cmp	r5, #12
 8005cda:	f000 8094 	beq.w	8005e06 <HAL_RCC_OscConfig+0x2ca>
        __HAL_RCC_PLL_DISABLE();
 8005cde:	4b4c      	ldr	r3, [pc, #304]	; (8005e10 <HAL_RCC_OscConfig+0x2d4>)
 8005ce0:	681a      	ldr	r2, [r3, #0]
 8005ce2:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 8005ce6:	601a      	str	r2, [r3, #0]
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8005ce8:	681a      	ldr	r2, [r3, #0]
 8005cea:	f012 5f20 	tst.w	r2, #671088640	; 0x28000000
 8005cee:	d103      	bne.n	8005cf8 <HAL_RCC_OscConfig+0x1bc>
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8005cf0:	68da      	ldr	r2, [r3, #12]
 8005cf2:	f022 0203 	bic.w	r2, r2, #3
 8005cf6:	60da      	str	r2, [r3, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8005cf8:	4c45      	ldr	r4, [pc, #276]	; (8005e10 <HAL_RCC_OscConfig+0x2d4>)
 8005cfa:	68e3      	ldr	r3, [r4, #12]
 8005cfc:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8005d00:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d04:	60e3      	str	r3, [r4, #12]
        tickstart = HAL_GetTick();
 8005d06:	f7ff fd13 	bl	8005730 <HAL_GetTick>
 8005d0a:	4605      	mov	r5, r0
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005d0c:	e005      	b.n	8005d1a <HAL_RCC_OscConfig+0x1de>
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005d0e:	f7ff fd0f 	bl	8005730 <HAL_GetTick>
 8005d12:	1b40      	subs	r0, r0, r5
 8005d14:	2802      	cmp	r0, #2
 8005d16:	f200 80b4 	bhi.w	8005e82 <HAL_RCC_OscConfig+0x346>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005d1a:	6823      	ldr	r3, [r4, #0]
 8005d1c:	019b      	lsls	r3, r3, #6
 8005d1e:	d4f6      	bmi.n	8005d0e <HAL_RCC_OscConfig+0x1d2>
  return HAL_OK;
 8005d20:	2000      	movs	r0, #0
}
 8005d22:	b005      	add	sp, #20
 8005d24:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 8005d28:	2d08      	cmp	r5, #8
 8005d2a:	d07d      	beq.n	8005e28 <HAL_RCC_OscConfig+0x2ec>
 8005d2c:	2d0c      	cmp	r5, #12
 8005d2e:	d079      	beq.n	8005e24 <HAL_RCC_OscConfig+0x2e8>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005d30:	6863      	ldr	r3, [r4, #4]
 8005d32:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d36:	f000 80aa 	beq.w	8005e8e <HAL_RCC_OscConfig+0x352>
 8005d3a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005d3e:	f000 81dc 	beq.w	80060fa <HAL_RCC_OscConfig+0x5be>
 8005d42:	4f33      	ldr	r7, [pc, #204]	; (8005e10 <HAL_RCC_OscConfig+0x2d4>)
 8005d44:	683a      	ldr	r2, [r7, #0]
 8005d46:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005d4a:	603a      	str	r2, [r7, #0]
 8005d4c:	683a      	ldr	r2, [r7, #0]
 8005d4e:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8005d52:	603a      	str	r2, [r7, #0]
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8005d54:	2b00      	cmp	r3, #0
 8005d56:	f040 809f 	bne.w	8005e98 <HAL_RCC_OscConfig+0x35c>
        tickstart = HAL_GetTick();
 8005d5a:	f7ff fce9 	bl	8005730 <HAL_GetTick>
 8005d5e:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005d60:	e006      	b.n	8005d70 <HAL_RCC_OscConfig+0x234>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005d62:	f7ff fce5 	bl	8005730 <HAL_GetTick>
 8005d66:	eba0 0008 	sub.w	r0, r0, r8
 8005d6a:	2864      	cmp	r0, #100	; 0x64
 8005d6c:	f200 8089 	bhi.w	8005e82 <HAL_RCC_OscConfig+0x346>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005d70:	683b      	ldr	r3, [r7, #0]
 8005d72:	0398      	lsls	r0, r3, #14
 8005d74:	d4f5      	bmi.n	8005d62 <HAL_RCC_OscConfig+0x226>
 8005d76:	6823      	ldr	r3, [r4, #0]
 8005d78:	e723      	b.n	8005bc2 <HAL_RCC_OscConfig+0x86>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8005d7a:	2e01      	cmp	r6, #1
 8005d7c:	f47f aef5 	bne.w	8005b6a <HAL_RCC_OscConfig+0x2e>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005d80:	4b23      	ldr	r3, [pc, #140]	; (8005e10 <HAL_RCC_OscConfig+0x2d4>)
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	079f      	lsls	r7, r3, #30
 8005d86:	d43b      	bmi.n	8005e00 <HAL_RCC_OscConfig+0x2c4>
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005d88:	4b21      	ldr	r3, [pc, #132]	; (8005e10 <HAL_RCC_OscConfig+0x2d4>)
 8005d8a:	f8d4 8020 	ldr.w	r8, [r4, #32]
 8005d8e:	681a      	ldr	r2, [r3, #0]
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005d90:	4f1f      	ldr	r7, [pc, #124]	; (8005e10 <HAL_RCC_OscConfig+0x2d4>)
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8005d92:	0710      	lsls	r0, r2, #28
 8005d94:	bf56      	itet	pl
 8005d96:	f8d3 3094 	ldrpl.w	r3, [r3, #148]	; 0x94
 8005d9a:	681b      	ldrmi	r3, [r3, #0]
 8005d9c:	091b      	lsrpl	r3, r3, #4
 8005d9e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005da2:	4598      	cmp	r8, r3
 8005da4:	f200 80af 	bhi.w	8005f06 <HAL_RCC_OscConfig+0x3ca>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	f043 0308 	orr.w	r3, r3, #8
 8005dae:	603b      	str	r3, [r7, #0]
 8005db0:	683b      	ldr	r3, [r7, #0]
 8005db2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005db6:	ea43 0308 	orr.w	r3, r3, r8
 8005dba:	603b      	str	r3, [r7, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	69e2      	ldr	r2, [r4, #28]
 8005dc0:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005dc4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
 8005dc8:	607b      	str	r3, [r7, #4]
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 8005dca:	2d00      	cmp	r5, #0
 8005dcc:	f000 811a 	beq.w	8006004 <HAL_RCC_OscConfig+0x4c8>
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005dd0:	f7ff fe5a 	bl	8005a88 <HAL_RCC_GetSysClockFreq>
 8005dd4:	4b0e      	ldr	r3, [pc, #56]	; (8005e10 <HAL_RCC_OscConfig+0x2d4>)
 8005dd6:	4a10      	ldr	r2, [pc, #64]	; (8005e18 <HAL_RCC_OscConfig+0x2dc>)
 8005dd8:	689b      	ldr	r3, [r3, #8]
        status = HAL_InitTick(uwTickPrio);
 8005dda:	4910      	ldr	r1, [pc, #64]	; (8005e1c <HAL_RCC_OscConfig+0x2e0>)
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005ddc:	f3c3 1303 	ubfx	r3, r3, #4, #4
 8005de0:	5cd3      	ldrb	r3, [r2, r3]
 8005de2:	4a0f      	ldr	r2, [pc, #60]	; (8005e20 <HAL_RCC_OscConfig+0x2e4>)
 8005de4:	f003 031f 	and.w	r3, r3, #31
 8005de8:	fa20 f303 	lsr.w	r3, r0, r3
        status = HAL_InitTick(uwTickPrio);
 8005dec:	6808      	ldr	r0, [r1, #0]
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005dee:	6013      	str	r3, [r2, #0]
        status = HAL_InitTick(uwTickPrio);
 8005df0:	f7ff fc58 	bl	80056a4 <HAL_InitTick>
        if(status != HAL_OK)
 8005df4:	b940      	cbnz	r0, 8005e08 <HAL_RCC_OscConfig+0x2cc>
 8005df6:	6823      	ldr	r3, [r4, #0]
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005df8:	07d9      	lsls	r1, r3, #31
 8005dfa:	f57f aee2 	bpl.w	8005bc2 <HAL_RCC_OscConfig+0x86>
 8005dfe:	e793      	b.n	8005d28 <HAL_RCC_OscConfig+0x1ec>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 8005e00:	69a3      	ldr	r3, [r4, #24]
 8005e02:	2b00      	cmp	r3, #0
 8005e04:	d1c0      	bne.n	8005d88 <HAL_RCC_OscConfig+0x24c>
    return HAL_ERROR;
 8005e06:	2001      	movs	r0, #1
}
 8005e08:	b005      	add	sp, #20
 8005e0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005e0e:	bf00      	nop
 8005e10:	40021000 	.word	0x40021000
 8005e14:	40007000 	.word	0x40007000
 8005e18:	08022d64 	.word	0x08022d64
 8005e1c:	20000008 	.word	0x20000008
 8005e20:	20000000 	.word	0x20000000
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8005e24:	2e03      	cmp	r6, #3
 8005e26:	d183      	bne.n	8005d30 <HAL_RCC_OscConfig+0x1f4>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005e28:	4aba      	ldr	r2, [pc, #744]	; (8006114 <HAL_RCC_OscConfig+0x5d8>)
 8005e2a:	6812      	ldr	r2, [r2, #0]
 8005e2c:	0392      	lsls	r2, r2, #14
 8005e2e:	f57f aec8 	bpl.w	8005bc2 <HAL_RCC_OscConfig+0x86>
 8005e32:	6862      	ldr	r2, [r4, #4]
 8005e34:	2a00      	cmp	r2, #0
 8005e36:	f47f aec4 	bne.w	8005bc2 <HAL_RCC_OscConfig+0x86>
 8005e3a:	e7e4      	b.n	8005e06 <HAL_RCC_OscConfig+0x2ca>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8005e3c:	2e02      	cmp	r6, #2
 8005e3e:	f47f aec8 	bne.w	8005bd2 <HAL_RCC_OscConfig+0x96>
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005e42:	4ab4      	ldr	r2, [pc, #720]	; (8006114 <HAL_RCC_OscConfig+0x5d8>)
 8005e44:	6812      	ldr	r2, [r2, #0]
 8005e46:	0552      	lsls	r2, r2, #21
 8005e48:	d502      	bpl.n	8005e50 <HAL_RCC_OscConfig+0x314>
 8005e4a:	68e2      	ldr	r2, [r4, #12]
 8005e4c:	2a00      	cmp	r2, #0
 8005e4e:	d0da      	beq.n	8005e06 <HAL_RCC_OscConfig+0x2ca>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e50:	49b0      	ldr	r1, [pc, #704]	; (8006114 <HAL_RCC_OscConfig+0x5d8>)
 8005e52:	6920      	ldr	r0, [r4, #16]
 8005e54:	684a      	ldr	r2, [r1, #4]
 8005e56:	f022 52f8 	bic.w	r2, r2, #520093696	; 0x1f000000
 8005e5a:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 8005e5e:	604a      	str	r2, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005e60:	e6d5      	b.n	8005c0e <HAL_RCC_OscConfig+0xd2>
        __HAL_RCC_MSI_DISABLE();
 8005e62:	683b      	ldr	r3, [r7, #0]
 8005e64:	f023 0301 	bic.w	r3, r3, #1
 8005e68:	603b      	str	r3, [r7, #0]
        tickstart = HAL_GetTick();
 8005e6a:	f7ff fc61 	bl	8005730 <HAL_GetTick>
 8005e6e:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8005e70:	683b      	ldr	r3, [r7, #0]
 8005e72:	0798      	lsls	r0, r3, #30
 8005e74:	d5bf      	bpl.n	8005df6 <HAL_RCC_OscConfig+0x2ba>
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8005e76:	f7ff fc5b 	bl	8005730 <HAL_GetTick>
 8005e7a:	eba0 0008 	sub.w	r0, r0, r8
 8005e7e:	2802      	cmp	r0, #2
 8005e80:	d9f6      	bls.n	8005e70 <HAL_RCC_OscConfig+0x334>
            return HAL_TIMEOUT;
 8005e82:	2003      	movs	r0, #3
}
 8005e84:	b005      	add	sp, #20
 8005e86:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return HAL_ERROR;
 8005e8a:	2001      	movs	r0, #1
}
 8005e8c:	4770      	bx	lr
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005e8e:	4aa1      	ldr	r2, [pc, #644]	; (8006114 <HAL_RCC_OscConfig+0x5d8>)
 8005e90:	6813      	ldr	r3, [r2, #0]
 8005e92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005e96:	6013      	str	r3, [r2, #0]
        tickstart = HAL_GetTick();
 8005e98:	f7ff fc4a 	bl	8005730 <HAL_GetTick>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005e9c:	4f9d      	ldr	r7, [pc, #628]	; (8006114 <HAL_RCC_OscConfig+0x5d8>)
        tickstart = HAL_GetTick();
 8005e9e:	4680      	mov	r8, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005ea0:	e005      	b.n	8005eae <HAL_RCC_OscConfig+0x372>
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005ea2:	f7ff fc45 	bl	8005730 <HAL_GetTick>
 8005ea6:	eba0 0008 	sub.w	r0, r0, r8
 8005eaa:	2864      	cmp	r0, #100	; 0x64
 8005eac:	d8e9      	bhi.n	8005e82 <HAL_RCC_OscConfig+0x346>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	039b      	lsls	r3, r3, #14
 8005eb2:	d5f6      	bpl.n	8005ea2 <HAL_RCC_OscConfig+0x366>
 8005eb4:	e75f      	b.n	8005d76 <HAL_RCC_OscConfig+0x23a>
      __HAL_RCC_LSI_DISABLE();
 8005eb6:	f8d6 3094 	ldr.w	r3, [r6, #148]	; 0x94
 8005eba:	f023 0301 	bic.w	r3, r3, #1
 8005ebe:	f8c6 3094 	str.w	r3, [r6, #148]	; 0x94
      tickstart = HAL_GetTick();
 8005ec2:	f7ff fc35 	bl	8005730 <HAL_GetTick>
 8005ec6:	4607      	mov	r7, r0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005ec8:	e004      	b.n	8005ed4 <HAL_RCC_OscConfig+0x398>
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005eca:	f7ff fc31 	bl	8005730 <HAL_GetTick>
 8005ece:	1bc0      	subs	r0, r0, r7
 8005ed0:	2802      	cmp	r0, #2
 8005ed2:	d8d6      	bhi.n	8005e82 <HAL_RCC_OscConfig+0x346>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005ed4:	f8d6 3094 	ldr.w	r3, [r6, #148]	; 0x94
 8005ed8:	079b      	lsls	r3, r3, #30
 8005eda:	d4f6      	bmi.n	8005eca <HAL_RCC_OscConfig+0x38e>
 8005edc:	e6b2      	b.n	8005c44 <HAL_RCC_OscConfig+0x108>
    FlagStatus       pwrclkchanged = RESET;
 8005ede:	2700      	movs	r7, #0
 8005ee0:	e6c2      	b.n	8005c68 <HAL_RCC_OscConfig+0x12c>
        __HAL_RCC_HSI_DISABLE();
 8005ee2:	6833      	ldr	r3, [r6, #0]
 8005ee4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005ee8:	6033      	str	r3, [r6, #0]
        tickstart = HAL_GetTick();
 8005eea:	f7ff fc21 	bl	8005730 <HAL_GetTick>
 8005eee:	4607      	mov	r7, r0
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005ef0:	e004      	b.n	8005efc <HAL_RCC_OscConfig+0x3c0>
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005ef2:	f7ff fc1d 	bl	8005730 <HAL_GetTick>
 8005ef6:	1bc0      	subs	r0, r0, r7
 8005ef8:	2802      	cmp	r0, #2
 8005efa:	d8c2      	bhi.n	8005e82 <HAL_RCC_OscConfig+0x346>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005efc:	6833      	ldr	r3, [r6, #0]
 8005efe:	0558      	lsls	r0, r3, #21
 8005f00:	d4f7      	bmi.n	8005ef2 <HAL_RCC_OscConfig+0x3b6>
 8005f02:	6823      	ldr	r3, [r4, #0]
 8005f04:	e683      	b.n	8005c0e <HAL_RCC_OscConfig+0xd2>
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8005f06:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005f08:	00d9      	lsls	r1, r3, #3
 8005f0a:	d531      	bpl.n	8005f70 <HAL_RCC_OscConfig+0x434>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8005f0c:	f7ff fd70 	bl	80059f0 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_ENABLE();
    vos = HAL_PWREx_GetVoltageRange();
    __HAL_RCC_PWR_CLK_DISABLE();
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8005f10:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8005f14:	f000 8104 	beq.w	8006120 <HAL_RCC_OscConfig+0x5e4>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8005f18:	f1b8 0f80 	cmp.w	r8, #128	; 0x80
 8005f1c:	f200 811b 	bhi.w	8006156 <HAL_RCC_OscConfig+0x61a>
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8005f20:	f000 8175 	beq.w	800620e <HAL_RCC_OscConfig+0x6d2>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
      }
      else if(msirange == RCC_MSIRANGE_7)
 8005f24:	f1a8 0870 	sub.w	r8, r8, #112	; 0x70
 8005f28:	fab8 f888 	clz	r8, r8
 8005f2c:	ea4f 1858 	mov.w	r8, r8, lsr #5
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8005f30:	4a79      	ldr	r2, [pc, #484]	; (8006118 <HAL_RCC_OscConfig+0x5dc>)
 8005f32:	6813      	ldr	r3, [r2, #0]
 8005f34:	f023 0307 	bic.w	r3, r3, #7
 8005f38:	ea43 0308 	orr.w	r3, r3, r8
 8005f3c:	6013      	str	r3, [r2, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8005f3e:	6813      	ldr	r3, [r2, #0]
 8005f40:	f003 0307 	and.w	r3, r3, #7
 8005f44:	4598      	cmp	r8, r3
 8005f46:	f47f af5e 	bne.w	8005e06 <HAL_RCC_OscConfig+0x2ca>
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8005f4a:	4b72      	ldr	r3, [pc, #456]	; (8006114 <HAL_RCC_OscConfig+0x5d8>)
 8005f4c:	681a      	ldr	r2, [r3, #0]
 8005f4e:	f042 0208 	orr.w	r2, r2, #8
 8005f52:	601a      	str	r2, [r3, #0]
 8005f54:	681a      	ldr	r2, [r3, #0]
 8005f56:	6a21      	ldr	r1, [r4, #32]
 8005f58:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 8005f5c:	430a      	orrs	r2, r1
 8005f5e:	601a      	str	r2, [r3, #0]
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8005f60:	685a      	ldr	r2, [r3, #4]
 8005f62:	69e1      	ldr	r1, [r4, #28]
 8005f64:	f422 427f 	bic.w	r2, r2, #65280	; 0xff00
 8005f68:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8005f6c:	605a      	str	r2, [r3, #4]
 8005f6e:	e72f      	b.n	8005dd0 <HAL_RCC_OscConfig+0x294>
    __HAL_RCC_PWR_CLK_ENABLE();
 8005f70:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005f72:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f76:	65bb      	str	r3, [r7, #88]	; 0x58
 8005f78:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005f7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f7e:	9302      	str	r3, [sp, #8]
 8005f80:	9b02      	ldr	r3, [sp, #8]
    vos = HAL_PWREx_GetVoltageRange();
 8005f82:	f7ff fd35 	bl	80059f0 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 8005f86:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8005f88:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005f8c:	65bb      	str	r3, [r7, #88]	; 0x58
 8005f8e:	e7bf      	b.n	8005f10 <HAL_RCC_OscConfig+0x3d4>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005f90:	4b60      	ldr	r3, [pc, #384]	; (8006114 <HAL_RCC_OscConfig+0x5d8>)
 8005f92:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8005f96:	f042 0204 	orr.w	r2, r2, #4
 8005f9a:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
 8005f9e:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 8005fa2:	f042 0201 	orr.w	r2, r2, #1
 8005fa6:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
      tickstart = HAL_GetTick();
 8005faa:	f7ff fbc1 	bl	8005730 <HAL_GetTick>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005fae:	4e59      	ldr	r6, [pc, #356]	; (8006114 <HAL_RCC_OscConfig+0x5d8>)
      tickstart = HAL_GetTick();
 8005fb0:	4681      	mov	r9, r0
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005fb2:	f241 3888 	movw	r8, #5000	; 0x1388
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005fb6:	e006      	b.n	8005fc6 <HAL_RCC_OscConfig+0x48a>
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005fb8:	f7ff fbba 	bl	8005730 <HAL_GetTick>
 8005fbc:	eba0 0009 	sub.w	r0, r0, r9
 8005fc0:	4540      	cmp	r0, r8
 8005fc2:	f63f af5e 	bhi.w	8005e82 <HAL_RCC_OscConfig+0x346>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005fc6:	f8d6 3090 	ldr.w	r3, [r6, #144]	; 0x90
 8005fca:	0798      	lsls	r0, r3, #30
 8005fcc:	d5f4      	bpl.n	8005fb8 <HAL_RCC_OscConfig+0x47c>
 8005fce:	e678      	b.n	8005cc2 <HAL_RCC_OscConfig+0x186>
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005fd0:	6832      	ldr	r2, [r6, #0]
 8005fd2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005fd6:	6032      	str	r2, [r6, #0]
      tickstart = HAL_GetTick();
 8005fd8:	f7ff fbaa 	bl	8005730 <HAL_GetTick>
 8005fdc:	4680      	mov	r8, r0
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005fde:	6833      	ldr	r3, [r6, #0]
 8005fe0:	05db      	lsls	r3, r3, #23
 8005fe2:	f53f ae46 	bmi.w	8005c72 <HAL_RCC_OscConfig+0x136>
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005fe6:	f7ff fba3 	bl	8005730 <HAL_GetTick>
 8005fea:	eba0 0008 	sub.w	r0, r0, r8
 8005fee:	2802      	cmp	r0, #2
 8005ff0:	d9f5      	bls.n	8005fde <HAL_RCC_OscConfig+0x4a2>
 8005ff2:	e746      	b.n	8005e82 <HAL_RCC_OscConfig+0x346>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005ff4:	4a47      	ldr	r2, [pc, #284]	; (8006114 <HAL_RCC_OscConfig+0x5d8>)
 8005ff6:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8005ffa:	f043 0301 	orr.w	r3, r3, #1
 8005ffe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8006002:	e7d2      	b.n	8005faa <HAL_RCC_OscConfig+0x46e>
  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8006004:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006006:	00da      	lsls	r2, r3, #3
 8006008:	f140 8095 	bpl.w	8006136 <HAL_RCC_OscConfig+0x5fa>
    vos = HAL_PWREx_GetVoltageRange();
 800600c:	f7ff fcf0 	bl	80059f0 <HAL_PWREx_GetVoltageRange>
  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8006010:	f5b0 7f00 	cmp.w	r0, #512	; 0x200
 8006014:	f000 80a2 	beq.w	800615c <HAL_RCC_OscConfig+0x620>
    if(msirange > RCC_MSIRANGE_8)
 8006018:	f1b8 0f80 	cmp.w	r8, #128	; 0x80
 800601c:	f200 80ee 	bhi.w	80061fc <HAL_RCC_OscConfig+0x6c0>
      if(msirange == RCC_MSIRANGE_8)
 8006020:	f000 80f8 	beq.w	8006214 <HAL_RCC_OscConfig+0x6d8>
      else if(msirange == RCC_MSIRANGE_7)
 8006024:	f1a8 0870 	sub.w	r8, r8, #112	; 0x70
 8006028:	fab8 f888 	clz	r8, r8
 800602c:	ea4f 1858 	mov.w	r8, r8, lsr #5
  __HAL_FLASH_SET_LATENCY(latency);
 8006030:	4a39      	ldr	r2, [pc, #228]	; (8006118 <HAL_RCC_OscConfig+0x5dc>)
 8006032:	6813      	ldr	r3, [r2, #0]
 8006034:	f023 0307 	bic.w	r3, r3, #7
 8006038:	ea43 0308 	orr.w	r3, r3, r8
 800603c:	6013      	str	r3, [r2, #0]
  if(__HAL_FLASH_GET_LATENCY() != latency)
 800603e:	6813      	ldr	r3, [r2, #0]
 8006040:	f003 0307 	and.w	r3, r3, #7
 8006044:	4598      	cmp	r8, r3
 8006046:	f47f aede 	bne.w	8005e06 <HAL_RCC_OscConfig+0x2ca>
 800604a:	e6c1      	b.n	8005dd0 <HAL_RCC_OscConfig+0x294>
      pll_config = RCC->PLLCFGR;
 800604c:	4a31      	ldr	r2, [pc, #196]	; (8006114 <HAL_RCC_OscConfig+0x5d8>)
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800604e:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
      pll_config = RCC->PLLCFGR;
 8006050:	68d3      	ldr	r3, [r2, #12]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8006052:	f003 0003 	and.w	r0, r3, #3
 8006056:	4288      	cmp	r0, r1
 8006058:	f000 808b 	beq.w	8006172 <HAL_RCC_OscConfig+0x636>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 800605c:	2d0c      	cmp	r5, #12
 800605e:	f43f aed2 	beq.w	8005e06 <HAL_RCC_OscConfig+0x2ca>
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8006062:	4d2c      	ldr	r5, [pc, #176]	; (8006114 <HAL_RCC_OscConfig+0x5d8>)
 8006064:	682a      	ldr	r2, [r5, #0]
 8006066:	0152      	lsls	r2, r2, #5
 8006068:	f53f aecd 	bmi.w	8005e06 <HAL_RCC_OscConfig+0x2ca>
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 800606c:	682a      	ldr	r2, [r5, #0]
 800606e:	00d3      	lsls	r3, r2, #3
 8006070:	f53f aec9 	bmi.w	8005e06 <HAL_RCC_OscConfig+0x2ca>
            __HAL_RCC_PLL_DISABLE();
 8006074:	682a      	ldr	r2, [r5, #0]
 8006076:	f022 7280 	bic.w	r2, r2, #16777216	; 0x1000000
 800607a:	602a      	str	r2, [r5, #0]
            tickstart = HAL_GetTick();
 800607c:	f7ff fb58 	bl	8005730 <HAL_GetTick>
 8006080:	4606      	mov	r6, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006082:	e005      	b.n	8006090 <HAL_RCC_OscConfig+0x554>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006084:	f7ff fb54 	bl	8005730 <HAL_GetTick>
 8006088:	1b80      	subs	r0, r0, r6
 800608a:	2802      	cmp	r0, #2
 800608c:	f63f aef9 	bhi.w	8005e82 <HAL_RCC_OscConfig+0x346>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8006090:	682b      	ldr	r3, [r5, #0]
 8006092:	019f      	lsls	r7, r3, #6
 8006094:	d4f6      	bmi.n	8006084 <HAL_RCC_OscConfig+0x548>
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8006096:	68e9      	ldr	r1, [r5, #12]
 8006098:	4b20      	ldr	r3, [pc, #128]	; (800611c <HAL_RCC_OscConfig+0x5e0>)
 800609a:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
 800609c:	6b67      	ldr	r7, [r4, #52]	; 0x34
 800609e:	6b26      	ldr	r6, [r4, #48]	; 0x30
 80060a0:	400b      	ands	r3, r1
 80060a2:	e9d4 010e 	ldrd	r0, r1, [r4, #56]	; 0x38
 80060a6:	4313      	orrs	r3, r2
 80060a8:	ea43 2307 	orr.w	r3, r3, r7, lsl #8
 80060ac:	6c22      	ldr	r2, [r4, #64]	; 0x40
 80060ae:	1e74      	subs	r4, r6, #1
 80060b0:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
 80060b4:	0900      	lsrs	r0, r0, #4
 80060b6:	0849      	lsrs	r1, r1, #1
 80060b8:	ea43 4340 	orr.w	r3, r3, r0, lsl #17
 80060bc:	3901      	subs	r1, #1
 80060be:	0852      	lsrs	r2, r2, #1
 80060c0:	ea43 5341 	orr.w	r3, r3, r1, lsl #21
 80060c4:	3a01      	subs	r2, #1
 80060c6:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 80060ca:	60eb      	str	r3, [r5, #12]
            __HAL_RCC_PLL_ENABLE();
 80060cc:	682b      	ldr	r3, [r5, #0]
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80060ce:	4c11      	ldr	r4, [pc, #68]	; (8006114 <HAL_RCC_OscConfig+0x5d8>)
            __HAL_RCC_PLL_ENABLE();
 80060d0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80060d4:	602b      	str	r3, [r5, #0]
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80060d6:	68eb      	ldr	r3, [r5, #12]
 80060d8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80060dc:	60eb      	str	r3, [r5, #12]
            tickstart = HAL_GetTick();
 80060de:	f7ff fb27 	bl	8005730 <HAL_GetTick>
 80060e2:	4605      	mov	r5, r0
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80060e4:	e005      	b.n	80060f2 <HAL_RCC_OscConfig+0x5b6>
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80060e6:	f7ff fb23 	bl	8005730 <HAL_GetTick>
 80060ea:	1b40      	subs	r0, r0, r5
 80060ec:	2802      	cmp	r0, #2
 80060ee:	f63f aec8 	bhi.w	8005e82 <HAL_RCC_OscConfig+0x346>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80060f2:	6823      	ldr	r3, [r4, #0]
 80060f4:	0198      	lsls	r0, r3, #6
 80060f6:	d5f6      	bpl.n	80060e6 <HAL_RCC_OscConfig+0x5aa>
 80060f8:	e612      	b.n	8005d20 <HAL_RCC_OscConfig+0x1e4>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80060fa:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80060fe:	f5a3 333c 	sub.w	r3, r3, #192512	; 0x2f000
 8006102:	681a      	ldr	r2, [r3, #0]
 8006104:	f442 2280 	orr.w	r2, r2, #262144	; 0x40000
 8006108:	601a      	str	r2, [r3, #0]
 800610a:	681a      	ldr	r2, [r3, #0]
 800610c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8006110:	601a      	str	r2, [r3, #0]
 8006112:	e6c1      	b.n	8005e98 <HAL_RCC_OscConfig+0x35c>
 8006114:	40021000 	.word	0x40021000
 8006118:	40022000 	.word	0x40022000
 800611c:	f99d808c 	.word	0xf99d808c
    if(msirange > RCC_MSIRANGE_8)
 8006120:	f1b8 0f80 	cmp.w	r8, #128	; 0x80
 8006124:	d96d      	bls.n	8006202 <HAL_RCC_OscConfig+0x6c6>
        latency = FLASH_LATENCY_2; /* 2WS */
 8006126:	f1b8 0fa1 	cmp.w	r8, #161	; 0xa1
 800612a:	bf34      	ite	cc
 800612c:	f04f 0801 	movcc.w	r8, #1
 8006130:	f04f 0802 	movcs.w	r8, #2
 8006134:	e6fc      	b.n	8005f30 <HAL_RCC_OscConfig+0x3f4>
    __HAL_RCC_PWR_CLK_ENABLE();
 8006136:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006138:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800613c:	65bb      	str	r3, [r7, #88]	; 0x58
 800613e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8006140:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006144:	9303      	str	r3, [sp, #12]
 8006146:	9b03      	ldr	r3, [sp, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8006148:	f7ff fc52 	bl	80059f0 <HAL_PWREx_GetVoltageRange>
    __HAL_RCC_PWR_CLK_DISABLE();
 800614c:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800614e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006152:	65bb      	str	r3, [r7, #88]	; 0x58
 8006154:	e75c      	b.n	8006010 <HAL_RCC_OscConfig+0x4d4>
      latency = FLASH_LATENCY_3; /* 3WS */
 8006156:	f04f 0803 	mov.w	r8, #3
 800615a:	e6e9      	b.n	8005f30 <HAL_RCC_OscConfig+0x3f4>
    if(msirange > RCC_MSIRANGE_8)
 800615c:	f1b8 0f80 	cmp.w	r8, #128	; 0x80
 8006160:	d952      	bls.n	8006208 <HAL_RCC_OscConfig+0x6cc>
        latency = FLASH_LATENCY_2; /* 2WS */
 8006162:	f1b8 0fa1 	cmp.w	r8, #161	; 0xa1
 8006166:	bf34      	ite	cc
 8006168:	f04f 0801 	movcc.w	r8, #1
 800616c:	f04f 0802 	movcs.w	r8, #2
 8006170:	e75e      	b.n	8006030 <HAL_RCC_OscConfig+0x4f4>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006172:	6b20      	ldr	r0, [r4, #48]	; 0x30
 8006174:	f003 0170 	and.w	r1, r3, #112	; 0x70
 8006178:	3801      	subs	r0, #1
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 800617a:	ebb1 1f00 	cmp.w	r1, r0, lsl #4
 800617e:	f47f af6d 	bne.w	800605c <HAL_RCC_OscConfig+0x520>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8006182:	6b60      	ldr	r0, [r4, #52]	; 0x34
 8006184:	f403 41fe 	and.w	r1, r3, #32512	; 0x7f00
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8006188:	ebb1 2f00 	cmp.w	r1, r0, lsl #8
 800618c:	f47f af66 	bne.w	800605c <HAL_RCC_OscConfig+0x520>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8006190:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8006192:	3907      	subs	r1, #7
 8006194:	f403 3000 	and.w	r0, r3, #131072	; 0x20000
 8006198:	bf18      	it	ne
 800619a:	2101      	movne	r1, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800619c:	4288      	cmp	r0, r1
 800619e:	f47f af5d 	bne.w	800605c <HAL_RCC_OscConfig+0x520>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80061a2:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 80061a4:	0849      	lsrs	r1, r1, #1
 80061a6:	3901      	subs	r1, #1
 80061a8:	f403 00c0 	and.w	r0, r3, #6291456	; 0x600000
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 80061ac:	ebb0 5f41 	cmp.w	r0, r1, lsl #21
 80061b0:	f47f af54 	bne.w	800605c <HAL_RCC_OscConfig+0x520>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80061b4:	6c21      	ldr	r1, [r4, #64]	; 0x40
 80061b6:	0849      	lsrs	r1, r1, #1
 80061b8:	f003 63c0 	and.w	r3, r3, #100663296	; 0x6000000
 80061bc:	3901      	subs	r1, #1
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80061be:	ebb3 6f41 	cmp.w	r3, r1, lsl #25
 80061c2:	f47f af4b 	bne.w	800605c <HAL_RCC_OscConfig+0x520>
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80061c6:	6813      	ldr	r3, [r2, #0]
 80061c8:	0199      	lsls	r1, r3, #6
 80061ca:	f53f ada9 	bmi.w	8005d20 <HAL_RCC_OscConfig+0x1e4>
          __HAL_RCC_PLL_ENABLE();
 80061ce:	6813      	ldr	r3, [r2, #0]
 80061d0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80061d4:	6013      	str	r3, [r2, #0]
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80061d6:	68d3      	ldr	r3, [r2, #12]
 80061d8:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80061dc:	60d3      	str	r3, [r2, #12]
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80061de:	4614      	mov	r4, r2
          tickstart = HAL_GetTick();
 80061e0:	f7ff faa6 	bl	8005730 <HAL_GetTick>
 80061e4:	4605      	mov	r5, r0
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80061e6:	e005      	b.n	80061f4 <HAL_RCC_OscConfig+0x6b8>
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80061e8:	f7ff faa2 	bl	8005730 <HAL_GetTick>
 80061ec:	1b40      	subs	r0, r0, r5
 80061ee:	2802      	cmp	r0, #2
 80061f0:	f63f ae47 	bhi.w	8005e82 <HAL_RCC_OscConfig+0x346>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80061f4:	6823      	ldr	r3, [r4, #0]
 80061f6:	019a      	lsls	r2, r3, #6
 80061f8:	d5f6      	bpl.n	80061e8 <HAL_RCC_OscConfig+0x6ac>
 80061fa:	e591      	b.n	8005d20 <HAL_RCC_OscConfig+0x1e4>
      latency = FLASH_LATENCY_3; /* 3WS */
 80061fc:	f04f 0803 	mov.w	r8, #3
 8006200:	e716      	b.n	8006030 <HAL_RCC_OscConfig+0x4f4>
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8006202:	f04f 0800 	mov.w	r8, #0
 8006206:	e693      	b.n	8005f30 <HAL_RCC_OscConfig+0x3f4>
 8006208:	f04f 0800 	mov.w	r8, #0
 800620c:	e710      	b.n	8006030 <HAL_RCC_OscConfig+0x4f4>
        latency = FLASH_LATENCY_2; /* 2WS */
 800620e:	f04f 0802 	mov.w	r8, #2
 8006212:	e68d      	b.n	8005f30 <HAL_RCC_OscConfig+0x3f4>
 8006214:	f04f 0802 	mov.w	r8, #2
 8006218:	e70a      	b.n	8006030 <HAL_RCC_OscConfig+0x4f4>
 800621a:	bf00      	nop

0800621c <HAL_RCC_ClockConfig>:
  if(RCC_ClkInitStruct == NULL)
 800621c:	b178      	cbz	r0, 800623e <HAL_RCC_ClockConfig+0x22>
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800621e:	4a46      	ldr	r2, [pc, #280]	; (8006338 <HAL_RCC_ClockConfig+0x11c>)
 8006220:	6813      	ldr	r3, [r2, #0]
 8006222:	f003 0307 	and.w	r3, r3, #7
 8006226:	428b      	cmp	r3, r1
 8006228:	d20b      	bcs.n	8006242 <HAL_RCC_ClockConfig+0x26>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800622a:	6813      	ldr	r3, [r2, #0]
 800622c:	f023 0307 	bic.w	r3, r3, #7
 8006230:	430b      	orrs	r3, r1
 8006232:	6013      	str	r3, [r2, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006234:	6813      	ldr	r3, [r2, #0]
 8006236:	f003 0307 	and.w	r3, r3, #7
 800623a:	428b      	cmp	r3, r1
 800623c:	d001      	beq.n	8006242 <HAL_RCC_ClockConfig+0x26>
    return HAL_ERROR;
 800623e:	2001      	movs	r0, #1
}
 8006240:	4770      	bx	lr
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006242:	6803      	ldr	r3, [r0, #0]
{
 8006244:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006248:	460d      	mov	r5, r1
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800624a:	07d9      	lsls	r1, r3, #31
 800624c:	4604      	mov	r4, r0
 800624e:	d524      	bpl.n	800629a <HAL_RCC_ClockConfig+0x7e>
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006250:	6843      	ldr	r3, [r0, #4]
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006252:	4a3a      	ldr	r2, [pc, #232]	; (800633c <HAL_RCC_ClockConfig+0x120>)
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006254:	2b03      	cmp	r3, #3
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006256:	6812      	ldr	r2, [r2, #0]
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8006258:	d062      	beq.n	8006320 <HAL_RCC_ClockConfig+0x104>
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800625a:	2b02      	cmp	r3, #2
 800625c:	d065      	beq.n	800632a <HAL_RCC_ClockConfig+0x10e>
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 800625e:	2b00      	cmp	r3, #0
 8006260:	d166      	bne.n	8006330 <HAL_RCC_ClockConfig+0x114>
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8006262:	0796      	lsls	r6, r2, #30
 8006264:	d532      	bpl.n	80062cc <HAL_RCC_ClockConfig+0xb0>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8006266:	4e35      	ldr	r6, [pc, #212]	; (800633c <HAL_RCC_ClockConfig+0x120>)
 8006268:	68b2      	ldr	r2, [r6, #8]
 800626a:	f022 0203 	bic.w	r2, r2, #3
 800626e:	4313      	orrs	r3, r2
 8006270:	60b3      	str	r3, [r6, #8]
    tickstart = HAL_GetTick();
 8006272:	f7ff fa5d 	bl	8005730 <HAL_GetTick>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006276:	f241 3788 	movw	r7, #5000	; 0x1388
    tickstart = HAL_GetTick();
 800627a:	4680      	mov	r8, r0
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800627c:	e005      	b.n	800628a <HAL_RCC_ClockConfig+0x6e>
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800627e:	f7ff fa57 	bl	8005730 <HAL_GetTick>
 8006282:	eba0 0008 	sub.w	r0, r0, r8
 8006286:	42b8      	cmp	r0, r7
 8006288:	d84d      	bhi.n	8006326 <HAL_RCC_ClockConfig+0x10a>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800628a:	68b3      	ldr	r3, [r6, #8]
 800628c:	6862      	ldr	r2, [r4, #4]
 800628e:	f003 030c 	and.w	r3, r3, #12
 8006292:	ebb3 0f82 	cmp.w	r3, r2, lsl #2
 8006296:	d1f2      	bne.n	800627e <HAL_RCC_ClockConfig+0x62>
 8006298:	6823      	ldr	r3, [r4, #0]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800629a:	0799      	lsls	r1, r3, #30
 800629c:	d506      	bpl.n	80062ac <HAL_RCC_ClockConfig+0x90>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800629e:	4927      	ldr	r1, [pc, #156]	; (800633c <HAL_RCC_ClockConfig+0x120>)
 80062a0:	68a0      	ldr	r0, [r4, #8]
 80062a2:	688a      	ldr	r2, [r1, #8]
 80062a4:	f022 02f0 	bic.w	r2, r2, #240	; 0xf0
 80062a8:	4302      	orrs	r2, r0
 80062aa:	608a      	str	r2, [r1, #8]
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80062ac:	4922      	ldr	r1, [pc, #136]	; (8006338 <HAL_RCC_ClockConfig+0x11c>)
 80062ae:	680a      	ldr	r2, [r1, #0]
 80062b0:	f002 0207 	and.w	r2, r2, #7
 80062b4:	42aa      	cmp	r2, r5
 80062b6:	d90c      	bls.n	80062d2 <HAL_RCC_ClockConfig+0xb6>
    __HAL_FLASH_SET_LATENCY(FLatency);
 80062b8:	680a      	ldr	r2, [r1, #0]
 80062ba:	f022 0207 	bic.w	r2, r2, #7
 80062be:	432a      	orrs	r2, r5
 80062c0:	600a      	str	r2, [r1, #0]
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80062c2:	680a      	ldr	r2, [r1, #0]
 80062c4:	f002 0207 	and.w	r2, r2, #7
 80062c8:	42aa      	cmp	r2, r5
 80062ca:	d002      	beq.n	80062d2 <HAL_RCC_ClockConfig+0xb6>
    return HAL_ERROR;
 80062cc:	2001      	movs	r0, #1
}
 80062ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80062d2:	075a      	lsls	r2, r3, #29
 80062d4:	d506      	bpl.n	80062e4 <HAL_RCC_ClockConfig+0xc8>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80062d6:	4919      	ldr	r1, [pc, #100]	; (800633c <HAL_RCC_ClockConfig+0x120>)
 80062d8:	68e0      	ldr	r0, [r4, #12]
 80062da:	688a      	ldr	r2, [r1, #8]
 80062dc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80062e0:	4302      	orrs	r2, r0
 80062e2:	608a      	str	r2, [r1, #8]
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80062e4:	071b      	lsls	r3, r3, #28
 80062e6:	d507      	bpl.n	80062f8 <HAL_RCC_ClockConfig+0xdc>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80062e8:	4a14      	ldr	r2, [pc, #80]	; (800633c <HAL_RCC_ClockConfig+0x120>)
 80062ea:	6921      	ldr	r1, [r4, #16]
 80062ec:	6893      	ldr	r3, [r2, #8]
 80062ee:	f423 5360 	bic.w	r3, r3, #14336	; 0x3800
 80062f2:	ea43 03c1 	orr.w	r3, r3, r1, lsl #3
 80062f6:	6093      	str	r3, [r2, #8]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80062f8:	f7ff fbc6 	bl	8005a88 <HAL_RCC_GetSysClockFreq>
 80062fc:	4b0f      	ldr	r3, [pc, #60]	; (800633c <HAL_RCC_ClockConfig+0x120>)
 80062fe:	4c10      	ldr	r4, [pc, #64]	; (8006340 <HAL_RCC_ClockConfig+0x124>)
 8006300:	689b      	ldr	r3, [r3, #8]
  status = HAL_InitTick(uwTickPrio);
 8006302:	4910      	ldr	r1, [pc, #64]	; (8006344 <HAL_RCC_ClockConfig+0x128>)
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8006304:	4a10      	ldr	r2, [pc, #64]	; (8006348 <HAL_RCC_ClockConfig+0x12c>)
 8006306:	f3c3 1303 	ubfx	r3, r3, #4, #4
 800630a:	5ce3      	ldrb	r3, [r4, r3]
 800630c:	f003 031f 	and.w	r3, r3, #31
 8006310:	fa20 f303 	lsr.w	r3, r0, r3
}
 8006314:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  status = HAL_InitTick(uwTickPrio);
 8006318:	6808      	ldr	r0, [r1, #0]
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800631a:	6013      	str	r3, [r2, #0]
  status = HAL_InitTick(uwTickPrio);
 800631c:	f7ff b9c2 	b.w	80056a4 <HAL_InitTick>
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8006320:	0192      	lsls	r2, r2, #6
 8006322:	d4a0      	bmi.n	8006266 <HAL_RCC_ClockConfig+0x4a>
 8006324:	e7d2      	b.n	80062cc <HAL_RCC_ClockConfig+0xb0>
        return HAL_TIMEOUT;
 8006326:	2003      	movs	r0, #3
 8006328:	e7d1      	b.n	80062ce <HAL_RCC_ClockConfig+0xb2>
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800632a:	0397      	lsls	r7, r2, #14
 800632c:	d49b      	bmi.n	8006266 <HAL_RCC_ClockConfig+0x4a>
 800632e:	e7cd      	b.n	80062cc <HAL_RCC_ClockConfig+0xb0>
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8006330:	0550      	lsls	r0, r2, #21
 8006332:	d5cb      	bpl.n	80062cc <HAL_RCC_ClockConfig+0xb0>
 8006334:	e797      	b.n	8006266 <HAL_RCC_ClockConfig+0x4a>
 8006336:	bf00      	nop
 8006338:	40022000 	.word	0x40022000
 800633c:	40021000 	.word	0x40021000
 8006340:	08022d64 	.word	0x08022d64
 8006344:	20000008 	.word	0x20000008
 8006348:	20000000 	.word	0x20000000

0800634c <HAL_RCC_GetPCLK1Freq>:
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800634c:	4b05      	ldr	r3, [pc, #20]	; (8006364 <HAL_RCC_GetPCLK1Freq+0x18>)
 800634e:	4a06      	ldr	r2, [pc, #24]	; (8006368 <HAL_RCC_GetPCLK1Freq+0x1c>)
 8006350:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 8006352:	4906      	ldr	r1, [pc, #24]	; (800636c <HAL_RCC_GetPCLK1Freq+0x20>)
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8006354:	f3c3 2302 	ubfx	r3, r3, #8, #3
 8006358:	6808      	ldr	r0, [r1, #0]
 800635a:	5cd3      	ldrb	r3, [r2, r3]
 800635c:	f003 031f 	and.w	r3, r3, #31
}
 8006360:	40d8      	lsrs	r0, r3
 8006362:	4770      	bx	lr
 8006364:	40021000 	.word	0x40021000
 8006368:	08022d74 	.word	0x08022d74
 800636c:	20000000 	.word	0x20000000

08006370 <HAL_RCC_GetPCLK2Freq>:
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006370:	4b05      	ldr	r3, [pc, #20]	; (8006388 <HAL_RCC_GetPCLK2Freq+0x18>)
 8006372:	4a06      	ldr	r2, [pc, #24]	; (800638c <HAL_RCC_GetPCLK2Freq+0x1c>)
 8006374:	689b      	ldr	r3, [r3, #8]
  return SystemCoreClock;
 8006376:	4906      	ldr	r1, [pc, #24]	; (8006390 <HAL_RCC_GetPCLK2Freq+0x20>)
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8006378:	f3c3 23c2 	ubfx	r3, r3, #11, #3
 800637c:	6808      	ldr	r0, [r1, #0]
 800637e:	5cd3      	ldrb	r3, [r2, r3]
 8006380:	f003 031f 	and.w	r3, r3, #31
}
 8006384:	40d8      	lsrs	r0, r3
 8006386:	4770      	bx	lr
 8006388:	40021000 	.word	0x40021000
 800638c:	08022d74 	.word	0x08022d74
 8006390:	20000000 	.word	0x20000000

08006394 <RCCEx_PLLSAI1_Config>:
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006394:	4a45      	ldr	r2, [pc, #276]	; (80064ac <RCCEx_PLLSAI1_Config+0x118>)
{
 8006396:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8006398:	68d4      	ldr	r4, [r2, #12]
 800639a:	6803      	ldr	r3, [r0, #0]
 800639c:	07a4      	lsls	r4, r4, #30
 800639e:	d006      	beq.n	80063ae <RCCEx_PLLSAI1_Config+0x1a>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80063a0:	68d4      	ldr	r4, [r2, #12]
 80063a2:	f004 0403 	and.w	r4, r4, #3
 80063a6:	429c      	cmp	r4, r3
 80063a8:	d00b      	beq.n	80063c2 <RCCEx_PLLSAI1_Config+0x2e>
 80063aa:	2001      	movs	r0, #1
      }
    }
  }

  return status;
}
 80063ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch(PllSai1->PLLSAI1Source)
 80063ae:	2b02      	cmp	r3, #2
 80063b0:	d011      	beq.n	80063d6 <RCCEx_PLLSAI1_Config+0x42>
 80063b2:	2b03      	cmp	r3, #3
 80063b4:	d056      	beq.n	8006464 <RCCEx_PLLSAI1_Config+0xd0>
 80063b6:	2b01      	cmp	r3, #1
 80063b8:	d1f7      	bne.n	80063aa <RCCEx_PLLSAI1_Config+0x16>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80063ba:	6812      	ldr	r2, [r2, #0]
 80063bc:	0797      	lsls	r7, r2, #30
 80063be:	d5f4      	bpl.n	80063aa <RCCEx_PLLSAI1_Config+0x16>
 80063c0:	e00c      	b.n	80063dc <RCCEx_PLLSAI1_Config+0x48>
       ||
 80063c2:	2c00      	cmp	r4, #0
 80063c4:	d0f1      	beq.n	80063aa <RCCEx_PLLSAI1_Config+0x16>
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80063c6:	68d3      	ldr	r3, [r2, #12]
       ||
 80063c8:	6842      	ldr	r2, [r0, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80063ca:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80063ce:	3301      	adds	r3, #1
       ||
 80063d0:	4293      	cmp	r3, r2
 80063d2:	d1ea      	bne.n	80063aa <RCCEx_PLLSAI1_Config+0x16>
 80063d4:	e00c      	b.n	80063f0 <RCCEx_PLLSAI1_Config+0x5c>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80063d6:	6812      	ldr	r2, [r2, #0]
 80063d8:	0556      	lsls	r6, r2, #21
 80063da:	d5e6      	bpl.n	80063aa <RCCEx_PLLSAI1_Config+0x16>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80063dc:	4d33      	ldr	r5, [pc, #204]	; (80064ac <RCCEx_PLLSAI1_Config+0x118>)
 80063de:	6844      	ldr	r4, [r0, #4]
 80063e0:	68ea      	ldr	r2, [r5, #12]
 80063e2:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 80063e6:	4313      	orrs	r3, r2
 80063e8:	3c01      	subs	r4, #1
 80063ea:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
 80063ee:	60eb      	str	r3, [r5, #12]
    __HAL_RCC_PLLSAI1_DISABLE();
 80063f0:	4c2e      	ldr	r4, [pc, #184]	; (80064ac <RCCEx_PLLSAI1_Config+0x118>)
 80063f2:	6823      	ldr	r3, [r4, #0]
 80063f4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80063f8:	6023      	str	r3, [r4, #0]
 80063fa:	460f      	mov	r7, r1
 80063fc:	4605      	mov	r5, r0
    tickstart = HAL_GetTick();
 80063fe:	f7ff f997 	bl	8005730 <HAL_GetTick>
 8006402:	4606      	mov	r6, r0
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006404:	e004      	b.n	8006410 <RCCEx_PLLSAI1_Config+0x7c>
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006406:	f7ff f993 	bl	8005730 <HAL_GetTick>
 800640a:	1b80      	subs	r0, r0, r6
 800640c:	2802      	cmp	r0, #2
 800640e:	d827      	bhi.n	8006460 <RCCEx_PLLSAI1_Config+0xcc>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8006410:	6823      	ldr	r3, [r4, #0]
 8006412:	011a      	lsls	r2, r3, #4
 8006414:	d4f7      	bmi.n	8006406 <RCCEx_PLLSAI1_Config+0x72>
 8006416:	68ab      	ldr	r3, [r5, #8]
 8006418:	0219      	lsls	r1, r3, #8
      if(Divider == DIVIDER_P_UPDATE)
 800641a:	bb57      	cbnz	r7, 8006472 <RCCEx_PLLSAI1_Config+0xde>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800641c:	6923      	ldr	r3, [r4, #16]
 800641e:	68ea      	ldr	r2, [r5, #12]
 8006420:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8006424:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006428:	430b      	orrs	r3, r1
 800642a:	0912      	lsrs	r2, r2, #4
 800642c:	ea43 4342 	orr.w	r3, r3, r2, lsl #17
 8006430:	6123      	str	r3, [r4, #16]
      __HAL_RCC_PLLSAI1_ENABLE();
 8006432:	4c1e      	ldr	r4, [pc, #120]	; (80064ac <RCCEx_PLLSAI1_Config+0x118>)
 8006434:	6823      	ldr	r3, [r4, #0]
 8006436:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800643a:	6023      	str	r3, [r4, #0]
      tickstart = HAL_GetTick();
 800643c:	f7ff f978 	bl	8005730 <HAL_GetTick>
 8006440:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8006442:	e004      	b.n	800644e <RCCEx_PLLSAI1_Config+0xba>
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8006444:	f7ff f974 	bl	8005730 <HAL_GetTick>
 8006448:	1b80      	subs	r0, r0, r6
 800644a:	2802      	cmp	r0, #2
 800644c:	d808      	bhi.n	8006460 <RCCEx_PLLSAI1_Config+0xcc>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800644e:	6823      	ldr	r3, [r4, #0]
 8006450:	011b      	lsls	r3, r3, #4
 8006452:	d5f7      	bpl.n	8006444 <RCCEx_PLLSAI1_Config+0xb0>
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8006454:	69aa      	ldr	r2, [r5, #24]
 8006456:	6923      	ldr	r3, [r4, #16]
 8006458:	4313      	orrs	r3, r2
 800645a:	6123      	str	r3, [r4, #16]
 800645c:	2000      	movs	r0, #0
}
 800645e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        status = HAL_TIMEOUT;
 8006460:	2003      	movs	r0, #3
}
 8006462:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006464:	6814      	ldr	r4, [r2, #0]
 8006466:	03a5      	lsls	r5, r4, #14
 8006468:	d4b8      	bmi.n	80063dc <RCCEx_PLLSAI1_Config+0x48>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 800646a:	6812      	ldr	r2, [r2, #0]
 800646c:	0354      	lsls	r4, r2, #13
 800646e:	d59c      	bpl.n	80063aa <RCCEx_PLLSAI1_Config+0x16>
 8006470:	e7b4      	b.n	80063dc <RCCEx_PLLSAI1_Config+0x48>
      else if(Divider == DIVIDER_Q_UPDATE)
 8006472:	2f01      	cmp	r7, #1
 8006474:	d00c      	beq.n	8006490 <RCCEx_PLLSAI1_Config+0xfc>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006476:	6922      	ldr	r2, [r4, #16]
 8006478:	696b      	ldr	r3, [r5, #20]
 800647a:	f022 62c0 	bic.w	r2, r2, #100663296	; 0x6000000
 800647e:	f422 42fe 	bic.w	r2, r2, #32512	; 0x7f00
 8006482:	085b      	lsrs	r3, r3, #1
 8006484:	430a      	orrs	r2, r1
 8006486:	3b01      	subs	r3, #1
 8006488:	ea42 6243 	orr.w	r2, r2, r3, lsl #25
 800648c:	6122      	str	r2, [r4, #16]
 800648e:	e7d0      	b.n	8006432 <RCCEx_PLLSAI1_Config+0x9e>
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8006490:	6923      	ldr	r3, [r4, #16]
 8006492:	692a      	ldr	r2, [r5, #16]
 8006494:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 8006498:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800649c:	0852      	lsrs	r2, r2, #1
 800649e:	430b      	orrs	r3, r1
 80064a0:	3a01      	subs	r2, #1
 80064a2:	ea43 5342 	orr.w	r3, r3, r2, lsl #21
 80064a6:	6123      	str	r3, [r4, #16]
 80064a8:	e7c3      	b.n	8006432 <RCCEx_PLLSAI1_Config+0x9e>
 80064aa:	bf00      	nop
 80064ac:	40021000 	.word	0x40021000

080064b0 <RCCEx_PLLSAI2_Config>:
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80064b0:	4a3d      	ldr	r2, [pc, #244]	; (80065a8 <RCCEx_PLLSAI2_Config+0xf8>)
{
 80064b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80064b4:	68d4      	ldr	r4, [r2, #12]
 80064b6:	6803      	ldr	r3, [r0, #0]
 80064b8:	07a4      	lsls	r4, r4, #30
 80064ba:	d006      	beq.n	80064ca <RCCEx_PLLSAI2_Config+0x1a>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80064bc:	68d4      	ldr	r4, [r2, #12]
 80064be:	f004 0403 	and.w	r4, r4, #3
 80064c2:	429c      	cmp	r4, r3
 80064c4:	d00b      	beq.n	80064de <RCCEx_PLLSAI2_Config+0x2e>
 80064c6:	2001      	movs	r0, #1
      }
    }
  }

  return status;
}
 80064c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    switch(PllSai2->PLLSAI2Source)
 80064ca:	2b02      	cmp	r3, #2
 80064cc:	d011      	beq.n	80064f2 <RCCEx_PLLSAI2_Config+0x42>
 80064ce:	2b03      	cmp	r3, #3
 80064d0:	d056      	beq.n	8006580 <RCCEx_PLLSAI2_Config+0xd0>
 80064d2:	2b01      	cmp	r3, #1
 80064d4:	d1f7      	bne.n	80064c6 <RCCEx_PLLSAI2_Config+0x16>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80064d6:	6812      	ldr	r2, [r2, #0]
 80064d8:	0797      	lsls	r7, r2, #30
 80064da:	d5f4      	bpl.n	80064c6 <RCCEx_PLLSAI2_Config+0x16>
 80064dc:	e00c      	b.n	80064f8 <RCCEx_PLLSAI2_Config+0x48>
       ||
 80064de:	2c00      	cmp	r4, #0
 80064e0:	d0f1      	beq.n	80064c6 <RCCEx_PLLSAI2_Config+0x16>
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80064e2:	68d3      	ldr	r3, [r2, #12]
       ||
 80064e4:	6842      	ldr	r2, [r0, #4]
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80064e6:	f3c3 1302 	ubfx	r3, r3, #4, #3
 80064ea:	3301      	adds	r3, #1
       ||
 80064ec:	4293      	cmp	r3, r2
 80064ee:	d1ea      	bne.n	80064c6 <RCCEx_PLLSAI2_Config+0x16>
 80064f0:	e00c      	b.n	800650c <RCCEx_PLLSAI2_Config+0x5c>
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80064f2:	6812      	ldr	r2, [r2, #0]
 80064f4:	0556      	lsls	r6, r2, #21
 80064f6:	d5e6      	bpl.n	80064c6 <RCCEx_PLLSAI2_Config+0x16>
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 80064f8:	4d2b      	ldr	r5, [pc, #172]	; (80065a8 <RCCEx_PLLSAI2_Config+0xf8>)
 80064fa:	6844      	ldr	r4, [r0, #4]
 80064fc:	68ea      	ldr	r2, [r5, #12]
 80064fe:	f022 0273 	bic.w	r2, r2, #115	; 0x73
 8006502:	4313      	orrs	r3, r2
 8006504:	3c01      	subs	r4, #1
 8006506:	ea43 1304 	orr.w	r3, r3, r4, lsl #4
 800650a:	60eb      	str	r3, [r5, #12]
    __HAL_RCC_PLLSAI2_DISABLE();
 800650c:	4c26      	ldr	r4, [pc, #152]	; (80065a8 <RCCEx_PLLSAI2_Config+0xf8>)
 800650e:	6823      	ldr	r3, [r4, #0]
 8006510:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006514:	6023      	str	r3, [r4, #0]
 8006516:	460f      	mov	r7, r1
 8006518:	4605      	mov	r5, r0
    tickstart = HAL_GetTick();
 800651a:	f7ff f909 	bl	8005730 <HAL_GetTick>
 800651e:	4606      	mov	r6, r0
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8006520:	e004      	b.n	800652c <RCCEx_PLLSAI2_Config+0x7c>
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006522:	f7ff f905 	bl	8005730 <HAL_GetTick>
 8006526:	1b80      	subs	r0, r0, r6
 8006528:	2802      	cmp	r0, #2
 800652a:	d827      	bhi.n	800657c <RCCEx_PLLSAI2_Config+0xcc>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800652c:	6823      	ldr	r3, [r4, #0]
 800652e:	009a      	lsls	r2, r3, #2
 8006530:	d4f7      	bmi.n	8006522 <RCCEx_PLLSAI2_Config+0x72>
 8006532:	68ab      	ldr	r3, [r5, #8]
 8006534:	0219      	lsls	r1, r3, #8
      if(Divider == DIVIDER_P_UPDATE)
 8006536:	bb57      	cbnz	r7, 800658e <RCCEx_PLLSAI2_Config+0xde>
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8006538:	6962      	ldr	r2, [r4, #20]
 800653a:	68eb      	ldr	r3, [r5, #12]
 800653c:	f422 321f 	bic.w	r2, r2, #162816	; 0x27c00
 8006540:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8006544:	430a      	orrs	r2, r1
 8006546:	091b      	lsrs	r3, r3, #4
 8006548:	ea42 4243 	orr.w	r2, r2, r3, lsl #17
 800654c:	6162      	str	r2, [r4, #20]
      __HAL_RCC_PLLSAI2_ENABLE();
 800654e:	4c16      	ldr	r4, [pc, #88]	; (80065a8 <RCCEx_PLLSAI2_Config+0xf8>)
 8006550:	6823      	ldr	r3, [r4, #0]
 8006552:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006556:	6023      	str	r3, [r4, #0]
      tickstart = HAL_GetTick();
 8006558:	f7ff f8ea 	bl	8005730 <HAL_GetTick>
 800655c:	4606      	mov	r6, r0
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800655e:	e004      	b.n	800656a <RCCEx_PLLSAI2_Config+0xba>
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8006560:	f7ff f8e6 	bl	8005730 <HAL_GetTick>
 8006564:	1b80      	subs	r0, r0, r6
 8006566:	2802      	cmp	r0, #2
 8006568:	d808      	bhi.n	800657c <RCCEx_PLLSAI2_Config+0xcc>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 800656a:	6823      	ldr	r3, [r4, #0]
 800656c:	009b      	lsls	r3, r3, #2
 800656e:	d5f7      	bpl.n	8006560 <RCCEx_PLLSAI2_Config+0xb0>
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8006570:	696a      	ldr	r2, [r5, #20]
 8006572:	6963      	ldr	r3, [r4, #20]
 8006574:	4313      	orrs	r3, r2
 8006576:	6163      	str	r3, [r4, #20]
 8006578:	2000      	movs	r0, #0
}
 800657a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        status = HAL_TIMEOUT;
 800657c:	2003      	movs	r0, #3
}
 800657e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8006580:	6814      	ldr	r4, [r2, #0]
 8006582:	03a5      	lsls	r5, r4, #14
 8006584:	d4b8      	bmi.n	80064f8 <RCCEx_PLLSAI2_Config+0x48>
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8006586:	6812      	ldr	r2, [r2, #0]
 8006588:	0354      	lsls	r4, r2, #13
 800658a:	d59c      	bpl.n	80064c6 <RCCEx_PLLSAI2_Config+0x16>
 800658c:	e7b4      	b.n	80064f8 <RCCEx_PLLSAI2_Config+0x48>
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800658e:	6963      	ldr	r3, [r4, #20]
 8006590:	692a      	ldr	r2, [r5, #16]
 8006592:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8006596:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 800659a:	0852      	lsrs	r2, r2, #1
 800659c:	430b      	orrs	r3, r1
 800659e:	3a01      	subs	r2, #1
 80065a0:	ea43 6342 	orr.w	r3, r3, r2, lsl #25
 80065a4:	6163      	str	r3, [r4, #20]
 80065a6:	e7d2      	b.n	800654e <RCCEx_PLLSAI2_Config+0x9e>
 80065a8:	40021000 	.word	0x40021000

080065ac <HAL_RCCEx_PeriphCLKConfig>:
{
 80065ac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80065b0:	6803      	ldr	r3, [r0, #0]
 80065b2:	f413 6600 	ands.w	r6, r3, #2048	; 0x800
{
 80065b6:	b083      	sub	sp, #12
 80065b8:	4604      	mov	r4, r0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80065ba:	d017      	beq.n	80065ec <HAL_RCCEx_PeriphCLKConfig+0x40>
    switch(PeriphClkInit->Sai1ClockSelection)
 80065bc:	6e41      	ldr	r1, [r0, #100]	; 0x64
 80065be:	f5b1 0f80 	cmp.w	r1, #4194304	; 0x400000
 80065c2:	f000 81bb 	beq.w	800693c <HAL_RCCEx_PeriphCLKConfig+0x390>
 80065c6:	f240 81ee 	bls.w	80069a6 <HAL_RCCEx_PeriphCLKConfig+0x3fa>
 80065ca:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80065ce:	f000 81af 	beq.w	8006930 <HAL_RCCEx_PeriphCLKConfig+0x384>
 80065d2:	f5b1 0f40 	cmp.w	r1, #12582912	; 0xc00000
 80065d6:	f040 81ec 	bne.w	80069b2 <HAL_RCCEx_PeriphCLKConfig+0x406>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80065da:	48c3      	ldr	r0, [pc, #780]	; (80068e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80065dc:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 80065e0:	f422 0240 	bic.w	r2, r2, #12582912	; 0xc00000
 80065e4:	4311      	orrs	r1, r2
 80065e6:	f8c0 1088 	str.w	r1, [r0, #136]	; 0x88
 80065ea:	2600      	movs	r6, #0
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 80065ec:	04d8      	lsls	r0, r3, #19
 80065ee:	f140 8100 	bpl.w	80067f2 <HAL_RCCEx_PeriphCLKConfig+0x246>
    switch(PeriphClkInit->Sai2ClockSelection)
 80065f2:	6ea1      	ldr	r1, [r4, #104]	; 0x68
 80065f4:	f1b1 7f80 	cmp.w	r1, #16777216	; 0x1000000
 80065f8:	f000 8187 	beq.w	800690a <HAL_RCCEx_PeriphCLKConfig+0x35e>
 80065fc:	f240 81ca 	bls.w	8006994 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
 8006600:	f1b1 7f00 	cmp.w	r1, #33554432	; 0x2000000
 8006604:	f000 818d 	beq.w	8006922 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8006608:	f1b1 7f40 	cmp.w	r1, #50331648	; 0x3000000
 800660c:	f040 80f0 	bne.w	80067f0 <HAL_RCCEx_PeriphCLKConfig+0x244>
 8006610:	4637      	mov	r7, r6
    if(ret == HAL_OK)
 8006612:	2f00      	cmp	r7, #0
 8006614:	f040 8183 	bne.w	800691e <HAL_RCCEx_PeriphCLKConfig+0x372>
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8006618:	49b3      	ldr	r1, [pc, #716]	; (80068e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800661a:	6ea0      	ldr	r0, [r4, #104]	; 0x68
 800661c:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8006620:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8006624:	4302      	orrs	r2, r0
 8006626:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800662a:	0399      	lsls	r1, r3, #14
 800662c:	f100 80e5 	bmi.w	80067fa <HAL_RCCEx_PeriphCLKConfig+0x24e>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006630:	07da      	lsls	r2, r3, #31
 8006632:	d508      	bpl.n	8006646 <HAL_RCCEx_PeriphCLKConfig+0x9a>
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8006634:	49ac      	ldr	r1, [pc, #688]	; (80068e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006636:	6ba0      	ldr	r0, [r4, #56]	; 0x38
 8006638:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800663c:	f022 0203 	bic.w	r2, r2, #3
 8006640:	4302      	orrs	r2, r0
 8006642:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8006646:	079f      	lsls	r7, r3, #30
 8006648:	d508      	bpl.n	800665c <HAL_RCCEx_PeriphCLKConfig+0xb0>
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800664a:	49a7      	ldr	r1, [pc, #668]	; (80068e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800664c:	6be0      	ldr	r0, [r4, #60]	; 0x3c
 800664e:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8006652:	f022 020c 	bic.w	r2, r2, #12
 8006656:	4302      	orrs	r2, r0
 8006658:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800665c:	075d      	lsls	r5, r3, #29
 800665e:	d508      	bpl.n	8006672 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8006660:	49a1      	ldr	r1, [pc, #644]	; (80068e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006662:	6c20      	ldr	r0, [r4, #64]	; 0x40
 8006664:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8006668:	f022 0230 	bic.w	r2, r2, #48	; 0x30
 800666c:	4302      	orrs	r2, r0
 800666e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006672:	0718      	lsls	r0, r3, #28
 8006674:	d508      	bpl.n	8006688 <HAL_RCCEx_PeriphCLKConfig+0xdc>
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006676:	499c      	ldr	r1, [pc, #624]	; (80068e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006678:	6c60      	ldr	r0, [r4, #68]	; 0x44
 800667a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800667e:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8006682:	4302      	orrs	r2, r0
 8006684:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8006688:	06d9      	lsls	r1, r3, #27
 800668a:	d508      	bpl.n	800669e <HAL_RCCEx_PeriphCLKConfig+0xf2>
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800668c:	4996      	ldr	r1, [pc, #600]	; (80068e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800668e:	6ca0      	ldr	r0, [r4, #72]	; 0x48
 8006690:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8006694:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8006698:	4302      	orrs	r2, r0
 800669a:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800669e:	069a      	lsls	r2, r3, #26
 80066a0:	d508      	bpl.n	80066b4 <HAL_RCCEx_PeriphCLKConfig+0x108>
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80066a2:	4991      	ldr	r1, [pc, #580]	; (80068e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80066a4:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 80066a6:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80066aa:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80066ae:	4302      	orrs	r2, r0
 80066b0:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80066b4:	059f      	lsls	r7, r3, #22
 80066b6:	d508      	bpl.n	80066ca <HAL_RCCEx_PeriphCLKConfig+0x11e>
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80066b8:	498b      	ldr	r1, [pc, #556]	; (80068e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80066ba:	6de0      	ldr	r0, [r4, #92]	; 0x5c
 80066bc:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80066c0:	f422 2240 	bic.w	r2, r2, #786432	; 0xc0000
 80066c4:	4302      	orrs	r2, r0
 80066c6:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80066ca:	055d      	lsls	r5, r3, #21
 80066cc:	d508      	bpl.n	80066e0 <HAL_RCCEx_PeriphCLKConfig+0x134>
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80066ce:	4986      	ldr	r1, [pc, #536]	; (80068e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80066d0:	6e20      	ldr	r0, [r4, #96]	; 0x60
 80066d2:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80066d6:	f422 1240 	bic.w	r2, r2, #3145728	; 0x300000
 80066da:	4302      	orrs	r2, r0
 80066dc:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80066e0:	0658      	lsls	r0, r3, #25
 80066e2:	d508      	bpl.n	80066f6 <HAL_RCCEx_PeriphCLKConfig+0x14a>
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80066e4:	4980      	ldr	r1, [pc, #512]	; (80068e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80066e6:	6d20      	ldr	r0, [r4, #80]	; 0x50
 80066e8:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80066ec:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 80066f0:	4302      	orrs	r2, r0
 80066f2:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80066f6:	0619      	lsls	r1, r3, #24
 80066f8:	d508      	bpl.n	800670c <HAL_RCCEx_PeriphCLKConfig+0x160>
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80066fa:	497b      	ldr	r1, [pc, #492]	; (80068e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80066fc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80066fe:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8006702:	f422 4240 	bic.w	r2, r2, #49152	; 0xc000
 8006706:	4302      	orrs	r2, r0
 8006708:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800670c:	05da      	lsls	r2, r3, #23
 800670e:	d508      	bpl.n	8006722 <HAL_RCCEx_PeriphCLKConfig+0x176>
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006710:	4975      	ldr	r1, [pc, #468]	; (80068e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006712:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006714:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8006718:	f422 3240 	bic.w	r2, r2, #196608	; 0x30000
 800671c:	4302      	orrs	r2, r0
 800671e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006722:	049f      	lsls	r7, r3, #18
 8006724:	d510      	bpl.n	8006748 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006726:	4970      	ldr	r1, [pc, #448]	; (80068e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006728:	6ee0      	ldr	r0, [r4, #108]	; 0x6c
 800672a:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800672e:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8006732:	4302      	orrs	r2, r0
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006734:	f1b0 6f00 	cmp.w	r0, #134217728	; 0x8000000
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8006738:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 800673c:	f000 80ce 	beq.w	80068dc <HAL_RCCEx_PeriphCLKConfig+0x330>
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 8006740:	f1b0 6f80 	cmp.w	r0, #67108864	; 0x4000000
 8006744:	f000 8116 	beq.w	8006974 <HAL_RCCEx_PeriphCLKConfig+0x3c8>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8006748:	031d      	lsls	r5, r3, #12
 800674a:	d510      	bpl.n	800676e <HAL_RCCEx_PeriphCLKConfig+0x1c2>
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800674c:	4966      	ldr	r1, [pc, #408]	; (80068e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800674e:	6f20      	ldr	r0, [r4, #112]	; 0x70
 8006750:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 8006754:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 8006758:	4302      	orrs	r2, r0
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 800675a:	f1b0 6f00 	cmp.w	r0, #134217728	; 0x8000000
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800675e:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8006762:	f000 80c5 	beq.w	80068f0 <HAL_RCCEx_PeriphCLKConfig+0x344>
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8006766:	f1b0 6f80 	cmp.w	r0, #67108864	; 0x4000000
 800676a:	f000 810b 	beq.w	8006984 <HAL_RCCEx_PeriphCLKConfig+0x3d8>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800676e:	0358      	lsls	r0, r3, #13
 8006770:	d510      	bpl.n	8006794 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006772:	495d      	ldr	r1, [pc, #372]	; (80068e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006774:	6f60      	ldr	r0, [r4, #116]	; 0x74
 8006776:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 800677a:	f022 6240 	bic.w	r2, r2, #201326592	; 0xc000000
 800677e:	4302      	orrs	r2, r0
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006780:	f1b0 6f00 	cmp.w	r0, #134217728	; 0x8000000
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8006784:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8006788:	f000 80a3 	beq.w	80068d2 <HAL_RCCEx_PeriphCLKConfig+0x326>
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800678c:	f1b0 6f80 	cmp.w	r0, #67108864	; 0x4000000
 8006790:	f000 80e8 	beq.w	8006964 <HAL_RCCEx_PeriphCLKConfig+0x3b8>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8006794:	0459      	lsls	r1, r3, #17
 8006796:	d510      	bpl.n	80067ba <HAL_RCCEx_PeriphCLKConfig+0x20e>
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8006798:	4853      	ldr	r0, [pc, #332]	; (80068e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 800679a:	6fa1      	ldr	r1, [r4, #120]	; 0x78
 800679c:	f8d0 2088 	ldr.w	r2, [r0, #136]	; 0x88
 80067a0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80067a4:	430a      	orrs	r2, r1
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80067a6:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80067aa:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80067ae:	f000 80a4 	beq.w	80068fa <HAL_RCCEx_PeriphCLKConfig+0x34e>
    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80067b2:	f1b1 5f00 	cmp.w	r1, #536870912	; 0x20000000
 80067b6:	f000 80cc 	beq.w	8006952 <HAL_RCCEx_PeriphCLKConfig+0x3a6>
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80067ba:	041a      	lsls	r2, r3, #16
 80067bc:	d508      	bpl.n	80067d0 <HAL_RCCEx_PeriphCLKConfig+0x224>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80067be:	494a      	ldr	r1, [pc, #296]	; (80068e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80067c0:	6fe0      	ldr	r0, [r4, #124]	; 0x7c
 80067c2:	f8d1 2088 	ldr.w	r2, [r1, #136]	; 0x88
 80067c6:	f022 4280 	bic.w	r2, r2, #1073741824	; 0x40000000
 80067ca:	4302      	orrs	r2, r0
 80067cc:	f8c1 2088 	str.w	r2, [r1, #136]	; 0x88
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 80067d0:	03db      	lsls	r3, r3, #15
 80067d2:	d509      	bpl.n	80067e8 <HAL_RCCEx_PeriphCLKConfig+0x23c>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80067d4:	4a44      	ldr	r2, [pc, #272]	; (80068e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80067d6:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
 80067da:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
 80067de:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80067e2:	430b      	orrs	r3, r1
 80067e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
}
 80067e8:	4630      	mov	r0, r6
 80067ea:	b003      	add	sp, #12
 80067ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      ret = HAL_ERROR;
 80067f0:	2601      	movs	r6, #1
 80067f2:	4637      	mov	r7, r6
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80067f4:	0399      	lsls	r1, r3, #14
 80067f6:	f57f af1b 	bpl.w	8006630 <HAL_RCCEx_PeriphCLKConfig+0x84>
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80067fa:	4b3b      	ldr	r3, [pc, #236]	; (80068e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80067fc:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80067fe:	00d2      	lsls	r2, r2, #3
 8006800:	d559      	bpl.n	80068b6 <HAL_RCCEx_PeriphCLKConfig+0x30a>
    FlagStatus       pwrclkchanged = RESET;
 8006802:	f04f 0800 	mov.w	r8, #0
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8006806:	4d39      	ldr	r5, [pc, #228]	; (80068ec <HAL_RCCEx_PeriphCLKConfig+0x340>)
 8006808:	682b      	ldr	r3, [r5, #0]
 800680a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800680e:	602b      	str	r3, [r5, #0]
    tickstart = HAL_GetTick();
 8006810:	f7fe ff8e 	bl	8005730 <HAL_GetTick>
 8006814:	4681      	mov	r9, r0
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006816:	e005      	b.n	8006824 <HAL_RCCEx_PeriphCLKConfig+0x278>
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006818:	f7fe ff8a 	bl	8005730 <HAL_GetTick>
 800681c:	eba0 0009 	sub.w	r0, r0, r9
 8006820:	2802      	cmp	r0, #2
 8006822:	d854      	bhi.n	80068ce <HAL_RCCEx_PeriphCLKConfig+0x322>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8006824:	682b      	ldr	r3, [r5, #0]
 8006826:	05db      	lsls	r3, r3, #23
 8006828:	d5f6      	bpl.n	8006818 <HAL_RCCEx_PeriphCLKConfig+0x26c>
    if(ret == HAL_OK)
 800682a:	2f00      	cmp	r7, #0
 800682c:	f040 80c9 	bne.w	80069c2 <HAL_RCCEx_PeriphCLKConfig+0x416>
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006830:	4b2d      	ldr	r3, [pc, #180]	; (80068e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006832:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
 8006836:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800683a:	f412 7240 	ands.w	r2, r2, #768	; 0x300
 800683e:	d028      	beq.n	8006892 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
 8006840:	428a      	cmp	r2, r1
 8006842:	d026      	beq.n	8006892 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006844:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_FORCE();
 8006848:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
 800684c:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8006850:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006854:	f8d3 2090 	ldr.w	r2, [r3, #144]	; 0x90
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8006858:	f420 7540 	bic.w	r5, r0, #768	; 0x300
        __HAL_RCC_BACKUPRESET_RELEASE();
 800685c:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8006860:	07c0      	lsls	r0, r0, #31
        __HAL_RCC_BACKUPRESET_RELEASE();
 8006862:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
        RCC->BDCR = tmpregister;
 8006866:	f8c3 5090 	str.w	r5, [r3, #144]	; 0x90
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800686a:	d512      	bpl.n	8006892 <HAL_RCCEx_PeriphCLKConfig+0x2e6>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800686c:	461d      	mov	r5, r3
        tickstart = HAL_GetTick();
 800686e:	f7fe ff5f 	bl	8005730 <HAL_GetTick>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006872:	f241 3788 	movw	r7, #5000	; 0x1388
        tickstart = HAL_GetTick();
 8006876:	4681      	mov	r9, r0
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006878:	e005      	b.n	8006886 <HAL_RCCEx_PeriphCLKConfig+0x2da>
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800687a:	f7fe ff59 	bl	8005730 <HAL_GetTick>
 800687e:	eba0 0009 	sub.w	r0, r0, r9
 8006882:	42b8      	cmp	r0, r7
 8006884:	d823      	bhi.n	80068ce <HAL_RCCEx_PeriphCLKConfig+0x322>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006886:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
 800688a:	0799      	lsls	r1, r3, #30
 800688c:	d5f5      	bpl.n	800687a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
 800688e:	f8d4 1084 	ldr.w	r1, [r4, #132]	; 0x84
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006892:	4a15      	ldr	r2, [pc, #84]	; (80068e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 8006894:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
 8006898:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800689c:	430b      	orrs	r3, r1
 800689e:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
    if(pwrclkchanged == SET)
 80068a2:	f1b8 0f00 	cmp.w	r8, #0
 80068a6:	d004      	beq.n	80068b2 <HAL_RCCEx_PeriphCLKConfig+0x306>
      __HAL_RCC_PWR_CLK_DISABLE();
 80068a8:	4a0f      	ldr	r2, [pc, #60]	; (80068e8 <HAL_RCCEx_PeriphCLKConfig+0x33c>)
 80068aa:	6d93      	ldr	r3, [r2, #88]	; 0x58
 80068ac:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80068b0:	6593      	str	r3, [r2, #88]	; 0x58
 80068b2:	6823      	ldr	r3, [r4, #0]
 80068b4:	e6bc      	b.n	8006630 <HAL_RCCEx_PeriphCLKConfig+0x84>
      __HAL_RCC_PWR_CLK_ENABLE();
 80068b6:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80068b8:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 80068bc:	659a      	str	r2, [r3, #88]	; 0x58
 80068be:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80068c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80068c4:	9301      	str	r3, [sp, #4]
 80068c6:	9b01      	ldr	r3, [sp, #4]
      pwrclkchanged = SET;
 80068c8:	f04f 0801 	mov.w	r8, #1
 80068cc:	e79b      	b.n	8006806 <HAL_RCCEx_PeriphCLKConfig+0x25a>
        ret = HAL_TIMEOUT;
 80068ce:	2603      	movs	r6, #3
 80068d0:	e7e7      	b.n	80068a2 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80068d2:	68ca      	ldr	r2, [r1, #12]
 80068d4:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80068d8:	60ca      	str	r2, [r1, #12]
 80068da:	e75b      	b.n	8006794 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80068dc:	68ca      	ldr	r2, [r1, #12]
 80068de:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80068e2:	60ca      	str	r2, [r1, #12]
 80068e4:	e730      	b.n	8006748 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 80068e6:	bf00      	nop
 80068e8:	40021000 	.word	0x40021000
 80068ec:	40007000 	.word	0x40007000
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80068f0:	68ca      	ldr	r2, [r1, #12]
 80068f2:	f442 1280 	orr.w	r2, r2, #1048576	; 0x100000
 80068f6:	60ca      	str	r2, [r1, #12]
 80068f8:	e739      	b.n	800676e <HAL_RCCEx_PeriphCLKConfig+0x1c2>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80068fa:	2102      	movs	r1, #2
 80068fc:	1d20      	adds	r0, r4, #4
 80068fe:	f7ff fd49 	bl	8006394 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 8006902:	b368      	cbz	r0, 8006960 <HAL_RCCEx_PeriphCLKConfig+0x3b4>
      if(ret != HAL_OK)
 8006904:	4606      	mov	r6, r0
 8006906:	6823      	ldr	r3, [r4, #0]
 8006908:	e757      	b.n	80067ba <HAL_RCCEx_PeriphCLKConfig+0x20e>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800690a:	2100      	movs	r1, #0
 800690c:	f104 0020 	add.w	r0, r4, #32
 8006910:	f7ff fdce 	bl	80064b0 <RCCEx_PLLSAI2_Config>
 8006914:	4607      	mov	r7, r0
 8006916:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8006918:	2f00      	cmp	r7, #0
 800691a:	f43f ae7d 	beq.w	8006618 <HAL_RCCEx_PeriphCLKConfig+0x6c>
 800691e:	463e      	mov	r6, r7
 8006920:	e768      	b.n	80067f4 <HAL_RCCEx_PeriphCLKConfig+0x248>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006922:	4929      	ldr	r1, [pc, #164]	; (80069c8 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8006924:	68ca      	ldr	r2, [r1, #12]
 8006926:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800692a:	60ca      	str	r2, [r1, #12]
      break;
 800692c:	4637      	mov	r7, r6
 800692e:	e670      	b.n	8006612 <HAL_RCCEx_PeriphCLKConfig+0x66>
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8006930:	4825      	ldr	r0, [pc, #148]	; (80069c8 <HAL_RCCEx_PeriphCLKConfig+0x41c>)
 8006932:	68c2      	ldr	r2, [r0, #12]
 8006934:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8006938:	60c2      	str	r2, [r0, #12]
 800693a:	e64e      	b.n	80065da <HAL_RCCEx_PeriphCLKConfig+0x2e>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 800693c:	2100      	movs	r1, #0
 800693e:	3020      	adds	r0, #32
 8006940:	f7ff fdb6 	bl	80064b0 <RCCEx_PLLSAI2_Config>
 8006944:	4606      	mov	r6, r0
 8006946:	6823      	ldr	r3, [r4, #0]
    if(ret == HAL_OK)
 8006948:	2e00      	cmp	r6, #0
 800694a:	f47f ae4f 	bne.w	80065ec <HAL_RCCEx_PeriphCLKConfig+0x40>
 800694e:	6e61      	ldr	r1, [r4, #100]	; 0x64
 8006950:	e643      	b.n	80065da <HAL_RCCEx_PeriphCLKConfig+0x2e>
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8006952:	2102      	movs	r1, #2
 8006954:	f104 0020 	add.w	r0, r4, #32
 8006958:	f7ff fdaa 	bl	80064b0 <RCCEx_PLLSAI2_Config>
      if(ret != HAL_OK)
 800695c:	2800      	cmp	r0, #0
 800695e:	d1d1      	bne.n	8006904 <HAL_RCCEx_PeriphCLKConfig+0x358>
 8006960:	6823      	ldr	r3, [r4, #0]
 8006962:	e72a      	b.n	80067ba <HAL_RCCEx_PeriphCLKConfig+0x20e>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006964:	2101      	movs	r1, #1
 8006966:	1d20      	adds	r0, r4, #4
 8006968:	f7ff fd14 	bl	8006394 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 800696c:	b338      	cbz	r0, 80069be <HAL_RCCEx_PeriphCLKConfig+0x412>
 800696e:	4606      	mov	r6, r0
 8006970:	6823      	ldr	r3, [r4, #0]
 8006972:	e70f      	b.n	8006794 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006974:	2101      	movs	r1, #1
 8006976:	1d20      	adds	r0, r4, #4
 8006978:	f7ff fd0c 	bl	8006394 <RCCEx_PLLSAI1_Config>
        if(ret != HAL_OK)
 800697c:	b1e8      	cbz	r0, 80069ba <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800697e:	4606      	mov	r6, r0
 8006980:	6823      	ldr	r3, [r4, #0]
 8006982:	e6e1      	b.n	8006748 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8006984:	2101      	movs	r1, #1
 8006986:	1d20      	adds	r0, r4, #4
 8006988:	f7ff fd04 	bl	8006394 <RCCEx_PLLSAI1_Config>
      if(ret != HAL_OK)
 800698c:	b198      	cbz	r0, 80069b6 <HAL_RCCEx_PeriphCLKConfig+0x40a>
 800698e:	4606      	mov	r6, r0
 8006990:	6823      	ldr	r3, [r4, #0]
 8006992:	e6ec      	b.n	800676e <HAL_RCCEx_PeriphCLKConfig+0x1c2>
    switch(PeriphClkInit->Sai2ClockSelection)
 8006994:	2900      	cmp	r1, #0
 8006996:	f47f af2b 	bne.w	80067f0 <HAL_RCCEx_PeriphCLKConfig+0x244>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800699a:	1d20      	adds	r0, r4, #4
 800699c:	f7ff fcfa 	bl	8006394 <RCCEx_PLLSAI1_Config>
 80069a0:	6823      	ldr	r3, [r4, #0]
 80069a2:	4607      	mov	r7, r0
      break;
 80069a4:	e635      	b.n	8006612 <HAL_RCCEx_PeriphCLKConfig+0x66>
    switch(PeriphClkInit->Sai1ClockSelection)
 80069a6:	b921      	cbnz	r1, 80069b2 <HAL_RCCEx_PeriphCLKConfig+0x406>
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80069a8:	3004      	adds	r0, #4
 80069aa:	f7ff fcf3 	bl	8006394 <RCCEx_PLLSAI1_Config>
 80069ae:	4606      	mov	r6, r0
      break;
 80069b0:	e7c9      	b.n	8006946 <HAL_RCCEx_PeriphCLKConfig+0x39a>
      ret = HAL_ERROR;
 80069b2:	2601      	movs	r6, #1
 80069b4:	e61a      	b.n	80065ec <HAL_RCCEx_PeriphCLKConfig+0x40>
 80069b6:	6823      	ldr	r3, [r4, #0]
 80069b8:	e6d9      	b.n	800676e <HAL_RCCEx_PeriphCLKConfig+0x1c2>
 80069ba:	6823      	ldr	r3, [r4, #0]
 80069bc:	e6c4      	b.n	8006748 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 80069be:	6823      	ldr	r3, [r4, #0]
 80069c0:	e6e8      	b.n	8006794 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80069c2:	463e      	mov	r6, r7
 80069c4:	e76d      	b.n	80068a2 <HAL_RCCEx_PeriphCLKConfig+0x2f6>
 80069c6:	bf00      	nop
 80069c8:	40021000 	.word	0x40021000

080069cc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80069cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80069d0:	460e      	mov	r6, r1
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80069d2:	6f41      	ldr	r1, [r0, #116]	; 0x74
 80069d4:	2920      	cmp	r1, #32
{
 80069d6:	b083      	sub	sp, #12
  if (huart->gState == HAL_UART_STATE_READY)
 80069d8:	d144      	bne.n	8006a64 <HAL_UART_Transmit+0x98>
  {
    if ((pData == NULL) || (Size == 0U))
 80069da:	2e00      	cmp	r6, #0
 80069dc:	d046      	beq.n	8006a6c <HAL_UART_Transmit+0xa0>
 80069de:	9201      	str	r2, [sp, #4]
 80069e0:	2a00      	cmp	r2, #0
 80069e2:	d043      	beq.n	8006a6c <HAL_UART_Transmit+0xa0>
 80069e4:	461d      	mov	r5, r3
    {
      return  HAL_ERROR;
    }

    __HAL_LOCK(huart);
 80069e6:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 80069ea:	2b01      	cmp	r3, #1
 80069ec:	4604      	mov	r4, r0
 80069ee:	d039      	beq.n	8006a64 <HAL_UART_Transmit+0x98>

    huart->ErrorCode = HAL_UART_ERROR_NONE;
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80069f0:	2321      	movs	r3, #33	; 0x21
    __HAL_LOCK(huart);
 80069f2:	2101      	movs	r1, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80069f4:	2700      	movs	r7, #0
 80069f6:	67c7      	str	r7, [r0, #124]	; 0x7c
    __HAL_LOCK(huart);
 80069f8:	f880 1070 	strb.w	r1, [r0, #112]	; 0x70
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80069fc:	6743      	str	r3, [r0, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 80069fe:	f7fe fe97 	bl	8005730 <HAL_GetTick>

    huart->TxXferSize  = Size;
    huart->TxXferCount = Size;

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006a02:	68a3      	ldr	r3, [r4, #8]
    huart->TxXferSize  = Size;
 8006a04:	9a01      	ldr	r2, [sp, #4]
 8006a06:	f8a4 2050 	strh.w	r2, [r4, #80]	; 0x50
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006a0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    tickstart = HAL_GetTick();
 8006a0e:	4680      	mov	r8, r0
    huart->TxXferCount = Size;
 8006a10:	f8a4 2052 	strh.w	r2, [r4, #82]	; 0x52
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006a14:	f000 808e 	beq.w	8006b34 <HAL_UART_Transmit+0x168>
      pdata16bits = NULL;
    }

    __HAL_UNLOCK(huart);

    while (huart->TxXferCount > 0U)
 8006a18:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 8006a1c:	6820      	ldr	r0, [r4, #0]
    __HAL_UNLOCK(huart);
 8006a1e:	2200      	movs	r2, #0
    while (huart->TxXferCount > 0U)
 8006a20:	b29b      	uxth	r3, r3
    __HAL_UNLOCK(huart);
 8006a22:	f884 2070 	strb.w	r2, [r4, #112]	; 0x70
    while (huart->TxXferCount > 0U)
 8006a26:	b1a3      	cbz	r3, 8006a52 <HAL_UART_Transmit+0x86>
 8006a28:	1c6a      	adds	r2, r5, #1
 8006a2a:	d123      	bne.n	8006a74 <HAL_UART_Transmit+0xa8>
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a2c:	69c2      	ldr	r2, [r0, #28]
 8006a2e:	0613      	lsls	r3, r2, #24
 8006a30:	d5fc      	bpl.n	8006a2c <HAL_UART_Transmit+0x60>
      if (pdata8bits == NULL)
 8006a32:	2e00      	cmp	r6, #0
 8006a34:	d044      	beq.n	8006ac0 <HAL_UART_Transmit+0xf4>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006a36:	f816 3b01 	ldrb.w	r3, [r6], #1
 8006a3a:	8503      	strh	r3, [r0, #40]	; 0x28
      huart->TxXferCount--;
 8006a3c:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 8006a40:	3b01      	subs	r3, #1
 8006a42:	b29b      	uxth	r3, r3
 8006a44:	f8a4 3052 	strh.w	r3, [r4, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8006a48:	f8b4 3052 	ldrh.w	r3, [r4, #82]	; 0x52
 8006a4c:	b29b      	uxth	r3, r3
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d1ea      	bne.n	8006a28 <HAL_UART_Transmit+0x5c>
 8006a52:	1c6a      	adds	r2, r5, #1
 8006a54:	d139      	bne.n	8006aca <HAL_UART_Transmit+0xfe>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a56:	69c3      	ldr	r3, [r0, #28]
 8006a58:	065b      	lsls	r3, r3, #25
 8006a5a:	d5fc      	bpl.n	8006a56 <HAL_UART_Transmit+0x8a>
    huart->gState = HAL_UART_STATE_READY;
 8006a5c:	2320      	movs	r3, #32
 8006a5e:	6763      	str	r3, [r4, #116]	; 0x74
    return HAL_OK;
 8006a60:	2000      	movs	r0, #0
 8006a62:	e000      	b.n	8006a66 <HAL_UART_Transmit+0x9a>
    return HAL_BUSY;
 8006a64:	2002      	movs	r0, #2
}
 8006a66:	b003      	add	sp, #12
 8006a68:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
      return  HAL_ERROR;
 8006a6c:	2001      	movs	r0, #1
}
 8006a6e:	b003      	add	sp, #12
 8006a70:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006a74:	69c3      	ldr	r3, [r0, #28]
 8006a76:	f013 0980 	ands.w	r9, r3, #128	; 0x80
 8006a7a:	d1da      	bne.n	8006a32 <HAL_UART_Transmit+0x66>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006a7c:	f7fe fe58 	bl	8005730 <HAL_GetTick>
 8006a80:	eba0 0008 	sub.w	r0, r0, r8
 8006a84:	4285      	cmp	r5, r0
 8006a86:	6820      	ldr	r0, [r4, #0]
 8006a88:	d344      	bcc.n	8006b14 <HAL_UART_Transmit+0x148>
 8006a8a:	2d00      	cmp	r5, #0
 8006a8c:	d042      	beq.n	8006b14 <HAL_UART_Transmit+0x148>
        __HAL_UNLOCK(huart);

        return HAL_TIMEOUT;
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006a8e:	6803      	ldr	r3, [r0, #0]
 8006a90:	075b      	lsls	r3, r3, #29
 8006a92:	d5c9      	bpl.n	8006a28 <HAL_UART_Transmit+0x5c>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006a94:	69c3      	ldr	r3, [r0, #28]
 8006a96:	0519      	lsls	r1, r3, #20
 8006a98:	d5c6      	bpl.n	8006a28 <HAL_UART_Transmit+0x5c>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006a9a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006a9e:	6203      	str	r3, [r0, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006aa0:	6803      	ldr	r3, [r0, #0]
 8006aa2:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006aa6:	6003      	str	r3, [r0, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006aa8:	6882      	ldr	r2, [r0, #8]

          huart->gState = HAL_UART_STATE_READY;
 8006aaa:	2320      	movs	r3, #32
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006aac:	f022 0201 	bic.w	r2, r2, #1
 8006ab0:	6082      	str	r2, [r0, #8]
          huart->gState = HAL_UART_STATE_READY;
 8006ab2:	6763      	str	r3, [r4, #116]	; 0x74
        return HAL_TIMEOUT;
 8006ab4:	2003      	movs	r0, #3
          huart->RxState = HAL_UART_STATE_READY;
 8006ab6:	67a3      	str	r3, [r4, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006ab8:	f884 9070 	strb.w	r9, [r4, #112]	; 0x70
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006abc:	67e3      	str	r3, [r4, #124]	; 0x7c
 8006abe:	e7d2      	b.n	8006a66 <HAL_UART_Transmit+0x9a>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006ac0:	f837 3b02 	ldrh.w	r3, [r7], #2
 8006ac4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006ac8:	e7b7      	b.n	8006a3a <HAL_UART_Transmit+0x6e>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006aca:	69c6      	ldr	r6, [r0, #28]
 8006acc:	f016 0640 	ands.w	r6, r6, #64	; 0x40
 8006ad0:	d1c4      	bne.n	8006a5c <HAL_UART_Transmit+0x90>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006ad2:	f7fe fe2d 	bl	8005730 <HAL_GetTick>
 8006ad6:	eba0 0008 	sub.w	r0, r0, r8
 8006ada:	4285      	cmp	r5, r0
 8006adc:	6820      	ldr	r0, [r4, #0]
 8006ade:	d319      	bcc.n	8006b14 <HAL_UART_Transmit+0x148>
 8006ae0:	b1c5      	cbz	r5, 8006b14 <HAL_UART_Transmit+0x148>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006ae2:	6803      	ldr	r3, [r0, #0]
 8006ae4:	075f      	lsls	r7, r3, #29
 8006ae6:	d5b4      	bpl.n	8006a52 <HAL_UART_Transmit+0x86>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006ae8:	69c3      	ldr	r3, [r0, #28]
 8006aea:	0519      	lsls	r1, r3, #20
 8006aec:	d5b1      	bpl.n	8006a52 <HAL_UART_Transmit+0x86>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006aee:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006af2:	6203      	str	r3, [r0, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006af4:	6803      	ldr	r3, [r0, #0]
 8006af6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006afa:	6003      	str	r3, [r0, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006afc:	6882      	ldr	r2, [r0, #8]
          huart->gState = HAL_UART_STATE_READY;
 8006afe:	2320      	movs	r3, #32
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b00:	f022 0201 	bic.w	r2, r2, #1
 8006b04:	6082      	str	r2, [r0, #8]
          huart->gState = HAL_UART_STATE_READY;
 8006b06:	6763      	str	r3, [r4, #116]	; 0x74
      return HAL_TIMEOUT;
 8006b08:	2003      	movs	r0, #3
          huart->RxState = HAL_UART_STATE_READY;
 8006b0a:	67a3      	str	r3, [r4, #120]	; 0x78
          __HAL_UNLOCK(huart);
 8006b0c:	f884 6070 	strb.w	r6, [r4, #112]	; 0x70
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006b10:	67e3      	str	r3, [r4, #124]	; 0x7c
 8006b12:	e7a8      	b.n	8006a66 <HAL_UART_Transmit+0x9a>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006b14:	6803      	ldr	r3, [r0, #0]
 8006b16:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006b1a:	6003      	str	r3, [r0, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b1c:	6883      	ldr	r3, [r0, #8]
        huart->gState = HAL_UART_STATE_READY;
 8006b1e:	2220      	movs	r2, #32
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b20:	f023 0301 	bic.w	r3, r3, #1
        __HAL_UNLOCK(huart);
 8006b24:	2100      	movs	r1, #0
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b26:	6083      	str	r3, [r0, #8]
        huart->gState = HAL_UART_STATE_READY;
 8006b28:	6762      	str	r2, [r4, #116]	; 0x74
      return HAL_TIMEOUT;
 8006b2a:	2003      	movs	r0, #3
        __HAL_UNLOCK(huart);
 8006b2c:	f884 1070 	strb.w	r1, [r4, #112]	; 0x70
        huart->RxState = HAL_UART_STATE_READY;
 8006b30:	67a2      	str	r2, [r4, #120]	; 0x78
 8006b32:	e798      	b.n	8006a66 <HAL_UART_Transmit+0x9a>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006b34:	6923      	ldr	r3, [r4, #16]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	f47f af6e 	bne.w	8006a18 <HAL_UART_Transmit+0x4c>
 8006b3c:	4637      	mov	r7, r6
      pdata8bits  = NULL;
 8006b3e:	461e      	mov	r6, r3
 8006b40:	e76a      	b.n	8006a18 <HAL_UART_Transmit+0x4c>
 8006b42:	bf00      	nop

08006b44 <HAL_UART_Receive>:
{
 8006b44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006b48:	460e      	mov	r6, r1
  if (huart->RxState == HAL_UART_STATE_READY)
 8006b4a:	6f81      	ldr	r1, [r0, #120]	; 0x78
 8006b4c:	2920      	cmp	r1, #32
{
 8006b4e:	b082      	sub	sp, #8
  if (huart->RxState == HAL_UART_STATE_READY)
 8006b50:	d149      	bne.n	8006be6 <HAL_UART_Receive+0xa2>
    if ((pData == NULL) || (Size == 0U))
 8006b52:	2e00      	cmp	r6, #0
 8006b54:	d04b      	beq.n	8006bee <HAL_UART_Receive+0xaa>
 8006b56:	9201      	str	r2, [sp, #4]
 8006b58:	2a00      	cmp	r2, #0
 8006b5a:	d048      	beq.n	8006bee <HAL_UART_Receive+0xaa>
 8006b5c:	461d      	mov	r5, r3
    __HAL_LOCK(huart);
 8006b5e:	f890 3070 	ldrb.w	r3, [r0, #112]	; 0x70
 8006b62:	2b01      	cmp	r3, #1
 8006b64:	4604      	mov	r4, r0
 8006b66:	d03e      	beq.n	8006be6 <HAL_UART_Receive+0xa2>
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006b68:	2322      	movs	r3, #34	; 0x22
    __HAL_LOCK(huart);
 8006b6a:	2101      	movs	r1, #1
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006b6c:	2700      	movs	r7, #0
 8006b6e:	67c7      	str	r7, [r0, #124]	; 0x7c
    __HAL_LOCK(huart);
 8006b70:	f880 1070 	strb.w	r1, [r0, #112]	; 0x70
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006b74:	6783      	str	r3, [r0, #120]	; 0x78
    tickstart = HAL_GetTick();
 8006b76:	f7fe fddb 	bl	8005730 <HAL_GetTick>
    UART_MASK_COMPUTATION(huart);
 8006b7a:	68a3      	ldr	r3, [r4, #8]
    huart->RxXferSize  = Size;
 8006b7c:	9a01      	ldr	r2, [sp, #4]
 8006b7e:	f8a4 2058 	strh.w	r2, [r4, #88]	; 0x58
    UART_MASK_COMPUTATION(huart);
 8006b82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
    tickstart = HAL_GetTick();
 8006b86:	4681      	mov	r9, r0
    huart->RxXferCount = Size;
 8006b88:	f8a4 205a 	strh.w	r2, [r4, #90]	; 0x5a
    UART_MASK_COMPUTATION(huart);
 8006b8c:	d07f      	beq.n	8006c8e <HAL_UART_Receive+0x14a>
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d031      	beq.n	8006bf6 <HAL_UART_Receive+0xb2>
 8006b92:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006b96:	f000 808d 	beq.w	8006cb4 <HAL_UART_Receive+0x170>
 8006b9a:	f8a4 705c 	strh.w	r7, [r4, #92]	; 0x5c
      pdata16bits = NULL;
 8006b9e:	f04f 0800 	mov.w	r8, #0
    while (huart->RxXferCount > 0U)
 8006ba2:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
    __HAL_UNLOCK(huart);
 8006ba6:	2200      	movs	r2, #0
    while (huart->RxXferCount > 0U)
 8006ba8:	b29b      	uxth	r3, r3
    __HAL_UNLOCK(huart);
 8006baa:	f884 2070 	strb.w	r2, [r4, #112]	; 0x70
    while (huart->RxXferCount > 0U)
 8006bae:	b1b3      	cbz	r3, 8006bde <HAL_UART_Receive+0x9a>
 8006bb0:	6820      	ldr	r0, [r4, #0]
 8006bb2:	1c6a      	adds	r2, r5, #1
 8006bb4:	d126      	bne.n	8006c04 <HAL_UART_Receive+0xc0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006bb6:	69c2      	ldr	r2, [r0, #28]
 8006bb8:	0693      	lsls	r3, r2, #26
 8006bba:	d5fc      	bpl.n	8006bb6 <HAL_UART_Receive+0x72>
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8006bbc:	8c83      	ldrh	r3, [r0, #36]	; 0x24
 8006bbe:	403b      	ands	r3, r7
      if (pdata8bits == NULL)
 8006bc0:	2e00      	cmp	r6, #0
 8006bc2:	d045      	beq.n	8006c50 <HAL_UART_Receive+0x10c>
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8006bc4:	f806 3b01 	strb.w	r3, [r6], #1
      huart->RxXferCount--;
 8006bc8:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 8006bcc:	3b01      	subs	r3, #1
 8006bce:	b29b      	uxth	r3, r3
 8006bd0:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8006bd4:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 8006bd8:	b29b      	uxth	r3, r3
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d1e8      	bne.n	8006bb0 <HAL_UART_Receive+0x6c>
    huart->RxState = HAL_UART_STATE_READY;
 8006bde:	2320      	movs	r3, #32
 8006be0:	67a3      	str	r3, [r4, #120]	; 0x78
    return HAL_OK;
 8006be2:	2000      	movs	r0, #0
 8006be4:	e000      	b.n	8006be8 <HAL_UART_Receive+0xa4>
    return HAL_BUSY;
 8006be6:	2002      	movs	r0, #2
}
 8006be8:	b002      	add	sp, #8
 8006bea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
      return  HAL_ERROR;
 8006bee:	2001      	movs	r0, #1
}
 8006bf0:	b002      	add	sp, #8
 8006bf2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    UART_MASK_COMPUTATION(huart);
 8006bf6:	6923      	ldr	r3, [r4, #16]
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d151      	bne.n	8006ca0 <HAL_UART_Receive+0x15c>
 8006bfc:	27ff      	movs	r7, #255	; 0xff
 8006bfe:	f8a4 705c 	strh.w	r7, [r4, #92]	; 0x5c
 8006c02:	e7cc      	b.n	8006b9e <HAL_UART_Receive+0x5a>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c04:	69c3      	ldr	r3, [r0, #28]
 8006c06:	f013 0a20 	ands.w	sl, r3, #32
 8006c0a:	d1d7      	bne.n	8006bbc <HAL_UART_Receive+0x78>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006c0c:	f7fe fd90 	bl	8005730 <HAL_GetTick>
 8006c10:	eba0 0009 	sub.w	r0, r0, r9
 8006c14:	4285      	cmp	r5, r0
 8006c16:	d329      	bcc.n	8006c6c <HAL_UART_Receive+0x128>
 8006c18:	6820      	ldr	r0, [r4, #0]
 8006c1a:	4603      	mov	r3, r0
 8006c1c:	b33d      	cbz	r5, 8006c6e <HAL_UART_Receive+0x12a>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006c1e:	6803      	ldr	r3, [r0, #0]
 8006c20:	075b      	lsls	r3, r3, #29
 8006c22:	d5c6      	bpl.n	8006bb2 <HAL_UART_Receive+0x6e>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006c24:	69c3      	ldr	r3, [r0, #28]
 8006c26:	0519      	lsls	r1, r3, #20
 8006c28:	d5c3      	bpl.n	8006bb2 <HAL_UART_Receive+0x6e>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006c2a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8006c2e:	6203      	str	r3, [r0, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006c30:	6803      	ldr	r3, [r0, #0]
 8006c32:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006c36:	6003      	str	r3, [r0, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c38:	6882      	ldr	r2, [r0, #8]
          huart->gState = HAL_UART_STATE_READY;
 8006c3a:	2320      	movs	r3, #32
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c3c:	f022 0201 	bic.w	r2, r2, #1
 8006c40:	6082      	str	r2, [r0, #8]
          huart->gState = HAL_UART_STATE_READY;
 8006c42:	6763      	str	r3, [r4, #116]	; 0x74
        return HAL_TIMEOUT;
 8006c44:	2003      	movs	r0, #3
          huart->RxState = HAL_UART_STATE_READY;
 8006c46:	67a3      	str	r3, [r4, #120]	; 0x78
          __HAL_UNLOCK(huart);
 8006c48:	f884 a070 	strb.w	sl, [r4, #112]	; 0x70
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006c4c:	67e3      	str	r3, [r4, #124]	; 0x7c
 8006c4e:	e7cb      	b.n	8006be8 <HAL_UART_Receive+0xa4>
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8006c50:	f828 3b02 	strh.w	r3, [r8], #2
      huart->RxXferCount--;
 8006c54:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 8006c58:	3b01      	subs	r3, #1
 8006c5a:	b29b      	uxth	r3, r3
 8006c5c:	f8a4 305a 	strh.w	r3, [r4, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8006c60:	f8b4 305a 	ldrh.w	r3, [r4, #90]	; 0x5a
 8006c64:	b29b      	uxth	r3, r3
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d1a3      	bne.n	8006bb2 <HAL_UART_Receive+0x6e>
 8006c6a:	e7b8      	b.n	8006bde <HAL_UART_Receive+0x9a>
 8006c6c:	6823      	ldr	r3, [r4, #0]
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006c6e:	681a      	ldr	r2, [r3, #0]
 8006c70:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006c74:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c76:	689a      	ldr	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 8006c78:	2120      	movs	r1, #32
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c7a:	f022 0201 	bic.w	r2, r2, #1
        __HAL_UNLOCK(huart);
 8006c7e:	2500      	movs	r5, #0
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c80:	609a      	str	r2, [r3, #8]
        return HAL_TIMEOUT;
 8006c82:	2003      	movs	r0, #3
        huart->gState = HAL_UART_STATE_READY;
 8006c84:	6761      	str	r1, [r4, #116]	; 0x74
        __HAL_UNLOCK(huart);
 8006c86:	f884 5070 	strb.w	r5, [r4, #112]	; 0x70
        huart->RxState = HAL_UART_STATE_READY;
 8006c8a:	67a1      	str	r1, [r4, #120]	; 0x78
 8006c8c:	e7ac      	b.n	8006be8 <HAL_UART_Receive+0xa4>
    UART_MASK_COMPUTATION(huart);
 8006c8e:	6923      	ldr	r3, [r4, #16]
 8006c90:	b953      	cbnz	r3, 8006ca8 <HAL_UART_Receive+0x164>
 8006c92:	f240 17ff 	movw	r7, #511	; 0x1ff
 8006c96:	46b0      	mov	r8, r6
 8006c98:	f8a4 705c 	strh.w	r7, [r4, #92]	; 0x5c
      pdata8bits  = NULL;
 8006c9c:	461e      	mov	r6, r3
 8006c9e:	e780      	b.n	8006ba2 <HAL_UART_Receive+0x5e>
    UART_MASK_COMPUTATION(huart);
 8006ca0:	277f      	movs	r7, #127	; 0x7f
 8006ca2:	f8a4 705c 	strh.w	r7, [r4, #92]	; 0x5c
 8006ca6:	e77a      	b.n	8006b9e <HAL_UART_Receive+0x5a>
 8006ca8:	23ff      	movs	r3, #255	; 0xff
      pdata16bits = NULL;
 8006caa:	46b8      	mov	r8, r7
 8006cac:	f8a4 305c 	strh.w	r3, [r4, #92]	; 0x5c
    UART_MASK_COMPUTATION(huart);
 8006cb0:	461f      	mov	r7, r3
 8006cb2:	e776      	b.n	8006ba2 <HAL_UART_Receive+0x5e>
 8006cb4:	6923      	ldr	r3, [r4, #16]
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d0f2      	beq.n	8006ca0 <HAL_UART_Receive+0x15c>
 8006cba:	273f      	movs	r7, #63	; 0x3f
 8006cbc:	f8a4 705c 	strh.w	r7, [r4, #92]	; 0x5c
 8006cc0:	e76d      	b.n	8006b9e <HAL_UART_Receive+0x5a>
 8006cc2:	bf00      	nop

08006cc4 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006cc4:	6a43      	ldr	r3, [r0, #36]	; 0x24
 8006cc6:	07da      	lsls	r2, r3, #31
{
 8006cc8:	b410      	push	{r4}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006cca:	d506      	bpl.n	8006cda <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006ccc:	6801      	ldr	r1, [r0, #0]
 8006cce:	6a84      	ldr	r4, [r0, #40]	; 0x28
 8006cd0:	684a      	ldr	r2, [r1, #4]
 8006cd2:	f422 3200 	bic.w	r2, r2, #131072	; 0x20000
 8006cd6:	4322      	orrs	r2, r4
 8006cd8:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006cda:	079c      	lsls	r4, r3, #30
 8006cdc:	d506      	bpl.n	8006cec <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006cde:	6801      	ldr	r1, [r0, #0]
 8006ce0:	6ac4      	ldr	r4, [r0, #44]	; 0x2c
 8006ce2:	684a      	ldr	r2, [r1, #4]
 8006ce4:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8006ce8:	4322      	orrs	r2, r4
 8006cea:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006cec:	0759      	lsls	r1, r3, #29
 8006cee:	d506      	bpl.n	8006cfe <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006cf0:	6801      	ldr	r1, [r0, #0]
 8006cf2:	6b04      	ldr	r4, [r0, #48]	; 0x30
 8006cf4:	684a      	ldr	r2, [r1, #4]
 8006cf6:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8006cfa:	4322      	orrs	r2, r4
 8006cfc:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006cfe:	071a      	lsls	r2, r3, #28
 8006d00:	d506      	bpl.n	8006d10 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006d02:	6801      	ldr	r1, [r0, #0]
 8006d04:	6b44      	ldr	r4, [r0, #52]	; 0x34
 8006d06:	684a      	ldr	r2, [r1, #4]
 8006d08:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006d0c:	4322      	orrs	r2, r4
 8006d0e:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006d10:	06dc      	lsls	r4, r3, #27
 8006d12:	d506      	bpl.n	8006d22 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006d14:	6801      	ldr	r1, [r0, #0]
 8006d16:	6b84      	ldr	r4, [r0, #56]	; 0x38
 8006d18:	688a      	ldr	r2, [r1, #8]
 8006d1a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8006d1e:	4322      	orrs	r2, r4
 8006d20:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006d22:	0699      	lsls	r1, r3, #26
 8006d24:	d506      	bpl.n	8006d34 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006d26:	6801      	ldr	r1, [r0, #0]
 8006d28:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
 8006d2a:	688a      	ldr	r2, [r1, #8]
 8006d2c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006d30:	4322      	orrs	r2, r4
 8006d32:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006d34:	065a      	lsls	r2, r3, #25
 8006d36:	d509      	bpl.n	8006d4c <UART_AdvFeatureConfig+0x88>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006d38:	6801      	ldr	r1, [r0, #0]
 8006d3a:	6c04      	ldr	r4, [r0, #64]	; 0x40
 8006d3c:	684a      	ldr	r2, [r1, #4]
 8006d3e:	f422 1280 	bic.w	r2, r2, #1048576	; 0x100000
 8006d42:	4322      	orrs	r2, r4
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006d44:	f5b4 1f80 	cmp.w	r4, #1048576	; 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006d48:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006d4a:	d00b      	beq.n	8006d64 <UART_AdvFeatureConfig+0xa0>
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006d4c:	061b      	lsls	r3, r3, #24
 8006d4e:	d506      	bpl.n	8006d5e <UART_AdvFeatureConfig+0x9a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006d50:	6802      	ldr	r2, [r0, #0]
 8006d52:	6c81      	ldr	r1, [r0, #72]	; 0x48
 8006d54:	6853      	ldr	r3, [r2, #4]
 8006d56:	f423 2300 	bic.w	r3, r3, #524288	; 0x80000
 8006d5a:	430b      	orrs	r3, r1
 8006d5c:	6053      	str	r3, [r2, #4]
}
 8006d5e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006d62:	4770      	bx	lr
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006d64:	684a      	ldr	r2, [r1, #4]
 8006d66:	6c44      	ldr	r4, [r0, #68]	; 0x44
 8006d68:	f422 02c0 	bic.w	r2, r2, #6291456	; 0x600000
 8006d6c:	4322      	orrs	r2, r4
 8006d6e:	604a      	str	r2, [r1, #4]
 8006d70:	e7ec      	b.n	8006d4c <UART_AdvFeatureConfig+0x88>
 8006d72:	bf00      	nop

08006d74 <HAL_UART_Init>:
  if (huart == NULL)
 8006d74:	2800      	cmp	r0, #0
 8006d76:	f000 81a7 	beq.w	80070c8 <HAL_UART_Init+0x354>
{
 8006d7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (huart->gState == HAL_UART_STATE_RESET)
 8006d7c:	6f43      	ldr	r3, [r0, #116]	; 0x74
 8006d7e:	4604      	mov	r4, r0
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d04c      	beq.n	8006e1e <HAL_UART_Init+0xaa>
  __HAL_UART_DISABLE(huart);
 8006d84:	6823      	ldr	r3, [r4, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006d86:	6926      	ldr	r6, [r4, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006d88:	49b2      	ldr	r1, [pc, #712]	; (8007054 <HAL_UART_Init+0x2e0>)
  huart->gState = HAL_UART_STATE_BUSY;
 8006d8a:	2224      	movs	r2, #36	; 0x24
 8006d8c:	6762      	str	r2, [r4, #116]	; 0x74
  __HAL_UART_DISABLE(huart);
 8006d8e:	6818      	ldr	r0, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006d90:	68a2      	ldr	r2, [r4, #8]
  __HAL_UART_DISABLE(huart);
 8006d92:	f020 0001 	bic.w	r0, r0, #1
 8006d96:	6018      	str	r0, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006d98:	6960      	ldr	r0, [r4, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006d9a:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006d9c:	4332      	orrs	r2, r6
 8006d9e:	4302      	orrs	r2, r0
 8006da0:	69e0      	ldr	r0, [r4, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006da2:	4029      	ands	r1, r5
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006da4:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006da6:	430a      	orrs	r2, r1
 8006da8:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006daa:	685a      	ldr	r2, [r3, #4]
 8006dac:	68e5      	ldr	r5, [r4, #12]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006dae:	49aa      	ldr	r1, [pc, #680]	; (8007058 <HAL_UART_Init+0x2e4>)
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006db0:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
 8006db4:	432a      	orrs	r2, r5
 8006db6:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006db8:	428b      	cmp	r3, r1
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006dba:	69a2      	ldr	r2, [r4, #24]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006dbc:	6899      	ldr	r1, [r3, #8]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006dbe:	d033      	beq.n	8006e28 <HAL_UART_Init+0xb4>
    tmpreg |= huart->Init.OneBitSampling;
 8006dc0:	6a26      	ldr	r6, [r4, #32]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006dc2:	4da6      	ldr	r5, [pc, #664]	; (800705c <HAL_UART_Init+0x2e8>)
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006dc4:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
    tmpreg |= huart->Init.OneBitSampling;
 8006dc8:	4332      	orrs	r2, r6
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006dca:	430a      	orrs	r2, r1
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006dcc:	42ab      	cmp	r3, r5
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006dce:	609a      	str	r2, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006dd0:	d044      	beq.n	8006e5c <HAL_UART_Init+0xe8>
 8006dd2:	4aa3      	ldr	r2, [pc, #652]	; (8007060 <HAL_UART_Init+0x2ec>)
 8006dd4:	4293      	cmp	r3, r2
 8006dd6:	d05a      	beq.n	8006e8e <HAL_UART_Init+0x11a>
 8006dd8:	4aa2      	ldr	r2, [pc, #648]	; (8007064 <HAL_UART_Init+0x2f0>)
 8006dda:	4293      	cmp	r3, r2
 8006ddc:	f000 812d 	beq.w	800703a <HAL_UART_Init+0x2c6>
 8006de0:	4aa1      	ldr	r2, [pc, #644]	; (8007068 <HAL_UART_Init+0x2f4>)
 8006de2:	4293      	cmp	r3, r2
 8006de4:	f000 80eb 	beq.w	8006fbe <HAL_UART_Init+0x24a>
 8006de8:	4aa0      	ldr	r2, [pc, #640]	; (800706c <HAL_UART_Init+0x2f8>)
 8006dea:	4293      	cmp	r3, r2
 8006dec:	d112      	bne.n	8006e14 <HAL_UART_Init+0xa0>
 8006dee:	4ba0      	ldr	r3, [pc, #640]	; (8007070 <HAL_UART_Init+0x2fc>)
 8006df0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006df4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006df8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006dfc:	f000 80cc 	beq.w	8006f98 <HAL_UART_Init+0x224>
 8006e00:	f240 80f6 	bls.w	8006ff0 <HAL_UART_Init+0x27c>
 8006e04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006e08:	f000 8191 	beq.w	800712e <HAL_UART_Init+0x3ba>
 8006e0c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006e10:	f000 80e3 	beq.w	8006fda <HAL_UART_Init+0x266>
  huart->RxISR = NULL;
 8006e14:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 8006e16:	e9c4 3318 	strd	r3, r3, [r4, #96]	; 0x60
    return HAL_ERROR;
 8006e1a:	2001      	movs	r0, #1
}
 8006e1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    huart->Lock = HAL_UNLOCKED;
 8006e1e:	f880 3070 	strb.w	r3, [r0, #112]	; 0x70
    HAL_UART_MspInit(huart);
 8006e22:	f7fc fed9 	bl	8003bd8 <HAL_UART_MspInit>
 8006e26:	e7ad      	b.n	8006d84 <HAL_UART_Init+0x10>
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006e28:	f421 6130 	bic.w	r1, r1, #2816	; 0xb00
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006e2c:	4890      	ldr	r0, [pc, #576]	; (8007070 <HAL_UART_Init+0x2fc>)
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006e2e:	430a      	orrs	r2, r1
 8006e30:	609a      	str	r2, [r3, #8]
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006e32:	f8d0 5088 	ldr.w	r5, [r0, #136]	; 0x88
 8006e36:	f405 6540 	and.w	r5, r5, #3072	; 0xc00
 8006e3a:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 8006e3e:	f000 816f 	beq.w	8007120 <HAL_UART_Init+0x3ac>
 8006e42:	f240 8143 	bls.w	80070cc <HAL_UART_Init+0x358>
 8006e46:	f5b5 6f00 	cmp.w	r5, #2048	; 0x800
 8006e4a:	f000 81b8 	beq.w	80071be <HAL_UART_Init+0x44a>
 8006e4e:	f5b5 6f40 	cmp.w	r5, #3072	; 0xc00
 8006e52:	d1df      	bne.n	8006e14 <HAL_UART_Init+0xa0>
 8006e54:	2508      	movs	r5, #8
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 8006e56:	f44f 4000 	mov.w	r0, #32768	; 0x8000
 8006e5a:	e13e      	b.n	80070da <HAL_UART_Init+0x366>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006e5c:	4b84      	ldr	r3, [pc, #528]	; (8007070 <HAL_UART_Init+0x2fc>)
 8006e5e:	4a85      	ldr	r2, [pc, #532]	; (8007074 <HAL_UART_Init+0x300>)
 8006e60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e64:	f003 0303 	and.w	r3, r3, #3
 8006e68:	5cd3      	ldrb	r3, [r2, r3]
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006e6a:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8006e6e:	f000 8105 	beq.w	800707c <HAL_UART_Init+0x308>
    switch (clocksource)
 8006e72:	2b08      	cmp	r3, #8
 8006e74:	f200 81a9 	bhi.w	80071ca <HAL_UART_Init+0x456>
 8006e78:	e8df f013 	tbh	[pc, r3, lsl #1]
 8006e7c:	0011009e 	.word	0x0011009e
 8006e80:	01a70083 	.word	0x01a70083
 8006e84:	01a70092 	.word	0x01a70092
 8006e88:	01a701a7 	.word	0x01a701a7
 8006e8c:	0095      	.short	0x0095
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006e8e:	4b78      	ldr	r3, [pc, #480]	; (8007070 <HAL_UART_Init+0x2fc>)
 8006e90:	4a79      	ldr	r2, [pc, #484]	; (8007078 <HAL_UART_Init+0x304>)
 8006e92:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006e96:	f003 030c 	and.w	r3, r3, #12
 8006e9a:	5cd3      	ldrb	r3, [r2, r3]
 8006e9c:	e7e5      	b.n	8006e6a <HAL_UART_Init+0xf6>
        pclk = HAL_RCC_GetPCLK2Freq();
 8006e9e:	f7ff fa67 	bl	8006370 <HAL_RCC_GetPCLK2Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006ea2:	6861      	ldr	r1, [r4, #4]
  HAL_StatusTypeDef ret               = HAL_OK;
 8006ea4:	2200      	movs	r2, #0
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8006ea6:	eb00 0351 	add.w	r3, r0, r1, lsr #1
 8006eaa:	fbb3 f3f1 	udiv	r3, r3, r1
 8006eae:	b29b      	uxth	r3, r3
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006eb0:	f1a3 0010 	sub.w	r0, r3, #16
 8006eb4:	f64f 71ef 	movw	r1, #65519	; 0xffef
 8006eb8:	4288      	cmp	r0, r1
 8006eba:	d8ab      	bhi.n	8006e14 <HAL_UART_Init+0xa0>
      huart->Instance->BRR = usartdiv;
 8006ebc:	6820      	ldr	r0, [r4, #0]
  huart->RxISR = NULL;
 8006ebe:	2100      	movs	r1, #0
      huart->Instance->BRR = usartdiv;
 8006ec0:	60c3      	str	r3, [r0, #12]
  huart->TxISR = NULL;
 8006ec2:	e9c4 1118 	strd	r1, r1, [r4, #96]	; 0x60
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006ec6:	2a00      	cmp	r2, #0
 8006ec8:	d1a7      	bne.n	8006e1a <HAL_UART_Init+0xa6>
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006eca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	f040 80b0 	bne.w	8007032 <HAL_UART_Init+0x2be>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006ed2:	6823      	ldr	r3, [r4, #0]
 8006ed4:	685a      	ldr	r2, [r3, #4]
 8006ed6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006eda:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006edc:	689a      	ldr	r2, [r3, #8]
 8006ede:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006ee2:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 8006ee4:	681a      	ldr	r2, [r3, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ee6:	2100      	movs	r1, #0
  __HAL_UART_ENABLE(huart);
 8006ee8:	f042 0201 	orr.w	r2, r2, #1
 8006eec:	601a      	str	r2, [r3, #0]
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006eee:	67e1      	str	r1, [r4, #124]	; 0x7c
  tickstart = HAL_GetTick();
 8006ef0:	f7fe fc1e 	bl	8005730 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006ef4:	6823      	ldr	r3, [r4, #0]
 8006ef6:	681a      	ldr	r2, [r3, #0]
 8006ef8:	0711      	lsls	r1, r2, #28
  tickstart = HAL_GetTick();
 8006efa:	4606      	mov	r6, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006efc:	d409      	bmi.n	8006f12 <HAL_UART_Init+0x19e>
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006efe:	681a      	ldr	r2, [r3, #0]
 8006f00:	0750      	lsls	r0, r2, #29
 8006f02:	d42b      	bmi.n	8006f5c <HAL_UART_Init+0x1e8>
  huart->gState = HAL_UART_STATE_READY;
 8006f04:	2320      	movs	r3, #32
  __HAL_UNLOCK(huart);
 8006f06:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 8006f08:	6763      	str	r3, [r4, #116]	; 0x74
  __HAL_UNLOCK(huart);
 8006f0a:	f884 0070 	strb.w	r0, [r4, #112]	; 0x70
  huart->RxState = HAL_UART_STATE_READY;
 8006f0e:	67a3      	str	r3, [r4, #120]	; 0x78
}
 8006f10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f12:	69dd      	ldr	r5, [r3, #28]
 8006f14:	f415 1500 	ands.w	r5, r5, #2097152	; 0x200000
 8006f18:	d1f1      	bne.n	8006efe <HAL_UART_Init+0x18a>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f1a:	f7fe fc09 	bl	8005730 <HAL_GetTick>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006f1e:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f20:	1b80      	subs	r0, r0, r6
 8006f22:	f1b0 7f00 	cmp.w	r0, #33554432	; 0x2000000
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006f26:	681a      	ldr	r2, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f28:	f080 80c0 	bcs.w	80070ac <HAL_UART_Init+0x338>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006f2c:	0752      	lsls	r2, r2, #29
 8006f2e:	d5f0      	bpl.n	8006f12 <HAL_UART_Init+0x19e>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006f30:	69da      	ldr	r2, [r3, #28]
 8006f32:	0517      	lsls	r7, r2, #20
 8006f34:	d5ed      	bpl.n	8006f12 <HAL_UART_Init+0x19e>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006f36:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006f3a:	621a      	str	r2, [r3, #32]
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006f3c:	681a      	ldr	r2, [r3, #0]
 8006f3e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8006f42:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f44:	6899      	ldr	r1, [r3, #8]
          huart->gState = HAL_UART_STATE_READY;
 8006f46:	2220      	movs	r2, #32
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f48:	f021 0101 	bic.w	r1, r1, #1
 8006f4c:	6099      	str	r1, [r3, #8]
      return HAL_TIMEOUT;
 8006f4e:	2003      	movs	r0, #3
          huart->gState = HAL_UART_STATE_READY;
 8006f50:	6762      	str	r2, [r4, #116]	; 0x74
          __HAL_UNLOCK(huart);
 8006f52:	f884 5070 	strb.w	r5, [r4, #112]	; 0x70
          huart->RxState = HAL_UART_STATE_READY;
 8006f56:	67a2      	str	r2, [r4, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006f58:	67e2      	str	r2, [r4, #124]	; 0x7c
}
 8006f5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f5c:	69dd      	ldr	r5, [r3, #28]
 8006f5e:	f415 0580 	ands.w	r5, r5, #4194304	; 0x400000
 8006f62:	d1cf      	bne.n	8006f04 <HAL_UART_Init+0x190>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f64:	f7fe fbe4 	bl	8005730 <HAL_GetTick>
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006f68:	6823      	ldr	r3, [r4, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f6a:	1b80      	subs	r0, r0, r6
 8006f6c:	f1b0 7f00 	cmp.w	r0, #33554432	; 0x2000000
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006f70:	681a      	ldr	r2, [r3, #0]
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f72:	f080 809b 	bcs.w	80070ac <HAL_UART_Init+0x338>
      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006f76:	0751      	lsls	r1, r2, #29
 8006f78:	d5f0      	bpl.n	8006f5c <HAL_UART_Init+0x1e8>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006f7a:	69da      	ldr	r2, [r3, #28]
 8006f7c:	0512      	lsls	r2, r2, #20
 8006f7e:	d5ed      	bpl.n	8006f5c <HAL_UART_Init+0x1e8>
 8006f80:	e7d9      	b.n	8006f36 <HAL_UART_Init+0x1c2>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8006f82:	6861      	ldr	r1, [r4, #4]
 8006f84:	084b      	lsrs	r3, r1, #1
 8006f86:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 8006f8a:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
  HAL_StatusTypeDef ret               = HAL_OK;
 8006f8e:	2200      	movs	r2, #0
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 8006f90:	fbb3 f3f1 	udiv	r3, r3, r1
 8006f94:	b29b      	uxth	r3, r3
 8006f96:	e78b      	b.n	8006eb0 <HAL_UART_Init+0x13c>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006f98:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8006f9c:	f000 80d5 	beq.w	800714a <HAL_UART_Init+0x3d6>
        pclk = HAL_RCC_GetSysClockFreq();
 8006fa0:	f7fe fd72 	bl	8005a88 <HAL_RCC_GetSysClockFreq>
 8006fa4:	e77d      	b.n	8006ea2 <HAL_UART_Init+0x12e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8006fa6:	6861      	ldr	r1, [r4, #4]
 8006fa8:	084b      	lsrs	r3, r1, #1
 8006faa:	f503 4300 	add.w	r3, r3, #32768	; 0x8000
  HAL_StatusTypeDef ret               = HAL_OK;
 8006fae:	2200      	movs	r2, #0
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 8006fb0:	fbb3 f3f1 	udiv	r3, r3, r1
 8006fb4:	b29b      	uxth	r3, r3
 8006fb6:	e77b      	b.n	8006eb0 <HAL_UART_Init+0x13c>
        pclk = HAL_RCC_GetPCLK1Freq();
 8006fb8:	f7ff f9c8 	bl	800634c <HAL_RCC_GetPCLK1Freq>
 8006fbc:	e771      	b.n	8006ea2 <HAL_UART_Init+0x12e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006fbe:	4b2c      	ldr	r3, [pc, #176]	; (8007070 <HAL_UART_Init+0x2fc>)
 8006fc0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006fc4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8006fc8:	2b40      	cmp	r3, #64	; 0x40
 8006fca:	d0e5      	beq.n	8006f98 <HAL_UART_Init+0x224>
 8006fcc:	d910      	bls.n	8006ff0 <HAL_UART_Init+0x27c>
 8006fce:	2b80      	cmp	r3, #128	; 0x80
 8006fd0:	f000 80ad 	beq.w	800712e <HAL_UART_Init+0x3ba>
 8006fd4:	2bc0      	cmp	r3, #192	; 0xc0
 8006fd6:	f47f af1d 	bne.w	8006e14 <HAL_UART_Init+0xa0>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006fda:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8006fde:	d1e2      	bne.n	8006fa6 <HAL_UART_Init+0x232>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 8006fe0:	6862      	ldr	r2, [r4, #4]
 8006fe2:	0853      	lsrs	r3, r2, #1
 8006fe4:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
 8006fe8:	fbb3 f3f2 	udiv	r3, r3, r2
 8006fec:	b29b      	uxth	r3, r3
 8006fee:	e00e      	b.n	800700e <HAL_UART_Init+0x29a>
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	f47f af0f 	bne.w	8006e14 <HAL_UART_Init+0xa0>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006ff6:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8006ffa:	d1dd      	bne.n	8006fb8 <HAL_UART_Init+0x244>
        pclk = HAL_RCC_GetPCLK1Freq();
 8006ffc:	f7ff f9a6 	bl	800634c <HAL_RCC_GetPCLK1Freq>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8007000:	6862      	ldr	r2, [r4, #4]
 8007002:	0853      	lsrs	r3, r2, #1
 8007004:	eb03 0340 	add.w	r3, r3, r0, lsl #1
 8007008:	fbb3 f3f2 	udiv	r3, r3, r2
 800700c:	b29b      	uxth	r3, r3
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800700e:	f1a3 0110 	sub.w	r1, r3, #16
 8007012:	f64f 72ef 	movw	r2, #65519	; 0xffef
 8007016:	4291      	cmp	r1, r2
 8007018:	f63f aefc 	bhi.w	8006e14 <HAL_UART_Init+0xa0>
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800701c:	f023 020f 	bic.w	r2, r3, #15
      huart->Instance->BRR = brrtemp;
 8007020:	6821      	ldr	r1, [r4, #0]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8007022:	f3c3 0342 	ubfx	r3, r3, #1, #3
      huart->Instance->BRR = brrtemp;
 8007026:	4313      	orrs	r3, r2
  huart->RxISR = NULL;
 8007028:	2200      	movs	r2, #0
      huart->Instance->BRR = brrtemp;
 800702a:	60cb      	str	r3, [r1, #12]
  huart->TxISR = NULL;
 800702c:	e9c4 2218 	strd	r2, r2, [r4, #96]	; 0x60
 8007030:	e74b      	b.n	8006eca <HAL_UART_Init+0x156>
    UART_AdvFeatureConfig(huart);
 8007032:	4620      	mov	r0, r4
 8007034:	f7ff fe46 	bl	8006cc4 <UART_AdvFeatureConfig>
 8007038:	e74b      	b.n	8006ed2 <HAL_UART_Init+0x15e>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800703a:	4b0d      	ldr	r3, [pc, #52]	; (8007070 <HAL_UART_Init+0x2fc>)
 800703c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007040:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8007044:	2b10      	cmp	r3, #16
 8007046:	d0a7      	beq.n	8006f98 <HAL_UART_Init+0x224>
 8007048:	d9d2      	bls.n	8006ff0 <HAL_UART_Init+0x27c>
 800704a:	2b20      	cmp	r3, #32
 800704c:	d06f      	beq.n	800712e <HAL_UART_Init+0x3ba>
 800704e:	2b30      	cmp	r3, #48	; 0x30
 8007050:	d0c3      	beq.n	8006fda <HAL_UART_Init+0x266>
 8007052:	e6df      	b.n	8006e14 <HAL_UART_Init+0xa0>
 8007054:	efff69f3 	.word	0xefff69f3
 8007058:	40008000 	.word	0x40008000
 800705c:	40013800 	.word	0x40013800
 8007060:	40004400 	.word	0x40004400
 8007064:	40004800 	.word	0x40004800
 8007068:	40004c00 	.word	0x40004c00
 800706c:	40005000 	.word	0x40005000
 8007070:	40021000 	.word	0x40021000
 8007074:	08023258 	.word	0x08023258
 8007078:	0802325c 	.word	0x0802325c
    switch (clocksource)
 800707c:	2b08      	cmp	r3, #8
 800707e:	f63f aec9 	bhi.w	8006e14 <HAL_UART_Init+0xa0>
 8007082:	a201      	add	r2, pc, #4	; (adr r2, 8007088 <HAL_UART_Init+0x314>)
 8007084:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007088:	08006ffd 	.word	0x08006ffd
 800708c:	08007129 	.word	0x08007129
 8007090:	08007137 	.word	0x08007137
 8007094:	08006e15 	.word	0x08006e15
 8007098:	0800714b 	.word	0x0800714b
 800709c:	08006e15 	.word	0x08006e15
 80070a0:	08006e15 	.word	0x08006e15
 80070a4:	08006e15 	.word	0x08006e15
 80070a8:	08006fe1 	.word	0x08006fe1
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80070ac:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80070b0:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070b2:	689a      	ldr	r2, [r3, #8]
        huart->gState = HAL_UART_STATE_READY;
 80070b4:	2120      	movs	r1, #32
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070b6:	f022 0201 	bic.w	r2, r2, #1
 80070ba:	609a      	str	r2, [r3, #8]
      return HAL_TIMEOUT;
 80070bc:	2003      	movs	r0, #3
        huart->gState = HAL_UART_STATE_READY;
 80070be:	6761      	str	r1, [r4, #116]	; 0x74
        __HAL_UNLOCK(huart);
 80070c0:	f884 5070 	strb.w	r5, [r4, #112]	; 0x70
        huart->RxState = HAL_UART_STATE_READY;
 80070c4:	67a1      	str	r1, [r4, #120]	; 0x78
}
 80070c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    return HAL_ERROR;
 80070c8:	2001      	movs	r0, #1
}
 80070ca:	4770      	bx	lr
  UART_GETCLOCKSOURCE(huart, clocksource);
 80070cc:	2d00      	cmp	r5, #0
 80070ce:	f47f aea1 	bne.w	8006e14 <HAL_UART_Init+0xa0>
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 80070d2:	f7ff f93b 	bl	800634c <HAL_RCC_GetPCLK1Freq>
    if (lpuart_ker_ck_pres != 0U)
 80070d6:	2800      	cmp	r0, #0
 80070d8:	d074      	beq.n	80071c4 <HAL_UART_Init+0x450>
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80070da:	6862      	ldr	r2, [r4, #4]
 80070dc:	eb02 0342 	add.w	r3, r2, r2, lsl #1
 80070e0:	4283      	cmp	r3, r0
 80070e2:	f63f ae97 	bhi.w	8006e14 <HAL_UART_Init+0xa0>
 80070e6:	ebb0 3f02 	cmp.w	r0, r2, lsl #12
 80070ea:	f63f ae93 	bhi.w	8006e14 <HAL_UART_Init+0xa0>
        switch (clocksource)
 80070ee:	2d08      	cmp	r5, #8
 80070f0:	f63f ae90 	bhi.w	8006e14 <HAL_UART_Init+0xa0>
 80070f4:	a301      	add	r3, pc, #4	; (adr r3, 80070fc <HAL_UART_Init+0x388>)
 80070f6:	f853 f025 	ldr.w	pc, [r3, r5, lsl #2]
 80070fa:	bf00      	nop
 80070fc:	080071b9 	.word	0x080071b9
 8007100:	08006e15 	.word	0x08006e15
 8007104:	0800719f 	.word	0x0800719f
 8007108:	08006e15 	.word	0x08006e15
 800710c:	0800717d 	.word	0x0800717d
 8007110:	08006e15 	.word	0x08006e15
 8007114:	08006e15 	.word	0x08006e15
 8007118:	08006e15 	.word	0x08006e15
 800711c:	08007151 	.word	0x08007151
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 8007120:	f7fe fcb2 	bl	8005a88 <HAL_RCC_GetSysClockFreq>
 8007124:	2504      	movs	r5, #4
 8007126:	e7d6      	b.n	80070d6 <HAL_UART_Init+0x362>
        pclk = HAL_RCC_GetPCLK2Freq();
 8007128:	f7ff f922 	bl	8006370 <HAL_RCC_GetPCLK2Freq>
 800712c:	e768      	b.n	8007000 <HAL_UART_Init+0x28c>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800712e:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
 8007132:	f47f af26 	bne.w	8006f82 <HAL_UART_Init+0x20e>
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 8007136:	6862      	ldr	r2, [r4, #4]
 8007138:	0853      	lsrs	r3, r2, #1
 800713a:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 800713e:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 8007142:	fbb3 f3f2 	udiv	r3, r3, r2
 8007146:	b29b      	uxth	r3, r3
 8007148:	e761      	b.n	800700e <HAL_UART_Init+0x29a>
        pclk = HAL_RCC_GetSysClockFreq();
 800714a:	f7fe fc9d 	bl	8005a88 <HAL_RCC_GetSysClockFreq>
 800714e:	e757      	b.n	8007000 <HAL_UART_Init+0x28c>
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 8007150:	0850      	lsrs	r0, r2, #1
 8007152:	f510 0000 	adds.w	r0, r0, #8388608	; 0x800000
 8007156:	f04f 0600 	mov.w	r6, #0
 800715a:	f146 0100 	adc.w	r1, r6, #0
 800715e:	2300      	movs	r3, #0
 8007160:	f7fc f98a 	bl	8003478 <__aeabi_uldivmod>
 8007164:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007168:	4b19      	ldr	r3, [pc, #100]	; (80071d0 <HAL_UART_Init+0x45c>)
 800716a:	429a      	cmp	r2, r3
 800716c:	f63f ae52 	bhi.w	8006e14 <HAL_UART_Init+0xa0>
          huart->Instance->BRR = usartdiv;
 8007170:	6822      	ldr	r2, [r4, #0]
  huart->RxISR = NULL;
 8007172:	2300      	movs	r3, #0
          huart->Instance->BRR = usartdiv;
 8007174:	60d0      	str	r0, [r2, #12]
  huart->TxISR = NULL;
 8007176:	e9c4 3318 	strd	r3, r3, [r4, #96]	; 0x60
 800717a:	e6a6      	b.n	8006eca <HAL_UART_Init+0x156>
            pclk = HAL_RCC_GetSysClockFreq();
 800717c:	f7fe fc84 	bl	8005a88 <HAL_RCC_GetSysClockFreq>
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 8007180:	6862      	ldr	r2, [r4, #4]
 8007182:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007186:	0856      	lsrs	r6, r2, #1
 8007188:	2700      	movs	r7, #0
 800718a:	fbe3 6700 	umlal	r6, r7, r3, r0
 800718e:	4630      	mov	r0, r6
 8007190:	4639      	mov	r1, r7
 8007192:	2300      	movs	r3, #0
 8007194:	f7fc f970 	bl	8003478 <__aeabi_uldivmod>
 8007198:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 800719c:	e7e4      	b.n	8007168 <HAL_UART_Init+0x3f4>
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 800719e:	4d0d      	ldr	r5, [pc, #52]	; (80071d4 <HAL_UART_Init+0x460>)
 80071a0:	0853      	lsrs	r3, r2, #1
 80071a2:	18e8      	adds	r0, r5, r3
 80071a4:	f04f 0600 	mov.w	r6, #0
 80071a8:	f146 0100 	adc.w	r1, r6, #0
 80071ac:	2300      	movs	r3, #0
 80071ae:	f7fc f963 	bl	8003478 <__aeabi_uldivmod>
 80071b2:	f5a0 7240 	sub.w	r2, r0, #768	; 0x300
 80071b6:	e7d7      	b.n	8007168 <HAL_UART_Init+0x3f4>
            pclk = HAL_RCC_GetPCLK1Freq();
 80071b8:	f7ff f8c8 	bl	800634c <HAL_RCC_GetPCLK1Freq>
 80071bc:	e7e0      	b.n	8007180 <HAL_UART_Init+0x40c>
  UART_GETCLOCKSOURCE(huart, clocksource);
 80071be:	2502      	movs	r5, #2
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 80071c0:	4805      	ldr	r0, [pc, #20]	; (80071d8 <HAL_UART_Init+0x464>)
 80071c2:	e78a      	b.n	80070da <HAL_UART_Init+0x366>
  huart->TxISR = NULL;
 80071c4:	e9c4 0018 	strd	r0, r0, [r4, #96]	; 0x60
 80071c8:	e67f      	b.n	8006eca <HAL_UART_Init+0x156>
        ret = HAL_ERROR;
 80071ca:	2201      	movs	r2, #1
  uint32_t usartdiv                   = 0x00000000U;
 80071cc:	2300      	movs	r3, #0
 80071ce:	e66f      	b.n	8006eb0 <HAL_UART_Init+0x13c>
 80071d0:	000ffcff 	.word	0x000ffcff
 80071d4:	f4240000 	.word	0xf4240000
 80071d8:	00f42400 	.word	0x00f42400

080071dc <calloc>:
 80071dc:	4b02      	ldr	r3, [pc, #8]	; (80071e8 <calloc+0xc>)
 80071de:	460a      	mov	r2, r1
 80071e0:	4601      	mov	r1, r0
 80071e2:	6818      	ldr	r0, [r3, #0]
 80071e4:	f000 b868 	b.w	80072b8 <_calloc_r>
 80071e8:	2000000c 	.word	0x2000000c

080071ec <__errno>:
 80071ec:	4b01      	ldr	r3, [pc, #4]	; (80071f4 <__errno+0x8>)
 80071ee:	6818      	ldr	r0, [r3, #0]
 80071f0:	4770      	bx	lr
 80071f2:	bf00      	nop
 80071f4:	2000000c 	.word	0x2000000c

080071f8 <__libc_init_array>:
 80071f8:	b570      	push	{r4, r5, r6, lr}
 80071fa:	4e0d      	ldr	r6, [pc, #52]	; (8007230 <__libc_init_array+0x38>)
 80071fc:	4c0d      	ldr	r4, [pc, #52]	; (8007234 <__libc_init_array+0x3c>)
 80071fe:	1ba4      	subs	r4, r4, r6
 8007200:	10a4      	asrs	r4, r4, #2
 8007202:	2500      	movs	r5, #0
 8007204:	42a5      	cmp	r5, r4
 8007206:	d109      	bne.n	800721c <__libc_init_array+0x24>
 8007208:	4e0b      	ldr	r6, [pc, #44]	; (8007238 <__libc_init_array+0x40>)
 800720a:	4c0c      	ldr	r4, [pc, #48]	; (800723c <__libc_init_array+0x44>)
 800720c:	f002 fc18 	bl	8009a40 <_init>
 8007210:	1ba4      	subs	r4, r4, r6
 8007212:	10a4      	asrs	r4, r4, #2
 8007214:	2500      	movs	r5, #0
 8007216:	42a5      	cmp	r5, r4
 8007218:	d105      	bne.n	8007226 <__libc_init_array+0x2e>
 800721a:	bd70      	pop	{r4, r5, r6, pc}
 800721c:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 8007220:	4798      	blx	r3
 8007222:	3501      	adds	r5, #1
 8007224:	e7ee      	b.n	8007204 <__libc_init_array+0xc>
 8007226:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800722a:	4798      	blx	r3
 800722c:	3501      	adds	r5, #1
 800722e:	e7f2      	b.n	8007216 <__libc_init_array+0x1e>
 8007230:	08023538 	.word	0x08023538
 8007234:	08023538 	.word	0x08023538
 8007238:	08023538 	.word	0x08023538
 800723c:	0802353c 	.word	0x0802353c

08007240 <malloc>:
 8007240:	4b02      	ldr	r3, [pc, #8]	; (800724c <malloc+0xc>)
 8007242:	4601      	mov	r1, r0
 8007244:	6818      	ldr	r0, [r3, #0]
 8007246:	f000 b893 	b.w	8007370 <_malloc_r>
 800724a:	bf00      	nop
 800724c:	2000000c 	.word	0x2000000c

08007250 <free>:
 8007250:	4b02      	ldr	r3, [pc, #8]	; (800725c <free+0xc>)
 8007252:	4601      	mov	r1, r0
 8007254:	6818      	ldr	r0, [r3, #0]
 8007256:	f000 b83d 	b.w	80072d4 <_free_r>
 800725a:	bf00      	nop
 800725c:	2000000c 	.word	0x2000000c

08007260 <memcpy>:
 8007260:	b510      	push	{r4, lr}
 8007262:	1e43      	subs	r3, r0, #1
 8007264:	440a      	add	r2, r1
 8007266:	4291      	cmp	r1, r2
 8007268:	d100      	bne.n	800726c <memcpy+0xc>
 800726a:	bd10      	pop	{r4, pc}
 800726c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007270:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007274:	e7f7      	b.n	8007266 <memcpy+0x6>

08007276 <memmove>:
 8007276:	4288      	cmp	r0, r1
 8007278:	b510      	push	{r4, lr}
 800727a:	eb01 0302 	add.w	r3, r1, r2
 800727e:	d807      	bhi.n	8007290 <memmove+0x1a>
 8007280:	1e42      	subs	r2, r0, #1
 8007282:	4299      	cmp	r1, r3
 8007284:	d00a      	beq.n	800729c <memmove+0x26>
 8007286:	f811 4b01 	ldrb.w	r4, [r1], #1
 800728a:	f802 4f01 	strb.w	r4, [r2, #1]!
 800728e:	e7f8      	b.n	8007282 <memmove+0xc>
 8007290:	4283      	cmp	r3, r0
 8007292:	d9f5      	bls.n	8007280 <memmove+0xa>
 8007294:	1881      	adds	r1, r0, r2
 8007296:	1ad2      	subs	r2, r2, r3
 8007298:	42d3      	cmn	r3, r2
 800729a:	d100      	bne.n	800729e <memmove+0x28>
 800729c:	bd10      	pop	{r4, pc}
 800729e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80072a2:	f801 4d01 	strb.w	r4, [r1, #-1]!
 80072a6:	e7f7      	b.n	8007298 <memmove+0x22>

080072a8 <memset>:
 80072a8:	4402      	add	r2, r0
 80072aa:	4603      	mov	r3, r0
 80072ac:	4293      	cmp	r3, r2
 80072ae:	d100      	bne.n	80072b2 <memset+0xa>
 80072b0:	4770      	bx	lr
 80072b2:	f803 1b01 	strb.w	r1, [r3], #1
 80072b6:	e7f9      	b.n	80072ac <memset+0x4>

080072b8 <_calloc_r>:
 80072b8:	b538      	push	{r3, r4, r5, lr}
 80072ba:	fb02 f401 	mul.w	r4, r2, r1
 80072be:	4621      	mov	r1, r4
 80072c0:	f000 f856 	bl	8007370 <_malloc_r>
 80072c4:	4605      	mov	r5, r0
 80072c6:	b118      	cbz	r0, 80072d0 <_calloc_r+0x18>
 80072c8:	4622      	mov	r2, r4
 80072ca:	2100      	movs	r1, #0
 80072cc:	f7ff ffec 	bl	80072a8 <memset>
 80072d0:	4628      	mov	r0, r5
 80072d2:	bd38      	pop	{r3, r4, r5, pc}

080072d4 <_free_r>:
 80072d4:	b538      	push	{r3, r4, r5, lr}
 80072d6:	4605      	mov	r5, r0
 80072d8:	2900      	cmp	r1, #0
 80072da:	d045      	beq.n	8007368 <_free_r+0x94>
 80072dc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80072e0:	1f0c      	subs	r4, r1, #4
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	bfb8      	it	lt
 80072e6:	18e4      	addlt	r4, r4, r3
 80072e8:	f001 fe8a 	bl	8009000 <__malloc_lock>
 80072ec:	4a1f      	ldr	r2, [pc, #124]	; (800736c <_free_r+0x98>)
 80072ee:	6813      	ldr	r3, [r2, #0]
 80072f0:	4610      	mov	r0, r2
 80072f2:	b933      	cbnz	r3, 8007302 <_free_r+0x2e>
 80072f4:	6063      	str	r3, [r4, #4]
 80072f6:	6014      	str	r4, [r2, #0]
 80072f8:	4628      	mov	r0, r5
 80072fa:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80072fe:	f001 be80 	b.w	8009002 <__malloc_unlock>
 8007302:	42a3      	cmp	r3, r4
 8007304:	d90c      	bls.n	8007320 <_free_r+0x4c>
 8007306:	6821      	ldr	r1, [r4, #0]
 8007308:	1862      	adds	r2, r4, r1
 800730a:	4293      	cmp	r3, r2
 800730c:	bf04      	itt	eq
 800730e:	681a      	ldreq	r2, [r3, #0]
 8007310:	685b      	ldreq	r3, [r3, #4]
 8007312:	6063      	str	r3, [r4, #4]
 8007314:	bf04      	itt	eq
 8007316:	1852      	addeq	r2, r2, r1
 8007318:	6022      	streq	r2, [r4, #0]
 800731a:	6004      	str	r4, [r0, #0]
 800731c:	e7ec      	b.n	80072f8 <_free_r+0x24>
 800731e:	4613      	mov	r3, r2
 8007320:	685a      	ldr	r2, [r3, #4]
 8007322:	b10a      	cbz	r2, 8007328 <_free_r+0x54>
 8007324:	42a2      	cmp	r2, r4
 8007326:	d9fa      	bls.n	800731e <_free_r+0x4a>
 8007328:	6819      	ldr	r1, [r3, #0]
 800732a:	1858      	adds	r0, r3, r1
 800732c:	42a0      	cmp	r0, r4
 800732e:	d10b      	bne.n	8007348 <_free_r+0x74>
 8007330:	6820      	ldr	r0, [r4, #0]
 8007332:	4401      	add	r1, r0
 8007334:	1858      	adds	r0, r3, r1
 8007336:	4282      	cmp	r2, r0
 8007338:	6019      	str	r1, [r3, #0]
 800733a:	d1dd      	bne.n	80072f8 <_free_r+0x24>
 800733c:	6810      	ldr	r0, [r2, #0]
 800733e:	6852      	ldr	r2, [r2, #4]
 8007340:	605a      	str	r2, [r3, #4]
 8007342:	4401      	add	r1, r0
 8007344:	6019      	str	r1, [r3, #0]
 8007346:	e7d7      	b.n	80072f8 <_free_r+0x24>
 8007348:	d902      	bls.n	8007350 <_free_r+0x7c>
 800734a:	230c      	movs	r3, #12
 800734c:	602b      	str	r3, [r5, #0]
 800734e:	e7d3      	b.n	80072f8 <_free_r+0x24>
 8007350:	6820      	ldr	r0, [r4, #0]
 8007352:	1821      	adds	r1, r4, r0
 8007354:	428a      	cmp	r2, r1
 8007356:	bf04      	itt	eq
 8007358:	6811      	ldreq	r1, [r2, #0]
 800735a:	6852      	ldreq	r2, [r2, #4]
 800735c:	6062      	str	r2, [r4, #4]
 800735e:	bf04      	itt	eq
 8007360:	1809      	addeq	r1, r1, r0
 8007362:	6021      	streq	r1, [r4, #0]
 8007364:	605c      	str	r4, [r3, #4]
 8007366:	e7c7      	b.n	80072f8 <_free_r+0x24>
 8007368:	bd38      	pop	{r3, r4, r5, pc}
 800736a:	bf00      	nop
 800736c:	200006bc 	.word	0x200006bc

08007370 <_malloc_r>:
 8007370:	b570      	push	{r4, r5, r6, lr}
 8007372:	1ccd      	adds	r5, r1, #3
 8007374:	f025 0503 	bic.w	r5, r5, #3
 8007378:	3508      	adds	r5, #8
 800737a:	2d0c      	cmp	r5, #12
 800737c:	bf38      	it	cc
 800737e:	250c      	movcc	r5, #12
 8007380:	2d00      	cmp	r5, #0
 8007382:	4606      	mov	r6, r0
 8007384:	db01      	blt.n	800738a <_malloc_r+0x1a>
 8007386:	42a9      	cmp	r1, r5
 8007388:	d903      	bls.n	8007392 <_malloc_r+0x22>
 800738a:	230c      	movs	r3, #12
 800738c:	6033      	str	r3, [r6, #0]
 800738e:	2000      	movs	r0, #0
 8007390:	bd70      	pop	{r4, r5, r6, pc}
 8007392:	f001 fe35 	bl	8009000 <__malloc_lock>
 8007396:	4a21      	ldr	r2, [pc, #132]	; (800741c <_malloc_r+0xac>)
 8007398:	6814      	ldr	r4, [r2, #0]
 800739a:	4621      	mov	r1, r4
 800739c:	b991      	cbnz	r1, 80073c4 <_malloc_r+0x54>
 800739e:	4c20      	ldr	r4, [pc, #128]	; (8007420 <_malloc_r+0xb0>)
 80073a0:	6823      	ldr	r3, [r4, #0]
 80073a2:	b91b      	cbnz	r3, 80073ac <_malloc_r+0x3c>
 80073a4:	4630      	mov	r0, r6
 80073a6:	f000 fd29 	bl	8007dfc <_sbrk_r>
 80073aa:	6020      	str	r0, [r4, #0]
 80073ac:	4629      	mov	r1, r5
 80073ae:	4630      	mov	r0, r6
 80073b0:	f000 fd24 	bl	8007dfc <_sbrk_r>
 80073b4:	1c43      	adds	r3, r0, #1
 80073b6:	d124      	bne.n	8007402 <_malloc_r+0x92>
 80073b8:	230c      	movs	r3, #12
 80073ba:	6033      	str	r3, [r6, #0]
 80073bc:	4630      	mov	r0, r6
 80073be:	f001 fe20 	bl	8009002 <__malloc_unlock>
 80073c2:	e7e4      	b.n	800738e <_malloc_r+0x1e>
 80073c4:	680b      	ldr	r3, [r1, #0]
 80073c6:	1b5b      	subs	r3, r3, r5
 80073c8:	d418      	bmi.n	80073fc <_malloc_r+0x8c>
 80073ca:	2b0b      	cmp	r3, #11
 80073cc:	d90f      	bls.n	80073ee <_malloc_r+0x7e>
 80073ce:	600b      	str	r3, [r1, #0]
 80073d0:	50cd      	str	r5, [r1, r3]
 80073d2:	18cc      	adds	r4, r1, r3
 80073d4:	4630      	mov	r0, r6
 80073d6:	f001 fe14 	bl	8009002 <__malloc_unlock>
 80073da:	f104 000b 	add.w	r0, r4, #11
 80073de:	1d23      	adds	r3, r4, #4
 80073e0:	f020 0007 	bic.w	r0, r0, #7
 80073e4:	1ac3      	subs	r3, r0, r3
 80073e6:	d0d3      	beq.n	8007390 <_malloc_r+0x20>
 80073e8:	425a      	negs	r2, r3
 80073ea:	50e2      	str	r2, [r4, r3]
 80073ec:	e7d0      	b.n	8007390 <_malloc_r+0x20>
 80073ee:	428c      	cmp	r4, r1
 80073f0:	684b      	ldr	r3, [r1, #4]
 80073f2:	bf16      	itet	ne
 80073f4:	6063      	strne	r3, [r4, #4]
 80073f6:	6013      	streq	r3, [r2, #0]
 80073f8:	460c      	movne	r4, r1
 80073fa:	e7eb      	b.n	80073d4 <_malloc_r+0x64>
 80073fc:	460c      	mov	r4, r1
 80073fe:	6849      	ldr	r1, [r1, #4]
 8007400:	e7cc      	b.n	800739c <_malloc_r+0x2c>
 8007402:	1cc4      	adds	r4, r0, #3
 8007404:	f024 0403 	bic.w	r4, r4, #3
 8007408:	42a0      	cmp	r0, r4
 800740a:	d005      	beq.n	8007418 <_malloc_r+0xa8>
 800740c:	1a21      	subs	r1, r4, r0
 800740e:	4630      	mov	r0, r6
 8007410:	f000 fcf4 	bl	8007dfc <_sbrk_r>
 8007414:	3001      	adds	r0, #1
 8007416:	d0cf      	beq.n	80073b8 <_malloc_r+0x48>
 8007418:	6025      	str	r5, [r4, #0]
 800741a:	e7db      	b.n	80073d4 <_malloc_r+0x64>
 800741c:	200006bc 	.word	0x200006bc
 8007420:	200006c0 	.word	0x200006c0

08007424 <__cvt>:
 8007424:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007428:	ec55 4b10 	vmov	r4, r5, d0
 800742c:	9f0d      	ldr	r7, [sp, #52]	; 0x34
 800742e:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007432:	2d00      	cmp	r5, #0
 8007434:	460e      	mov	r6, r1
 8007436:	4691      	mov	r9, r2
 8007438:	4619      	mov	r1, r3
 800743a:	bfb8      	it	lt
 800743c:	4622      	movlt	r2, r4
 800743e:	462b      	mov	r3, r5
 8007440:	f027 0720 	bic.w	r7, r7, #32
 8007444:	bfbb      	ittet	lt
 8007446:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800744a:	461d      	movlt	r5, r3
 800744c:	2300      	movge	r3, #0
 800744e:	232d      	movlt	r3, #45	; 0x2d
 8007450:	bfb8      	it	lt
 8007452:	4614      	movlt	r4, r2
 8007454:	2f46      	cmp	r7, #70	; 0x46
 8007456:	700b      	strb	r3, [r1, #0]
 8007458:	d004      	beq.n	8007464 <__cvt+0x40>
 800745a:	2f45      	cmp	r7, #69	; 0x45
 800745c:	d100      	bne.n	8007460 <__cvt+0x3c>
 800745e:	3601      	adds	r6, #1
 8007460:	2102      	movs	r1, #2
 8007462:	e000      	b.n	8007466 <__cvt+0x42>
 8007464:	2103      	movs	r1, #3
 8007466:	ab03      	add	r3, sp, #12
 8007468:	9301      	str	r3, [sp, #4]
 800746a:	ab02      	add	r3, sp, #8
 800746c:	9300      	str	r3, [sp, #0]
 800746e:	4632      	mov	r2, r6
 8007470:	4653      	mov	r3, sl
 8007472:	ec45 4b10 	vmov	d0, r4, r5
 8007476:	f000 fe1f 	bl	80080b8 <_dtoa_r>
 800747a:	2f47      	cmp	r7, #71	; 0x47
 800747c:	4680      	mov	r8, r0
 800747e:	d102      	bne.n	8007486 <__cvt+0x62>
 8007480:	f019 0f01 	tst.w	r9, #1
 8007484:	d026      	beq.n	80074d4 <__cvt+0xb0>
 8007486:	2f46      	cmp	r7, #70	; 0x46
 8007488:	eb08 0906 	add.w	r9, r8, r6
 800748c:	d111      	bne.n	80074b2 <__cvt+0x8e>
 800748e:	f898 3000 	ldrb.w	r3, [r8]
 8007492:	2b30      	cmp	r3, #48	; 0x30
 8007494:	d10a      	bne.n	80074ac <__cvt+0x88>
 8007496:	2200      	movs	r2, #0
 8007498:	2300      	movs	r3, #0
 800749a:	4620      	mov	r0, r4
 800749c:	4629      	mov	r1, r5
 800749e:	f7fb ff7b 	bl	8003398 <__aeabi_dcmpeq>
 80074a2:	b918      	cbnz	r0, 80074ac <__cvt+0x88>
 80074a4:	f1c6 0601 	rsb	r6, r6, #1
 80074a8:	f8ca 6000 	str.w	r6, [sl]
 80074ac:	f8da 3000 	ldr.w	r3, [sl]
 80074b0:	4499      	add	r9, r3
 80074b2:	2200      	movs	r2, #0
 80074b4:	2300      	movs	r3, #0
 80074b6:	4620      	mov	r0, r4
 80074b8:	4629      	mov	r1, r5
 80074ba:	f7fb ff6d 	bl	8003398 <__aeabi_dcmpeq>
 80074be:	b938      	cbnz	r0, 80074d0 <__cvt+0xac>
 80074c0:	2230      	movs	r2, #48	; 0x30
 80074c2:	9b03      	ldr	r3, [sp, #12]
 80074c4:	454b      	cmp	r3, r9
 80074c6:	d205      	bcs.n	80074d4 <__cvt+0xb0>
 80074c8:	1c59      	adds	r1, r3, #1
 80074ca:	9103      	str	r1, [sp, #12]
 80074cc:	701a      	strb	r2, [r3, #0]
 80074ce:	e7f8      	b.n	80074c2 <__cvt+0x9e>
 80074d0:	f8cd 900c 	str.w	r9, [sp, #12]
 80074d4:	9b03      	ldr	r3, [sp, #12]
 80074d6:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80074d8:	eba3 0308 	sub.w	r3, r3, r8
 80074dc:	4640      	mov	r0, r8
 80074de:	6013      	str	r3, [r2, #0]
 80074e0:	b004      	add	sp, #16
 80074e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080074e6 <__exponent>:
 80074e6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80074e8:	2900      	cmp	r1, #0
 80074ea:	4604      	mov	r4, r0
 80074ec:	bfba      	itte	lt
 80074ee:	4249      	neglt	r1, r1
 80074f0:	232d      	movlt	r3, #45	; 0x2d
 80074f2:	232b      	movge	r3, #43	; 0x2b
 80074f4:	2909      	cmp	r1, #9
 80074f6:	f804 2b02 	strb.w	r2, [r4], #2
 80074fa:	7043      	strb	r3, [r0, #1]
 80074fc:	dd20      	ble.n	8007540 <__exponent+0x5a>
 80074fe:	f10d 0307 	add.w	r3, sp, #7
 8007502:	461f      	mov	r7, r3
 8007504:	260a      	movs	r6, #10
 8007506:	fb91 f5f6 	sdiv	r5, r1, r6
 800750a:	fb06 1115 	mls	r1, r6, r5, r1
 800750e:	3130      	adds	r1, #48	; 0x30
 8007510:	2d09      	cmp	r5, #9
 8007512:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007516:	f103 32ff 	add.w	r2, r3, #4294967295
 800751a:	4629      	mov	r1, r5
 800751c:	dc09      	bgt.n	8007532 <__exponent+0x4c>
 800751e:	3130      	adds	r1, #48	; 0x30
 8007520:	3b02      	subs	r3, #2
 8007522:	f802 1c01 	strb.w	r1, [r2, #-1]
 8007526:	42bb      	cmp	r3, r7
 8007528:	4622      	mov	r2, r4
 800752a:	d304      	bcc.n	8007536 <__exponent+0x50>
 800752c:	1a10      	subs	r0, r2, r0
 800752e:	b003      	add	sp, #12
 8007530:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007532:	4613      	mov	r3, r2
 8007534:	e7e7      	b.n	8007506 <__exponent+0x20>
 8007536:	f813 2b01 	ldrb.w	r2, [r3], #1
 800753a:	f804 2b01 	strb.w	r2, [r4], #1
 800753e:	e7f2      	b.n	8007526 <__exponent+0x40>
 8007540:	2330      	movs	r3, #48	; 0x30
 8007542:	4419      	add	r1, r3
 8007544:	7083      	strb	r3, [r0, #2]
 8007546:	1d02      	adds	r2, r0, #4
 8007548:	70c1      	strb	r1, [r0, #3]
 800754a:	e7ef      	b.n	800752c <__exponent+0x46>

0800754c <_printf_float>:
 800754c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007550:	b08d      	sub	sp, #52	; 0x34
 8007552:	460c      	mov	r4, r1
 8007554:	f8dd 8058 	ldr.w	r8, [sp, #88]	; 0x58
 8007558:	4616      	mov	r6, r2
 800755a:	461f      	mov	r7, r3
 800755c:	4605      	mov	r5, r0
 800755e:	f001 fcdd 	bl	8008f1c <_localeconv_r>
 8007562:	6803      	ldr	r3, [r0, #0]
 8007564:	9304      	str	r3, [sp, #16]
 8007566:	4618      	mov	r0, r3
 8007568:	f7fb fa98 	bl	8002a9c <strlen>
 800756c:	2300      	movs	r3, #0
 800756e:	930a      	str	r3, [sp, #40]	; 0x28
 8007570:	f8d8 3000 	ldr.w	r3, [r8]
 8007574:	9005      	str	r0, [sp, #20]
 8007576:	3307      	adds	r3, #7
 8007578:	f023 0307 	bic.w	r3, r3, #7
 800757c:	f103 0208 	add.w	r2, r3, #8
 8007580:	f894 a018 	ldrb.w	sl, [r4, #24]
 8007584:	f8d4 b000 	ldr.w	fp, [r4]
 8007588:	f8c8 2000 	str.w	r2, [r8]
 800758c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007590:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007594:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007598:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800759c:	9307      	str	r3, [sp, #28]
 800759e:	f8cd 8018 	str.w	r8, [sp, #24]
 80075a2:	f04f 32ff 	mov.w	r2, #4294967295
 80075a6:	4ba7      	ldr	r3, [pc, #668]	; (8007844 <_printf_float+0x2f8>)
 80075a8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80075ac:	f7fb ff26 	bl	80033fc <__aeabi_dcmpun>
 80075b0:	bb70      	cbnz	r0, 8007610 <_printf_float+0xc4>
 80075b2:	f04f 32ff 	mov.w	r2, #4294967295
 80075b6:	4ba3      	ldr	r3, [pc, #652]	; (8007844 <_printf_float+0x2f8>)
 80075b8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80075bc:	f7fb ff00 	bl	80033c0 <__aeabi_dcmple>
 80075c0:	bb30      	cbnz	r0, 8007610 <_printf_float+0xc4>
 80075c2:	2200      	movs	r2, #0
 80075c4:	2300      	movs	r3, #0
 80075c6:	4640      	mov	r0, r8
 80075c8:	4649      	mov	r1, r9
 80075ca:	f7fb feef 	bl	80033ac <__aeabi_dcmplt>
 80075ce:	b110      	cbz	r0, 80075d6 <_printf_float+0x8a>
 80075d0:	232d      	movs	r3, #45	; 0x2d
 80075d2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80075d6:	4a9c      	ldr	r2, [pc, #624]	; (8007848 <_printf_float+0x2fc>)
 80075d8:	4b9c      	ldr	r3, [pc, #624]	; (800784c <_printf_float+0x300>)
 80075da:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80075de:	bf8c      	ite	hi
 80075e0:	4690      	movhi	r8, r2
 80075e2:	4698      	movls	r8, r3
 80075e4:	2303      	movs	r3, #3
 80075e6:	f02b 0204 	bic.w	r2, fp, #4
 80075ea:	6123      	str	r3, [r4, #16]
 80075ec:	6022      	str	r2, [r4, #0]
 80075ee:	f04f 0900 	mov.w	r9, #0
 80075f2:	9700      	str	r7, [sp, #0]
 80075f4:	4633      	mov	r3, r6
 80075f6:	aa0b      	add	r2, sp, #44	; 0x2c
 80075f8:	4621      	mov	r1, r4
 80075fa:	4628      	mov	r0, r5
 80075fc:	f000 f9e6 	bl	80079cc <_printf_common>
 8007600:	3001      	adds	r0, #1
 8007602:	f040 808d 	bne.w	8007720 <_printf_float+0x1d4>
 8007606:	f04f 30ff 	mov.w	r0, #4294967295
 800760a:	b00d      	add	sp, #52	; 0x34
 800760c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007610:	4642      	mov	r2, r8
 8007612:	464b      	mov	r3, r9
 8007614:	4640      	mov	r0, r8
 8007616:	4649      	mov	r1, r9
 8007618:	f7fb fef0 	bl	80033fc <__aeabi_dcmpun>
 800761c:	b110      	cbz	r0, 8007624 <_printf_float+0xd8>
 800761e:	4a8c      	ldr	r2, [pc, #560]	; (8007850 <_printf_float+0x304>)
 8007620:	4b8c      	ldr	r3, [pc, #560]	; (8007854 <_printf_float+0x308>)
 8007622:	e7da      	b.n	80075da <_printf_float+0x8e>
 8007624:	6861      	ldr	r1, [r4, #4]
 8007626:	1c4b      	adds	r3, r1, #1
 8007628:	f44b 6280 	orr.w	r2, fp, #1024	; 0x400
 800762c:	a80a      	add	r0, sp, #40	; 0x28
 800762e:	d13e      	bne.n	80076ae <_printf_float+0x162>
 8007630:	2306      	movs	r3, #6
 8007632:	6063      	str	r3, [r4, #4]
 8007634:	2300      	movs	r3, #0
 8007636:	e9cd 0302 	strd	r0, r3, [sp, #8]
 800763a:	ab09      	add	r3, sp, #36	; 0x24
 800763c:	9300      	str	r3, [sp, #0]
 800763e:	ec49 8b10 	vmov	d0, r8, r9
 8007642:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007646:	6022      	str	r2, [r4, #0]
 8007648:	f8cd a004 	str.w	sl, [sp, #4]
 800764c:	6861      	ldr	r1, [r4, #4]
 800764e:	4628      	mov	r0, r5
 8007650:	f7ff fee8 	bl	8007424 <__cvt>
 8007654:	f00a 03df 	and.w	r3, sl, #223	; 0xdf
 8007658:	2b47      	cmp	r3, #71	; 0x47
 800765a:	4680      	mov	r8, r0
 800765c:	d109      	bne.n	8007672 <_printf_float+0x126>
 800765e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007660:	1cd8      	adds	r0, r3, #3
 8007662:	db02      	blt.n	800766a <_printf_float+0x11e>
 8007664:	6862      	ldr	r2, [r4, #4]
 8007666:	4293      	cmp	r3, r2
 8007668:	dd47      	ble.n	80076fa <_printf_float+0x1ae>
 800766a:	f1aa 0a02 	sub.w	sl, sl, #2
 800766e:	fa5f fa8a 	uxtb.w	sl, sl
 8007672:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 8007676:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007678:	d824      	bhi.n	80076c4 <_printf_float+0x178>
 800767a:	3901      	subs	r1, #1
 800767c:	4652      	mov	r2, sl
 800767e:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007682:	9109      	str	r1, [sp, #36]	; 0x24
 8007684:	f7ff ff2f 	bl	80074e6 <__exponent>
 8007688:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800768a:	1813      	adds	r3, r2, r0
 800768c:	2a01      	cmp	r2, #1
 800768e:	4681      	mov	r9, r0
 8007690:	6123      	str	r3, [r4, #16]
 8007692:	dc02      	bgt.n	800769a <_printf_float+0x14e>
 8007694:	6822      	ldr	r2, [r4, #0]
 8007696:	07d1      	lsls	r1, r2, #31
 8007698:	d501      	bpl.n	800769e <_printf_float+0x152>
 800769a:	3301      	adds	r3, #1
 800769c:	6123      	str	r3, [r4, #16]
 800769e:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 80076a2:	2b00      	cmp	r3, #0
 80076a4:	d0a5      	beq.n	80075f2 <_printf_float+0xa6>
 80076a6:	232d      	movs	r3, #45	; 0x2d
 80076a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80076ac:	e7a1      	b.n	80075f2 <_printf_float+0xa6>
 80076ae:	f1ba 0f67 	cmp.w	sl, #103	; 0x67
 80076b2:	f000 8177 	beq.w	80079a4 <_printf_float+0x458>
 80076b6:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
 80076ba:	d1bb      	bne.n	8007634 <_printf_float+0xe8>
 80076bc:	2900      	cmp	r1, #0
 80076be:	d1b9      	bne.n	8007634 <_printf_float+0xe8>
 80076c0:	2301      	movs	r3, #1
 80076c2:	e7b6      	b.n	8007632 <_printf_float+0xe6>
 80076c4:	f1ba 0f66 	cmp.w	sl, #102	; 0x66
 80076c8:	d119      	bne.n	80076fe <_printf_float+0x1b2>
 80076ca:	2900      	cmp	r1, #0
 80076cc:	6863      	ldr	r3, [r4, #4]
 80076ce:	dd0c      	ble.n	80076ea <_printf_float+0x19e>
 80076d0:	6121      	str	r1, [r4, #16]
 80076d2:	b913      	cbnz	r3, 80076da <_printf_float+0x18e>
 80076d4:	6822      	ldr	r2, [r4, #0]
 80076d6:	07d2      	lsls	r2, r2, #31
 80076d8:	d502      	bpl.n	80076e0 <_printf_float+0x194>
 80076da:	3301      	adds	r3, #1
 80076dc:	440b      	add	r3, r1
 80076de:	6123      	str	r3, [r4, #16]
 80076e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80076e2:	65a3      	str	r3, [r4, #88]	; 0x58
 80076e4:	f04f 0900 	mov.w	r9, #0
 80076e8:	e7d9      	b.n	800769e <_printf_float+0x152>
 80076ea:	b913      	cbnz	r3, 80076f2 <_printf_float+0x1a6>
 80076ec:	6822      	ldr	r2, [r4, #0]
 80076ee:	07d0      	lsls	r0, r2, #31
 80076f0:	d501      	bpl.n	80076f6 <_printf_float+0x1aa>
 80076f2:	3302      	adds	r3, #2
 80076f4:	e7f3      	b.n	80076de <_printf_float+0x192>
 80076f6:	2301      	movs	r3, #1
 80076f8:	e7f1      	b.n	80076de <_printf_float+0x192>
 80076fa:	f04f 0a67 	mov.w	sl, #103	; 0x67
 80076fe:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8007702:	4293      	cmp	r3, r2
 8007704:	db05      	blt.n	8007712 <_printf_float+0x1c6>
 8007706:	6822      	ldr	r2, [r4, #0]
 8007708:	6123      	str	r3, [r4, #16]
 800770a:	07d1      	lsls	r1, r2, #31
 800770c:	d5e8      	bpl.n	80076e0 <_printf_float+0x194>
 800770e:	3301      	adds	r3, #1
 8007710:	e7e5      	b.n	80076de <_printf_float+0x192>
 8007712:	2b00      	cmp	r3, #0
 8007714:	bfd4      	ite	le
 8007716:	f1c3 0302 	rsble	r3, r3, #2
 800771a:	2301      	movgt	r3, #1
 800771c:	4413      	add	r3, r2
 800771e:	e7de      	b.n	80076de <_printf_float+0x192>
 8007720:	6823      	ldr	r3, [r4, #0]
 8007722:	055a      	lsls	r2, r3, #21
 8007724:	d407      	bmi.n	8007736 <_printf_float+0x1ea>
 8007726:	6923      	ldr	r3, [r4, #16]
 8007728:	4642      	mov	r2, r8
 800772a:	4631      	mov	r1, r6
 800772c:	4628      	mov	r0, r5
 800772e:	47b8      	blx	r7
 8007730:	3001      	adds	r0, #1
 8007732:	d12b      	bne.n	800778c <_printf_float+0x240>
 8007734:	e767      	b.n	8007606 <_printf_float+0xba>
 8007736:	f1ba 0f65 	cmp.w	sl, #101	; 0x65
 800773a:	f240 80dc 	bls.w	80078f6 <_printf_float+0x3aa>
 800773e:	2200      	movs	r2, #0
 8007740:	2300      	movs	r3, #0
 8007742:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007746:	f7fb fe27 	bl	8003398 <__aeabi_dcmpeq>
 800774a:	2800      	cmp	r0, #0
 800774c:	d033      	beq.n	80077b6 <_printf_float+0x26a>
 800774e:	2301      	movs	r3, #1
 8007750:	4a41      	ldr	r2, [pc, #260]	; (8007858 <_printf_float+0x30c>)
 8007752:	4631      	mov	r1, r6
 8007754:	4628      	mov	r0, r5
 8007756:	47b8      	blx	r7
 8007758:	3001      	adds	r0, #1
 800775a:	f43f af54 	beq.w	8007606 <_printf_float+0xba>
 800775e:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007762:	429a      	cmp	r2, r3
 8007764:	db02      	blt.n	800776c <_printf_float+0x220>
 8007766:	6823      	ldr	r3, [r4, #0]
 8007768:	07d8      	lsls	r0, r3, #31
 800776a:	d50f      	bpl.n	800778c <_printf_float+0x240>
 800776c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007770:	4631      	mov	r1, r6
 8007772:	4628      	mov	r0, r5
 8007774:	47b8      	blx	r7
 8007776:	3001      	adds	r0, #1
 8007778:	f43f af45 	beq.w	8007606 <_printf_float+0xba>
 800777c:	f04f 0800 	mov.w	r8, #0
 8007780:	f104 091a 	add.w	r9, r4, #26
 8007784:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007786:	3b01      	subs	r3, #1
 8007788:	4543      	cmp	r3, r8
 800778a:	dc09      	bgt.n	80077a0 <_printf_float+0x254>
 800778c:	6823      	ldr	r3, [r4, #0]
 800778e:	079b      	lsls	r3, r3, #30
 8007790:	f100 8103 	bmi.w	800799a <_printf_float+0x44e>
 8007794:	68e0      	ldr	r0, [r4, #12]
 8007796:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007798:	4298      	cmp	r0, r3
 800779a:	bfb8      	it	lt
 800779c:	4618      	movlt	r0, r3
 800779e:	e734      	b.n	800760a <_printf_float+0xbe>
 80077a0:	2301      	movs	r3, #1
 80077a2:	464a      	mov	r2, r9
 80077a4:	4631      	mov	r1, r6
 80077a6:	4628      	mov	r0, r5
 80077a8:	47b8      	blx	r7
 80077aa:	3001      	adds	r0, #1
 80077ac:	f43f af2b 	beq.w	8007606 <_printf_float+0xba>
 80077b0:	f108 0801 	add.w	r8, r8, #1
 80077b4:	e7e6      	b.n	8007784 <_printf_float+0x238>
 80077b6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80077b8:	2b00      	cmp	r3, #0
 80077ba:	dc2b      	bgt.n	8007814 <_printf_float+0x2c8>
 80077bc:	2301      	movs	r3, #1
 80077be:	4a26      	ldr	r2, [pc, #152]	; (8007858 <_printf_float+0x30c>)
 80077c0:	4631      	mov	r1, r6
 80077c2:	4628      	mov	r0, r5
 80077c4:	47b8      	blx	r7
 80077c6:	3001      	adds	r0, #1
 80077c8:	f43f af1d 	beq.w	8007606 <_printf_float+0xba>
 80077cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80077ce:	b923      	cbnz	r3, 80077da <_printf_float+0x28e>
 80077d0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80077d2:	b913      	cbnz	r3, 80077da <_printf_float+0x28e>
 80077d4:	6823      	ldr	r3, [r4, #0]
 80077d6:	07d9      	lsls	r1, r3, #31
 80077d8:	d5d8      	bpl.n	800778c <_printf_float+0x240>
 80077da:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80077de:	4631      	mov	r1, r6
 80077e0:	4628      	mov	r0, r5
 80077e2:	47b8      	blx	r7
 80077e4:	3001      	adds	r0, #1
 80077e6:	f43f af0e 	beq.w	8007606 <_printf_float+0xba>
 80077ea:	f04f 0900 	mov.w	r9, #0
 80077ee:	f104 0a1a 	add.w	sl, r4, #26
 80077f2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80077f4:	425b      	negs	r3, r3
 80077f6:	454b      	cmp	r3, r9
 80077f8:	dc01      	bgt.n	80077fe <_printf_float+0x2b2>
 80077fa:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80077fc:	e794      	b.n	8007728 <_printf_float+0x1dc>
 80077fe:	2301      	movs	r3, #1
 8007800:	4652      	mov	r2, sl
 8007802:	4631      	mov	r1, r6
 8007804:	4628      	mov	r0, r5
 8007806:	47b8      	blx	r7
 8007808:	3001      	adds	r0, #1
 800780a:	f43f aefc 	beq.w	8007606 <_printf_float+0xba>
 800780e:	f109 0901 	add.w	r9, r9, #1
 8007812:	e7ee      	b.n	80077f2 <_printf_float+0x2a6>
 8007814:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007816:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007818:	429a      	cmp	r2, r3
 800781a:	bfa8      	it	ge
 800781c:	461a      	movge	r2, r3
 800781e:	2a00      	cmp	r2, #0
 8007820:	4691      	mov	r9, r2
 8007822:	dd07      	ble.n	8007834 <_printf_float+0x2e8>
 8007824:	4613      	mov	r3, r2
 8007826:	4631      	mov	r1, r6
 8007828:	4642      	mov	r2, r8
 800782a:	4628      	mov	r0, r5
 800782c:	47b8      	blx	r7
 800782e:	3001      	adds	r0, #1
 8007830:	f43f aee9 	beq.w	8007606 <_printf_float+0xba>
 8007834:	f104 031a 	add.w	r3, r4, #26
 8007838:	f04f 0b00 	mov.w	fp, #0
 800783c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007840:	9306      	str	r3, [sp, #24]
 8007842:	e015      	b.n	8007870 <_printf_float+0x324>
 8007844:	7fefffff 	.word	0x7fefffff
 8007848:	08023274 	.word	0x08023274
 800784c:	08023270 	.word	0x08023270
 8007850:	0802327c 	.word	0x0802327c
 8007854:	08023278 	.word	0x08023278
 8007858:	08023280 	.word	0x08023280
 800785c:	2301      	movs	r3, #1
 800785e:	9a06      	ldr	r2, [sp, #24]
 8007860:	4631      	mov	r1, r6
 8007862:	4628      	mov	r0, r5
 8007864:	47b8      	blx	r7
 8007866:	3001      	adds	r0, #1
 8007868:	f43f aecd 	beq.w	8007606 <_printf_float+0xba>
 800786c:	f10b 0b01 	add.w	fp, fp, #1
 8007870:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8007874:	ebaa 0309 	sub.w	r3, sl, r9
 8007878:	455b      	cmp	r3, fp
 800787a:	dcef      	bgt.n	800785c <_printf_float+0x310>
 800787c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007880:	429a      	cmp	r2, r3
 8007882:	44d0      	add	r8, sl
 8007884:	db15      	blt.n	80078b2 <_printf_float+0x366>
 8007886:	6823      	ldr	r3, [r4, #0]
 8007888:	07da      	lsls	r2, r3, #31
 800788a:	d412      	bmi.n	80078b2 <_printf_float+0x366>
 800788c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800788e:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007890:	eba3 020a 	sub.w	r2, r3, sl
 8007894:	eba3 0a01 	sub.w	sl, r3, r1
 8007898:	4592      	cmp	sl, r2
 800789a:	bfa8      	it	ge
 800789c:	4692      	movge	sl, r2
 800789e:	f1ba 0f00 	cmp.w	sl, #0
 80078a2:	dc0e      	bgt.n	80078c2 <_printf_float+0x376>
 80078a4:	f04f 0800 	mov.w	r8, #0
 80078a8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80078ac:	f104 091a 	add.w	r9, r4, #26
 80078b0:	e019      	b.n	80078e6 <_printf_float+0x39a>
 80078b2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80078b6:	4631      	mov	r1, r6
 80078b8:	4628      	mov	r0, r5
 80078ba:	47b8      	blx	r7
 80078bc:	3001      	adds	r0, #1
 80078be:	d1e5      	bne.n	800788c <_printf_float+0x340>
 80078c0:	e6a1      	b.n	8007606 <_printf_float+0xba>
 80078c2:	4653      	mov	r3, sl
 80078c4:	4642      	mov	r2, r8
 80078c6:	4631      	mov	r1, r6
 80078c8:	4628      	mov	r0, r5
 80078ca:	47b8      	blx	r7
 80078cc:	3001      	adds	r0, #1
 80078ce:	d1e9      	bne.n	80078a4 <_printf_float+0x358>
 80078d0:	e699      	b.n	8007606 <_printf_float+0xba>
 80078d2:	2301      	movs	r3, #1
 80078d4:	464a      	mov	r2, r9
 80078d6:	4631      	mov	r1, r6
 80078d8:	4628      	mov	r0, r5
 80078da:	47b8      	blx	r7
 80078dc:	3001      	adds	r0, #1
 80078de:	f43f ae92 	beq.w	8007606 <_printf_float+0xba>
 80078e2:	f108 0801 	add.w	r8, r8, #1
 80078e6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80078ea:	1a9b      	subs	r3, r3, r2
 80078ec:	eba3 030a 	sub.w	r3, r3, sl
 80078f0:	4543      	cmp	r3, r8
 80078f2:	dcee      	bgt.n	80078d2 <_printf_float+0x386>
 80078f4:	e74a      	b.n	800778c <_printf_float+0x240>
 80078f6:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80078f8:	2a01      	cmp	r2, #1
 80078fa:	dc01      	bgt.n	8007900 <_printf_float+0x3b4>
 80078fc:	07db      	lsls	r3, r3, #31
 80078fe:	d53a      	bpl.n	8007976 <_printf_float+0x42a>
 8007900:	2301      	movs	r3, #1
 8007902:	4642      	mov	r2, r8
 8007904:	4631      	mov	r1, r6
 8007906:	4628      	mov	r0, r5
 8007908:	47b8      	blx	r7
 800790a:	3001      	adds	r0, #1
 800790c:	f43f ae7b 	beq.w	8007606 <_printf_float+0xba>
 8007910:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007914:	4631      	mov	r1, r6
 8007916:	4628      	mov	r0, r5
 8007918:	47b8      	blx	r7
 800791a:	3001      	adds	r0, #1
 800791c:	f108 0801 	add.w	r8, r8, #1
 8007920:	f43f ae71 	beq.w	8007606 <_printf_float+0xba>
 8007924:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007926:	2200      	movs	r2, #0
 8007928:	f103 3aff 	add.w	sl, r3, #4294967295
 800792c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007930:	2300      	movs	r3, #0
 8007932:	f7fb fd31 	bl	8003398 <__aeabi_dcmpeq>
 8007936:	b9c8      	cbnz	r0, 800796c <_printf_float+0x420>
 8007938:	4653      	mov	r3, sl
 800793a:	4642      	mov	r2, r8
 800793c:	4631      	mov	r1, r6
 800793e:	4628      	mov	r0, r5
 8007940:	47b8      	blx	r7
 8007942:	3001      	adds	r0, #1
 8007944:	d10e      	bne.n	8007964 <_printf_float+0x418>
 8007946:	e65e      	b.n	8007606 <_printf_float+0xba>
 8007948:	2301      	movs	r3, #1
 800794a:	4652      	mov	r2, sl
 800794c:	4631      	mov	r1, r6
 800794e:	4628      	mov	r0, r5
 8007950:	47b8      	blx	r7
 8007952:	3001      	adds	r0, #1
 8007954:	f43f ae57 	beq.w	8007606 <_printf_float+0xba>
 8007958:	f108 0801 	add.w	r8, r8, #1
 800795c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800795e:	3b01      	subs	r3, #1
 8007960:	4543      	cmp	r3, r8
 8007962:	dcf1      	bgt.n	8007948 <_printf_float+0x3fc>
 8007964:	464b      	mov	r3, r9
 8007966:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800796a:	e6de      	b.n	800772a <_printf_float+0x1de>
 800796c:	f04f 0800 	mov.w	r8, #0
 8007970:	f104 0a1a 	add.w	sl, r4, #26
 8007974:	e7f2      	b.n	800795c <_printf_float+0x410>
 8007976:	2301      	movs	r3, #1
 8007978:	e7df      	b.n	800793a <_printf_float+0x3ee>
 800797a:	2301      	movs	r3, #1
 800797c:	464a      	mov	r2, r9
 800797e:	4631      	mov	r1, r6
 8007980:	4628      	mov	r0, r5
 8007982:	47b8      	blx	r7
 8007984:	3001      	adds	r0, #1
 8007986:	f43f ae3e 	beq.w	8007606 <_printf_float+0xba>
 800798a:	f108 0801 	add.w	r8, r8, #1
 800798e:	68e3      	ldr	r3, [r4, #12]
 8007990:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007992:	1a9b      	subs	r3, r3, r2
 8007994:	4543      	cmp	r3, r8
 8007996:	dcf0      	bgt.n	800797a <_printf_float+0x42e>
 8007998:	e6fc      	b.n	8007794 <_printf_float+0x248>
 800799a:	f04f 0800 	mov.w	r8, #0
 800799e:	f104 0919 	add.w	r9, r4, #25
 80079a2:	e7f4      	b.n	800798e <_printf_float+0x442>
 80079a4:	2900      	cmp	r1, #0
 80079a6:	f43f ae8b 	beq.w	80076c0 <_printf_float+0x174>
 80079aa:	2300      	movs	r3, #0
 80079ac:	e9cd 0302 	strd	r0, r3, [sp, #8]
 80079b0:	ab09      	add	r3, sp, #36	; 0x24
 80079b2:	9300      	str	r3, [sp, #0]
 80079b4:	ec49 8b10 	vmov	d0, r8, r9
 80079b8:	6022      	str	r2, [r4, #0]
 80079ba:	f8cd a004 	str.w	sl, [sp, #4]
 80079be:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80079c2:	4628      	mov	r0, r5
 80079c4:	f7ff fd2e 	bl	8007424 <__cvt>
 80079c8:	4680      	mov	r8, r0
 80079ca:	e648      	b.n	800765e <_printf_float+0x112>

080079cc <_printf_common>:
 80079cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80079d0:	4691      	mov	r9, r2
 80079d2:	461f      	mov	r7, r3
 80079d4:	688a      	ldr	r2, [r1, #8]
 80079d6:	690b      	ldr	r3, [r1, #16]
 80079d8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80079dc:	4293      	cmp	r3, r2
 80079de:	bfb8      	it	lt
 80079e0:	4613      	movlt	r3, r2
 80079e2:	f8c9 3000 	str.w	r3, [r9]
 80079e6:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80079ea:	4606      	mov	r6, r0
 80079ec:	460c      	mov	r4, r1
 80079ee:	b112      	cbz	r2, 80079f6 <_printf_common+0x2a>
 80079f0:	3301      	adds	r3, #1
 80079f2:	f8c9 3000 	str.w	r3, [r9]
 80079f6:	6823      	ldr	r3, [r4, #0]
 80079f8:	0699      	lsls	r1, r3, #26
 80079fa:	bf42      	ittt	mi
 80079fc:	f8d9 3000 	ldrmi.w	r3, [r9]
 8007a00:	3302      	addmi	r3, #2
 8007a02:	f8c9 3000 	strmi.w	r3, [r9]
 8007a06:	6825      	ldr	r5, [r4, #0]
 8007a08:	f015 0506 	ands.w	r5, r5, #6
 8007a0c:	d107      	bne.n	8007a1e <_printf_common+0x52>
 8007a0e:	f104 0a19 	add.w	sl, r4, #25
 8007a12:	68e3      	ldr	r3, [r4, #12]
 8007a14:	f8d9 2000 	ldr.w	r2, [r9]
 8007a18:	1a9b      	subs	r3, r3, r2
 8007a1a:	42ab      	cmp	r3, r5
 8007a1c:	dc28      	bgt.n	8007a70 <_printf_common+0xa4>
 8007a1e:	f894 3043 	ldrb.w	r3, [r4, #67]	; 0x43
 8007a22:	6822      	ldr	r2, [r4, #0]
 8007a24:	3300      	adds	r3, #0
 8007a26:	bf18      	it	ne
 8007a28:	2301      	movne	r3, #1
 8007a2a:	0692      	lsls	r2, r2, #26
 8007a2c:	d42d      	bmi.n	8007a8a <_printf_common+0xbe>
 8007a2e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007a32:	4639      	mov	r1, r7
 8007a34:	4630      	mov	r0, r6
 8007a36:	47c0      	blx	r8
 8007a38:	3001      	adds	r0, #1
 8007a3a:	d020      	beq.n	8007a7e <_printf_common+0xb2>
 8007a3c:	6823      	ldr	r3, [r4, #0]
 8007a3e:	68e5      	ldr	r5, [r4, #12]
 8007a40:	f8d9 2000 	ldr.w	r2, [r9]
 8007a44:	f003 0306 	and.w	r3, r3, #6
 8007a48:	2b04      	cmp	r3, #4
 8007a4a:	bf08      	it	eq
 8007a4c:	1aad      	subeq	r5, r5, r2
 8007a4e:	68a3      	ldr	r3, [r4, #8]
 8007a50:	6922      	ldr	r2, [r4, #16]
 8007a52:	bf0c      	ite	eq
 8007a54:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007a58:	2500      	movne	r5, #0
 8007a5a:	4293      	cmp	r3, r2
 8007a5c:	bfc4      	itt	gt
 8007a5e:	1a9b      	subgt	r3, r3, r2
 8007a60:	18ed      	addgt	r5, r5, r3
 8007a62:	f04f 0900 	mov.w	r9, #0
 8007a66:	341a      	adds	r4, #26
 8007a68:	454d      	cmp	r5, r9
 8007a6a:	d11a      	bne.n	8007aa2 <_printf_common+0xd6>
 8007a6c:	2000      	movs	r0, #0
 8007a6e:	e008      	b.n	8007a82 <_printf_common+0xb6>
 8007a70:	2301      	movs	r3, #1
 8007a72:	4652      	mov	r2, sl
 8007a74:	4639      	mov	r1, r7
 8007a76:	4630      	mov	r0, r6
 8007a78:	47c0      	blx	r8
 8007a7a:	3001      	adds	r0, #1
 8007a7c:	d103      	bne.n	8007a86 <_printf_common+0xba>
 8007a7e:	f04f 30ff 	mov.w	r0, #4294967295
 8007a82:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a86:	3501      	adds	r5, #1
 8007a88:	e7c3      	b.n	8007a12 <_printf_common+0x46>
 8007a8a:	18e1      	adds	r1, r4, r3
 8007a8c:	1c5a      	adds	r2, r3, #1
 8007a8e:	2030      	movs	r0, #48	; 0x30
 8007a90:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007a94:	4422      	add	r2, r4
 8007a96:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007a9a:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007a9e:	3302      	adds	r3, #2
 8007aa0:	e7c5      	b.n	8007a2e <_printf_common+0x62>
 8007aa2:	2301      	movs	r3, #1
 8007aa4:	4622      	mov	r2, r4
 8007aa6:	4639      	mov	r1, r7
 8007aa8:	4630      	mov	r0, r6
 8007aaa:	47c0      	blx	r8
 8007aac:	3001      	adds	r0, #1
 8007aae:	d0e6      	beq.n	8007a7e <_printf_common+0xb2>
 8007ab0:	f109 0901 	add.w	r9, r9, #1
 8007ab4:	e7d8      	b.n	8007a68 <_printf_common+0x9c>
	...

08007ab8 <_printf_i>:
 8007ab8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8007abc:	f101 0c43 	add.w	ip, r1, #67	; 0x43
 8007ac0:	460c      	mov	r4, r1
 8007ac2:	7e09      	ldrb	r1, [r1, #24]
 8007ac4:	b085      	sub	sp, #20
 8007ac6:	296e      	cmp	r1, #110	; 0x6e
 8007ac8:	4617      	mov	r7, r2
 8007aca:	4606      	mov	r6, r0
 8007acc:	4698      	mov	r8, r3
 8007ace:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8007ad0:	f000 80b3 	beq.w	8007c3a <_printf_i+0x182>
 8007ad4:	d822      	bhi.n	8007b1c <_printf_i+0x64>
 8007ad6:	2963      	cmp	r1, #99	; 0x63
 8007ad8:	d036      	beq.n	8007b48 <_printf_i+0x90>
 8007ada:	d80a      	bhi.n	8007af2 <_printf_i+0x3a>
 8007adc:	2900      	cmp	r1, #0
 8007ade:	f000 80b9 	beq.w	8007c54 <_printf_i+0x19c>
 8007ae2:	2958      	cmp	r1, #88	; 0x58
 8007ae4:	f000 8083 	beq.w	8007bee <_printf_i+0x136>
 8007ae8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007aec:	f884 1042 	strb.w	r1, [r4, #66]	; 0x42
 8007af0:	e032      	b.n	8007b58 <_printf_i+0xa0>
 8007af2:	2964      	cmp	r1, #100	; 0x64
 8007af4:	d001      	beq.n	8007afa <_printf_i+0x42>
 8007af6:	2969      	cmp	r1, #105	; 0x69
 8007af8:	d1f6      	bne.n	8007ae8 <_printf_i+0x30>
 8007afa:	6820      	ldr	r0, [r4, #0]
 8007afc:	6813      	ldr	r3, [r2, #0]
 8007afe:	0605      	lsls	r5, r0, #24
 8007b00:	f103 0104 	add.w	r1, r3, #4
 8007b04:	d52a      	bpl.n	8007b5c <_printf_i+0xa4>
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	6011      	str	r1, [r2, #0]
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	da03      	bge.n	8007b16 <_printf_i+0x5e>
 8007b0e:	222d      	movs	r2, #45	; 0x2d
 8007b10:	425b      	negs	r3, r3
 8007b12:	f884 2043 	strb.w	r2, [r4, #67]	; 0x43
 8007b16:	486f      	ldr	r0, [pc, #444]	; (8007cd4 <_printf_i+0x21c>)
 8007b18:	220a      	movs	r2, #10
 8007b1a:	e039      	b.n	8007b90 <_printf_i+0xd8>
 8007b1c:	2973      	cmp	r1, #115	; 0x73
 8007b1e:	f000 809d 	beq.w	8007c5c <_printf_i+0x1a4>
 8007b22:	d808      	bhi.n	8007b36 <_printf_i+0x7e>
 8007b24:	296f      	cmp	r1, #111	; 0x6f
 8007b26:	d020      	beq.n	8007b6a <_printf_i+0xb2>
 8007b28:	2970      	cmp	r1, #112	; 0x70
 8007b2a:	d1dd      	bne.n	8007ae8 <_printf_i+0x30>
 8007b2c:	6823      	ldr	r3, [r4, #0]
 8007b2e:	f043 0320 	orr.w	r3, r3, #32
 8007b32:	6023      	str	r3, [r4, #0]
 8007b34:	e003      	b.n	8007b3e <_printf_i+0x86>
 8007b36:	2975      	cmp	r1, #117	; 0x75
 8007b38:	d017      	beq.n	8007b6a <_printf_i+0xb2>
 8007b3a:	2978      	cmp	r1, #120	; 0x78
 8007b3c:	d1d4      	bne.n	8007ae8 <_printf_i+0x30>
 8007b3e:	2378      	movs	r3, #120	; 0x78
 8007b40:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007b44:	4864      	ldr	r0, [pc, #400]	; (8007cd8 <_printf_i+0x220>)
 8007b46:	e055      	b.n	8007bf4 <_printf_i+0x13c>
 8007b48:	6813      	ldr	r3, [r2, #0]
 8007b4a:	1d19      	adds	r1, r3, #4
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	6011      	str	r1, [r2, #0]
 8007b50:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007b54:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007b58:	2301      	movs	r3, #1
 8007b5a:	e08c      	b.n	8007c76 <_printf_i+0x1be>
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	6011      	str	r1, [r2, #0]
 8007b60:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007b64:	bf18      	it	ne
 8007b66:	b21b      	sxthne	r3, r3
 8007b68:	e7cf      	b.n	8007b0a <_printf_i+0x52>
 8007b6a:	6813      	ldr	r3, [r2, #0]
 8007b6c:	6825      	ldr	r5, [r4, #0]
 8007b6e:	1d18      	adds	r0, r3, #4
 8007b70:	6010      	str	r0, [r2, #0]
 8007b72:	0628      	lsls	r0, r5, #24
 8007b74:	d501      	bpl.n	8007b7a <_printf_i+0xc2>
 8007b76:	681b      	ldr	r3, [r3, #0]
 8007b78:	e002      	b.n	8007b80 <_printf_i+0xc8>
 8007b7a:	0668      	lsls	r0, r5, #25
 8007b7c:	d5fb      	bpl.n	8007b76 <_printf_i+0xbe>
 8007b7e:	881b      	ldrh	r3, [r3, #0]
 8007b80:	4854      	ldr	r0, [pc, #336]	; (8007cd4 <_printf_i+0x21c>)
 8007b82:	296f      	cmp	r1, #111	; 0x6f
 8007b84:	bf14      	ite	ne
 8007b86:	220a      	movne	r2, #10
 8007b88:	2208      	moveq	r2, #8
 8007b8a:	2100      	movs	r1, #0
 8007b8c:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007b90:	6865      	ldr	r5, [r4, #4]
 8007b92:	60a5      	str	r5, [r4, #8]
 8007b94:	2d00      	cmp	r5, #0
 8007b96:	f2c0 8095 	blt.w	8007cc4 <_printf_i+0x20c>
 8007b9a:	6821      	ldr	r1, [r4, #0]
 8007b9c:	f021 0104 	bic.w	r1, r1, #4
 8007ba0:	6021      	str	r1, [r4, #0]
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d13d      	bne.n	8007c22 <_printf_i+0x16a>
 8007ba6:	2d00      	cmp	r5, #0
 8007ba8:	f040 808e 	bne.w	8007cc8 <_printf_i+0x210>
 8007bac:	4665      	mov	r5, ip
 8007bae:	2a08      	cmp	r2, #8
 8007bb0:	d10b      	bne.n	8007bca <_printf_i+0x112>
 8007bb2:	6823      	ldr	r3, [r4, #0]
 8007bb4:	07db      	lsls	r3, r3, #31
 8007bb6:	d508      	bpl.n	8007bca <_printf_i+0x112>
 8007bb8:	6923      	ldr	r3, [r4, #16]
 8007bba:	6862      	ldr	r2, [r4, #4]
 8007bbc:	429a      	cmp	r2, r3
 8007bbe:	bfde      	ittt	le
 8007bc0:	2330      	movle	r3, #48	; 0x30
 8007bc2:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007bc6:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007bca:	ebac 0305 	sub.w	r3, ip, r5
 8007bce:	6123      	str	r3, [r4, #16]
 8007bd0:	f8cd 8000 	str.w	r8, [sp]
 8007bd4:	463b      	mov	r3, r7
 8007bd6:	aa03      	add	r2, sp, #12
 8007bd8:	4621      	mov	r1, r4
 8007bda:	4630      	mov	r0, r6
 8007bdc:	f7ff fef6 	bl	80079cc <_printf_common>
 8007be0:	3001      	adds	r0, #1
 8007be2:	d14d      	bne.n	8007c80 <_printf_i+0x1c8>
 8007be4:	f04f 30ff 	mov.w	r0, #4294967295
 8007be8:	b005      	add	sp, #20
 8007bea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007bee:	4839      	ldr	r0, [pc, #228]	; (8007cd4 <_printf_i+0x21c>)
 8007bf0:	f884 1045 	strb.w	r1, [r4, #69]	; 0x45
 8007bf4:	6813      	ldr	r3, [r2, #0]
 8007bf6:	6821      	ldr	r1, [r4, #0]
 8007bf8:	1d1d      	adds	r5, r3, #4
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	6015      	str	r5, [r2, #0]
 8007bfe:	060a      	lsls	r2, r1, #24
 8007c00:	d50b      	bpl.n	8007c1a <_printf_i+0x162>
 8007c02:	07ca      	lsls	r2, r1, #31
 8007c04:	bf44      	itt	mi
 8007c06:	f041 0120 	orrmi.w	r1, r1, #32
 8007c0a:	6021      	strmi	r1, [r4, #0]
 8007c0c:	b91b      	cbnz	r3, 8007c16 <_printf_i+0x15e>
 8007c0e:	6822      	ldr	r2, [r4, #0]
 8007c10:	f022 0220 	bic.w	r2, r2, #32
 8007c14:	6022      	str	r2, [r4, #0]
 8007c16:	2210      	movs	r2, #16
 8007c18:	e7b7      	b.n	8007b8a <_printf_i+0xd2>
 8007c1a:	064d      	lsls	r5, r1, #25
 8007c1c:	bf48      	it	mi
 8007c1e:	b29b      	uxthmi	r3, r3
 8007c20:	e7ef      	b.n	8007c02 <_printf_i+0x14a>
 8007c22:	4665      	mov	r5, ip
 8007c24:	fbb3 f1f2 	udiv	r1, r3, r2
 8007c28:	fb02 3311 	mls	r3, r2, r1, r3
 8007c2c:	5cc3      	ldrb	r3, [r0, r3]
 8007c2e:	f805 3d01 	strb.w	r3, [r5, #-1]!
 8007c32:	460b      	mov	r3, r1
 8007c34:	2900      	cmp	r1, #0
 8007c36:	d1f5      	bne.n	8007c24 <_printf_i+0x16c>
 8007c38:	e7b9      	b.n	8007bae <_printf_i+0xf6>
 8007c3a:	6813      	ldr	r3, [r2, #0]
 8007c3c:	6825      	ldr	r5, [r4, #0]
 8007c3e:	6961      	ldr	r1, [r4, #20]
 8007c40:	1d18      	adds	r0, r3, #4
 8007c42:	6010      	str	r0, [r2, #0]
 8007c44:	0628      	lsls	r0, r5, #24
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	d501      	bpl.n	8007c4e <_printf_i+0x196>
 8007c4a:	6019      	str	r1, [r3, #0]
 8007c4c:	e002      	b.n	8007c54 <_printf_i+0x19c>
 8007c4e:	066a      	lsls	r2, r5, #25
 8007c50:	d5fb      	bpl.n	8007c4a <_printf_i+0x192>
 8007c52:	8019      	strh	r1, [r3, #0]
 8007c54:	2300      	movs	r3, #0
 8007c56:	6123      	str	r3, [r4, #16]
 8007c58:	4665      	mov	r5, ip
 8007c5a:	e7b9      	b.n	8007bd0 <_printf_i+0x118>
 8007c5c:	6813      	ldr	r3, [r2, #0]
 8007c5e:	1d19      	adds	r1, r3, #4
 8007c60:	6011      	str	r1, [r2, #0]
 8007c62:	681d      	ldr	r5, [r3, #0]
 8007c64:	6862      	ldr	r2, [r4, #4]
 8007c66:	2100      	movs	r1, #0
 8007c68:	4628      	mov	r0, r5
 8007c6a:	f7fa ff21 	bl	8002ab0 <memchr>
 8007c6e:	b108      	cbz	r0, 8007c74 <_printf_i+0x1bc>
 8007c70:	1b40      	subs	r0, r0, r5
 8007c72:	6060      	str	r0, [r4, #4]
 8007c74:	6863      	ldr	r3, [r4, #4]
 8007c76:	6123      	str	r3, [r4, #16]
 8007c78:	2300      	movs	r3, #0
 8007c7a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007c7e:	e7a7      	b.n	8007bd0 <_printf_i+0x118>
 8007c80:	6923      	ldr	r3, [r4, #16]
 8007c82:	462a      	mov	r2, r5
 8007c84:	4639      	mov	r1, r7
 8007c86:	4630      	mov	r0, r6
 8007c88:	47c0      	blx	r8
 8007c8a:	3001      	adds	r0, #1
 8007c8c:	d0aa      	beq.n	8007be4 <_printf_i+0x12c>
 8007c8e:	6823      	ldr	r3, [r4, #0]
 8007c90:	079b      	lsls	r3, r3, #30
 8007c92:	d413      	bmi.n	8007cbc <_printf_i+0x204>
 8007c94:	68e0      	ldr	r0, [r4, #12]
 8007c96:	9b03      	ldr	r3, [sp, #12]
 8007c98:	4298      	cmp	r0, r3
 8007c9a:	bfb8      	it	lt
 8007c9c:	4618      	movlt	r0, r3
 8007c9e:	e7a3      	b.n	8007be8 <_printf_i+0x130>
 8007ca0:	2301      	movs	r3, #1
 8007ca2:	464a      	mov	r2, r9
 8007ca4:	4639      	mov	r1, r7
 8007ca6:	4630      	mov	r0, r6
 8007ca8:	47c0      	blx	r8
 8007caa:	3001      	adds	r0, #1
 8007cac:	d09a      	beq.n	8007be4 <_printf_i+0x12c>
 8007cae:	3501      	adds	r5, #1
 8007cb0:	68e3      	ldr	r3, [r4, #12]
 8007cb2:	9a03      	ldr	r2, [sp, #12]
 8007cb4:	1a9b      	subs	r3, r3, r2
 8007cb6:	42ab      	cmp	r3, r5
 8007cb8:	dcf2      	bgt.n	8007ca0 <_printf_i+0x1e8>
 8007cba:	e7eb      	b.n	8007c94 <_printf_i+0x1dc>
 8007cbc:	2500      	movs	r5, #0
 8007cbe:	f104 0919 	add.w	r9, r4, #25
 8007cc2:	e7f5      	b.n	8007cb0 <_printf_i+0x1f8>
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d1ac      	bne.n	8007c22 <_printf_i+0x16a>
 8007cc8:	7803      	ldrb	r3, [r0, #0]
 8007cca:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007cce:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007cd2:	e76c      	b.n	8007bae <_printf_i+0xf6>
 8007cd4:	08023282 	.word	0x08023282
 8007cd8:	08023293 	.word	0x08023293

08007cdc <iprintf>:
 8007cdc:	b40f      	push	{r0, r1, r2, r3}
 8007cde:	4b0a      	ldr	r3, [pc, #40]	; (8007d08 <iprintf+0x2c>)
 8007ce0:	b513      	push	{r0, r1, r4, lr}
 8007ce2:	681c      	ldr	r4, [r3, #0]
 8007ce4:	b124      	cbz	r4, 8007cf0 <iprintf+0x14>
 8007ce6:	69a3      	ldr	r3, [r4, #24]
 8007ce8:	b913      	cbnz	r3, 8007cf0 <iprintf+0x14>
 8007cea:	4620      	mov	r0, r4
 8007cec:	f001 f88c 	bl	8008e08 <__sinit>
 8007cf0:	ab05      	add	r3, sp, #20
 8007cf2:	9a04      	ldr	r2, [sp, #16]
 8007cf4:	68a1      	ldr	r1, [r4, #8]
 8007cf6:	9301      	str	r3, [sp, #4]
 8007cf8:	4620      	mov	r0, r4
 8007cfa:	f001 fc89 	bl	8009610 <_vfiprintf_r>
 8007cfe:	b002      	add	sp, #8
 8007d00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007d04:	b004      	add	sp, #16
 8007d06:	4770      	bx	lr
 8007d08:	2000000c 	.word	0x2000000c

08007d0c <putchar>:
 8007d0c:	b538      	push	{r3, r4, r5, lr}
 8007d0e:	4b08      	ldr	r3, [pc, #32]	; (8007d30 <putchar+0x24>)
 8007d10:	681c      	ldr	r4, [r3, #0]
 8007d12:	4605      	mov	r5, r0
 8007d14:	b124      	cbz	r4, 8007d20 <putchar+0x14>
 8007d16:	69a3      	ldr	r3, [r4, #24]
 8007d18:	b913      	cbnz	r3, 8007d20 <putchar+0x14>
 8007d1a:	4620      	mov	r0, r4
 8007d1c:	f001 f874 	bl	8008e08 <__sinit>
 8007d20:	68a2      	ldr	r2, [r4, #8]
 8007d22:	4629      	mov	r1, r5
 8007d24:	4620      	mov	r0, r4
 8007d26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007d2a:	f001 bd87 	b.w	800983c <_putc_r>
 8007d2e:	bf00      	nop
 8007d30:	2000000c 	.word	0x2000000c

08007d34 <_puts_r>:
 8007d34:	b570      	push	{r4, r5, r6, lr}
 8007d36:	460e      	mov	r6, r1
 8007d38:	4605      	mov	r5, r0
 8007d3a:	b118      	cbz	r0, 8007d44 <_puts_r+0x10>
 8007d3c:	6983      	ldr	r3, [r0, #24]
 8007d3e:	b90b      	cbnz	r3, 8007d44 <_puts_r+0x10>
 8007d40:	f001 f862 	bl	8008e08 <__sinit>
 8007d44:	69ab      	ldr	r3, [r5, #24]
 8007d46:	68ac      	ldr	r4, [r5, #8]
 8007d48:	b913      	cbnz	r3, 8007d50 <_puts_r+0x1c>
 8007d4a:	4628      	mov	r0, r5
 8007d4c:	f001 f85c 	bl	8008e08 <__sinit>
 8007d50:	4b23      	ldr	r3, [pc, #140]	; (8007de0 <_puts_r+0xac>)
 8007d52:	429c      	cmp	r4, r3
 8007d54:	d117      	bne.n	8007d86 <_puts_r+0x52>
 8007d56:	686c      	ldr	r4, [r5, #4]
 8007d58:	89a3      	ldrh	r3, [r4, #12]
 8007d5a:	071b      	lsls	r3, r3, #28
 8007d5c:	d51d      	bpl.n	8007d9a <_puts_r+0x66>
 8007d5e:	6923      	ldr	r3, [r4, #16]
 8007d60:	b1db      	cbz	r3, 8007d9a <_puts_r+0x66>
 8007d62:	3e01      	subs	r6, #1
 8007d64:	68a3      	ldr	r3, [r4, #8]
 8007d66:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007d6a:	3b01      	subs	r3, #1
 8007d6c:	60a3      	str	r3, [r4, #8]
 8007d6e:	b9e9      	cbnz	r1, 8007dac <_puts_r+0x78>
 8007d70:	2b00      	cmp	r3, #0
 8007d72:	da2e      	bge.n	8007dd2 <_puts_r+0x9e>
 8007d74:	4622      	mov	r2, r4
 8007d76:	210a      	movs	r1, #10
 8007d78:	4628      	mov	r0, r5
 8007d7a:	f000 f84f 	bl	8007e1c <__swbuf_r>
 8007d7e:	3001      	adds	r0, #1
 8007d80:	d011      	beq.n	8007da6 <_puts_r+0x72>
 8007d82:	200a      	movs	r0, #10
 8007d84:	e011      	b.n	8007daa <_puts_r+0x76>
 8007d86:	4b17      	ldr	r3, [pc, #92]	; (8007de4 <_puts_r+0xb0>)
 8007d88:	429c      	cmp	r4, r3
 8007d8a:	d101      	bne.n	8007d90 <_puts_r+0x5c>
 8007d8c:	68ac      	ldr	r4, [r5, #8]
 8007d8e:	e7e3      	b.n	8007d58 <_puts_r+0x24>
 8007d90:	4b15      	ldr	r3, [pc, #84]	; (8007de8 <_puts_r+0xb4>)
 8007d92:	429c      	cmp	r4, r3
 8007d94:	bf08      	it	eq
 8007d96:	68ec      	ldreq	r4, [r5, #12]
 8007d98:	e7de      	b.n	8007d58 <_puts_r+0x24>
 8007d9a:	4621      	mov	r1, r4
 8007d9c:	4628      	mov	r0, r5
 8007d9e:	f000 f88f 	bl	8007ec0 <__swsetup_r>
 8007da2:	2800      	cmp	r0, #0
 8007da4:	d0dd      	beq.n	8007d62 <_puts_r+0x2e>
 8007da6:	f04f 30ff 	mov.w	r0, #4294967295
 8007daa:	bd70      	pop	{r4, r5, r6, pc}
 8007dac:	2b00      	cmp	r3, #0
 8007dae:	da04      	bge.n	8007dba <_puts_r+0x86>
 8007db0:	69a2      	ldr	r2, [r4, #24]
 8007db2:	429a      	cmp	r2, r3
 8007db4:	dc06      	bgt.n	8007dc4 <_puts_r+0x90>
 8007db6:	290a      	cmp	r1, #10
 8007db8:	d004      	beq.n	8007dc4 <_puts_r+0x90>
 8007dba:	6823      	ldr	r3, [r4, #0]
 8007dbc:	1c5a      	adds	r2, r3, #1
 8007dbe:	6022      	str	r2, [r4, #0]
 8007dc0:	7019      	strb	r1, [r3, #0]
 8007dc2:	e7cf      	b.n	8007d64 <_puts_r+0x30>
 8007dc4:	4622      	mov	r2, r4
 8007dc6:	4628      	mov	r0, r5
 8007dc8:	f000 f828 	bl	8007e1c <__swbuf_r>
 8007dcc:	3001      	adds	r0, #1
 8007dce:	d1c9      	bne.n	8007d64 <_puts_r+0x30>
 8007dd0:	e7e9      	b.n	8007da6 <_puts_r+0x72>
 8007dd2:	6823      	ldr	r3, [r4, #0]
 8007dd4:	200a      	movs	r0, #10
 8007dd6:	1c5a      	adds	r2, r3, #1
 8007dd8:	6022      	str	r2, [r4, #0]
 8007dda:	7018      	strb	r0, [r3, #0]
 8007ddc:	e7e5      	b.n	8007daa <_puts_r+0x76>
 8007dde:	bf00      	nop
 8007de0:	080232d4 	.word	0x080232d4
 8007de4:	080232f4 	.word	0x080232f4
 8007de8:	080232b4 	.word	0x080232b4

08007dec <puts>:
 8007dec:	4b02      	ldr	r3, [pc, #8]	; (8007df8 <puts+0xc>)
 8007dee:	4601      	mov	r1, r0
 8007df0:	6818      	ldr	r0, [r3, #0]
 8007df2:	f7ff bf9f 	b.w	8007d34 <_puts_r>
 8007df6:	bf00      	nop
 8007df8:	2000000c 	.word	0x2000000c

08007dfc <_sbrk_r>:
 8007dfc:	b538      	push	{r3, r4, r5, lr}
 8007dfe:	4c06      	ldr	r4, [pc, #24]	; (8007e18 <_sbrk_r+0x1c>)
 8007e00:	2300      	movs	r3, #0
 8007e02:	4605      	mov	r5, r0
 8007e04:	4608      	mov	r0, r1
 8007e06:	6023      	str	r3, [r4, #0]
 8007e08:	f7fb ff58 	bl	8003cbc <_sbrk>
 8007e0c:	1c43      	adds	r3, r0, #1
 8007e0e:	d102      	bne.n	8007e16 <_sbrk_r+0x1a>
 8007e10:	6823      	ldr	r3, [r4, #0]
 8007e12:	b103      	cbz	r3, 8007e16 <_sbrk_r+0x1a>
 8007e14:	602b      	str	r3, [r5, #0]
 8007e16:	bd38      	pop	{r3, r4, r5, pc}
 8007e18:	20000748 	.word	0x20000748

08007e1c <__swbuf_r>:
 8007e1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007e1e:	460e      	mov	r6, r1
 8007e20:	4614      	mov	r4, r2
 8007e22:	4605      	mov	r5, r0
 8007e24:	b118      	cbz	r0, 8007e2e <__swbuf_r+0x12>
 8007e26:	6983      	ldr	r3, [r0, #24]
 8007e28:	b90b      	cbnz	r3, 8007e2e <__swbuf_r+0x12>
 8007e2a:	f000 ffed 	bl	8008e08 <__sinit>
 8007e2e:	4b21      	ldr	r3, [pc, #132]	; (8007eb4 <__swbuf_r+0x98>)
 8007e30:	429c      	cmp	r4, r3
 8007e32:	d12a      	bne.n	8007e8a <__swbuf_r+0x6e>
 8007e34:	686c      	ldr	r4, [r5, #4]
 8007e36:	69a3      	ldr	r3, [r4, #24]
 8007e38:	60a3      	str	r3, [r4, #8]
 8007e3a:	89a3      	ldrh	r3, [r4, #12]
 8007e3c:	071a      	lsls	r2, r3, #28
 8007e3e:	d52e      	bpl.n	8007e9e <__swbuf_r+0x82>
 8007e40:	6923      	ldr	r3, [r4, #16]
 8007e42:	b363      	cbz	r3, 8007e9e <__swbuf_r+0x82>
 8007e44:	6923      	ldr	r3, [r4, #16]
 8007e46:	6820      	ldr	r0, [r4, #0]
 8007e48:	1ac0      	subs	r0, r0, r3
 8007e4a:	6963      	ldr	r3, [r4, #20]
 8007e4c:	b2f6      	uxtb	r6, r6
 8007e4e:	4283      	cmp	r3, r0
 8007e50:	4637      	mov	r7, r6
 8007e52:	dc04      	bgt.n	8007e5e <__swbuf_r+0x42>
 8007e54:	4621      	mov	r1, r4
 8007e56:	4628      	mov	r0, r5
 8007e58:	f000 ff6c 	bl	8008d34 <_fflush_r>
 8007e5c:	bb28      	cbnz	r0, 8007eaa <__swbuf_r+0x8e>
 8007e5e:	68a3      	ldr	r3, [r4, #8]
 8007e60:	3b01      	subs	r3, #1
 8007e62:	60a3      	str	r3, [r4, #8]
 8007e64:	6823      	ldr	r3, [r4, #0]
 8007e66:	1c5a      	adds	r2, r3, #1
 8007e68:	6022      	str	r2, [r4, #0]
 8007e6a:	701e      	strb	r6, [r3, #0]
 8007e6c:	6963      	ldr	r3, [r4, #20]
 8007e6e:	3001      	adds	r0, #1
 8007e70:	4283      	cmp	r3, r0
 8007e72:	d004      	beq.n	8007e7e <__swbuf_r+0x62>
 8007e74:	89a3      	ldrh	r3, [r4, #12]
 8007e76:	07db      	lsls	r3, r3, #31
 8007e78:	d519      	bpl.n	8007eae <__swbuf_r+0x92>
 8007e7a:	2e0a      	cmp	r6, #10
 8007e7c:	d117      	bne.n	8007eae <__swbuf_r+0x92>
 8007e7e:	4621      	mov	r1, r4
 8007e80:	4628      	mov	r0, r5
 8007e82:	f000 ff57 	bl	8008d34 <_fflush_r>
 8007e86:	b190      	cbz	r0, 8007eae <__swbuf_r+0x92>
 8007e88:	e00f      	b.n	8007eaa <__swbuf_r+0x8e>
 8007e8a:	4b0b      	ldr	r3, [pc, #44]	; (8007eb8 <__swbuf_r+0x9c>)
 8007e8c:	429c      	cmp	r4, r3
 8007e8e:	d101      	bne.n	8007e94 <__swbuf_r+0x78>
 8007e90:	68ac      	ldr	r4, [r5, #8]
 8007e92:	e7d0      	b.n	8007e36 <__swbuf_r+0x1a>
 8007e94:	4b09      	ldr	r3, [pc, #36]	; (8007ebc <__swbuf_r+0xa0>)
 8007e96:	429c      	cmp	r4, r3
 8007e98:	bf08      	it	eq
 8007e9a:	68ec      	ldreq	r4, [r5, #12]
 8007e9c:	e7cb      	b.n	8007e36 <__swbuf_r+0x1a>
 8007e9e:	4621      	mov	r1, r4
 8007ea0:	4628      	mov	r0, r5
 8007ea2:	f000 f80d 	bl	8007ec0 <__swsetup_r>
 8007ea6:	2800      	cmp	r0, #0
 8007ea8:	d0cc      	beq.n	8007e44 <__swbuf_r+0x28>
 8007eaa:	f04f 37ff 	mov.w	r7, #4294967295
 8007eae:	4638      	mov	r0, r7
 8007eb0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007eb2:	bf00      	nop
 8007eb4:	080232d4 	.word	0x080232d4
 8007eb8:	080232f4 	.word	0x080232f4
 8007ebc:	080232b4 	.word	0x080232b4

08007ec0 <__swsetup_r>:
 8007ec0:	4b32      	ldr	r3, [pc, #200]	; (8007f8c <__swsetup_r+0xcc>)
 8007ec2:	b570      	push	{r4, r5, r6, lr}
 8007ec4:	681d      	ldr	r5, [r3, #0]
 8007ec6:	4606      	mov	r6, r0
 8007ec8:	460c      	mov	r4, r1
 8007eca:	b125      	cbz	r5, 8007ed6 <__swsetup_r+0x16>
 8007ecc:	69ab      	ldr	r3, [r5, #24]
 8007ece:	b913      	cbnz	r3, 8007ed6 <__swsetup_r+0x16>
 8007ed0:	4628      	mov	r0, r5
 8007ed2:	f000 ff99 	bl	8008e08 <__sinit>
 8007ed6:	4b2e      	ldr	r3, [pc, #184]	; (8007f90 <__swsetup_r+0xd0>)
 8007ed8:	429c      	cmp	r4, r3
 8007eda:	d10f      	bne.n	8007efc <__swsetup_r+0x3c>
 8007edc:	686c      	ldr	r4, [r5, #4]
 8007ede:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007ee2:	b29a      	uxth	r2, r3
 8007ee4:	0715      	lsls	r5, r2, #28
 8007ee6:	d42c      	bmi.n	8007f42 <__swsetup_r+0x82>
 8007ee8:	06d0      	lsls	r0, r2, #27
 8007eea:	d411      	bmi.n	8007f10 <__swsetup_r+0x50>
 8007eec:	2209      	movs	r2, #9
 8007eee:	6032      	str	r2, [r6, #0]
 8007ef0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007ef4:	81a3      	strh	r3, [r4, #12]
 8007ef6:	f04f 30ff 	mov.w	r0, #4294967295
 8007efa:	e03e      	b.n	8007f7a <__swsetup_r+0xba>
 8007efc:	4b25      	ldr	r3, [pc, #148]	; (8007f94 <__swsetup_r+0xd4>)
 8007efe:	429c      	cmp	r4, r3
 8007f00:	d101      	bne.n	8007f06 <__swsetup_r+0x46>
 8007f02:	68ac      	ldr	r4, [r5, #8]
 8007f04:	e7eb      	b.n	8007ede <__swsetup_r+0x1e>
 8007f06:	4b24      	ldr	r3, [pc, #144]	; (8007f98 <__swsetup_r+0xd8>)
 8007f08:	429c      	cmp	r4, r3
 8007f0a:	bf08      	it	eq
 8007f0c:	68ec      	ldreq	r4, [r5, #12]
 8007f0e:	e7e6      	b.n	8007ede <__swsetup_r+0x1e>
 8007f10:	0751      	lsls	r1, r2, #29
 8007f12:	d512      	bpl.n	8007f3a <__swsetup_r+0x7a>
 8007f14:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8007f16:	b141      	cbz	r1, 8007f2a <__swsetup_r+0x6a>
 8007f18:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007f1c:	4299      	cmp	r1, r3
 8007f1e:	d002      	beq.n	8007f26 <__swsetup_r+0x66>
 8007f20:	4630      	mov	r0, r6
 8007f22:	f7ff f9d7 	bl	80072d4 <_free_r>
 8007f26:	2300      	movs	r3, #0
 8007f28:	6363      	str	r3, [r4, #52]	; 0x34
 8007f2a:	89a3      	ldrh	r3, [r4, #12]
 8007f2c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8007f30:	81a3      	strh	r3, [r4, #12]
 8007f32:	2300      	movs	r3, #0
 8007f34:	6063      	str	r3, [r4, #4]
 8007f36:	6923      	ldr	r3, [r4, #16]
 8007f38:	6023      	str	r3, [r4, #0]
 8007f3a:	89a3      	ldrh	r3, [r4, #12]
 8007f3c:	f043 0308 	orr.w	r3, r3, #8
 8007f40:	81a3      	strh	r3, [r4, #12]
 8007f42:	6923      	ldr	r3, [r4, #16]
 8007f44:	b94b      	cbnz	r3, 8007f5a <__swsetup_r+0x9a>
 8007f46:	89a3      	ldrh	r3, [r4, #12]
 8007f48:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007f4c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007f50:	d003      	beq.n	8007f5a <__swsetup_r+0x9a>
 8007f52:	4621      	mov	r1, r4
 8007f54:	4630      	mov	r0, r6
 8007f56:	f001 f813 	bl	8008f80 <__smakebuf_r>
 8007f5a:	89a2      	ldrh	r2, [r4, #12]
 8007f5c:	f012 0301 	ands.w	r3, r2, #1
 8007f60:	d00c      	beq.n	8007f7c <__swsetup_r+0xbc>
 8007f62:	2300      	movs	r3, #0
 8007f64:	60a3      	str	r3, [r4, #8]
 8007f66:	6963      	ldr	r3, [r4, #20]
 8007f68:	425b      	negs	r3, r3
 8007f6a:	61a3      	str	r3, [r4, #24]
 8007f6c:	6923      	ldr	r3, [r4, #16]
 8007f6e:	b953      	cbnz	r3, 8007f86 <__swsetup_r+0xc6>
 8007f70:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007f74:	f013 0080 	ands.w	r0, r3, #128	; 0x80
 8007f78:	d1ba      	bne.n	8007ef0 <__swsetup_r+0x30>
 8007f7a:	bd70      	pop	{r4, r5, r6, pc}
 8007f7c:	0792      	lsls	r2, r2, #30
 8007f7e:	bf58      	it	pl
 8007f80:	6963      	ldrpl	r3, [r4, #20]
 8007f82:	60a3      	str	r3, [r4, #8]
 8007f84:	e7f2      	b.n	8007f6c <__swsetup_r+0xac>
 8007f86:	2000      	movs	r0, #0
 8007f88:	e7f7      	b.n	8007f7a <__swsetup_r+0xba>
 8007f8a:	bf00      	nop
 8007f8c:	2000000c 	.word	0x2000000c
 8007f90:	080232d4 	.word	0x080232d4
 8007f94:	080232f4 	.word	0x080232f4
 8007f98:	080232b4 	.word	0x080232b4

08007f9c <quorem>:
 8007f9c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007fa0:	6903      	ldr	r3, [r0, #16]
 8007fa2:	690c      	ldr	r4, [r1, #16]
 8007fa4:	42a3      	cmp	r3, r4
 8007fa6:	4680      	mov	r8, r0
 8007fa8:	f2c0 8082 	blt.w	80080b0 <quorem+0x114>
 8007fac:	3c01      	subs	r4, #1
 8007fae:	f101 0714 	add.w	r7, r1, #20
 8007fb2:	ea4f 0c84 	mov.w	ip, r4, lsl #2
 8007fb6:	f100 0614 	add.w	r6, r0, #20
 8007fba:	f857 5024 	ldr.w	r5, [r7, r4, lsl #2]
 8007fbe:	f856 0024 	ldr.w	r0, [r6, r4, lsl #2]
 8007fc2:	eb06 030c 	add.w	r3, r6, ip
 8007fc6:	3501      	adds	r5, #1
 8007fc8:	eb07 090c 	add.w	r9, r7, ip
 8007fcc:	9301      	str	r3, [sp, #4]
 8007fce:	fbb0 f5f5 	udiv	r5, r0, r5
 8007fd2:	b395      	cbz	r5, 800803a <quorem+0x9e>
 8007fd4:	f04f 0a00 	mov.w	sl, #0
 8007fd8:	4638      	mov	r0, r7
 8007fda:	46b6      	mov	lr, r6
 8007fdc:	46d3      	mov	fp, sl
 8007fde:	f850 2b04 	ldr.w	r2, [r0], #4
 8007fe2:	b293      	uxth	r3, r2
 8007fe4:	fb05 a303 	mla	r3, r5, r3, sl
 8007fe8:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007fec:	b29b      	uxth	r3, r3
 8007fee:	ebab 0303 	sub.w	r3, fp, r3
 8007ff2:	0c12      	lsrs	r2, r2, #16
 8007ff4:	f8de b000 	ldr.w	fp, [lr]
 8007ff8:	fb05 a202 	mla	r2, r5, r2, sl
 8007ffc:	fa13 f38b 	uxtah	r3, r3, fp
 8008000:	ea4f 4a12 	mov.w	sl, r2, lsr #16
 8008004:	fa1f fb82 	uxth.w	fp, r2
 8008008:	f8de 2000 	ldr.w	r2, [lr]
 800800c:	ebcb 4212 	rsb	r2, fp, r2, lsr #16
 8008010:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008014:	b29b      	uxth	r3, r3
 8008016:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800801a:	4581      	cmp	r9, r0
 800801c:	ea4f 4b22 	mov.w	fp, r2, asr #16
 8008020:	f84e 3b04 	str.w	r3, [lr], #4
 8008024:	d2db      	bcs.n	8007fde <quorem+0x42>
 8008026:	f856 300c 	ldr.w	r3, [r6, ip]
 800802a:	b933      	cbnz	r3, 800803a <quorem+0x9e>
 800802c:	9b01      	ldr	r3, [sp, #4]
 800802e:	3b04      	subs	r3, #4
 8008030:	429e      	cmp	r6, r3
 8008032:	461a      	mov	r2, r3
 8008034:	d330      	bcc.n	8008098 <quorem+0xfc>
 8008036:	f8c8 4010 	str.w	r4, [r8, #16]
 800803a:	4640      	mov	r0, r8
 800803c:	f001 f9f8 	bl	8009430 <__mcmp>
 8008040:	2800      	cmp	r0, #0
 8008042:	db25      	blt.n	8008090 <quorem+0xf4>
 8008044:	3501      	adds	r5, #1
 8008046:	4630      	mov	r0, r6
 8008048:	f04f 0c00 	mov.w	ip, #0
 800804c:	f857 2b04 	ldr.w	r2, [r7], #4
 8008050:	f8d0 e000 	ldr.w	lr, [r0]
 8008054:	b293      	uxth	r3, r2
 8008056:	ebac 0303 	sub.w	r3, ip, r3
 800805a:	0c12      	lsrs	r2, r2, #16
 800805c:	fa13 f38e 	uxtah	r3, r3, lr
 8008060:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8008064:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8008068:	b29b      	uxth	r3, r3
 800806a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800806e:	45b9      	cmp	r9, r7
 8008070:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8008074:	f840 3b04 	str.w	r3, [r0], #4
 8008078:	d2e8      	bcs.n	800804c <quorem+0xb0>
 800807a:	f856 2024 	ldr.w	r2, [r6, r4, lsl #2]
 800807e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8008082:	b92a      	cbnz	r2, 8008090 <quorem+0xf4>
 8008084:	3b04      	subs	r3, #4
 8008086:	429e      	cmp	r6, r3
 8008088:	461a      	mov	r2, r3
 800808a:	d30b      	bcc.n	80080a4 <quorem+0x108>
 800808c:	f8c8 4010 	str.w	r4, [r8, #16]
 8008090:	4628      	mov	r0, r5
 8008092:	b003      	add	sp, #12
 8008094:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008098:	6812      	ldr	r2, [r2, #0]
 800809a:	3b04      	subs	r3, #4
 800809c:	2a00      	cmp	r2, #0
 800809e:	d1ca      	bne.n	8008036 <quorem+0x9a>
 80080a0:	3c01      	subs	r4, #1
 80080a2:	e7c5      	b.n	8008030 <quorem+0x94>
 80080a4:	6812      	ldr	r2, [r2, #0]
 80080a6:	3b04      	subs	r3, #4
 80080a8:	2a00      	cmp	r2, #0
 80080aa:	d1ef      	bne.n	800808c <quorem+0xf0>
 80080ac:	3c01      	subs	r4, #1
 80080ae:	e7ea      	b.n	8008086 <quorem+0xea>
 80080b0:	2000      	movs	r0, #0
 80080b2:	e7ee      	b.n	8008092 <quorem+0xf6>
 80080b4:	0000      	movs	r0, r0
	...

080080b8 <_dtoa_r>:
 80080b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80080bc:	ec57 6b10 	vmov	r6, r7, d0
 80080c0:	b097      	sub	sp, #92	; 0x5c
 80080c2:	6a45      	ldr	r5, [r0, #36]	; 0x24
 80080c4:	9106      	str	r1, [sp, #24]
 80080c6:	4604      	mov	r4, r0
 80080c8:	920b      	str	r2, [sp, #44]	; 0x2c
 80080ca:	9312      	str	r3, [sp, #72]	; 0x48
 80080cc:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 80080d0:	e9cd 6700 	strd	r6, r7, [sp]
 80080d4:	b93d      	cbnz	r5, 80080e6 <_dtoa_r+0x2e>
 80080d6:	2010      	movs	r0, #16
 80080d8:	f7ff f8b2 	bl	8007240 <malloc>
 80080dc:	6260      	str	r0, [r4, #36]	; 0x24
 80080de:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80080e2:	6005      	str	r5, [r0, #0]
 80080e4:	60c5      	str	r5, [r0, #12]
 80080e6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80080e8:	6819      	ldr	r1, [r3, #0]
 80080ea:	b151      	cbz	r1, 8008102 <_dtoa_r+0x4a>
 80080ec:	685a      	ldr	r2, [r3, #4]
 80080ee:	604a      	str	r2, [r1, #4]
 80080f0:	2301      	movs	r3, #1
 80080f2:	4093      	lsls	r3, r2
 80080f4:	608b      	str	r3, [r1, #8]
 80080f6:	4620      	mov	r0, r4
 80080f8:	f000 ffb8 	bl	800906c <_Bfree>
 80080fc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80080fe:	2200      	movs	r2, #0
 8008100:	601a      	str	r2, [r3, #0]
 8008102:	1e3b      	subs	r3, r7, #0
 8008104:	bfbb      	ittet	lt
 8008106:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800810a:	9301      	strlt	r3, [sp, #4]
 800810c:	2300      	movge	r3, #0
 800810e:	2201      	movlt	r2, #1
 8008110:	bfac      	ite	ge
 8008112:	f8c8 3000 	strge.w	r3, [r8]
 8008116:	f8c8 2000 	strlt.w	r2, [r8]
 800811a:	4baf      	ldr	r3, [pc, #700]	; (80083d8 <_dtoa_r+0x320>)
 800811c:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8008120:	ea33 0308 	bics.w	r3, r3, r8
 8008124:	d114      	bne.n	8008150 <_dtoa_r+0x98>
 8008126:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008128:	f242 730f 	movw	r3, #9999	; 0x270f
 800812c:	6013      	str	r3, [r2, #0]
 800812e:	9b00      	ldr	r3, [sp, #0]
 8008130:	b923      	cbnz	r3, 800813c <_dtoa_r+0x84>
 8008132:	f3c8 0013 	ubfx	r0, r8, #0, #20
 8008136:	2800      	cmp	r0, #0
 8008138:	f000 8542 	beq.w	8008bc0 <_dtoa_r+0xb08>
 800813c:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800813e:	f8df b2ac 	ldr.w	fp, [pc, #684]	; 80083ec <_dtoa_r+0x334>
 8008142:	2b00      	cmp	r3, #0
 8008144:	f000 8544 	beq.w	8008bd0 <_dtoa_r+0xb18>
 8008148:	f10b 0303 	add.w	r3, fp, #3
 800814c:	f000 bd3e 	b.w	8008bcc <_dtoa_r+0xb14>
 8008150:	e9dd 6700 	ldrd	r6, r7, [sp]
 8008154:	2200      	movs	r2, #0
 8008156:	2300      	movs	r3, #0
 8008158:	4630      	mov	r0, r6
 800815a:	4639      	mov	r1, r7
 800815c:	f7fb f91c 	bl	8003398 <__aeabi_dcmpeq>
 8008160:	4681      	mov	r9, r0
 8008162:	b168      	cbz	r0, 8008180 <_dtoa_r+0xc8>
 8008164:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008166:	2301      	movs	r3, #1
 8008168:	6013      	str	r3, [r2, #0]
 800816a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800816c:	2b00      	cmp	r3, #0
 800816e:	f000 8524 	beq.w	8008bba <_dtoa_r+0xb02>
 8008172:	4b9a      	ldr	r3, [pc, #616]	; (80083dc <_dtoa_r+0x324>)
 8008174:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008176:	f103 3bff 	add.w	fp, r3, #4294967295
 800817a:	6013      	str	r3, [r2, #0]
 800817c:	f000 bd28 	b.w	8008bd0 <_dtoa_r+0xb18>
 8008180:	aa14      	add	r2, sp, #80	; 0x50
 8008182:	a915      	add	r1, sp, #84	; 0x54
 8008184:	ec47 6b10 	vmov	d0, r6, r7
 8008188:	4620      	mov	r0, r4
 800818a:	f001 f9c8 	bl	800951e <__d2b>
 800818e:	f3c8 550a 	ubfx	r5, r8, #20, #11
 8008192:	9004      	str	r0, [sp, #16]
 8008194:	2d00      	cmp	r5, #0
 8008196:	d07c      	beq.n	8008292 <_dtoa_r+0x1da>
 8008198:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800819c:	f043 5b7f 	orr.w	fp, r3, #1069547520	; 0x3fc00000
 80081a0:	46b2      	mov	sl, r6
 80081a2:	f44b 1b40 	orr.w	fp, fp, #3145728	; 0x300000
 80081a6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 80081aa:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
 80081ae:	2200      	movs	r2, #0
 80081b0:	4b8b      	ldr	r3, [pc, #556]	; (80083e0 <_dtoa_r+0x328>)
 80081b2:	4650      	mov	r0, sl
 80081b4:	4659      	mov	r1, fp
 80081b6:	f7fa fccf 	bl	8002b58 <__aeabi_dsub>
 80081ba:	a381      	add	r3, pc, #516	; (adr r3, 80083c0 <_dtoa_r+0x308>)
 80081bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081c0:	f7fa fe82 	bl	8002ec8 <__aeabi_dmul>
 80081c4:	a380      	add	r3, pc, #512	; (adr r3, 80083c8 <_dtoa_r+0x310>)
 80081c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081ca:	f7fa fcc7 	bl	8002b5c <__adddf3>
 80081ce:	4606      	mov	r6, r0
 80081d0:	4628      	mov	r0, r5
 80081d2:	460f      	mov	r7, r1
 80081d4:	f7fa fe0e 	bl	8002df4 <__aeabi_i2d>
 80081d8:	a37d      	add	r3, pc, #500	; (adr r3, 80083d0 <_dtoa_r+0x318>)
 80081da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80081de:	f7fa fe73 	bl	8002ec8 <__aeabi_dmul>
 80081e2:	4602      	mov	r2, r0
 80081e4:	460b      	mov	r3, r1
 80081e6:	4630      	mov	r0, r6
 80081e8:	4639      	mov	r1, r7
 80081ea:	f7fa fcb7 	bl	8002b5c <__adddf3>
 80081ee:	4606      	mov	r6, r0
 80081f0:	460f      	mov	r7, r1
 80081f2:	f7fb f919 	bl	8003428 <__aeabi_d2iz>
 80081f6:	2200      	movs	r2, #0
 80081f8:	4682      	mov	sl, r0
 80081fa:	2300      	movs	r3, #0
 80081fc:	4630      	mov	r0, r6
 80081fe:	4639      	mov	r1, r7
 8008200:	f7fb f8d4 	bl	80033ac <__aeabi_dcmplt>
 8008204:	b148      	cbz	r0, 800821a <_dtoa_r+0x162>
 8008206:	4650      	mov	r0, sl
 8008208:	f7fa fdf4 	bl	8002df4 <__aeabi_i2d>
 800820c:	4632      	mov	r2, r6
 800820e:	463b      	mov	r3, r7
 8008210:	f7fb f8c2 	bl	8003398 <__aeabi_dcmpeq>
 8008214:	b908      	cbnz	r0, 800821a <_dtoa_r+0x162>
 8008216:	f10a 3aff 	add.w	sl, sl, #4294967295
 800821a:	f1ba 0f16 	cmp.w	sl, #22
 800821e:	d859      	bhi.n	80082d4 <_dtoa_r+0x21c>
 8008220:	4970      	ldr	r1, [pc, #448]	; (80083e4 <_dtoa_r+0x32c>)
 8008222:	eb01 01ca 	add.w	r1, r1, sl, lsl #3
 8008226:	e9dd 2300 	ldrd	r2, r3, [sp]
 800822a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800822e:	f7fb f8db 	bl	80033e8 <__aeabi_dcmpgt>
 8008232:	2800      	cmp	r0, #0
 8008234:	d050      	beq.n	80082d8 <_dtoa_r+0x220>
 8008236:	f10a 3aff 	add.w	sl, sl, #4294967295
 800823a:	2300      	movs	r3, #0
 800823c:	930f      	str	r3, [sp, #60]	; 0x3c
 800823e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008240:	1b5d      	subs	r5, r3, r5
 8008242:	f1b5 0801 	subs.w	r8, r5, #1
 8008246:	bf49      	itett	mi
 8008248:	f1c5 0301 	rsbmi	r3, r5, #1
 800824c:	2300      	movpl	r3, #0
 800824e:	9305      	strmi	r3, [sp, #20]
 8008250:	f04f 0800 	movmi.w	r8, #0
 8008254:	bf58      	it	pl
 8008256:	9305      	strpl	r3, [sp, #20]
 8008258:	f1ba 0f00 	cmp.w	sl, #0
 800825c:	db3e      	blt.n	80082dc <_dtoa_r+0x224>
 800825e:	2300      	movs	r3, #0
 8008260:	44d0      	add	r8, sl
 8008262:	f8cd a038 	str.w	sl, [sp, #56]	; 0x38
 8008266:	9307      	str	r3, [sp, #28]
 8008268:	9b06      	ldr	r3, [sp, #24]
 800826a:	2b09      	cmp	r3, #9
 800826c:	f200 8090 	bhi.w	8008390 <_dtoa_r+0x2d8>
 8008270:	2b05      	cmp	r3, #5
 8008272:	bfc4      	itt	gt
 8008274:	3b04      	subgt	r3, #4
 8008276:	9306      	strgt	r3, [sp, #24]
 8008278:	9b06      	ldr	r3, [sp, #24]
 800827a:	f1a3 0302 	sub.w	r3, r3, #2
 800827e:	bfcc      	ite	gt
 8008280:	2500      	movgt	r5, #0
 8008282:	2501      	movle	r5, #1
 8008284:	2b03      	cmp	r3, #3
 8008286:	f200 808f 	bhi.w	80083a8 <_dtoa_r+0x2f0>
 800828a:	e8df f003 	tbb	[pc, r3]
 800828e:	7f7d      	.short	0x7f7d
 8008290:	7131      	.short	0x7131
 8008292:	e9dd 5314 	ldrd	r5, r3, [sp, #80]	; 0x50
 8008296:	441d      	add	r5, r3
 8008298:	f205 4032 	addw	r0, r5, #1074	; 0x432
 800829c:	2820      	cmp	r0, #32
 800829e:	dd13      	ble.n	80082c8 <_dtoa_r+0x210>
 80082a0:	f1c0 0040 	rsb	r0, r0, #64	; 0x40
 80082a4:	9b00      	ldr	r3, [sp, #0]
 80082a6:	fa08 f800 	lsl.w	r8, r8, r0
 80082aa:	f205 4012 	addw	r0, r5, #1042	; 0x412
 80082ae:	fa23 f000 	lsr.w	r0, r3, r0
 80082b2:	ea48 0000 	orr.w	r0, r8, r0
 80082b6:	f7fa fd8d 	bl	8002dd4 <__aeabi_ui2d>
 80082ba:	2301      	movs	r3, #1
 80082bc:	4682      	mov	sl, r0
 80082be:	f1a1 7bf8 	sub.w	fp, r1, #32505856	; 0x1f00000
 80082c2:	3d01      	subs	r5, #1
 80082c4:	9313      	str	r3, [sp, #76]	; 0x4c
 80082c6:	e772      	b.n	80081ae <_dtoa_r+0xf6>
 80082c8:	9b00      	ldr	r3, [sp, #0]
 80082ca:	f1c0 0020 	rsb	r0, r0, #32
 80082ce:	fa03 f000 	lsl.w	r0, r3, r0
 80082d2:	e7f0      	b.n	80082b6 <_dtoa_r+0x1fe>
 80082d4:	2301      	movs	r3, #1
 80082d6:	e7b1      	b.n	800823c <_dtoa_r+0x184>
 80082d8:	900f      	str	r0, [sp, #60]	; 0x3c
 80082da:	e7b0      	b.n	800823e <_dtoa_r+0x186>
 80082dc:	9b05      	ldr	r3, [sp, #20]
 80082de:	eba3 030a 	sub.w	r3, r3, sl
 80082e2:	9305      	str	r3, [sp, #20]
 80082e4:	f1ca 0300 	rsb	r3, sl, #0
 80082e8:	9307      	str	r3, [sp, #28]
 80082ea:	2300      	movs	r3, #0
 80082ec:	930e      	str	r3, [sp, #56]	; 0x38
 80082ee:	e7bb      	b.n	8008268 <_dtoa_r+0x1b0>
 80082f0:	2301      	movs	r3, #1
 80082f2:	930a      	str	r3, [sp, #40]	; 0x28
 80082f4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	dd59      	ble.n	80083ae <_dtoa_r+0x2f6>
 80082fa:	9302      	str	r3, [sp, #8]
 80082fc:	4699      	mov	r9, r3
 80082fe:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8008300:	2200      	movs	r2, #0
 8008302:	6072      	str	r2, [r6, #4]
 8008304:	2204      	movs	r2, #4
 8008306:	f102 0014 	add.w	r0, r2, #20
 800830a:	4298      	cmp	r0, r3
 800830c:	6871      	ldr	r1, [r6, #4]
 800830e:	d953      	bls.n	80083b8 <_dtoa_r+0x300>
 8008310:	4620      	mov	r0, r4
 8008312:	f000 fe77 	bl	8009004 <_Balloc>
 8008316:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8008318:	6030      	str	r0, [r6, #0]
 800831a:	f1b9 0f0e 	cmp.w	r9, #14
 800831e:	f8d3 b000 	ldr.w	fp, [r3]
 8008322:	f200 80e6 	bhi.w	80084f2 <_dtoa_r+0x43a>
 8008326:	2d00      	cmp	r5, #0
 8008328:	f000 80e3 	beq.w	80084f2 <_dtoa_r+0x43a>
 800832c:	ed9d 7b00 	vldr	d7, [sp]
 8008330:	f1ba 0f00 	cmp.w	sl, #0
 8008334:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8008338:	dd74      	ble.n	8008424 <_dtoa_r+0x36c>
 800833a:	4a2a      	ldr	r2, [pc, #168]	; (80083e4 <_dtoa_r+0x32c>)
 800833c:	f00a 030f 	and.w	r3, sl, #15
 8008340:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 8008344:	ed93 7b00 	vldr	d7, [r3]
 8008348:	ea4f 162a 	mov.w	r6, sl, asr #4
 800834c:	06f0      	lsls	r0, r6, #27
 800834e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8008352:	d565      	bpl.n	8008420 <_dtoa_r+0x368>
 8008354:	4b24      	ldr	r3, [pc, #144]	; (80083e8 <_dtoa_r+0x330>)
 8008356:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800835a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800835e:	f7fa fedd 	bl	800311c <__aeabi_ddiv>
 8008362:	e9cd 0100 	strd	r0, r1, [sp]
 8008366:	f006 060f 	and.w	r6, r6, #15
 800836a:	2503      	movs	r5, #3
 800836c:	4f1e      	ldr	r7, [pc, #120]	; (80083e8 <_dtoa_r+0x330>)
 800836e:	e04c      	b.n	800840a <_dtoa_r+0x352>
 8008370:	2301      	movs	r3, #1
 8008372:	930a      	str	r3, [sp, #40]	; 0x28
 8008374:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008376:	4453      	add	r3, sl
 8008378:	f103 0901 	add.w	r9, r3, #1
 800837c:	9302      	str	r3, [sp, #8]
 800837e:	464b      	mov	r3, r9
 8008380:	2b01      	cmp	r3, #1
 8008382:	bfb8      	it	lt
 8008384:	2301      	movlt	r3, #1
 8008386:	e7ba      	b.n	80082fe <_dtoa_r+0x246>
 8008388:	2300      	movs	r3, #0
 800838a:	e7b2      	b.n	80082f2 <_dtoa_r+0x23a>
 800838c:	2300      	movs	r3, #0
 800838e:	e7f0      	b.n	8008372 <_dtoa_r+0x2ba>
 8008390:	2501      	movs	r5, #1
 8008392:	2300      	movs	r3, #0
 8008394:	9306      	str	r3, [sp, #24]
 8008396:	950a      	str	r5, [sp, #40]	; 0x28
 8008398:	f04f 33ff 	mov.w	r3, #4294967295
 800839c:	9302      	str	r3, [sp, #8]
 800839e:	4699      	mov	r9, r3
 80083a0:	2200      	movs	r2, #0
 80083a2:	2312      	movs	r3, #18
 80083a4:	920b      	str	r2, [sp, #44]	; 0x2c
 80083a6:	e7aa      	b.n	80082fe <_dtoa_r+0x246>
 80083a8:	2301      	movs	r3, #1
 80083aa:	930a      	str	r3, [sp, #40]	; 0x28
 80083ac:	e7f4      	b.n	8008398 <_dtoa_r+0x2e0>
 80083ae:	2301      	movs	r3, #1
 80083b0:	9302      	str	r3, [sp, #8]
 80083b2:	4699      	mov	r9, r3
 80083b4:	461a      	mov	r2, r3
 80083b6:	e7f5      	b.n	80083a4 <_dtoa_r+0x2ec>
 80083b8:	3101      	adds	r1, #1
 80083ba:	6071      	str	r1, [r6, #4]
 80083bc:	0052      	lsls	r2, r2, #1
 80083be:	e7a2      	b.n	8008306 <_dtoa_r+0x24e>
 80083c0:	636f4361 	.word	0x636f4361
 80083c4:	3fd287a7 	.word	0x3fd287a7
 80083c8:	8b60c8b3 	.word	0x8b60c8b3
 80083cc:	3fc68a28 	.word	0x3fc68a28
 80083d0:	509f79fb 	.word	0x509f79fb
 80083d4:	3fd34413 	.word	0x3fd34413
 80083d8:	7ff00000 	.word	0x7ff00000
 80083dc:	08023281 	.word	0x08023281
 80083e0:	3ff80000 	.word	0x3ff80000
 80083e4:	08023340 	.word	0x08023340
 80083e8:	08023318 	.word	0x08023318
 80083ec:	080232ad 	.word	0x080232ad
 80083f0:	07f1      	lsls	r1, r6, #31
 80083f2:	d508      	bpl.n	8008406 <_dtoa_r+0x34e>
 80083f4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80083f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80083fc:	f7fa fd64 	bl	8002ec8 <__aeabi_dmul>
 8008400:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008404:	3501      	adds	r5, #1
 8008406:	1076      	asrs	r6, r6, #1
 8008408:	3708      	adds	r7, #8
 800840a:	2e00      	cmp	r6, #0
 800840c:	d1f0      	bne.n	80083f0 <_dtoa_r+0x338>
 800840e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8008412:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008416:	f7fa fe81 	bl	800311c <__aeabi_ddiv>
 800841a:	e9cd 0100 	strd	r0, r1, [sp]
 800841e:	e01a      	b.n	8008456 <_dtoa_r+0x39e>
 8008420:	2502      	movs	r5, #2
 8008422:	e7a3      	b.n	800836c <_dtoa_r+0x2b4>
 8008424:	f000 80a0 	beq.w	8008568 <_dtoa_r+0x4b0>
 8008428:	f1ca 0600 	rsb	r6, sl, #0
 800842c:	4b9f      	ldr	r3, [pc, #636]	; (80086ac <_dtoa_r+0x5f4>)
 800842e:	4fa0      	ldr	r7, [pc, #640]	; (80086b0 <_dtoa_r+0x5f8>)
 8008430:	f006 020f 	and.w	r2, r6, #15
 8008434:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008438:	e9d3 2300 	ldrd	r2, r3, [r3]
 800843c:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8008440:	f7fa fd42 	bl	8002ec8 <__aeabi_dmul>
 8008444:	e9cd 0100 	strd	r0, r1, [sp]
 8008448:	1136      	asrs	r6, r6, #4
 800844a:	2300      	movs	r3, #0
 800844c:	2502      	movs	r5, #2
 800844e:	2e00      	cmp	r6, #0
 8008450:	d17f      	bne.n	8008552 <_dtoa_r+0x49a>
 8008452:	2b00      	cmp	r3, #0
 8008454:	d1e1      	bne.n	800841a <_dtoa_r+0x362>
 8008456:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008458:	2b00      	cmp	r3, #0
 800845a:	f000 8087 	beq.w	800856c <_dtoa_r+0x4b4>
 800845e:	e9dd 6700 	ldrd	r6, r7, [sp]
 8008462:	2200      	movs	r2, #0
 8008464:	4b93      	ldr	r3, [pc, #588]	; (80086b4 <_dtoa_r+0x5fc>)
 8008466:	4630      	mov	r0, r6
 8008468:	4639      	mov	r1, r7
 800846a:	f7fa ff9f 	bl	80033ac <__aeabi_dcmplt>
 800846e:	2800      	cmp	r0, #0
 8008470:	d07c      	beq.n	800856c <_dtoa_r+0x4b4>
 8008472:	f1b9 0f00 	cmp.w	r9, #0
 8008476:	d079      	beq.n	800856c <_dtoa_r+0x4b4>
 8008478:	9b02      	ldr	r3, [sp, #8]
 800847a:	2b00      	cmp	r3, #0
 800847c:	dd35      	ble.n	80084ea <_dtoa_r+0x432>
 800847e:	f10a 33ff 	add.w	r3, sl, #4294967295
 8008482:	9308      	str	r3, [sp, #32]
 8008484:	4639      	mov	r1, r7
 8008486:	2200      	movs	r2, #0
 8008488:	4b8b      	ldr	r3, [pc, #556]	; (80086b8 <_dtoa_r+0x600>)
 800848a:	4630      	mov	r0, r6
 800848c:	f7fa fd1c 	bl	8002ec8 <__aeabi_dmul>
 8008490:	e9cd 0100 	strd	r0, r1, [sp]
 8008494:	9f02      	ldr	r7, [sp, #8]
 8008496:	3501      	adds	r5, #1
 8008498:	4628      	mov	r0, r5
 800849a:	f7fa fcab 	bl	8002df4 <__aeabi_i2d>
 800849e:	e9dd 2300 	ldrd	r2, r3, [sp]
 80084a2:	f7fa fd11 	bl	8002ec8 <__aeabi_dmul>
 80084a6:	2200      	movs	r2, #0
 80084a8:	4b84      	ldr	r3, [pc, #528]	; (80086bc <_dtoa_r+0x604>)
 80084aa:	f7fa fb57 	bl	8002b5c <__adddf3>
 80084ae:	4605      	mov	r5, r0
 80084b0:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80084b4:	2f00      	cmp	r7, #0
 80084b6:	d15d      	bne.n	8008574 <_dtoa_r+0x4bc>
 80084b8:	2200      	movs	r2, #0
 80084ba:	4b81      	ldr	r3, [pc, #516]	; (80086c0 <_dtoa_r+0x608>)
 80084bc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80084c0:	f7fa fb4a 	bl	8002b58 <__aeabi_dsub>
 80084c4:	462a      	mov	r2, r5
 80084c6:	4633      	mov	r3, r6
 80084c8:	e9cd 0100 	strd	r0, r1, [sp]
 80084cc:	f7fa ff8c 	bl	80033e8 <__aeabi_dcmpgt>
 80084d0:	2800      	cmp	r0, #0
 80084d2:	f040 8288 	bne.w	80089e6 <_dtoa_r+0x92e>
 80084d6:	462a      	mov	r2, r5
 80084d8:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 80084dc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80084e0:	f7fa ff64 	bl	80033ac <__aeabi_dcmplt>
 80084e4:	2800      	cmp	r0, #0
 80084e6:	f040 827c 	bne.w	80089e2 <_dtoa_r+0x92a>
 80084ea:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80084ee:	e9cd 2300 	strd	r2, r3, [sp]
 80084f2:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	f2c0 8150 	blt.w	800879a <_dtoa_r+0x6e2>
 80084fa:	f1ba 0f0e 	cmp.w	sl, #14
 80084fe:	f300 814c 	bgt.w	800879a <_dtoa_r+0x6e2>
 8008502:	4b6a      	ldr	r3, [pc, #424]	; (80086ac <_dtoa_r+0x5f4>)
 8008504:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 8008508:	ed93 7b00 	vldr	d7, [r3]
 800850c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800850e:	2b00      	cmp	r3, #0
 8008510:	ed8d 7b02 	vstr	d7, [sp, #8]
 8008514:	f280 80d8 	bge.w	80086c8 <_dtoa_r+0x610>
 8008518:	f1b9 0f00 	cmp.w	r9, #0
 800851c:	f300 80d4 	bgt.w	80086c8 <_dtoa_r+0x610>
 8008520:	f040 825e 	bne.w	80089e0 <_dtoa_r+0x928>
 8008524:	2200      	movs	r2, #0
 8008526:	4b66      	ldr	r3, [pc, #408]	; (80086c0 <_dtoa_r+0x608>)
 8008528:	ec51 0b17 	vmov	r0, r1, d7
 800852c:	f7fa fccc 	bl	8002ec8 <__aeabi_dmul>
 8008530:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008534:	f7fa ff4e 	bl	80033d4 <__aeabi_dcmpge>
 8008538:	464f      	mov	r7, r9
 800853a:	464e      	mov	r6, r9
 800853c:	2800      	cmp	r0, #0
 800853e:	f040 8234 	bne.w	80089aa <_dtoa_r+0x8f2>
 8008542:	2331      	movs	r3, #49	; 0x31
 8008544:	f10b 0501 	add.w	r5, fp, #1
 8008548:	f88b 3000 	strb.w	r3, [fp]
 800854c:	f10a 0a01 	add.w	sl, sl, #1
 8008550:	e22f      	b.n	80089b2 <_dtoa_r+0x8fa>
 8008552:	07f2      	lsls	r2, r6, #31
 8008554:	d505      	bpl.n	8008562 <_dtoa_r+0x4aa>
 8008556:	e9d7 2300 	ldrd	r2, r3, [r7]
 800855a:	f7fa fcb5 	bl	8002ec8 <__aeabi_dmul>
 800855e:	3501      	adds	r5, #1
 8008560:	2301      	movs	r3, #1
 8008562:	1076      	asrs	r6, r6, #1
 8008564:	3708      	adds	r7, #8
 8008566:	e772      	b.n	800844e <_dtoa_r+0x396>
 8008568:	2502      	movs	r5, #2
 800856a:	e774      	b.n	8008456 <_dtoa_r+0x39e>
 800856c:	f8cd a020 	str.w	sl, [sp, #32]
 8008570:	464f      	mov	r7, r9
 8008572:	e791      	b.n	8008498 <_dtoa_r+0x3e0>
 8008574:	4b4d      	ldr	r3, [pc, #308]	; (80086ac <_dtoa_r+0x5f4>)
 8008576:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800857a:	e953 0102 	ldrd	r0, r1, [r3, #-8]
 800857e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008580:	2b00      	cmp	r3, #0
 8008582:	d047      	beq.n	8008614 <_dtoa_r+0x55c>
 8008584:	4602      	mov	r2, r0
 8008586:	460b      	mov	r3, r1
 8008588:	2000      	movs	r0, #0
 800858a:	494e      	ldr	r1, [pc, #312]	; (80086c4 <_dtoa_r+0x60c>)
 800858c:	f7fa fdc6 	bl	800311c <__aeabi_ddiv>
 8008590:	462a      	mov	r2, r5
 8008592:	4633      	mov	r3, r6
 8008594:	f7fa fae0 	bl	8002b58 <__aeabi_dsub>
 8008598:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 800859c:	465d      	mov	r5, fp
 800859e:	e9dd 0100 	ldrd	r0, r1, [sp]
 80085a2:	f7fa ff41 	bl	8003428 <__aeabi_d2iz>
 80085a6:	4606      	mov	r6, r0
 80085a8:	f7fa fc24 	bl	8002df4 <__aeabi_i2d>
 80085ac:	4602      	mov	r2, r0
 80085ae:	460b      	mov	r3, r1
 80085b0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80085b4:	f7fa fad0 	bl	8002b58 <__aeabi_dsub>
 80085b8:	3630      	adds	r6, #48	; 0x30
 80085ba:	f805 6b01 	strb.w	r6, [r5], #1
 80085be:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80085c2:	e9cd 0100 	strd	r0, r1, [sp]
 80085c6:	f7fa fef1 	bl	80033ac <__aeabi_dcmplt>
 80085ca:	2800      	cmp	r0, #0
 80085cc:	d163      	bne.n	8008696 <_dtoa_r+0x5de>
 80085ce:	e9dd 2300 	ldrd	r2, r3, [sp]
 80085d2:	2000      	movs	r0, #0
 80085d4:	4937      	ldr	r1, [pc, #220]	; (80086b4 <_dtoa_r+0x5fc>)
 80085d6:	f7fa fabf 	bl	8002b58 <__aeabi_dsub>
 80085da:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 80085de:	f7fa fee5 	bl	80033ac <__aeabi_dcmplt>
 80085e2:	2800      	cmp	r0, #0
 80085e4:	f040 80b7 	bne.w	8008756 <_dtoa_r+0x69e>
 80085e8:	eba5 030b 	sub.w	r3, r5, fp
 80085ec:	429f      	cmp	r7, r3
 80085ee:	f77f af7c 	ble.w	80084ea <_dtoa_r+0x432>
 80085f2:	2200      	movs	r2, #0
 80085f4:	4b30      	ldr	r3, [pc, #192]	; (80086b8 <_dtoa_r+0x600>)
 80085f6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80085fa:	f7fa fc65 	bl	8002ec8 <__aeabi_dmul>
 80085fe:	2200      	movs	r2, #0
 8008600:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8008604:	4b2c      	ldr	r3, [pc, #176]	; (80086b8 <_dtoa_r+0x600>)
 8008606:	e9dd 0100 	ldrd	r0, r1, [sp]
 800860a:	f7fa fc5d 	bl	8002ec8 <__aeabi_dmul>
 800860e:	e9cd 0100 	strd	r0, r1, [sp]
 8008612:	e7c4      	b.n	800859e <_dtoa_r+0x4e6>
 8008614:	462a      	mov	r2, r5
 8008616:	4633      	mov	r3, r6
 8008618:	f7fa fc56 	bl	8002ec8 <__aeabi_dmul>
 800861c:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
 8008620:	eb0b 0507 	add.w	r5, fp, r7
 8008624:	465e      	mov	r6, fp
 8008626:	e9dd 0100 	ldrd	r0, r1, [sp]
 800862a:	f7fa fefd 	bl	8003428 <__aeabi_d2iz>
 800862e:	4607      	mov	r7, r0
 8008630:	f7fa fbe0 	bl	8002df4 <__aeabi_i2d>
 8008634:	3730      	adds	r7, #48	; 0x30
 8008636:	4602      	mov	r2, r0
 8008638:	460b      	mov	r3, r1
 800863a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800863e:	f7fa fa8b 	bl	8002b58 <__aeabi_dsub>
 8008642:	f806 7b01 	strb.w	r7, [r6], #1
 8008646:	42ae      	cmp	r6, r5
 8008648:	e9cd 0100 	strd	r0, r1, [sp]
 800864c:	f04f 0200 	mov.w	r2, #0
 8008650:	d126      	bne.n	80086a0 <_dtoa_r+0x5e8>
 8008652:	4b1c      	ldr	r3, [pc, #112]	; (80086c4 <_dtoa_r+0x60c>)
 8008654:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8008658:	f7fa fa80 	bl	8002b5c <__adddf3>
 800865c:	4602      	mov	r2, r0
 800865e:	460b      	mov	r3, r1
 8008660:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008664:	f7fa fec0 	bl	80033e8 <__aeabi_dcmpgt>
 8008668:	2800      	cmp	r0, #0
 800866a:	d174      	bne.n	8008756 <_dtoa_r+0x69e>
 800866c:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8008670:	2000      	movs	r0, #0
 8008672:	4914      	ldr	r1, [pc, #80]	; (80086c4 <_dtoa_r+0x60c>)
 8008674:	f7fa fa70 	bl	8002b58 <__aeabi_dsub>
 8008678:	4602      	mov	r2, r0
 800867a:	460b      	mov	r3, r1
 800867c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8008680:	f7fa fe94 	bl	80033ac <__aeabi_dcmplt>
 8008684:	2800      	cmp	r0, #0
 8008686:	f43f af30 	beq.w	80084ea <_dtoa_r+0x432>
 800868a:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800868e:	2b30      	cmp	r3, #48	; 0x30
 8008690:	f105 32ff 	add.w	r2, r5, #4294967295
 8008694:	d002      	beq.n	800869c <_dtoa_r+0x5e4>
 8008696:	f8dd a020 	ldr.w	sl, [sp, #32]
 800869a:	e04a      	b.n	8008732 <_dtoa_r+0x67a>
 800869c:	4615      	mov	r5, r2
 800869e:	e7f4      	b.n	800868a <_dtoa_r+0x5d2>
 80086a0:	4b05      	ldr	r3, [pc, #20]	; (80086b8 <_dtoa_r+0x600>)
 80086a2:	f7fa fc11 	bl	8002ec8 <__aeabi_dmul>
 80086a6:	e9cd 0100 	strd	r0, r1, [sp]
 80086aa:	e7bc      	b.n	8008626 <_dtoa_r+0x56e>
 80086ac:	08023340 	.word	0x08023340
 80086b0:	08023318 	.word	0x08023318
 80086b4:	3ff00000 	.word	0x3ff00000
 80086b8:	40240000 	.word	0x40240000
 80086bc:	401c0000 	.word	0x401c0000
 80086c0:	40140000 	.word	0x40140000
 80086c4:	3fe00000 	.word	0x3fe00000
 80086c8:	e9dd 6700 	ldrd	r6, r7, [sp]
 80086cc:	465d      	mov	r5, fp
 80086ce:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80086d2:	4630      	mov	r0, r6
 80086d4:	4639      	mov	r1, r7
 80086d6:	f7fa fd21 	bl	800311c <__aeabi_ddiv>
 80086da:	f7fa fea5 	bl	8003428 <__aeabi_d2iz>
 80086de:	4680      	mov	r8, r0
 80086e0:	f7fa fb88 	bl	8002df4 <__aeabi_i2d>
 80086e4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80086e8:	f7fa fbee 	bl	8002ec8 <__aeabi_dmul>
 80086ec:	4602      	mov	r2, r0
 80086ee:	460b      	mov	r3, r1
 80086f0:	4630      	mov	r0, r6
 80086f2:	4639      	mov	r1, r7
 80086f4:	f108 0630 	add.w	r6, r8, #48	; 0x30
 80086f8:	f7fa fa2e 	bl	8002b58 <__aeabi_dsub>
 80086fc:	f805 6b01 	strb.w	r6, [r5], #1
 8008700:	eba5 060b 	sub.w	r6, r5, fp
 8008704:	45b1      	cmp	r9, r6
 8008706:	4602      	mov	r2, r0
 8008708:	460b      	mov	r3, r1
 800870a:	d139      	bne.n	8008780 <_dtoa_r+0x6c8>
 800870c:	f7fa fa26 	bl	8002b5c <__adddf3>
 8008710:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008714:	4606      	mov	r6, r0
 8008716:	460f      	mov	r7, r1
 8008718:	f7fa fe66 	bl	80033e8 <__aeabi_dcmpgt>
 800871c:	b9c8      	cbnz	r0, 8008752 <_dtoa_r+0x69a>
 800871e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008722:	4630      	mov	r0, r6
 8008724:	4639      	mov	r1, r7
 8008726:	f7fa fe37 	bl	8003398 <__aeabi_dcmpeq>
 800872a:	b110      	cbz	r0, 8008732 <_dtoa_r+0x67a>
 800872c:	f018 0f01 	tst.w	r8, #1
 8008730:	d10f      	bne.n	8008752 <_dtoa_r+0x69a>
 8008732:	9904      	ldr	r1, [sp, #16]
 8008734:	4620      	mov	r0, r4
 8008736:	f000 fc99 	bl	800906c <_Bfree>
 800873a:	2300      	movs	r3, #0
 800873c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800873e:	702b      	strb	r3, [r5, #0]
 8008740:	f10a 0301 	add.w	r3, sl, #1
 8008744:	6013      	str	r3, [r2, #0]
 8008746:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008748:	2b00      	cmp	r3, #0
 800874a:	f000 8241 	beq.w	8008bd0 <_dtoa_r+0xb18>
 800874e:	601d      	str	r5, [r3, #0]
 8008750:	e23e      	b.n	8008bd0 <_dtoa_r+0xb18>
 8008752:	f8cd a020 	str.w	sl, [sp, #32]
 8008756:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800875a:	2a39      	cmp	r2, #57	; 0x39
 800875c:	f105 33ff 	add.w	r3, r5, #4294967295
 8008760:	d108      	bne.n	8008774 <_dtoa_r+0x6bc>
 8008762:	459b      	cmp	fp, r3
 8008764:	d10a      	bne.n	800877c <_dtoa_r+0x6c4>
 8008766:	9b08      	ldr	r3, [sp, #32]
 8008768:	3301      	adds	r3, #1
 800876a:	9308      	str	r3, [sp, #32]
 800876c:	2330      	movs	r3, #48	; 0x30
 800876e:	f88b 3000 	strb.w	r3, [fp]
 8008772:	465b      	mov	r3, fp
 8008774:	781a      	ldrb	r2, [r3, #0]
 8008776:	3201      	adds	r2, #1
 8008778:	701a      	strb	r2, [r3, #0]
 800877a:	e78c      	b.n	8008696 <_dtoa_r+0x5de>
 800877c:	461d      	mov	r5, r3
 800877e:	e7ea      	b.n	8008756 <_dtoa_r+0x69e>
 8008780:	2200      	movs	r2, #0
 8008782:	4b9b      	ldr	r3, [pc, #620]	; (80089f0 <_dtoa_r+0x938>)
 8008784:	f7fa fba0 	bl	8002ec8 <__aeabi_dmul>
 8008788:	2200      	movs	r2, #0
 800878a:	2300      	movs	r3, #0
 800878c:	4606      	mov	r6, r0
 800878e:	460f      	mov	r7, r1
 8008790:	f7fa fe02 	bl	8003398 <__aeabi_dcmpeq>
 8008794:	2800      	cmp	r0, #0
 8008796:	d09a      	beq.n	80086ce <_dtoa_r+0x616>
 8008798:	e7cb      	b.n	8008732 <_dtoa_r+0x67a>
 800879a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800879c:	2a00      	cmp	r2, #0
 800879e:	f000 808b 	beq.w	80088b8 <_dtoa_r+0x800>
 80087a2:	9a06      	ldr	r2, [sp, #24]
 80087a4:	2a01      	cmp	r2, #1
 80087a6:	dc6e      	bgt.n	8008886 <_dtoa_r+0x7ce>
 80087a8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80087aa:	2a00      	cmp	r2, #0
 80087ac:	d067      	beq.n	800887e <_dtoa_r+0x7c6>
 80087ae:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80087b2:	9f07      	ldr	r7, [sp, #28]
 80087b4:	9d05      	ldr	r5, [sp, #20]
 80087b6:	9a05      	ldr	r2, [sp, #20]
 80087b8:	2101      	movs	r1, #1
 80087ba:	441a      	add	r2, r3
 80087bc:	4620      	mov	r0, r4
 80087be:	9205      	str	r2, [sp, #20]
 80087c0:	4498      	add	r8, r3
 80087c2:	f000 fcf3 	bl	80091ac <__i2b>
 80087c6:	4606      	mov	r6, r0
 80087c8:	2d00      	cmp	r5, #0
 80087ca:	dd0c      	ble.n	80087e6 <_dtoa_r+0x72e>
 80087cc:	f1b8 0f00 	cmp.w	r8, #0
 80087d0:	dd09      	ble.n	80087e6 <_dtoa_r+0x72e>
 80087d2:	4545      	cmp	r5, r8
 80087d4:	9a05      	ldr	r2, [sp, #20]
 80087d6:	462b      	mov	r3, r5
 80087d8:	bfa8      	it	ge
 80087da:	4643      	movge	r3, r8
 80087dc:	1ad2      	subs	r2, r2, r3
 80087de:	9205      	str	r2, [sp, #20]
 80087e0:	1aed      	subs	r5, r5, r3
 80087e2:	eba8 0803 	sub.w	r8, r8, r3
 80087e6:	9b07      	ldr	r3, [sp, #28]
 80087e8:	b1eb      	cbz	r3, 8008826 <_dtoa_r+0x76e>
 80087ea:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d067      	beq.n	80088c0 <_dtoa_r+0x808>
 80087f0:	b18f      	cbz	r7, 8008816 <_dtoa_r+0x75e>
 80087f2:	4631      	mov	r1, r6
 80087f4:	463a      	mov	r2, r7
 80087f6:	4620      	mov	r0, r4
 80087f8:	f000 fd78 	bl	80092ec <__pow5mult>
 80087fc:	9a04      	ldr	r2, [sp, #16]
 80087fe:	4601      	mov	r1, r0
 8008800:	4606      	mov	r6, r0
 8008802:	4620      	mov	r0, r4
 8008804:	f000 fcdb 	bl	80091be <__multiply>
 8008808:	9904      	ldr	r1, [sp, #16]
 800880a:	9008      	str	r0, [sp, #32]
 800880c:	4620      	mov	r0, r4
 800880e:	f000 fc2d 	bl	800906c <_Bfree>
 8008812:	9b08      	ldr	r3, [sp, #32]
 8008814:	9304      	str	r3, [sp, #16]
 8008816:	9b07      	ldr	r3, [sp, #28]
 8008818:	1bda      	subs	r2, r3, r7
 800881a:	d004      	beq.n	8008826 <_dtoa_r+0x76e>
 800881c:	9904      	ldr	r1, [sp, #16]
 800881e:	4620      	mov	r0, r4
 8008820:	f000 fd64 	bl	80092ec <__pow5mult>
 8008824:	9004      	str	r0, [sp, #16]
 8008826:	2101      	movs	r1, #1
 8008828:	4620      	mov	r0, r4
 800882a:	f000 fcbf 	bl	80091ac <__i2b>
 800882e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008830:	4607      	mov	r7, r0
 8008832:	2b00      	cmp	r3, #0
 8008834:	f000 81d0 	beq.w	8008bd8 <_dtoa_r+0xb20>
 8008838:	461a      	mov	r2, r3
 800883a:	4601      	mov	r1, r0
 800883c:	4620      	mov	r0, r4
 800883e:	f000 fd55 	bl	80092ec <__pow5mult>
 8008842:	9b06      	ldr	r3, [sp, #24]
 8008844:	2b01      	cmp	r3, #1
 8008846:	4607      	mov	r7, r0
 8008848:	dc40      	bgt.n	80088cc <_dtoa_r+0x814>
 800884a:	9b00      	ldr	r3, [sp, #0]
 800884c:	2b00      	cmp	r3, #0
 800884e:	d139      	bne.n	80088c4 <_dtoa_r+0x80c>
 8008850:	9b01      	ldr	r3, [sp, #4]
 8008852:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008856:	2b00      	cmp	r3, #0
 8008858:	d136      	bne.n	80088c8 <_dtoa_r+0x810>
 800885a:	9b01      	ldr	r3, [sp, #4]
 800885c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008860:	0d1b      	lsrs	r3, r3, #20
 8008862:	051b      	lsls	r3, r3, #20
 8008864:	b12b      	cbz	r3, 8008872 <_dtoa_r+0x7ba>
 8008866:	9b05      	ldr	r3, [sp, #20]
 8008868:	3301      	adds	r3, #1
 800886a:	9305      	str	r3, [sp, #20]
 800886c:	f108 0801 	add.w	r8, r8, #1
 8008870:	2301      	movs	r3, #1
 8008872:	9307      	str	r3, [sp, #28]
 8008874:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008876:	2b00      	cmp	r3, #0
 8008878:	d12a      	bne.n	80088d0 <_dtoa_r+0x818>
 800887a:	2001      	movs	r0, #1
 800887c:	e030      	b.n	80088e0 <_dtoa_r+0x828>
 800887e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8008880:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8008884:	e795      	b.n	80087b2 <_dtoa_r+0x6fa>
 8008886:	9b07      	ldr	r3, [sp, #28]
 8008888:	f109 37ff 	add.w	r7, r9, #4294967295
 800888c:	42bb      	cmp	r3, r7
 800888e:	bfbf      	itttt	lt
 8008890:	9b07      	ldrlt	r3, [sp, #28]
 8008892:	9707      	strlt	r7, [sp, #28]
 8008894:	1afa      	sublt	r2, r7, r3
 8008896:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8008898:	bfbb      	ittet	lt
 800889a:	189b      	addlt	r3, r3, r2
 800889c:	930e      	strlt	r3, [sp, #56]	; 0x38
 800889e:	1bdf      	subge	r7, r3, r7
 80088a0:	2700      	movlt	r7, #0
 80088a2:	f1b9 0f00 	cmp.w	r9, #0
 80088a6:	bfb5      	itete	lt
 80088a8:	9b05      	ldrlt	r3, [sp, #20]
 80088aa:	9d05      	ldrge	r5, [sp, #20]
 80088ac:	eba3 0509 	sublt.w	r5, r3, r9
 80088b0:	464b      	movge	r3, r9
 80088b2:	bfb8      	it	lt
 80088b4:	2300      	movlt	r3, #0
 80088b6:	e77e      	b.n	80087b6 <_dtoa_r+0x6fe>
 80088b8:	9f07      	ldr	r7, [sp, #28]
 80088ba:	9d05      	ldr	r5, [sp, #20]
 80088bc:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 80088be:	e783      	b.n	80087c8 <_dtoa_r+0x710>
 80088c0:	9a07      	ldr	r2, [sp, #28]
 80088c2:	e7ab      	b.n	800881c <_dtoa_r+0x764>
 80088c4:	2300      	movs	r3, #0
 80088c6:	e7d4      	b.n	8008872 <_dtoa_r+0x7ba>
 80088c8:	9b00      	ldr	r3, [sp, #0]
 80088ca:	e7d2      	b.n	8008872 <_dtoa_r+0x7ba>
 80088cc:	2300      	movs	r3, #0
 80088ce:	9307      	str	r3, [sp, #28]
 80088d0:	693b      	ldr	r3, [r7, #16]
 80088d2:	eb07 0383 	add.w	r3, r7, r3, lsl #2
 80088d6:	6918      	ldr	r0, [r3, #16]
 80088d8:	f000 fc1a 	bl	8009110 <__hi0bits>
 80088dc:	f1c0 0020 	rsb	r0, r0, #32
 80088e0:	4440      	add	r0, r8
 80088e2:	f010 001f 	ands.w	r0, r0, #31
 80088e6:	d047      	beq.n	8008978 <_dtoa_r+0x8c0>
 80088e8:	f1c0 0320 	rsb	r3, r0, #32
 80088ec:	2b04      	cmp	r3, #4
 80088ee:	dd3b      	ble.n	8008968 <_dtoa_r+0x8b0>
 80088f0:	9b05      	ldr	r3, [sp, #20]
 80088f2:	f1c0 001c 	rsb	r0, r0, #28
 80088f6:	4403      	add	r3, r0
 80088f8:	9305      	str	r3, [sp, #20]
 80088fa:	4405      	add	r5, r0
 80088fc:	4480      	add	r8, r0
 80088fe:	9b05      	ldr	r3, [sp, #20]
 8008900:	2b00      	cmp	r3, #0
 8008902:	dd05      	ble.n	8008910 <_dtoa_r+0x858>
 8008904:	461a      	mov	r2, r3
 8008906:	9904      	ldr	r1, [sp, #16]
 8008908:	4620      	mov	r0, r4
 800890a:	f000 fd3d 	bl	8009388 <__lshift>
 800890e:	9004      	str	r0, [sp, #16]
 8008910:	f1b8 0f00 	cmp.w	r8, #0
 8008914:	dd05      	ble.n	8008922 <_dtoa_r+0x86a>
 8008916:	4639      	mov	r1, r7
 8008918:	4642      	mov	r2, r8
 800891a:	4620      	mov	r0, r4
 800891c:	f000 fd34 	bl	8009388 <__lshift>
 8008920:	4607      	mov	r7, r0
 8008922:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8008924:	b353      	cbz	r3, 800897c <_dtoa_r+0x8c4>
 8008926:	4639      	mov	r1, r7
 8008928:	9804      	ldr	r0, [sp, #16]
 800892a:	f000 fd81 	bl	8009430 <__mcmp>
 800892e:	2800      	cmp	r0, #0
 8008930:	da24      	bge.n	800897c <_dtoa_r+0x8c4>
 8008932:	2300      	movs	r3, #0
 8008934:	220a      	movs	r2, #10
 8008936:	9904      	ldr	r1, [sp, #16]
 8008938:	4620      	mov	r0, r4
 800893a:	f000 fbae 	bl	800909a <__multadd>
 800893e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008940:	9004      	str	r0, [sp, #16]
 8008942:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008946:	2b00      	cmp	r3, #0
 8008948:	f000 814d 	beq.w	8008be6 <_dtoa_r+0xb2e>
 800894c:	2300      	movs	r3, #0
 800894e:	4631      	mov	r1, r6
 8008950:	220a      	movs	r2, #10
 8008952:	4620      	mov	r0, r4
 8008954:	f000 fba1 	bl	800909a <__multadd>
 8008958:	9b02      	ldr	r3, [sp, #8]
 800895a:	2b00      	cmp	r3, #0
 800895c:	4606      	mov	r6, r0
 800895e:	dc4f      	bgt.n	8008a00 <_dtoa_r+0x948>
 8008960:	9b06      	ldr	r3, [sp, #24]
 8008962:	2b02      	cmp	r3, #2
 8008964:	dd4c      	ble.n	8008a00 <_dtoa_r+0x948>
 8008966:	e011      	b.n	800898c <_dtoa_r+0x8d4>
 8008968:	d0c9      	beq.n	80088fe <_dtoa_r+0x846>
 800896a:	9a05      	ldr	r2, [sp, #20]
 800896c:	331c      	adds	r3, #28
 800896e:	441a      	add	r2, r3
 8008970:	9205      	str	r2, [sp, #20]
 8008972:	441d      	add	r5, r3
 8008974:	4498      	add	r8, r3
 8008976:	e7c2      	b.n	80088fe <_dtoa_r+0x846>
 8008978:	4603      	mov	r3, r0
 800897a:	e7f6      	b.n	800896a <_dtoa_r+0x8b2>
 800897c:	f1b9 0f00 	cmp.w	r9, #0
 8008980:	dc38      	bgt.n	80089f4 <_dtoa_r+0x93c>
 8008982:	9b06      	ldr	r3, [sp, #24]
 8008984:	2b02      	cmp	r3, #2
 8008986:	dd35      	ble.n	80089f4 <_dtoa_r+0x93c>
 8008988:	f8cd 9008 	str.w	r9, [sp, #8]
 800898c:	9b02      	ldr	r3, [sp, #8]
 800898e:	b963      	cbnz	r3, 80089aa <_dtoa_r+0x8f2>
 8008990:	4639      	mov	r1, r7
 8008992:	2205      	movs	r2, #5
 8008994:	4620      	mov	r0, r4
 8008996:	f000 fb80 	bl	800909a <__multadd>
 800899a:	4601      	mov	r1, r0
 800899c:	4607      	mov	r7, r0
 800899e:	9804      	ldr	r0, [sp, #16]
 80089a0:	f000 fd46 	bl	8009430 <__mcmp>
 80089a4:	2800      	cmp	r0, #0
 80089a6:	f73f adcc 	bgt.w	8008542 <_dtoa_r+0x48a>
 80089aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80089ac:	465d      	mov	r5, fp
 80089ae:	ea6f 0a03 	mvn.w	sl, r3
 80089b2:	f04f 0900 	mov.w	r9, #0
 80089b6:	4639      	mov	r1, r7
 80089b8:	4620      	mov	r0, r4
 80089ba:	f000 fb57 	bl	800906c <_Bfree>
 80089be:	2e00      	cmp	r6, #0
 80089c0:	f43f aeb7 	beq.w	8008732 <_dtoa_r+0x67a>
 80089c4:	f1b9 0f00 	cmp.w	r9, #0
 80089c8:	d005      	beq.n	80089d6 <_dtoa_r+0x91e>
 80089ca:	45b1      	cmp	r9, r6
 80089cc:	d003      	beq.n	80089d6 <_dtoa_r+0x91e>
 80089ce:	4649      	mov	r1, r9
 80089d0:	4620      	mov	r0, r4
 80089d2:	f000 fb4b 	bl	800906c <_Bfree>
 80089d6:	4631      	mov	r1, r6
 80089d8:	4620      	mov	r0, r4
 80089da:	f000 fb47 	bl	800906c <_Bfree>
 80089de:	e6a8      	b.n	8008732 <_dtoa_r+0x67a>
 80089e0:	2700      	movs	r7, #0
 80089e2:	463e      	mov	r6, r7
 80089e4:	e7e1      	b.n	80089aa <_dtoa_r+0x8f2>
 80089e6:	f8dd a020 	ldr.w	sl, [sp, #32]
 80089ea:	463e      	mov	r6, r7
 80089ec:	e5a9      	b.n	8008542 <_dtoa_r+0x48a>
 80089ee:	bf00      	nop
 80089f0:	40240000 	.word	0x40240000
 80089f4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80089f6:	f8cd 9008 	str.w	r9, [sp, #8]
 80089fa:	2b00      	cmp	r3, #0
 80089fc:	f000 80fa 	beq.w	8008bf4 <_dtoa_r+0xb3c>
 8008a00:	2d00      	cmp	r5, #0
 8008a02:	dd05      	ble.n	8008a10 <_dtoa_r+0x958>
 8008a04:	4631      	mov	r1, r6
 8008a06:	462a      	mov	r2, r5
 8008a08:	4620      	mov	r0, r4
 8008a0a:	f000 fcbd 	bl	8009388 <__lshift>
 8008a0e:	4606      	mov	r6, r0
 8008a10:	9b07      	ldr	r3, [sp, #28]
 8008a12:	2b00      	cmp	r3, #0
 8008a14:	d04c      	beq.n	8008ab0 <_dtoa_r+0x9f8>
 8008a16:	6871      	ldr	r1, [r6, #4]
 8008a18:	4620      	mov	r0, r4
 8008a1a:	f000 faf3 	bl	8009004 <_Balloc>
 8008a1e:	6932      	ldr	r2, [r6, #16]
 8008a20:	3202      	adds	r2, #2
 8008a22:	4605      	mov	r5, r0
 8008a24:	0092      	lsls	r2, r2, #2
 8008a26:	f106 010c 	add.w	r1, r6, #12
 8008a2a:	300c      	adds	r0, #12
 8008a2c:	f7fe fc18 	bl	8007260 <memcpy>
 8008a30:	2201      	movs	r2, #1
 8008a32:	4629      	mov	r1, r5
 8008a34:	4620      	mov	r0, r4
 8008a36:	f000 fca7 	bl	8009388 <__lshift>
 8008a3a:	9b00      	ldr	r3, [sp, #0]
 8008a3c:	f8cd b014 	str.w	fp, [sp, #20]
 8008a40:	f003 0301 	and.w	r3, r3, #1
 8008a44:	46b1      	mov	r9, r6
 8008a46:	9307      	str	r3, [sp, #28]
 8008a48:	4606      	mov	r6, r0
 8008a4a:	4639      	mov	r1, r7
 8008a4c:	9804      	ldr	r0, [sp, #16]
 8008a4e:	f7ff faa5 	bl	8007f9c <quorem>
 8008a52:	4649      	mov	r1, r9
 8008a54:	4605      	mov	r5, r0
 8008a56:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8008a5a:	9804      	ldr	r0, [sp, #16]
 8008a5c:	f000 fce8 	bl	8009430 <__mcmp>
 8008a60:	4632      	mov	r2, r6
 8008a62:	9000      	str	r0, [sp, #0]
 8008a64:	4639      	mov	r1, r7
 8008a66:	4620      	mov	r0, r4
 8008a68:	f000 fcfc 	bl	8009464 <__mdiff>
 8008a6c:	68c3      	ldr	r3, [r0, #12]
 8008a6e:	4602      	mov	r2, r0
 8008a70:	bb03      	cbnz	r3, 8008ab4 <_dtoa_r+0x9fc>
 8008a72:	4601      	mov	r1, r0
 8008a74:	9008      	str	r0, [sp, #32]
 8008a76:	9804      	ldr	r0, [sp, #16]
 8008a78:	f000 fcda 	bl	8009430 <__mcmp>
 8008a7c:	9a08      	ldr	r2, [sp, #32]
 8008a7e:	4603      	mov	r3, r0
 8008a80:	4611      	mov	r1, r2
 8008a82:	4620      	mov	r0, r4
 8008a84:	9308      	str	r3, [sp, #32]
 8008a86:	f000 faf1 	bl	800906c <_Bfree>
 8008a8a:	9b08      	ldr	r3, [sp, #32]
 8008a8c:	b9a3      	cbnz	r3, 8008ab8 <_dtoa_r+0xa00>
 8008a8e:	9a06      	ldr	r2, [sp, #24]
 8008a90:	b992      	cbnz	r2, 8008ab8 <_dtoa_r+0xa00>
 8008a92:	9a07      	ldr	r2, [sp, #28]
 8008a94:	b982      	cbnz	r2, 8008ab8 <_dtoa_r+0xa00>
 8008a96:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8008a9a:	d029      	beq.n	8008af0 <_dtoa_r+0xa38>
 8008a9c:	9b00      	ldr	r3, [sp, #0]
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	dd01      	ble.n	8008aa6 <_dtoa_r+0x9ee>
 8008aa2:	f105 0831 	add.w	r8, r5, #49	; 0x31
 8008aa6:	9b05      	ldr	r3, [sp, #20]
 8008aa8:	1c5d      	adds	r5, r3, #1
 8008aaa:	f883 8000 	strb.w	r8, [r3]
 8008aae:	e782      	b.n	80089b6 <_dtoa_r+0x8fe>
 8008ab0:	4630      	mov	r0, r6
 8008ab2:	e7c2      	b.n	8008a3a <_dtoa_r+0x982>
 8008ab4:	2301      	movs	r3, #1
 8008ab6:	e7e3      	b.n	8008a80 <_dtoa_r+0x9c8>
 8008ab8:	9a00      	ldr	r2, [sp, #0]
 8008aba:	2a00      	cmp	r2, #0
 8008abc:	db04      	blt.n	8008ac8 <_dtoa_r+0xa10>
 8008abe:	d125      	bne.n	8008b0c <_dtoa_r+0xa54>
 8008ac0:	9a06      	ldr	r2, [sp, #24]
 8008ac2:	bb1a      	cbnz	r2, 8008b0c <_dtoa_r+0xa54>
 8008ac4:	9a07      	ldr	r2, [sp, #28]
 8008ac6:	bb0a      	cbnz	r2, 8008b0c <_dtoa_r+0xa54>
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	ddec      	ble.n	8008aa6 <_dtoa_r+0x9ee>
 8008acc:	2201      	movs	r2, #1
 8008ace:	9904      	ldr	r1, [sp, #16]
 8008ad0:	4620      	mov	r0, r4
 8008ad2:	f000 fc59 	bl	8009388 <__lshift>
 8008ad6:	4639      	mov	r1, r7
 8008ad8:	9004      	str	r0, [sp, #16]
 8008ada:	f000 fca9 	bl	8009430 <__mcmp>
 8008ade:	2800      	cmp	r0, #0
 8008ae0:	dc03      	bgt.n	8008aea <_dtoa_r+0xa32>
 8008ae2:	d1e0      	bne.n	8008aa6 <_dtoa_r+0x9ee>
 8008ae4:	f018 0f01 	tst.w	r8, #1
 8008ae8:	d0dd      	beq.n	8008aa6 <_dtoa_r+0x9ee>
 8008aea:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8008aee:	d1d8      	bne.n	8008aa2 <_dtoa_r+0x9ea>
 8008af0:	9b05      	ldr	r3, [sp, #20]
 8008af2:	9a05      	ldr	r2, [sp, #20]
 8008af4:	1c5d      	adds	r5, r3, #1
 8008af6:	2339      	movs	r3, #57	; 0x39
 8008af8:	7013      	strb	r3, [r2, #0]
 8008afa:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008afe:	2b39      	cmp	r3, #57	; 0x39
 8008b00:	f105 32ff 	add.w	r2, r5, #4294967295
 8008b04:	d04f      	beq.n	8008ba6 <_dtoa_r+0xaee>
 8008b06:	3301      	adds	r3, #1
 8008b08:	7013      	strb	r3, [r2, #0]
 8008b0a:	e754      	b.n	80089b6 <_dtoa_r+0x8fe>
 8008b0c:	9a05      	ldr	r2, [sp, #20]
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	f102 0501 	add.w	r5, r2, #1
 8008b14:	dd06      	ble.n	8008b24 <_dtoa_r+0xa6c>
 8008b16:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
 8008b1a:	d0e9      	beq.n	8008af0 <_dtoa_r+0xa38>
 8008b1c:	f108 0801 	add.w	r8, r8, #1
 8008b20:	9b05      	ldr	r3, [sp, #20]
 8008b22:	e7c2      	b.n	8008aaa <_dtoa_r+0x9f2>
 8008b24:	9a02      	ldr	r2, [sp, #8]
 8008b26:	f805 8c01 	strb.w	r8, [r5, #-1]
 8008b2a:	eba5 030b 	sub.w	r3, r5, fp
 8008b2e:	4293      	cmp	r3, r2
 8008b30:	d021      	beq.n	8008b76 <_dtoa_r+0xabe>
 8008b32:	2300      	movs	r3, #0
 8008b34:	220a      	movs	r2, #10
 8008b36:	9904      	ldr	r1, [sp, #16]
 8008b38:	4620      	mov	r0, r4
 8008b3a:	f000 faae 	bl	800909a <__multadd>
 8008b3e:	45b1      	cmp	r9, r6
 8008b40:	9004      	str	r0, [sp, #16]
 8008b42:	f04f 0300 	mov.w	r3, #0
 8008b46:	f04f 020a 	mov.w	r2, #10
 8008b4a:	4649      	mov	r1, r9
 8008b4c:	4620      	mov	r0, r4
 8008b4e:	d105      	bne.n	8008b5c <_dtoa_r+0xaa4>
 8008b50:	f000 faa3 	bl	800909a <__multadd>
 8008b54:	4681      	mov	r9, r0
 8008b56:	4606      	mov	r6, r0
 8008b58:	9505      	str	r5, [sp, #20]
 8008b5a:	e776      	b.n	8008a4a <_dtoa_r+0x992>
 8008b5c:	f000 fa9d 	bl	800909a <__multadd>
 8008b60:	4631      	mov	r1, r6
 8008b62:	4681      	mov	r9, r0
 8008b64:	2300      	movs	r3, #0
 8008b66:	220a      	movs	r2, #10
 8008b68:	4620      	mov	r0, r4
 8008b6a:	f000 fa96 	bl	800909a <__multadd>
 8008b6e:	4606      	mov	r6, r0
 8008b70:	e7f2      	b.n	8008b58 <_dtoa_r+0xaa0>
 8008b72:	f04f 0900 	mov.w	r9, #0
 8008b76:	2201      	movs	r2, #1
 8008b78:	9904      	ldr	r1, [sp, #16]
 8008b7a:	4620      	mov	r0, r4
 8008b7c:	f000 fc04 	bl	8009388 <__lshift>
 8008b80:	4639      	mov	r1, r7
 8008b82:	9004      	str	r0, [sp, #16]
 8008b84:	f000 fc54 	bl	8009430 <__mcmp>
 8008b88:	2800      	cmp	r0, #0
 8008b8a:	dcb6      	bgt.n	8008afa <_dtoa_r+0xa42>
 8008b8c:	d102      	bne.n	8008b94 <_dtoa_r+0xadc>
 8008b8e:	f018 0f01 	tst.w	r8, #1
 8008b92:	d1b2      	bne.n	8008afa <_dtoa_r+0xa42>
 8008b94:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8008b98:	2b30      	cmp	r3, #48	; 0x30
 8008b9a:	f105 32ff 	add.w	r2, r5, #4294967295
 8008b9e:	f47f af0a 	bne.w	80089b6 <_dtoa_r+0x8fe>
 8008ba2:	4615      	mov	r5, r2
 8008ba4:	e7f6      	b.n	8008b94 <_dtoa_r+0xadc>
 8008ba6:	4593      	cmp	fp, r2
 8008ba8:	d105      	bne.n	8008bb6 <_dtoa_r+0xafe>
 8008baa:	2331      	movs	r3, #49	; 0x31
 8008bac:	f10a 0a01 	add.w	sl, sl, #1
 8008bb0:	f88b 3000 	strb.w	r3, [fp]
 8008bb4:	e6ff      	b.n	80089b6 <_dtoa_r+0x8fe>
 8008bb6:	4615      	mov	r5, r2
 8008bb8:	e79f      	b.n	8008afa <_dtoa_r+0xa42>
 8008bba:	f8df b064 	ldr.w	fp, [pc, #100]	; 8008c20 <_dtoa_r+0xb68>
 8008bbe:	e007      	b.n	8008bd0 <_dtoa_r+0xb18>
 8008bc0:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8008bc2:	f8df b060 	ldr.w	fp, [pc, #96]	; 8008c24 <_dtoa_r+0xb6c>
 8008bc6:	b11b      	cbz	r3, 8008bd0 <_dtoa_r+0xb18>
 8008bc8:	f10b 0308 	add.w	r3, fp, #8
 8008bcc:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8008bce:	6013      	str	r3, [r2, #0]
 8008bd0:	4658      	mov	r0, fp
 8008bd2:	b017      	add	sp, #92	; 0x5c
 8008bd4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008bd8:	9b06      	ldr	r3, [sp, #24]
 8008bda:	2b01      	cmp	r3, #1
 8008bdc:	f77f ae35 	ble.w	800884a <_dtoa_r+0x792>
 8008be0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8008be2:	9307      	str	r3, [sp, #28]
 8008be4:	e649      	b.n	800887a <_dtoa_r+0x7c2>
 8008be6:	9b02      	ldr	r3, [sp, #8]
 8008be8:	2b00      	cmp	r3, #0
 8008bea:	dc03      	bgt.n	8008bf4 <_dtoa_r+0xb3c>
 8008bec:	9b06      	ldr	r3, [sp, #24]
 8008bee:	2b02      	cmp	r3, #2
 8008bf0:	f73f aecc 	bgt.w	800898c <_dtoa_r+0x8d4>
 8008bf4:	465d      	mov	r5, fp
 8008bf6:	4639      	mov	r1, r7
 8008bf8:	9804      	ldr	r0, [sp, #16]
 8008bfa:	f7ff f9cf 	bl	8007f9c <quorem>
 8008bfe:	f100 0830 	add.w	r8, r0, #48	; 0x30
 8008c02:	f805 8b01 	strb.w	r8, [r5], #1
 8008c06:	9a02      	ldr	r2, [sp, #8]
 8008c08:	eba5 030b 	sub.w	r3, r5, fp
 8008c0c:	429a      	cmp	r2, r3
 8008c0e:	ddb0      	ble.n	8008b72 <_dtoa_r+0xaba>
 8008c10:	2300      	movs	r3, #0
 8008c12:	220a      	movs	r2, #10
 8008c14:	9904      	ldr	r1, [sp, #16]
 8008c16:	4620      	mov	r0, r4
 8008c18:	f000 fa3f 	bl	800909a <__multadd>
 8008c1c:	9004      	str	r0, [sp, #16]
 8008c1e:	e7ea      	b.n	8008bf6 <_dtoa_r+0xb3e>
 8008c20:	08023280 	.word	0x08023280
 8008c24:	080232a4 	.word	0x080232a4

08008c28 <__sflush_r>:
 8008c28:	898a      	ldrh	r2, [r1, #12]
 8008c2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c2e:	4605      	mov	r5, r0
 8008c30:	0710      	lsls	r0, r2, #28
 8008c32:	460c      	mov	r4, r1
 8008c34:	d458      	bmi.n	8008ce8 <__sflush_r+0xc0>
 8008c36:	684b      	ldr	r3, [r1, #4]
 8008c38:	2b00      	cmp	r3, #0
 8008c3a:	dc05      	bgt.n	8008c48 <__sflush_r+0x20>
 8008c3c:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008c3e:	2b00      	cmp	r3, #0
 8008c40:	dc02      	bgt.n	8008c48 <__sflush_r+0x20>
 8008c42:	2000      	movs	r0, #0
 8008c44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c48:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008c4a:	2e00      	cmp	r6, #0
 8008c4c:	d0f9      	beq.n	8008c42 <__sflush_r+0x1a>
 8008c4e:	2300      	movs	r3, #0
 8008c50:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008c54:	682f      	ldr	r7, [r5, #0]
 8008c56:	6a21      	ldr	r1, [r4, #32]
 8008c58:	602b      	str	r3, [r5, #0]
 8008c5a:	d032      	beq.n	8008cc2 <__sflush_r+0x9a>
 8008c5c:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008c5e:	89a3      	ldrh	r3, [r4, #12]
 8008c60:	075a      	lsls	r2, r3, #29
 8008c62:	d505      	bpl.n	8008c70 <__sflush_r+0x48>
 8008c64:	6863      	ldr	r3, [r4, #4]
 8008c66:	1ac0      	subs	r0, r0, r3
 8008c68:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008c6a:	b10b      	cbz	r3, 8008c70 <__sflush_r+0x48>
 8008c6c:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008c6e:	1ac0      	subs	r0, r0, r3
 8008c70:	2300      	movs	r3, #0
 8008c72:	4602      	mov	r2, r0
 8008c74:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008c76:	6a21      	ldr	r1, [r4, #32]
 8008c78:	4628      	mov	r0, r5
 8008c7a:	47b0      	blx	r6
 8008c7c:	1c43      	adds	r3, r0, #1
 8008c7e:	89a3      	ldrh	r3, [r4, #12]
 8008c80:	d106      	bne.n	8008c90 <__sflush_r+0x68>
 8008c82:	6829      	ldr	r1, [r5, #0]
 8008c84:	291d      	cmp	r1, #29
 8008c86:	d848      	bhi.n	8008d1a <__sflush_r+0xf2>
 8008c88:	4a29      	ldr	r2, [pc, #164]	; (8008d30 <__sflush_r+0x108>)
 8008c8a:	40ca      	lsrs	r2, r1
 8008c8c:	07d6      	lsls	r6, r2, #31
 8008c8e:	d544      	bpl.n	8008d1a <__sflush_r+0xf2>
 8008c90:	2200      	movs	r2, #0
 8008c92:	6062      	str	r2, [r4, #4]
 8008c94:	04d9      	lsls	r1, r3, #19
 8008c96:	6922      	ldr	r2, [r4, #16]
 8008c98:	6022      	str	r2, [r4, #0]
 8008c9a:	d504      	bpl.n	8008ca6 <__sflush_r+0x7e>
 8008c9c:	1c42      	adds	r2, r0, #1
 8008c9e:	d101      	bne.n	8008ca4 <__sflush_r+0x7c>
 8008ca0:	682b      	ldr	r3, [r5, #0]
 8008ca2:	b903      	cbnz	r3, 8008ca6 <__sflush_r+0x7e>
 8008ca4:	6560      	str	r0, [r4, #84]	; 0x54
 8008ca6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008ca8:	602f      	str	r7, [r5, #0]
 8008caa:	2900      	cmp	r1, #0
 8008cac:	d0c9      	beq.n	8008c42 <__sflush_r+0x1a>
 8008cae:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008cb2:	4299      	cmp	r1, r3
 8008cb4:	d002      	beq.n	8008cbc <__sflush_r+0x94>
 8008cb6:	4628      	mov	r0, r5
 8008cb8:	f7fe fb0c 	bl	80072d4 <_free_r>
 8008cbc:	2000      	movs	r0, #0
 8008cbe:	6360      	str	r0, [r4, #52]	; 0x34
 8008cc0:	e7c0      	b.n	8008c44 <__sflush_r+0x1c>
 8008cc2:	2301      	movs	r3, #1
 8008cc4:	4628      	mov	r0, r5
 8008cc6:	47b0      	blx	r6
 8008cc8:	1c41      	adds	r1, r0, #1
 8008cca:	d1c8      	bne.n	8008c5e <__sflush_r+0x36>
 8008ccc:	682b      	ldr	r3, [r5, #0]
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d0c5      	beq.n	8008c5e <__sflush_r+0x36>
 8008cd2:	2b1d      	cmp	r3, #29
 8008cd4:	d001      	beq.n	8008cda <__sflush_r+0xb2>
 8008cd6:	2b16      	cmp	r3, #22
 8008cd8:	d101      	bne.n	8008cde <__sflush_r+0xb6>
 8008cda:	602f      	str	r7, [r5, #0]
 8008cdc:	e7b1      	b.n	8008c42 <__sflush_r+0x1a>
 8008cde:	89a3      	ldrh	r3, [r4, #12]
 8008ce0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008ce4:	81a3      	strh	r3, [r4, #12]
 8008ce6:	e7ad      	b.n	8008c44 <__sflush_r+0x1c>
 8008ce8:	690f      	ldr	r7, [r1, #16]
 8008cea:	2f00      	cmp	r7, #0
 8008cec:	d0a9      	beq.n	8008c42 <__sflush_r+0x1a>
 8008cee:	0793      	lsls	r3, r2, #30
 8008cf0:	680e      	ldr	r6, [r1, #0]
 8008cf2:	bf08      	it	eq
 8008cf4:	694b      	ldreq	r3, [r1, #20]
 8008cf6:	600f      	str	r7, [r1, #0]
 8008cf8:	bf18      	it	ne
 8008cfa:	2300      	movne	r3, #0
 8008cfc:	eba6 0807 	sub.w	r8, r6, r7
 8008d00:	608b      	str	r3, [r1, #8]
 8008d02:	f1b8 0f00 	cmp.w	r8, #0
 8008d06:	dd9c      	ble.n	8008c42 <__sflush_r+0x1a>
 8008d08:	4643      	mov	r3, r8
 8008d0a:	463a      	mov	r2, r7
 8008d0c:	6a21      	ldr	r1, [r4, #32]
 8008d0e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008d10:	4628      	mov	r0, r5
 8008d12:	47b0      	blx	r6
 8008d14:	2800      	cmp	r0, #0
 8008d16:	dc06      	bgt.n	8008d26 <__sflush_r+0xfe>
 8008d18:	89a3      	ldrh	r3, [r4, #12]
 8008d1a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008d1e:	81a3      	strh	r3, [r4, #12]
 8008d20:	f04f 30ff 	mov.w	r0, #4294967295
 8008d24:	e78e      	b.n	8008c44 <__sflush_r+0x1c>
 8008d26:	4407      	add	r7, r0
 8008d28:	eba8 0800 	sub.w	r8, r8, r0
 8008d2c:	e7e9      	b.n	8008d02 <__sflush_r+0xda>
 8008d2e:	bf00      	nop
 8008d30:	20400001 	.word	0x20400001

08008d34 <_fflush_r>:
 8008d34:	b538      	push	{r3, r4, r5, lr}
 8008d36:	690b      	ldr	r3, [r1, #16]
 8008d38:	4605      	mov	r5, r0
 8008d3a:	460c      	mov	r4, r1
 8008d3c:	b1db      	cbz	r3, 8008d76 <_fflush_r+0x42>
 8008d3e:	b118      	cbz	r0, 8008d48 <_fflush_r+0x14>
 8008d40:	6983      	ldr	r3, [r0, #24]
 8008d42:	b90b      	cbnz	r3, 8008d48 <_fflush_r+0x14>
 8008d44:	f000 f860 	bl	8008e08 <__sinit>
 8008d48:	4b0c      	ldr	r3, [pc, #48]	; (8008d7c <_fflush_r+0x48>)
 8008d4a:	429c      	cmp	r4, r3
 8008d4c:	d109      	bne.n	8008d62 <_fflush_r+0x2e>
 8008d4e:	686c      	ldr	r4, [r5, #4]
 8008d50:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008d54:	b17b      	cbz	r3, 8008d76 <_fflush_r+0x42>
 8008d56:	4621      	mov	r1, r4
 8008d58:	4628      	mov	r0, r5
 8008d5a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008d5e:	f7ff bf63 	b.w	8008c28 <__sflush_r>
 8008d62:	4b07      	ldr	r3, [pc, #28]	; (8008d80 <_fflush_r+0x4c>)
 8008d64:	429c      	cmp	r4, r3
 8008d66:	d101      	bne.n	8008d6c <_fflush_r+0x38>
 8008d68:	68ac      	ldr	r4, [r5, #8]
 8008d6a:	e7f1      	b.n	8008d50 <_fflush_r+0x1c>
 8008d6c:	4b05      	ldr	r3, [pc, #20]	; (8008d84 <_fflush_r+0x50>)
 8008d6e:	429c      	cmp	r4, r3
 8008d70:	bf08      	it	eq
 8008d72:	68ec      	ldreq	r4, [r5, #12]
 8008d74:	e7ec      	b.n	8008d50 <_fflush_r+0x1c>
 8008d76:	2000      	movs	r0, #0
 8008d78:	bd38      	pop	{r3, r4, r5, pc}
 8008d7a:	bf00      	nop
 8008d7c:	080232d4 	.word	0x080232d4
 8008d80:	080232f4 	.word	0x080232f4
 8008d84:	080232b4 	.word	0x080232b4

08008d88 <std>:
 8008d88:	2300      	movs	r3, #0
 8008d8a:	b510      	push	{r4, lr}
 8008d8c:	4604      	mov	r4, r0
 8008d8e:	e9c0 3300 	strd	r3, r3, [r0]
 8008d92:	6083      	str	r3, [r0, #8]
 8008d94:	8181      	strh	r1, [r0, #12]
 8008d96:	6643      	str	r3, [r0, #100]	; 0x64
 8008d98:	81c2      	strh	r2, [r0, #14]
 8008d9a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008d9e:	6183      	str	r3, [r0, #24]
 8008da0:	4619      	mov	r1, r3
 8008da2:	2208      	movs	r2, #8
 8008da4:	305c      	adds	r0, #92	; 0x5c
 8008da6:	f7fe fa7f 	bl	80072a8 <memset>
 8008daa:	4b05      	ldr	r3, [pc, #20]	; (8008dc0 <std+0x38>)
 8008dac:	6263      	str	r3, [r4, #36]	; 0x24
 8008dae:	4b05      	ldr	r3, [pc, #20]	; (8008dc4 <std+0x3c>)
 8008db0:	62a3      	str	r3, [r4, #40]	; 0x28
 8008db2:	4b05      	ldr	r3, [pc, #20]	; (8008dc8 <std+0x40>)
 8008db4:	62e3      	str	r3, [r4, #44]	; 0x2c
 8008db6:	4b05      	ldr	r3, [pc, #20]	; (8008dcc <std+0x44>)
 8008db8:	6224      	str	r4, [r4, #32]
 8008dba:	6323      	str	r3, [r4, #48]	; 0x30
 8008dbc:	bd10      	pop	{r4, pc}
 8008dbe:	bf00      	nop
 8008dc0:	080098a9 	.word	0x080098a9
 8008dc4:	080098cb 	.word	0x080098cb
 8008dc8:	08009903 	.word	0x08009903
 8008dcc:	08009927 	.word	0x08009927

08008dd0 <_cleanup_r>:
 8008dd0:	4901      	ldr	r1, [pc, #4]	; (8008dd8 <_cleanup_r+0x8>)
 8008dd2:	f000 b885 	b.w	8008ee0 <_fwalk_reent>
 8008dd6:	bf00      	nop
 8008dd8:	08008d35 	.word	0x08008d35

08008ddc <__sfmoreglue>:
 8008ddc:	b570      	push	{r4, r5, r6, lr}
 8008dde:	1e4a      	subs	r2, r1, #1
 8008de0:	2568      	movs	r5, #104	; 0x68
 8008de2:	4355      	muls	r5, r2
 8008de4:	460e      	mov	r6, r1
 8008de6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8008dea:	f7fe fac1 	bl	8007370 <_malloc_r>
 8008dee:	4604      	mov	r4, r0
 8008df0:	b140      	cbz	r0, 8008e04 <__sfmoreglue+0x28>
 8008df2:	2100      	movs	r1, #0
 8008df4:	e9c0 1600 	strd	r1, r6, [r0]
 8008df8:	300c      	adds	r0, #12
 8008dfa:	60a0      	str	r0, [r4, #8]
 8008dfc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8008e00:	f7fe fa52 	bl	80072a8 <memset>
 8008e04:	4620      	mov	r0, r4
 8008e06:	bd70      	pop	{r4, r5, r6, pc}

08008e08 <__sinit>:
 8008e08:	6983      	ldr	r3, [r0, #24]
 8008e0a:	b510      	push	{r4, lr}
 8008e0c:	4604      	mov	r4, r0
 8008e0e:	bb33      	cbnz	r3, 8008e5e <__sinit+0x56>
 8008e10:	e9c0 3312 	strd	r3, r3, [r0, #72]	; 0x48
 8008e14:	6503      	str	r3, [r0, #80]	; 0x50
 8008e16:	4b12      	ldr	r3, [pc, #72]	; (8008e60 <__sinit+0x58>)
 8008e18:	4a12      	ldr	r2, [pc, #72]	; (8008e64 <__sinit+0x5c>)
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	6282      	str	r2, [r0, #40]	; 0x28
 8008e1e:	4298      	cmp	r0, r3
 8008e20:	bf04      	itt	eq
 8008e22:	2301      	moveq	r3, #1
 8008e24:	6183      	streq	r3, [r0, #24]
 8008e26:	f000 f81f 	bl	8008e68 <__sfp>
 8008e2a:	6060      	str	r0, [r4, #4]
 8008e2c:	4620      	mov	r0, r4
 8008e2e:	f000 f81b 	bl	8008e68 <__sfp>
 8008e32:	60a0      	str	r0, [r4, #8]
 8008e34:	4620      	mov	r0, r4
 8008e36:	f000 f817 	bl	8008e68 <__sfp>
 8008e3a:	2200      	movs	r2, #0
 8008e3c:	60e0      	str	r0, [r4, #12]
 8008e3e:	2104      	movs	r1, #4
 8008e40:	6860      	ldr	r0, [r4, #4]
 8008e42:	f7ff ffa1 	bl	8008d88 <std>
 8008e46:	2201      	movs	r2, #1
 8008e48:	2109      	movs	r1, #9
 8008e4a:	68a0      	ldr	r0, [r4, #8]
 8008e4c:	f7ff ff9c 	bl	8008d88 <std>
 8008e50:	2202      	movs	r2, #2
 8008e52:	2112      	movs	r1, #18
 8008e54:	68e0      	ldr	r0, [r4, #12]
 8008e56:	f7ff ff97 	bl	8008d88 <std>
 8008e5a:	2301      	movs	r3, #1
 8008e5c:	61a3      	str	r3, [r4, #24]
 8008e5e:	bd10      	pop	{r4, pc}
 8008e60:	0802326c 	.word	0x0802326c
 8008e64:	08008dd1 	.word	0x08008dd1

08008e68 <__sfp>:
 8008e68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008e6a:	4b1b      	ldr	r3, [pc, #108]	; (8008ed8 <__sfp+0x70>)
 8008e6c:	681e      	ldr	r6, [r3, #0]
 8008e6e:	69b3      	ldr	r3, [r6, #24]
 8008e70:	4607      	mov	r7, r0
 8008e72:	b913      	cbnz	r3, 8008e7a <__sfp+0x12>
 8008e74:	4630      	mov	r0, r6
 8008e76:	f7ff ffc7 	bl	8008e08 <__sinit>
 8008e7a:	3648      	adds	r6, #72	; 0x48
 8008e7c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8008e80:	3b01      	subs	r3, #1
 8008e82:	d503      	bpl.n	8008e8c <__sfp+0x24>
 8008e84:	6833      	ldr	r3, [r6, #0]
 8008e86:	b133      	cbz	r3, 8008e96 <__sfp+0x2e>
 8008e88:	6836      	ldr	r6, [r6, #0]
 8008e8a:	e7f7      	b.n	8008e7c <__sfp+0x14>
 8008e8c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8008e90:	b16d      	cbz	r5, 8008eae <__sfp+0x46>
 8008e92:	3468      	adds	r4, #104	; 0x68
 8008e94:	e7f4      	b.n	8008e80 <__sfp+0x18>
 8008e96:	2104      	movs	r1, #4
 8008e98:	4638      	mov	r0, r7
 8008e9a:	f7ff ff9f 	bl	8008ddc <__sfmoreglue>
 8008e9e:	6030      	str	r0, [r6, #0]
 8008ea0:	2800      	cmp	r0, #0
 8008ea2:	d1f1      	bne.n	8008e88 <__sfp+0x20>
 8008ea4:	230c      	movs	r3, #12
 8008ea6:	603b      	str	r3, [r7, #0]
 8008ea8:	4604      	mov	r4, r0
 8008eaa:	4620      	mov	r0, r4
 8008eac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008eae:	4b0b      	ldr	r3, [pc, #44]	; (8008edc <__sfp+0x74>)
 8008eb0:	6665      	str	r5, [r4, #100]	; 0x64
 8008eb2:	e9c4 5500 	strd	r5, r5, [r4]
 8008eb6:	60a5      	str	r5, [r4, #8]
 8008eb8:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8008ebc:	e9c4 5505 	strd	r5, r5, [r4, #20]
 8008ec0:	2208      	movs	r2, #8
 8008ec2:	4629      	mov	r1, r5
 8008ec4:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8008ec8:	f7fe f9ee 	bl	80072a8 <memset>
 8008ecc:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8008ed0:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8008ed4:	e7e9      	b.n	8008eaa <__sfp+0x42>
 8008ed6:	bf00      	nop
 8008ed8:	0802326c 	.word	0x0802326c
 8008edc:	ffff0001 	.word	0xffff0001

08008ee0 <_fwalk_reent>:
 8008ee0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008ee4:	4680      	mov	r8, r0
 8008ee6:	4689      	mov	r9, r1
 8008ee8:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8008eec:	2600      	movs	r6, #0
 8008eee:	b914      	cbnz	r4, 8008ef6 <_fwalk_reent+0x16>
 8008ef0:	4630      	mov	r0, r6
 8008ef2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008ef6:	e9d4 7501 	ldrd	r7, r5, [r4, #4]
 8008efa:	3f01      	subs	r7, #1
 8008efc:	d501      	bpl.n	8008f02 <_fwalk_reent+0x22>
 8008efe:	6824      	ldr	r4, [r4, #0]
 8008f00:	e7f5      	b.n	8008eee <_fwalk_reent+0xe>
 8008f02:	89ab      	ldrh	r3, [r5, #12]
 8008f04:	2b01      	cmp	r3, #1
 8008f06:	d907      	bls.n	8008f18 <_fwalk_reent+0x38>
 8008f08:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008f0c:	3301      	adds	r3, #1
 8008f0e:	d003      	beq.n	8008f18 <_fwalk_reent+0x38>
 8008f10:	4629      	mov	r1, r5
 8008f12:	4640      	mov	r0, r8
 8008f14:	47c8      	blx	r9
 8008f16:	4306      	orrs	r6, r0
 8008f18:	3568      	adds	r5, #104	; 0x68
 8008f1a:	e7ee      	b.n	8008efa <_fwalk_reent+0x1a>

08008f1c <_localeconv_r>:
 8008f1c:	4b04      	ldr	r3, [pc, #16]	; (8008f30 <_localeconv_r+0x14>)
 8008f1e:	681b      	ldr	r3, [r3, #0]
 8008f20:	6a18      	ldr	r0, [r3, #32]
 8008f22:	4b04      	ldr	r3, [pc, #16]	; (8008f34 <_localeconv_r+0x18>)
 8008f24:	2800      	cmp	r0, #0
 8008f26:	bf08      	it	eq
 8008f28:	4618      	moveq	r0, r3
 8008f2a:	30f0      	adds	r0, #240	; 0xf0
 8008f2c:	4770      	bx	lr
 8008f2e:	bf00      	nop
 8008f30:	2000000c 	.word	0x2000000c
 8008f34:	20000070 	.word	0x20000070

08008f38 <__swhatbuf_r>:
 8008f38:	b570      	push	{r4, r5, r6, lr}
 8008f3a:	460e      	mov	r6, r1
 8008f3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f40:	2900      	cmp	r1, #0
 8008f42:	b096      	sub	sp, #88	; 0x58
 8008f44:	4614      	mov	r4, r2
 8008f46:	461d      	mov	r5, r3
 8008f48:	da07      	bge.n	8008f5a <__swhatbuf_r+0x22>
 8008f4a:	2300      	movs	r3, #0
 8008f4c:	602b      	str	r3, [r5, #0]
 8008f4e:	89b3      	ldrh	r3, [r6, #12]
 8008f50:	061a      	lsls	r2, r3, #24
 8008f52:	d410      	bmi.n	8008f76 <__swhatbuf_r+0x3e>
 8008f54:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8008f58:	e00e      	b.n	8008f78 <__swhatbuf_r+0x40>
 8008f5a:	466a      	mov	r2, sp
 8008f5c:	f000 fd0a 	bl	8009974 <_fstat_r>
 8008f60:	2800      	cmp	r0, #0
 8008f62:	dbf2      	blt.n	8008f4a <__swhatbuf_r+0x12>
 8008f64:	9a01      	ldr	r2, [sp, #4]
 8008f66:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8008f6a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8008f6e:	425a      	negs	r2, r3
 8008f70:	415a      	adcs	r2, r3
 8008f72:	602a      	str	r2, [r5, #0]
 8008f74:	e7ee      	b.n	8008f54 <__swhatbuf_r+0x1c>
 8008f76:	2340      	movs	r3, #64	; 0x40
 8008f78:	2000      	movs	r0, #0
 8008f7a:	6023      	str	r3, [r4, #0]
 8008f7c:	b016      	add	sp, #88	; 0x58
 8008f7e:	bd70      	pop	{r4, r5, r6, pc}

08008f80 <__smakebuf_r>:
 8008f80:	898b      	ldrh	r3, [r1, #12]
 8008f82:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008f84:	079d      	lsls	r5, r3, #30
 8008f86:	4606      	mov	r6, r0
 8008f88:	460c      	mov	r4, r1
 8008f8a:	d507      	bpl.n	8008f9c <__smakebuf_r+0x1c>
 8008f8c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8008f90:	6023      	str	r3, [r4, #0]
 8008f92:	6123      	str	r3, [r4, #16]
 8008f94:	2301      	movs	r3, #1
 8008f96:	6163      	str	r3, [r4, #20]
 8008f98:	b002      	add	sp, #8
 8008f9a:	bd70      	pop	{r4, r5, r6, pc}
 8008f9c:	ab01      	add	r3, sp, #4
 8008f9e:	466a      	mov	r2, sp
 8008fa0:	f7ff ffca 	bl	8008f38 <__swhatbuf_r>
 8008fa4:	9900      	ldr	r1, [sp, #0]
 8008fa6:	4605      	mov	r5, r0
 8008fa8:	4630      	mov	r0, r6
 8008faa:	f7fe f9e1 	bl	8007370 <_malloc_r>
 8008fae:	b948      	cbnz	r0, 8008fc4 <__smakebuf_r+0x44>
 8008fb0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008fb4:	059a      	lsls	r2, r3, #22
 8008fb6:	d4ef      	bmi.n	8008f98 <__smakebuf_r+0x18>
 8008fb8:	f023 0303 	bic.w	r3, r3, #3
 8008fbc:	f043 0302 	orr.w	r3, r3, #2
 8008fc0:	81a3      	strh	r3, [r4, #12]
 8008fc2:	e7e3      	b.n	8008f8c <__smakebuf_r+0xc>
 8008fc4:	4b0d      	ldr	r3, [pc, #52]	; (8008ffc <__smakebuf_r+0x7c>)
 8008fc6:	62b3      	str	r3, [r6, #40]	; 0x28
 8008fc8:	89a3      	ldrh	r3, [r4, #12]
 8008fca:	6020      	str	r0, [r4, #0]
 8008fcc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008fd0:	81a3      	strh	r3, [r4, #12]
 8008fd2:	9b00      	ldr	r3, [sp, #0]
 8008fd4:	6163      	str	r3, [r4, #20]
 8008fd6:	9b01      	ldr	r3, [sp, #4]
 8008fd8:	6120      	str	r0, [r4, #16]
 8008fda:	b15b      	cbz	r3, 8008ff4 <__smakebuf_r+0x74>
 8008fdc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008fe0:	4630      	mov	r0, r6
 8008fe2:	f000 fcd9 	bl	8009998 <_isatty_r>
 8008fe6:	b128      	cbz	r0, 8008ff4 <__smakebuf_r+0x74>
 8008fe8:	89a3      	ldrh	r3, [r4, #12]
 8008fea:	f023 0303 	bic.w	r3, r3, #3
 8008fee:	f043 0301 	orr.w	r3, r3, #1
 8008ff2:	81a3      	strh	r3, [r4, #12]
 8008ff4:	89a3      	ldrh	r3, [r4, #12]
 8008ff6:	431d      	orrs	r5, r3
 8008ff8:	81a5      	strh	r5, [r4, #12]
 8008ffa:	e7cd      	b.n	8008f98 <__smakebuf_r+0x18>
 8008ffc:	08008dd1 	.word	0x08008dd1

08009000 <__malloc_lock>:
 8009000:	4770      	bx	lr

08009002 <__malloc_unlock>:
 8009002:	4770      	bx	lr

08009004 <_Balloc>:
 8009004:	b570      	push	{r4, r5, r6, lr}
 8009006:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009008:	4604      	mov	r4, r0
 800900a:	460e      	mov	r6, r1
 800900c:	b93d      	cbnz	r5, 800901e <_Balloc+0x1a>
 800900e:	2010      	movs	r0, #16
 8009010:	f7fe f916 	bl	8007240 <malloc>
 8009014:	6260      	str	r0, [r4, #36]	; 0x24
 8009016:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800901a:	6005      	str	r5, [r0, #0]
 800901c:	60c5      	str	r5, [r0, #12]
 800901e:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8009020:	68eb      	ldr	r3, [r5, #12]
 8009022:	b183      	cbz	r3, 8009046 <_Balloc+0x42>
 8009024:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009026:	68db      	ldr	r3, [r3, #12]
 8009028:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800902c:	b9b8      	cbnz	r0, 800905e <_Balloc+0x5a>
 800902e:	2101      	movs	r1, #1
 8009030:	fa01 f506 	lsl.w	r5, r1, r6
 8009034:	1d6a      	adds	r2, r5, #5
 8009036:	0092      	lsls	r2, r2, #2
 8009038:	4620      	mov	r0, r4
 800903a:	f7fe f93d 	bl	80072b8 <_calloc_r>
 800903e:	b160      	cbz	r0, 800905a <_Balloc+0x56>
 8009040:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8009044:	e00e      	b.n	8009064 <_Balloc+0x60>
 8009046:	2221      	movs	r2, #33	; 0x21
 8009048:	2104      	movs	r1, #4
 800904a:	4620      	mov	r0, r4
 800904c:	f7fe f934 	bl	80072b8 <_calloc_r>
 8009050:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009052:	60e8      	str	r0, [r5, #12]
 8009054:	68db      	ldr	r3, [r3, #12]
 8009056:	2b00      	cmp	r3, #0
 8009058:	d1e4      	bne.n	8009024 <_Balloc+0x20>
 800905a:	2000      	movs	r0, #0
 800905c:	bd70      	pop	{r4, r5, r6, pc}
 800905e:	6802      	ldr	r2, [r0, #0]
 8009060:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8009064:	2300      	movs	r3, #0
 8009066:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800906a:	e7f7      	b.n	800905c <_Balloc+0x58>

0800906c <_Bfree>:
 800906c:	b570      	push	{r4, r5, r6, lr}
 800906e:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8009070:	4606      	mov	r6, r0
 8009072:	460d      	mov	r5, r1
 8009074:	b93c      	cbnz	r4, 8009086 <_Bfree+0x1a>
 8009076:	2010      	movs	r0, #16
 8009078:	f7fe f8e2 	bl	8007240 <malloc>
 800907c:	6270      	str	r0, [r6, #36]	; 0x24
 800907e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009082:	6004      	str	r4, [r0, #0]
 8009084:	60c4      	str	r4, [r0, #12]
 8009086:	b13d      	cbz	r5, 8009098 <_Bfree+0x2c>
 8009088:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800908a:	686a      	ldr	r2, [r5, #4]
 800908c:	68db      	ldr	r3, [r3, #12]
 800908e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009092:	6029      	str	r1, [r5, #0]
 8009094:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8009098:	bd70      	pop	{r4, r5, r6, pc}

0800909a <__multadd>:
 800909a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800909e:	690d      	ldr	r5, [r1, #16]
 80090a0:	461f      	mov	r7, r3
 80090a2:	4606      	mov	r6, r0
 80090a4:	460c      	mov	r4, r1
 80090a6:	f101 0c14 	add.w	ip, r1, #20
 80090aa:	2300      	movs	r3, #0
 80090ac:	f8dc 0000 	ldr.w	r0, [ip]
 80090b0:	b281      	uxth	r1, r0
 80090b2:	fb02 7101 	mla	r1, r2, r1, r7
 80090b6:	0c0f      	lsrs	r7, r1, #16
 80090b8:	0c00      	lsrs	r0, r0, #16
 80090ba:	fb02 7000 	mla	r0, r2, r0, r7
 80090be:	b289      	uxth	r1, r1
 80090c0:	3301      	adds	r3, #1
 80090c2:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 80090c6:	429d      	cmp	r5, r3
 80090c8:	ea4f 4710 	mov.w	r7, r0, lsr #16
 80090cc:	f84c 1b04 	str.w	r1, [ip], #4
 80090d0:	dcec      	bgt.n	80090ac <__multadd+0x12>
 80090d2:	b1d7      	cbz	r7, 800910a <__multadd+0x70>
 80090d4:	68a3      	ldr	r3, [r4, #8]
 80090d6:	42ab      	cmp	r3, r5
 80090d8:	dc12      	bgt.n	8009100 <__multadd+0x66>
 80090da:	6861      	ldr	r1, [r4, #4]
 80090dc:	4630      	mov	r0, r6
 80090de:	3101      	adds	r1, #1
 80090e0:	f7ff ff90 	bl	8009004 <_Balloc>
 80090e4:	6922      	ldr	r2, [r4, #16]
 80090e6:	3202      	adds	r2, #2
 80090e8:	f104 010c 	add.w	r1, r4, #12
 80090ec:	4680      	mov	r8, r0
 80090ee:	0092      	lsls	r2, r2, #2
 80090f0:	300c      	adds	r0, #12
 80090f2:	f7fe f8b5 	bl	8007260 <memcpy>
 80090f6:	4621      	mov	r1, r4
 80090f8:	4630      	mov	r0, r6
 80090fa:	f7ff ffb7 	bl	800906c <_Bfree>
 80090fe:	4644      	mov	r4, r8
 8009100:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009104:	3501      	adds	r5, #1
 8009106:	615f      	str	r7, [r3, #20]
 8009108:	6125      	str	r5, [r4, #16]
 800910a:	4620      	mov	r0, r4
 800910c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08009110 <__hi0bits>:
 8009110:	0c02      	lsrs	r2, r0, #16
 8009112:	0412      	lsls	r2, r2, #16
 8009114:	4603      	mov	r3, r0
 8009116:	b9b2      	cbnz	r2, 8009146 <__hi0bits+0x36>
 8009118:	0403      	lsls	r3, r0, #16
 800911a:	2010      	movs	r0, #16
 800911c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8009120:	bf04      	itt	eq
 8009122:	021b      	lsleq	r3, r3, #8
 8009124:	3008      	addeq	r0, #8
 8009126:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800912a:	bf04      	itt	eq
 800912c:	011b      	lsleq	r3, r3, #4
 800912e:	3004      	addeq	r0, #4
 8009130:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8009134:	bf04      	itt	eq
 8009136:	009b      	lsleq	r3, r3, #2
 8009138:	3002      	addeq	r0, #2
 800913a:	2b00      	cmp	r3, #0
 800913c:	db06      	blt.n	800914c <__hi0bits+0x3c>
 800913e:	005b      	lsls	r3, r3, #1
 8009140:	d503      	bpl.n	800914a <__hi0bits+0x3a>
 8009142:	3001      	adds	r0, #1
 8009144:	4770      	bx	lr
 8009146:	2000      	movs	r0, #0
 8009148:	e7e8      	b.n	800911c <__hi0bits+0xc>
 800914a:	2020      	movs	r0, #32
 800914c:	4770      	bx	lr

0800914e <__lo0bits>:
 800914e:	6803      	ldr	r3, [r0, #0]
 8009150:	f013 0207 	ands.w	r2, r3, #7
 8009154:	4601      	mov	r1, r0
 8009156:	d00b      	beq.n	8009170 <__lo0bits+0x22>
 8009158:	07da      	lsls	r2, r3, #31
 800915a:	d423      	bmi.n	80091a4 <__lo0bits+0x56>
 800915c:	0798      	lsls	r0, r3, #30
 800915e:	bf49      	itett	mi
 8009160:	085b      	lsrmi	r3, r3, #1
 8009162:	089b      	lsrpl	r3, r3, #2
 8009164:	2001      	movmi	r0, #1
 8009166:	600b      	strmi	r3, [r1, #0]
 8009168:	bf5c      	itt	pl
 800916a:	600b      	strpl	r3, [r1, #0]
 800916c:	2002      	movpl	r0, #2
 800916e:	4770      	bx	lr
 8009170:	b298      	uxth	r0, r3
 8009172:	b9a8      	cbnz	r0, 80091a0 <__lo0bits+0x52>
 8009174:	0c1b      	lsrs	r3, r3, #16
 8009176:	2010      	movs	r0, #16
 8009178:	f013 0fff 	tst.w	r3, #255	; 0xff
 800917c:	bf04      	itt	eq
 800917e:	0a1b      	lsreq	r3, r3, #8
 8009180:	3008      	addeq	r0, #8
 8009182:	071a      	lsls	r2, r3, #28
 8009184:	bf04      	itt	eq
 8009186:	091b      	lsreq	r3, r3, #4
 8009188:	3004      	addeq	r0, #4
 800918a:	079a      	lsls	r2, r3, #30
 800918c:	bf04      	itt	eq
 800918e:	089b      	lsreq	r3, r3, #2
 8009190:	3002      	addeq	r0, #2
 8009192:	07da      	lsls	r2, r3, #31
 8009194:	d402      	bmi.n	800919c <__lo0bits+0x4e>
 8009196:	085b      	lsrs	r3, r3, #1
 8009198:	d006      	beq.n	80091a8 <__lo0bits+0x5a>
 800919a:	3001      	adds	r0, #1
 800919c:	600b      	str	r3, [r1, #0]
 800919e:	4770      	bx	lr
 80091a0:	4610      	mov	r0, r2
 80091a2:	e7e9      	b.n	8009178 <__lo0bits+0x2a>
 80091a4:	2000      	movs	r0, #0
 80091a6:	4770      	bx	lr
 80091a8:	2020      	movs	r0, #32
 80091aa:	4770      	bx	lr

080091ac <__i2b>:
 80091ac:	b510      	push	{r4, lr}
 80091ae:	460c      	mov	r4, r1
 80091b0:	2101      	movs	r1, #1
 80091b2:	f7ff ff27 	bl	8009004 <_Balloc>
 80091b6:	2201      	movs	r2, #1
 80091b8:	6144      	str	r4, [r0, #20]
 80091ba:	6102      	str	r2, [r0, #16]
 80091bc:	bd10      	pop	{r4, pc}

080091be <__multiply>:
 80091be:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80091c2:	4614      	mov	r4, r2
 80091c4:	690a      	ldr	r2, [r1, #16]
 80091c6:	6923      	ldr	r3, [r4, #16]
 80091c8:	429a      	cmp	r2, r3
 80091ca:	bfb8      	it	lt
 80091cc:	460b      	movlt	r3, r1
 80091ce:	4688      	mov	r8, r1
 80091d0:	bfbc      	itt	lt
 80091d2:	46a0      	movlt	r8, r4
 80091d4:	461c      	movlt	r4, r3
 80091d6:	f8d8 7010 	ldr.w	r7, [r8, #16]
 80091da:	f8d4 9010 	ldr.w	r9, [r4, #16]
 80091de:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80091e2:	f8d8 1004 	ldr.w	r1, [r8, #4]
 80091e6:	eb07 0609 	add.w	r6, r7, r9
 80091ea:	42b3      	cmp	r3, r6
 80091ec:	bfb8      	it	lt
 80091ee:	3101      	addlt	r1, #1
 80091f0:	f7ff ff08 	bl	8009004 <_Balloc>
 80091f4:	f100 0514 	add.w	r5, r0, #20
 80091f8:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 80091fc:	462b      	mov	r3, r5
 80091fe:	2200      	movs	r2, #0
 8009200:	4573      	cmp	r3, lr
 8009202:	d316      	bcc.n	8009232 <__multiply+0x74>
 8009204:	f104 0214 	add.w	r2, r4, #20
 8009208:	f108 0114 	add.w	r1, r8, #20
 800920c:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8009210:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8009214:	9300      	str	r3, [sp, #0]
 8009216:	9b00      	ldr	r3, [sp, #0]
 8009218:	9201      	str	r2, [sp, #4]
 800921a:	4293      	cmp	r3, r2
 800921c:	d80c      	bhi.n	8009238 <__multiply+0x7a>
 800921e:	2e00      	cmp	r6, #0
 8009220:	dd03      	ble.n	800922a <__multiply+0x6c>
 8009222:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8009226:	2b00      	cmp	r3, #0
 8009228:	d05d      	beq.n	80092e6 <__multiply+0x128>
 800922a:	6106      	str	r6, [r0, #16]
 800922c:	b003      	add	sp, #12
 800922e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009232:	f843 2b04 	str.w	r2, [r3], #4
 8009236:	e7e3      	b.n	8009200 <__multiply+0x42>
 8009238:	f8b2 b000 	ldrh.w	fp, [r2]
 800923c:	f1bb 0f00 	cmp.w	fp, #0
 8009240:	d023      	beq.n	800928a <__multiply+0xcc>
 8009242:	4689      	mov	r9, r1
 8009244:	46ac      	mov	ip, r5
 8009246:	f04f 0800 	mov.w	r8, #0
 800924a:	f859 4b04 	ldr.w	r4, [r9], #4
 800924e:	f8dc a000 	ldr.w	sl, [ip]
 8009252:	b2a3      	uxth	r3, r4
 8009254:	fa1f fa8a 	uxth.w	sl, sl
 8009258:	fb0b a303 	mla	r3, fp, r3, sl
 800925c:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8009260:	f8dc 4000 	ldr.w	r4, [ip]
 8009264:	4443      	add	r3, r8
 8009266:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800926a:	fb0b 840a 	mla	r4, fp, sl, r8
 800926e:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8009272:	46e2      	mov	sl, ip
 8009274:	b29b      	uxth	r3, r3
 8009276:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800927a:	454f      	cmp	r7, r9
 800927c:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8009280:	f84a 3b04 	str.w	r3, [sl], #4
 8009284:	d82b      	bhi.n	80092de <__multiply+0x120>
 8009286:	f8cc 8004 	str.w	r8, [ip, #4]
 800928a:	9b01      	ldr	r3, [sp, #4]
 800928c:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8009290:	3204      	adds	r2, #4
 8009292:	f1ba 0f00 	cmp.w	sl, #0
 8009296:	d020      	beq.n	80092da <__multiply+0x11c>
 8009298:	682b      	ldr	r3, [r5, #0]
 800929a:	4689      	mov	r9, r1
 800929c:	46a8      	mov	r8, r5
 800929e:	f04f 0b00 	mov.w	fp, #0
 80092a2:	f8b9 c000 	ldrh.w	ip, [r9]
 80092a6:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 80092aa:	fb0a 440c 	mla	r4, sl, ip, r4
 80092ae:	445c      	add	r4, fp
 80092b0:	46c4      	mov	ip, r8
 80092b2:	b29b      	uxth	r3, r3
 80092b4:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80092b8:	f84c 3b04 	str.w	r3, [ip], #4
 80092bc:	f859 3b04 	ldr.w	r3, [r9], #4
 80092c0:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 80092c4:	0c1b      	lsrs	r3, r3, #16
 80092c6:	fb0a b303 	mla	r3, sl, r3, fp
 80092ca:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 80092ce:	454f      	cmp	r7, r9
 80092d0:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 80092d4:	d805      	bhi.n	80092e2 <__multiply+0x124>
 80092d6:	f8c8 3004 	str.w	r3, [r8, #4]
 80092da:	3504      	adds	r5, #4
 80092dc:	e79b      	b.n	8009216 <__multiply+0x58>
 80092de:	46d4      	mov	ip, sl
 80092e0:	e7b3      	b.n	800924a <__multiply+0x8c>
 80092e2:	46e0      	mov	r8, ip
 80092e4:	e7dd      	b.n	80092a2 <__multiply+0xe4>
 80092e6:	3e01      	subs	r6, #1
 80092e8:	e799      	b.n	800921e <__multiply+0x60>
	...

080092ec <__pow5mult>:
 80092ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80092f0:	4615      	mov	r5, r2
 80092f2:	f012 0203 	ands.w	r2, r2, #3
 80092f6:	4606      	mov	r6, r0
 80092f8:	460f      	mov	r7, r1
 80092fa:	d007      	beq.n	800930c <__pow5mult+0x20>
 80092fc:	3a01      	subs	r2, #1
 80092fe:	4c21      	ldr	r4, [pc, #132]	; (8009384 <__pow5mult+0x98>)
 8009300:	2300      	movs	r3, #0
 8009302:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8009306:	f7ff fec8 	bl	800909a <__multadd>
 800930a:	4607      	mov	r7, r0
 800930c:	10ad      	asrs	r5, r5, #2
 800930e:	d035      	beq.n	800937c <__pow5mult+0x90>
 8009310:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8009312:	b93c      	cbnz	r4, 8009324 <__pow5mult+0x38>
 8009314:	2010      	movs	r0, #16
 8009316:	f7fd ff93 	bl	8007240 <malloc>
 800931a:	6270      	str	r0, [r6, #36]	; 0x24
 800931c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009320:	6004      	str	r4, [r0, #0]
 8009322:	60c4      	str	r4, [r0, #12]
 8009324:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8009328:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800932c:	b94c      	cbnz	r4, 8009342 <__pow5mult+0x56>
 800932e:	f240 2171 	movw	r1, #625	; 0x271
 8009332:	4630      	mov	r0, r6
 8009334:	f7ff ff3a 	bl	80091ac <__i2b>
 8009338:	2300      	movs	r3, #0
 800933a:	f8c8 0008 	str.w	r0, [r8, #8]
 800933e:	4604      	mov	r4, r0
 8009340:	6003      	str	r3, [r0, #0]
 8009342:	f04f 0800 	mov.w	r8, #0
 8009346:	07eb      	lsls	r3, r5, #31
 8009348:	d50a      	bpl.n	8009360 <__pow5mult+0x74>
 800934a:	4639      	mov	r1, r7
 800934c:	4622      	mov	r2, r4
 800934e:	4630      	mov	r0, r6
 8009350:	f7ff ff35 	bl	80091be <__multiply>
 8009354:	4639      	mov	r1, r7
 8009356:	4681      	mov	r9, r0
 8009358:	4630      	mov	r0, r6
 800935a:	f7ff fe87 	bl	800906c <_Bfree>
 800935e:	464f      	mov	r7, r9
 8009360:	106d      	asrs	r5, r5, #1
 8009362:	d00b      	beq.n	800937c <__pow5mult+0x90>
 8009364:	6820      	ldr	r0, [r4, #0]
 8009366:	b938      	cbnz	r0, 8009378 <__pow5mult+0x8c>
 8009368:	4622      	mov	r2, r4
 800936a:	4621      	mov	r1, r4
 800936c:	4630      	mov	r0, r6
 800936e:	f7ff ff26 	bl	80091be <__multiply>
 8009372:	6020      	str	r0, [r4, #0]
 8009374:	f8c0 8000 	str.w	r8, [r0]
 8009378:	4604      	mov	r4, r0
 800937a:	e7e4      	b.n	8009346 <__pow5mult+0x5a>
 800937c:	4638      	mov	r0, r7
 800937e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009382:	bf00      	nop
 8009384:	08023408 	.word	0x08023408

08009388 <__lshift>:
 8009388:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800938c:	460c      	mov	r4, r1
 800938e:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009392:	6923      	ldr	r3, [r4, #16]
 8009394:	6849      	ldr	r1, [r1, #4]
 8009396:	eb0a 0903 	add.w	r9, sl, r3
 800939a:	68a3      	ldr	r3, [r4, #8]
 800939c:	4607      	mov	r7, r0
 800939e:	4616      	mov	r6, r2
 80093a0:	f109 0501 	add.w	r5, r9, #1
 80093a4:	42ab      	cmp	r3, r5
 80093a6:	db32      	blt.n	800940e <__lshift+0x86>
 80093a8:	4638      	mov	r0, r7
 80093aa:	f7ff fe2b 	bl	8009004 <_Balloc>
 80093ae:	2300      	movs	r3, #0
 80093b0:	4680      	mov	r8, r0
 80093b2:	f100 0114 	add.w	r1, r0, #20
 80093b6:	461a      	mov	r2, r3
 80093b8:	4553      	cmp	r3, sl
 80093ba:	db2b      	blt.n	8009414 <__lshift+0x8c>
 80093bc:	6920      	ldr	r0, [r4, #16]
 80093be:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80093c2:	f104 0314 	add.w	r3, r4, #20
 80093c6:	f016 021f 	ands.w	r2, r6, #31
 80093ca:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80093ce:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80093d2:	d025      	beq.n	8009420 <__lshift+0x98>
 80093d4:	f1c2 0e20 	rsb	lr, r2, #32
 80093d8:	2000      	movs	r0, #0
 80093da:	681e      	ldr	r6, [r3, #0]
 80093dc:	468a      	mov	sl, r1
 80093de:	4096      	lsls	r6, r2
 80093e0:	4330      	orrs	r0, r6
 80093e2:	f84a 0b04 	str.w	r0, [sl], #4
 80093e6:	f853 0b04 	ldr.w	r0, [r3], #4
 80093ea:	459c      	cmp	ip, r3
 80093ec:	fa20 f00e 	lsr.w	r0, r0, lr
 80093f0:	d814      	bhi.n	800941c <__lshift+0x94>
 80093f2:	6048      	str	r0, [r1, #4]
 80093f4:	b108      	cbz	r0, 80093fa <__lshift+0x72>
 80093f6:	f109 0502 	add.w	r5, r9, #2
 80093fa:	3d01      	subs	r5, #1
 80093fc:	4638      	mov	r0, r7
 80093fe:	f8c8 5010 	str.w	r5, [r8, #16]
 8009402:	4621      	mov	r1, r4
 8009404:	f7ff fe32 	bl	800906c <_Bfree>
 8009408:	4640      	mov	r0, r8
 800940a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800940e:	3101      	adds	r1, #1
 8009410:	005b      	lsls	r3, r3, #1
 8009412:	e7c7      	b.n	80093a4 <__lshift+0x1c>
 8009414:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 8009418:	3301      	adds	r3, #1
 800941a:	e7cd      	b.n	80093b8 <__lshift+0x30>
 800941c:	4651      	mov	r1, sl
 800941e:	e7dc      	b.n	80093da <__lshift+0x52>
 8009420:	3904      	subs	r1, #4
 8009422:	f853 2b04 	ldr.w	r2, [r3], #4
 8009426:	f841 2f04 	str.w	r2, [r1, #4]!
 800942a:	459c      	cmp	ip, r3
 800942c:	d8f9      	bhi.n	8009422 <__lshift+0x9a>
 800942e:	e7e4      	b.n	80093fa <__lshift+0x72>

08009430 <__mcmp>:
 8009430:	6903      	ldr	r3, [r0, #16]
 8009432:	690a      	ldr	r2, [r1, #16]
 8009434:	1a9b      	subs	r3, r3, r2
 8009436:	b530      	push	{r4, r5, lr}
 8009438:	d10c      	bne.n	8009454 <__mcmp+0x24>
 800943a:	0092      	lsls	r2, r2, #2
 800943c:	3014      	adds	r0, #20
 800943e:	3114      	adds	r1, #20
 8009440:	1884      	adds	r4, r0, r2
 8009442:	4411      	add	r1, r2
 8009444:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8009448:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800944c:	4295      	cmp	r5, r2
 800944e:	d003      	beq.n	8009458 <__mcmp+0x28>
 8009450:	d305      	bcc.n	800945e <__mcmp+0x2e>
 8009452:	2301      	movs	r3, #1
 8009454:	4618      	mov	r0, r3
 8009456:	bd30      	pop	{r4, r5, pc}
 8009458:	42a0      	cmp	r0, r4
 800945a:	d3f3      	bcc.n	8009444 <__mcmp+0x14>
 800945c:	e7fa      	b.n	8009454 <__mcmp+0x24>
 800945e:	f04f 33ff 	mov.w	r3, #4294967295
 8009462:	e7f7      	b.n	8009454 <__mcmp+0x24>

08009464 <__mdiff>:
 8009464:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009468:	460d      	mov	r5, r1
 800946a:	4607      	mov	r7, r0
 800946c:	4611      	mov	r1, r2
 800946e:	4628      	mov	r0, r5
 8009470:	4614      	mov	r4, r2
 8009472:	f7ff ffdd 	bl	8009430 <__mcmp>
 8009476:	1e06      	subs	r6, r0, #0
 8009478:	d108      	bne.n	800948c <__mdiff+0x28>
 800947a:	4631      	mov	r1, r6
 800947c:	4638      	mov	r0, r7
 800947e:	f7ff fdc1 	bl	8009004 <_Balloc>
 8009482:	2301      	movs	r3, #1
 8009484:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8009488:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800948c:	bfa4      	itt	ge
 800948e:	4623      	movge	r3, r4
 8009490:	462c      	movge	r4, r5
 8009492:	4638      	mov	r0, r7
 8009494:	6861      	ldr	r1, [r4, #4]
 8009496:	bfa6      	itte	ge
 8009498:	461d      	movge	r5, r3
 800949a:	2600      	movge	r6, #0
 800949c:	2601      	movlt	r6, #1
 800949e:	f7ff fdb1 	bl	8009004 <_Balloc>
 80094a2:	692b      	ldr	r3, [r5, #16]
 80094a4:	60c6      	str	r6, [r0, #12]
 80094a6:	6926      	ldr	r6, [r4, #16]
 80094a8:	f105 0914 	add.w	r9, r5, #20
 80094ac:	f104 0214 	add.w	r2, r4, #20
 80094b0:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 80094b4:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 80094b8:	f100 0514 	add.w	r5, r0, #20
 80094bc:	f04f 0e00 	mov.w	lr, #0
 80094c0:	f852 ab04 	ldr.w	sl, [r2], #4
 80094c4:	f859 4b04 	ldr.w	r4, [r9], #4
 80094c8:	fa1e f18a 	uxtah	r1, lr, sl
 80094cc:	b2a3      	uxth	r3, r4
 80094ce:	1ac9      	subs	r1, r1, r3
 80094d0:	0c23      	lsrs	r3, r4, #16
 80094d2:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 80094d6:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80094da:	b289      	uxth	r1, r1
 80094dc:	ea4f 4e23 	mov.w	lr, r3, asr #16
 80094e0:	45c8      	cmp	r8, r9
 80094e2:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 80094e6:	4694      	mov	ip, r2
 80094e8:	f845 3b04 	str.w	r3, [r5], #4
 80094ec:	d8e8      	bhi.n	80094c0 <__mdiff+0x5c>
 80094ee:	45bc      	cmp	ip, r7
 80094f0:	d304      	bcc.n	80094fc <__mdiff+0x98>
 80094f2:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 80094f6:	b183      	cbz	r3, 800951a <__mdiff+0xb6>
 80094f8:	6106      	str	r6, [r0, #16]
 80094fa:	e7c5      	b.n	8009488 <__mdiff+0x24>
 80094fc:	f85c 1b04 	ldr.w	r1, [ip], #4
 8009500:	fa1e f381 	uxtah	r3, lr, r1
 8009504:	141a      	asrs	r2, r3, #16
 8009506:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800950a:	b29b      	uxth	r3, r3
 800950c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009510:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8009514:	f845 3b04 	str.w	r3, [r5], #4
 8009518:	e7e9      	b.n	80094ee <__mdiff+0x8a>
 800951a:	3e01      	subs	r6, #1
 800951c:	e7e9      	b.n	80094f2 <__mdiff+0x8e>

0800951e <__d2b>:
 800951e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009522:	460e      	mov	r6, r1
 8009524:	2101      	movs	r1, #1
 8009526:	ec59 8b10 	vmov	r8, r9, d0
 800952a:	4615      	mov	r5, r2
 800952c:	f7ff fd6a 	bl	8009004 <_Balloc>
 8009530:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8009534:	4607      	mov	r7, r0
 8009536:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800953a:	bb34      	cbnz	r4, 800958a <__d2b+0x6c>
 800953c:	9301      	str	r3, [sp, #4]
 800953e:	f1b8 0300 	subs.w	r3, r8, #0
 8009542:	d027      	beq.n	8009594 <__d2b+0x76>
 8009544:	a802      	add	r0, sp, #8
 8009546:	f840 3d08 	str.w	r3, [r0, #-8]!
 800954a:	f7ff fe00 	bl	800914e <__lo0bits>
 800954e:	9900      	ldr	r1, [sp, #0]
 8009550:	b1f0      	cbz	r0, 8009590 <__d2b+0x72>
 8009552:	9a01      	ldr	r2, [sp, #4]
 8009554:	f1c0 0320 	rsb	r3, r0, #32
 8009558:	fa02 f303 	lsl.w	r3, r2, r3
 800955c:	430b      	orrs	r3, r1
 800955e:	40c2      	lsrs	r2, r0
 8009560:	617b      	str	r3, [r7, #20]
 8009562:	9201      	str	r2, [sp, #4]
 8009564:	9b01      	ldr	r3, [sp, #4]
 8009566:	61bb      	str	r3, [r7, #24]
 8009568:	2b00      	cmp	r3, #0
 800956a:	bf14      	ite	ne
 800956c:	2102      	movne	r1, #2
 800956e:	2101      	moveq	r1, #1
 8009570:	6139      	str	r1, [r7, #16]
 8009572:	b1c4      	cbz	r4, 80095a6 <__d2b+0x88>
 8009574:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 8009578:	4404      	add	r4, r0
 800957a:	6034      	str	r4, [r6, #0]
 800957c:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8009580:	6028      	str	r0, [r5, #0]
 8009582:	4638      	mov	r0, r7
 8009584:	b003      	add	sp, #12
 8009586:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800958a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800958e:	e7d5      	b.n	800953c <__d2b+0x1e>
 8009590:	6179      	str	r1, [r7, #20]
 8009592:	e7e7      	b.n	8009564 <__d2b+0x46>
 8009594:	a801      	add	r0, sp, #4
 8009596:	f7ff fdda 	bl	800914e <__lo0bits>
 800959a:	9b01      	ldr	r3, [sp, #4]
 800959c:	617b      	str	r3, [r7, #20]
 800959e:	2101      	movs	r1, #1
 80095a0:	6139      	str	r1, [r7, #16]
 80095a2:	3020      	adds	r0, #32
 80095a4:	e7e5      	b.n	8009572 <__d2b+0x54>
 80095a6:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80095aa:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80095ae:	6030      	str	r0, [r6, #0]
 80095b0:	6918      	ldr	r0, [r3, #16]
 80095b2:	f7ff fdad 	bl	8009110 <__hi0bits>
 80095b6:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80095ba:	e7e1      	b.n	8009580 <__d2b+0x62>

080095bc <__sfputc_r>:
 80095bc:	6893      	ldr	r3, [r2, #8]
 80095be:	3b01      	subs	r3, #1
 80095c0:	2b00      	cmp	r3, #0
 80095c2:	b410      	push	{r4}
 80095c4:	6093      	str	r3, [r2, #8]
 80095c6:	da08      	bge.n	80095da <__sfputc_r+0x1e>
 80095c8:	6994      	ldr	r4, [r2, #24]
 80095ca:	42a3      	cmp	r3, r4
 80095cc:	db01      	blt.n	80095d2 <__sfputc_r+0x16>
 80095ce:	290a      	cmp	r1, #10
 80095d0:	d103      	bne.n	80095da <__sfputc_r+0x1e>
 80095d2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80095d6:	f7fe bc21 	b.w	8007e1c <__swbuf_r>
 80095da:	6813      	ldr	r3, [r2, #0]
 80095dc:	1c58      	adds	r0, r3, #1
 80095de:	6010      	str	r0, [r2, #0]
 80095e0:	7019      	strb	r1, [r3, #0]
 80095e2:	4608      	mov	r0, r1
 80095e4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80095e8:	4770      	bx	lr

080095ea <__sfputs_r>:
 80095ea:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80095ec:	4606      	mov	r6, r0
 80095ee:	460f      	mov	r7, r1
 80095f0:	4614      	mov	r4, r2
 80095f2:	18d5      	adds	r5, r2, r3
 80095f4:	42ac      	cmp	r4, r5
 80095f6:	d101      	bne.n	80095fc <__sfputs_r+0x12>
 80095f8:	2000      	movs	r0, #0
 80095fa:	e007      	b.n	800960c <__sfputs_r+0x22>
 80095fc:	463a      	mov	r2, r7
 80095fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009602:	4630      	mov	r0, r6
 8009604:	f7ff ffda 	bl	80095bc <__sfputc_r>
 8009608:	1c43      	adds	r3, r0, #1
 800960a:	d1f3      	bne.n	80095f4 <__sfputs_r+0xa>
 800960c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009610 <_vfiprintf_r>:
 8009610:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009614:	460c      	mov	r4, r1
 8009616:	b09d      	sub	sp, #116	; 0x74
 8009618:	4617      	mov	r7, r2
 800961a:	461d      	mov	r5, r3
 800961c:	4606      	mov	r6, r0
 800961e:	b118      	cbz	r0, 8009628 <_vfiprintf_r+0x18>
 8009620:	6983      	ldr	r3, [r0, #24]
 8009622:	b90b      	cbnz	r3, 8009628 <_vfiprintf_r+0x18>
 8009624:	f7ff fbf0 	bl	8008e08 <__sinit>
 8009628:	4b7c      	ldr	r3, [pc, #496]	; (800981c <_vfiprintf_r+0x20c>)
 800962a:	429c      	cmp	r4, r3
 800962c:	d158      	bne.n	80096e0 <_vfiprintf_r+0xd0>
 800962e:	6874      	ldr	r4, [r6, #4]
 8009630:	89a3      	ldrh	r3, [r4, #12]
 8009632:	0718      	lsls	r0, r3, #28
 8009634:	d55e      	bpl.n	80096f4 <_vfiprintf_r+0xe4>
 8009636:	6923      	ldr	r3, [r4, #16]
 8009638:	2b00      	cmp	r3, #0
 800963a:	d05b      	beq.n	80096f4 <_vfiprintf_r+0xe4>
 800963c:	2300      	movs	r3, #0
 800963e:	9309      	str	r3, [sp, #36]	; 0x24
 8009640:	2320      	movs	r3, #32
 8009642:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8009646:	2330      	movs	r3, #48	; 0x30
 8009648:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800964c:	9503      	str	r5, [sp, #12]
 800964e:	f04f 0b01 	mov.w	fp, #1
 8009652:	46b8      	mov	r8, r7
 8009654:	4645      	mov	r5, r8
 8009656:	f815 3b01 	ldrb.w	r3, [r5], #1
 800965a:	b10b      	cbz	r3, 8009660 <_vfiprintf_r+0x50>
 800965c:	2b25      	cmp	r3, #37	; 0x25
 800965e:	d154      	bne.n	800970a <_vfiprintf_r+0xfa>
 8009660:	ebb8 0a07 	subs.w	sl, r8, r7
 8009664:	d00b      	beq.n	800967e <_vfiprintf_r+0x6e>
 8009666:	4653      	mov	r3, sl
 8009668:	463a      	mov	r2, r7
 800966a:	4621      	mov	r1, r4
 800966c:	4630      	mov	r0, r6
 800966e:	f7ff ffbc 	bl	80095ea <__sfputs_r>
 8009672:	3001      	adds	r0, #1
 8009674:	f000 80c2 	beq.w	80097fc <_vfiprintf_r+0x1ec>
 8009678:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800967a:	4453      	add	r3, sl
 800967c:	9309      	str	r3, [sp, #36]	; 0x24
 800967e:	f898 3000 	ldrb.w	r3, [r8]
 8009682:	2b00      	cmp	r3, #0
 8009684:	f000 80ba 	beq.w	80097fc <_vfiprintf_r+0x1ec>
 8009688:	2300      	movs	r3, #0
 800968a:	f04f 32ff 	mov.w	r2, #4294967295
 800968e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009692:	9304      	str	r3, [sp, #16]
 8009694:	9307      	str	r3, [sp, #28]
 8009696:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800969a:	931a      	str	r3, [sp, #104]	; 0x68
 800969c:	46a8      	mov	r8, r5
 800969e:	2205      	movs	r2, #5
 80096a0:	f818 1b01 	ldrb.w	r1, [r8], #1
 80096a4:	485e      	ldr	r0, [pc, #376]	; (8009820 <_vfiprintf_r+0x210>)
 80096a6:	f7f9 fa03 	bl	8002ab0 <memchr>
 80096aa:	9b04      	ldr	r3, [sp, #16]
 80096ac:	bb78      	cbnz	r0, 800970e <_vfiprintf_r+0xfe>
 80096ae:	06d9      	lsls	r1, r3, #27
 80096b0:	bf44      	itt	mi
 80096b2:	2220      	movmi	r2, #32
 80096b4:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80096b8:	071a      	lsls	r2, r3, #28
 80096ba:	bf44      	itt	mi
 80096bc:	222b      	movmi	r2, #43	; 0x2b
 80096be:	f88d 2053 	strbmi.w	r2, [sp, #83]	; 0x53
 80096c2:	782a      	ldrb	r2, [r5, #0]
 80096c4:	2a2a      	cmp	r2, #42	; 0x2a
 80096c6:	d02a      	beq.n	800971e <_vfiprintf_r+0x10e>
 80096c8:	9a07      	ldr	r2, [sp, #28]
 80096ca:	46a8      	mov	r8, r5
 80096cc:	2000      	movs	r0, #0
 80096ce:	250a      	movs	r5, #10
 80096d0:	4641      	mov	r1, r8
 80096d2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80096d6:	3b30      	subs	r3, #48	; 0x30
 80096d8:	2b09      	cmp	r3, #9
 80096da:	d969      	bls.n	80097b0 <_vfiprintf_r+0x1a0>
 80096dc:	b360      	cbz	r0, 8009738 <_vfiprintf_r+0x128>
 80096de:	e024      	b.n	800972a <_vfiprintf_r+0x11a>
 80096e0:	4b50      	ldr	r3, [pc, #320]	; (8009824 <_vfiprintf_r+0x214>)
 80096e2:	429c      	cmp	r4, r3
 80096e4:	d101      	bne.n	80096ea <_vfiprintf_r+0xda>
 80096e6:	68b4      	ldr	r4, [r6, #8]
 80096e8:	e7a2      	b.n	8009630 <_vfiprintf_r+0x20>
 80096ea:	4b4f      	ldr	r3, [pc, #316]	; (8009828 <_vfiprintf_r+0x218>)
 80096ec:	429c      	cmp	r4, r3
 80096ee:	bf08      	it	eq
 80096f0:	68f4      	ldreq	r4, [r6, #12]
 80096f2:	e79d      	b.n	8009630 <_vfiprintf_r+0x20>
 80096f4:	4621      	mov	r1, r4
 80096f6:	4630      	mov	r0, r6
 80096f8:	f7fe fbe2 	bl	8007ec0 <__swsetup_r>
 80096fc:	2800      	cmp	r0, #0
 80096fe:	d09d      	beq.n	800963c <_vfiprintf_r+0x2c>
 8009700:	f04f 30ff 	mov.w	r0, #4294967295
 8009704:	b01d      	add	sp, #116	; 0x74
 8009706:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800970a:	46a8      	mov	r8, r5
 800970c:	e7a2      	b.n	8009654 <_vfiprintf_r+0x44>
 800970e:	4a44      	ldr	r2, [pc, #272]	; (8009820 <_vfiprintf_r+0x210>)
 8009710:	1a80      	subs	r0, r0, r2
 8009712:	fa0b f000 	lsl.w	r0, fp, r0
 8009716:	4318      	orrs	r0, r3
 8009718:	9004      	str	r0, [sp, #16]
 800971a:	4645      	mov	r5, r8
 800971c:	e7be      	b.n	800969c <_vfiprintf_r+0x8c>
 800971e:	9a03      	ldr	r2, [sp, #12]
 8009720:	1d11      	adds	r1, r2, #4
 8009722:	6812      	ldr	r2, [r2, #0]
 8009724:	9103      	str	r1, [sp, #12]
 8009726:	2a00      	cmp	r2, #0
 8009728:	db01      	blt.n	800972e <_vfiprintf_r+0x11e>
 800972a:	9207      	str	r2, [sp, #28]
 800972c:	e004      	b.n	8009738 <_vfiprintf_r+0x128>
 800972e:	4252      	negs	r2, r2
 8009730:	f043 0302 	orr.w	r3, r3, #2
 8009734:	9207      	str	r2, [sp, #28]
 8009736:	9304      	str	r3, [sp, #16]
 8009738:	f898 3000 	ldrb.w	r3, [r8]
 800973c:	2b2e      	cmp	r3, #46	; 0x2e
 800973e:	d10e      	bne.n	800975e <_vfiprintf_r+0x14e>
 8009740:	f898 3001 	ldrb.w	r3, [r8, #1]
 8009744:	2b2a      	cmp	r3, #42	; 0x2a
 8009746:	d138      	bne.n	80097ba <_vfiprintf_r+0x1aa>
 8009748:	9b03      	ldr	r3, [sp, #12]
 800974a:	1d1a      	adds	r2, r3, #4
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	9203      	str	r2, [sp, #12]
 8009750:	2b00      	cmp	r3, #0
 8009752:	bfb8      	it	lt
 8009754:	f04f 33ff 	movlt.w	r3, #4294967295
 8009758:	f108 0802 	add.w	r8, r8, #2
 800975c:	9305      	str	r3, [sp, #20]
 800975e:	4d33      	ldr	r5, [pc, #204]	; (800982c <_vfiprintf_r+0x21c>)
 8009760:	f898 1000 	ldrb.w	r1, [r8]
 8009764:	2203      	movs	r2, #3
 8009766:	4628      	mov	r0, r5
 8009768:	f7f9 f9a2 	bl	8002ab0 <memchr>
 800976c:	b140      	cbz	r0, 8009780 <_vfiprintf_r+0x170>
 800976e:	2340      	movs	r3, #64	; 0x40
 8009770:	1b40      	subs	r0, r0, r5
 8009772:	fa03 f000 	lsl.w	r0, r3, r0
 8009776:	9b04      	ldr	r3, [sp, #16]
 8009778:	4303      	orrs	r3, r0
 800977a:	f108 0801 	add.w	r8, r8, #1
 800977e:	9304      	str	r3, [sp, #16]
 8009780:	f898 1000 	ldrb.w	r1, [r8]
 8009784:	482a      	ldr	r0, [pc, #168]	; (8009830 <_vfiprintf_r+0x220>)
 8009786:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800978a:	2206      	movs	r2, #6
 800978c:	f108 0701 	add.w	r7, r8, #1
 8009790:	f7f9 f98e 	bl	8002ab0 <memchr>
 8009794:	2800      	cmp	r0, #0
 8009796:	d037      	beq.n	8009808 <_vfiprintf_r+0x1f8>
 8009798:	4b26      	ldr	r3, [pc, #152]	; (8009834 <_vfiprintf_r+0x224>)
 800979a:	bb1b      	cbnz	r3, 80097e4 <_vfiprintf_r+0x1d4>
 800979c:	9b03      	ldr	r3, [sp, #12]
 800979e:	3307      	adds	r3, #7
 80097a0:	f023 0307 	bic.w	r3, r3, #7
 80097a4:	3308      	adds	r3, #8
 80097a6:	9303      	str	r3, [sp, #12]
 80097a8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80097aa:	444b      	add	r3, r9
 80097ac:	9309      	str	r3, [sp, #36]	; 0x24
 80097ae:	e750      	b.n	8009652 <_vfiprintf_r+0x42>
 80097b0:	fb05 3202 	mla	r2, r5, r2, r3
 80097b4:	2001      	movs	r0, #1
 80097b6:	4688      	mov	r8, r1
 80097b8:	e78a      	b.n	80096d0 <_vfiprintf_r+0xc0>
 80097ba:	2300      	movs	r3, #0
 80097bc:	f108 0801 	add.w	r8, r8, #1
 80097c0:	9305      	str	r3, [sp, #20]
 80097c2:	4619      	mov	r1, r3
 80097c4:	250a      	movs	r5, #10
 80097c6:	4640      	mov	r0, r8
 80097c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 80097cc:	3a30      	subs	r2, #48	; 0x30
 80097ce:	2a09      	cmp	r2, #9
 80097d0:	d903      	bls.n	80097da <_vfiprintf_r+0x1ca>
 80097d2:	2b00      	cmp	r3, #0
 80097d4:	d0c3      	beq.n	800975e <_vfiprintf_r+0x14e>
 80097d6:	9105      	str	r1, [sp, #20]
 80097d8:	e7c1      	b.n	800975e <_vfiprintf_r+0x14e>
 80097da:	fb05 2101 	mla	r1, r5, r1, r2
 80097de:	2301      	movs	r3, #1
 80097e0:	4680      	mov	r8, r0
 80097e2:	e7f0      	b.n	80097c6 <_vfiprintf_r+0x1b6>
 80097e4:	ab03      	add	r3, sp, #12
 80097e6:	9300      	str	r3, [sp, #0]
 80097e8:	4622      	mov	r2, r4
 80097ea:	4b13      	ldr	r3, [pc, #76]	; (8009838 <_vfiprintf_r+0x228>)
 80097ec:	a904      	add	r1, sp, #16
 80097ee:	4630      	mov	r0, r6
 80097f0:	f7fd feac 	bl	800754c <_printf_float>
 80097f4:	f1b0 3fff 	cmp.w	r0, #4294967295
 80097f8:	4681      	mov	r9, r0
 80097fa:	d1d5      	bne.n	80097a8 <_vfiprintf_r+0x198>
 80097fc:	89a3      	ldrh	r3, [r4, #12]
 80097fe:	065b      	lsls	r3, r3, #25
 8009800:	f53f af7e 	bmi.w	8009700 <_vfiprintf_r+0xf0>
 8009804:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009806:	e77d      	b.n	8009704 <_vfiprintf_r+0xf4>
 8009808:	ab03      	add	r3, sp, #12
 800980a:	9300      	str	r3, [sp, #0]
 800980c:	4622      	mov	r2, r4
 800980e:	4b0a      	ldr	r3, [pc, #40]	; (8009838 <_vfiprintf_r+0x228>)
 8009810:	a904      	add	r1, sp, #16
 8009812:	4630      	mov	r0, r6
 8009814:	f7fe f950 	bl	8007ab8 <_printf_i>
 8009818:	e7ec      	b.n	80097f4 <_vfiprintf_r+0x1e4>
 800981a:	bf00      	nop
 800981c:	080232d4 	.word	0x080232d4
 8009820:	08023414 	.word	0x08023414
 8009824:	080232f4 	.word	0x080232f4
 8009828:	080232b4 	.word	0x080232b4
 800982c:	0802341a 	.word	0x0802341a
 8009830:	0802341e 	.word	0x0802341e
 8009834:	0800754d 	.word	0x0800754d
 8009838:	080095eb 	.word	0x080095eb

0800983c <_putc_r>:
 800983c:	b570      	push	{r4, r5, r6, lr}
 800983e:	460d      	mov	r5, r1
 8009840:	4614      	mov	r4, r2
 8009842:	4606      	mov	r6, r0
 8009844:	b118      	cbz	r0, 800984e <_putc_r+0x12>
 8009846:	6983      	ldr	r3, [r0, #24]
 8009848:	b90b      	cbnz	r3, 800984e <_putc_r+0x12>
 800984a:	f7ff fadd 	bl	8008e08 <__sinit>
 800984e:	4b13      	ldr	r3, [pc, #76]	; (800989c <_putc_r+0x60>)
 8009850:	429c      	cmp	r4, r3
 8009852:	d112      	bne.n	800987a <_putc_r+0x3e>
 8009854:	6874      	ldr	r4, [r6, #4]
 8009856:	68a3      	ldr	r3, [r4, #8]
 8009858:	3b01      	subs	r3, #1
 800985a:	2b00      	cmp	r3, #0
 800985c:	60a3      	str	r3, [r4, #8]
 800985e:	da16      	bge.n	800988e <_putc_r+0x52>
 8009860:	69a2      	ldr	r2, [r4, #24]
 8009862:	4293      	cmp	r3, r2
 8009864:	db02      	blt.n	800986c <_putc_r+0x30>
 8009866:	b2eb      	uxtb	r3, r5
 8009868:	2b0a      	cmp	r3, #10
 800986a:	d110      	bne.n	800988e <_putc_r+0x52>
 800986c:	4622      	mov	r2, r4
 800986e:	4629      	mov	r1, r5
 8009870:	4630      	mov	r0, r6
 8009872:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009876:	f7fe bad1 	b.w	8007e1c <__swbuf_r>
 800987a:	4b09      	ldr	r3, [pc, #36]	; (80098a0 <_putc_r+0x64>)
 800987c:	429c      	cmp	r4, r3
 800987e:	d101      	bne.n	8009884 <_putc_r+0x48>
 8009880:	68b4      	ldr	r4, [r6, #8]
 8009882:	e7e8      	b.n	8009856 <_putc_r+0x1a>
 8009884:	4b07      	ldr	r3, [pc, #28]	; (80098a4 <_putc_r+0x68>)
 8009886:	429c      	cmp	r4, r3
 8009888:	bf08      	it	eq
 800988a:	68f4      	ldreq	r4, [r6, #12]
 800988c:	e7e3      	b.n	8009856 <_putc_r+0x1a>
 800988e:	6823      	ldr	r3, [r4, #0]
 8009890:	1c5a      	adds	r2, r3, #1
 8009892:	6022      	str	r2, [r4, #0]
 8009894:	701d      	strb	r5, [r3, #0]
 8009896:	b2e8      	uxtb	r0, r5
 8009898:	bd70      	pop	{r4, r5, r6, pc}
 800989a:	bf00      	nop
 800989c:	080232d4 	.word	0x080232d4
 80098a0:	080232f4 	.word	0x080232f4
 80098a4:	080232b4 	.word	0x080232b4

080098a8 <__sread>:
 80098a8:	b510      	push	{r4, lr}
 80098aa:	460c      	mov	r4, r1
 80098ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80098b0:	f000 f8a6 	bl	8009a00 <_read_r>
 80098b4:	2800      	cmp	r0, #0
 80098b6:	bfab      	itete	ge
 80098b8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 80098ba:	89a3      	ldrhlt	r3, [r4, #12]
 80098bc:	181b      	addge	r3, r3, r0
 80098be:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 80098c2:	bfac      	ite	ge
 80098c4:	6563      	strge	r3, [r4, #84]	; 0x54
 80098c6:	81a3      	strhlt	r3, [r4, #12]
 80098c8:	bd10      	pop	{r4, pc}

080098ca <__swrite>:
 80098ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80098ce:	461f      	mov	r7, r3
 80098d0:	898b      	ldrh	r3, [r1, #12]
 80098d2:	05db      	lsls	r3, r3, #23
 80098d4:	4605      	mov	r5, r0
 80098d6:	460c      	mov	r4, r1
 80098d8:	4616      	mov	r6, r2
 80098da:	d505      	bpl.n	80098e8 <__swrite+0x1e>
 80098dc:	2302      	movs	r3, #2
 80098de:	2200      	movs	r2, #0
 80098e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80098e4:	f000 f868 	bl	80099b8 <_lseek_r>
 80098e8:	89a3      	ldrh	r3, [r4, #12]
 80098ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80098ee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80098f2:	81a3      	strh	r3, [r4, #12]
 80098f4:	4632      	mov	r2, r6
 80098f6:	463b      	mov	r3, r7
 80098f8:	4628      	mov	r0, r5
 80098fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80098fe:	f000 b817 	b.w	8009930 <_write_r>

08009902 <__sseek>:
 8009902:	b510      	push	{r4, lr}
 8009904:	460c      	mov	r4, r1
 8009906:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800990a:	f000 f855 	bl	80099b8 <_lseek_r>
 800990e:	1c43      	adds	r3, r0, #1
 8009910:	89a3      	ldrh	r3, [r4, #12]
 8009912:	bf15      	itete	ne
 8009914:	6560      	strne	r0, [r4, #84]	; 0x54
 8009916:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800991a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800991e:	81a3      	strheq	r3, [r4, #12]
 8009920:	bf18      	it	ne
 8009922:	81a3      	strhne	r3, [r4, #12]
 8009924:	bd10      	pop	{r4, pc}

08009926 <__sclose>:
 8009926:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800992a:	f000 b813 	b.w	8009954 <_close_r>
	...

08009930 <_write_r>:
 8009930:	b538      	push	{r3, r4, r5, lr}
 8009932:	4c07      	ldr	r4, [pc, #28]	; (8009950 <_write_r+0x20>)
 8009934:	4605      	mov	r5, r0
 8009936:	4608      	mov	r0, r1
 8009938:	4611      	mov	r1, r2
 800993a:	2200      	movs	r2, #0
 800993c:	6022      	str	r2, [r4, #0]
 800993e:	461a      	mov	r2, r3
 8009940:	f7fa f9a0 	bl	8003c84 <_write>
 8009944:	1c43      	adds	r3, r0, #1
 8009946:	d102      	bne.n	800994e <_write_r+0x1e>
 8009948:	6823      	ldr	r3, [r4, #0]
 800994a:	b103      	cbz	r3, 800994e <_write_r+0x1e>
 800994c:	602b      	str	r3, [r5, #0]
 800994e:	bd38      	pop	{r3, r4, r5, pc}
 8009950:	20000748 	.word	0x20000748

08009954 <_close_r>:
 8009954:	b538      	push	{r3, r4, r5, lr}
 8009956:	4c06      	ldr	r4, [pc, #24]	; (8009970 <_close_r+0x1c>)
 8009958:	2300      	movs	r3, #0
 800995a:	4605      	mov	r5, r0
 800995c:	4608      	mov	r0, r1
 800995e:	6023      	str	r3, [r4, #0]
 8009960:	f7fa f99e 	bl	8003ca0 <_close>
 8009964:	1c43      	adds	r3, r0, #1
 8009966:	d102      	bne.n	800996e <_close_r+0x1a>
 8009968:	6823      	ldr	r3, [r4, #0]
 800996a:	b103      	cbz	r3, 800996e <_close_r+0x1a>
 800996c:	602b      	str	r3, [r5, #0]
 800996e:	bd38      	pop	{r3, r4, r5, pc}
 8009970:	20000748 	.word	0x20000748

08009974 <_fstat_r>:
 8009974:	b538      	push	{r3, r4, r5, lr}
 8009976:	4c07      	ldr	r4, [pc, #28]	; (8009994 <_fstat_r+0x20>)
 8009978:	2300      	movs	r3, #0
 800997a:	4605      	mov	r5, r0
 800997c:	4608      	mov	r0, r1
 800997e:	4611      	mov	r1, r2
 8009980:	6023      	str	r3, [r4, #0]
 8009982:	f7fa f991 	bl	8003ca8 <_fstat>
 8009986:	1c43      	adds	r3, r0, #1
 8009988:	d102      	bne.n	8009990 <_fstat_r+0x1c>
 800998a:	6823      	ldr	r3, [r4, #0]
 800998c:	b103      	cbz	r3, 8009990 <_fstat_r+0x1c>
 800998e:	602b      	str	r3, [r5, #0]
 8009990:	bd38      	pop	{r3, r4, r5, pc}
 8009992:	bf00      	nop
 8009994:	20000748 	.word	0x20000748

08009998 <_isatty_r>:
 8009998:	b538      	push	{r3, r4, r5, lr}
 800999a:	4c06      	ldr	r4, [pc, #24]	; (80099b4 <_isatty_r+0x1c>)
 800999c:	2300      	movs	r3, #0
 800999e:	4605      	mov	r5, r0
 80099a0:	4608      	mov	r0, r1
 80099a2:	6023      	str	r3, [r4, #0]
 80099a4:	f7fa f986 	bl	8003cb4 <_isatty>
 80099a8:	1c43      	adds	r3, r0, #1
 80099aa:	d102      	bne.n	80099b2 <_isatty_r+0x1a>
 80099ac:	6823      	ldr	r3, [r4, #0]
 80099ae:	b103      	cbz	r3, 80099b2 <_isatty_r+0x1a>
 80099b0:	602b      	str	r3, [r5, #0]
 80099b2:	bd38      	pop	{r3, r4, r5, pc}
 80099b4:	20000748 	.word	0x20000748

080099b8 <_lseek_r>:
 80099b8:	b538      	push	{r3, r4, r5, lr}
 80099ba:	4c07      	ldr	r4, [pc, #28]	; (80099d8 <_lseek_r+0x20>)
 80099bc:	4605      	mov	r5, r0
 80099be:	4608      	mov	r0, r1
 80099c0:	4611      	mov	r1, r2
 80099c2:	2200      	movs	r2, #0
 80099c4:	6022      	str	r2, [r4, #0]
 80099c6:	461a      	mov	r2, r3
 80099c8:	f7fa f976 	bl	8003cb8 <_lseek>
 80099cc:	1c43      	adds	r3, r0, #1
 80099ce:	d102      	bne.n	80099d6 <_lseek_r+0x1e>
 80099d0:	6823      	ldr	r3, [r4, #0]
 80099d2:	b103      	cbz	r3, 80099d6 <_lseek_r+0x1e>
 80099d4:	602b      	str	r3, [r5, #0]
 80099d6:	bd38      	pop	{r3, r4, r5, pc}
 80099d8:	20000748 	.word	0x20000748

080099dc <__ascii_mbtowc>:
 80099dc:	b082      	sub	sp, #8
 80099de:	b901      	cbnz	r1, 80099e2 <__ascii_mbtowc+0x6>
 80099e0:	a901      	add	r1, sp, #4
 80099e2:	b142      	cbz	r2, 80099f6 <__ascii_mbtowc+0x1a>
 80099e4:	b14b      	cbz	r3, 80099fa <__ascii_mbtowc+0x1e>
 80099e6:	7813      	ldrb	r3, [r2, #0]
 80099e8:	600b      	str	r3, [r1, #0]
 80099ea:	7812      	ldrb	r2, [r2, #0]
 80099ec:	1c10      	adds	r0, r2, #0
 80099ee:	bf18      	it	ne
 80099f0:	2001      	movne	r0, #1
 80099f2:	b002      	add	sp, #8
 80099f4:	4770      	bx	lr
 80099f6:	4610      	mov	r0, r2
 80099f8:	e7fb      	b.n	80099f2 <__ascii_mbtowc+0x16>
 80099fa:	f06f 0001 	mvn.w	r0, #1
 80099fe:	e7f8      	b.n	80099f2 <__ascii_mbtowc+0x16>

08009a00 <_read_r>:
 8009a00:	b538      	push	{r3, r4, r5, lr}
 8009a02:	4c07      	ldr	r4, [pc, #28]	; (8009a20 <_read_r+0x20>)
 8009a04:	4605      	mov	r5, r0
 8009a06:	4608      	mov	r0, r1
 8009a08:	4611      	mov	r1, r2
 8009a0a:	2200      	movs	r2, #0
 8009a0c:	6022      	str	r2, [r4, #0]
 8009a0e:	461a      	mov	r2, r3
 8009a10:	f7fa f92a 	bl	8003c68 <_read>
 8009a14:	1c43      	adds	r3, r0, #1
 8009a16:	d102      	bne.n	8009a1e <_read_r+0x1e>
 8009a18:	6823      	ldr	r3, [r4, #0]
 8009a1a:	b103      	cbz	r3, 8009a1e <_read_r+0x1e>
 8009a1c:	602b      	str	r3, [r5, #0]
 8009a1e:	bd38      	pop	{r3, r4, r5, pc}
 8009a20:	20000748 	.word	0x20000748

08009a24 <__ascii_wctomb>:
 8009a24:	b149      	cbz	r1, 8009a3a <__ascii_wctomb+0x16>
 8009a26:	2aff      	cmp	r2, #255	; 0xff
 8009a28:	bf85      	ittet	hi
 8009a2a:	238a      	movhi	r3, #138	; 0x8a
 8009a2c:	6003      	strhi	r3, [r0, #0]
 8009a2e:	700a      	strbls	r2, [r1, #0]
 8009a30:	f04f 30ff 	movhi.w	r0, #4294967295
 8009a34:	bf98      	it	ls
 8009a36:	2001      	movls	r0, #1
 8009a38:	4770      	bx	lr
 8009a3a:	4608      	mov	r0, r1
 8009a3c:	4770      	bx	lr
	...

08009a40 <_init>:
 8009a40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a42:	bf00      	nop
 8009a44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a46:	bc08      	pop	{r3}
 8009a48:	469e      	mov	lr, r3
 8009a4a:	4770      	bx	lr

08009a4c <_fini>:
 8009a4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a4e:	bf00      	nop
 8009a50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009a52:	bc08      	pop	{r3}
 8009a54:	469e      	mov	lr, r3
 8009a56:	4770      	bx	lr
