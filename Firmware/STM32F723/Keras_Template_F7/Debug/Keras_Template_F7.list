
Keras_Template_F7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001e0  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e184  080001e0  080001e0  000101e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00065544  0800e364  0800e364  0001e364  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080738a8  080738a8  00090e5c  2**0
                  CONTENTS
  4 .ARM          00000008  080738a8  080738a8  000838a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080738b0  080738b0  00090e5c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080738b0  080738b0  000838b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080738b4  080738b4  000838b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000e5c  20000000  080738b8  00090000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003070  20000e5c  08074714  00090e5c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20003ecc  08074714  00093ecc  2**0
                  ALLOC
 11 .ARM.attributes 00000034  00000000  00000000  00090e5c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b6c8  00000000  00000000  00090e90  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001d86  00000000  00000000  0009c558  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 000008a0  00000000  00000000  0009e2e0  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000788  00000000  00000000  0009eb80  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00022c46  00000000  00000000  0009f308  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000905f  00000000  00000000  000c1f4e  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000dcd25  00000000  00000000  000cafad  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      00006c70  00000000  00000000  001a7cd2  2**0
                  CONTENTS, READONLY
 20 .iar.rtmodel  0000022a  00000000  00000000  001ae942  2**0
                  CONTENTS, READONLY
 21 .iar_vfe_header 00000028  00000000  00000000  001aeb6c  2**2
                  CONTENTS, READONLY
 22 .debug_frame  0000758c  00000000  00000000  001aeb94  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000e5c 	.word	0x20000e5c
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800e34c 	.word	0x0800e34c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000e60 	.word	0x20000e60
 800021c:	0800e34c 	.word	0x0800e34c

08000220 <CRC_Lock>:
 8000220:	f8df 0904 	ldr.w	r0, [pc, #2308]	; 8000b28 <.text_19>
 8000224:	f240 4249 	movw	r2, #1097	; 0x449
 8000228:	6801      	ldr	r1, [r0, #0]
 800022a:	0849      	lsrs	r1, r1, #1
 800022c:	0049      	lsls	r1, r1, #1
 800022e:	6001      	str	r1, [r0, #0]
 8000230:	f8df 08f8 	ldr.w	r0, [pc, #2296]	; 8000b2c <.text_20>
 8000234:	6801      	ldr	r1, [r0, #0]
 8000236:	f3c1 010a 	ubfx	r1, r1, #0, #11
 800023a:	4291      	cmp	r1, r2
 800023c:	d115      	bne.n	800026a <CRC_Lock+0x4a>
 800023e:	2001      	movs	r0, #1
 8000240:	2200      	movs	r2, #0
 8000242:	2100      	movs	r1, #0
 8000244:	4310      	orrs	r0, r2
 8000246:	4308      	orrs	r0, r1
 8000248:	d01d      	beq.n	8000286 <CRC_Lock+0x66>
 800024a:	f8df 18e4 	ldr.w	r1, [pc, #2276]	; 8000b30 <.text_21>
 800024e:	2201      	movs	r2, #1
 8000250:	608a      	str	r2, [r1, #8]
 8000252:	6888      	ldr	r0, [r1, #8]
 8000254:	2800      	cmp	r0, #0
 8000256:	d1fc      	bne.n	8000252 <CRC_Lock+0x32>
 8000258:	f8df 28d8 	ldr.w	r2, [pc, #2264]	; 8000b34 <.text_22>
 800025c:	f8df 38d8 	ldr.w	r3, [pc, #2264]	; 8000b38 <.text_23>
 8000260:	600a      	str	r2, [r1, #0]
 8000262:	6809      	ldr	r1, [r1, #0]
 8000264:	4299      	cmp	r1, r3
 8000266:	d026      	beq.n	80002b6 <CRC_Lock+0x96>
 8000268:	e7fe      	b.n	8000268 <CRC_Lock+0x48>
 800026a:	2000      	movs	r0, #0
 800026c:	f240 4c51 	movw	ip, #1105	; 0x451
 8000270:	4561      	cmp	r1, ip
 8000272:	bf08      	it	eq
 8000274:	2201      	moveq	r2, #1
 8000276:	d0e4      	beq.n	8000242 <CRC_Lock+0x22>
 8000278:	2200      	movs	r2, #0
 800027a:	f240 4352 	movw	r3, #1106	; 0x452
 800027e:	4299      	cmp	r1, r3
 8000280:	d1df      	bne.n	8000242 <CRC_Lock+0x22>
 8000282:	2101      	movs	r1, #1
 8000284:	e7de      	b.n	8000244 <CRC_Lock+0x24>
 8000286:	f8df 08b4 	ldr.w	r0, [pc, #2228]	; 8000b3c <.text_24>
 800028a:	6801      	ldr	r1, [r0, #0]
 800028c:	f3c1 010a 	ubfx	r1, r1, #0, #11
 8000290:	f5b1 6f8a 	cmp.w	r1, #1104	; 0x450
 8000294:	d10f      	bne.n	80002b6 <CRC_Lock+0x96>
 8000296:	f8df 18a8 	ldr.w	r1, [pc, #2216]	; 8000b40 <.text_25>
 800029a:	2201      	movs	r2, #1
 800029c:	608a      	str	r2, [r1, #8]
 800029e:	6888      	ldr	r0, [r1, #8]
 80002a0:	2800      	cmp	r0, #0
 80002a2:	d1fc      	bne.n	800029e <CRC_Lock+0x7e>
 80002a4:	f8df 288c 	ldr.w	r2, [pc, #2188]	; 8000b34 <.text_22>
 80002a8:	f8df 388c 	ldr.w	r3, [pc, #2188]	; 8000b38 <.text_23>
 80002ac:	600a      	str	r2, [r1, #0]
 80002ae:	6809      	ldr	r1, [r1, #0]
 80002b0:	4299      	cmp	r1, r3
 80002b2:	d000      	beq.n	80002b6 <CRC_Lock+0x96>
 80002b4:	e7fe      	b.n	80002b4 <CRC_Lock+0x94>
 80002b6:	4770      	bx	lr

080002b8 <_ai_platform_get_io_buffers_info>:
 80002b8:	e92d 4ff2 	stmdb	sp!, {r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80002bc:	2500      	movs	r5, #0
 80002be:	46aa      	mov	sl, r5
 80002c0:	b082      	sub	sp, #8
 80002c2:	4607      	mov	r7, r0
 80002c4:	46ab      	mov	fp, r5
 80002c6:	46d0      	mov	r8, sl
 80002c8:	46d1      	mov	r9, sl
 80002ca:	e028      	b.n	800031e <_ai_platform_get_io_buffers_info+0x66>
 80002cc:	2000      	movs	r0, #0
 80002ce:	e01c      	b.n	800030a <_ai_platform_get_io_buffers_info+0x52>
 80002d0:	f850 400a 	ldr.w	r4, [r0, sl]
 80002d4:	b364      	cbz	r4, 8000330 <_ai_platform_get_io_buffers_info+0x78>
 80002d6:	68b8      	ldr	r0, [r7, #8]
 80002d8:	6882      	ldr	r2, [r0, #8]
 80002da:	4442      	add	r2, r8
 80002dc:	6841      	ldr	r1, [r0, #4]
 80002de:	9200      	str	r2, [sp, #0]
 80002e0:	69a3      	ldr	r3, [r4, #24]
 80002e2:	6818      	ldr	r0, [r3, #0]
 80002e4:	eb01 0609 	add.w	r6, r1, r9
 80002e8:	f006 fc4e 	bl	8006b88 <ai_array_to_buffer_fmt>
 80002ec:	2101      	movs	r1, #1
 80002ee:	6030      	str	r0, [r6, #0]
 80002f0:	80b1      	strh	r1, [r6, #4]
 80002f2:	68e0      	ldr	r0, [r4, #12]
 80002f4:	68c2      	ldr	r2, [r0, #12]
 80002f6:	80f2      	strh	r2, [r6, #6]
 80002f8:	6881      	ldr	r1, [r0, #8]
 80002fa:	8131      	strh	r1, [r6, #8]
 80002fc:	6840      	ldr	r0, [r0, #4]
 80002fe:	60f0      	str	r0, [r6, #12]
 8000300:	69a1      	ldr	r1, [r4, #24]
 8000302:	688a      	ldr	r2, [r1, #8]
 8000304:	6132      	str	r2, [r6, #16]
 8000306:	9800      	ldr	r0, [sp, #0]
 8000308:	b9e0      	cbnz	r0, 8000344 <_ai_platform_get_io_buffers_info+0x8c>
 800030a:	6170      	str	r0, [r6, #20]
 800030c:	1c6d      	adds	r5, r5, #1
 800030e:	f10b 0b01 	add.w	fp, fp, #1
 8000312:	f109 0918 	add.w	r9, r9, #24
 8000316:	f108 0808 	add.w	r8, r8, #8
 800031a:	f10a 0a04 	add.w	sl, sl, #4
 800031e:	2f00      	cmp	r7, #0
 8000320:	bf14      	ite	ne
 8000322:	8838      	ldrhne	r0, [r7, #0]
 8000324:	2000      	moveq	r0, #0
 8000326:	4583      	cmp	fp, r0
 8000328:	d202      	bcs.n	8000330 <_ai_platform_get_io_buffers_info+0x78>
 800032a:	6878      	ldr	r0, [r7, #4]
 800032c:	2800      	cmp	r0, #0
 800032e:	d1cf      	bne.n	80002d0 <_ai_platform_get_io_buffers_info+0x18>
 8000330:	b2a8      	uxth	r0, r5
 8000332:	b118      	cbz	r0, 800033c <_ai_platform_get_io_buffers_info+0x84>
 8000334:	68b9      	ldr	r1, [r7, #8]
 8000336:	9802      	ldr	r0, [sp, #8]
 8000338:	684a      	ldr	r2, [r1, #4]
 800033a:	6002      	str	r2, [r0, #0]
 800033c:	b2a8      	uxth	r0, r5
 800033e:	b003      	add	sp, #12
 8000340:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000344:	9900      	ldr	r1, [sp, #0]
 8000346:	2000      	movs	r0, #0
 8000348:	6008      	str	r0, [r1, #0]
 800034a:	9a00      	ldr	r2, [sp, #0]
 800034c:	6820      	ldr	r0, [r4, #0]
 800034e:	2800      	cmp	r0, #0
 8000350:	6050      	str	r0, [r2, #4]
 8000352:	bf1c      	itt	ne
 8000354:	8840      	ldrhne	r0, [r0, #2]
 8000356:	2800      	cmpne	r0, #0
 8000358:	d0b8      	beq.n	80002cc <_ai_platform_get_io_buffers_info+0x14>
 800035a:	9a00      	ldr	r2, [sp, #0]
 800035c:	2101      	movs	r1, #1
 800035e:	6011      	str	r1, [r2, #0]
 8000360:	9800      	ldr	r0, [sp, #0]
 8000362:	e7d2      	b.n	800030a <_ai_platform_get_io_buffers_info+0x52>

08000364 <_platform_network_state_setup>:
 8000364:	b470      	push	{r4, r5, r6}
 8000366:	68d3      	ldr	r3, [r2, #12]
 8000368:	6955      	ldr	r5, [r2, #20]
 800036a:	68dc      	ldr	r4, [r3, #12]
 800036c:	68eb      	ldr	r3, [r5, #12]
 800036e:	435c      	muls	r4, r3
 8000370:	6084      	str	r4, [r0, #8]
 8000372:	888e      	ldrh	r6, [r1, #4]
 8000374:	4374      	muls	r4, r6
 8000376:	60c4      	str	r4, [r0, #12]
 8000378:	6909      	ldr	r1, [r1, #16]
 800037a:	68c3      	ldr	r3, [r0, #12]
 800037c:	6041      	str	r1, [r0, #4]
 800037e:	4419      	add	r1, r3
 8000380:	6001      	str	r1, [r0, #0]
 8000382:	6992      	ldr	r2, [r2, #24]
 8000384:	6814      	ldr	r4, [r2, #0]
 8000386:	00a5      	lsls	r5, r4, #2
 8000388:	d407      	bmi.n	800039a <_platform_network_state_setup+0x36>
 800038a:	6894      	ldr	r4, [r2, #8]
 800038c:	68d1      	ldr	r1, [r2, #12]
 800038e:	6843      	ldr	r3, [r0, #4]
 8000390:	1a64      	subs	r4, r4, r1
 8000392:	1919      	adds	r1, r3, r4
 8000394:	6091      	str	r1, [r2, #8]
 8000396:	6840      	ldr	r0, [r0, #4]
 8000398:	60d0      	str	r0, [r2, #12]
 800039a:	bc70      	pop	{r4, r5, r6}
 800039c:	4770      	bx	lr

0800039e <ai_platform_runtime_get_revision>:
 800039e:	f8df 0788 	ldr.w	r0, [pc, #1928]	; 8000b28 <.text_19>
 80003a2:	f240 4249 	movw	r2, #1097	; 0x449
 80003a6:	6801      	ldr	r1, [r0, #0]
 80003a8:	0849      	lsrs	r1, r1, #1
 80003aa:	0049      	lsls	r1, r1, #1
 80003ac:	6001      	str	r1, [r0, #0]
 80003ae:	f8df 077c 	ldr.w	r0, [pc, #1916]	; 8000b2c <.text_20>
 80003b2:	6801      	ldr	r1, [r0, #0]
 80003b4:	f3c1 010a 	ubfx	r1, r1, #0, #11
 80003b8:	4291      	cmp	r1, r2
 80003ba:	d115      	bne.n	80003e8 <ai_platform_runtime_get_revision+0x4a>
 80003bc:	2001      	movs	r0, #1
 80003be:	2200      	movs	r2, #0
 80003c0:	2100      	movs	r1, #0
 80003c2:	4310      	orrs	r0, r2
 80003c4:	4308      	orrs	r0, r1
 80003c6:	d01d      	beq.n	8000404 <ai_platform_runtime_get_revision+0x66>
 80003c8:	f8df 1764 	ldr.w	r1, [pc, #1892]	; 8000b30 <.text_21>
 80003cc:	2201      	movs	r2, #1
 80003ce:	608a      	str	r2, [r1, #8]
 80003d0:	6888      	ldr	r0, [r1, #8]
 80003d2:	2800      	cmp	r0, #0
 80003d4:	d1fc      	bne.n	80003d0 <ai_platform_runtime_get_revision+0x32>
 80003d6:	f8df 275c 	ldr.w	r2, [pc, #1884]	; 8000b34 <.text_22>
 80003da:	f8df 375c 	ldr.w	r3, [pc, #1884]	; 8000b38 <.text_23>
 80003de:	600a      	str	r2, [r1, #0]
 80003e0:	6809      	ldr	r1, [r1, #0]
 80003e2:	4299      	cmp	r1, r3
 80003e4:	d026      	beq.n	8000434 <ai_platform_runtime_get_revision+0x96>
 80003e6:	e7fe      	b.n	80003e6 <ai_platform_runtime_get_revision+0x48>
 80003e8:	2000      	movs	r0, #0
 80003ea:	f240 4c51 	movw	ip, #1105	; 0x451
 80003ee:	4561      	cmp	r1, ip
 80003f0:	bf08      	it	eq
 80003f2:	2201      	moveq	r2, #1
 80003f4:	d0e4      	beq.n	80003c0 <ai_platform_runtime_get_revision+0x22>
 80003f6:	2200      	movs	r2, #0
 80003f8:	f240 4352 	movw	r3, #1106	; 0x452
 80003fc:	4299      	cmp	r1, r3
 80003fe:	d1df      	bne.n	80003c0 <ai_platform_runtime_get_revision+0x22>
 8000400:	2101      	movs	r1, #1
 8000402:	e7de      	b.n	80003c2 <ai_platform_runtime_get_revision+0x24>
 8000404:	f8df 0734 	ldr.w	r0, [pc, #1844]	; 8000b3c <.text_24>
 8000408:	6801      	ldr	r1, [r0, #0]
 800040a:	f3c1 010a 	ubfx	r1, r1, #0, #11
 800040e:	f5b1 6f8a 	cmp.w	r1, #1104	; 0x450
 8000412:	d10f      	bne.n	8000434 <ai_platform_runtime_get_revision+0x96>
 8000414:	f8df 1728 	ldr.w	r1, [pc, #1832]	; 8000b40 <.text_25>
 8000418:	2201      	movs	r2, #1
 800041a:	608a      	str	r2, [r1, #8]
 800041c:	6888      	ldr	r0, [r1, #8]
 800041e:	2800      	cmp	r0, #0
 8000420:	d1fc      	bne.n	800041c <ai_platform_runtime_get_revision+0x7e>
 8000422:	f8df 2710 	ldr.w	r2, [pc, #1808]	; 8000b34 <.text_22>
 8000426:	f8df 3710 	ldr.w	r3, [pc, #1808]	; 8000b38 <.text_23>
 800042a:	600a      	str	r2, [r1, #0]
 800042c:	6809      	ldr	r1, [r1, #0]
 800042e:	4299      	cmp	r1, r3
 8000430:	d000      	beq.n	8000434 <ai_platform_runtime_get_revision+0x96>
 8000432:	e7fe      	b.n	8000432 <ai_platform_runtime_get_revision+0x94>
 8000434:	a0a3      	add	r0, pc, #652	; (adr r0, 80006c4 <.text_11>)
 8000436:	4770      	bx	lr

08000438 <ai_platform_runtime_get_version>:
 8000438:	f8df 06ec 	ldr.w	r0, [pc, #1772]	; 8000b28 <.text_19>
 800043c:	f240 4249 	movw	r2, #1097	; 0x449
 8000440:	6801      	ldr	r1, [r0, #0]
 8000442:	0849      	lsrs	r1, r1, #1
 8000444:	0049      	lsls	r1, r1, #1
 8000446:	6001      	str	r1, [r0, #0]
 8000448:	f8df 06e0 	ldr.w	r0, [pc, #1760]	; 8000b2c <.text_20>
 800044c:	6801      	ldr	r1, [r0, #0]
 800044e:	f3c1 010a 	ubfx	r1, r1, #0, #11
 8000452:	4291      	cmp	r1, r2
 8000454:	d115      	bne.n	8000482 <ai_platform_runtime_get_version+0x4a>
 8000456:	2001      	movs	r0, #1
 8000458:	2200      	movs	r2, #0
 800045a:	2100      	movs	r1, #0
 800045c:	4310      	orrs	r0, r2
 800045e:	4308      	orrs	r0, r1
 8000460:	d01d      	beq.n	800049e <ai_platform_runtime_get_version+0x66>
 8000462:	f8df 16cc 	ldr.w	r1, [pc, #1740]	; 8000b30 <.text_21>
 8000466:	2201      	movs	r2, #1
 8000468:	608a      	str	r2, [r1, #8]
 800046a:	6888      	ldr	r0, [r1, #8]
 800046c:	2800      	cmp	r0, #0
 800046e:	d1fc      	bne.n	800046a <ai_platform_runtime_get_version+0x32>
 8000470:	f8df 26c0 	ldr.w	r2, [pc, #1728]	; 8000b34 <.text_22>
 8000474:	f8df 36c0 	ldr.w	r3, [pc, #1728]	; 8000b38 <.text_23>
 8000478:	600a      	str	r2, [r1, #0]
 800047a:	6809      	ldr	r1, [r1, #0]
 800047c:	4299      	cmp	r1, r3
 800047e:	d026      	beq.n	80004ce <ai_platform_runtime_get_version+0x96>
 8000480:	e7fe      	b.n	8000480 <ai_platform_runtime_get_version+0x48>
 8000482:	2000      	movs	r0, #0
 8000484:	f240 4c51 	movw	ip, #1105	; 0x451
 8000488:	4561      	cmp	r1, ip
 800048a:	bf08      	it	eq
 800048c:	2201      	moveq	r2, #1
 800048e:	d0e4      	beq.n	800045a <ai_platform_runtime_get_version+0x22>
 8000490:	2200      	movs	r2, #0
 8000492:	f240 4352 	movw	r3, #1106	; 0x452
 8000496:	4299      	cmp	r1, r3
 8000498:	d1df      	bne.n	800045a <ai_platform_runtime_get_version+0x22>
 800049a:	2101      	movs	r1, #1
 800049c:	e7de      	b.n	800045c <ai_platform_runtime_get_version+0x24>
 800049e:	f8df 069c 	ldr.w	r0, [pc, #1692]	; 8000b3c <.text_24>
 80004a2:	6801      	ldr	r1, [r0, #0]
 80004a4:	f3c1 010a 	ubfx	r1, r1, #0, #11
 80004a8:	f5b1 6f8a 	cmp.w	r1, #1104	; 0x450
 80004ac:	d10f      	bne.n	80004ce <ai_platform_runtime_get_version+0x96>
 80004ae:	f8df 1690 	ldr.w	r1, [pc, #1680]	; 8000b40 <.text_25>
 80004b2:	2201      	movs	r2, #1
 80004b4:	608a      	str	r2, [r1, #8]
 80004b6:	6888      	ldr	r0, [r1, #8]
 80004b8:	2800      	cmp	r0, #0
 80004ba:	d1fc      	bne.n	80004b6 <ai_platform_runtime_get_version+0x7e>
 80004bc:	f8df 2674 	ldr.w	r2, [pc, #1652]	; 8000b34 <.text_22>
 80004c0:	f8df 3674 	ldr.w	r3, [pc, #1652]	; 8000b38 <.text_23>
 80004c4:	600a      	str	r2, [r1, #0]
 80004c6:	6809      	ldr	r1, [r1, #0]
 80004c8:	4299      	cmp	r1, r3
 80004ca:	d000      	beq.n	80004ce <ai_platform_runtime_get_version+0x96>
 80004cc:	e7fe      	b.n	80004cc <ai_platform_runtime_get_version+0x94>
 80004ce:	f60f 20b0 	addw	r0, pc, #2736	; 0xab0
 80004d2:	6800      	ldr	r0, [r0, #0]
 80004d4:	4770      	bx	lr

080004d6 <ai_platform_api_get_version>:
 80004d6:	f8df 0650 	ldr.w	r0, [pc, #1616]	; 8000b28 <.text_19>
 80004da:	f240 4249 	movw	r2, #1097	; 0x449
 80004de:	6801      	ldr	r1, [r0, #0]
 80004e0:	0849      	lsrs	r1, r1, #1
 80004e2:	0049      	lsls	r1, r1, #1
 80004e4:	6001      	str	r1, [r0, #0]
 80004e6:	f8df 0644 	ldr.w	r0, [pc, #1604]	; 8000b2c <.text_20>
 80004ea:	6801      	ldr	r1, [r0, #0]
 80004ec:	f3c1 010a 	ubfx	r1, r1, #0, #11
 80004f0:	4291      	cmp	r1, r2
 80004f2:	d115      	bne.n	8000520 <ai_platform_api_get_version+0x4a>
 80004f4:	2001      	movs	r0, #1
 80004f6:	2200      	movs	r2, #0
 80004f8:	2100      	movs	r1, #0
 80004fa:	4310      	orrs	r0, r2
 80004fc:	4308      	orrs	r0, r1
 80004fe:	d01d      	beq.n	800053c <ai_platform_api_get_version+0x66>
 8000500:	f8df 162c 	ldr.w	r1, [pc, #1580]	; 8000b30 <.text_21>
 8000504:	2201      	movs	r2, #1
 8000506:	608a      	str	r2, [r1, #8]
 8000508:	6888      	ldr	r0, [r1, #8]
 800050a:	2800      	cmp	r0, #0
 800050c:	d1fc      	bne.n	8000508 <ai_platform_api_get_version+0x32>
 800050e:	f8df 2624 	ldr.w	r2, [pc, #1572]	; 8000b34 <.text_22>
 8000512:	f8df 3624 	ldr.w	r3, [pc, #1572]	; 8000b38 <.text_23>
 8000516:	600a      	str	r2, [r1, #0]
 8000518:	6809      	ldr	r1, [r1, #0]
 800051a:	4299      	cmp	r1, r3
 800051c:	d026      	beq.n	800056c <ai_platform_api_get_version+0x96>
 800051e:	e7fe      	b.n	800051e <ai_platform_api_get_version+0x48>
 8000520:	2000      	movs	r0, #0
 8000522:	f240 4c51 	movw	ip, #1105	; 0x451
 8000526:	4561      	cmp	r1, ip
 8000528:	bf08      	it	eq
 800052a:	2201      	moveq	r2, #1
 800052c:	d0e4      	beq.n	80004f8 <ai_platform_api_get_version+0x22>
 800052e:	2200      	movs	r2, #0
 8000530:	f240 4352 	movw	r3, #1106	; 0x452
 8000534:	4299      	cmp	r1, r3
 8000536:	d1df      	bne.n	80004f8 <ai_platform_api_get_version+0x22>
 8000538:	2101      	movs	r1, #1
 800053a:	e7de      	b.n	80004fa <ai_platform_api_get_version+0x24>
 800053c:	f8df 05fc 	ldr.w	r0, [pc, #1532]	; 8000b3c <.text_24>
 8000540:	6801      	ldr	r1, [r0, #0]
 8000542:	f3c1 010a 	ubfx	r1, r1, #0, #11
 8000546:	f5b1 6f8a 	cmp.w	r1, #1104	; 0x450
 800054a:	d10f      	bne.n	800056c <ai_platform_api_get_version+0x96>
 800054c:	f8df 15f0 	ldr.w	r1, [pc, #1520]	; 8000b40 <.text_25>
 8000550:	2201      	movs	r2, #1
 8000552:	608a      	str	r2, [r1, #8]
 8000554:	6888      	ldr	r0, [r1, #8]
 8000556:	2800      	cmp	r0, #0
 8000558:	d1fc      	bne.n	8000554 <ai_platform_api_get_version+0x7e>
 800055a:	f8df 25d8 	ldr.w	r2, [pc, #1496]	; 8000b34 <.text_22>
 800055e:	f8df 35d8 	ldr.w	r3, [pc, #1496]	; 8000b38 <.text_23>
 8000562:	600a      	str	r2, [r1, #0]
 8000564:	6809      	ldr	r1, [r1, #0]
 8000566:	4299      	cmp	r1, r3
 8000568:	d000      	beq.n	800056c <ai_platform_api_get_version+0x96>
 800056a:	e7fe      	b.n	800056a <ai_platform_api_get_version+0x94>
 800056c:	f60f 2014 	addw	r0, pc, #2580	; 0xa14
 8000570:	6800      	ldr	r0, [r0, #0]
 8000572:	4770      	bx	lr

08000574 <ai_platform_interface_api_get_version>:
 8000574:	f8df 05b0 	ldr.w	r0, [pc, #1456]	; 8000b28 <.text_19>
 8000578:	f240 4249 	movw	r2, #1097	; 0x449
 800057c:	6801      	ldr	r1, [r0, #0]
 800057e:	0849      	lsrs	r1, r1, #1
 8000580:	0049      	lsls	r1, r1, #1
 8000582:	6001      	str	r1, [r0, #0]
 8000584:	f8df 05a4 	ldr.w	r0, [pc, #1444]	; 8000b2c <.text_20>
 8000588:	6801      	ldr	r1, [r0, #0]
 800058a:	f3c1 010a 	ubfx	r1, r1, #0, #11
 800058e:	4291      	cmp	r1, r2
 8000590:	d115      	bne.n	80005be <ai_platform_interface_api_get_version+0x4a>
 8000592:	2001      	movs	r0, #1
 8000594:	2200      	movs	r2, #0
 8000596:	2100      	movs	r1, #0
 8000598:	4310      	orrs	r0, r2
 800059a:	4308      	orrs	r0, r1
 800059c:	d01d      	beq.n	80005da <ai_platform_interface_api_get_version+0x66>
 800059e:	f8df 1590 	ldr.w	r1, [pc, #1424]	; 8000b30 <.text_21>
 80005a2:	2201      	movs	r2, #1
 80005a4:	608a      	str	r2, [r1, #8]
 80005a6:	6888      	ldr	r0, [r1, #8]
 80005a8:	2800      	cmp	r0, #0
 80005aa:	d1fc      	bne.n	80005a6 <ai_platform_interface_api_get_version+0x32>
 80005ac:	f8df 2584 	ldr.w	r2, [pc, #1412]	; 8000b34 <.text_22>
 80005b0:	f8df 3584 	ldr.w	r3, [pc, #1412]	; 8000b38 <.text_23>
 80005b4:	600a      	str	r2, [r1, #0]
 80005b6:	6809      	ldr	r1, [r1, #0]
 80005b8:	4299      	cmp	r1, r3
 80005ba:	d026      	beq.n	800060a <ai_platform_interface_api_get_version+0x96>
 80005bc:	e7fe      	b.n	80005bc <ai_platform_interface_api_get_version+0x48>
 80005be:	2000      	movs	r0, #0
 80005c0:	f240 4c51 	movw	ip, #1105	; 0x451
 80005c4:	4561      	cmp	r1, ip
 80005c6:	bf08      	it	eq
 80005c8:	2201      	moveq	r2, #1
 80005ca:	d0e4      	beq.n	8000596 <ai_platform_interface_api_get_version+0x22>
 80005cc:	2200      	movs	r2, #0
 80005ce:	f240 4352 	movw	r3, #1106	; 0x452
 80005d2:	4299      	cmp	r1, r3
 80005d4:	d1df      	bne.n	8000596 <ai_platform_interface_api_get_version+0x22>
 80005d6:	2101      	movs	r1, #1
 80005d8:	e7de      	b.n	8000598 <ai_platform_interface_api_get_version+0x24>
 80005da:	f8df 0560 	ldr.w	r0, [pc, #1376]	; 8000b3c <.text_24>
 80005de:	6801      	ldr	r1, [r0, #0]
 80005e0:	f3c1 010a 	ubfx	r1, r1, #0, #11
 80005e4:	f5b1 6f8a 	cmp.w	r1, #1104	; 0x450
 80005e8:	d10f      	bne.n	800060a <ai_platform_interface_api_get_version+0x96>
 80005ea:	f8df 1554 	ldr.w	r1, [pc, #1364]	; 8000b40 <.text_25>
 80005ee:	2201      	movs	r2, #1
 80005f0:	608a      	str	r2, [r1, #8]
 80005f2:	6888      	ldr	r0, [r1, #8]
 80005f4:	2800      	cmp	r0, #0
 80005f6:	d1fc      	bne.n	80005f2 <ai_platform_interface_api_get_version+0x7e>
 80005f8:	f8df 2538 	ldr.w	r2, [pc, #1336]	; 8000b34 <.text_22>
 80005fc:	f8df 3538 	ldr.w	r3, [pc, #1336]	; 8000b38 <.text_23>
 8000600:	600a      	str	r2, [r1, #0]
 8000602:	6809      	ldr	r1, [r1, #0]
 8000604:	4299      	cmp	r1, r3
 8000606:	d000      	beq.n	800060a <ai_platform_interface_api_get_version+0x96>
 8000608:	e7fe      	b.n	8000608 <ai_platform_interface_api_get_version+0x94>
 800060a:	f60f 107c 	addw	r0, pc, #2428	; 0x97c
 800060e:	6800      	ldr	r0, [r0, #0]
 8000610:	4770      	bx	lr

08000612 <ai_platform_context_acquire>:
 8000612:	b430      	push	{r4, r5}
 8000614:	b120      	cbz	r0, 8000620 <ai_platform_context_acquire+0xe>
 8000616:	6801      	ldr	r1, [r0, #0]
 8000618:	f8df 2940 	ldr.w	r2, [pc, #2368]	; 8000f5c <.text_27>
 800061c:	4291      	cmp	r1, r2
 800061e:	d000      	beq.n	8000622 <ai_platform_context_acquire+0x10>
 8000620:	2000      	movs	r0, #0
 8000622:	f8df 1504 	ldr.w	r1, [pc, #1284]	; 8000b28 <.text_19>
 8000626:	f240 4449 	movw	r4, #1097	; 0x449
 800062a:	680b      	ldr	r3, [r1, #0]
 800062c:	085b      	lsrs	r3, r3, #1
 800062e:	005b      	lsls	r3, r3, #1
 8000630:	600b      	str	r3, [r1, #0]
 8000632:	f8df 14f8 	ldr.w	r1, [pc, #1272]	; 8000b2c <.text_20>
 8000636:	680a      	ldr	r2, [r1, #0]
 8000638:	f3c2 020a 	ubfx	r2, r2, #0, #11
 800063c:	42a2      	cmp	r2, r4
 800063e:	d115      	bne.n	800066c <ai_platform_context_acquire+0x5a>
 8000640:	2101      	movs	r1, #1
 8000642:	2300      	movs	r3, #0
 8000644:	2200      	movs	r2, #0
 8000646:	4319      	orrs	r1, r3
 8000648:	4311      	orrs	r1, r2
 800064a:	d01d      	beq.n	8000688 <ai_platform_context_acquire+0x76>
 800064c:	f8df 24e0 	ldr.w	r2, [pc, #1248]	; 8000b30 <.text_21>
 8000650:	2301      	movs	r3, #1
 8000652:	6093      	str	r3, [r2, #8]
 8000654:	6891      	ldr	r1, [r2, #8]
 8000656:	2900      	cmp	r1, #0
 8000658:	d1fc      	bne.n	8000654 <ai_platform_context_acquire+0x42>
 800065a:	f8df 34d8 	ldr.w	r3, [pc, #1240]	; 8000b34 <.text_22>
 800065e:	f8df 44d8 	ldr.w	r4, [pc, #1240]	; 8000b38 <.text_23>
 8000662:	6013      	str	r3, [r2, #0]
 8000664:	6812      	ldr	r2, [r2, #0]
 8000666:	42a2      	cmp	r2, r4
 8000668:	d026      	beq.n	80006b8 <ai_platform_context_acquire+0xa6>
 800066a:	e7fe      	b.n	800066a <ai_platform_context_acquire+0x58>
 800066c:	2100      	movs	r1, #0
 800066e:	f240 4551 	movw	r5, #1105	; 0x451
 8000672:	42aa      	cmp	r2, r5
 8000674:	bf08      	it	eq
 8000676:	2301      	moveq	r3, #1
 8000678:	d0e4      	beq.n	8000644 <ai_platform_context_acquire+0x32>
 800067a:	2300      	movs	r3, #0
 800067c:	f240 4452 	movw	r4, #1106	; 0x452
 8000680:	42a2      	cmp	r2, r4
 8000682:	d1df      	bne.n	8000644 <ai_platform_context_acquire+0x32>
 8000684:	2201      	movs	r2, #1
 8000686:	e7de      	b.n	8000646 <ai_platform_context_acquire+0x34>
 8000688:	f8df 14b0 	ldr.w	r1, [pc, #1200]	; 8000b3c <.text_24>
 800068c:	680a      	ldr	r2, [r1, #0]
 800068e:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8000692:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 8000696:	d10f      	bne.n	80006b8 <ai_platform_context_acquire+0xa6>
 8000698:	f8df 24a4 	ldr.w	r2, [pc, #1188]	; 8000b40 <.text_25>
 800069c:	2301      	movs	r3, #1
 800069e:	6093      	str	r3, [r2, #8]
 80006a0:	6891      	ldr	r1, [r2, #8]
 80006a2:	2900      	cmp	r1, #0
 80006a4:	d1fc      	bne.n	80006a0 <ai_platform_context_acquire+0x8e>
 80006a6:	f8df 348c 	ldr.w	r3, [pc, #1164]	; 8000b34 <.text_22>
 80006aa:	f8df 448c 	ldr.w	r4, [pc, #1164]	; 8000b38 <.text_23>
 80006ae:	6013      	str	r3, [r2, #0]
 80006b0:	6812      	ldr	r2, [r2, #0]
 80006b2:	42a2      	cmp	r2, r4
 80006b4:	d000      	beq.n	80006b8 <ai_platform_context_acquire+0xa6>
 80006b6:	e7fe      	b.n	80006b6 <ai_platform_context_acquire+0xa4>
 80006b8:	bc30      	pop	{r4, r5}
 80006ba:	4770      	bx	lr

080006bc <ai_platform_context_release>:
 80006bc:	f8df 189c 	ldr.w	r1, [pc, #2204]	; 8000f5c <.text_27>
 80006c0:	6001      	str	r1, [r0, #0]
 80006c2:	4770      	bx	lr

080006c4 <.text_11>:
 80006c4:	00000000 	.word	0x00000000

080006c8 <ai_platform_network_get_error>:
 80006c8:	b430      	push	{r4, r5}
 80006ca:	b120      	cbz	r0, 80006d6 <ai_platform_network_get_error+0xe>
 80006cc:	6801      	ldr	r1, [r0, #0]
 80006ce:	f8df 288c 	ldr.w	r2, [pc, #2188]	; 8000f5c <.text_27>
 80006d2:	4291      	cmp	r1, r2
 80006d4:	d000      	beq.n	80006d8 <ai_platform_network_get_error+0x10>
 80006d6:	2000      	movs	r0, #0
 80006d8:	f8df 144c 	ldr.w	r1, [pc, #1100]	; 8000b28 <.text_19>
 80006dc:	f240 4449 	movw	r4, #1097	; 0x449
 80006e0:	680b      	ldr	r3, [r1, #0]
 80006e2:	085b      	lsrs	r3, r3, #1
 80006e4:	005b      	lsls	r3, r3, #1
 80006e6:	600b      	str	r3, [r1, #0]
 80006e8:	f8df 1440 	ldr.w	r1, [pc, #1088]	; 8000b2c <.text_20>
 80006ec:	680a      	ldr	r2, [r1, #0]
 80006ee:	f3c2 020a 	ubfx	r2, r2, #0, #11
 80006f2:	42a2      	cmp	r2, r4
 80006f4:	d115      	bne.n	8000722 <ai_platform_network_get_error+0x5a>
 80006f6:	2101      	movs	r1, #1
 80006f8:	2300      	movs	r3, #0
 80006fa:	2200      	movs	r2, #0
 80006fc:	4319      	orrs	r1, r3
 80006fe:	4311      	orrs	r1, r2
 8000700:	d01d      	beq.n	800073e <ai_platform_network_get_error+0x76>
 8000702:	f8df 242c 	ldr.w	r2, [pc, #1068]	; 8000b30 <.text_21>
 8000706:	2301      	movs	r3, #1
 8000708:	6093      	str	r3, [r2, #8]
 800070a:	6891      	ldr	r1, [r2, #8]
 800070c:	2900      	cmp	r1, #0
 800070e:	d1fc      	bne.n	800070a <ai_platform_network_get_error+0x42>
 8000710:	f8df 3420 	ldr.w	r3, [pc, #1056]	; 8000b34 <.text_22>
 8000714:	f8df 4420 	ldr.w	r4, [pc, #1056]	; 8000b38 <.text_23>
 8000718:	6013      	str	r3, [r2, #0]
 800071a:	6812      	ldr	r2, [r2, #0]
 800071c:	42a2      	cmp	r2, r4
 800071e:	d026      	beq.n	800076e <ai_platform_network_get_error+0xa6>
 8000720:	e7fe      	b.n	8000720 <ai_platform_network_get_error+0x58>
 8000722:	2100      	movs	r1, #0
 8000724:	f240 4551 	movw	r5, #1105	; 0x451
 8000728:	42aa      	cmp	r2, r5
 800072a:	bf08      	it	eq
 800072c:	2301      	moveq	r3, #1
 800072e:	d0e4      	beq.n	80006fa <ai_platform_network_get_error+0x32>
 8000730:	2300      	movs	r3, #0
 8000732:	f240 4452 	movw	r4, #1106	; 0x452
 8000736:	42a2      	cmp	r2, r4
 8000738:	d1df      	bne.n	80006fa <ai_platform_network_get_error+0x32>
 800073a:	2201      	movs	r2, #1
 800073c:	e7de      	b.n	80006fc <ai_platform_network_get_error+0x34>
 800073e:	f8df 13fc 	ldr.w	r1, [pc, #1020]	; 8000b3c <.text_24>
 8000742:	680a      	ldr	r2, [r1, #0]
 8000744:	f3c2 020a 	ubfx	r2, r2, #0, #11
 8000748:	f5b2 6f8a 	cmp.w	r2, #1104	; 0x450
 800074c:	d10f      	bne.n	800076e <ai_platform_network_get_error+0xa6>
 800074e:	f8df 23f0 	ldr.w	r2, [pc, #1008]	; 8000b40 <.text_25>
 8000752:	2301      	movs	r3, #1
 8000754:	6093      	str	r3, [r2, #8]
 8000756:	6891      	ldr	r1, [r2, #8]
 8000758:	2900      	cmp	r1, #0
 800075a:	d1fc      	bne.n	8000756 <ai_platform_network_get_error+0x8e>
 800075c:	f8df 33d4 	ldr.w	r3, [pc, #980]	; 8000b34 <.text_22>
 8000760:	f8df 43d4 	ldr.w	r4, [pc, #980]	; 8000b38 <.text_23>
 8000764:	6013      	str	r3, [r2, #0]
 8000766:	6812      	ldr	r2, [r2, #0]
 8000768:	42a2      	cmp	r2, r4
 800076a:	d000      	beq.n	800076e <ai_platform_network_get_error+0xa6>
 800076c:	e7fe      	b.n	800076c <ai_platform_network_get_error+0xa4>
 800076e:	b920      	cbnz	r0, 800077a <ai_platform_network_get_error+0xb2>
 8000770:	f60f 0028 	addw	r0, pc, #2088	; 0x828
 8000774:	6800      	ldr	r0, [r0, #0]
 8000776:	bc30      	pop	{r4, r5}
 8000778:	4770      	bx	lr
 800077a:	3010      	adds	r0, #16
 800077c:	bc30      	pop	{r4, r5}
 800077e:	f000 bc15 	b.w	8000fac <core_get_error>

08000782 <ai_platform_network_set_error>:
 8000782:	2800      	cmp	r0, #0
 8000784:	bf1c      	itt	ne
 8000786:	3010      	addne	r0, #16
 8000788:	f000 bc15 	bne.w	8000fb6 <core_set_error>
 800078c:	4770      	bx	lr

0800078e <ai_platform_api_get_network_report>:
 800078e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000792:	0004      	movs	r4, r0
 8000794:	b081      	sub	sp, #4
 8000796:	460d      	mov	r5, r1
 8000798:	d004      	beq.n	80007a4 <ai_platform_api_get_network_report+0x16>
 800079a:	6820      	ldr	r0, [r4, #0]
 800079c:	f8df 17bc 	ldr.w	r1, [pc, #1980]	; 8000f5c <.text_27>
 80007a0:	4288      	cmp	r0, r1
 80007a2:	d000      	beq.n	80007a6 <ai_platform_api_get_network_report+0x18>
 80007a4:	2400      	movs	r4, #0
 80007a6:	f8df 0380 	ldr.w	r0, [pc, #896]	; 8000b28 <.text_19>
 80007aa:	f240 4349 	movw	r3, #1097	; 0x449
 80007ae:	6802      	ldr	r2, [r0, #0]
 80007b0:	0852      	lsrs	r2, r2, #1
 80007b2:	0052      	lsls	r2, r2, #1
 80007b4:	6002      	str	r2, [r0, #0]
 80007b6:	f8df 0374 	ldr.w	r0, [pc, #884]	; 8000b2c <.text_20>
 80007ba:	6801      	ldr	r1, [r0, #0]
 80007bc:	f3c1 010a 	ubfx	r1, r1, #0, #11
 80007c0:	4299      	cmp	r1, r3
 80007c2:	d115      	bne.n	80007f0 <ai_platform_api_get_network_report+0x62>
 80007c4:	2001      	movs	r0, #1
 80007c6:	2200      	movs	r2, #0
 80007c8:	2100      	movs	r1, #0
 80007ca:	4310      	orrs	r0, r2
 80007cc:	4308      	orrs	r0, r1
 80007ce:	d01d      	beq.n	800080c <ai_platform_api_get_network_report+0x7e>
 80007d0:	f8df 135c 	ldr.w	r1, [pc, #860]	; 8000b30 <.text_21>
 80007d4:	2201      	movs	r2, #1
 80007d6:	608a      	str	r2, [r1, #8]
 80007d8:	6888      	ldr	r0, [r1, #8]
 80007da:	2800      	cmp	r0, #0
 80007dc:	d1fc      	bne.n	80007d8 <ai_platform_api_get_network_report+0x4a>
 80007de:	f8df 2354 	ldr.w	r2, [pc, #852]	; 8000b34 <.text_22>
 80007e2:	f8df 3354 	ldr.w	r3, [pc, #852]	; 8000b38 <.text_23>
 80007e6:	600a      	str	r2, [r1, #0]
 80007e8:	6809      	ldr	r1, [r1, #0]
 80007ea:	4299      	cmp	r1, r3
 80007ec:	d026      	beq.n	800083c <ai_platform_api_get_network_report+0xae>
 80007ee:	e7fe      	b.n	80007ee <ai_platform_api_get_network_report+0x60>
 80007f0:	2000      	movs	r0, #0
 80007f2:	f240 4651 	movw	r6, #1105	; 0x451
 80007f6:	42b1      	cmp	r1, r6
 80007f8:	bf08      	it	eq
 80007fa:	2201      	moveq	r2, #1
 80007fc:	d0e4      	beq.n	80007c8 <ai_platform_api_get_network_report+0x3a>
 80007fe:	2200      	movs	r2, #0
 8000800:	f240 4352 	movw	r3, #1106	; 0x452
 8000804:	4299      	cmp	r1, r3
 8000806:	d1df      	bne.n	80007c8 <ai_platform_api_get_network_report+0x3a>
 8000808:	2101      	movs	r1, #1
 800080a:	e7de      	b.n	80007ca <ai_platform_api_get_network_report+0x3c>
 800080c:	f8df 032c 	ldr.w	r0, [pc, #812]	; 8000b3c <.text_24>
 8000810:	6801      	ldr	r1, [r0, #0]
 8000812:	f3c1 010a 	ubfx	r1, r1, #0, #11
 8000816:	f5b1 6f8a 	cmp.w	r1, #1104	; 0x450
 800081a:	d10f      	bne.n	800083c <ai_platform_api_get_network_report+0xae>
 800081c:	f8df 1320 	ldr.w	r1, [pc, #800]	; 8000b40 <.text_25>
 8000820:	2201      	movs	r2, #1
 8000822:	608a      	str	r2, [r1, #8]
 8000824:	6888      	ldr	r0, [r1, #8]
 8000826:	2800      	cmp	r0, #0
 8000828:	d1fc      	bne.n	8000824 <ai_platform_api_get_network_report+0x96>
 800082a:	f8df 2308 	ldr.w	r2, [pc, #776]	; 8000b34 <.text_22>
 800082e:	f8df 3308 	ldr.w	r3, [pc, #776]	; 8000b38 <.text_23>
 8000832:	600a      	str	r2, [r1, #0]
 8000834:	6809      	ldr	r1, [r1, #0]
 8000836:	4299      	cmp	r1, r3
 8000838:	d000      	beq.n	800083c <ai_platform_api_get_network_report+0xae>
 800083a:	e7fe      	b.n	800083a <ai_platform_api_get_network_report+0xac>
 800083c:	2c00      	cmp	r4, #0
 800083e:	bf18      	it	ne
 8000840:	2d00      	cmpne	r5, #0
 8000842:	d032      	beq.n	80008aa <ai_platform_api_get_network_report+0x11c>
 8000844:	2000      	movs	r0, #0
 8000846:	66e8      	str	r0, [r5, #108]	; 0x6c
 8000848:	6d22      	ldr	r2, [r4, #80]	; 0x50
 800084a:	b152      	cbz	r2, 8000862 <ai_platform_api_get_network_report+0xd4>
 800084c:	e000      	b.n	8000850 <ai_platform_api_get_network_report+0xc2>
 800084e:	4602      	mov	r2, r0
 8000850:	6ee9      	ldr	r1, [r5, #108]	; 0x6c
 8000852:	1c49      	adds	r1, r1, #1
 8000854:	66e9      	str	r1, [r5, #108]	; 0x6c
 8000856:	68d0      	ldr	r0, [r2, #12]
 8000858:	4282      	cmp	r2, r0
 800085a:	bf18      	it	ne
 800085c:	2800      	cmpne	r0, #0
 800085e:	d1f6      	bne.n	800084e <ai_platform_api_get_network_report+0xc0>
 8000860:	b911      	cbnz	r1, 8000868 <ai_platform_api_get_network_report+0xda>
 8000862:	2218      	movs	r2, #24
 8000864:	2111      	movs	r1, #17
 8000866:	e01c      	b.n	80008a2 <ai_platform_api_get_network_report+0x114>
 8000868:	f8b4 0048 	ldrh.w	r0, [r4, #72]	; 0x48
 800086c:	b100      	cbz	r0, 8000870 <ai_platform_api_get_network_report+0xe2>
 800086e:	6ce0      	ldr	r0, [r4, #76]	; 0x4c
 8000870:	f105 0134 	add.w	r1, r5, #52	; 0x34
 8000874:	f7ff fd20 	bl	80002b8 <_ai_platform_get_io_buffers_info>
 8000878:	8628      	strh	r0, [r5, #48]	; 0x30
 800087a:	b910      	cbnz	r0, 8000882 <ai_platform_api_get_network_report+0xf4>
 800087c:	2218      	movs	r2, #24
 800087e:	2112      	movs	r1, #18
 8000880:	e00f      	b.n	80008a2 <ai_platform_api_get_network_report+0x114>
 8000882:	f8b4 0048 	ldrh.w	r0, [r4, #72]	; 0x48
 8000886:	2802      	cmp	r0, #2
 8000888:	bfa6      	itte	ge
 800088a:	6ce1      	ldrge	r1, [r4, #76]	; 0x4c
 800088c:	f101 000c 	addge.w	r0, r1, #12
 8000890:	2000      	movlt	r0, #0
 8000892:	f105 0138 	add.w	r1, r5, #56	; 0x38
 8000896:	f7ff fd0f 	bl	80002b8 <_ai_platform_get_io_buffers_info>
 800089a:	8668      	strh	r0, [r5, #50]	; 0x32
 800089c:	b948      	cbnz	r0, 80008b2 <ai_platform_api_get_network_report+0x124>
 800089e:	2218      	movs	r2, #24
 80008a0:	2113      	movs	r1, #19
 80008a2:	f104 0010 	add.w	r0, r4, #16
 80008a6:	f000 fb86 	bl	8000fb6 <core_set_error>
 80008aa:	2000      	movs	r0, #0
 80008ac:	b001      	add	sp, #4
 80008ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80008b2:	6860      	ldr	r0, [r4, #4]
 80008b4:	f104 0230 	add.w	r2, r4, #48	; 0x30
 80008b8:	6728      	str	r0, [r5, #112]	; 0x70
 80008ba:	f105 013c 	add.w	r1, r5, #60	; 0x3c
 80008be:	e892 51c8 	ldmia.w	r2, {r3, r6, r7, r8, ip, lr}
 80008c2:	e881 51c8 	stmia.w	r1, {r3, r6, r7, r8, ip, lr}
 80008c6:	3418      	adds	r4, #24
 80008c8:	f105 0954 	add.w	r9, r5, #84	; 0x54
 80008cc:	e894 0c0f 	ldmia.w	r4, {r0, r1, r2, r3, sl, fp}
 80008d0:	e889 0c0f 	stmia.w	r9, {r0, r1, r2, r3, sl, fp}
 80008d4:	f7ff fca4 	bl	8000220 <CRC_Lock>
 80008d8:	a092      	add	r0, pc, #584	; (adr r0, 8000b24 <.text_18>)
 80008da:	6128      	str	r0, [r5, #16]
 80008dc:	f7ff fca0 	bl	8000220 <CRC_Lock>
 80008e0:	f20f 619c 	addw	r1, pc, #1692	; 0x69c
 80008e4:	680a      	ldr	r2, [r1, #0]
 80008e6:	616a      	str	r2, [r5, #20]
 80008e8:	f7ff fc9a 	bl	8000220 <CRC_Lock>
 80008ec:	f20f 6094 	addw	r0, pc, #1684	; 0x694
 80008f0:	6801      	ldr	r1, [r0, #0]
 80008f2:	6269      	str	r1, [r5, #36]	; 0x24
 80008f4:	f7ff fc94 	bl	8000220 <CRC_Lock>
 80008f8:	f20f 628c 	addw	r2, pc, #1676	; 0x68c
 80008fc:	6810      	ldr	r0, [r2, #0]
 80008fe:	62a8      	str	r0, [r5, #40]	; 0x28
 8000900:	2001      	movs	r0, #1
 8000902:	b001      	add	sp, #4
 8000904:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000908 <ai_platform_network_create>:
 8000908:	b5f0      	push	{r4, r5, r6, r7, lr}
 800090a:	b081      	sub	sp, #4
 800090c:	b2db      	uxtb	r3, r3
 800090e:	9d06      	ldr	r5, [sp, #24]
 8000910:	4604      	mov	r4, r0
 8000912:	9807      	ldr	r0, [sp, #28]
 8000914:	4616      	mov	r6, r2
 8000916:	042d      	lsls	r5, r5, #16
 8000918:	ea45 6503 	orr.w	r5, r5, r3, lsl #24
 800091c:	ea45 2500 	orr.w	r5, r5, r0, lsl #8
 8000920:	f20f 607c 	addw	r0, pc, #1660	; 0x67c
 8000924:	6807      	ldr	r7, [r0, #0]
 8000926:	f7ff fc7b 	bl	8000220 <CRC_Lock>
 800092a:	b924      	cbnz	r4, 8000936 <ai_platform_network_create+0x2e>
 800092c:	f20f 6074 	addw	r0, pc, #1652	; 0x674
 8000930:	b001      	add	sp, #4
 8000932:	6800      	ldr	r0, [r0, #0]
 8000934:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000936:	f8df 1624 	ldr.w	r1, [pc, #1572]	; 8000f5c <.text_27>
 800093a:	6031      	str	r1, [r6, #0]
 800093c:	6026      	str	r6, [r4, #0]
 800093e:	f000 fb33 	bl	8000fa8 <core_init>
 8000942:	b910      	cbnz	r0, 800094a <ai_platform_network_create+0x42>
 8000944:	f20f 6044 	addw	r0, pc, #1604	; 0x644
 8000948:	e00e      	b.n	8000968 <ai_platform_network_create+0x60>
 800094a:	f8df 1614 	ldr.w	r1, [pc, #1556]	; 8000f60 <.text_28>
 800094e:	428d      	cmp	r5, r1
 8000950:	d303      	bcc.n	800095a <ai_platform_network_create+0x52>
 8000952:	f20f 623c 	addw	r2, pc, #1596	; 0x63c
 8000956:	6817      	ldr	r7, [r2, #0]
 8000958:	e007      	b.n	800096a <ai_platform_network_create+0x62>
 800095a:	f20f 6038 	addw	r0, pc, #1592	; 0x638
 800095e:	f000 fb3f 	bl	8000fe0 <ai_check_custom_types>
 8000962:	b920      	cbnz	r0, 800096e <ai_platform_network_create+0x66>
 8000964:	f20f 6030 	addw	r0, pc, #1584	; 0x630
 8000968:	6807      	ldr	r7, [r0, #0]
 800096a:	2100      	movs	r1, #0
 800096c:	6021      	str	r1, [r4, #0]
 800096e:	4638      	mov	r0, r7
 8000970:	b001      	add	sp, #4
 8000972:	bdf0      	pop	{r4, r5, r6, r7, pc}

08000974 <ai_platform_network_destroy>:
 8000974:	b470      	push	{r4, r5, r6}
 8000976:	b130      	cbz	r0, 8000986 <ai_platform_network_destroy+0x12>
 8000978:	6801      	ldr	r1, [r0, #0]
 800097a:	f8df 25e0 	ldr.w	r2, [pc, #1504]	; 8000f5c <.text_27>
 800097e:	4291      	cmp	r1, r2
 8000980:	bf08      	it	eq
 8000982:	4602      	moveq	r2, r0
 8000984:	d000      	beq.n	8000988 <ai_platform_network_destroy+0x14>
 8000986:	2200      	movs	r2, #0
 8000988:	4967      	ldr	r1, [pc, #412]	; (8000b28 <.text_19>)
 800098a:	f240 4449 	movw	r4, #1097	; 0x449
 800098e:	680b      	ldr	r3, [r1, #0]
 8000990:	085b      	lsrs	r3, r3, #1
 8000992:	005b      	lsls	r3, r3, #1
 8000994:	600b      	str	r3, [r1, #0]
 8000996:	4965      	ldr	r1, [pc, #404]	; (8000b2c <.text_20>)
 8000998:	680b      	ldr	r3, [r1, #0]
 800099a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800099e:	42a3      	cmp	r3, r4
 80009a0:	d112      	bne.n	80009c8 <ai_platform_network_destroy+0x54>
 80009a2:	2101      	movs	r1, #1
 80009a4:	2400      	movs	r4, #0
 80009a6:	2300      	movs	r3, #0
 80009a8:	4321      	orrs	r1, r4
 80009aa:	4319      	orrs	r1, r3
 80009ac:	d01a      	beq.n	80009e4 <ai_platform_network_destroy+0x70>
 80009ae:	4b60      	ldr	r3, [pc, #384]	; (8000b30 <.text_21>)
 80009b0:	2401      	movs	r4, #1
 80009b2:	609c      	str	r4, [r3, #8]
 80009b4:	6899      	ldr	r1, [r3, #8]
 80009b6:	2900      	cmp	r1, #0
 80009b8:	d1fc      	bne.n	80009b4 <ai_platform_network_destroy+0x40>
 80009ba:	4c5e      	ldr	r4, [pc, #376]	; (8000b34 <.text_22>)
 80009bc:	4d5e      	ldr	r5, [pc, #376]	; (8000b38 <.text_23>)
 80009be:	601c      	str	r4, [r3, #0]
 80009c0:	681b      	ldr	r3, [r3, #0]
 80009c2:	42ab      	cmp	r3, r5
 80009c4:	d022      	beq.n	8000a0c <ai_platform_network_destroy+0x98>
 80009c6:	e7fe      	b.n	80009c6 <ai_platform_network_destroy+0x52>
 80009c8:	2100      	movs	r1, #0
 80009ca:	f240 4651 	movw	r6, #1105	; 0x451
 80009ce:	42b3      	cmp	r3, r6
 80009d0:	bf08      	it	eq
 80009d2:	2401      	moveq	r4, #1
 80009d4:	d0e7      	beq.n	80009a6 <ai_platform_network_destroy+0x32>
 80009d6:	2400      	movs	r4, #0
 80009d8:	f240 4552 	movw	r5, #1106	; 0x452
 80009dc:	42ab      	cmp	r3, r5
 80009de:	d1e2      	bne.n	80009a6 <ai_platform_network_destroy+0x32>
 80009e0:	2301      	movs	r3, #1
 80009e2:	e7e1      	b.n	80009a8 <ai_platform_network_destroy+0x34>
 80009e4:	4955      	ldr	r1, [pc, #340]	; (8000b3c <.text_24>)
 80009e6:	680b      	ldr	r3, [r1, #0]
 80009e8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80009ec:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 80009f0:	d10c      	bne.n	8000a0c <ai_platform_network_destroy+0x98>
 80009f2:	4b53      	ldr	r3, [pc, #332]	; (8000b40 <.text_25>)
 80009f4:	2401      	movs	r4, #1
 80009f6:	609c      	str	r4, [r3, #8]
 80009f8:	6899      	ldr	r1, [r3, #8]
 80009fa:	2900      	cmp	r1, #0
 80009fc:	d1fc      	bne.n	80009f8 <ai_platform_network_destroy+0x84>
 80009fe:	4c4d      	ldr	r4, [pc, #308]	; (8000b34 <.text_22>)
 8000a00:	4d4d      	ldr	r5, [pc, #308]	; (8000b38 <.text_23>)
 8000a02:	601c      	str	r4, [r3, #0]
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	42ab      	cmp	r3, r5
 8000a08:	d000      	beq.n	8000a0c <ai_platform_network_destroy+0x98>
 8000a0a:	e7fe      	b.n	8000a0a <ai_platform_network_destroy+0x96>
 8000a0c:	b102      	cbz	r2, 8000a10 <ai_platform_network_destroy+0x9c>
 8000a0e:	2000      	movs	r0, #0
 8000a10:	bc70      	pop	{r4, r5, r6}
 8000a12:	4770      	bx	lr

08000a14 <ai_platform_network_init>:
 8000a14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000a18:	b081      	sub	sp, #4
 8000a1a:	460a      	mov	r2, r1
 8000a1c:	b120      	cbz	r0, 8000a28 <ai_platform_network_init+0x14>
 8000a1e:	6801      	ldr	r1, [r0, #0]
 8000a20:	f8df 3538 	ldr.w	r3, [pc, #1336]	; 8000f5c <.text_27>
 8000a24:	4299      	cmp	r1, r3
 8000a26:	d000      	beq.n	8000a2a <ai_platform_network_init+0x16>
 8000a28:	2000      	movs	r0, #0
 8000a2a:	493f      	ldr	r1, [pc, #252]	; (8000b28 <.text_19>)
 8000a2c:	f240 4549 	movw	r5, #1097	; 0x449
 8000a30:	680c      	ldr	r4, [r1, #0]
 8000a32:	0864      	lsrs	r4, r4, #1
 8000a34:	0064      	lsls	r4, r4, #1
 8000a36:	600c      	str	r4, [r1, #0]
 8000a38:	493c      	ldr	r1, [pc, #240]	; (8000b2c <.text_20>)
 8000a3a:	680b      	ldr	r3, [r1, #0]
 8000a3c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000a40:	42ab      	cmp	r3, r5
 8000a42:	d112      	bne.n	8000a6a <ai_platform_network_init+0x56>
 8000a44:	2101      	movs	r1, #1
 8000a46:	2400      	movs	r4, #0
 8000a48:	2300      	movs	r3, #0
 8000a4a:	4321      	orrs	r1, r4
 8000a4c:	4319      	orrs	r1, r3
 8000a4e:	d01a      	beq.n	8000a86 <ai_platform_network_init+0x72>
 8000a50:	4b37      	ldr	r3, [pc, #220]	; (8000b30 <.text_21>)
 8000a52:	2401      	movs	r4, #1
 8000a54:	609c      	str	r4, [r3, #8]
 8000a56:	6899      	ldr	r1, [r3, #8]
 8000a58:	2900      	cmp	r1, #0
 8000a5a:	d1fc      	bne.n	8000a56 <ai_platform_network_init+0x42>
 8000a5c:	4c35      	ldr	r4, [pc, #212]	; (8000b34 <.text_22>)
 8000a5e:	4d36      	ldr	r5, [pc, #216]	; (8000b38 <.text_23>)
 8000a60:	601c      	str	r4, [r3, #0]
 8000a62:	681b      	ldr	r3, [r3, #0]
 8000a64:	42ab      	cmp	r3, r5
 8000a66:	d022      	beq.n	8000aae <ai_platform_network_init+0x9a>
 8000a68:	e7fe      	b.n	8000a68 <ai_platform_network_init+0x54>
 8000a6a:	2100      	movs	r1, #0
 8000a6c:	f240 4651 	movw	r6, #1105	; 0x451
 8000a70:	42b3      	cmp	r3, r6
 8000a72:	bf08      	it	eq
 8000a74:	2401      	moveq	r4, #1
 8000a76:	d0e7      	beq.n	8000a48 <ai_platform_network_init+0x34>
 8000a78:	2400      	movs	r4, #0
 8000a7a:	f240 4552 	movw	r5, #1106	; 0x452
 8000a7e:	42ab      	cmp	r3, r5
 8000a80:	d1e2      	bne.n	8000a48 <ai_platform_network_init+0x34>
 8000a82:	2301      	movs	r3, #1
 8000a84:	e7e1      	b.n	8000a4a <ai_platform_network_init+0x36>
 8000a86:	492d      	ldr	r1, [pc, #180]	; (8000b3c <.text_24>)
 8000a88:	680b      	ldr	r3, [r1, #0]
 8000a8a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000a8e:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8000a92:	d10c      	bne.n	8000aae <ai_platform_network_init+0x9a>
 8000a94:	4b2a      	ldr	r3, [pc, #168]	; (8000b40 <.text_25>)
 8000a96:	2401      	movs	r4, #1
 8000a98:	609c      	str	r4, [r3, #8]
 8000a9a:	6899      	ldr	r1, [r3, #8]
 8000a9c:	2900      	cmp	r1, #0
 8000a9e:	d1fc      	bne.n	8000a9a <ai_platform_network_init+0x86>
 8000aa0:	4c24      	ldr	r4, [pc, #144]	; (8000b34 <.text_22>)
 8000aa2:	4d25      	ldr	r5, [pc, #148]	; (8000b38 <.text_23>)
 8000aa4:	601c      	str	r4, [r3, #0]
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	42ab      	cmp	r3, r5
 8000aaa:	d000      	beq.n	8000aae <ai_platform_network_init+0x9a>
 8000aac:	e7fe      	b.n	8000aac <ai_platform_network_init+0x98>
 8000aae:	2800      	cmp	r0, #0
 8000ab0:	d035      	beq.n	8000b1e <ai_platform_network_init+0x10a>
 8000ab2:	b90a      	cbnz	r2, 8000ab8 <ai_platform_network_init+0xa4>
 8000ab4:	2211      	movs	r2, #17
 8000ab6:	e012      	b.n	8000ade <ai_platform_network_init+0xca>
 8000ab8:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8000aba:	6913      	ldr	r3, [r2, #16]
 8000abc:	b939      	cbnz	r1, 8000ace <ai_platform_network_init+0xba>
 8000abe:	8c14      	ldrh	r4, [r2, #32]
 8000ac0:	8bd5      	ldrh	r5, [r2, #30]
 8000ac2:	6a51      	ldr	r1, [r2, #36]	; 0x24
 8000ac4:	436c      	muls	r4, r5
 8000ac6:	434c      	muls	r4, r1
 8000ac8:	bf18      	it	ne
 8000aca:	2213      	movne	r2, #19
 8000acc:	d107      	bne.n	8000ade <ai_platform_network_init+0xca>
 8000ace:	b973      	cbnz	r3, 8000aee <ai_platform_network_init+0xda>
 8000ad0:	8911      	ldrh	r1, [r2, #8]
 8000ad2:	88d4      	ldrh	r4, [r2, #6]
 8000ad4:	68d3      	ldr	r3, [r2, #12]
 8000ad6:	4361      	muls	r1, r4
 8000ad8:	4359      	muls	r1, r3
 8000ada:	d008      	beq.n	8000aee <ai_platform_network_init+0xda>
 8000adc:	2212      	movs	r2, #18
 8000ade:	2110      	movs	r1, #16
 8000ae0:	3010      	adds	r0, #16
 8000ae2:	f000 fa68 	bl	8000fb6 <core_set_error>
 8000ae6:	2000      	movs	r0, #0
 8000ae8:	b001      	add	sp, #4
 8000aea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000aee:	f100 0118 	add.w	r1, r0, #24
 8000af2:	f100 0e30 	add.w	lr, r0, #48	; 0x30
 8000af6:	e8b2 10f8 	ldmia.w	r2!, {r3, r4, r5, r6, r7, ip}
 8000afa:	e881 10f8 	stmia.w	r1, {r3, r4, r5, r6, r7, ip}
 8000afe:	e892 0f0a 	ldmia.w	r2, {r1, r3, r8, r9, sl, fp}
 8000b02:	e88e 0f0a 	stmia.w	lr, {r1, r3, r8, r9, sl, fp}
 8000b06:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8000b08:	2103      	movs	r1, #3
 8000b0a:	60c1      	str	r1, [r0, #12]
 8000b0c:	b13a      	cbz	r2, 8000b1e <ai_platform_network_init+0x10a>
 8000b0e:	e000      	b.n	8000b12 <ai_platform_network_init+0xfe>
 8000b10:	460a      	mov	r2, r1
 8000b12:	68d1      	ldr	r1, [r2, #12]
 8000b14:	6090      	str	r0, [r2, #8]
 8000b16:	428a      	cmp	r2, r1
 8000b18:	bf18      	it	ne
 8000b1a:	2900      	cmpne	r1, #0
 8000b1c:	d1f8      	bne.n	8000b10 <ai_platform_network_init+0xfc>
 8000b1e:	b001      	add	sp, #4
 8000b20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000b24 <.text_18>:
 8000b24:	00000000 	.word	0x00000000

08000b28 <.text_19>:
 8000b28:	e0002000 	.word	0xe0002000

08000b2c <.text_20>:
 8000b2c:	e0042000 	.word	0xe0042000

08000b30 <.text_21>:
 8000b30:	40023000 	.word	0x40023000

08000b34 <.text_22>:
 8000b34:	f407a5c2 	.word	0xf407a5c2

08000b38 <.text_23>:
 8000b38:	b5e8b5cd 	.word	0xb5e8b5cd

08000b3c <.text_24>:
 8000b3c:	5c001000 	.word	0x5c001000

08000b40 <.text_25>:
 8000b40:	58024c00 	.word	0x58024c00

08000b44 <ai_platform_network_process>:
 8000b44:	e92d 4ff4 	stmdb	sp!, {r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000b48:	b082      	sub	sp, #8
 8000b4a:	460a      	mov	r2, r1
 8000b4c:	b120      	cbz	r0, 8000b58 <ai_platform_network_process+0x14>
 8000b4e:	6801      	ldr	r1, [r0, #0]
 8000b50:	f8df 3408 	ldr.w	r3, [pc, #1032]	; 8000f5c <.text_27>
 8000b54:	4299      	cmp	r1, r3
 8000b56:	d000      	beq.n	8000b5a <ai_platform_network_process+0x16>
 8000b58:	2000      	movs	r0, #0
 8000b5a:	f8df 1408 	ldr.w	r1, [pc, #1032]	; 8000f64 <.text_29>
 8000b5e:	f240 4549 	movw	r5, #1097	; 0x449
 8000b62:	680c      	ldr	r4, [r1, #0]
 8000b64:	0864      	lsrs	r4, r4, #1
 8000b66:	0064      	lsls	r4, r4, #1
 8000b68:	600c      	str	r4, [r1, #0]
 8000b6a:	f8df 13fc 	ldr.w	r1, [pc, #1020]	; 8000f68 <.text_30>
 8000b6e:	680b      	ldr	r3, [r1, #0]
 8000b70:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000b74:	42ab      	cmp	r3, r5
 8000b76:	d115      	bne.n	8000ba4 <ai_platform_network_process+0x60>
 8000b78:	2101      	movs	r1, #1
 8000b7a:	2400      	movs	r4, #0
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	4321      	orrs	r1, r4
 8000b80:	4319      	orrs	r1, r3
 8000b82:	d01d      	beq.n	8000bc0 <ai_platform_network_process+0x7c>
 8000b84:	f8df 33e4 	ldr.w	r3, [pc, #996]	; 8000f6c <.text_31>
 8000b88:	2401      	movs	r4, #1
 8000b8a:	609c      	str	r4, [r3, #8]
 8000b8c:	6899      	ldr	r1, [r3, #8]
 8000b8e:	2900      	cmp	r1, #0
 8000b90:	d1fc      	bne.n	8000b8c <ai_platform_network_process+0x48>
 8000b92:	f8df 43dc 	ldr.w	r4, [pc, #988]	; 8000f70 <.text_32>
 8000b96:	f8df 53dc 	ldr.w	r5, [pc, #988]	; 8000f74 <.text_33>
 8000b9a:	601c      	str	r4, [r3, #0]
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	42ab      	cmp	r3, r5
 8000ba0:	d026      	beq.n	8000bf0 <ai_platform_network_process+0xac>
 8000ba2:	e7fe      	b.n	8000ba2 <ai_platform_network_process+0x5e>
 8000ba4:	2100      	movs	r1, #0
 8000ba6:	f240 4a51 	movw	sl, #1105	; 0x451
 8000baa:	4553      	cmp	r3, sl
 8000bac:	bf08      	it	eq
 8000bae:	2401      	moveq	r4, #1
 8000bb0:	d0e4      	beq.n	8000b7c <ai_platform_network_process+0x38>
 8000bb2:	2400      	movs	r4, #0
 8000bb4:	f240 4552 	movw	r5, #1106	; 0x452
 8000bb8:	42ab      	cmp	r3, r5
 8000bba:	d1df      	bne.n	8000b7c <ai_platform_network_process+0x38>
 8000bbc:	2301      	movs	r3, #1
 8000bbe:	e7de      	b.n	8000b7e <ai_platform_network_process+0x3a>
 8000bc0:	f8df 13b4 	ldr.w	r1, [pc, #948]	; 8000f78 <.text_34>
 8000bc4:	680b      	ldr	r3, [r1, #0]
 8000bc6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8000bca:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8000bce:	d10f      	bne.n	8000bf0 <ai_platform_network_process+0xac>
 8000bd0:	f8df 33a8 	ldr.w	r3, [pc, #936]	; 8000f7c <.text_35>
 8000bd4:	2401      	movs	r4, #1
 8000bd6:	609c      	str	r4, [r3, #8]
 8000bd8:	6899      	ldr	r1, [r3, #8]
 8000bda:	2900      	cmp	r1, #0
 8000bdc:	d1fc      	bne.n	8000bd8 <ai_platform_network_process+0x94>
 8000bde:	f8df 4390 	ldr.w	r4, [pc, #912]	; 8000f70 <.text_32>
 8000be2:	f8df 5390 	ldr.w	r5, [pc, #912]	; 8000f74 <.text_33>
 8000be6:	601c      	str	r4, [r3, #0]
 8000be8:	681b      	ldr	r3, [r3, #0]
 8000bea:	42ab      	cmp	r3, r5
 8000bec:	d000      	beq.n	8000bf0 <ai_platform_network_process+0xac>
 8000bee:	e7fe      	b.n	8000bee <ai_platform_network_process+0xaa>
 8000bf0:	2800      	cmp	r0, #0
 8000bf2:	f000 8114 	beq.w	8000e1e <ai_platform_network_process+0x2da>
 8000bf6:	f8b0 1048 	ldrh.w	r1, [r0, #72]	; 0x48
 8000bfa:	b101      	cbz	r1, 8000bfe <ai_platform_network_process+0xba>
 8000bfc:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 8000bfe:	7b05      	ldrb	r5, [r0, #12]
 8000c00:	2300      	movs	r3, #0
 8000c02:	2400      	movs	r4, #0
 8000c04:	82c3      	strh	r3, [r0, #22]
 8000c06:	8284      	strh	r4, [r0, #20]
 8000c08:	f005 0503 	and.w	r5, r5, #3
 8000c0c:	2d03      	cmp	r5, #3
 8000c0e:	d002      	beq.n	8000c16 <ai_platform_network_process+0xd2>
 8000c10:	2230      	movs	r2, #48	; 0x30
 8000c12:	2111      	movs	r1, #17
 8000c14:	e100      	b.n	8000e18 <ai_platform_network_process+0x2d4>
 8000c16:	2a00      	cmp	r2, #0
 8000c18:	bf1e      	ittt	ne
 8000c1a:	2900      	cmpne	r1, #0
 8000c1c:	880b      	ldrhne	r3, [r1, #0]
 8000c1e:	2b00      	cmpne	r3, #0
 8000c20:	f000 80f8 	beq.w	8000e14 <ai_platform_network_process+0x2d0>
 8000c24:	f8b2 b004 	ldrh.w	fp, [r2, #4]
 8000c28:	46a0      	mov	r8, r4
 8000c2a:	46a1      	mov	r9, r4
 8000c2c:	2600      	movs	r6, #0
 8000c2e:	1d17      	adds	r7, r2, #4
 8000c30:	4682      	mov	sl, r0
 8000c32:	9100      	str	r1, [sp, #0]
 8000c34:	e014      	b.n	8000c60 <ai_platform_network_process+0x11c>
 8000c36:	68f8      	ldr	r0, [r7, #12]
 8000c38:	2800      	cmp	r0, #0
 8000c3a:	f000 80ea 	beq.w	8000e12 <ai_platform_network_process+0x2ce>
 8000c3e:	8838      	ldrh	r0, [r7, #0]
 8000c40:	2800      	cmp	r0, #0
 8000c42:	d052      	beq.n	8000cea <ai_platform_network_process+0x1a6>
 8000c44:	4558      	cmp	r0, fp
 8000c46:	4622      	mov	r2, r4
 8000c48:	f108 0801 	add.w	r8, r8, #1
 8000c4c:	f109 0904 	add.w	r9, r9, #4
 8000c50:	bf28      	it	cs
 8000c52:	4683      	movcs	fp, r0
 8000c54:	1f39      	subs	r1, r7, #4
 8000c56:	4628      	mov	r0, r5
 8000c58:	f7ff fb84 	bl	8000364 <_platform_network_state_setup>
 8000c5c:	3718      	adds	r7, #24
 8000c5e:	3610      	adds	r6, #16
 8000c60:	9800      	ldr	r0, [sp, #0]
 8000c62:	8801      	ldrh	r1, [r0, #0]
 8000c64:	4588      	cmp	r8, r1
 8000c66:	d24a      	bcs.n	8000cfe <ai_platform_network_process+0x1ba>
 8000c68:	4602      	mov	r2, r0
 8000c6a:	6850      	ldr	r0, [r2, #4]
 8000c6c:	2800      	cmp	r0, #0
 8000c6e:	bf1c      	itt	ne
 8000c70:	f850 4009 	ldrne.w	r4, [r0, r9]
 8000c74:	2c00      	cmpne	r4, #0
 8000c76:	d042      	beq.n	8000cfe <ai_platform_network_process+0x1ba>
 8000c78:	6891      	ldr	r1, [r2, #8]
 8000c7a:	680a      	ldr	r2, [r1, #0]
 8000c7c:	1995      	adds	r5, r2, r6
 8000c7e:	f000 80c8 	beq.w	8000e12 <ai_platform_network_process+0x2ce>
 8000c82:	69a0      	ldr	r0, [r4, #24]
 8000c84:	887b      	ldrh	r3, [r7, #2]
 8000c86:	88ba      	ldrh	r2, [r7, #4]
 8000c88:	6841      	ldr	r1, [r0, #4]
 8000c8a:	68b8      	ldr	r0, [r7, #8]
 8000c8c:	fb03 fc02 	mul.w	ip, r3, r2
 8000c90:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c94:	4561      	cmp	r1, ip
 8000c96:	d32d      	bcc.n	8000cf4 <ai_platform_network_process+0x1b0>
 8000c98:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 8000c9c:	f8dc e00c 	ldr.w	lr, [ip, #12]
 8000ca0:	459e      	cmp	lr, r3
 8000ca2:	bf01      	itttt	eq
 8000ca4:	f8dc 3008 	ldreq.w	r3, [ip, #8]
 8000ca8:	4293      	cmpeq	r3, r2
 8000caa:	f8dc 2004 	ldreq.w	r2, [ip, #4]
 8000cae:	4282      	cmpeq	r2, r0
 8000cb0:	d120      	bne.n	8000cf4 <ai_platform_network_process+0x1b0>
 8000cb2:	69a0      	ldr	r0, [r4, #24]
 8000cb4:	6800      	ldr	r0, [r0, #0]
 8000cb6:	f006 f83f 	bl	8006d38 <ai_array_get_byte_size>
 8000cba:	68e1      	ldr	r1, [r4, #12]
 8000cbc:	6963      	ldr	r3, [r4, #20]
 8000cbe:	68ca      	ldr	r2, [r1, #12]
 8000cc0:	68d9      	ldr	r1, [r3, #12]
 8000cc2:	434a      	muls	r2, r1
 8000cc4:	4290      	cmp	r0, r2
 8000cc6:	d315      	bcc.n	8000cf4 <ai_platform_network_process+0x1b0>
 8000cc8:	69a0      	ldr	r0, [r4, #24]
 8000cca:	6800      	ldr	r0, [r0, #0]
 8000ccc:	f005 ff5c 	bl	8006b88 <ai_array_to_buffer_fmt>
 8000cd0:	f857 1c04 	ldr.w	r1, [r7, #-4]
 8000cd4:	f020 407e 	bic.w	r0, r0, #4261412864	; 0xfe000000
 8000cd8:	f021 417e 	bic.w	r1, r1, #4261412864	; 0xfe000000
 8000cdc:	4288      	cmp	r0, r1
 8000cde:	d0aa      	beq.n	8000c36 <ai_platform_network_process+0xf2>
 8000ce0:	2219      	movs	r2, #25
 8000ce2:	2112      	movs	r1, #18
 8000ce4:	f10a 0010 	add.w	r0, sl, #16
 8000ce8:	e097      	b.n	8000e1a <ai_platform_network_process+0x2d6>
 8000cea:	2221      	movs	r2, #33	; 0x21
 8000cec:	2112      	movs	r1, #18
 8000cee:	f10a 0010 	add.w	r0, sl, #16
 8000cf2:	e092      	b.n	8000e1a <ai_platform_network_process+0x2d6>
 8000cf4:	2218      	movs	r2, #24
 8000cf6:	2112      	movs	r1, #18
 8000cf8:	f10a 0010 	add.w	r0, sl, #16
 8000cfc:	e08d      	b.n	8000e1a <ai_platform_network_process+0x2d6>
 8000cfe:	9902      	ldr	r1, [sp, #8]
 8000d00:	4655      	mov	r5, sl
 8000d02:	2900      	cmp	r1, #0
 8000d04:	d076      	beq.n	8000df4 <ai_platform_network_process+0x2b0>
 8000d06:	f8b5 0048 	ldrh.w	r0, [r5, #72]	; 0x48
 8000d0a:	2802      	cmp	r0, #2
 8000d0c:	db7c      	blt.n	8000e08 <ai_platform_network_process+0x2c4>
 8000d0e:	6ceb      	ldr	r3, [r5, #76]	; 0x4c
 8000d10:	f113 000c 	adds.w	r0, r3, #12
 8000d14:	bf1c      	itt	ne
 8000d16:	8802      	ldrhne	r2, [r0, #0]
 8000d18:	2a00      	cmpne	r2, #0
 8000d1a:	d075      	beq.n	8000e08 <ai_platform_network_process+0x2c4>
 8000d1c:	f04f 0800 	mov.w	r8, #0
 8000d20:	46c1      	mov	r9, r8
 8000d22:	2600      	movs	r6, #0
 8000d24:	1d0f      	adds	r7, r1, #4
 8000d26:	9000      	str	r0, [sp, #0]
 8000d28:	e013      	b.n	8000d52 <ai_platform_network_process+0x20e>
 8000d2a:	68f8      	ldr	r0, [r7, #12]
 8000d2c:	2800      	cmp	r0, #0
 8000d2e:	d059      	beq.n	8000de4 <ai_platform_network_process+0x2a0>
 8000d30:	8838      	ldrh	r0, [r7, #0]
 8000d32:	2800      	cmp	r0, #0
 8000d34:	d051      	beq.n	8000dda <ai_platform_network_process+0x296>
 8000d36:	4558      	cmp	r0, fp
 8000d38:	4622      	mov	r2, r4
 8000d3a:	f108 0801 	add.w	r8, r8, #1
 8000d3e:	f109 0904 	add.w	r9, r9, #4
 8000d42:	bf28      	it	cs
 8000d44:	4683      	movcs	fp, r0
 8000d46:	1f39      	subs	r1, r7, #4
 8000d48:	4628      	mov	r0, r5
 8000d4a:	f7ff fb0b 	bl	8000364 <_platform_network_state_setup>
 8000d4e:	3718      	adds	r7, #24
 8000d50:	3610      	adds	r6, #16
 8000d52:	9800      	ldr	r0, [sp, #0]
 8000d54:	8801      	ldrh	r1, [r0, #0]
 8000d56:	4588      	cmp	r8, r1
 8000d58:	d249      	bcs.n	8000dee <ai_platform_network_process+0x2aa>
 8000d5a:	4602      	mov	r2, r0
 8000d5c:	6850      	ldr	r0, [r2, #4]
 8000d5e:	2800      	cmp	r0, #0
 8000d60:	bf1c      	itt	ne
 8000d62:	f850 4009 	ldrne.w	r4, [r0, r9]
 8000d66:	2c00      	cmpne	r4, #0
 8000d68:	d041      	beq.n	8000dee <ai_platform_network_process+0x2aa>
 8000d6a:	6891      	ldr	r1, [r2, #8]
 8000d6c:	680a      	ldr	r2, [r1, #0]
 8000d6e:	1995      	adds	r5, r2, r6
 8000d70:	d038      	beq.n	8000de4 <ai_platform_network_process+0x2a0>
 8000d72:	69a0      	ldr	r0, [r4, #24]
 8000d74:	887b      	ldrh	r3, [r7, #2]
 8000d76:	88ba      	ldrh	r2, [r7, #4]
 8000d78:	6841      	ldr	r1, [r0, #4]
 8000d7a:	68b8      	ldr	r0, [r7, #8]
 8000d7c:	fb03 fc02 	mul.w	ip, r3, r2
 8000d80:	fb00 fc0c 	mul.w	ip, r0, ip
 8000d84:	4561      	cmp	r1, ip
 8000d86:	d33e      	bcc.n	8000e06 <ai_platform_network_process+0x2c2>
 8000d88:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 8000d8c:	f8dc e00c 	ldr.w	lr, [ip, #12]
 8000d90:	459e      	cmp	lr, r3
 8000d92:	bf01      	itttt	eq
 8000d94:	f8dc 3008 	ldreq.w	r3, [ip, #8]
 8000d98:	4293      	cmpeq	r3, r2
 8000d9a:	f8dc 2004 	ldreq.w	r2, [ip, #4]
 8000d9e:	4282      	cmpeq	r2, r0
 8000da0:	d131      	bne.n	8000e06 <ai_platform_network_process+0x2c2>
 8000da2:	69a0      	ldr	r0, [r4, #24]
 8000da4:	6800      	ldr	r0, [r0, #0]
 8000da6:	f005 ffc7 	bl	8006d38 <ai_array_get_byte_size>
 8000daa:	68e1      	ldr	r1, [r4, #12]
 8000dac:	6963      	ldr	r3, [r4, #20]
 8000dae:	68ca      	ldr	r2, [r1, #12]
 8000db0:	68d9      	ldr	r1, [r3, #12]
 8000db2:	434a      	muls	r2, r1
 8000db4:	4290      	cmp	r0, r2
 8000db6:	d326      	bcc.n	8000e06 <ai_platform_network_process+0x2c2>
 8000db8:	69a0      	ldr	r0, [r4, #24]
 8000dba:	6800      	ldr	r0, [r0, #0]
 8000dbc:	f005 fee4 	bl	8006b88 <ai_array_to_buffer_fmt>
 8000dc0:	f857 1c04 	ldr.w	r1, [r7, #-4]
 8000dc4:	f020 407e 	bic.w	r0, r0, #4261412864	; 0xfe000000
 8000dc8:	f021 417e 	bic.w	r1, r1, #4261412864	; 0xfe000000
 8000dcc:	4288      	cmp	r0, r1
 8000dce:	d0ac      	beq.n	8000d2a <ai_platform_network_process+0x1e6>
 8000dd0:	2219      	movs	r2, #25
 8000dd2:	2113      	movs	r1, #19
 8000dd4:	f10a 0010 	add.w	r0, sl, #16
 8000dd8:	e01f      	b.n	8000e1a <ai_platform_network_process+0x2d6>
 8000dda:	2221      	movs	r2, #33	; 0x21
 8000ddc:	2113      	movs	r1, #19
 8000dde:	f10a 0010 	add.w	r0, sl, #16
 8000de2:	e01a      	b.n	8000e1a <ai_platform_network_process+0x2d6>
 8000de4:	2217      	movs	r2, #23
 8000de6:	2113      	movs	r1, #19
 8000de8:	f10a 0010 	add.w	r0, sl, #16
 8000dec:	e015      	b.n	8000e1a <ai_platform_network_process+0x2d6>
 8000dee:	4655      	mov	r5, sl
 8000df0:	f8a5 b014 	strh.w	fp, [r5, #20]
 8000df4:	f8b5 0048 	ldrh.w	r0, [r5, #72]	; 0x48
 8000df8:	2800      	cmp	r0, #0
 8000dfa:	bf14      	ite	ne
 8000dfc:	f8d5 a04c 	ldrne.w	sl, [r5, #76]	; 0x4c
 8000e00:	f04f 0a00 	moveq.w	sl, #0
 8000e04:	e00f      	b.n	8000e26 <ai_platform_network_process+0x2e2>
 8000e06:	4655      	mov	r5, sl
 8000e08:	2218      	movs	r2, #24
 8000e0a:	2113      	movs	r1, #19
 8000e0c:	f105 0010 	add.w	r0, r5, #16
 8000e10:	e003      	b.n	8000e1a <ai_platform_network_process+0x2d6>
 8000e12:	4650      	mov	r0, sl
 8000e14:	2217      	movs	r2, #23
 8000e16:	2112      	movs	r1, #18
 8000e18:	3010      	adds	r0, #16
 8000e1a:	f000 f8cc 	bl	8000fb6 <core_set_error>
 8000e1e:	2000      	movs	r0, #0
 8000e20:	b003      	add	sp, #12
 8000e22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000e26:	2802      	cmp	r0, #2
 8000e28:	8aa9      	ldrh	r1, [r5, #20]
 8000e2a:	bfa6      	itte	ge
 8000e2c:	6ce8      	ldrge	r0, [r5, #76]	; 0x4c
 8000e2e:	f100 0b0c 	addge.w	fp, r0, #12
 8000e32:	f04f 0b00 	movlt.w	fp, #0
 8000e36:	8ae8      	ldrh	r0, [r5, #22]
 8000e38:	ebb0 0f01 	cmp.w	r0, r1
 8000e3c:	f080 8089 	bcs.w	8000f52 <ai_platform_network_process+0x40e>
 8000e40:	f04f 0800 	mov.w	r8, #0
 8000e44:	4654      	mov	r4, sl
 8000e46:	46c1      	mov	r9, r8
 8000e48:	46c2      	mov	sl, r8
 8000e4a:	e018      	b.n	8000e7e <ai_platform_network_process+0x33a>
 8000e4c:	6882      	ldr	r2, [r0, #8]
 8000e4e:	68c3      	ldr	r3, [r0, #12]
 8000e50:	6871      	ldr	r1, [r6, #4]
 8000e52:	1ad2      	subs	r2, r2, r3
 8000e54:	188b      	adds	r3, r1, r2
 8000e56:	6083      	str	r3, [r0, #8]
 8000e58:	6871      	ldr	r1, [r6, #4]
 8000e5a:	60c1      	str	r1, [r0, #12]
 8000e5c:	6870      	ldr	r0, [r6, #4]
 8000e5e:	68b1      	ldr	r1, [r6, #8]
 8000e60:	4408      	add	r0, r1
 8000e62:	6070      	str	r0, [r6, #4]
 8000e64:	6831      	ldr	r1, [r6, #0]
 8000e66:	4288      	cmp	r0, r1
 8000e68:	d302      	bcc.n	8000e70 <ai_platform_network_process+0x32c>
 8000e6a:	68f0      	ldr	r0, [r6, #12]
 8000e6c:	4240      	negs	r0, r0
 8000e6e:	4408      	add	r0, r1
 8000e70:	6070      	str	r0, [r6, #4]
 8000e72:	f10a 0a01 	add.w	sl, sl, #1
 8000e76:	f109 0910 	add.w	r9, r9, #16
 8000e7a:	f108 0804 	add.w	r8, r8, #4
 8000e7e:	2c00      	cmp	r4, #0
 8000e80:	bf14      	ite	ne
 8000e82:	8820      	ldrhne	r0, [r4, #0]
 8000e84:	2000      	moveq	r0, #0
 8000e86:	4582      	cmp	sl, r0
 8000e88:	d212      	bcs.n	8000eb0 <ai_platform_network_process+0x36c>
 8000e8a:	6860      	ldr	r0, [r4, #4]
 8000e8c:	b180      	cbz	r0, 8000eb0 <ai_platform_network_process+0x36c>
 8000e8e:	f850 0008 	ldr.w	r0, [r0, r8]
 8000e92:	b168      	cbz	r0, 8000eb0 <ai_platform_network_process+0x36c>
 8000e94:	6980      	ldr	r0, [r0, #24]
 8000e96:	68a1      	ldr	r1, [r4, #8]
 8000e98:	6803      	ldr	r3, [r0, #0]
 8000e9a:	680a      	ldr	r2, [r1, #0]
 8000e9c:	0099      	lsls	r1, r3, #2
 8000e9e:	eb02 0609 	add.w	r6, r2, r9
 8000ea2:	d5d3      	bpl.n	8000e4c <ai_platform_network_process+0x308>
 8000ea4:	68b2      	ldr	r2, [r6, #8]
 8000ea6:	6871      	ldr	r1, [r6, #4]
 8000ea8:	6880      	ldr	r0, [r0, #8]
 8000eaa:	f009 ffa2 	bl	800adf2 <__aeabi_memcpy>
 8000eae:	e7d5      	b.n	8000e5c <ai_platform_network_process+0x318>
 8000eb0:	46a2      	mov	sl, r4
 8000eb2:	4628      	mov	r0, r5
 8000eb4:	f04f 0800 	mov.w	r8, #0
 8000eb8:	465c      	mov	r4, fp
 8000eba:	f000 f93b 	bl	8001134 <ai_layers_forward_all>
 8000ebe:	46c1      	mov	r9, r8
 8000ec0:	46c3      	mov	fp, r8
 8000ec2:	e019      	b.n	8000ef8 <ai_platform_network_process+0x3b4>
 8000ec4:	6871      	ldr	r1, [r6, #4]
 8000ec6:	68b2      	ldr	r2, [r6, #8]
 8000ec8:	4411      	add	r1, r2
 8000eca:	6071      	str	r1, [r6, #4]
 8000ecc:	6832      	ldr	r2, [r6, #0]
 8000ece:	4291      	cmp	r1, r2
 8000ed0:	d302      	bcc.n	8000ed8 <ai_platform_network_process+0x394>
 8000ed2:	68f1      	ldr	r1, [r6, #12]
 8000ed4:	4249      	negs	r1, r1
 8000ed6:	4411      	add	r1, r2
 8000ed8:	6071      	str	r1, [r6, #4]
 8000eda:	460a      	mov	r2, r1
 8000edc:	6881      	ldr	r1, [r0, #8]
 8000ede:	68c3      	ldr	r3, [r0, #12]
 8000ee0:	1ac9      	subs	r1, r1, r3
 8000ee2:	1853      	adds	r3, r2, r1
 8000ee4:	6083      	str	r3, [r0, #8]
 8000ee6:	6872      	ldr	r2, [r6, #4]
 8000ee8:	f8c0 200c 	str.w	r2, [r0, #12]
 8000eec:	f10b 0b01 	add.w	fp, fp, #1
 8000ef0:	f109 0910 	add.w	r9, r9, #16
 8000ef4:	f108 0804 	add.w	r8, r8, #4
 8000ef8:	2c00      	cmp	r4, #0
 8000efa:	bf14      	ite	ne
 8000efc:	8820      	ldrhne	r0, [r4, #0]
 8000efe:	2000      	moveq	r0, #0
 8000f00:	4583      	cmp	fp, r0
 8000f02:	d21d      	bcs.n	8000f40 <ai_platform_network_process+0x3fc>
 8000f04:	6860      	ldr	r0, [r4, #4]
 8000f06:	b1d8      	cbz	r0, 8000f40 <ai_platform_network_process+0x3fc>
 8000f08:	f850 0008 	ldr.w	r0, [r0, r8]
 8000f0c:	b1c0      	cbz	r0, 8000f40 <ai_platform_network_process+0x3fc>
 8000f0e:	6980      	ldr	r0, [r0, #24]
 8000f10:	68a1      	ldr	r1, [r4, #8]
 8000f12:	6803      	ldr	r3, [r0, #0]
 8000f14:	680a      	ldr	r2, [r1, #0]
 8000f16:	0099      	lsls	r1, r3, #2
 8000f18:	eb02 0609 	add.w	r6, r2, r9
 8000f1c:	d5d2      	bpl.n	8000ec4 <ai_platform_network_process+0x380>
 8000f1e:	6881      	ldr	r1, [r0, #8]
 8000f20:	68b2      	ldr	r2, [r6, #8]
 8000f22:	6870      	ldr	r0, [r6, #4]
 8000f24:	f009 ff65 	bl	800adf2 <__aeabi_memcpy>
 8000f28:	6870      	ldr	r0, [r6, #4]
 8000f2a:	68b1      	ldr	r1, [r6, #8]
 8000f2c:	4408      	add	r0, r1
 8000f2e:	6070      	str	r0, [r6, #4]
 8000f30:	6831      	ldr	r1, [r6, #0]
 8000f32:	4288      	cmp	r0, r1
 8000f34:	d302      	bcc.n	8000f3c <ai_platform_network_process+0x3f8>
 8000f36:	68f0      	ldr	r0, [r6, #12]
 8000f38:	4240      	negs	r0, r0
 8000f3a:	4408      	add	r0, r1
 8000f3c:	6070      	str	r0, [r6, #4]
 8000f3e:	e7d5      	b.n	8000eec <ai_platform_network_process+0x3a8>
 8000f40:	8ae8      	ldrh	r0, [r5, #22]
 8000f42:	8aa9      	ldrh	r1, [r5, #20]
 8000f44:	46a3      	mov	fp, r4
 8000f46:	1c40      	adds	r0, r0, #1
 8000f48:	82e8      	strh	r0, [r5, #22]
 8000f4a:	b280      	uxth	r0, r0
 8000f4c:	4288      	cmp	r0, r1
 8000f4e:	f4ff af77 	bcc.w	8000e40 <ai_platform_network_process+0x2fc>
 8000f52:	8ae8      	ldrh	r0, [r5, #22]
 8000f54:	b003      	add	sp, #12
 8000f56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08000f5c <.text_27>:
 8000f5c:	a1c00100 	.word	0xa1c00100

08000f60 <.text_28>:
 8000f60:	01030001 	.word	0x01030001

08000f64 <.text_29>:
 8000f64:	e0002000 	.word	0xe0002000

08000f68 <.text_30>:
 8000f68:	e0042000 	.word	0xe0042000

08000f6c <.text_31>:
 8000f6c:	40023000 	.word	0x40023000

08000f70 <.text_32>:
 8000f70:	f407a5c2 	.word	0xf407a5c2

08000f74 <.text_33>:
 8000f74:	b5e8b5cd 	.word	0xb5e8b5cd

08000f78 <.text_34>:
 8000f78:	5c001000 	.word	0x5c001000

08000f7c <.text_35>:
 8000f7c:	58024c00 	.word	0x58024c00

08000f80 <.text_36>:
 8000f80:	00000104 	.word	0x00000104

08000f84 <.text_37>:
 8000f84:	00000101 	.word	0x00000101

08000f88 <.text_38>:
 8000f88:	00000301 	.word	0x00000301

08000f8c <.text_39>:
 8000f8c:	00001030 	.word	0x00001030

08000f90 <.text_40>:
 8000f90:	00001001 	.word	0x00001001

08000f94 <_platform_network_sanity_check{5}::signatures>:
 8000f94:	84048403                                ....

08000f98 <.text_42>:
 8000f98:	00001002 	.word	0x00001002

08000f9c <.text_43>:
 8000f9c:	00001010 	.word	0x00001010

08000fa0 <.text_44>:
 8000fa0:	00000000 	.word	0x00000000

08000fa4 <.text_45>:
 8000fa4:	00001010 	.word	0x00001010

08000fa8 <core_init>:
 8000fa8:	2001      	movs	r0, #1
 8000faa:	4770      	bx	lr

08000fac <core_get_error>:
 8000fac:	4601      	mov	r1, r0
 8000fae:	2200      	movs	r2, #0
 8000fb0:	6808      	ldr	r0, [r1, #0]
 8000fb2:	600a      	str	r2, [r1, #0]
 8000fb4:	4770      	bx	lr

08000fb6 <core_set_error>:
 8000fb6:	7803      	ldrb	r3, [r0, #0]
 8000fb8:	ea5f 6c03 	movs.w	ip, r3, lsl #24
 8000fbc:	d104      	bne.n	8000fc8 <core_set_error+0x12>
 8000fbe:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
 8000fc2:	6001      	str	r1, [r0, #0]
 8000fc4:	2001      	movs	r0, #1
 8000fc6:	4770      	bx	lr
 8000fc8:	2000      	movs	r0, #0
 8000fca:	4770      	bx	lr

08000fcc <ai_layers_forward_layer>:
 8000fcc:	b510      	push	{r4, lr}
 8000fce:	4604      	mov	r4, r0
 8000fd0:	6921      	ldr	r1, [r4, #16]
 8000fd2:	4788      	blx	r1
 8000fd4:	68e0      	ldr	r0, [r4, #12]
 8000fd6:	42a0      	cmp	r0, r4
 8000fd8:	bf08      	it	eq
 8000fda:	2000      	moveq	r0, #0
 8000fdc:	bd10      	pop	{r4, pc}
	...

08000fe0 <ai_check_custom_types>:
 8000fe0:	b500      	push	{lr}
 8000fe2:	b081      	sub	sp, #4
 8000fe4:	b160      	cbz	r0, 8001000 <ai_check_custom_types+0x20>
 8000fe6:	7801      	ldrb	r1, [r0, #0]
 8000fe8:	2903      	cmp	r1, #3
 8000fea:	d109      	bne.n	8001000 <ai_check_custom_types+0x20>
 8000fec:	f05f 0204 	movs.w	r2, #4
 8000ff0:	a18d      	add	r1, pc, #564	; (adr r1, 8001228 <ai_check_custom_types::ref_signatures>)
 8000ff2:	f009 ff2b 	bl	800ae4c <memcmp>
 8000ff6:	1e40      	subs	r0, r0, #1
 8000ff8:	4180      	sbcs	r0, r0
 8000ffa:	0fc0      	lsrs	r0, r0, #31
 8000ffc:	b001      	add	sp, #4
 8000ffe:	bd00      	pop	{pc}
 8001000:	2000      	movs	r0, #0
 8001002:	b001      	add	sp, #4
 8001004:	bd00      	pop	{pc}
	...

08001008 <ai_layer_type_name>:
 8001008:	f242 7211 	movw	r2, #10001	; 0x2711
 800100c:	1a81      	subs	r1, r0, r2
 800100e:	2901      	cmp	r1, #1
 8001010:	bf81      	itttt	hi
 8001012:	1ec9      	subhi	r1, r1, #3
 8001014:	290d      	cmphi	r1, #13
 8001016:	390f      	subhi	r1, #15
 8001018:	2909      	cmphi	r1, #9
 800101a:	f200 806b 	bhi.w	80010f4 <ai_layer_type_name+0xec>
 800101e:	1a80      	subs	r0, r0, r2
 8001020:	d033      	beq.n	800108a <ai_layer_type_name+0x82>
 8001022:	1e40      	subs	r0, r0, #1
 8001024:	d033      	beq.n	800108e <ai_layer_type_name+0x86>
 8001026:	1e80      	subs	r0, r0, #2
 8001028:	d033      	beq.n	8001092 <ai_layer_type_name+0x8a>
 800102a:	1e40      	subs	r0, r0, #1
 800102c:	d034      	beq.n	8001098 <ai_layer_type_name+0x90>
 800102e:	1e40      	subs	r0, r0, #1
 8001030:	d034      	beq.n	800109c <ai_layer_type_name+0x94>
 8001032:	1e40      	subs	r0, r0, #1
 8001034:	d034      	beq.n	80010a0 <ai_layer_type_name+0x98>
 8001036:	1e40      	subs	r0, r0, #1
 8001038:	d034      	beq.n	80010a4 <ai_layer_type_name+0x9c>
 800103a:	1e40      	subs	r0, r0, #1
 800103c:	d034      	beq.n	80010a8 <ai_layer_type_name+0xa0>
 800103e:	1e40      	subs	r0, r0, #1
 8001040:	d034      	beq.n	80010ac <ai_layer_type_name+0xa4>
 8001042:	1e40      	subs	r0, r0, #1
 8001044:	d034      	beq.n	80010b0 <ai_layer_type_name+0xa8>
 8001046:	1e40      	subs	r0, r0, #1
 8001048:	d034      	beq.n	80010b4 <ai_layer_type_name+0xac>
 800104a:	1e40      	subs	r0, r0, #1
 800104c:	d034      	beq.n	80010b8 <ai_layer_type_name+0xb0>
 800104e:	1e40      	subs	r0, r0, #1
 8001050:	d034      	beq.n	80010bc <ai_layer_type_name+0xb4>
 8001052:	1e40      	subs	r0, r0, #1
 8001054:	d034      	beq.n	80010c0 <ai_layer_type_name+0xb8>
 8001056:	1e40      	subs	r0, r0, #1
 8001058:	d034      	beq.n	80010c4 <ai_layer_type_name+0xbc>
 800105a:	1e40      	subs	r0, r0, #1
 800105c:	d034      	beq.n	80010c8 <ai_layer_type_name+0xc0>
 800105e:	1e80      	subs	r0, r0, #2
 8001060:	d034      	beq.n	80010cc <ai_layer_type_name+0xc4>
 8001062:	1e40      	subs	r0, r0, #1
 8001064:	d034      	beq.n	80010d0 <ai_layer_type_name+0xc8>
 8001066:	1e40      	subs	r0, r0, #1
 8001068:	d034      	beq.n	80010d4 <ai_layer_type_name+0xcc>
 800106a:	1e40      	subs	r0, r0, #1
 800106c:	d034      	beq.n	80010d8 <ai_layer_type_name+0xd0>
 800106e:	1e40      	subs	r0, r0, #1
 8001070:	d034      	beq.n	80010dc <ai_layer_type_name+0xd4>
 8001072:	1e40      	subs	r0, r0, #1
 8001074:	d034      	beq.n	80010e0 <ai_layer_type_name+0xd8>
 8001076:	1e40      	subs	r0, r0, #1
 8001078:	d034      	beq.n	80010e4 <ai_layer_type_name+0xdc>
 800107a:	1e40      	subs	r0, r0, #1
 800107c:	d034      	beq.n	80010e8 <ai_layer_type_name+0xe0>
 800107e:	1e40      	subs	r0, r0, #1
 8001080:	d034      	beq.n	80010ec <ai_layer_type_name+0xe4>
 8001082:	1e40      	subs	r0, r0, #1
 8001084:	d034      	beq.n	80010f0 <ai_layer_type_name+0xe8>
 8001086:	a01c      	add	r0, pc, #112	; (adr r0, 80010f8 <.text_5>)
 8001088:	4770      	bx	lr
 800108a:	a01c      	add	r0, pc, #112	; (adr r0, 80010fc <.text_6>)
 800108c:	4770      	bx	lr
 800108e:	a01c      	add	r0, pc, #112	; (adr r0, 8001100 <.text_7>)
 8001090:	4770      	bx	lr
 8001092:	bf00      	nop
 8001094:	a031      	add	r0, pc, #196	; (adr r0, 800115c <.text_15>)
 8001096:	4770      	bx	lr
 8001098:	a032      	add	r0, pc, #200	; (adr r0, 8001164 <.text_16>)
 800109a:	4770      	bx	lr
 800109c:	a019      	add	r0, pc, #100	; (adr r0, 8001104 <.text_8>)
 800109e:	4770      	bx	lr
 80010a0:	a019      	add	r0, pc, #100	; (adr r0, 8001108 <.text_9>)
 80010a2:	4770      	bx	lr
 80010a4:	a031      	add	r0, pc, #196	; (adr r0, 800116c <.text_17>)
 80010a6:	4770      	bx	lr
 80010a8:	a018      	add	r0, pc, #96	; (adr r0, 800110c <.text_10>)
 80010aa:	4770      	bx	lr
 80010ac:	a031      	add	r0, pc, #196	; (adr r0, 8001174 <.text_18>)
 80010ae:	4770      	bx	lr
 80010b0:	a032      	add	r0, pc, #200	; (adr r0, 800117c <.text_19>)
 80010b2:	4770      	bx	lr
 80010b4:	a036      	add	r0, pc, #216	; (adr r0, 8001190 <.text_20>)
 80010b6:	4770      	bx	lr
 80010b8:	a038      	add	r0, pc, #224	; (adr r0, 800119c <.text_21>)
 80010ba:	4770      	bx	lr
 80010bc:	a014      	add	r0, pc, #80	; (adr r0, 8001110 <.text_11>)
 80010be:	4770      	bx	lr
 80010c0:	a038      	add	r0, pc, #224	; (adr r0, 80011a4 <.text_22>)
 80010c2:	4770      	bx	lr
 80010c4:	a039      	add	r0, pc, #228	; (adr r0, 80011ac <.text_23>)
 80010c6:	4770      	bx	lr
 80010c8:	a03b      	add	r0, pc, #236	; (adr r0, 80011b8 <.text_24>)
 80010ca:	4770      	bx	lr
 80010cc:	a03f      	add	r0, pc, #252	; (adr r0, 80011cc <.text_25>)
 80010ce:	4770      	bx	lr
 80010d0:	a040      	add	r0, pc, #256	; (adr r0, 80011d4 <.text_26>)
 80010d2:	4770      	bx	lr
 80010d4:	a041      	add	r0, pc, #260	; (adr r0, 80011dc <.text_27>)
 80010d6:	4770      	bx	lr
 80010d8:	a043      	add	r0, pc, #268	; (adr r0, 80011e8 <.text_28>)
 80010da:	4770      	bx	lr
 80010dc:	a044      	add	r0, pc, #272	; (adr r0, 80011f0 <.text_29>)
 80010de:	4770      	bx	lr
 80010e0:	a045      	add	r0, pc, #276	; (adr r0, 80011f8 <.text_30>)
 80010e2:	4770      	bx	lr
 80010e4:	a00b      	add	r0, pc, #44	; (adr r0, 8001114 <.text_12>)
 80010e6:	4770      	bx	lr
 80010e8:	a049      	add	r0, pc, #292	; (adr r0, 8001210 <.text_31>)
 80010ea:	4770      	bx	lr
 80010ec:	a04a      	add	r0, pc, #296	; (adr r0, 8001218 <.text_32>)
 80010ee:	4770      	bx	lr
 80010f0:	a04b      	add	r0, pc, #300	; (adr r0, 8001220 <.text_33>)
 80010f2:	4770      	bx	lr
 80010f4:	a000      	add	r0, pc, #0	; (adr r0, 80010f8 <.text_5>)
 80010f6:	4770      	bx	lr

080010f8 <.text_5>:
 80010f8:	00000000 	.word	0x00000000

080010fc <.text_6>:
 80010fc:	00444441 	.word	0x00444441

08001100 <.text_7>:
 8001100:	00004e42 	.word	0x00004e42

08001104 <.text_8>:
 8001104:	00555247 	.word	0x00555247

08001108 <.text_9>:
 8001108:	004e524c 	.word	0x004e524c

0800110c <.text_10>:
 800110c:	00004c4e 	.word	0x00004c4e

08001110 <.text_11>:
 8001110:	00004d53 	.word	0x00004d53

08001114 <.text_12>:
 8001114:	00444150 	.word	0x00444150

08001118 <ai_layer_type_is_valid>:
 8001118:	f242 7111 	movw	r1, #10001	; 0x2711
 800111c:	1a40      	subs	r0, r0, r1
 800111e:	2801      	cmp	r0, #1
 8001120:	bf81      	itttt	hi
 8001122:	1ec0      	subhi	r0, r0, #3
 8001124:	280d      	cmphi	r0, #13
 8001126:	380f      	subhi	r0, #15
 8001128:	2809      	cmphi	r0, #9
 800112a:	d801      	bhi.n	8001130 <ai_layer_type_is_valid+0x18>
 800112c:	2001      	movs	r0, #1
 800112e:	4770      	bx	lr
 8001130:	2000      	movs	r0, #0
 8001132:	4770      	bx	lr

08001134 <ai_layers_forward_all>:
 8001134:	b530      	push	{r4, r5, lr}
 8001136:	b081      	sub	sp, #4
 8001138:	4604      	mov	r4, r0
 800113a:	6d20      	ldr	r0, [r4, #80]	; 0x50
 800113c:	b158      	cbz	r0, 8001156 <ai_layers_forward_all+0x22>
 800113e:	6560      	str	r0, [r4, #84]	; 0x54
 8001140:	6d65      	ldr	r5, [r4, #84]	; 0x54
 8001142:	6929      	ldr	r1, [r5, #16]
 8001144:	4628      	mov	r0, r5
 8001146:	4788      	blx	r1
 8001148:	68e8      	ldr	r0, [r5, #12]
 800114a:	42a8      	cmp	r0, r5
 800114c:	bf08      	it	eq
 800114e:	2000      	moveq	r0, #0
 8001150:	2800      	cmp	r0, #0
 8001152:	6560      	str	r0, [r4, #84]	; 0x54
 8001154:	d1f4      	bne.n	8001140 <ai_layers_forward_all+0xc>
 8001156:	b001      	add	sp, #4
 8001158:	bd30      	pop	{r4, r5, pc}
	...

0800115c <.text_15>:
 800115c:	564e4f43 	.word	0x564e4f43
 8001160:	00004432 	.word	0x00004432

08001164 <.text_16>:
 8001164:	534e4544 	.word	0x534e4544
 8001168:	0045      	.short	0x0045
	...

0800116c <.text_17>:
 800116c:	4d54534c 	.word	0x4d54534c
 8001170:	00          	.byte	0x00
 8001171:	00          	.byte	0x00
	...

08001174 <.text_18>:
 8001174:	4d524f4e 	.word	0x4d524f4e
 8001178:	00          	.byte	0x00
 8001179:	00          	.byte	0x00
	...

0800117c <.text_19>:
 800117c:	4954504f 	.word	0x4954504f
 8001180:	455a494d 	.word	0x455a494d
 8001184:	4f435f44 	.word	0x4f435f44
 8001188:	4432564e 	.word	0x4432564e
 800118c:	00          	.byte	0x00
 800118d:	00          	.byte	0x00
	...

08001190 <.text_20>:
 8001190:	4e415254 	.word	0x4e415254
 8001194:	534f5053 	.word	0x534f5053
 8001198:	0045      	.short	0x0045
	...

0800119c <.text_21>:
 800119c:	4c4f4f50 	.word	0x4c4f4f50
 80011a0:	00          	.byte	0x00
 80011a1:	00          	.byte	0x00
	...

080011a4 <.text_22>:
 80011a4:	494c5053 	.word	0x494c5053
 80011a8:	0054      	.short	0x0054
	...

080011ac <.text_23>:
 80011ac:	454d4954 	.word	0x454d4954
 80011b0:	4c45445f 	.word	0x4c45445f
 80011b4:	00005941 	.word	0x00005941

080011b8 <.text_24>:
 80011b8:	454d4954 	.word	0x454d4954
 80011bc:	5349445f 	.word	0x5349445f
 80011c0:	42495254 	.word	0x42495254
 80011c4:	44455455 	.word	0x44455455
 80011c8:	00          	.byte	0x00
 80011c9:	00          	.byte	0x00
	...

080011cc <.text_25>:
 80011cc:	434e4f43 	.word	0x434e4f43
 80011d0:	00005441 	.word	0x00005441

080011d4 <.text_26>:
 80011d4:	4d4d4547 	.word	0x4d4d4547
 80011d8:	00          	.byte	0x00
 80011d9:	00          	.byte	0x00
	...

080011dc <.text_27>:
 80011dc:	41535055 	.word	0x41535055
 80011e0:	454c504d 	.word	0x454c504d
 80011e4:	00          	.byte	0x00
 80011e5:	00          	.byte	0x00
	...

080011e8 <.text_28>:
 80011e8:	57544c45 	.word	0x57544c45
 80011ec:	00455349 	.word	0x00455349

080011f0 <.text_29>:
 80011f0:	454e4547 	.word	0x454e4547
 80011f4:	00434952 	.word	0x00434952

080011f8 <.text_30>:
 80011f8:	54534e49 	.word	0x54534e49
 80011fc:	45434e41 	.word	0x45434e41
 8001200:	4d524f4e 	.word	0x4d524f4e
 8001204:	5a494c41 	.word	0x5a494c41
 8001208:	4f495441 	.word	0x4f495441
 800120c:	004e      	.short	0x004e
	...

08001210 <.text_31>:
 8001210:	43494c53 	.word	0x43494c53
 8001214:	0045      	.short	0x0045
	...

08001218 <.text_32>:
 8001218:	454c4954 	.word	0x454c4954
 800121c:	00          	.byte	0x00
 800121d:	00          	.byte	0x00
	...

08001220 <.text_33>:
 8001220:	55444552 	.word	0x55444552
 8001224:	00004543 	.word	0x00004543

08001228 <ai_check_custom_types::ref_signatures>:
 8001228:	84048403                                ....

0800122c <ai_conv2d_stripe_f32>:
 800122c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001230:	b098      	sub	sp, #96	; 0x60
 8001232:	9825      	ldr	r0, [sp, #148]	; 0x94
 8001234:	2800      	cmp	r0, #0
 8001236:	f000 82e3 	beq.w	8001800 <ai_conv2d_stripe_f32+0x5d4>
 800123a:	9f2d      	ldr	r7, [sp, #180]	; 0xb4
 800123c:	f8dd e090 	ldr.w	lr, [sp, #144]	; 0x90
 8001240:	9e2c      	ldr	r6, [sp, #176]	; 0xb0
 8001242:	9004      	str	r0, [sp, #16]
 8001244:	982a      	ldr	r0, [sp, #168]	; 0xa8
 8001246:	f9bd a0c0 	ldrsh.w	sl, [sp, #192]	; 0xc0
 800124a:	9d2b      	ldr	r5, [sp, #172]	; 0xac
 800124c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8001250:	fb0e 6707 	mla	r7, lr, r7, r6
 8001254:	f9bd 60c0 	ldrsh.w	r6, [sp, #192]	; 0xc0
 8001258:	9705      	str	r7, [sp, #20]
 800125a:	9f2a      	ldr	r7, [sp, #168]	; 0xa8
 800125c:	9100      	str	r1, [sp, #0]
 800125e:	9217      	str	r2, [sp, #92]	; 0x5c
 8001260:	fb0e f707 	mul.w	r7, lr, r7
 8001264:	1986      	adds	r6, r0, r6
 8001266:	9826      	ldr	r0, [sp, #152]	; 0x98
 8001268:	1e76      	subs	r6, r6, #1
 800126a:	fb96 fafa 	sdiv	sl, r6, sl
 800126e:	9e22      	ldr	r6, [sp, #136]	; 0x88
 8001270:	f9bd e0c0 	ldrsh.w	lr, [sp, #192]	; 0xc0
 8001274:	fb0a fa00 	mul.w	sl, sl, r0
 8001278:	9306      	str	r3, [sp, #24]
 800127a:	f8cd a058 	str.w	sl, [sp, #88]	; 0x58
 800127e:	f8dd a0a8 	ldr.w	sl, [sp, #168]	; 0xa8
 8001282:	4377      	muls	r7, r6
 8001284:	970b      	str	r7, [sp, #44]	; 0x2c
 8001286:	f9bd 70bc 	ldrsh.w	r7, [sp, #188]	; 0xbc
 800128a:	4377      	muls	r7, r6
 800128c:	9e24      	ldr	r6, [sp, #144]	; 0x90
 800128e:	9715      	str	r7, [sp, #84]	; 0x54
 8001290:	f9bd 70c0 	ldrsh.w	r7, [sp, #192]	; 0xc0
 8001294:	eba7 070a 	sub.w	r7, r7, sl
 8001298:	9713      	str	r7, [sp, #76]	; 0x4c
 800129a:	4657      	mov	r7, sl
 800129c:	4347      	muls	r7, r0
 800129e:	9711      	str	r7, [sp, #68]	; 0x44
 80012a0:	fb06 fe0e 	mul.w	lr, r6, lr
 80012a4:	f9bd 60bc 	ldrsh.w	r6, [sp, #188]	; 0xbc
 80012a8:	f8cd e050 	str.w	lr, [sp, #80]	; 0x50
 80012ac:	f9bd 70c0 	ldrsh.w	r7, [sp, #192]	; 0xc0
 80012b0:	fb00 fe0a 	mul.w	lr, r0, sl
 80012b4:	f8dd a08c 	ldr.w	sl, [sp, #140]	; 0x8c
 80012b8:	f8cd e048 	str.w	lr, [sp, #72]	; 0x48
 80012bc:	f8dd e088 	ldr.w	lr, [sp, #136]	; 0x88
 80012c0:	fb16 f707 	smulbb	r7, r6, r7
 80012c4:	9e29      	ldr	r6, [sp, #164]	; 0xa4
 80012c6:	970a      	str	r7, [sp, #40]	; 0x28
 80012c8:	9f22      	ldr	r7, [sp, #136]	; 0x88
 80012ca:	fb00 fe0e 	mul.w	lr, r0, lr
 80012ce:	fbba f6f6 	udiv	r6, sl, r6
 80012d2:	9610      	str	r6, [sp, #64]	; 0x40
 80012d4:	f8dd a0a4 	ldr.w	sl, [sp, #164]	; 0xa4
 80012d8:	9e23      	ldr	r6, [sp, #140]	; 0x8c
 80012da:	f8cd e034 	str.w	lr, [sp, #52]	; 0x34
 80012de:	fbb7 fafa 	udiv	sl, r7, sl
 80012e2:	f8cd a03c 	str.w	sl, [sp, #60]	; 0x3c
 80012e6:	fbb6 f7f7 	udiv	r7, r6, r7
 80012ea:	9e2a      	ldr	r6, [sp, #168]	; 0xa8
 80012ec:	970e      	str	r7, [sp, #56]	; 0x38
 80012ee:	1bad      	subs	r5, r5, r6
 80012f0:	950c      	str	r5, [sp, #48]	; 0x30
 80012f2:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
 80012f4:	9924      	ldr	r1, [sp, #144]	; 0x90
 80012f6:	982c      	ldr	r0, [sp, #176]	; 0xb0
 80012f8:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 80012fa:	4264      	negs	r4, r4
 80012fc:	bfd8      	it	le
 80012fe:	2400      	movle	r4, #0
 8001300:	1a09      	subs	r1, r1, r0
 8001302:	4291      	cmp	r1, r2
 8001304:	bf3a      	itte	cc
 8001306:	9924      	ldrcc	r1, [sp, #144]	; 0x90
 8001308:	1a0e      	subcc	r6, r1, r0
 800130a:	4616      	movcs	r6, r2
 800130c:	9a05      	ldr	r2, [sp, #20]
 800130e:	9922      	ldr	r1, [sp, #136]	; 0x88
 8001310:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8001312:	18a2      	adds	r2, r4, r2
 8001314:	434a      	muls	r2, r1
 8001316:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800131a:	9821      	ldr	r0, [sp, #132]	; 0x84
 800131c:	b900      	cbnz	r0, 8001320 <ai_conv2d_stripe_f32+0xf4>
 800131e:	9800      	ldr	r0, [sp, #0]
 8001320:	9001      	str	r0, [sp, #4]
 8001322:	9829      	ldr	r0, [sp, #164]	; 0xa4
 8001324:	1b36      	subs	r6, r6, r4
 8001326:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8001328:	2801      	cmp	r0, #1
 800132a:	bf04      	itt	eq
 800132c:	990a      	ldreq	r1, [sp, #40]	; 0x28
 800132e:	2901      	cmpeq	r1, #1
 8001330:	f040 80ad 	bne.w	800148e <ai_conv2d_stripe_f32+0x262>
 8001334:	f8dd a090 	ldr.w	sl, [sp, #144]	; 0x90
 8001338:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800133a:	9822      	ldr	r0, [sp, #136]	; 0x88
 800133c:	f8dd c034 	ldr.w	ip, [sp, #52]	; 0x34
 8001340:	ebaa 0a06 	sub.w	sl, sl, r6
 8001344:	9f11      	ldr	r7, [sp, #68]	; 0x44
 8001346:	1b9b      	subs	r3, r3, r6
 8001348:	f8dd e000 	ldr.w	lr, [sp]
 800134c:	fb0a fa00 	mul.w	sl, sl, r0
 8001350:	fb03 f100 	mul.w	r1, r3, r0
 8001354:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8001356:	9b06      	ldr	r3, [sp, #24]
 8001358:	19e4      	adds	r4, r4, r7
 800135a:	1b40      	subs	r0, r0, r5
 800135c:	fb00 fc0c 	mul.w	ip, r0, ip
 8001360:	9822      	ldr	r0, [sp, #136]	; 0x88
 8001362:	4344      	muls	r4, r0
 8001364:	4370      	muls	r0, r6
 8001366:	eb03 0784 	add.w	r7, r3, r4, lsl #2
 800136a:	9e01      	ldr	r6, [sp, #4]
 800136c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800136e:	eb02 0983 	add.w	r9, r2, r3, lsl #2
 8001372:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8001374:	4576      	cmp	r6, lr
 8001376:	bf0c      	ite	eq
 8001378:	eddf 0ab0 	vldreq	s1, [pc, #704]	; 800163c <ai_conv2d_stripe_f32+0x410>
 800137c:	eef0 0a40 	vmovne.f32	s1, s0
 8001380:	2a00      	cmp	r2, #0
 8001382:	f000 8229 	beq.w	80017d8 <ai_conv2d_stripe_f32+0x5ac>
 8001386:	46b0      	mov	r8, r6
 8001388:	4613      	mov	r3, r2
 800138a:	462e      	mov	r6, r5
 800138c:	463a      	mov	r2, r7
 800138e:	f8cd c008 	str.w	ip, [sp, #8]
 8001392:	461d      	mov	r5, r3
 8001394:	4607      	mov	r7, r0
 8001396:	f8cd 9004 	str.w	r9, [sp, #4]
 800139a:	46c4      	mov	ip, r8
 800139c:	9b00      	ldr	r3, [sp, #0]
 800139e:	f027 0403 	bic.w	r4, r7, #3
 80013a2:	2e00      	cmp	r6, #0
 80013a4:	ed9c 1a00 	vldr	s2, [ip]
 80013a8:	ee21 1a20 	vmul.f32	s2, s2, s1
 80013ac:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80013b0:	dd60      	ble.n	8001474 <ai_conv2d_stripe_f32+0x248>
 80013b2:	4630      	mov	r0, r6
 80013b4:	2c00      	cmp	r4, #0
 80013b6:	f04f 0900 	mov.w	r9, #0
 80013ba:	dd1e      	ble.n	80013fa <ai_conv2d_stripe_f32+0x1ce>
 80013bc:	edd2 4a00 	vldr	s9, [r2]
 80013c0:	f109 0904 	add.w	r9, r9, #4
 80013c4:	ed98 5a00 	vldr	s10, [r8]
 80013c8:	edd2 3a01 	vldr	s7, [r2, #4]
 80013cc:	ed98 4a01 	vldr	s8, [r8, #4]
 80013d0:	ee04 1a85 	vmla.f32	s2, s9, s10
 80013d4:	edd2 2a02 	vldr	s5, [r2, #8]
 80013d8:	ed98 3a02 	vldr	s6, [r8, #8]
 80013dc:	ee03 1a84 	vmla.f32	s2, s7, s8
 80013e0:	edd2 1a03 	vldr	s3, [r2, #12]
 80013e4:	3210      	adds	r2, #16
 80013e6:	45a1      	cmp	r9, r4
 80013e8:	ed98 2a03 	vldr	s4, [r8, #12]
 80013ec:	ee02 1a83 	vmla.f32	s2, s5, s6
 80013f0:	f108 0810 	add.w	r8, r8, #16
 80013f4:	ee01 1a82 	vmla.f32	s2, s3, s4
 80013f8:	dbe0      	blt.n	80013bc <ai_conv2d_stripe_f32+0x190>
 80013fa:	45b9      	cmp	r9, r7
 80013fc:	f280 8034 	bge.w	8001468 <ai_conv2d_stripe_f32+0x23c>
 8001400:	f109 0901 	add.w	r9, r9, #1
 8001404:	edd2 2a00 	vldr	s5, [r2]
 8001408:	1d12      	adds	r2, r2, #4
 800140a:	edd8 1a00 	vldr	s3, [r8]
 800140e:	45b9      	cmp	r9, r7
 8001410:	ee02 1aa1 	vmla.f32	s2, s5, s3
 8001414:	f108 0804 	add.w	r8, r8, #4
 8001418:	da26      	bge.n	8001468 <ai_conv2d_stripe_f32+0x23c>
 800141a:	f109 0901 	add.w	r9, r9, #1
 800141e:	ed92 3a00 	vldr	s6, [r2]
 8001422:	1d12      	adds	r2, r2, #4
 8001424:	ed98 2a00 	vldr	s4, [r8]
 8001428:	45b9      	cmp	r9, r7
 800142a:	ee03 1a02 	vmla.f32	s2, s6, s4
 800142e:	f108 0804 	add.w	r8, r8, #4
 8001432:	da19      	bge.n	8001468 <ai_conv2d_stripe_f32+0x23c>
 8001434:	f109 0901 	add.w	r9, r9, #1
 8001438:	edd2 2a00 	vldr	s5, [r2]
 800143c:	1d12      	adds	r2, r2, #4
 800143e:	edd8 1a00 	vldr	s3, [r8]
 8001442:	45b9      	cmp	r9, r7
 8001444:	ee02 1aa1 	vmla.f32	s2, s5, s3
 8001448:	f108 0804 	add.w	r8, r8, #4
 800144c:	da0c      	bge.n	8001468 <ai_conv2d_stripe_f32+0x23c>
 800144e:	f109 0901 	add.w	r9, r9, #1
 8001452:	ed92 2a00 	vldr	s4, [r2]
 8001456:	1d12      	adds	r2, r2, #4
 8001458:	ed98 3a00 	vldr	s6, [r8]
 800145c:	45b9      	cmp	r9, r7
 800145e:	ee02 1a03 	vmla.f32	s2, s4, s6
 8001462:	f108 0804 	add.w	r8, r8, #4
 8001466:	dbcb      	blt.n	8001400 <ai_conv2d_stripe_f32+0x1d4>
 8001468:	1e40      	subs	r0, r0, #1
 800146a:	eb08 088a 	add.w	r8, r8, sl, lsl #2
 800146e:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8001472:	d19f      	bne.n	80013b4 <ai_conv2d_stripe_f32+0x188>
 8001474:	1e6d      	subs	r5, r5, #1
 8001476:	9802      	ldr	r0, [sp, #8]
 8001478:	ed8e 1a00 	vstr	s2, [lr]
 800147c:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 8001480:	f10e 0e04 	add.w	lr, lr, #4
 8001484:	f10c 0c04 	add.w	ip, ip, #4
 8001488:	d18b      	bne.n	80013a2 <ai_conv2d_stripe_f32+0x176>
 800148a:	9300      	str	r3, [sp, #0]
 800148c:	e1a4      	b.n	80017d8 <ai_conv2d_stripe_f32+0x5ac>
 800148e:	9922      	ldr	r1, [sp, #136]	; 0x88
 8001490:	4288      	cmp	r0, r1
 8001492:	bf04      	itt	eq
 8001494:	9b0a      	ldreq	r3, [sp, #40]	; 0x28
 8001496:	2b01      	cmpeq	r3, #1
 8001498:	f040 80d2 	bne.w	8001640 <ai_conv2d_stripe_f32+0x414>
 800149c:	9f24      	ldr	r7, [sp, #144]	; 0x90
 800149e:	9822      	ldr	r0, [sp, #136]	; 0x88
 80014a0:	990e      	ldr	r1, [sp, #56]	; 0x38
 80014a2:	f8dd a048 	ldr.w	sl, [sp, #72]	; 0x48
 80014a6:	9102      	str	r1, [sp, #8]
 80014a8:	9926      	ldr	r1, [sp, #152]	; 0x98
 80014aa:	1bbf      	subs	r7, r7, r6
 80014ac:	9b06      	ldr	r3, [sp, #24]
 80014ae:	4347      	muls	r7, r0
 80014b0:	9827      	ldr	r0, [sp, #156]	; 0x9c
 80014b2:	4454      	add	r4, sl
 80014b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80014b8:	f8dd c098 	ldr.w	ip, [sp, #152]	; 0x98
 80014bc:	f8dd a02c 	ldr.w	sl, [sp, #44]	; 0x2c
 80014c0:	1b40      	subs	r0, r0, r5
 80014c2:	4341      	muls	r1, r0
 80014c4:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 80014c8:	9b00      	ldr	r3, [sp, #0]
 80014ca:	ebac 0c06 	sub.w	ip, ip, r6
 80014ce:	459e      	cmp	lr, r3
 80014d0:	eb02 0e8a 	add.w	lr, r2, sl, lsl #2
 80014d4:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80014d6:	f04f 0a00 	mov.w	sl, #0
 80014da:	eb0e 0883 	add.w	r8, lr, r3, lsl #2
 80014de:	bf0c      	ite	eq
 80014e0:	eddf 0a56 	vldreq	s1, [pc, #344]	; 800163c <ai_conv2d_stripe_f32+0x410>
 80014e4:	eef0 0a40 	vmovne.f32	s1, s0
 80014e8:	f8cd 800c 	str.w	r8, [sp, #12]
 80014ec:	45c6      	cmp	lr, r8
 80014ee:	f080 8173 	bcs.w	80017d8 <ai_conv2d_stripe_f32+0x5ac>
 80014f2:	9b00      	ldr	r3, [sp, #0]
 80014f4:	9a02      	ldr	r2, [sp, #8]
 80014f6:	2a00      	cmp	r2, #0
 80014f8:	f000 8099 	beq.w	800162e <ai_conv2d_stripe_f32+0x402>
 80014fc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 8001500:	9500      	str	r5, [sp, #0]
 8001502:	f8dd 9004 	ldr.w	r9, [sp, #4]
 8001506:	f8dd b008 	ldr.w	fp, [sp, #8]
 800150a:	9108      	str	r1, [sp, #32]
 800150c:	eb09 048a 	add.w	r4, r9, sl, lsl #2
 8001510:	f8cd e01c 	str.w	lr, [sp, #28]
 8001514:	4615      	mov	r5, r2
 8001516:	9a00      	ldr	r2, [sp, #0]
 8001518:	ed94 1a00 	vldr	s2, [r4]
 800151c:	ee21 1a20 	vmul.f32	s2, s2, s1
 8001520:	9907      	ldr	r1, [sp, #28]
 8001522:	2a00      	cmp	r2, #0
 8001524:	f340 8072 	ble.w	800160c <ai_conv2d_stripe_f32+0x3e0>
 8001528:	f026 0e03 	bic.w	lr, r6, #3
 800152c:	f1be 0f00 	cmp.w	lr, #0
 8001530:	f04f 0900 	mov.w	r9, #0
 8001534:	f340 8029 	ble.w	800158a <ai_conv2d_stripe_f32+0x35e>
 8001538:	f8dd 8088 	ldr.w	r8, [sp, #136]	; 0x88
 800153c:	edd0 1a00 	vldr	s3, [r0]
 8001540:	f109 0904 	add.w	r9, r9, #4
 8001544:	ed91 2a00 	vldr	s4, [r1]
 8001548:	eb01 0188 	add.w	r1, r1, r8, lsl #2
 800154c:	ee01 1a82 	vmla.f32	s2, s3, s4
 8001550:	edd0 2a01 	vldr	s5, [r0, #4]
 8001554:	edd0 1a02 	vldr	s3, [r0, #8]
 8001558:	ed91 3a00 	vldr	s6, [r1]
 800155c:	eb01 0188 	add.w	r1, r1, r8, lsl #2
 8001560:	ee02 1a83 	vmla.f32	s2, s5, s6
 8001564:	edd0 2a03 	vldr	s5, [r0, #12]
 8001568:	3010      	adds	r0, #16
 800156a:	45f1      	cmp	r9, lr
 800156c:	ed91 2a00 	vldr	s4, [r1]
 8001570:	eb01 0188 	add.w	r1, r1, r8, lsl #2
 8001574:	ee01 1a82 	vmla.f32	s2, s3, s4
 8001578:	ed91 3a00 	vldr	s6, [r1]
 800157c:	eb01 0188 	add.w	r1, r1, r8, lsl #2
 8001580:	ee02 1a83 	vmla.f32	s2, s5, s6
 8001584:	dbda      	blt.n	800153c <ai_conv2d_stripe_f32+0x310>
 8001586:	f8cd 8088 	str.w	r8, [sp, #136]	; 0x88
 800158a:	45b1      	cmp	r9, r6
 800158c:	f280 8038 	bge.w	8001600 <ai_conv2d_stripe_f32+0x3d4>
 8001590:	f8dd e088 	ldr.w	lr, [sp, #136]	; 0x88
 8001594:	f109 0901 	add.w	r9, r9, #1
 8001598:	edd0 1a00 	vldr	s3, [r0]
 800159c:	1d00      	adds	r0, r0, #4
 800159e:	ed91 2a00 	vldr	s4, [r1]
 80015a2:	45b1      	cmp	r9, r6
 80015a4:	ee01 1a82 	vmla.f32	s2, s3, s4
 80015a8:	eb01 018e 	add.w	r1, r1, lr, lsl #2
 80015ac:	da26      	bge.n	80015fc <ai_conv2d_stripe_f32+0x3d0>
 80015ae:	f109 0901 	add.w	r9, r9, #1
 80015b2:	ed90 2a00 	vldr	s4, [r0]
 80015b6:	1d00      	adds	r0, r0, #4
 80015b8:	edd1 1a00 	vldr	s3, [r1]
 80015bc:	45b1      	cmp	r9, r6
 80015be:	ee02 1a21 	vmla.f32	s2, s4, s3
 80015c2:	eb01 018e 	add.w	r1, r1, lr, lsl #2
 80015c6:	da19      	bge.n	80015fc <ai_conv2d_stripe_f32+0x3d0>
 80015c8:	f109 0901 	add.w	r9, r9, #1
 80015cc:	edd0 1a00 	vldr	s3, [r0]
 80015d0:	1d00      	adds	r0, r0, #4
 80015d2:	ed91 2a00 	vldr	s4, [r1]
 80015d6:	45b1      	cmp	r9, r6
 80015d8:	ee01 1a82 	vmla.f32	s2, s3, s4
 80015dc:	eb01 018e 	add.w	r1, r1, lr, lsl #2
 80015e0:	da0c      	bge.n	80015fc <ai_conv2d_stripe_f32+0x3d0>
 80015e2:	f109 0901 	add.w	r9, r9, #1
 80015e6:	ed90 2a00 	vldr	s4, [r0]
 80015ea:	1d00      	adds	r0, r0, #4
 80015ec:	edd1 1a00 	vldr	s3, [r1]
 80015f0:	45b1      	cmp	r9, r6
 80015f2:	ee02 1a21 	vmla.f32	s2, s4, s3
 80015f6:	eb01 018e 	add.w	r1, r1, lr, lsl #2
 80015fa:	dbcb      	blt.n	8001594 <ai_conv2d_stripe_f32+0x368>
 80015fc:	f8cd e088 	str.w	lr, [sp, #136]	; 0x88
 8001600:	1e52      	subs	r2, r2, #1
 8001602:	eb01 0187 	add.w	r1, r1, r7, lsl #2
 8001606:	eb00 008c 	add.w	r0, r0, ip, lsl #2
 800160a:	d18d      	bne.n	8001528 <ai_conv2d_stripe_f32+0x2fc>
 800160c:	1d24      	adds	r4, r4, #4
 800160e:	9908      	ldr	r1, [sp, #32]
 8001610:	ed85 1a00 	vstr	s2, [r5]
 8001614:	1d2d      	adds	r5, r5, #4
 8001616:	f1bb 0b01 	subs.w	fp, fp, #1
 800161a:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 800161e:	f10a 0a01 	add.w	sl, sl, #1
 8001622:	f47f af78 	bne.w	8001516 <ai_conv2d_stripe_f32+0x2ea>
 8001626:	9d00      	ldr	r5, [sp, #0]
 8001628:	9908      	ldr	r1, [sp, #32]
 800162a:	f8dd e01c 	ldr.w	lr, [sp, #28]
 800162e:	9a03      	ldr	r2, [sp, #12]
 8001630:	f10e 0e04 	add.w	lr, lr, #4
 8001634:	4596      	cmp	lr, r2
 8001636:	f4bf af28 	bcs.w	800148a <ai_conv2d_stripe_f32+0x25e>
 800163a:	e75b      	b.n	80014f4 <ai_conv2d_stripe_f32+0x2c8>
 800163c:	00000000 	.word	0x00000000
 8001640:	f9bd 10bc 	ldrsh.w	r1, [sp, #188]	; 0xbc
 8001644:	f8dd c04c 	ldr.w	ip, [sp, #76]	; 0x4c
 8001648:	f8dd 9050 	ldr.w	r9, [sp, #80]	; 0x50
 800164c:	f8dd e098 	ldr.w	lr, [sp, #152]	; 0x98
 8001650:	f8dd 8098 	ldr.w	r8, [sp, #152]	; 0x98
 8001654:	4608      	mov	r0, r1
 8001656:	1b0b      	subs	r3, r1, r4
 8001658:	1876      	adds	r6, r6, r1
 800165a:	fb94 faf0 	sdiv	sl, r4, r0
 800165e:	fb00 300a 	mla	r0, r0, sl, r3
 8001662:	f9bd 30c0 	ldrsh.w	r3, [sp, #192]	; 0xc0
 8001666:	1e76      	subs	r6, r6, #1
 8001668:	1864      	adds	r4, r4, r1
 800166a:	1e64      	subs	r4, r4, #1
 800166c:	f8dd a054 	ldr.w	sl, [sp, #84]	; 0x54
 8001670:	fb90 f7f1 	sdiv	r7, r0, r1
 8001674:	fb01 0717 	mls	r7, r1, r7, r0
 8001678:	982a      	ldr	r0, [sp, #168]	; 0xa8
 800167a:	fb90 f0f3 	sdiv	r0, r0, r3
 800167e:	fb03 c000 	mla	r0, r3, r0, ip
 8001682:	1bf6      	subs	r6, r6, r7
 8001684:	fb90 fbf3 	sdiv	fp, r0, r3
 8001688:	fb03 0b1b 	mls	fp, r3, fp, r0
 800168c:	fb96 f0f1 	sdiv	r0, r6, r1
 8001690:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8001692:	fb00 9911 	mls	r9, r0, r1, r9
 8001696:	9609      	str	r6, [sp, #36]	; 0x24
 8001698:	9e27      	ldr	r6, [sp, #156]	; 0x9c
 800169a:	fb94 f1f1 	sdiv	r1, r4, r1
 800169e:	9c00      	ldr	r4, [sp, #0]
 80016a0:	eba5 050b 	sub.w	r5, r5, fp
 80016a4:	195d      	adds	r5, r3, r5
 80016a6:	1e6d      	subs	r5, r5, #1
 80016a8:	fb95 fcf3 	sdiv	ip, r5, r3
 80016ac:	9d22      	ldr	r5, [sp, #136]	; 0x88
 80016ae:	eba6 060c 	sub.w	r6, r6, ip
 80016b2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80016b4:	eba8 0800 	sub.w	r8, r8, r0
 80016b8:	fb05 f909 	mul.w	r9, r5, r9
 80016bc:	9d16      	ldr	r5, [sp, #88]	; 0x58
 80016be:	fb0e fe03 	mul.w	lr, lr, r3
 80016c2:	ebaa 0a03 	sub.w	sl, sl, r3
 80016c6:	fb08 f803 	mul.w	r8, r8, r3
 80016ca:	194d      	adds	r5, r1, r5
 80016cc:	fb06 fe0e 	mul.w	lr, r6, lr
 80016d0:	9e06      	ldr	r6, [sp, #24]
 80016d2:	435d      	muls	r5, r3
 80016d4:	eb06 0185 	add.w	r1, r6, r5, lsl #2
 80016d8:	9d01      	ldr	r5, [sp, #4]
 80016da:	9e2a      	ldr	r6, [sp, #168]	; 0xa8
 80016dc:	42a5      	cmp	r5, r4
 80016de:	9c24      	ldr	r4, [sp, #144]	; 0x90
 80016e0:	9d22      	ldr	r5, [sp, #136]	; 0x88
 80016e2:	44b3      	add	fp, r6
 80016e4:	fb04 770b 	mla	r7, r4, fp, r7
 80016e8:	bf0c      	ite	eq
 80016ea:	eddf 0a47 	vldreq	s1, [pc, #284]	; 8001808 <.text_3>
 80016ee:	eef0 0a40 	vmovne.f32	s1, s0
 80016f2:	436f      	muls	r7, r5
 80016f4:	eb02 0487 	add.w	r4, r2, r7, lsl #2
 80016f8:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 80016fa:	2500      	movs	r5, #0
 80016fc:	2a00      	cmp	r2, #0
 80016fe:	d06b      	beq.n	80017d8 <ai_conv2d_stripe_f32+0x5ac>
 8001700:	9202      	str	r2, [sp, #8]
 8001702:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001704:	2a00      	cmp	r2, #0
 8001706:	d061      	beq.n	80017cc <ai_conv2d_stripe_f32+0x5a0>
 8001708:	9a00      	ldr	r2, [sp, #0]
 800170a:	9e01      	ldr	r6, [sp, #4]
 800170c:	f8cd c00c 	str.w	ip, [sp, #12]
 8001710:	eb02 0785 	add.w	r7, r2, r5, lsl #2
 8001714:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001716:	f8cd e020 	str.w	lr, [sp, #32]
 800171a:	eb06 0685 	add.w	r6, r6, r5, lsl #2
 800171e:	9407      	str	r4, [sp, #28]
 8001720:	f8dd e00c 	ldr.w	lr, [sp, #12]
 8001724:	ed96 1a00 	vldr	s2, [r6]
 8001728:	ee21 1a20 	vmul.f32	s2, s2, s1
 800172c:	9c07      	ldr	r4, [sp, #28]
 800172e:	f1be 0f00 	cmp.w	lr, #0
 8001732:	dd3b      	ble.n	80017ac <ai_conv2d_stripe_f32+0x580>
 8001734:	2800      	cmp	r0, #0
 8001736:	dd32      	ble.n	800179e <ai_conv2d_stripe_f32+0x572>
 8001738:	ea4f 0c00 	mov.w	ip, r0
 800173c:	eb04 0b83 	add.w	fp, r4, r3, lsl #2
 8001740:	455c      	cmp	r4, fp
 8001742:	d227      	bcs.n	8001794 <ai_conv2d_stripe_f32+0x568>
 8001744:	edd1 2a00 	vldr	s5, [r1]
 8001748:	1d09      	adds	r1, r1, #4
 800174a:	edd4 1a00 	vldr	s3, [r4]
 800174e:	1d24      	adds	r4, r4, #4
 8001750:	455c      	cmp	r4, fp
 8001752:	ee02 1aa1 	vmla.f32	s2, s5, s3
 8001756:	d21d      	bcs.n	8001794 <ai_conv2d_stripe_f32+0x568>
 8001758:	ed91 3a00 	vldr	s6, [r1]
 800175c:	1d09      	adds	r1, r1, #4
 800175e:	ed94 2a00 	vldr	s4, [r4]
 8001762:	1d24      	adds	r4, r4, #4
 8001764:	455c      	cmp	r4, fp
 8001766:	ee03 1a02 	vmla.f32	s2, s6, s4
 800176a:	d213      	bcs.n	8001794 <ai_conv2d_stripe_f32+0x568>
 800176c:	edd1 2a00 	vldr	s5, [r1]
 8001770:	1d09      	adds	r1, r1, #4
 8001772:	edd4 1a00 	vldr	s3, [r4]
 8001776:	1d24      	adds	r4, r4, #4
 8001778:	455c      	cmp	r4, fp
 800177a:	ee02 1aa1 	vmla.f32	s2, s5, s3
 800177e:	d209      	bcs.n	8001794 <ai_conv2d_stripe_f32+0x568>
 8001780:	ed91 2a00 	vldr	s4, [r1]
 8001784:	1d09      	adds	r1, r1, #4
 8001786:	ed94 3a00 	vldr	s6, [r4]
 800178a:	1d24      	adds	r4, r4, #4
 800178c:	455c      	cmp	r4, fp
 800178e:	ee02 1a03 	vmla.f32	s2, s4, s6
 8001792:	d3d7      	bcc.n	8001744 <ai_conv2d_stripe_f32+0x518>
 8001794:	f1bc 0c01 	subs.w	ip, ip, #1
 8001798:	eb04 048a 	add.w	r4, r4, sl, lsl #2
 800179c:	d1ce      	bne.n	800173c <ai_conv2d_stripe_f32+0x510>
 800179e:	f1be 0e01 	subs.w	lr, lr, #1
 80017a2:	eb04 0489 	add.w	r4, r4, r9, lsl #2
 80017a6:	eb01 0188 	add.w	r1, r1, r8, lsl #2
 80017aa:	d1c3      	bne.n	8001734 <ai_conv2d_stripe_f32+0x508>
 80017ac:	1c6d      	adds	r5, r5, #1
 80017ae:	f8dd c020 	ldr.w	ip, [sp, #32]
 80017b2:	ed87 1a00 	vstr	s2, [r7]
 80017b6:	1d3f      	adds	r7, r7, #4
 80017b8:	1d36      	adds	r6, r6, #4
 80017ba:	1e52      	subs	r2, r2, #1
 80017bc:	eb01 018c 	add.w	r1, r1, ip, lsl #2
 80017c0:	d1ae      	bne.n	8001720 <ai_conv2d_stripe_f32+0x4f4>
 80017c2:	f8dd c00c 	ldr.w	ip, [sp, #12]
 80017c6:	f8dd e020 	ldr.w	lr, [sp, #32]
 80017ca:	9c07      	ldr	r4, [sp, #28]
 80017cc:	9f02      	ldr	r7, [sp, #8]
 80017ce:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 80017d2:	1e7f      	subs	r7, r7, #1
 80017d4:	9702      	str	r7, [sp, #8]
 80017d6:	d194      	bne.n	8001702 <ai_conv2d_stripe_f32+0x4d6>
 80017d8:	9900      	ldr	r1, [sp, #0]
 80017da:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 80017dc:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 80017e0:	f8bd 20a0 	ldrh.w	r2, [sp, #160]	; 0xa0
 80017e4:	992c      	ldr	r1, [sp, #176]	; 0xb0
 80017e6:	9300      	str	r3, [sp, #0]
 80017e8:	9b05      	ldr	r3, [sp, #20]
 80017ea:	188a      	adds	r2, r1, r2
 80017ec:	f8bd 10a0 	ldrh.w	r1, [sp, #160]	; 0xa0
 80017f0:	922c      	str	r2, [sp, #176]	; 0xb0
 80017f2:	9a04      	ldr	r2, [sp, #16]
 80017f4:	1859      	adds	r1, r3, r1
 80017f6:	9105      	str	r1, [sp, #20]
 80017f8:	1e52      	subs	r2, r2, #1
 80017fa:	9204      	str	r2, [sp, #16]
 80017fc:	f47f ad79 	bne.w	80012f2 <ai_conv2d_stripe_f32+0xc6>
 8001800:	b018      	add	sp, #96	; 0x60
 8001802:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08001808 <.text_3>:
 8001808:	00000000 	.word	0x00000000

0800180c <func_dummy>:
 800180c:	4770      	bx	lr
	...

08001810 <ai_dict8_dot_array_f32>:
 8001810:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001812:	4604      	mov	r4, r0
 8001814:	9805      	ldr	r0, [sp, #20]
 8001816:	eb03 0580 	add.w	r5, r3, r0, lsl #2
 800181a:	ed9f 0ab4 	vldr	s0, [pc, #720]	; 8001aec <.text_6>
 800181e:	3d20      	subs	r5, #32
 8001820:	2808      	cmp	r0, #8
 8001822:	d231      	bcs.n	8001888 <ai_dict8_dot_array_f32+0x78>
 8001824:	3520      	adds	r5, #32
 8001826:	42ab      	cmp	r3, r5
 8001828:	f080 8159 	bcs.w	8001ade <ai_dict8_dot_array_f32+0x2ce>
 800182c:	780e      	ldrb	r6, [r1, #0]
 800182e:	edd3 0a00 	vldr	s1, [r3]
 8001832:	eb02 0086 	add.w	r0, r2, r6, lsl #2
 8001836:	ed90 1a00 	vldr	s2, [r0]
 800183a:	1d18      	adds	r0, r3, #4
 800183c:	42a8      	cmp	r0, r5
 800183e:	ee01 0a20 	vmla.f32	s0, s2, s1
 8001842:	f080 814c 	bcs.w	8001ade <ai_dict8_dot_array_f32+0x2ce>
 8001846:	784e      	ldrb	r6, [r1, #1]
 8001848:	edd0 0a00 	vldr	s1, [r0]
 800184c:	eb02 0386 	add.w	r3, r2, r6, lsl #2
 8001850:	1d00      	adds	r0, r0, #4
 8001852:	42a8      	cmp	r0, r5
 8001854:	ed93 1a00 	vldr	s2, [r3]
 8001858:	ee01 0a20 	vmla.f32	s0, s2, s1
 800185c:	f080 813f 	bcs.w	8001ade <ai_dict8_dot_array_f32+0x2ce>
 8001860:	788e      	ldrb	r6, [r1, #2]
 8001862:	1cc9      	adds	r1, r1, #3
 8001864:	eb02 0386 	add.w	r3, r2, r6, lsl #2
 8001868:	edd0 0a00 	vldr	s1, [r0]
 800186c:	ed93 1a00 	vldr	s2, [r3]
 8001870:	1d03      	adds	r3, r0, #4
 8001872:	42ab      	cmp	r3, r5
 8001874:	ee01 0a20 	vmla.f32	s0, s2, s1
 8001878:	d3d8      	bcc.n	800182c <ai_dict8_dot_array_f32+0x1c>
 800187a:	edd4 0a00 	vldr	s1, [r4]
 800187e:	ee30 0a80 	vadd.f32	s0, s1, s0
 8001882:	ed84 0a00 	vstr	s0, [r4]
 8001886:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001888:	f001 0003 	and.w	r0, r1, #3
 800188c:	2803      	cmp	r0, #3
 800188e:	f200 8126 	bhi.w	8001ade <ai_dict8_dot_array_f32+0x2ce>
 8001892:	e8df f010 	tbh	[pc, r0, lsl #1]
 8001896:	0004      	.short	0x0004
 8001898:	00940089 	.word	0x00940089
 800189c:	009f      	.short	0x009f
 800189e:	429d      	cmp	r5, r3
 80018a0:	d231      	bcs.n	8001906 <ai_dict8_dot_array_f32+0xf6>
 80018a2:	3520      	adds	r5, #32
 80018a4:	42ab      	cmp	r3, r5
 80018a6:	f080 811a 	bcs.w	8001ade <ai_dict8_dot_array_f32+0x2ce>
 80018aa:	780e      	ldrb	r6, [r1, #0]
 80018ac:	edd3 0a00 	vldr	s1, [r3]
 80018b0:	eb02 0086 	add.w	r0, r2, r6, lsl #2
 80018b4:	ed90 1a00 	vldr	s2, [r0]
 80018b8:	1d18      	adds	r0, r3, #4
 80018ba:	42a8      	cmp	r0, r5
 80018bc:	ee01 0a20 	vmla.f32	s0, s2, s1
 80018c0:	f080 810d 	bcs.w	8001ade <ai_dict8_dot_array_f32+0x2ce>
 80018c4:	784e      	ldrb	r6, [r1, #1]
 80018c6:	edd0 0a00 	vldr	s1, [r0]
 80018ca:	eb02 0386 	add.w	r3, r2, r6, lsl #2
 80018ce:	1d00      	adds	r0, r0, #4
 80018d0:	42a8      	cmp	r0, r5
 80018d2:	ed93 1a00 	vldr	s2, [r3]
 80018d6:	ee01 0a20 	vmla.f32	s0, s2, s1
 80018da:	f080 8100 	bcs.w	8001ade <ai_dict8_dot_array_f32+0x2ce>
 80018de:	788e      	ldrb	r6, [r1, #2]
 80018e0:	1cc9      	adds	r1, r1, #3
 80018e2:	eb02 0386 	add.w	r3, r2, r6, lsl #2
 80018e6:	edd0 0a00 	vldr	s1, [r0]
 80018ea:	ed93 1a00 	vldr	s2, [r3]
 80018ee:	1d03      	adds	r3, r0, #4
 80018f0:	42ab      	cmp	r3, r5
 80018f2:	ee01 0a20 	vmla.f32	s0, s2, s1
 80018f6:	d3d8      	bcc.n	80018aa <ai_dict8_dot_array_f32+0x9a>
 80018f8:	edd4 0a00 	vldr	s1, [r4]
 80018fc:	ee30 0a80 	vadd.f32	s0, s1, s0
 8001900:	ed84 0a00 	vstr	s0, [r4]
 8001904:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001906:	78cf      	ldrb	r7, [r1, #3]
 8001908:	f891 e000 	ldrb.w	lr, [r1]
 800190c:	eb02 0c87 	add.w	ip, r2, r7, lsl #2
 8001910:	788f      	ldrb	r7, [r1, #2]
 8001912:	f103 0010 	add.w	r0, r3, #16
 8001916:	ed93 4a00 	vldr	s8, [r3]
 800191a:	ed93 3a01 	vldr	s6, [r3, #4]
 800191e:	ed93 2a02 	vldr	s4, [r3, #8]
 8001922:	eddc 0a00 	vldr	s1, [ip]
 8001926:	eb02 0c87 	add.w	ip, r2, r7, lsl #2
 800192a:	784f      	ldrb	r7, [r1, #1]
 800192c:	ed93 1a03 	vldr	s2, [r3, #12]
 8001930:	790b      	ldrb	r3, [r1, #4]
 8001932:	eddc 1a00 	vldr	s3, [ip]
 8001936:	eb02 0c87 	add.w	ip, r2, r7, lsl #2
 800193a:	eb02 078e 	add.w	r7, r2, lr, lsl #2
 800193e:	edd7 3a00 	vldr	s7, [r7]
 8001942:	794f      	ldrb	r7, [r1, #5]
 8001944:	ee03 0a84 	vmla.f32	s0, s7, s8
 8001948:	eb02 0e87 	add.w	lr, r2, r7, lsl #2
 800194c:	eddc 2a00 	vldr	s5, [ip]
 8001950:	eb02 0c83 	add.w	ip, r2, r3, lsl #2
 8001954:	ee02 0a83 	vmla.f32	s0, s5, s6
 8001958:	798b      	ldrb	r3, [r1, #6]
 800195a:	ee01 0a82 	vmla.f32	s0, s3, s4
 800195e:	79cf      	ldrb	r7, [r1, #7]
 8001960:	ee00 0a81 	vmla.f32	s0, s1, s2
 8001964:	3108      	adds	r1, #8
 8001966:	eddc 0a00 	vldr	s1, [ip]
 800196a:	eb02 0c83 	add.w	ip, r2, r3, lsl #2
 800196e:	ed9e 1a00 	vldr	s2, [lr]
 8001972:	eb02 0e87 	add.w	lr, r2, r7, lsl #2
 8001976:	ed90 4a00 	vldr	s8, [r0]
 800197a:	f100 0310 	add.w	r3, r0, #16
 800197e:	edd0 3a01 	vldr	s7, [r0, #4]
 8001982:	429d      	cmp	r5, r3
 8001984:	ee00 0a84 	vmla.f32	s0, s1, s8
 8001988:	eddc 1a00 	vldr	s3, [ip]
 800198c:	ed90 3a02 	vldr	s6, [r0, #8]
 8001990:	ee01 0a23 	vmla.f32	s0, s2, s7
 8001994:	ed9e 2a00 	vldr	s4, [lr]
 8001998:	edd0 2a03 	vldr	s5, [r0, #12]
 800199c:	ee01 0a83 	vmla.f32	s0, s3, s6
 80019a0:	ee02 0a22 	vmla.f32	s0, s4, s5
 80019a4:	d2af      	bcs.n	8001906 <ai_dict8_dot_array_f32+0xf6>
 80019a6:	e77c      	b.n	80018a2 <ai_dict8_dot_array_f32+0x92>
 80019a8:	f811 0b01 	ldrb.w	r0, [r1], #1
 80019ac:	edd3 0a00 	vldr	s1, [r3]
 80019b0:	eb02 0680 	add.w	r6, r2, r0, lsl #2
 80019b4:	1d1b      	adds	r3, r3, #4
 80019b6:	ed96 0a00 	vldr	s0, [r6]
 80019ba:	ee20 0a20 	vmul.f32	s0, s0, s1
 80019be:	f811 0b01 	ldrb.w	r0, [r1], #1
 80019c2:	edd3 0a00 	vldr	s1, [r3]
 80019c6:	eb02 0680 	add.w	r6, r2, r0, lsl #2
 80019ca:	1d1b      	adds	r3, r3, #4
 80019cc:	ed96 1a00 	vldr	s2, [r6]
 80019d0:	ee01 0a20 	vmla.f32	s0, s2, s1
 80019d4:	f811 0b01 	ldrb.w	r0, [r1], #1
 80019d8:	edd3 0a00 	vldr	s1, [r3]
 80019dc:	eb02 0680 	add.w	r6, r2, r0, lsl #2
 80019e0:	1d1b      	adds	r3, r3, #4
 80019e2:	429d      	cmp	r5, r3
 80019e4:	ed96 1a00 	vldr	s2, [r6]
 80019e8:	ee01 0a20 	vmla.f32	s0, s2, s1
 80019ec:	d34f      	bcc.n	8001a8e <ai_dict8_dot_array_f32+0x27e>
 80019ee:	78cf      	ldrb	r7, [r1, #3]
 80019f0:	f891 e000 	ldrb.w	lr, [r1]
 80019f4:	eb02 0c87 	add.w	ip, r2, r7, lsl #2
 80019f8:	788f      	ldrb	r7, [r1, #2]
 80019fa:	f103 0010 	add.w	r0, r3, #16
 80019fe:	ed93 4a00 	vldr	s8, [r3]
 8001a02:	ed93 3a01 	vldr	s6, [r3, #4]
 8001a06:	ed93 2a02 	vldr	s4, [r3, #8]
 8001a0a:	eddc 0a00 	vldr	s1, [ip]
 8001a0e:	eb02 0c87 	add.w	ip, r2, r7, lsl #2
 8001a12:	784f      	ldrb	r7, [r1, #1]
 8001a14:	ed93 1a03 	vldr	s2, [r3, #12]
 8001a18:	790b      	ldrb	r3, [r1, #4]
 8001a1a:	eddc 1a00 	vldr	s3, [ip]
 8001a1e:	eb02 0c87 	add.w	ip, r2, r7, lsl #2
 8001a22:	eb02 078e 	add.w	r7, r2, lr, lsl #2
 8001a26:	edd7 3a00 	vldr	s7, [r7]
 8001a2a:	794f      	ldrb	r7, [r1, #5]
 8001a2c:	ee03 0a84 	vmla.f32	s0, s7, s8
 8001a30:	eb02 0e87 	add.w	lr, r2, r7, lsl #2
 8001a34:	eddc 2a00 	vldr	s5, [ip]
 8001a38:	eb02 0c83 	add.w	ip, r2, r3, lsl #2
 8001a3c:	ee02 0a83 	vmla.f32	s0, s5, s6
 8001a40:	798b      	ldrb	r3, [r1, #6]
 8001a42:	ee01 0a82 	vmla.f32	s0, s3, s4
 8001a46:	79cf      	ldrb	r7, [r1, #7]
 8001a48:	ee00 0a81 	vmla.f32	s0, s1, s2
 8001a4c:	3108      	adds	r1, #8
 8001a4e:	eddc 0a00 	vldr	s1, [ip]
 8001a52:	eb02 0c83 	add.w	ip, r2, r3, lsl #2
 8001a56:	ed9e 1a00 	vldr	s2, [lr]
 8001a5a:	eb02 0e87 	add.w	lr, r2, r7, lsl #2
 8001a5e:	ed90 4a00 	vldr	s8, [r0]
 8001a62:	f100 0310 	add.w	r3, r0, #16
 8001a66:	edd0 3a01 	vldr	s7, [r0, #4]
 8001a6a:	429d      	cmp	r5, r3
 8001a6c:	ee00 0a84 	vmla.f32	s0, s1, s8
 8001a70:	eddc 1a00 	vldr	s3, [ip]
 8001a74:	ed90 3a02 	vldr	s6, [r0, #8]
 8001a78:	ee01 0a23 	vmla.f32	s0, s2, s7
 8001a7c:	ed9e 2a00 	vldr	s4, [lr]
 8001a80:	edd0 2a03 	vldr	s5, [r0, #12]
 8001a84:	ee01 0a83 	vmla.f32	s0, s3, s6
 8001a88:	ee02 0a22 	vmla.f32	s0, s4, s5
 8001a8c:	d2af      	bcs.n	80019ee <ai_dict8_dot_array_f32+0x1de>
 8001a8e:	3520      	adds	r5, #32
 8001a90:	42ab      	cmp	r3, r5
 8001a92:	d224      	bcs.n	8001ade <ai_dict8_dot_array_f32+0x2ce>
 8001a94:	780e      	ldrb	r6, [r1, #0]
 8001a96:	edd3 0a00 	vldr	s1, [r3]
 8001a9a:	eb02 0086 	add.w	r0, r2, r6, lsl #2
 8001a9e:	ed90 1a00 	vldr	s2, [r0]
 8001aa2:	1d18      	adds	r0, r3, #4
 8001aa4:	42a8      	cmp	r0, r5
 8001aa6:	ee01 0a20 	vmla.f32	s0, s2, s1
 8001aaa:	d218      	bcs.n	8001ade <ai_dict8_dot_array_f32+0x2ce>
 8001aac:	784e      	ldrb	r6, [r1, #1]
 8001aae:	edd0 0a00 	vldr	s1, [r0]
 8001ab2:	eb02 0386 	add.w	r3, r2, r6, lsl #2
 8001ab6:	1d00      	adds	r0, r0, #4
 8001ab8:	42a8      	cmp	r0, r5
 8001aba:	ed93 1a00 	vldr	s2, [r3]
 8001abe:	ee01 0a20 	vmla.f32	s0, s2, s1
 8001ac2:	d20c      	bcs.n	8001ade <ai_dict8_dot_array_f32+0x2ce>
 8001ac4:	788e      	ldrb	r6, [r1, #2]
 8001ac6:	1cc9      	adds	r1, r1, #3
 8001ac8:	eb02 0386 	add.w	r3, r2, r6, lsl #2
 8001acc:	edd0 0a00 	vldr	s1, [r0]
 8001ad0:	ed93 1a00 	vldr	s2, [r3]
 8001ad4:	1d03      	adds	r3, r0, #4
 8001ad6:	42ab      	cmp	r3, r5
 8001ad8:	ee01 0a20 	vmla.f32	s0, s2, s1
 8001adc:	d3da      	bcc.n	8001a94 <ai_dict8_dot_array_f32+0x284>
 8001ade:	edd4 0a00 	vldr	s1, [r4]
 8001ae2:	ee30 0a80 	vadd.f32	s0, s1, s0
 8001ae6:	ed84 0a00 	vstr	s0, [r4]
 8001aea:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001aec <.text_6>:
 8001aec:	00000000 	.word	0x00000000

08001af0 <ai_dict4_dot_array_f32>:
 8001af0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001af4:	4680      	mov	r8, r0
 8001af6:	461e      	mov	r6, r3
 8001af8:	ed2d 8b02 	vpush	{d8}
 8001afc:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
 8001b00:	460c      	mov	r4, r1
 8001b02:	4615      	mov	r5, r2
 8001b04:	ed9f 0a53 	vldr	s0, [pc, #332]	; 8001c54 <.text_8>
 8001b08:	ea4f 005c 	mov.w	r0, ip, lsr #1
 8001b0c:	0040      	lsls	r0, r0, #1
 8001b0e:	ea5f 03dc 	movs.w	r3, ip, lsr #3
 8001b12:	eb06 0e80 	add.w	lr, r6, r0, lsl #2
 8001b16:	d053      	beq.n	8001bc0 <ai_dict4_dot_array_f32+0xd0>
 8001b18:	ed96 8a00 	vldr	s16, [r6]
 8001b1c:	7820      	ldrb	r0, [r4, #0]
 8001b1e:	ed96 7a01 	vldr	s14, [r6, #4]
 8001b22:	7861      	ldrb	r1, [r4, #1]
 8001b24:	ed96 6a02 	vldr	s12, [r6, #8]
 8001b28:	78a2      	ldrb	r2, [r4, #2]
 8001b2a:	ed96 5a03 	vldr	s10, [r6, #12]
 8001b2e:	78e7      	ldrb	r7, [r4, #3]
 8001b30:	ed96 4a04 	vldr	s8, [r6, #16]
 8001b34:	1d24      	adds	r4, r4, #4
 8001b36:	ed96 3a05 	vldr	s6, [r6, #20]
 8001b3a:	ed96 2a06 	vldr	s4, [r6, #24]
 8001b3e:	f007 090f 	and.w	r9, r7, #15
 8001b42:	093f      	lsrs	r7, r7, #4
 8001b44:	eb05 0787 	add.w	r7, r5, r7, lsl #2
 8001b48:	ed96 1a07 	vldr	s2, [r6, #28]
 8001b4c:	eb05 0a89 	add.w	sl, r5, r9, lsl #2
 8001b50:	f002 090f 	and.w	r9, r2, #15
 8001b54:	0912      	lsrs	r2, r2, #4
 8001b56:	3620      	adds	r6, #32
 8001b58:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 8001b5c:	edd7 1a00 	vldr	s3, [r7]
 8001b60:	f001 070f 	and.w	r7, r1, #15
 8001b64:	0909      	lsrs	r1, r1, #4
 8001b66:	edda 0a00 	vldr	s1, [sl]
 8001b6a:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 8001b6e:	edd2 3a00 	vldr	s7, [r2]
 8001b72:	f000 020f 	and.w	r2, r0, #15
 8001b76:	0900      	lsrs	r0, r0, #4
 8001b78:	eb05 0a89 	add.w	sl, r5, r9, lsl #2
 8001b7c:	eb05 0080 	add.w	r0, r5, r0, lsl #2
 8001b80:	1e5b      	subs	r3, r3, #1
 8001b82:	eb05 0987 	add.w	r9, r5, r7, lsl #2
 8001b86:	edd1 5a00 	vldr	s11, [r1]
 8001b8a:	eb05 0782 	add.w	r7, r5, r2, lsl #2
 8001b8e:	edda 2a00 	vldr	s5, [sl]
 8001b92:	edd0 7a00 	vldr	s15, [r0]
 8001b96:	ee07 0a88 	vmla.f32	s0, s15, s16
 8001b9a:	edd7 6a00 	vldr	s13, [r7]
 8001b9e:	ee06 0a87 	vmla.f32	s0, s13, s14
 8001ba2:	edd9 4a00 	vldr	s9, [r9]
 8001ba6:	ee05 0a86 	vmla.f32	s0, s11, s12
 8001baa:	ee04 0a85 	vmla.f32	s0, s9, s10
 8001bae:	ee03 0a84 	vmla.f32	s0, s7, s8
 8001bb2:	ee02 0a83 	vmla.f32	s0, s5, s6
 8001bb6:	ee01 0a82 	vmla.f32	s0, s3, s4
 8001bba:	ee00 0a81 	vmla.f32	s0, s1, s2
 8001bbe:	d1ab      	bne.n	8001b18 <ai_dict4_dot_array_f32+0x28>
 8001bc0:	4576      	cmp	r6, lr
 8001bc2:	d22f      	bcs.n	8001c24 <ai_dict4_dot_array_f32+0x134>
 8001bc4:	f814 0b01 	ldrb.w	r0, [r4], #1
 8001bc8:	edd6 1a00 	vldr	s3, [r6]
 8001bcc:	edd6 0a01 	vldr	s1, [r6, #4]
 8001bd0:	3608      	adds	r6, #8
 8001bd2:	f000 010f 	and.w	r1, r0, #15
 8001bd6:	0900      	lsrs	r0, r0, #4
 8001bd8:	eb05 0080 	add.w	r0, r5, r0, lsl #2
 8001bdc:	4576      	cmp	r6, lr
 8001bde:	eb05 0281 	add.w	r2, r5, r1, lsl #2
 8001be2:	ed90 2a00 	vldr	s4, [r0]
 8001be6:	ee02 0a21 	vmla.f32	s0, s4, s3
 8001bea:	ed92 1a00 	vldr	s2, [r2]
 8001bee:	ee01 0a20 	vmla.f32	s0, s2, s1
 8001bf2:	d217      	bcs.n	8001c24 <ai_dict4_dot_array_f32+0x134>
 8001bf4:	f814 0b01 	ldrb.w	r0, [r4], #1
 8001bf8:	ed96 1a00 	vldr	s2, [r6]
 8001bfc:	ed96 2a01 	vldr	s4, [r6, #4]
 8001c00:	3608      	adds	r6, #8
 8001c02:	f000 010f 	and.w	r1, r0, #15
 8001c06:	0900      	lsrs	r0, r0, #4
 8001c08:	eb05 0080 	add.w	r0, r5, r0, lsl #2
 8001c0c:	4576      	cmp	r6, lr
 8001c0e:	eb05 0281 	add.w	r2, r5, r1, lsl #2
 8001c12:	edd0 1a00 	vldr	s3, [r0]
 8001c16:	ee01 0a81 	vmla.f32	s0, s3, s2
 8001c1a:	edd2 0a00 	vldr	s1, [r2]
 8001c1e:	ee00 0a82 	vmla.f32	s0, s1, s4
 8001c22:	d3cf      	bcc.n	8001bc4 <ai_dict4_dot_array_f32+0xd4>
 8001c24:	ea5f 70cc 	movs.w	r0, ip, lsl #31
 8001c28:	d509      	bpl.n	8001c3e <ai_dict4_dot_array_f32+0x14e>
 8001c2a:	7821      	ldrb	r1, [r4, #0]
 8001c2c:	ed96 1a00 	vldr	s2, [r6]
 8001c30:	0909      	lsrs	r1, r1, #4
 8001c32:	eb05 0281 	add.w	r2, r5, r1, lsl #2
 8001c36:	edd2 0a00 	vldr	s1, [r2]
 8001c3a:	ee00 0a81 	vmla.f32	s0, s1, s2
 8001c3e:	edd8 1a00 	vldr	s3, [r8]
 8001c42:	ee31 0a80 	vadd.f32	s0, s3, s0
 8001c46:	ed88 0a00 	vstr	s0, [r8]
 8001c4a:	ecbd 8b02 	vpop	{d8}
 8001c4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

08001c54 <.text_8>:
 8001c54:	00000000 	.word	0x00000000

08001c58 <ai_dict_decompress_f32>:
 8001c58:	b4f0      	push	{r4, r5, r6, r7}
 8001c5a:	4604      	mov	r4, r0
 8001c5c:	2b04      	cmp	r3, #4
 8001c5e:	9805      	ldr	r0, [sp, #20]
 8001c60:	9e04      	ldr	r6, [sp, #16]
 8001c62:	eb04 0580 	add.w	r5, r4, r0, lsl #2
 8001c66:	d003      	beq.n	8001c70 <ai_dict_decompress_f32+0x18>
 8001c68:	2b08      	cmp	r3, #8
 8001c6a:	d03f      	beq.n	8001cec <ai_dict_decompress_f32+0x94>
 8001c6c:	bcf0      	pop	{r4, r5, r6, r7}
 8001c6e:	4770      	bx	lr
 8001c70:	42ac      	cmp	r4, r5
 8001c72:	d25a      	bcs.n	8001d2a <ai_dict_decompress_f32+0xd2>
 8001c74:	0870      	lsrs	r0, r6, #1
 8001c76:	d02f      	beq.n	8001cd8 <ai_dict_decompress_f32+0x80>
 8001c78:	07c3      	lsls	r3, r0, #31
 8001c7a:	d50d      	bpl.n	8001c98 <ai_dict_decompress_f32+0x40>
 8001c7c:	780f      	ldrb	r7, [r1, #0]
 8001c7e:	093f      	lsrs	r7, r7, #4
 8001c80:	f852 c027 	ldr.w	ip, [r2, r7, lsl #2]
 8001c84:	f8c4 c000 	str.w	ip, [r4]
 8001c88:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001c8c:	f003 030f 	and.w	r3, r3, #15
 8001c90:	f852 7023 	ldr.w	r7, [r2, r3, lsl #2]
 8001c94:	6067      	str	r7, [r4, #4]
 8001c96:	3408      	adds	r4, #8
 8001c98:	0840      	lsrs	r0, r0, #1
 8001c9a:	d01d      	beq.n	8001cd8 <ai_dict_decompress_f32+0x80>
 8001c9c:	780b      	ldrb	r3, [r1, #0]
 8001c9e:	091b      	lsrs	r3, r3, #4
 8001ca0:	f852 7023 	ldr.w	r7, [r2, r3, lsl #2]
 8001ca4:	6027      	str	r7, [r4, #0]
 8001ca6:	f811 cb01 	ldrb.w	ip, [r1], #1
 8001caa:	f00c 0c0f 	and.w	ip, ip, #15
 8001cae:	f852 302c 	ldr.w	r3, [r2, ip, lsl #2]
 8001cb2:	6063      	str	r3, [r4, #4]
 8001cb4:	f104 0308 	add.w	r3, r4, #8
 8001cb8:	780c      	ldrb	r4, [r1, #0]
 8001cba:	0924      	lsrs	r4, r4, #4
 8001cbc:	1e40      	subs	r0, r0, #1
 8001cbe:	f852 7024 	ldr.w	r7, [r2, r4, lsl #2]
 8001cc2:	601f      	str	r7, [r3, #0]
 8001cc4:	f811 cb01 	ldrb.w	ip, [r1], #1
 8001cc8:	f00c 0c0f 	and.w	ip, ip, #15
 8001ccc:	f852 402c 	ldr.w	r4, [r2, ip, lsl #2]
 8001cd0:	605c      	str	r4, [r3, #4]
 8001cd2:	f103 0408 	add.w	r4, r3, #8
 8001cd6:	d1e1      	bne.n	8001c9c <ai_dict_decompress_f32+0x44>
 8001cd8:	07f0      	lsls	r0, r6, #31
 8001cda:	d5c9      	bpl.n	8001c70 <ai_dict_decompress_f32+0x18>
 8001cdc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001ce0:	091b      	lsrs	r3, r3, #4
 8001ce2:	f852 7023 	ldr.w	r7, [r2, r3, lsl #2]
 8001ce6:	f844 7b04 	str.w	r7, [r4], #4
 8001cea:	e7c1      	b.n	8001c70 <ai_dict_decompress_f32+0x18>
 8001cec:	42ac      	cmp	r4, r5
 8001cee:	d21c      	bcs.n	8001d2a <ai_dict_decompress_f32+0xd2>
 8001cf0:	7808      	ldrb	r0, [r1, #0]
 8001cf2:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 8001cf6:	6020      	str	r0, [r4, #0]
 8001cf8:	1d20      	adds	r0, r4, #4
 8001cfa:	42a8      	cmp	r0, r5
 8001cfc:	bf3f      	itttt	cc
 8001cfe:	784c      	ldrbcc	r4, [r1, #1]
 8001d00:	f852 3024 	ldrcc.w	r3, [r2, r4, lsl #2]
 8001d04:	f840 3b04 	strcc.w	r3, [r0], #4
 8001d08:	42a8      	cmpcc	r0, r5
 8001d0a:	d20e      	bcs.n	8001d2a <ai_dict_decompress_f32+0xd2>
 8001d0c:	788b      	ldrb	r3, [r1, #2]
 8001d0e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d12:	f840 3b04 	str.w	r3, [r0], #4
 8001d16:	42a8      	cmp	r0, r5
 8001d18:	d207      	bcs.n	8001d2a <ai_dict_decompress_f32+0xd2>
 8001d1a:	78cc      	ldrb	r4, [r1, #3]
 8001d1c:	1d09      	adds	r1, r1, #4
 8001d1e:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
 8001d22:	1d04      	adds	r4, r0, #4
 8001d24:	42ac      	cmp	r4, r5
 8001d26:	6003      	str	r3, [r0, #0]
 8001d28:	d3e2      	bcc.n	8001cf0 <ai_dict_decompress_f32+0x98>
 8001d2a:	bcf0      	pop	{r4, r5, r6, r7}
 8001d2c:	4770      	bx	lr

08001d2e <forward_conv2d>:
 8001d2e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001d32:	b0a9      	sub	sp, #164	; 0xa4
 8001d34:	4605      	mov	r5, r0
 8001d36:	696b      	ldr	r3, [r5, #20]
 8001d38:	8819      	ldrh	r1, [r3, #0]
 8001d3a:	2900      	cmp	r1, #0
 8001d3c:	bf1a      	itte	ne
 8001d3e:	6858      	ldrne	r0, [r3, #4]
 8001d40:	1d00      	addne	r0, r0, #4
 8001d42:	2004      	moveq	r0, #4
 8001d44:	6800      	ldr	r0, [r0, #0]
 8001d46:	2800      	cmp	r0, #0
 8001d48:	bf14      	ite	ne
 8001d4a:	6802      	ldrne	r2, [r0, #0]
 8001d4c:	2200      	moveq	r2, #0
 8001d4e:	2901      	cmp	r1, #1
 8001d50:	bfc6      	itte	gt
 8001d52:	6858      	ldrgt	r0, [r3, #4]
 8001d54:	3010      	addgt	r0, #16
 8001d56:	2004      	movle	r0, #4
 8001d58:	6800      	ldr	r0, [r0, #0]
 8001d5a:	2800      	cmp	r0, #0
 8001d5c:	bf14      	ite	ne
 8001d5e:	f8d0 a000 	ldrne.w	sl, [r0]
 8001d62:	f04f 0a00 	moveq.w	sl, #0
 8001d66:	2902      	cmp	r1, #2
 8001d68:	bfc6      	itte	gt
 8001d6a:	6858      	ldrgt	r0, [r3, #4]
 8001d6c:	f100 091c 	addgt.w	r9, r0, #28
 8001d70:	f04f 0904 	movle.w	r9, #4
 8001d74:	f8d9 0000 	ldr.w	r0, [r9]
 8001d78:	2800      	cmp	r0, #0
 8001d7a:	bf14      	ite	ne
 8001d7c:	6806      	ldrne	r6, [r0, #0]
 8001d7e:	2600      	moveq	r6, #0
 8001d80:	2902      	cmp	r1, #2
 8001d82:	dd0a      	ble.n	8001d9a <forward_conv2d+0x6c>
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	f113 0118 	adds.w	r1, r3, #24
 8001d8a:	d006      	beq.n	8001d9a <forward_conv2d+0x6c>
 8001d8c:	8b1f      	ldrh	r7, [r3, #24]
 8001d8e:	2f01      	cmp	r7, #1
 8001d90:	dd03      	ble.n	8001d9a <forward_conv2d+0x6c>
 8001d92:	69d9      	ldr	r1, [r3, #28]
 8001d94:	b109      	cbz	r1, 8001d9a <forward_conv2d+0x6c>
 8001d96:	6849      	ldr	r1, [r1, #4]
 8001d98:	e000      	b.n	8001d9c <forward_conv2d+0x6e>
 8001d9a:	2100      	movs	r1, #0
 8001d9c:	b100      	cbz	r0, 8001da0 <forward_conv2d+0x72>
 8001d9e:	6880      	ldr	r0, [r0, #8]
 8001da0:	68d7      	ldr	r7, [r2, #12]
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	931b      	str	r3, [sp, #108]	; 0x6c
 8001da6:	f8da c00c 	ldr.w	ip, [sl, #12]
 8001daa:	f8dc 9004 	ldr.w	r9, [ip, #4]
 8001dae:	f8cd 9010 	str.w	r9, [sp, #16]
 8001db2:	f8dc 900c 	ldr.w	r9, [ip, #12]
 8001db6:	f8dc e008 	ldr.w	lr, [ip, #8]
 8001dba:	f8cd e050 	str.w	lr, [sp, #80]	; 0x50
 8001dbe:	f8d7 800c 	ldr.w	r8, [r7, #12]
 8001dc2:	f8cd 8068 	str.w	r8, [sp, #104]	; 0x68
 8001dc6:	68bf      	ldr	r7, [r7, #8]
 8001dc8:	9720      	str	r7, [sp, #128]	; 0x80
 8001dca:	f8d5 e024 	ldr.w	lr, [r5, #36]	; 0x24
 8001dce:	f8ad e040 	strh.w	lr, [sp, #64]	; 0x40
 8001dd2:	8d2f      	ldrh	r7, [r5, #40]	; 0x28
 8001dd4:	971f      	str	r7, [sp, #124]	; 0x7c
 8001dd6:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8001dd8:	f8d5 e02c 	ldr.w	lr, [r5, #44]	; 0x2c
 8001ddc:	681f      	ldr	r7, [r3, #0]
 8001dde:	f8b3 8004 	ldrh.w	r8, [r3, #4]
 8001de2:	f8cd e064 	str.w	lr, [sp, #100]	; 0x64
 8001de6:	6b2c      	ldr	r4, [r5, #48]	; 0x30
 8001de8:	9418      	str	r4, [sp, #96]	; 0x60
 8001dea:	68f3      	ldr	r3, [r6, #12]
 8001dec:	f8d3 e008 	ldr.w	lr, [r3, #8]
 8001df0:	f8cd e04c 	str.w	lr, [sp, #76]	; 0x4c
 8001df4:	685c      	ldr	r4, [r3, #4]
 8001df6:	9412      	str	r4, [sp, #72]	; 0x48
 8001df8:	f8d5 e018 	ldr.w	lr, [r5, #24]
 8001dfc:	f8cd e078 	str.w	lr, [sp, #120]	; 0x78
 8001e00:	6994      	ldr	r4, [r2, #24]
 8001e02:	68a3      	ldr	r3, [r4, #8]
 8001e04:	931d      	str	r3, [sp, #116]	; 0x74
 8001e06:	f8d6 c018 	ldr.w	ip, [r6, #24]
 8001e0a:	f8dc 4008 	ldr.w	r4, [ip, #8]
 8001e0e:	b119      	cbz	r1, 8001e18 <forward_conv2d+0xea>
 8001e10:	698a      	ldr	r2, [r1, #24]
 8001e12:	6893      	ldr	r3, [r2, #8]
 8001e14:	9317      	str	r3, [sp, #92]	; 0x5c
 8001e16:	e003      	b.n	8001e20 <forward_conv2d+0xf2>
 8001e18:	f04f 0e00 	mov.w	lr, #0
 8001e1c:	f8cd e05c 	str.w	lr, [sp, #92]	; 0x5c
 8001e20:	f8da 1018 	ldr.w	r1, [sl, #24]
 8001e24:	688a      	ldr	r2, [r1, #8]
 8001e26:	9203      	str	r2, [sp, #12]
 8001e28:	69e9      	ldr	r1, [r5, #28]
 8001e2a:	b118      	cbz	r0, 8001e34 <forward_conv2d+0x106>
 8001e2c:	6981      	ldr	r1, [r0, #24]
 8001e2e:	688a      	ldr	r2, [r1, #8]
 8001e30:	9215      	str	r2, [sp, #84]	; 0x54
 8001e32:	e005      	b.n	8001e40 <forward_conv2d+0x112>
 8001e34:	b111      	cbz	r1, 8001e3c <forward_conv2d+0x10e>
 8001e36:	688a      	ldr	r2, [r1, #8]
 8001e38:	9215      	str	r2, [sp, #84]	; 0x54
 8001e3a:	e001      	b.n	8001e40 <forward_conv2d+0x112>
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	9315      	str	r3, [sp, #84]	; 0x54
 8001e40:	9a15      	ldr	r2, [sp, #84]	; 0x54
 8001e42:	9202      	str	r2, [sp, #8]
 8001e44:	b920      	cbnz	r0, 8001e50 <forward_conv2d+0x122>
 8001e46:	2100      	movs	r1, #0
 8001e48:	2201      	movs	r2, #1
 8001e4a:	9124      	str	r1, [sp, #144]	; 0x90
 8001e4c:	9223      	str	r2, [sp, #140]	; 0x8c
 8001e4e:	e008      	b.n	8001e62 <forward_conv2d+0x134>
 8001e50:	6941      	ldr	r1, [r0, #20]
 8001e52:	688a      	ldr	r2, [r1, #8]
 8001e54:	9224      	str	r2, [sp, #144]	; 0x90
 8001e56:	6980      	ldr	r0, [r0, #24]
 8001e58:	6841      	ldr	r1, [r0, #4]
 8001e5a:	6800      	ldr	r0, [r0, #0]
 8001e5c:	f004 ff6c 	bl	8006d38 <ai_array_get_byte_size>
 8001e60:	9023      	str	r0, [sp, #140]	; 0x8c
 8001e62:	6a28      	ldr	r0, [r5, #32]
 8001e64:	2800      	cmp	r0, #0
 8001e66:	bf12      	itee	ne
 8001e68:	9022      	strne	r0, [sp, #136]	; 0x88
 8001e6a:	f8df 1d7c 	ldreq.w	r1, [pc, #3452]	; 8002be8 <.text_16>
 8001e6e:	9122      	streq	r1, [sp, #136]	; 0x88
 8001e70:	a818      	add	r0, sp, #96	; 0x60
 8001e72:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8001e74:	8803      	ldrh	r3, [r0, #0]
 8001e76:	1e51      	subs	r1, r2, #1
 8001e78:	1e5b      	subs	r3, r3, #1
 8001e7a:	fb03 2201 	mla	r2, r3, r1, r2
 8001e7e:	9912      	ldr	r1, [sp, #72]	; 0x48
 8001e80:	9216      	str	r2, [sp, #88]	; 0x58
 8001e82:	aa19      	add	r2, sp, #100	; 0x64
 8001e84:	8813      	ldrh	r3, [r2, #0]
 8001e86:	2200      	movs	r2, #0
 8001e88:	1e48      	subs	r0, r1, #1
 8001e8a:	1e5b      	subs	r3, r3, #1
 8001e8c:	fb03 1100 	mla	r1, r3, r0, r1
 8001e90:	2000      	movs	r0, #0
 8001e92:	911c      	str	r1, [sp, #112]	; 0x70
 8001e94:	69b6      	ldr	r6, [r6, #24]
 8001e96:	4683      	mov	fp, r0
 8001e98:	6831      	ldr	r1, [r6, #0]
 8001e9a:	11cb      	asrs	r3, r1, #7
 8001e9c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001ea0:	ea4f 5c61 	mov.w	ip, r1, asr #21
 8001ea4:	1449      	asrs	r1, r1, #17
 8001ea6:	f001 010f 	and.w	r1, r1, #15
 8001eaa:	f00c 0c03 	and.w	ip, ip, #3
 8001eae:	2904      	cmp	r1, #4
 8001eb0:	fa23 f30c 	lsr.w	r3, r3, ip
 8001eb4:	bf14      	ite	ne
 8001eb6:	2908      	cmpne	r1, #8
 8001eb8:	68f2      	ldreq	r2, [r6, #12]
 8001eba:	b1da      	cbz	r2, 8001ef4 <forward_conv2d+0x1c6>
 8001ebc:	6969      	ldr	r1, [r5, #20]
 8001ebe:	880d      	ldrh	r5, [r1, #0]
 8001ec0:	2d04      	cmp	r5, #4
 8001ec2:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 8001ec4:	bfa6      	itte	ge
 8001ec6:	6849      	ldrge	r1, [r1, #4]
 8001ec8:	3128      	addge	r1, #40	; 0x28
 8001eca:	2104      	movlt	r1, #4
 8001ecc:	6809      	ldr	r1, [r1, #0]
 8001ece:	2900      	cmp	r1, #0
 8001ed0:	bf1f      	itttt	ne
 8001ed2:	6808      	ldrne	r0, [r1, #0]
 8001ed4:	2800      	cmpne	r0, #0
 8001ed6:	6981      	ldrne	r1, [r0, #24]
 8001ed8:	f8d1 b008 	ldrne.w	fp, [r1, #8]
 8001edc:	6980      	ldr	r0, [r0, #24]
 8001ede:	6841      	ldr	r1, [r0, #4]
 8001ee0:	9500      	str	r5, [sp, #0]
 8001ee2:	9101      	str	r1, [sp, #4]
 8001ee4:	68b1      	ldr	r1, [r6, #8]
 8001ee6:	4658      	mov	r0, fp
 8001ee8:	f7ff feb6 	bl	8001c58 <ai_dict_decompress_f32>
 8001eec:	f1bb 0f00 	cmp.w	fp, #0
 8001ef0:	bf18      	it	ne
 8001ef2:	465c      	movne	r4, fp
 8001ef4:	b2bf      	uxth	r7, r7
 8001ef6:	427f      	negs	r7, r7
 8001ef8:	f1b9 0f00 	cmp.w	r9, #0
 8001efc:	d06f      	beq.n	8001fde <forward_conv2d+0x2b0>
 8001efe:	464a      	mov	r2, r9
 8001f00:	f1c8 0800 	rsb	r8, r8, #0
 8001f04:	f8cd 8098 	str.w	r8, [sp, #152]	; 0x98
 8001f08:	f8dd 9010 	ldr.w	r9, [sp, #16]
 8001f0c:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8001f10:	9427      	str	r4, [sp, #156]	; 0x9c
 8001f12:	9711      	str	r7, [sp, #68]	; 0x44
 8001f14:	9e02      	ldr	r6, [sp, #8]
 8001f16:	9221      	str	r2, [sp, #132]	; 0x84
 8001f18:	9826      	ldr	r0, [sp, #152]	; 0x98
 8001f1a:	991a      	ldr	r1, [sp, #104]	; 0x68
 8001f1c:	9025      	str	r0, [sp, #148]	; 0x94
 8001f1e:	9811      	ldr	r0, [sp, #68]	; 0x44
 8001f20:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8001f22:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8001f24:	9d1c      	ldr	r5, [sp, #112]	; 0x70
 8001f26:	f8cd 9008 	str.w	r9, [sp, #8]
 8001f2a:	4240      	negs	r0, r0
 8001f2c:	950d      	str	r5, [sp, #52]	; 0x34
 8001f2e:	bfd8      	it	le
 8001f30:	2000      	movle	r0, #0
 8001f32:	1a89      	subs	r1, r1, r2
 8001f34:	4299      	cmp	r1, r3
 8001f36:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8001f38:	9009      	str	r0, [sp, #36]	; 0x24
 8001f3a:	bf28      	it	cs
 8001f3c:	4619      	movcs	r1, r3
 8001f3e:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8001f40:	910a      	str	r1, [sp, #40]	; 0x28
 8001f42:	b212      	sxth	r2, r2
 8001f44:	981e      	ldr	r0, [sp, #120]	; 0x78
 8001f46:	920f      	str	r2, [sp, #60]	; 0x3c
 8001f48:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8001f4a:	920c      	str	r2, [sp, #48]	; 0x30
 8001f4c:	f8bd 1040 	ldrh.w	r1, [sp, #64]	; 0x40
 8001f50:	b21b      	sxth	r3, r3
 8001f52:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8001f54:	930e      	str	r3, [sp, #56]	; 0x38
 8001f56:	9b25      	ldr	r3, [sp, #148]	; 0x94
 8001f58:	9008      	str	r0, [sp, #32]
 8001f5a:	9812      	ldr	r0, [sp, #72]	; 0x48
 8001f5c:	9107      	str	r1, [sp, #28]
 8001f5e:	9914      	ldr	r1, [sp, #80]	; 0x50
 8001f60:	9206      	str	r2, [sp, #24]
 8001f62:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8001f64:	930b      	str	r3, [sp, #44]	; 0x2c
 8001f66:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 8001f68:	9005      	str	r0, [sp, #20]
 8001f6a:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8001f6c:	9104      	str	r1, [sp, #16]
 8001f6e:	9917      	ldr	r1, [sp, #92]	; 0x5c
 8001f70:	9203      	str	r2, [sp, #12]
 8001f72:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 8001f74:	9001      	str	r0, [sp, #4]
 8001f76:	2000      	movs	r0, #0
 8001f78:	9100      	str	r1, [sp, #0]
 8001f7a:	4659      	mov	r1, fp
 8001f7c:	f7ff f956 	bl	800122c <ai_conv2d_stripe_f32>
 8001f80:	9814      	ldr	r0, [sp, #80]	; 0x50
 8001f82:	b300      	cbz	r0, 8001fc6 <forward_conv2d+0x298>
 8001f84:	f8cd a000 	str.w	sl, [sp]
 8001f88:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8001f8a:	9f24      	ldr	r7, [sp, #144]	; 0x90
 8001f8c:	f8dd 808c 	ldr.w	r8, [sp, #140]	; 0x8c
 8001f90:	9c22      	ldr	r4, [sp, #136]	; 0x88
 8001f92:	4682      	mov	sl, r0
 8001f94:	9800      	ldr	r0, [sp, #0]
 8001f96:	462b      	mov	r3, r5
 8001f98:	464a      	mov	r2, r9
 8001f9a:	443d      	add	r5, r7
 8001f9c:	6981      	ldr	r1, [r0, #24]
 8001f9e:	f8c1 b008 	str.w	fp, [r1, #8]
 8001fa2:	eb0b 0b89 	add.w	fp, fp, r9, lsl #2
 8001fa6:	4608      	mov	r0, r1
 8001fa8:	47a0      	blx	r4
 8001faa:	1ba9      	subs	r1, r5, r6
 8001fac:	4541      	cmp	r1, r8
 8001fae:	bfa8      	it	ge
 8001fb0:	4635      	movge	r5, r6
 8001fb2:	f1ba 0a01 	subs.w	sl, sl, #1
 8001fb6:	d1ed      	bne.n	8001f94 <forward_conv2d+0x266>
 8001fb8:	f8dd a000 	ldr.w	sl, [sp]
 8001fbc:	9515      	str	r5, [sp, #84]	; 0x54
 8001fbe:	9724      	str	r7, [sp, #144]	; 0x90
 8001fc0:	f8cd 808c 	str.w	r8, [sp, #140]	; 0x8c
 8001fc4:	9422      	str	r4, [sp, #136]	; 0x88
 8001fc6:	f8da 0018 	ldr.w	r0, [sl, #24]
 8001fca:	68c1      	ldr	r1, [r0, #12]
 8001fcc:	6081      	str	r1, [r0, #8]
 8001fce:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8001fd0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8001fd2:	9921      	ldr	r1, [sp, #132]	; 0x84
 8001fd4:	189a      	adds	r2, r3, r2
 8001fd6:	9211      	str	r2, [sp, #68]	; 0x44
 8001fd8:	1e49      	subs	r1, r1, #1
 8001fda:	9121      	str	r1, [sp, #132]	; 0x84
 8001fdc:	d19c      	bne.n	8001f18 <forward_conv2d+0x1ea>
 8001fde:	b029      	add	sp, #164	; 0xa4
 8001fe0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08001fe4 <forward_conv2d_nl_pool>:
 8001fe4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001fe8:	b0b9      	sub	sp, #228	; 0xe4
 8001fea:	4604      	mov	r4, r0
 8001fec:	6963      	ldr	r3, [r4, #20]
 8001fee:	8819      	ldrh	r1, [r3, #0]
 8001ff0:	2900      	cmp	r1, #0
 8001ff2:	bf1a      	itte	ne
 8001ff4:	6858      	ldrne	r0, [r3, #4]
 8001ff6:	1d00      	addne	r0, r0, #4
 8001ff8:	2004      	moveq	r0, #4
 8001ffa:	6800      	ldr	r0, [r0, #0]
 8001ffc:	2800      	cmp	r0, #0
 8001ffe:	bf14      	ite	ne
 8002000:	6802      	ldrne	r2, [r0, #0]
 8002002:	2200      	moveq	r2, #0
 8002004:	2901      	cmp	r1, #1
 8002006:	bfc6      	itte	gt
 8002008:	6858      	ldrgt	r0, [r3, #4]
 800200a:	3010      	addgt	r0, #16
 800200c:	2004      	movle	r0, #4
 800200e:	6800      	ldr	r0, [r0, #0]
 8002010:	2800      	cmp	r0, #0
 8002012:	bf14      	ite	ne
 8002014:	f8d0 a000 	ldrne.w	sl, [r0]
 8002018:	f04f 0a00 	moveq.w	sl, #0
 800201c:	2902      	cmp	r1, #2
 800201e:	bfc6      	itte	gt
 8002020:	6858      	ldrgt	r0, [r3, #4]
 8002022:	f100 071c 	addgt.w	r7, r0, #28
 8002026:	2704      	movle	r7, #4
 8002028:	6838      	ldr	r0, [r7, #0]
 800202a:	2800      	cmp	r0, #0
 800202c:	bf14      	ite	ne
 800202e:	6806      	ldrne	r6, [r0, #0]
 8002030:	2600      	moveq	r6, #0
 8002032:	2902      	cmp	r1, #2
 8002034:	dd0c      	ble.n	8002050 <forward_conv2d_nl_pool+0x6c>
 8002036:	685b      	ldr	r3, [r3, #4]
 8002038:	f113 0118 	adds.w	r1, r3, #24
 800203c:	d008      	beq.n	8002050 <forward_conv2d_nl_pool+0x6c>
 800203e:	f8b3 c018 	ldrh.w	ip, [r3, #24]
 8002042:	f1bc 0f01 	cmp.w	ip, #1
 8002046:	dd03      	ble.n	8002050 <forward_conv2d_nl_pool+0x6c>
 8002048:	69d9      	ldr	r1, [r3, #28]
 800204a:	b109      	cbz	r1, 8002050 <forward_conv2d_nl_pool+0x6c>
 800204c:	6849      	ldr	r1, [r1, #4]
 800204e:	e000      	b.n	8002052 <forward_conv2d_nl_pool+0x6e>
 8002050:	2100      	movs	r1, #0
 8002052:	b100      	cbz	r0, 8002056 <forward_conv2d_nl_pool+0x72>
 8002054:	6880      	ldr	r0, [r0, #8]
 8002056:	68d7      	ldr	r7, [r2, #12]
 8002058:	f8d7 c004 	ldr.w	ip, [r7, #4]
 800205c:	f8cd c08c 	str.w	ip, [sp, #140]	; 0x8c
 8002060:	f8da e00c 	ldr.w	lr, [sl, #12]
 8002064:	f8de 8004 	ldr.w	r8, [lr, #4]
 8002068:	f8cd 8040 	str.w	r8, [sp, #64]	; 0x40
 800206c:	f8de 900c 	ldr.w	r9, [lr, #12]
 8002070:	f8cd 9088 	str.w	r9, [sp, #136]	; 0x88
 8002074:	f8de e008 	ldr.w	lr, [lr, #8]
 8002078:	f8cd e084 	str.w	lr, [sp, #132]	; 0x84
 800207c:	f8d7 800c 	ldr.w	r8, [r7, #12]
 8002080:	f8cd 806c 	str.w	r8, [sp, #108]	; 0x6c
 8002084:	68bf      	ldr	r7, [r7, #8]
 8002086:	972d      	str	r7, [sp, #180]	; 0xb4
 8002088:	f8d4 e024 	ldr.w	lr, [r4, #36]	; 0x24
 800208c:	f8ad e04c 	strh.w	lr, [sp, #76]	; 0x4c
 8002090:	8d27      	ldrh	r7, [r4, #40]	; 0x28
 8002092:	9720      	str	r7, [sp, #128]	; 0x80
 8002094:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8002096:	f8d4 e018 	ldr.w	lr, [r4, #24]
 800209a:	881f      	ldrh	r7, [r3, #0]
 800209c:	f8b3 8004 	ldrh.w	r8, [r3, #4]
 80020a0:	f8d3 9008 	ldr.w	r9, [r3, #8]
 80020a4:	f8cd e0b0 	str.w	lr, [sp, #176]	; 0xb0
 80020a8:	6ae5      	ldr	r5, [r4, #44]	; 0x2c
 80020aa:	951f      	str	r5, [sp, #124]	; 0x7c
 80020ac:	f8d4 e030 	ldr.w	lr, [r4, #48]	; 0x30
 80020b0:	f8cd e078 	str.w	lr, [sp, #120]	; 0x78
 80020b4:	68f3      	ldr	r3, [r6, #12]
 80020b6:	685d      	ldr	r5, [r3, #4]
 80020b8:	951a      	str	r5, [sp, #104]	; 0x68
 80020ba:	f8d3 e008 	ldr.w	lr, [r3, #8]
 80020be:	f8cd e064 	str.w	lr, [sp, #100]	; 0x64
 80020c2:	6be5      	ldr	r5, [r4, #60]	; 0x3c
 80020c4:	952b      	str	r5, [sp, #172]	; 0xac
 80020c6:	f8d4 e044 	ldr.w	lr, [r4, #68]	; 0x44
 80020ca:	f8cd e0a8 	str.w	lr, [sp, #168]	; 0xa8
 80020ce:	6ca5      	ldr	r5, [r4, #72]	; 0x48
 80020d0:	9511      	str	r5, [sp, #68]	; 0x44
 80020d2:	6d23      	ldr	r3, [r4, #80]	; 0x50
 80020d4:	681d      	ldr	r5, [r3, #0]
 80020d6:	685b      	ldr	r3, [r3, #4]
 80020d8:	9329      	str	r3, [sp, #164]	; 0xa4
 80020da:	f8d2 e018 	ldr.w	lr, [r2, #24]
 80020de:	f8de b008 	ldr.w	fp, [lr, #8]
 80020e2:	f8cd b0a0 	str.w	fp, [sp, #160]	; 0xa0
 80020e6:	69b3      	ldr	r3, [r6, #24]
 80020e8:	f8d3 b008 	ldr.w	fp, [r3, #8]
 80020ec:	b119      	cbz	r1, 80020f6 <forward_conv2d_nl_pool+0x112>
 80020ee:	698a      	ldr	r2, [r1, #24]
 80020f0:	6893      	ldr	r3, [r2, #8]
 80020f2:	931d      	str	r3, [sp, #116]	; 0x74
 80020f4:	e003      	b.n	80020fe <forward_conv2d_nl_pool+0x11a>
 80020f6:	f04f 0e00 	mov.w	lr, #0
 80020fa:	f8cd e074 	str.w	lr, [sp, #116]	; 0x74
 80020fe:	69e1      	ldr	r1, [r4, #28]
 8002100:	b118      	cbz	r0, 800210a <forward_conv2d_nl_pool+0x126>
 8002102:	6981      	ldr	r1, [r0, #24]
 8002104:	688a      	ldr	r2, [r1, #8]
 8002106:	921c      	str	r2, [sp, #112]	; 0x70
 8002108:	e005      	b.n	8002116 <forward_conv2d_nl_pool+0x132>
 800210a:	b111      	cbz	r1, 8002112 <forward_conv2d_nl_pool+0x12e>
 800210c:	688a      	ldr	r2, [r1, #8]
 800210e:	921c      	str	r2, [sp, #112]	; 0x70
 8002110:	e001      	b.n	8002116 <forward_conv2d_nl_pool+0x132>
 8002112:	2300      	movs	r3, #0
 8002114:	931c      	str	r3, [sp, #112]	; 0x70
 8002116:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8002118:	9202      	str	r2, [sp, #8]
 800211a:	b920      	cbnz	r0, 8002126 <forward_conv2d_nl_pool+0x142>
 800211c:	2100      	movs	r1, #0
 800211e:	2201      	movs	r2, #1
 8002120:	9116      	str	r1, [sp, #88]	; 0x58
 8002122:	9215      	str	r2, [sp, #84]	; 0x54
 8002124:	e008      	b.n	8002138 <forward_conv2d_nl_pool+0x154>
 8002126:	6941      	ldr	r1, [r0, #20]
 8002128:	688a      	ldr	r2, [r1, #8]
 800212a:	9216      	str	r2, [sp, #88]	; 0x58
 800212c:	6980      	ldr	r0, [r0, #24]
 800212e:	6841      	ldr	r1, [r0, #4]
 8002130:	6800      	ldr	r0, [r0, #0]
 8002132:	f004 fe01 	bl	8006d38 <ai_array_get_byte_size>
 8002136:	9015      	str	r0, [sp, #84]	; 0x54
 8002138:	6a20      	ldr	r0, [r4, #32]
 800213a:	2800      	cmp	r0, #0
 800213c:	bf12      	itee	ne
 800213e:	9030      	strne	r0, [sp, #192]	; 0xc0
 8002140:	f8df 1aa4 	ldreq.w	r1, [pc, #2724]	; 8002be8 <.text_16>
 8002144:	9130      	streq	r1, [sp, #192]	; 0xc0
 8002146:	6d62      	ldr	r2, [r4, #84]	; 0x54
 8002148:	9819      	ldr	r0, [sp, #100]	; 0x64
 800214a:	9227      	str	r2, [sp, #156]	; 0x9c
 800214c:	aa1e      	add	r2, sp, #120	; 0x78
 800214e:	8813      	ldrh	r3, [r2, #0]
 8002150:	1e41      	subs	r1, r0, #1
 8002152:	1e5b      	subs	r3, r3, #1
 8002154:	fb03 0001 	mla	r0, r3, r1, r0
 8002158:	ab1f      	add	r3, sp, #124	; 0x7c
 800215a:	f8b3 e000 	ldrh.w	lr, [r3]
 800215e:	9018      	str	r0, [sp, #96]	; 0x60
 8002160:	991a      	ldr	r1, [sp, #104]	; 0x68
 8002162:	9818      	ldr	r0, [sp, #96]	; 0x60
 8002164:	1e4a      	subs	r2, r1, #1
 8002166:	f1ae 0e01 	sub.w	lr, lr, #1
 800216a:	fb0e 1102 	mla	r1, lr, r2, r1
 800216e:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8002170:	9126      	str	r1, [sp, #152]	; 0x98
 8002172:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8002174:	9112      	str	r1, [sp, #72]	; 0x48
 8002176:	9920      	ldr	r1, [sp, #128]	; 0x80
 8002178:	1a12      	subs	r2, r2, r0
 800217a:	18ba      	adds	r2, r7, r2
 800217c:	fa12 f089 	uxtah	r0, r2, r9
 8002180:	2200      	movs	r2, #0
 8002182:	fbb0 f1f1 	udiv	r1, r0, r1
 8002186:	1c49      	adds	r1, r1, #1
 8002188:	2000      	movs	r0, #0
 800218a:	9114      	str	r1, [sp, #80]	; 0x50
 800218c:	69b6      	ldr	r6, [r6, #24]
 800218e:	4681      	mov	r9, r0
 8002190:	6831      	ldr	r1, [r6, #0]
 8002192:	11cb      	asrs	r3, r1, #7
 8002194:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8002198:	ea4f 5c61 	mov.w	ip, r1, asr #21
 800219c:	1449      	asrs	r1, r1, #17
 800219e:	f001 010f 	and.w	r1, r1, #15
 80021a2:	f00c 0c03 	and.w	ip, ip, #3
 80021a6:	2904      	cmp	r1, #4
 80021a8:	fa23 f30c 	lsr.w	r3, r3, ip
 80021ac:	bf14      	ite	ne
 80021ae:	2908      	cmpne	r1, #8
 80021b0:	68f2      	ldreq	r2, [r6, #12]
 80021b2:	b302      	cbz	r2, 80021f6 <forward_conv2d_nl_pool+0x212>
 80021b4:	6961      	ldr	r1, [r4, #20]
 80021b6:	f8b1 c000 	ldrh.w	ip, [r1]
 80021ba:	f1bc 0f04 	cmp.w	ip, #4
 80021be:	f8dd c08c 	ldr.w	ip, [sp, #140]	; 0x8c
 80021c2:	bfa6      	itte	ge
 80021c4:	6849      	ldrge	r1, [r1, #4]
 80021c6:	3128      	addge	r1, #40	; 0x28
 80021c8:	2104      	movlt	r1, #4
 80021ca:	6809      	ldr	r1, [r1, #0]
 80021cc:	2900      	cmp	r1, #0
 80021ce:	bf1f      	itttt	ne
 80021d0:	6848      	ldrne	r0, [r1, #4]
 80021d2:	2800      	cmpne	r0, #0
 80021d4:	6981      	ldrne	r1, [r0, #24]
 80021d6:	f8d1 9008 	ldrne.w	r9, [r1, #8]
 80021da:	6980      	ldr	r0, [r0, #24]
 80021dc:	6841      	ldr	r1, [r0, #4]
 80021de:	f8cd c000 	str.w	ip, [sp]
 80021e2:	9101      	str	r1, [sp, #4]
 80021e4:	68b1      	ldr	r1, [r6, #8]
 80021e6:	4648      	mov	r0, r9
 80021e8:	f7ff fd36 	bl	8001c58 <ai_dict_decompress_f32>
 80021ec:	f1b9 0f00 	cmp.w	r9, #0
 80021f0:	bf18      	it	ne
 80021f2:	4648      	movne	r0, r9
 80021f4:	d100      	bne.n	80021f8 <forward_conv2d_nl_pool+0x214>
 80021f6:	4658      	mov	r0, fp
 80021f8:	6963      	ldr	r3, [r4, #20]
 80021fa:	2600      	movs	r6, #0
 80021fc:	f8dd e040 	ldr.w	lr, [sp, #64]	; 0x40
 8002200:	f8da 1018 	ldr.w	r1, [sl, #24]
 8002204:	b22d      	sxth	r5, r5
 8002206:	f1c8 0800 	rsb	r8, r8, #0
 800220a:	881c      	ldrh	r4, [r3, #0]
 800220c:	46aa      	mov	sl, r5
 800220e:	2c04      	cmp	r4, #4
 8002210:	bfa6      	itte	ge
 8002212:	685b      	ldrge	r3, [r3, #4]
 8002214:	3328      	addge	r3, #40	; 0x28
 8002216:	2304      	movlt	r3, #4
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	2b00      	cmp	r3, #0
 800221c:	bf14      	ite	ne
 800221e:	f8d3 9000 	ldrne.w	r9, [r3]
 8002222:	46b1      	moveq	r9, r6
 8002224:	f8d9 4018 	ldr.w	r4, [r9, #24]
 8002228:	f8d9 300c 	ldr.w	r3, [r9, #12]
 800222c:	427f      	negs	r7, r7
 800222e:	f8d4 b008 	ldr.w	fp, [r4, #8]
 8002232:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8002234:	689b      	ldr	r3, [r3, #8]
 8002236:	f8cd 80c8 	str.w	r8, [sp, #200]	; 0xc8
 800223a:	435c      	muls	r4, r3
 800223c:	fb0e f404 	mul.w	r4, lr, r4
 8002240:	f8dd e084 	ldr.w	lr, [sp, #132]	; 0x84
 8002244:	9437      	str	r4, [sp, #220]	; 0xdc
 8002246:	ac11      	add	r4, sp, #68	; 0x44
 8002248:	f9b4 c000 	ldrsh.w	ip, [r4]
 800224c:	9c10      	ldr	r4, [sp, #64]	; 0x40
 800224e:	fb0e f404 	mul.w	r4, lr, r4
 8002252:	9435      	str	r4, [sp, #212]	; 0xd4
 8002254:	ac12      	add	r4, sp, #72	; 0x48
 8002256:	f8cd c0d8 	str.w	ip, [sp, #216]	; 0xd8
 800225a:	f9b4 c000 	ldrsh.w	ip, [r4]
 800225e:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8002260:	f8cd c0d0 	str.w	ip, [sp, #208]	; 0xd0
 8002264:	435c      	muls	r4, r3
 8002266:	9433      	str	r4, [sp, #204]	; 0xcc
 8002268:	9c22      	ldr	r4, [sp, #136]	; 0x88
 800226a:	2c00      	cmp	r4, #0
 800226c:	f000 812d 	beq.w	80024ca <forward_conv2d_nl_pool+0x4e6>
 8002270:	9038      	str	r0, [sp, #224]	; 0xe0
 8002272:	462c      	mov	r4, r5
 8002274:	9125      	str	r1, [sp, #148]	; 0x94
 8002276:	962f      	str	r6, [sp, #188]	; 0xbc
 8002278:	962e      	str	r6, [sp, #184]	; 0xb8
 800227a:	9324      	str	r3, [sp, #144]	; 0x90
 800227c:	9717      	str	r7, [sp, #92]	; 0x5c
 800227e:	9d02      	ldr	r5, [sp, #8]
 8002280:	9814      	ldr	r0, [sp, #80]	; 0x50
 8002282:	2800      	cmp	r0, #0
 8002284:	dd68      	ble.n	8002358 <forward_conv2d_nl_pool+0x374>
 8002286:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8002288:	9932      	ldr	r1, [sp, #200]	; 0xc8
 800228a:	9131      	str	r1, [sp, #196]	; 0xc4
 800228c:	991b      	ldr	r1, [sp, #108]	; 0x6c
 800228e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8002290:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8002292:	4240      	negs	r0, r0
 8002294:	9e26      	ldr	r6, [sp, #152]	; 0x98
 8002296:	960d      	str	r6, [sp, #52]	; 0x34
 8002298:	bfd8      	it	le
 800229a:	2000      	movle	r0, #0
 800229c:	1a89      	subs	r1, r1, r2
 800229e:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 80022a0:	4299      	cmp	r1, r3
 80022a2:	9009      	str	r0, [sp, #36]	; 0x24
 80022a4:	982c      	ldr	r0, [sp, #176]	; 0xb0
 80022a6:	b212      	sxth	r2, r2
 80022a8:	9008      	str	r0, [sp, #32]
 80022aa:	920f      	str	r2, [sp, #60]	; 0x3c
 80022ac:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80022ae:	bf28      	it	cs
 80022b0:	4619      	movcs	r1, r3
 80022b2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80022b4:	920c      	str	r2, [sp, #48]	; 0x30
 80022b6:	910a      	str	r1, [sp, #40]	; 0x28
 80022b8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80022ba:	f8bd 104c 	ldrh.w	r1, [sp, #76]	; 0x4c
 80022be:	9206      	str	r2, [sp, #24]
 80022c0:	b21b      	sxth	r3, r3
 80022c2:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
 80022c4:	930e      	str	r3, [sp, #56]	; 0x38
 80022c6:	9b31      	ldr	r3, [sp, #196]	; 0xc4
 80022c8:	9107      	str	r1, [sp, #28]
 80022ca:	981a      	ldr	r0, [sp, #104]	; 0x68
 80022cc:	9203      	str	r2, [sp, #12]
 80022ce:	9924      	ldr	r1, [sp, #144]	; 0x90
 80022d0:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80022d2:	930b      	str	r3, [sp, #44]	; 0x2c
 80022d4:	9005      	str	r0, [sp, #20]
 80022d6:	9810      	ldr	r0, [sp, #64]	; 0x40
 80022d8:	9104      	str	r1, [sp, #16]
 80022da:	9923      	ldr	r1, [sp, #140]	; 0x8c
 80022dc:	9200      	str	r2, [sp, #0]
 80022de:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 80022e0:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 80022e2:	9002      	str	r0, [sp, #8]
 80022e4:	9101      	str	r1, [sp, #4]
 80022e6:	4659      	mov	r1, fp
 80022e8:	2000      	movs	r0, #0
 80022ea:	f7fe ff9f 	bl	800122c <ai_conv2d_stripe_f32>
 80022ee:	9824      	ldr	r0, [sp, #144]	; 0x90
 80022f0:	b350      	cbz	r0, 8002348 <forward_conv2d_nl_pool+0x364>
 80022f2:	9e10      	ldr	r6, [sp, #64]	; 0x40
 80022f4:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 80022f6:	9502      	str	r5, [sp, #8]
 80022f8:	f8dd 80c0 	ldr.w	r8, [sp, #192]	; 0xc0
 80022fc:	ea4f 0500 	mov.w	r5, r0
 8002300:	f8d9 1018 	ldr.w	r1, [r9, #24]
 8002304:	463b      	mov	r3, r7
 8002306:	4632      	mov	r2, r6
 8002308:	f8c1 b008 	str.w	fp, [r1, #8]
 800230c:	eb0b 0b86 	add.w	fp, fp, r6, lsl #2
 8002310:	4608      	mov	r0, r1
 8002312:	47c0      	blx	r8
 8002314:	9816      	ldr	r0, [sp, #88]	; 0x58
 8002316:	9902      	ldr	r1, [sp, #8]
 8002318:	9a15      	ldr	r2, [sp, #84]	; 0x54
 800231a:	4407      	add	r7, r0
 800231c:	f8d9 0018 	ldr.w	r0, [r9, #24]
 8002320:	1a79      	subs	r1, r7, r1
 8002322:	4291      	cmp	r1, r2
 8002324:	6841      	ldr	r1, [r0, #4]
 8002326:	68c0      	ldr	r0, [r0, #12]
 8002328:	eb00 0281 	add.w	r2, r0, r1, lsl #2
 800232c:	bfa8      	it	ge
 800232e:	9f02      	ldrge	r7, [sp, #8]
 8002330:	4593      	cmp	fp, r2
 8002332:	d302      	bcc.n	800233a <forward_conv2d_nl_pool+0x356>
 8002334:	0089      	lsls	r1, r1, #2
 8002336:	4249      	negs	r1, r1
 8002338:	448b      	add	fp, r1
 800233a:	1e6d      	subs	r5, r5, #1
 800233c:	d1e0      	bne.n	8002300 <forward_conv2d_nl_pool+0x31c>
 800233e:	9610      	str	r6, [sp, #64]	; 0x40
 8002340:	971c      	str	r7, [sp, #112]	; 0x70
 8002342:	9d02      	ldr	r5, [sp, #8]
 8002344:	f8cd 80c0 	str.w	r8, [sp, #192]	; 0xc0
 8002348:	f8d9 0018 	ldr.w	r0, [r9, #24]
 800234c:	f10a 0a01 	add.w	sl, sl, #1
 8002350:	fa0f fa8a 	sxth.w	sl, sl
 8002354:	68c1      	ldr	r1, [r0, #12]
 8002356:	6081      	str	r1, [r0, #8]
 8002358:	9814      	ldr	r0, [sp, #80]	; 0x50
 800235a:	1e40      	subs	r0, r0, #1
 800235c:	9014      	str	r0, [sp, #80]	; 0x50
 800235e:	d56d      	bpl.n	800243c <forward_conv2d_nl_pool+0x458>
 8002360:	9833      	ldr	r0, [sp, #204]	; 0xcc
 8002362:	4659      	mov	r1, fp
 8002364:	fb00 f00a 	mul.w	r0, r0, sl
 8002368:	0080      	lsls	r0, r0, #2
 800236a:	4240      	negs	r0, r0
 800236c:	eb0b 0200 	add.w	r2, fp, r0
 8002370:	f8d9 0018 	ldr.w	r0, [r9, #24]
 8002374:	68c3      	ldr	r3, [r0, #12]
 8002376:	429a      	cmp	r2, r3
 8002378:	bf3c      	itt	cc
 800237a:	6847      	ldrcc	r7, [r0, #4]
 800237c:	eb02 0287 	addcc.w	r2, r2, r7, lsl #2
 8002380:	4293      	cmp	r3, r2
 8002382:	d237      	bcs.n	80023f4 <forward_conv2d_nl_pool+0x410>
 8002384:	9e34      	ldr	r6, [sp, #208]	; 0xd0
 8002386:	45b2      	cmp	sl, r6
 8002388:	d034      	beq.n	80023f4 <forward_conv2d_nl_pool+0x410>
 800238a:	f8d0 c004 	ldr.w	ip, [r0, #4]
 800238e:	eb03 038c 	add.w	r3, r3, ip, lsl #2
 8002392:	429a      	cmp	r2, r3
 8002394:	f080 802e 	bcs.w	80023f4 <forward_conv2d_nl_pool+0x410>
 8002398:	ed92 0a00 	vldr	s0, [r2]
 800239c:	1d12      	adds	r2, r2, #4
 800239e:	ed8b 0a00 	vstr	s0, [fp]
 80023a2:	68c6      	ldr	r6, [r0, #12]
 80023a4:	6843      	ldr	r3, [r0, #4]
 80023a6:	eb06 0783 	add.w	r7, r6, r3, lsl #2
 80023aa:	42ba      	cmp	r2, r7
 80023ac:	d222      	bcs.n	80023f4 <forward_conv2d_nl_pool+0x410>
 80023ae:	edd2 0a00 	vldr	s1, [r2]
 80023b2:	1d12      	adds	r2, r2, #4
 80023b4:	edcb 0a01 	vstr	s1, [fp, #4]
 80023b8:	68c3      	ldr	r3, [r0, #12]
 80023ba:	6846      	ldr	r6, [r0, #4]
 80023bc:	eb03 0786 	add.w	r7, r3, r6, lsl #2
 80023c0:	42ba      	cmp	r2, r7
 80023c2:	d217      	bcs.n	80023f4 <forward_conv2d_nl_pool+0x410>
 80023c4:	ed92 0a00 	vldr	s0, [r2]
 80023c8:	1d12      	adds	r2, r2, #4
 80023ca:	ed8b 0a02 	vstr	s0, [fp, #8]
 80023ce:	68c3      	ldr	r3, [r0, #12]
 80023d0:	6846      	ldr	r6, [r0, #4]
 80023d2:	eb03 0786 	add.w	r7, r3, r6, lsl #2
 80023d6:	42ba      	cmp	r2, r7
 80023d8:	d20c      	bcs.n	80023f4 <forward_conv2d_nl_pool+0x410>
 80023da:	edd2 0a00 	vldr	s1, [r2]
 80023de:	1d12      	adds	r2, r2, #4
 80023e0:	edcb 0a03 	vstr	s1, [fp, #12]
 80023e4:	68c3      	ldr	r3, [r0, #12]
 80023e6:	6846      	ldr	r6, [r0, #4]
 80023e8:	f10b 0b10 	add.w	fp, fp, #16
 80023ec:	eb03 0786 	add.w	r7, r3, r6, lsl #2
 80023f0:	42ba      	cmp	r2, r7
 80023f2:	d3d1      	bcc.n	8002398 <forward_conv2d_nl_pool+0x3b4>
 80023f4:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 80023f6:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80023f8:	9e11      	ldr	r6, [sp, #68]	; 0x44
 80023fa:	189a      	adds	r2, r3, r2
 80023fc:	eba2 020a 	sub.w	r2, r2, sl
 8002400:	922f      	str	r2, [sp, #188]	; 0xbc
 8002402:	9a37      	ldr	r2, [sp, #220]	; 0xdc
 8002404:	eb01 0b82 	add.w	fp, r1, r2, lsl #2
 8002408:	68c1      	ldr	r1, [r0, #12]
 800240a:	6843      	ldr	r3, [r0, #4]
 800240c:	44b2      	add	sl, r6
 800240e:	eb01 0283 	add.w	r2, r1, r3, lsl #2
 8002412:	fa0f fa8a 	sxth.w	sl, sl
 8002416:	460b      	mov	r3, r1
 8002418:	4593      	cmp	fp, r2
 800241a:	d30f      	bcc.n	800243c <forward_conv2d_nl_pool+0x458>
 800241c:	6841      	ldr	r1, [r0, #4]
 800241e:	008a      	lsls	r2, r1, #2
 8002420:	4252      	negs	r2, r2
 8002422:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8002426:	4493      	add	fp, r2
 8002428:	458b      	cmp	fp, r1
 800242a:	bf24      	itt	cs
 800242c:	4493      	addcs	fp, r2
 800242e:	458b      	cmpcs	fp, r1
 8002430:	bf21      	itttt	cs
 8002432:	4493      	addcs	fp, r2
 8002434:	458b      	cmpcs	fp, r1
 8002436:	4493      	addcs	fp, r2
 8002438:	458b      	cmpcs	fp, r1
 800243a:	d2ef      	bcs.n	800241c <forward_conv2d_nl_pool+0x438>
 800243c:	9812      	ldr	r0, [sp, #72]	; 0x48
 800243e:	4582      	cmp	sl, r0
 8002440:	d339      	bcc.n	80024b6 <forward_conv2d_nl_pool+0x4d2>
 8002442:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8002444:	9825      	ldr	r0, [sp, #148]	; 0x94
 8002446:	9008      	str	r0, [sp, #32]
 8002448:	982a      	ldr	r0, [sp, #168]	; 0xa8
 800244a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800244c:	9e27      	ldr	r6, [sp, #156]	; 0x9c
 800244e:	1c52      	adds	r2, r2, #1
 8002450:	9911      	ldr	r1, [sp, #68]	; 0x44
 8002452:	922e      	str	r2, [sp, #184]	; 0xb8
 8002454:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8002456:	b280      	uxth	r0, r0
 8002458:	b29b      	uxth	r3, r3
 800245a:	9004      	str	r0, [sp, #16]
 800245c:	b2a0      	uxth	r0, r4
 800245e:	b292      	uxth	r2, r2
 8002460:	9003      	str	r0, [sp, #12]
 8002462:	9206      	str	r2, [sp, #24]
 8002464:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8002466:	982b      	ldr	r0, [sp, #172]	; 0xac
 8002468:	9305      	str	r3, [sp, #20]
 800246a:	b292      	uxth	r2, r2
 800246c:	ebaa 0a01 	sub.w	sl, sl, r1
 8002470:	2101      	movs	r1, #1
 8002472:	9201      	str	r2, [sp, #4]
 8002474:	9107      	str	r1, [sp, #28]
 8002476:	9929      	ldr	r1, [sp, #164]	; 0xa4
 8002478:	b280      	uxth	r0, r0
 800247a:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800247c:	9000      	str	r0, [sp, #0]
 800247e:	982f      	ldr	r0, [sp, #188]	; 0xbc
 8002480:	b289      	uxth	r1, r1
 8002482:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8002484:	9102      	str	r1, [sp, #8]
 8002486:	9924      	ldr	r1, [sp, #144]	; 0x90
 8002488:	1a12      	subs	r2, r2, r0
 800248a:	f8d9 0018 	ldr.w	r0, [r9, #24]
 800248e:	b29b      	uxth	r3, r3
 8002490:	b292      	uxth	r2, r2
 8002492:	b289      	uxth	r1, r1
 8002494:	fa0f fa8a 	sxth.w	sl, sl
 8002498:	47b0      	blx	r6
 800249a:	9825      	ldr	r0, [sp, #148]	; 0x94
 800249c:	9a35      	ldr	r2, [sp, #212]	; 0xd4
 800249e:	6881      	ldr	r1, [r0, #8]
 80024a0:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 80024a4:	6083      	str	r3, [r0, #8]
 80024a6:	9936      	ldr	r1, [sp, #216]	; 0xd8
 80024a8:	1a61      	subs	r1, r4, r1
 80024aa:	2900      	cmp	r1, #0
 80024ac:	bfc3      	ittte	gt
 80024ae:	9811      	ldrgt	r0, [sp, #68]	; 0x44
 80024b0:	1a24      	subgt	r4, r4, r0
 80024b2:	b224      	sxthgt	r4, r4
 80024b4:	2400      	movle	r4, #0
 80024b6:	9917      	ldr	r1, [sp, #92]	; 0x5c
 80024b8:	9820      	ldr	r0, [sp, #128]	; 0x80
 80024ba:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 80024bc:	1841      	adds	r1, r0, r1
 80024be:	9117      	str	r1, [sp, #92]	; 0x5c
 80024c0:	9922      	ldr	r1, [sp, #136]	; 0x88
 80024c2:	428a      	cmp	r2, r1
 80024c4:	f4ff aedc 	bcc.w	8002280 <forward_conv2d_nl_pool+0x29c>
 80024c8:	9925      	ldr	r1, [sp, #148]	; 0x94
 80024ca:	f8d9 0018 	ldr.w	r0, [r9, #24]
 80024ce:	68c2      	ldr	r2, [r0, #12]
 80024d0:	6082      	str	r2, [r0, #8]
 80024d2:	68c8      	ldr	r0, [r1, #12]
 80024d4:	6088      	str	r0, [r1, #8]
 80024d6:	b039      	add	sp, #228	; 0xe4
 80024d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080024dc <forward_dense>:
 80024dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80024e0:	b081      	sub	sp, #4
 80024e2:	ed2d 8b02 	vpush	{d8}
 80024e6:	b088      	sub	sp, #32
 80024e8:	6944      	ldr	r4, [r0, #20]
 80024ea:	8820      	ldrh	r0, [r4, #0]
 80024ec:	2800      	cmp	r0, #0
 80024ee:	bf1a      	itte	ne
 80024f0:	6861      	ldrne	r1, [r4, #4]
 80024f2:	1d09      	addne	r1, r1, #4
 80024f4:	2104      	moveq	r1, #4
 80024f6:	6809      	ldr	r1, [r1, #0]
 80024f8:	2900      	cmp	r1, #0
 80024fa:	bf14      	ite	ne
 80024fc:	680a      	ldrne	r2, [r1, #0]
 80024fe:	2200      	moveq	r2, #0
 8002500:	2802      	cmp	r0, #2
 8002502:	bfa6      	itte	ge
 8002504:	6861      	ldrge	r1, [r4, #4]
 8002506:	3110      	addge	r1, #16
 8002508:	2104      	movlt	r1, #4
 800250a:	6809      	ldr	r1, [r1, #0]
 800250c:	2900      	cmp	r1, #0
 800250e:	bf14      	ite	ne
 8002510:	680f      	ldrne	r7, [r1, #0]
 8002512:	2700      	moveq	r7, #0
 8002514:	2802      	cmp	r0, #2
 8002516:	bfc6      	itte	gt
 8002518:	6861      	ldrgt	r1, [r4, #4]
 800251a:	311c      	addgt	r1, #28
 800251c:	2104      	movle	r1, #4
 800251e:	6809      	ldr	r1, [r1, #0]
 8002520:	2900      	cmp	r1, #0
 8002522:	bf14      	ite	ne
 8002524:	680b      	ldrne	r3, [r1, #0]
 8002526:	2300      	moveq	r3, #0
 8002528:	2802      	cmp	r0, #2
 800252a:	dd0b      	ble.n	8002544 <forward_dense+0x68>
 800252c:	6861      	ldr	r1, [r4, #4]
 800252e:	f111 0018 	adds.w	r0, r1, #24
 8002532:	d007      	beq.n	8002544 <forward_dense+0x68>
 8002534:	8b0c      	ldrh	r4, [r1, #24]
 8002536:	2c02      	cmp	r4, #2
 8002538:	db04      	blt.n	8002544 <forward_dense+0x68>
 800253a:	69c8      	ldr	r0, [r1, #28]
 800253c:	b110      	cbz	r0, 8002544 <forward_dense+0x68>
 800253e:	f8d0 a004 	ldr.w	sl, [r0, #4]
 8002542:	e001      	b.n	8002548 <forward_dense+0x6c>
 8002544:	f04f 0a00 	mov.w	sl, #0
 8002548:	68d0      	ldr	r0, [r2, #12]
 800254a:	699e      	ldr	r6, [r3, #24]
 800254c:	6992      	ldr	r2, [r2, #24]
 800254e:	6844      	ldr	r4, [r0, #4]
 8002550:	68f8      	ldr	r0, [r7, #12]
 8002552:	f8d0 c004 	ldr.w	ip, [r0, #4]
 8002556:	f8d6 e000 	ldr.w	lr, [r6]
 800255a:	69bf      	ldr	r7, [r7, #24]
 800255c:	6881      	ldr	r1, [r0, #8]
 800255e:	68c0      	ldr	r0, [r0, #12]
 8002560:	ea4f 19ee 	mov.w	r9, lr, asr #7
 8002564:	ea4f 586e 	mov.w	r8, lr, asr #21
 8002568:	ea4f 4e6e 	mov.w	lr, lr, asr #17
 800256c:	f00e 0e0f 	and.w	lr, lr, #15
 8002570:	4341      	muls	r1, r0
 8002572:	f009 097f 	and.w	r9, r9, #127	; 0x7f
 8002576:	f008 0803 	and.w	r8, r8, #3
 800257a:	fa29 f908 	lsr.w	r9, r9, r8
 800257e:	2000      	movs	r0, #0
 8002580:	f1be 0f04 	cmp.w	lr, #4
 8002584:	68bf      	ldr	r7, [r7, #8]
 8002586:	f8d2 8008 	ldr.w	r8, [r2, #8]
 800258a:	bf14      	ite	ne
 800258c:	f1be 0f08 	cmpne.w	lr, #8
 8002590:	68f0      	ldreq	r0, [r6, #12]
 8002592:	695e      	ldr	r6, [r3, #20]
 8002594:	2900      	cmp	r1, #0
 8002596:	eb07 028c 	add.w	r2, r7, ip, lsl #2
 800259a:	6876      	ldr	r6, [r6, #4]
 800259c:	f000 80ee 	beq.w	800277c <forward_dense+0x2a0>
 80025a0:	9307      	str	r3, [sp, #28]
 80025a2:	f8cd a014 	str.w	sl, [sp, #20]
 80025a6:	f8cd c018 	str.w	ip, [sp, #24]
 80025aa:	9201      	str	r2, [sp, #4]
 80025ac:	9104      	str	r1, [sp, #16]
 80025ae:	9907      	ldr	r1, [sp, #28]
 80025b0:	698b      	ldr	r3, [r1, #24]
 80025b2:	9905      	ldr	r1, [sp, #20]
 80025b4:	2900      	cmp	r1, #0
 80025b6:	bf1a      	itte	ne
 80025b8:	6989      	ldrne	r1, [r1, #24]
 80025ba:	688a      	ldrne	r2, [r1, #8]
 80025bc:	2200      	moveq	r2, #0
 80025be:	2800      	cmp	r0, #0
 80025c0:	f8d3 b008 	ldr.w	fp, [r3, #8]
 80025c4:	9b01      	ldr	r3, [sp, #4]
 80025c6:	f040 80ab 	bne.w	8002720 <forward_dense+0x244>
 80025ca:	429f      	cmp	r7, r3
 80025cc:	f080 80c9 	bcs.w	8002762 <forward_dense+0x286>
 80025d0:	9003      	str	r0, [sp, #12]
 80025d2:	2a00      	cmp	r2, #0
 80025d4:	4620      	mov	r0, r4
 80025d6:	46c6      	mov	lr, r8
 80025d8:	46dc      	mov	ip, fp
 80025da:	eddf 0a6b 	vldr	s1, [pc, #428]	; 8002788 <.text_13>
 80025de:	bf0e      	itee	eq
 80025e0:	ed9f 0a69 	vldreq	s0, [pc, #420]	; 8002788 <.text_13>
 80025e4:	ed92 0a00 	vldrne	s0, [r2]
 80025e8:	1d12      	addne	r2, r2, #4
 80025ea:	2c04      	cmp	r4, #4
 80025ec:	d35d      	bcc.n	80026aa <forward_dense+0x1ce>
 80025ee:	08a1      	lsrs	r1, r4, #2
 80025f0:	07cd      	lsls	r5, r1, #31
 80025f2:	d51c      	bpl.n	800262e <forward_dense+0x152>
 80025f4:	ed9c 4a00 	vldr	s8, [ip]
 80025f8:	1f00      	subs	r0, r0, #4
 80025fa:	edde 4a00 	vldr	s9, [lr]
 80025fe:	ed9c 3a01 	vldr	s6, [ip, #4]
 8002602:	edde 3a01 	vldr	s7, [lr, #4]
 8002606:	ee44 0a24 	vmla.f32	s1, s8, s9
 800260a:	ed9c 2a02 	vldr	s4, [ip, #8]
 800260e:	edde 2a02 	vldr	s5, [lr, #8]
 8002612:	ee43 0a23 	vmla.f32	s1, s6, s7
 8002616:	ed9c 1a03 	vldr	s2, [ip, #12]
 800261a:	f10c 0c10 	add.w	ip, ip, #16
 800261e:	edde 1a03 	vldr	s3, [lr, #12]
 8002622:	f10e 0e10 	add.w	lr, lr, #16
 8002626:	ee42 0a22 	vmla.f32	s1, s4, s5
 800262a:	ee41 0a21 	vmla.f32	s1, s2, s3
 800262e:	0849      	lsrs	r1, r1, #1
 8002630:	f000 803b 	beq.w	80026aa <forward_dense+0x1ce>
 8002634:	ed9c 1a03 	vldr	s2, [ip, #12]
 8002638:	3808      	subs	r0, #8
 800263a:	edde 1a03 	vldr	s3, [lr, #12]
 800263e:	1e49      	subs	r1, r1, #1
 8002640:	ed9c 2a02 	vldr	s4, [ip, #8]
 8002644:	edde 2a02 	vldr	s5, [lr, #8]
 8002648:	ed9c 3a01 	vldr	s6, [ip, #4]
 800264c:	edde 3a01 	vldr	s7, [lr, #4]
 8002650:	ed9c 4a00 	vldr	s8, [ip]
 8002654:	f10c 0c10 	add.w	ip, ip, #16
 8002658:	edde 4a00 	vldr	s9, [lr]
 800265c:	f10e 0e10 	add.w	lr, lr, #16
 8002660:	ee44 0a24 	vmla.f32	s1, s8, s9
 8002664:	ee43 0a23 	vmla.f32	s1, s6, s7
 8002668:	ee42 0a22 	vmla.f32	s1, s4, s5
 800266c:	ed9c 8a00 	vldr	s16, [ip]
 8002670:	edde 8a00 	vldr	s17, [lr]
 8002674:	ee41 0a21 	vmla.f32	s1, s2, s3
 8002678:	ed9c 7a01 	vldr	s14, [ip, #4]
 800267c:	edde 7a01 	vldr	s15, [lr, #4]
 8002680:	ee48 0a28 	vmla.f32	s1, s16, s17
 8002684:	ed9c 6a02 	vldr	s12, [ip, #8]
 8002688:	edde 6a02 	vldr	s13, [lr, #8]
 800268c:	ee47 0a27 	vmla.f32	s1, s14, s15
 8002690:	ed9c 5a03 	vldr	s10, [ip, #12]
 8002694:	f10c 0c10 	add.w	ip, ip, #16
 8002698:	edde 5a03 	vldr	s11, [lr, #12]
 800269c:	f10e 0e10 	add.w	lr, lr, #16
 80026a0:	ee46 0a26 	vmla.f32	s1, s12, s13
 80026a4:	ee45 0a25 	vmla.f32	s1, s10, s11
 80026a8:	d1c4      	bne.n	8002634 <forward_dense+0x158>
 80026aa:	b378      	cbz	r0, 800270c <forward_dense+0x230>
 80026ac:	f010 0103 	ands.w	r1, r0, #3
 80026b0:	d00b      	beq.n	80026ca <forward_dense+0x1ee>
 80026b2:	1e49      	subs	r1, r1, #1
 80026b4:	ed9c 1a00 	vldr	s2, [ip]
 80026b8:	edde 1a00 	vldr	s3, [lr]
 80026bc:	f10e 0e04 	add.w	lr, lr, #4
 80026c0:	ee41 0a21 	vmla.f32	s1, s2, s3
 80026c4:	f10c 0c04 	add.w	ip, ip, #4
 80026c8:	d1f3      	bne.n	80026b2 <forward_dense+0x1d6>
 80026ca:	0880      	lsrs	r0, r0, #2
 80026cc:	f000 801e 	beq.w	800270c <forward_dense+0x230>
 80026d0:	ed9c 2a00 	vldr	s4, [ip]
 80026d4:	1e40      	subs	r0, r0, #1
 80026d6:	ed9e 1a00 	vldr	s2, [lr]
 80026da:	eddc 1a01 	vldr	s3, [ip, #4]
 80026de:	edde 2a01 	vldr	s5, [lr, #4]
 80026e2:	ee42 0a01 	vmla.f32	s1, s4, s2
 80026e6:	ee41 0aa2 	vmla.f32	s1, s3, s5
 80026ea:	ed9c 2a02 	vldr	s4, [ip, #8]
 80026ee:	ed9e 1a02 	vldr	s2, [lr, #8]
 80026f2:	eddc 1a03 	vldr	s3, [ip, #12]
 80026f6:	f10c 0c10 	add.w	ip, ip, #16
 80026fa:	edde 2a03 	vldr	s5, [lr, #12]
 80026fe:	f10e 0e10 	add.w	lr, lr, #16
 8002702:	ee42 0a01 	vmla.f32	s1, s4, s2
 8002706:	ee41 0aa2 	vmla.f32	s1, s3, s5
 800270a:	d1e1      	bne.n	80026d0 <forward_dense+0x1f4>
 800270c:	ee30 0a20 	vadd.f32	s0, s0, s1
 8002710:	44b3      	add	fp, r6
 8002712:	ed87 0a00 	vstr	s0, [r7]
 8002716:	1d3f      	adds	r7, r7, #4
 8002718:	429f      	cmp	r7, r3
 800271a:	f4ff af5a 	bcc.w	80025d2 <forward_dense+0xf6>
 800271e:	e01f      	b.n	8002760 <forward_dense+0x284>
 8002720:	429f      	cmp	r7, r3
 8002722:	d21e      	bcs.n	8002762 <forward_dense+0x286>
 8002724:	469a      	mov	sl, r3
 8002726:	9003      	str	r0, [sp, #12]
 8002728:	4615      	mov	r5, r2
 800272a:	2d00      	cmp	r5, #0
 800272c:	a802      	add	r0, sp, #8
 800272e:	bf19      	ittee	ne
 8002730:	f855 1b04 	ldrne.w	r1, [r5], #4
 8002734:	9102      	strne	r1, [sp, #8]
 8002736:	2300      	moveq	r3, #0
 8002738:	9302      	streq	r3, [sp, #8]
 800273a:	f1b9 0f04 	cmp.w	r9, #4
 800273e:	9400      	str	r4, [sp, #0]
 8002740:	4643      	mov	r3, r8
 8002742:	9a03      	ldr	r2, [sp, #12]
 8002744:	4659      	mov	r1, fp
 8002746:	d103      	bne.n	8002750 <forward_dense+0x274>
 8002748:	f7ff f9d2 	bl	8001af0 <ai_dict4_dot_array_f32>
 800274c:	e002      	b.n	8002754 <forward_dense+0x278>
 800274e:	bf00      	nop
 8002750:	f7ff f85e 	bl	8001810 <ai_dict8_dot_array_f32>
 8002754:	9802      	ldr	r0, [sp, #8]
 8002756:	44b3      	add	fp, r6
 8002758:	f847 0b04 	str.w	r0, [r7], #4
 800275c:	4557      	cmp	r7, sl
 800275e:	d3e4      	bcc.n	800272a <forward_dense+0x24e>
 8002760:	9803      	ldr	r0, [sp, #12]
 8002762:	9a01      	ldr	r2, [sp, #4]
 8002764:	9b06      	ldr	r3, [sp, #24]
 8002766:	eb08 0884 	add.w	r8, r8, r4, lsl #2
 800276a:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
 800276e:	9a04      	ldr	r2, [sp, #16]
 8002770:	f8cd e004 	str.w	lr, [sp, #4]
 8002774:	1e52      	subs	r2, r2, #1
 8002776:	9204      	str	r2, [sp, #16]
 8002778:	f47f af19 	bne.w	80025ae <forward_dense+0xd2>
 800277c:	b008      	add	sp, #32
 800277e:	ecbd 8b02 	vpop	{d8}
 8002782:	b001      	add	sp, #4
 8002784:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08002788 <.text_13>:
 8002788:	00000000 	.word	0x00000000

0800278c <forward_gemm>:
 800278c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002790:	b091      	sub	sp, #68	; 0x44
 8002792:	4604      	mov	r4, r0
 8002794:	6961      	ldr	r1, [r4, #20]
 8002796:	6963      	ldr	r3, [r4, #20]
 8002798:	8808      	ldrh	r0, [r1, #0]
 800279a:	2800      	cmp	r0, #0
 800279c:	bf1a      	itte	ne
 800279e:	6849      	ldrne	r1, [r1, #4]
 80027a0:	1d0a      	addne	r2, r1, #4
 80027a2:	2204      	moveq	r2, #4
 80027a4:	6810      	ldr	r0, [r2, #0]
 80027a6:	8819      	ldrh	r1, [r3, #0]
 80027a8:	2800      	cmp	r0, #0
 80027aa:	bf14      	ite	ne
 80027ac:	6805      	ldrne	r5, [r0, #0]
 80027ae:	2500      	moveq	r5, #0
 80027b0:	2900      	cmp	r1, #0
 80027b2:	bf1d      	ittte	ne
 80027b4:	6858      	ldrne	r0, [r3, #4]
 80027b6:	2800      	cmpne	r0, #0
 80027b8:	f8b0 c000 	ldrhne.w	ip, [r0]
 80027bc:	f04f 0c00 	moveq.w	ip, #0
 80027c0:	2902      	cmp	r1, #2
 80027c2:	bfa6      	itte	ge
 80027c4:	6858      	ldrge	r0, [r3, #4]
 80027c6:	3010      	addge	r0, #16
 80027c8:	2004      	movlt	r0, #4
 80027ca:	6800      	ldr	r0, [r0, #0]
 80027cc:	2800      	cmp	r0, #0
 80027ce:	bf14      	ite	ne
 80027d0:	6801      	ldrne	r1, [r0, #0]
 80027d2:	2100      	moveq	r1, #0
 80027d4:	2600      	movs	r6, #0
 80027d6:	2700      	movs	r7, #0
 80027d8:	f1bc 0f03 	cmp.w	ip, #3
 80027dc:	d106      	bne.n	80027ec <forward_gemm+0x60>
 80027de:	6810      	ldr	r0, [r2, #0]
 80027e0:	2800      	cmp	r0, #0
 80027e2:	d023      	beq.n	800282c <forward_gemm+0xa0>
 80027e4:	6846      	ldr	r6, [r0, #4]
 80027e6:	d021      	beq.n	800282c <forward_gemm+0xa0>
 80027e8:	6887      	ldr	r7, [r0, #8]
 80027ea:	e01f      	b.n	800282c <forward_gemm+0xa0>
 80027ec:	f1bc 0f02 	cmp.w	ip, #2
 80027f0:	d10c      	bne.n	800280c <forward_gemm+0x80>
 80027f2:	6810      	ldr	r0, [r2, #0]
 80027f4:	b100      	cbz	r0, 80027f8 <forward_gemm+0x6c>
 80027f6:	6846      	ldr	r6, [r0, #4]
 80027f8:	881a      	ldrh	r2, [r3, #0]
 80027fa:	2a02      	cmp	r2, #2
 80027fc:	bfc6      	itte	gt
 80027fe:	6858      	ldrgt	r0, [r3, #4]
 8002800:	301c      	addgt	r0, #28
 8002802:	2004      	movle	r0, #4
 8002804:	6800      	ldr	r0, [r0, #0]
 8002806:	b188      	cbz	r0, 800282c <forward_gemm+0xa0>
 8002808:	6807      	ldr	r7, [r0, #0]
 800280a:	e00f      	b.n	800282c <forward_gemm+0xa0>
 800280c:	f1bc 0f01 	cmp.w	ip, #1
 8002810:	d10c      	bne.n	800282c <forward_gemm+0xa0>
 8002812:	881a      	ldrh	r2, [r3, #0]
 8002814:	2a02      	cmp	r2, #2
 8002816:	bfc6      	itte	gt
 8002818:	6858      	ldrgt	r0, [r3, #4]
 800281a:	f100 021c 	addgt.w	r2, r0, #28
 800281e:	2204      	movle	r2, #4
 8002820:	6810      	ldr	r0, [r2, #0]
 8002822:	2800      	cmp	r0, #0
 8002824:	d002      	beq.n	800282c <forward_gemm+0xa0>
 8002826:	6806      	ldr	r6, [r0, #0]
 8002828:	bf18      	it	ne
 800282a:	6847      	ldrne	r7, [r0, #4]
 800282c:	68c8      	ldr	r0, [r1, #12]
 800282e:	6989      	ldr	r1, [r1, #24]
 8002830:	688b      	ldr	r3, [r1, #8]
 8002832:	68c1      	ldr	r1, [r0, #12]
 8002834:	6842      	ldr	r2, [r0, #4]
 8002836:	a806      	add	r0, sp, #24
 8002838:	b292      	uxth	r2, r2
 800283a:	b289      	uxth	r1, r1
 800283c:	f004 fc42 	bl	80070c4 <arm_mat_init_f32>
 8002840:	69a9      	ldr	r1, [r5, #24]
 8002842:	68e8      	ldr	r0, [r5, #12]
 8002844:	688b      	ldr	r3, [r1, #8]
 8002846:	6842      	ldr	r2, [r0, #4]
 8002848:	68c1      	ldr	r1, [r0, #12]
 800284a:	a804      	add	r0, sp, #16
 800284c:	b292      	uxth	r2, r2
 800284e:	b289      	uxth	r1, r1
 8002850:	f004 fc38 	bl	80070c4 <arm_mat_init_f32>
 8002854:	69b1      	ldr	r1, [r6, #24]
 8002856:	68f0      	ldr	r0, [r6, #12]
 8002858:	688b      	ldr	r3, [r1, #8]
 800285a:	6842      	ldr	r2, [r0, #4]
 800285c:	68c1      	ldr	r1, [r0, #12]
 800285e:	a802      	add	r0, sp, #8
 8002860:	b292      	uxth	r2, r2
 8002862:	b289      	uxth	r1, r1
 8002864:	f004 fc2e 	bl	80070c4 <arm_mat_init_f32>
 8002868:	69b9      	ldr	r1, [r7, #24]
 800286a:	68f8      	ldr	r0, [r7, #12]
 800286c:	688b      	ldr	r3, [r1, #8]
 800286e:	6842      	ldr	r2, [r0, #4]
 8002870:	68c1      	ldr	r1, [r0, #12]
 8002872:	4668      	mov	r0, sp
 8002874:	b292      	uxth	r2, r2
 8002876:	b289      	uxth	r1, r1
 8002878:	f004 fc24 	bl	80070c4 <arm_mat_init_f32>
 800287c:	9b01      	ldr	r3, [sp, #4]
 800287e:	f8bd e010 	ldrh.w	lr, [sp, #16]
 8002882:	f994 5021 	ldrsb.w	r5, [r4, #33]	; 0x21
 8002886:	f994 0020 	ldrsb.w	r0, [r4, #32]
 800288a:	ed94 0a07 	vldr	s0, [r4, #28]
 800288e:	9a05      	ldr	r2, [sp, #20]
 8002890:	edd4 0a06 	vldr	s1, [r4, #24]
 8002894:	9308      	str	r3, [sp, #32]
 8002896:	920b      	str	r2, [sp, #44]	; 0x2c
 8002898:	2300      	movs	r3, #0
 800289a:	f8bd 8012 	ldrh.w	r8, [sp, #18]
 800289e:	f8bd a002 	ldrh.w	sl, [sp, #2]
 80028a2:	0002      	movs	r2, r0
 80028a4:	f8dd 900c 	ldr.w	r9, [sp, #12]
 80028a8:	f8bd c000 	ldrh.w	ip, [sp]
 80028ac:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80028b0:	f8cd 9034 	str.w	r9, [sp, #52]	; 0x34
 80028b4:	9c07      	ldr	r4, [sp, #28]
 80028b6:	bf0c      	ite	eq
 80028b8:	4672      	moveq	r2, lr
 80028ba:	4642      	movne	r2, r8
 80028bc:	f1ba 0f01 	cmp.w	sl, #1
 80028c0:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 80028c4:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 80028c8:	f8bd 6018 	ldrh.w	r6, [sp, #24]
 80028cc:	f8bd b01a 	ldrh.w	fp, [sp, #26]
 80028d0:	bf0c      	ite	eq
 80028d2:	4699      	moveq	r9, r3
 80028d4:	f04f 0904 	movne.w	r9, #4
 80028d8:	f1bc 0f01 	cmp.w	ip, #1
 80028dc:	d105      	bne.n	80028ea <forward_gemm+0x15e>
 80028de:	f1ba 0f01 	cmp.w	sl, #1
 80028e2:	d005      	beq.n	80028f0 <forward_gemm+0x164>
 80028e4:	f1cb 0a00 	rsb	sl, fp, #0
 80028e8:	e003      	b.n	80028f2 <forward_gemm+0x166>
 80028ea:	f1ba 0f01 	cmp.w	sl, #1
 80028ee:	d000      	beq.n	80028f2 <forward_gemm+0x166>
 80028f0:	469a      	mov	sl, r3
 80028f2:	2800      	cmp	r0, #0
 80028f4:	fa0f fa8a 	sxth.w	sl, sl
 80028f8:	f8cd a030 	str.w	sl, [sp, #48]	; 0x30
 80028fc:	bf0c      	ite	eq
 80028fe:	46f4      	moveq	ip, lr
 8002900:	46c4      	movne	ip, r8
 8002902:	45b4      	cmp	ip, r6
 8002904:	f040 808d 	bne.w	8002a22 <forward_gemm+0x296>
 8002908:	2d00      	cmp	r5, #0
 800290a:	bf0c      	ite	eq
 800290c:	9109      	streq	r1, [sp, #36]	; 0x24
 800290e:	9709      	strne	r7, [sp, #36]	; 0x24
 8002910:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
 8002914:	45dc      	cmp	ip, fp
 8002916:	f040 8084 	bne.w	8002a22 <forward_gemm+0x296>
 800291a:	2800      	cmp	r0, #0
 800291c:	bf0c      	ite	eq
 800291e:	46c4      	moveq	ip, r8
 8002920:	46f4      	movne	ip, lr
 8002922:	2d00      	cmp	r5, #0
 8002924:	bf0c      	ite	eq
 8002926:	46ba      	moveq	sl, r7
 8002928:	468a      	movne	sl, r1
 800292a:	45d4      	cmp	ip, sl
 800292c:	d179      	bne.n	8002a22 <forward_gemm+0x296>
 800292e:	9e08      	ldr	r6, [sp, #32]
 8002930:	f8dd c02c 	ldr.w	ip, [sp, #44]	; 0x2c
 8002934:	9410      	str	r4, [sp, #64]	; 0x40
 8002936:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 800293a:	f8ad 2020 	strh.w	r2, [sp, #32]
 800293e:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8002940:	f8bd 4022 	ldrh.w	r4, [sp, #34]	; 0x22
 8002944:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
 8002948:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800294a:	eb02 0a84 	add.w	sl, r2, r4, lsl #2
 800294e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002950:	ea4f 0488 	mov.w	r4, r8, lsl #2
 8002954:	f8ad e028 	strh.w	lr, [sp, #40]	; 0x28
 8002958:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
 800295c:	f8dd c034 	ldr.w	ip, [sp, #52]	; 0x34
 8002960:	2800      	cmp	r0, #0
 8002962:	ed9f 1aa2 	vldr	s2, [pc, #648]	; 8002bec <.text_17>
 8002966:	f8dd e02c 	ldr.w	lr, [sp, #44]	; 0x2c
 800296a:	bf0c      	ite	eq
 800296c:	f8dd 803c 	ldreq.w	r8, [sp, #60]	; 0x3c
 8002970:	f8bd 8028 	ldrhne.w	r8, [sp, #40]	; 0x28
 8002974:	fa1f fb88 	uxth.w	fp, r8
 8002978:	f1bb 0f00 	cmp.w	fp, #0
 800297c:	d019      	beq.n	80029b2 <forward_gemm+0x226>
 800297e:	2800      	cmp	r0, #0
 8002980:	f1a8 0801 	sub.w	r8, r8, #1
 8002984:	edde 1a00 	vldr	s3, [lr]
 8002988:	ed93 2a00 	vldr	s4, [r3]
 800298c:	bf0c      	ite	eq
 800298e:	f04f 0b04 	moveq.w	fp, #4
 8002992:	46a3      	movne	fp, r4
 8002994:	2d00      	cmp	r5, #0
 8002996:	44de      	add	lr, fp
 8002998:	ee01 1a82 	vmla.f32	s2, s3, s4
 800299c:	bf0c      	ite	eq
 800299e:	ea4f 0b81 	moveq.w	fp, r1, lsl #2
 80029a2:	f04f 0b04 	movne.w	fp, #4
 80029a6:	445b      	add	r3, fp
 80029a8:	fa1f fb88 	uxth.w	fp, r8
 80029ac:	f1bb 0f00 	cmp.w	fp, #0
 80029b0:	d1e5      	bne.n	800297e <forward_gemm+0x1f2>
 80029b2:	1e52      	subs	r2, r2, #1
 80029b4:	b292      	uxth	r2, r2
 80029b6:	002b      	movs	r3, r5
 80029b8:	ee20 1a81 	vmul.f32	s2, s1, s2
 80029bc:	edd6 1a00 	vldr	s3, [r6]
 80029c0:	444e      	add	r6, r9
 80029c2:	ee00 1a21 	vmla.f32	s2, s0, s3
 80029c6:	ed8a 1a00 	vstr	s2, [sl]
 80029ca:	f10a 0a04 	add.w	sl, sl, #4
 80029ce:	bf0e      	itee	eq
 80029d0:	1a8b      	subeq	r3, r1, r2
 80029d2:	1abb      	subne	r3, r7, r2
 80029d4:	434b      	mulne	r3, r1
 80029d6:	2a00      	cmp	r2, #0
 80029d8:	eb0c 0383 	add.w	r3, ip, r3, lsl #2
 80029dc:	d1c0      	bne.n	8002960 <forward_gemm+0x1d4>
 80029de:	f8bd a022 	ldrh.w	sl, [sp, #34]	; 0x22
 80029e2:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
 80029e6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80029e8:	f8bd e028 	ldrh.w	lr, [sp, #40]	; 0x28
 80029ec:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 80029f0:	f8cd c034 	str.w	ip, [sp, #52]	; 0x34
 80029f4:	44da      	add	sl, fp
 80029f6:	f8ad a022 	strh.w	sl, [sp, #34]	; 0x22
 80029fa:	b100      	cbz	r0, 80029fe <forward_gemm+0x272>
 80029fc:	2404      	movs	r4, #4
 80029fe:	eb02 0c04 	add.w	ip, r2, r4
 8002a02:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002a04:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 8002a08:	eb06 0682 	add.w	r6, r6, r2, lsl #2
 8002a0c:	f1a4 0a01 	sub.w	sl, r4, #1
 8002a10:	f8ad a020 	strh.w	sl, [sp, #32]
 8002a14:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8002a18:	2a00      	cmp	r2, #0
 8002a1a:	d190      	bne.n	800293e <forward_gemm+0x1b2>
 8002a1c:	b011      	add	sp, #68	; 0x44
 8002a1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002a22:	fb0b f606 	mul.w	r6, fp, r6
 8002a26:	2e00      	cmp	r6, #0
 8002a28:	ddf8      	ble.n	8002a1c <forward_gemm+0x290>
 8002a2a:	f016 0003 	ands.w	r0, r6, #3
 8002a2e:	d003      	beq.n	8002a38 <forward_gemm+0x2ac>
 8002a30:	1e40      	subs	r0, r0, #1
 8002a32:	f844 3b04 	str.w	r3, [r4], #4
 8002a36:	d1fb      	bne.n	8002a30 <forward_gemm+0x2a4>
 8002a38:	08b1      	lsrs	r1, r6, #2
 8002a3a:	d0ef      	beq.n	8002a1c <forward_gemm+0x290>
 8002a3c:	6023      	str	r3, [r4, #0]
 8002a3e:	6063      	str	r3, [r4, #4]
 8002a40:	60a3      	str	r3, [r4, #8]
 8002a42:	60e3      	str	r3, [r4, #12]
 8002a44:	3410      	adds	r4, #16
 8002a46:	1e49      	subs	r1, r1, #1
 8002a48:	d1f8      	bne.n	8002a3c <forward_gemm+0x2b0>
 8002a4a:	b011      	add	sp, #68	; 0x44
 8002a4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08002a50 <forward_matmul>:
 8002a50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002a54:	b08b      	sub	sp, #44	; 0x2c
 8002a56:	6944      	ldr	r4, [r0, #20]
 8002a58:	8822      	ldrh	r2, [r4, #0]
 8002a5a:	2a00      	cmp	r2, #0
 8002a5c:	bf1a      	itte	ne
 8002a5e:	6860      	ldrne	r0, [r4, #4]
 8002a60:	1d03      	addne	r3, r0, #4
 8002a62:	2304      	moveq	r3, #4
 8002a64:	6819      	ldr	r1, [r3, #0]
 8002a66:	2900      	cmp	r1, #0
 8002a68:	bf14      	ite	ne
 8002a6a:	6808      	ldrne	r0, [r1, #0]
 8002a6c:	2000      	moveq	r0, #0
 8002a6e:	2900      	cmp	r1, #0
 8002a70:	bf14      	ite	ne
 8002a72:	f8d1 b004 	ldrne.w	fp, [r1, #4]
 8002a76:	f04f 0b00 	moveq.w	fp, #0
 8002a7a:	2a02      	cmp	r2, #2
 8002a7c:	bfa6      	itte	ge
 8002a7e:	6861      	ldrge	r1, [r4, #4]
 8002a80:	3110      	addge	r1, #16
 8002a82:	2104      	movlt	r1, #4
 8002a84:	6809      	ldr	r1, [r1, #0]
 8002a86:	2900      	cmp	r1, #0
 8002a88:	bf14      	ite	ne
 8002a8a:	680b      	ldrne	r3, [r1, #0]
 8002a8c:	2300      	moveq	r3, #0
 8002a8e:	f1bb 0f00 	cmp.w	fp, #0
 8002a92:	d108      	bne.n	8002aa6 <forward_matmul+0x56>
 8002a94:	2a02      	cmp	r2, #2
 8002a96:	bfc6      	itte	gt
 8002a98:	6861      	ldrgt	r1, [r4, #4]
 8002a9a:	311c      	addgt	r1, #28
 8002a9c:	2104      	movle	r1, #4
 8002a9e:	6809      	ldr	r1, [r1, #0]
 8002aa0:	b109      	cbz	r1, 8002aa6 <forward_matmul+0x56>
 8002aa2:	f8d1 b000 	ldr.w	fp, [r1]
 8002aa6:	68dd      	ldr	r5, [r3, #12]
 8002aa8:	68c4      	ldr	r4, [r0, #12]
 8002aaa:	f8db 900c 	ldr.w	r9, [fp, #12]
 8002aae:	686e      	ldr	r6, [r5, #4]
 8002ab0:	f8d4 e000 	ldr.w	lr, [r4]
 8002ab4:	f8d5 a000 	ldr.w	sl, [r5]
 8002ab8:	f8d9 2000 	ldr.w	r2, [r9]
 8002abc:	68a1      	ldr	r1, [r4, #8]
 8002abe:	f8d9 8008 	ldr.w	r8, [r9, #8]
 8002ac2:	f8d5 c008 	ldr.w	ip, [r5, #8]
 8002ac6:	68ef      	ldr	r7, [r5, #12]
 8002ac8:	9706      	str	r7, [sp, #24]
 8002aca:	68e7      	ldr	r7, [r4, #12]
 8002acc:	699b      	ldr	r3, [r3, #24]
 8002ace:	fb01 f50e 	mul.w	r5, r1, lr
 8002ad2:	434f      	muls	r7, r1
 8002ad4:	689b      	ldr	r3, [r3, #8]
 8002ad6:	fb0e f707 	mul.w	r7, lr, r7
 8002ada:	970a      	str	r7, [sp, #40]	; 0x28
 8002adc:	f8d9 400c 	ldr.w	r4, [r9, #12]
 8002ae0:	fb08 f404 	mul.w	r4, r8, r4
 8002ae4:	fb08 f802 	mul.w	r8, r8, r2
 8002ae8:	4354      	muls	r4, r2
 8002aea:	9409      	str	r4, [sp, #36]	; 0x24
 8002aec:	2e00      	cmp	r6, #0
 8002aee:	d077      	beq.n	8002be0 <forward_matmul+0x190>
 8002af0:	2400      	movs	r4, #0
 8002af2:	46a1      	mov	r9, r4
 8002af4:	9602      	str	r6, [sp, #8]
 8002af6:	9e06      	ldr	r6, [sp, #24]
 8002af8:	2e00      	cmp	r6, #0
 8002afa:	d067      	beq.n	8002bcc <forward_matmul+0x17c>
 8002afc:	9f06      	ldr	r7, [sp, #24]
 8002afe:	2600      	movs	r6, #0
 8002b00:	9701      	str	r7, [sp, #4]
 8002b02:	f8cd c00c 	str.w	ip, [sp, #12]
 8002b06:	9505      	str	r5, [sp, #20]
 8002b08:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8002b0c:	f1bc 0f00 	cmp.w	ip, #0
 8002b10:	d051      	beq.n	8002bb6 <forward_matmul+0x166>
 8002b12:	f8cd a010 	str.w	sl, [sp, #16]
 8002b16:	f04f 0a00 	mov.w	sl, #0
 8002b1a:	f8cd c000 	str.w	ip, [sp]
 8002b1e:	9207      	str	r2, [sp, #28]
 8002b20:	9a04      	ldr	r2, [sp, #16]
 8002b22:	2a00      	cmp	r2, #0
 8002b24:	d03e      	beq.n	8002ba4 <forward_matmul+0x154>
 8002b26:	f04f 0c00 	mov.w	ip, #0
 8002b2a:	9008      	str	r0, [sp, #32]
 8002b2c:	9808      	ldr	r0, [sp, #32]
 8002b2e:	ed9f 0a2f 	vldr	s0, [pc, #188]	; 8002bec <.text_17>
 8002b32:	6987      	ldr	r7, [r0, #24]
 8002b34:	f8db 0018 	ldr.w	r0, [fp, #24]
 8002b38:	68bd      	ldr	r5, [r7, #8]
 8002b3a:	6887      	ldr	r7, [r0, #8]
 8002b3c:	192d      	adds	r5, r5, r4
 8002b3e:	19ad      	adds	r5, r5, r6
 8002b40:	4465      	add	r5, ip
 8002b42:	444f      	add	r7, r9
 8002b44:	4457      	add	r7, sl
 8002b46:	4467      	add	r7, ip
 8002b48:	b321      	cbz	r1, 8002b94 <forward_matmul+0x144>
 8002b4a:	07c8      	lsls	r0, r1, #31
 8002b4c:	d509      	bpl.n	8002b62 <forward_matmul+0x112>
 8002b4e:	edd5 0a00 	vldr	s1, [r5]
 8002b52:	eb05 058e 	add.w	r5, r5, lr, lsl #2
 8002b56:	ed97 1a00 	vldr	s2, [r7]
 8002b5a:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 8002b5e:	ee00 0a81 	vmla.f32	s0, s1, s2
 8002b62:	0848      	lsrs	r0, r1, #1
 8002b64:	f000 8016 	beq.w	8002b94 <forward_matmul+0x144>
 8002b68:	edd5 0a00 	vldr	s1, [r5]
 8002b6c:	eb05 058e 	add.w	r5, r5, lr, lsl #2
 8002b70:	ed97 1a00 	vldr	s2, [r7]
 8002b74:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 8002b78:	1e40      	subs	r0, r0, #1
 8002b7a:	ee00 0a81 	vmla.f32	s0, s1, s2
 8002b7e:	edd5 1a00 	vldr	s3, [r5]
 8002b82:	eb05 058e 	add.w	r5, r5, lr, lsl #2
 8002b86:	ed97 2a00 	vldr	s4, [r7]
 8002b8a:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 8002b8e:	ee01 0a82 	vmla.f32	s0, s3, s4
 8002b92:	d1e9      	bne.n	8002b68 <forward_matmul+0x118>
 8002b94:	ed83 0a00 	vstr	s0, [r3]
 8002b98:	1d1b      	adds	r3, r3, #4
 8002b9a:	1e52      	subs	r2, r2, #1
 8002b9c:	f10c 0c04 	add.w	ip, ip, #4
 8002ba0:	d1c4      	bne.n	8002b2c <forward_matmul+0xdc>
 8002ba2:	9808      	ldr	r0, [sp, #32]
 8002ba4:	9d00      	ldr	r5, [sp, #0]
 8002ba6:	9a07      	ldr	r2, [sp, #28]
 8002ba8:	eb0a 0a82 	add.w	sl, sl, r2, lsl #2
 8002bac:	1e6d      	subs	r5, r5, #1
 8002bae:	9500      	str	r5, [sp, #0]
 8002bb0:	d1b6      	bne.n	8002b20 <forward_matmul+0xd0>
 8002bb2:	f8dd a010 	ldr.w	sl, [sp, #16]
 8002bb6:	9f01      	ldr	r7, [sp, #4]
 8002bb8:	f8dd c014 	ldr.w	ip, [sp, #20]
 8002bbc:	eb06 068c 	add.w	r6, r6, ip, lsl #2
 8002bc0:	1e7f      	subs	r7, r7, #1
 8002bc2:	9701      	str	r7, [sp, #4]
 8002bc4:	d1a0      	bne.n	8002b08 <forward_matmul+0xb8>
 8002bc6:	f8dd c00c 	ldr.w	ip, [sp, #12]
 8002bca:	9d05      	ldr	r5, [sp, #20]
 8002bcc:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8002bce:	eb09 0986 	add.w	r9, r9, r6, lsl #2
 8002bd2:	9e0a      	ldr	r6, [sp, #40]	; 0x28
 8002bd4:	eb04 0486 	add.w	r4, r4, r6, lsl #2
 8002bd8:	9e02      	ldr	r6, [sp, #8]
 8002bda:	1e76      	subs	r6, r6, #1
 8002bdc:	9602      	str	r6, [sp, #8]
 8002bde:	d18a      	bne.n	8002af6 <forward_matmul+0xa6>
 8002be0:	b00b      	add	sp, #44	; 0x2c
 8002be2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08002be8 <.text_16>:
 8002be8:	0800180d 	.word	0x0800180d

08002bec <.text_17>:
 8002bec:	00000000 	.word	0x00000000

08002bf0 <ai_shape_get_size>:
 8002bf0:	b470      	push	{r4, r5, r6}
 8002bf2:	4601      	mov	r1, r0
 8002bf4:	f04f 0201 	mov.w	r2, #1
 8002bf8:	680b      	ldr	r3, [r1, #0]
 8002bfa:	0a1b      	lsrs	r3, r3, #8
 8002bfc:	d01e      	beq.n	8002c3c <ai_shape_get_size+0x4c>
 8002bfe:	684c      	ldr	r4, [r1, #4]
 8002c00:	4618      	mov	r0, r3
 8002c02:	eb04 0183 	add.w	r1, r4, r3, lsl #2
 8002c06:	1f0d      	subs	r5, r1, #4
 8002c08:	f010 0103 	ands.w	r1, r0, #3
 8002c0c:	f000 8006 	beq.w	8002c1c <ai_shape_get_size+0x2c>
 8002c10:	f855 6904 	ldr.w	r6, [r5], #-4
 8002c14:	1e5b      	subs	r3, r3, #1
 8002c16:	4372      	muls	r2, r6
 8002c18:	1e49      	subs	r1, r1, #1
 8002c1a:	d1f9      	bne.n	8002c10 <ai_shape_get_size+0x20>
 8002c1c:	0880      	lsrs	r0, r0, #2
 8002c1e:	d00d      	beq.n	8002c3c <ai_shape_get_size+0x4c>
 8002c20:	eb04 0183 	add.w	r1, r4, r3, lsl #2
 8002c24:	3910      	subs	r1, #16
 8002c26:	68cb      	ldr	r3, [r1, #12]
 8002c28:	688c      	ldr	r4, [r1, #8]
 8002c2a:	684d      	ldr	r5, [r1, #4]
 8002c2c:	f851 6910 	ldr.w	r6, [r1], #-16
 8002c30:	4363      	muls	r3, r4
 8002c32:	436b      	muls	r3, r5
 8002c34:	4373      	muls	r3, r6
 8002c36:	435a      	muls	r2, r3
 8002c38:	1e40      	subs	r0, r0, #1
 8002c3a:	d1f4      	bne.n	8002c26 <ai_shape_get_size+0x36>
 8002c3c:	4610      	mov	r0, r2
 8002c3e:	bc70      	pop	{r4, r5, r6}
 8002c40:	4770      	bx	lr
	...

08002c44 <nl_func_acos_array_f32>:
 8002c44:	b570      	push	{r4, r5, r6, lr}
 8002c46:	688c      	ldr	r4, [r1, #8]
 8002c48:	6880      	ldr	r0, [r0, #8]
 8002c4a:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 8002c4e:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8002c52:	1f0d      	subs	r5, r1, #4
 8002c54:	1f16      	subs	r6, r2, #4
 8002c56:	42a5      	cmp	r5, r4
 8002c58:	f0c0 800a 	bcc.w	8002c70 <nl_func_acos_array_f32+0x2c>
 8002c5c:	ed95 0a00 	vldr	s0, [r5]
 8002c60:	1f2d      	subs	r5, r5, #4
 8002c62:	f008 fee5 	bl	800ba30 <acosf>
 8002c66:	ed86 0a00 	vstr	s0, [r6]
 8002c6a:	1f36      	subs	r6, r6, #4
 8002c6c:	42a5      	cmp	r5, r4
 8002c6e:	d2f5      	bcs.n	8002c5c <nl_func_acos_array_f32+0x18>
 8002c70:	bd70      	pop	{r4, r5, r6, pc}
	...

08002c74 <forward_acos>:
 8002c74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002c76:	b081      	sub	sp, #4
 8002c78:	6942      	ldr	r2, [r0, #20]
 8002c7a:	f04f 0501 	mov.w	r5, #1
 8002c7e:	8811      	ldrh	r1, [r2, #0]
 8002c80:	2900      	cmp	r1, #0
 8002c82:	bf1a      	itte	ne
 8002c84:	6850      	ldrne	r0, [r2, #4]
 8002c86:	1d00      	addne	r0, r0, #4
 8002c88:	2004      	moveq	r0, #4
 8002c8a:	6800      	ldr	r0, [r0, #0]
 8002c8c:	2800      	cmp	r0, #0
 8002c8e:	bf14      	ite	ne
 8002c90:	6803      	ldrne	r3, [r0, #0]
 8002c92:	2300      	moveq	r3, #0
 8002c94:	2902      	cmp	r1, #2
 8002c96:	bfa6      	itte	ge
 8002c98:	6850      	ldrge	r0, [r2, #4]
 8002c9a:	3010      	addge	r0, #16
 8002c9c:	2004      	movlt	r0, #4
 8002c9e:	6800      	ldr	r0, [r0, #0]
 8002ca0:	2800      	cmp	r0, #0
 8002ca2:	bf19      	ittee	ne
 8002ca4:	6800      	ldrne	r0, [r0, #0]
 8002ca6:	f100 0418 	addne.w	r4, r0, #24
 8002caa:	2100      	moveq	r1, #0
 8002cac:	f101 0418 	addeq.w	r4, r1, #24
 8002cb0:	f103 0108 	add.w	r1, r3, #8
 8002cb4:	680a      	ldr	r2, [r1, #0]
 8002cb6:	0a12      	lsrs	r2, r2, #8
 8002cb8:	d01f      	beq.n	8002cfa <forward_acos+0x86>
 8002cba:	684e      	ldr	r6, [r1, #4]
 8002cbc:	4610      	mov	r0, r2
 8002cbe:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8002cc2:	1f0f      	subs	r7, r1, #4
 8002cc4:	f010 0103 	ands.w	r1, r0, #3
 8002cc8:	d006      	beq.n	8002cd8 <forward_acos+0x64>
 8002cca:	1e52      	subs	r2, r2, #1
 8002ccc:	f857 c904 	ldr.w	ip, [r7], #-4
 8002cd0:	1e49      	subs	r1, r1, #1
 8002cd2:	fb0c f505 	mul.w	r5, ip, r5
 8002cd6:	d1f8      	bne.n	8002cca <forward_acos+0x56>
 8002cd8:	0880      	lsrs	r0, r0, #2
 8002cda:	d00e      	beq.n	8002cfa <forward_acos+0x86>
 8002cdc:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8002ce0:	3910      	subs	r1, #16
 8002ce2:	68ca      	ldr	r2, [r1, #12]
 8002ce4:	688e      	ldr	r6, [r1, #8]
 8002ce6:	684f      	ldr	r7, [r1, #4]
 8002ce8:	f851 c910 	ldr.w	ip, [r1], #-16
 8002cec:	4372      	muls	r2, r6
 8002cee:	437a      	muls	r2, r7
 8002cf0:	fb0c f202 	mul.w	r2, ip, r2
 8002cf4:	4355      	muls	r5, r2
 8002cf6:	1e40      	subs	r0, r0, #1
 8002cf8:	d1f3      	bne.n	8002ce2 <forward_acos+0x6e>
 8002cfa:	6998      	ldr	r0, [r3, #24]
 8002cfc:	6821      	ldr	r1, [r4, #0]
 8002cfe:	6886      	ldr	r6, [r0, #8]
 8002d00:	688a      	ldr	r2, [r1, #8]
 8002d02:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 8002d06:	eb02 0385 	add.w	r3, r2, r5, lsl #2
 8002d0a:	1f07      	subs	r7, r0, #4
 8002d0c:	1f1c      	subs	r4, r3, #4
 8002d0e:	42b7      	cmp	r7, r6
 8002d10:	f0c0 800a 	bcc.w	8002d28 <forward_acos+0xb4>
 8002d14:	ed97 0a00 	vldr	s0, [r7]
 8002d18:	1f3f      	subs	r7, r7, #4
 8002d1a:	f008 fe89 	bl	800ba30 <acosf>
 8002d1e:	ed84 0a00 	vstr	s0, [r4]
 8002d22:	1f24      	subs	r4, r4, #4
 8002d24:	42b7      	cmp	r7, r6
 8002d26:	d2f5      	bcs.n	8002d14 <forward_acos+0xa0>
 8002d28:	b001      	add	sp, #4
 8002d2a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002d2c <nl_func_acosh_array_f32>:
 8002d2c:	b570      	push	{r4, r5, r6, lr}
 8002d2e:	688c      	ldr	r4, [r1, #8]
 8002d30:	6880      	ldr	r0, [r0, #8]
 8002d32:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 8002d36:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8002d3a:	1f0d      	subs	r5, r1, #4
 8002d3c:	1f16      	subs	r6, r2, #4
 8002d3e:	42a5      	cmp	r5, r4
 8002d40:	f0c0 800a 	bcc.w	8002d58 <nl_func_acosh_array_f32+0x2c>
 8002d44:	ed95 0a00 	vldr	s0, [r5]
 8002d48:	1f2d      	subs	r5, r5, #4
 8002d4a:	f008 fec9 	bl	800bae0 <acoshf>
 8002d4e:	ed86 0a00 	vstr	s0, [r6]
 8002d52:	1f36      	subs	r6, r6, #4
 8002d54:	42a5      	cmp	r5, r4
 8002d56:	d2f5      	bcs.n	8002d44 <nl_func_acosh_array_f32+0x18>
 8002d58:	bd70      	pop	{r4, r5, r6, pc}
	...

08002d5c <forward_acosh>:
 8002d5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002d5e:	b081      	sub	sp, #4
 8002d60:	6942      	ldr	r2, [r0, #20]
 8002d62:	f04f 0501 	mov.w	r5, #1
 8002d66:	8811      	ldrh	r1, [r2, #0]
 8002d68:	2900      	cmp	r1, #0
 8002d6a:	bf1a      	itte	ne
 8002d6c:	6850      	ldrne	r0, [r2, #4]
 8002d6e:	1d00      	addne	r0, r0, #4
 8002d70:	2004      	moveq	r0, #4
 8002d72:	6800      	ldr	r0, [r0, #0]
 8002d74:	2800      	cmp	r0, #0
 8002d76:	bf14      	ite	ne
 8002d78:	6803      	ldrne	r3, [r0, #0]
 8002d7a:	2300      	moveq	r3, #0
 8002d7c:	2902      	cmp	r1, #2
 8002d7e:	bfa6      	itte	ge
 8002d80:	6850      	ldrge	r0, [r2, #4]
 8002d82:	3010      	addge	r0, #16
 8002d84:	2004      	movlt	r0, #4
 8002d86:	6800      	ldr	r0, [r0, #0]
 8002d88:	2800      	cmp	r0, #0
 8002d8a:	bf19      	ittee	ne
 8002d8c:	6800      	ldrne	r0, [r0, #0]
 8002d8e:	f100 0418 	addne.w	r4, r0, #24
 8002d92:	2100      	moveq	r1, #0
 8002d94:	f101 0418 	addeq.w	r4, r1, #24
 8002d98:	f103 0108 	add.w	r1, r3, #8
 8002d9c:	680a      	ldr	r2, [r1, #0]
 8002d9e:	0a12      	lsrs	r2, r2, #8
 8002da0:	d01f      	beq.n	8002de2 <forward_acosh+0x86>
 8002da2:	684e      	ldr	r6, [r1, #4]
 8002da4:	4610      	mov	r0, r2
 8002da6:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8002daa:	1f0f      	subs	r7, r1, #4
 8002dac:	f010 0103 	ands.w	r1, r0, #3
 8002db0:	d006      	beq.n	8002dc0 <forward_acosh+0x64>
 8002db2:	1e52      	subs	r2, r2, #1
 8002db4:	f857 c904 	ldr.w	ip, [r7], #-4
 8002db8:	1e49      	subs	r1, r1, #1
 8002dba:	fb0c f505 	mul.w	r5, ip, r5
 8002dbe:	d1f8      	bne.n	8002db2 <forward_acosh+0x56>
 8002dc0:	0880      	lsrs	r0, r0, #2
 8002dc2:	d00e      	beq.n	8002de2 <forward_acosh+0x86>
 8002dc4:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8002dc8:	3910      	subs	r1, #16
 8002dca:	68ca      	ldr	r2, [r1, #12]
 8002dcc:	688e      	ldr	r6, [r1, #8]
 8002dce:	684f      	ldr	r7, [r1, #4]
 8002dd0:	f851 c910 	ldr.w	ip, [r1], #-16
 8002dd4:	4372      	muls	r2, r6
 8002dd6:	437a      	muls	r2, r7
 8002dd8:	fb0c f202 	mul.w	r2, ip, r2
 8002ddc:	4355      	muls	r5, r2
 8002dde:	1e40      	subs	r0, r0, #1
 8002de0:	d1f3      	bne.n	8002dca <forward_acosh+0x6e>
 8002de2:	6998      	ldr	r0, [r3, #24]
 8002de4:	6821      	ldr	r1, [r4, #0]
 8002de6:	6886      	ldr	r6, [r0, #8]
 8002de8:	688a      	ldr	r2, [r1, #8]
 8002dea:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 8002dee:	eb02 0385 	add.w	r3, r2, r5, lsl #2
 8002df2:	1f07      	subs	r7, r0, #4
 8002df4:	1f1c      	subs	r4, r3, #4
 8002df6:	42b7      	cmp	r7, r6
 8002df8:	f0c0 800a 	bcc.w	8002e10 <forward_acosh+0xb4>
 8002dfc:	ed97 0a00 	vldr	s0, [r7]
 8002e00:	1f3f      	subs	r7, r7, #4
 8002e02:	f008 fe6d 	bl	800bae0 <acoshf>
 8002e06:	ed84 0a00 	vstr	s0, [r4]
 8002e0a:	1f24      	subs	r4, r4, #4
 8002e0c:	42b7      	cmp	r7, r6
 8002e0e:	d2f5      	bcs.n	8002dfc <forward_acosh+0xa0>
 8002e10:	b001      	add	sp, #4
 8002e12:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002e14 <nl_func_asin_array_f32>:
 8002e14:	b570      	push	{r4, r5, r6, lr}
 8002e16:	688c      	ldr	r4, [r1, #8]
 8002e18:	6880      	ldr	r0, [r0, #8]
 8002e1a:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 8002e1e:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8002e22:	1f0d      	subs	r5, r1, #4
 8002e24:	1f16      	subs	r6, r2, #4
 8002e26:	42a5      	cmp	r5, r4
 8002e28:	f0c0 800a 	bcc.w	8002e40 <nl_func_asin_array_f32+0x2c>
 8002e2c:	ed95 0a00 	vldr	s0, [r5]
 8002e30:	1f2d      	subs	r5, r5, #4
 8002e32:	f008 fea5 	bl	800bb80 <asinf>
 8002e36:	ed86 0a00 	vstr	s0, [r6]
 8002e3a:	1f36      	subs	r6, r6, #4
 8002e3c:	42a5      	cmp	r5, r4
 8002e3e:	d2f5      	bcs.n	8002e2c <nl_func_asin_array_f32+0x18>
 8002e40:	bd70      	pop	{r4, r5, r6, pc}
	...

08002e44 <forward_asin>:
 8002e44:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e46:	b081      	sub	sp, #4
 8002e48:	6942      	ldr	r2, [r0, #20]
 8002e4a:	f04f 0501 	mov.w	r5, #1
 8002e4e:	8811      	ldrh	r1, [r2, #0]
 8002e50:	2900      	cmp	r1, #0
 8002e52:	bf1a      	itte	ne
 8002e54:	6850      	ldrne	r0, [r2, #4]
 8002e56:	1d00      	addne	r0, r0, #4
 8002e58:	2004      	moveq	r0, #4
 8002e5a:	6800      	ldr	r0, [r0, #0]
 8002e5c:	2800      	cmp	r0, #0
 8002e5e:	bf14      	ite	ne
 8002e60:	6803      	ldrne	r3, [r0, #0]
 8002e62:	2300      	moveq	r3, #0
 8002e64:	2902      	cmp	r1, #2
 8002e66:	bfa6      	itte	ge
 8002e68:	6850      	ldrge	r0, [r2, #4]
 8002e6a:	3010      	addge	r0, #16
 8002e6c:	2004      	movlt	r0, #4
 8002e6e:	6800      	ldr	r0, [r0, #0]
 8002e70:	2800      	cmp	r0, #0
 8002e72:	bf19      	ittee	ne
 8002e74:	6800      	ldrne	r0, [r0, #0]
 8002e76:	f100 0418 	addne.w	r4, r0, #24
 8002e7a:	2100      	moveq	r1, #0
 8002e7c:	f101 0418 	addeq.w	r4, r1, #24
 8002e80:	f103 0108 	add.w	r1, r3, #8
 8002e84:	680a      	ldr	r2, [r1, #0]
 8002e86:	0a12      	lsrs	r2, r2, #8
 8002e88:	d01f      	beq.n	8002eca <forward_asin+0x86>
 8002e8a:	684e      	ldr	r6, [r1, #4]
 8002e8c:	4610      	mov	r0, r2
 8002e8e:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8002e92:	1f0f      	subs	r7, r1, #4
 8002e94:	f010 0103 	ands.w	r1, r0, #3
 8002e98:	d006      	beq.n	8002ea8 <forward_asin+0x64>
 8002e9a:	1e52      	subs	r2, r2, #1
 8002e9c:	f857 c904 	ldr.w	ip, [r7], #-4
 8002ea0:	1e49      	subs	r1, r1, #1
 8002ea2:	fb0c f505 	mul.w	r5, ip, r5
 8002ea6:	d1f8      	bne.n	8002e9a <forward_asin+0x56>
 8002ea8:	0880      	lsrs	r0, r0, #2
 8002eaa:	d00e      	beq.n	8002eca <forward_asin+0x86>
 8002eac:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8002eb0:	3910      	subs	r1, #16
 8002eb2:	68ca      	ldr	r2, [r1, #12]
 8002eb4:	688e      	ldr	r6, [r1, #8]
 8002eb6:	684f      	ldr	r7, [r1, #4]
 8002eb8:	f851 c910 	ldr.w	ip, [r1], #-16
 8002ebc:	4372      	muls	r2, r6
 8002ebe:	437a      	muls	r2, r7
 8002ec0:	fb0c f202 	mul.w	r2, ip, r2
 8002ec4:	4355      	muls	r5, r2
 8002ec6:	1e40      	subs	r0, r0, #1
 8002ec8:	d1f3      	bne.n	8002eb2 <forward_asin+0x6e>
 8002eca:	6998      	ldr	r0, [r3, #24]
 8002ecc:	6821      	ldr	r1, [r4, #0]
 8002ece:	6886      	ldr	r6, [r0, #8]
 8002ed0:	688a      	ldr	r2, [r1, #8]
 8002ed2:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 8002ed6:	eb02 0385 	add.w	r3, r2, r5, lsl #2
 8002eda:	1f07      	subs	r7, r0, #4
 8002edc:	1f1c      	subs	r4, r3, #4
 8002ede:	42b7      	cmp	r7, r6
 8002ee0:	f0c0 800a 	bcc.w	8002ef8 <forward_asin+0xb4>
 8002ee4:	ed97 0a00 	vldr	s0, [r7]
 8002ee8:	1f3f      	subs	r7, r7, #4
 8002eea:	f008 fe49 	bl	800bb80 <asinf>
 8002eee:	ed84 0a00 	vstr	s0, [r4]
 8002ef2:	1f24      	subs	r4, r4, #4
 8002ef4:	42b7      	cmp	r7, r6
 8002ef6:	d2f5      	bcs.n	8002ee4 <forward_asin+0xa0>
 8002ef8:	b001      	add	sp, #4
 8002efa:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002efc <nl_func_asinh_array_f32>:
 8002efc:	b570      	push	{r4, r5, r6, lr}
 8002efe:	688c      	ldr	r4, [r1, #8]
 8002f00:	6880      	ldr	r0, [r0, #8]
 8002f02:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 8002f06:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8002f0a:	1f0d      	subs	r5, r1, #4
 8002f0c:	1f16      	subs	r6, r2, #4
 8002f0e:	42a5      	cmp	r5, r4
 8002f10:	f0c0 800a 	bcc.w	8002f28 <nl_func_asinh_array_f32+0x2c>
 8002f14:	ed95 0a00 	vldr	s0, [r5]
 8002f18:	1f2d      	subs	r5, r5, #4
 8002f1a:	f007 ffb9 	bl	800ae90 <asinhf>
 8002f1e:	ed86 0a00 	vstr	s0, [r6]
 8002f22:	1f36      	subs	r6, r6, #4
 8002f24:	42a5      	cmp	r5, r4
 8002f26:	d2f5      	bcs.n	8002f14 <nl_func_asinh_array_f32+0x18>
 8002f28:	bd70      	pop	{r4, r5, r6, pc}
	...

08002f2c <forward_asinh>:
 8002f2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f2e:	b081      	sub	sp, #4
 8002f30:	6942      	ldr	r2, [r0, #20]
 8002f32:	f04f 0501 	mov.w	r5, #1
 8002f36:	8811      	ldrh	r1, [r2, #0]
 8002f38:	2900      	cmp	r1, #0
 8002f3a:	bf1a      	itte	ne
 8002f3c:	6850      	ldrne	r0, [r2, #4]
 8002f3e:	1d00      	addne	r0, r0, #4
 8002f40:	2004      	moveq	r0, #4
 8002f42:	6800      	ldr	r0, [r0, #0]
 8002f44:	2800      	cmp	r0, #0
 8002f46:	bf14      	ite	ne
 8002f48:	6803      	ldrne	r3, [r0, #0]
 8002f4a:	2300      	moveq	r3, #0
 8002f4c:	2902      	cmp	r1, #2
 8002f4e:	bfa6      	itte	ge
 8002f50:	6850      	ldrge	r0, [r2, #4]
 8002f52:	3010      	addge	r0, #16
 8002f54:	2004      	movlt	r0, #4
 8002f56:	6800      	ldr	r0, [r0, #0]
 8002f58:	2800      	cmp	r0, #0
 8002f5a:	bf19      	ittee	ne
 8002f5c:	6800      	ldrne	r0, [r0, #0]
 8002f5e:	f100 0418 	addne.w	r4, r0, #24
 8002f62:	2100      	moveq	r1, #0
 8002f64:	f101 0418 	addeq.w	r4, r1, #24
 8002f68:	f103 0108 	add.w	r1, r3, #8
 8002f6c:	680a      	ldr	r2, [r1, #0]
 8002f6e:	0a12      	lsrs	r2, r2, #8
 8002f70:	d01f      	beq.n	8002fb2 <forward_asinh+0x86>
 8002f72:	684e      	ldr	r6, [r1, #4]
 8002f74:	4610      	mov	r0, r2
 8002f76:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8002f7a:	1f0f      	subs	r7, r1, #4
 8002f7c:	f010 0103 	ands.w	r1, r0, #3
 8002f80:	d006      	beq.n	8002f90 <forward_asinh+0x64>
 8002f82:	1e52      	subs	r2, r2, #1
 8002f84:	f857 c904 	ldr.w	ip, [r7], #-4
 8002f88:	1e49      	subs	r1, r1, #1
 8002f8a:	fb0c f505 	mul.w	r5, ip, r5
 8002f8e:	d1f8      	bne.n	8002f82 <forward_asinh+0x56>
 8002f90:	0880      	lsrs	r0, r0, #2
 8002f92:	d00e      	beq.n	8002fb2 <forward_asinh+0x86>
 8002f94:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8002f98:	3910      	subs	r1, #16
 8002f9a:	68ca      	ldr	r2, [r1, #12]
 8002f9c:	688e      	ldr	r6, [r1, #8]
 8002f9e:	684f      	ldr	r7, [r1, #4]
 8002fa0:	f851 c910 	ldr.w	ip, [r1], #-16
 8002fa4:	4372      	muls	r2, r6
 8002fa6:	437a      	muls	r2, r7
 8002fa8:	fb0c f202 	mul.w	r2, ip, r2
 8002fac:	4355      	muls	r5, r2
 8002fae:	1e40      	subs	r0, r0, #1
 8002fb0:	d1f3      	bne.n	8002f9a <forward_asinh+0x6e>
 8002fb2:	6998      	ldr	r0, [r3, #24]
 8002fb4:	6821      	ldr	r1, [r4, #0]
 8002fb6:	6886      	ldr	r6, [r0, #8]
 8002fb8:	688a      	ldr	r2, [r1, #8]
 8002fba:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 8002fbe:	eb02 0385 	add.w	r3, r2, r5, lsl #2
 8002fc2:	1f07      	subs	r7, r0, #4
 8002fc4:	1f1c      	subs	r4, r3, #4
 8002fc6:	42b7      	cmp	r7, r6
 8002fc8:	f0c0 800a 	bcc.w	8002fe0 <forward_asinh+0xb4>
 8002fcc:	ed97 0a00 	vldr	s0, [r7]
 8002fd0:	1f3f      	subs	r7, r7, #4
 8002fd2:	f007 ff5d 	bl	800ae90 <asinhf>
 8002fd6:	ed84 0a00 	vstr	s0, [r4]
 8002fda:	1f24      	subs	r4, r4, #4
 8002fdc:	42b7      	cmp	r7, r6
 8002fde:	d2f5      	bcs.n	8002fcc <forward_asinh+0xa0>
 8002fe0:	b001      	add	sp, #4
 8002fe2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002fe4 <nl_func_atan_array_f32>:
 8002fe4:	b570      	push	{r4, r5, r6, lr}
 8002fe6:	688c      	ldr	r4, [r1, #8]
 8002fe8:	6880      	ldr	r0, [r0, #8]
 8002fea:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 8002fee:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8002ff2:	1f0d      	subs	r5, r1, #4
 8002ff4:	1f16      	subs	r6, r2, #4
 8002ff6:	42a5      	cmp	r5, r4
 8002ff8:	f0c0 800a 	bcc.w	8003010 <nl_func_atan_array_f32+0x2c>
 8002ffc:	ed95 0a00 	vldr	s0, [r5]
 8003000:	1f2d      	subs	r5, r5, #4
 8003002:	f007 ffad 	bl	800af60 <atanf>
 8003006:	ed86 0a00 	vstr	s0, [r6]
 800300a:	1f36      	subs	r6, r6, #4
 800300c:	42a5      	cmp	r5, r4
 800300e:	d2f5      	bcs.n	8002ffc <nl_func_atan_array_f32+0x18>
 8003010:	bd70      	pop	{r4, r5, r6, pc}
	...

08003014 <forward_atan>:
 8003014:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003016:	b081      	sub	sp, #4
 8003018:	6942      	ldr	r2, [r0, #20]
 800301a:	f04f 0501 	mov.w	r5, #1
 800301e:	8811      	ldrh	r1, [r2, #0]
 8003020:	2900      	cmp	r1, #0
 8003022:	bf1a      	itte	ne
 8003024:	6850      	ldrne	r0, [r2, #4]
 8003026:	1d00      	addne	r0, r0, #4
 8003028:	2004      	moveq	r0, #4
 800302a:	6800      	ldr	r0, [r0, #0]
 800302c:	2800      	cmp	r0, #0
 800302e:	bf14      	ite	ne
 8003030:	6803      	ldrne	r3, [r0, #0]
 8003032:	2300      	moveq	r3, #0
 8003034:	2902      	cmp	r1, #2
 8003036:	bfa6      	itte	ge
 8003038:	6850      	ldrge	r0, [r2, #4]
 800303a:	3010      	addge	r0, #16
 800303c:	2004      	movlt	r0, #4
 800303e:	6800      	ldr	r0, [r0, #0]
 8003040:	2800      	cmp	r0, #0
 8003042:	bf19      	ittee	ne
 8003044:	6800      	ldrne	r0, [r0, #0]
 8003046:	f100 0418 	addne.w	r4, r0, #24
 800304a:	2100      	moveq	r1, #0
 800304c:	f101 0418 	addeq.w	r4, r1, #24
 8003050:	f103 0108 	add.w	r1, r3, #8
 8003054:	680a      	ldr	r2, [r1, #0]
 8003056:	0a12      	lsrs	r2, r2, #8
 8003058:	d01f      	beq.n	800309a <forward_atan+0x86>
 800305a:	684e      	ldr	r6, [r1, #4]
 800305c:	4610      	mov	r0, r2
 800305e:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003062:	1f0f      	subs	r7, r1, #4
 8003064:	f010 0103 	ands.w	r1, r0, #3
 8003068:	d006      	beq.n	8003078 <forward_atan+0x64>
 800306a:	1e52      	subs	r2, r2, #1
 800306c:	f857 c904 	ldr.w	ip, [r7], #-4
 8003070:	1e49      	subs	r1, r1, #1
 8003072:	fb0c f505 	mul.w	r5, ip, r5
 8003076:	d1f8      	bne.n	800306a <forward_atan+0x56>
 8003078:	0880      	lsrs	r0, r0, #2
 800307a:	d00e      	beq.n	800309a <forward_atan+0x86>
 800307c:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003080:	3910      	subs	r1, #16
 8003082:	68ca      	ldr	r2, [r1, #12]
 8003084:	688e      	ldr	r6, [r1, #8]
 8003086:	684f      	ldr	r7, [r1, #4]
 8003088:	f851 c910 	ldr.w	ip, [r1], #-16
 800308c:	4372      	muls	r2, r6
 800308e:	437a      	muls	r2, r7
 8003090:	fb0c f202 	mul.w	r2, ip, r2
 8003094:	4355      	muls	r5, r2
 8003096:	1e40      	subs	r0, r0, #1
 8003098:	d1f3      	bne.n	8003082 <forward_atan+0x6e>
 800309a:	6998      	ldr	r0, [r3, #24]
 800309c:	6821      	ldr	r1, [r4, #0]
 800309e:	6886      	ldr	r6, [r0, #8]
 80030a0:	688a      	ldr	r2, [r1, #8]
 80030a2:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 80030a6:	eb02 0385 	add.w	r3, r2, r5, lsl #2
 80030aa:	1f07      	subs	r7, r0, #4
 80030ac:	1f1c      	subs	r4, r3, #4
 80030ae:	42b7      	cmp	r7, r6
 80030b0:	f0c0 800a 	bcc.w	80030c8 <forward_atan+0xb4>
 80030b4:	ed97 0a00 	vldr	s0, [r7]
 80030b8:	1f3f      	subs	r7, r7, #4
 80030ba:	f007 ff51 	bl	800af60 <atanf>
 80030be:	ed84 0a00 	vstr	s0, [r4]
 80030c2:	1f24      	subs	r4, r4, #4
 80030c4:	42b7      	cmp	r7, r6
 80030c6:	d2f5      	bcs.n	80030b4 <forward_atan+0xa0>
 80030c8:	b001      	add	sp, #4
 80030ca:	bdf0      	pop	{r4, r5, r6, r7, pc}

080030cc <nl_func_atanh_array_f32>:
 80030cc:	b570      	push	{r4, r5, r6, lr}
 80030ce:	688c      	ldr	r4, [r1, #8]
 80030d0:	6880      	ldr	r0, [r0, #8]
 80030d2:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 80030d6:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80030da:	1f0d      	subs	r5, r1, #4
 80030dc:	1f16      	subs	r6, r2, #4
 80030de:	42a5      	cmp	r5, r4
 80030e0:	f0c0 800a 	bcc.w	80030f8 <nl_func_atanh_array_f32+0x2c>
 80030e4:	ed95 0a00 	vldr	s0, [r5]
 80030e8:	1f2d      	subs	r5, r5, #4
 80030ea:	f008 fda1 	bl	800bc30 <atanhf>
 80030ee:	ed86 0a00 	vstr	s0, [r6]
 80030f2:	1f36      	subs	r6, r6, #4
 80030f4:	42a5      	cmp	r5, r4
 80030f6:	d2f5      	bcs.n	80030e4 <nl_func_atanh_array_f32+0x18>
 80030f8:	bd70      	pop	{r4, r5, r6, pc}
	...

080030fc <forward_atanh>:
 80030fc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80030fe:	b081      	sub	sp, #4
 8003100:	6942      	ldr	r2, [r0, #20]
 8003102:	f04f 0501 	mov.w	r5, #1
 8003106:	8811      	ldrh	r1, [r2, #0]
 8003108:	2900      	cmp	r1, #0
 800310a:	bf1a      	itte	ne
 800310c:	6850      	ldrne	r0, [r2, #4]
 800310e:	1d00      	addne	r0, r0, #4
 8003110:	2004      	moveq	r0, #4
 8003112:	6800      	ldr	r0, [r0, #0]
 8003114:	2800      	cmp	r0, #0
 8003116:	bf14      	ite	ne
 8003118:	6803      	ldrne	r3, [r0, #0]
 800311a:	2300      	moveq	r3, #0
 800311c:	2902      	cmp	r1, #2
 800311e:	bfa6      	itte	ge
 8003120:	6850      	ldrge	r0, [r2, #4]
 8003122:	3010      	addge	r0, #16
 8003124:	2004      	movlt	r0, #4
 8003126:	6800      	ldr	r0, [r0, #0]
 8003128:	2800      	cmp	r0, #0
 800312a:	bf19      	ittee	ne
 800312c:	6800      	ldrne	r0, [r0, #0]
 800312e:	f100 0418 	addne.w	r4, r0, #24
 8003132:	2100      	moveq	r1, #0
 8003134:	f101 0418 	addeq.w	r4, r1, #24
 8003138:	f103 0108 	add.w	r1, r3, #8
 800313c:	680a      	ldr	r2, [r1, #0]
 800313e:	0a12      	lsrs	r2, r2, #8
 8003140:	d01f      	beq.n	8003182 <forward_atanh+0x86>
 8003142:	684e      	ldr	r6, [r1, #4]
 8003144:	4610      	mov	r0, r2
 8003146:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 800314a:	1f0f      	subs	r7, r1, #4
 800314c:	f010 0103 	ands.w	r1, r0, #3
 8003150:	d006      	beq.n	8003160 <forward_atanh+0x64>
 8003152:	1e52      	subs	r2, r2, #1
 8003154:	f857 c904 	ldr.w	ip, [r7], #-4
 8003158:	1e49      	subs	r1, r1, #1
 800315a:	fb0c f505 	mul.w	r5, ip, r5
 800315e:	d1f8      	bne.n	8003152 <forward_atanh+0x56>
 8003160:	0880      	lsrs	r0, r0, #2
 8003162:	d00e      	beq.n	8003182 <forward_atanh+0x86>
 8003164:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003168:	3910      	subs	r1, #16
 800316a:	68ca      	ldr	r2, [r1, #12]
 800316c:	688e      	ldr	r6, [r1, #8]
 800316e:	684f      	ldr	r7, [r1, #4]
 8003170:	f851 c910 	ldr.w	ip, [r1], #-16
 8003174:	4372      	muls	r2, r6
 8003176:	437a      	muls	r2, r7
 8003178:	fb0c f202 	mul.w	r2, ip, r2
 800317c:	4355      	muls	r5, r2
 800317e:	1e40      	subs	r0, r0, #1
 8003180:	d1f3      	bne.n	800316a <forward_atanh+0x6e>
 8003182:	6998      	ldr	r0, [r3, #24]
 8003184:	6821      	ldr	r1, [r4, #0]
 8003186:	6886      	ldr	r6, [r0, #8]
 8003188:	688a      	ldr	r2, [r1, #8]
 800318a:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 800318e:	eb02 0385 	add.w	r3, r2, r5, lsl #2
 8003192:	1f07      	subs	r7, r0, #4
 8003194:	1f1c      	subs	r4, r3, #4
 8003196:	42b7      	cmp	r7, r6
 8003198:	f0c0 800a 	bcc.w	80031b0 <forward_atanh+0xb4>
 800319c:	ed97 0a00 	vldr	s0, [r7]
 80031a0:	1f3f      	subs	r7, r7, #4
 80031a2:	f008 fd45 	bl	800bc30 <atanhf>
 80031a6:	ed84 0a00 	vstr	s0, [r4]
 80031aa:	1f24      	subs	r4, r4, #4
 80031ac:	42b7      	cmp	r7, r6
 80031ae:	d2f5      	bcs.n	800319c <forward_atanh+0xa0>
 80031b0:	b001      	add	sp, #4
 80031b2:	bdf0      	pop	{r4, r5, r6, r7, pc}

080031b4 <nl_func_cos_array_f32>:
 80031b4:	b570      	push	{r4, r5, r6, lr}
 80031b6:	688c      	ldr	r4, [r1, #8]
 80031b8:	6880      	ldr	r0, [r0, #8]
 80031ba:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 80031be:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80031c2:	1f0d      	subs	r5, r1, #4
 80031c4:	1f16      	subs	r6, r2, #4
 80031c6:	42a5      	cmp	r5, r4
 80031c8:	f0c0 800a 	bcc.w	80031e0 <nl_func_cos_array_f32+0x2c>
 80031cc:	ed95 0a00 	vldr	s0, [r5]
 80031d0:	1f2d      	subs	r5, r5, #4
 80031d2:	f007 ffd9 	bl	800b188 <cosf>
 80031d6:	ed86 0a00 	vstr	s0, [r6]
 80031da:	1f36      	subs	r6, r6, #4
 80031dc:	42a5      	cmp	r5, r4
 80031de:	d2f5      	bcs.n	80031cc <nl_func_cos_array_f32+0x18>
 80031e0:	bd70      	pop	{r4, r5, r6, pc}
	...

080031e4 <forward_cos>:
 80031e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80031e6:	b081      	sub	sp, #4
 80031e8:	6942      	ldr	r2, [r0, #20]
 80031ea:	f04f 0501 	mov.w	r5, #1
 80031ee:	8811      	ldrh	r1, [r2, #0]
 80031f0:	2900      	cmp	r1, #0
 80031f2:	bf1a      	itte	ne
 80031f4:	6850      	ldrne	r0, [r2, #4]
 80031f6:	1d00      	addne	r0, r0, #4
 80031f8:	2004      	moveq	r0, #4
 80031fa:	6800      	ldr	r0, [r0, #0]
 80031fc:	2800      	cmp	r0, #0
 80031fe:	bf14      	ite	ne
 8003200:	6803      	ldrne	r3, [r0, #0]
 8003202:	2300      	moveq	r3, #0
 8003204:	2902      	cmp	r1, #2
 8003206:	bfa6      	itte	ge
 8003208:	6850      	ldrge	r0, [r2, #4]
 800320a:	3010      	addge	r0, #16
 800320c:	2004      	movlt	r0, #4
 800320e:	6800      	ldr	r0, [r0, #0]
 8003210:	2800      	cmp	r0, #0
 8003212:	bf19      	ittee	ne
 8003214:	6800      	ldrne	r0, [r0, #0]
 8003216:	f100 0418 	addne.w	r4, r0, #24
 800321a:	2100      	moveq	r1, #0
 800321c:	f101 0418 	addeq.w	r4, r1, #24
 8003220:	f103 0108 	add.w	r1, r3, #8
 8003224:	680a      	ldr	r2, [r1, #0]
 8003226:	0a12      	lsrs	r2, r2, #8
 8003228:	d01f      	beq.n	800326a <forward_cos+0x86>
 800322a:	684e      	ldr	r6, [r1, #4]
 800322c:	4610      	mov	r0, r2
 800322e:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003232:	1f0f      	subs	r7, r1, #4
 8003234:	f010 0103 	ands.w	r1, r0, #3
 8003238:	d006      	beq.n	8003248 <forward_cos+0x64>
 800323a:	1e52      	subs	r2, r2, #1
 800323c:	f857 c904 	ldr.w	ip, [r7], #-4
 8003240:	1e49      	subs	r1, r1, #1
 8003242:	fb0c f505 	mul.w	r5, ip, r5
 8003246:	d1f8      	bne.n	800323a <forward_cos+0x56>
 8003248:	0880      	lsrs	r0, r0, #2
 800324a:	d00e      	beq.n	800326a <forward_cos+0x86>
 800324c:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003250:	3910      	subs	r1, #16
 8003252:	68ca      	ldr	r2, [r1, #12]
 8003254:	688e      	ldr	r6, [r1, #8]
 8003256:	684f      	ldr	r7, [r1, #4]
 8003258:	f851 c910 	ldr.w	ip, [r1], #-16
 800325c:	4372      	muls	r2, r6
 800325e:	437a      	muls	r2, r7
 8003260:	fb0c f202 	mul.w	r2, ip, r2
 8003264:	4355      	muls	r5, r2
 8003266:	1e40      	subs	r0, r0, #1
 8003268:	d1f3      	bne.n	8003252 <forward_cos+0x6e>
 800326a:	6998      	ldr	r0, [r3, #24]
 800326c:	6821      	ldr	r1, [r4, #0]
 800326e:	6886      	ldr	r6, [r0, #8]
 8003270:	688a      	ldr	r2, [r1, #8]
 8003272:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 8003276:	eb02 0385 	add.w	r3, r2, r5, lsl #2
 800327a:	1f07      	subs	r7, r0, #4
 800327c:	1f1c      	subs	r4, r3, #4
 800327e:	42b7      	cmp	r7, r6
 8003280:	f0c0 800a 	bcc.w	8003298 <forward_cos+0xb4>
 8003284:	ed97 0a00 	vldr	s0, [r7]
 8003288:	1f3f      	subs	r7, r7, #4
 800328a:	f007 ff7d 	bl	800b188 <cosf>
 800328e:	ed84 0a00 	vstr	s0, [r4]
 8003292:	1f24      	subs	r4, r4, #4
 8003294:	42b7      	cmp	r7, r6
 8003296:	d2f5      	bcs.n	8003284 <forward_cos+0xa0>
 8003298:	b001      	add	sp, #4
 800329a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800329c <nl_func_cosh_array_f32>:
 800329c:	b570      	push	{r4, r5, r6, lr}
 800329e:	688c      	ldr	r4, [r1, #8]
 80032a0:	6880      	ldr	r0, [r0, #8]
 80032a2:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 80032a6:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80032aa:	1f0d      	subs	r5, r1, #4
 80032ac:	1f16      	subs	r6, r2, #4
 80032ae:	42a5      	cmp	r5, r4
 80032b0:	f0c0 800a 	bcc.w	80032c8 <nl_func_cosh_array_f32+0x2c>
 80032b4:	ed95 0a00 	vldr	s0, [r5]
 80032b8:	1f2d      	subs	r5, r5, #4
 80032ba:	f008 fd2d 	bl	800bd18 <coshf>
 80032be:	ed86 0a00 	vstr	s0, [r6]
 80032c2:	1f36      	subs	r6, r6, #4
 80032c4:	42a5      	cmp	r5, r4
 80032c6:	d2f5      	bcs.n	80032b4 <nl_func_cosh_array_f32+0x18>
 80032c8:	bd70      	pop	{r4, r5, r6, pc}
	...

080032cc <forward_cosh>:
 80032cc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80032ce:	b081      	sub	sp, #4
 80032d0:	6942      	ldr	r2, [r0, #20]
 80032d2:	f04f 0501 	mov.w	r5, #1
 80032d6:	8811      	ldrh	r1, [r2, #0]
 80032d8:	2900      	cmp	r1, #0
 80032da:	bf1a      	itte	ne
 80032dc:	6850      	ldrne	r0, [r2, #4]
 80032de:	1d00      	addne	r0, r0, #4
 80032e0:	2004      	moveq	r0, #4
 80032e2:	6800      	ldr	r0, [r0, #0]
 80032e4:	2800      	cmp	r0, #0
 80032e6:	bf14      	ite	ne
 80032e8:	6803      	ldrne	r3, [r0, #0]
 80032ea:	2300      	moveq	r3, #0
 80032ec:	2902      	cmp	r1, #2
 80032ee:	bfa6      	itte	ge
 80032f0:	6850      	ldrge	r0, [r2, #4]
 80032f2:	3010      	addge	r0, #16
 80032f4:	2004      	movlt	r0, #4
 80032f6:	6800      	ldr	r0, [r0, #0]
 80032f8:	2800      	cmp	r0, #0
 80032fa:	bf19      	ittee	ne
 80032fc:	6800      	ldrne	r0, [r0, #0]
 80032fe:	f100 0418 	addne.w	r4, r0, #24
 8003302:	2100      	moveq	r1, #0
 8003304:	f101 0418 	addeq.w	r4, r1, #24
 8003308:	f103 0108 	add.w	r1, r3, #8
 800330c:	680a      	ldr	r2, [r1, #0]
 800330e:	0a12      	lsrs	r2, r2, #8
 8003310:	d01f      	beq.n	8003352 <forward_cosh+0x86>
 8003312:	684e      	ldr	r6, [r1, #4]
 8003314:	4610      	mov	r0, r2
 8003316:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 800331a:	1f0f      	subs	r7, r1, #4
 800331c:	f010 0103 	ands.w	r1, r0, #3
 8003320:	d006      	beq.n	8003330 <forward_cosh+0x64>
 8003322:	1e52      	subs	r2, r2, #1
 8003324:	f857 c904 	ldr.w	ip, [r7], #-4
 8003328:	1e49      	subs	r1, r1, #1
 800332a:	fb0c f505 	mul.w	r5, ip, r5
 800332e:	d1f8      	bne.n	8003322 <forward_cosh+0x56>
 8003330:	0880      	lsrs	r0, r0, #2
 8003332:	d00e      	beq.n	8003352 <forward_cosh+0x86>
 8003334:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003338:	3910      	subs	r1, #16
 800333a:	68ca      	ldr	r2, [r1, #12]
 800333c:	688e      	ldr	r6, [r1, #8]
 800333e:	684f      	ldr	r7, [r1, #4]
 8003340:	f851 c910 	ldr.w	ip, [r1], #-16
 8003344:	4372      	muls	r2, r6
 8003346:	437a      	muls	r2, r7
 8003348:	fb0c f202 	mul.w	r2, ip, r2
 800334c:	4355      	muls	r5, r2
 800334e:	1e40      	subs	r0, r0, #1
 8003350:	d1f3      	bne.n	800333a <forward_cosh+0x6e>
 8003352:	6998      	ldr	r0, [r3, #24]
 8003354:	6821      	ldr	r1, [r4, #0]
 8003356:	6886      	ldr	r6, [r0, #8]
 8003358:	688a      	ldr	r2, [r1, #8]
 800335a:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 800335e:	eb02 0385 	add.w	r3, r2, r5, lsl #2
 8003362:	1f07      	subs	r7, r0, #4
 8003364:	1f1c      	subs	r4, r3, #4
 8003366:	42b7      	cmp	r7, r6
 8003368:	f0c0 800a 	bcc.w	8003380 <forward_cosh+0xb4>
 800336c:	ed97 0a00 	vldr	s0, [r7]
 8003370:	1f3f      	subs	r7, r7, #4
 8003372:	f008 fcd1 	bl	800bd18 <coshf>
 8003376:	ed84 0a00 	vstr	s0, [r4]
 800337a:	1f24      	subs	r4, r4, #4
 800337c:	42b7      	cmp	r7, r6
 800337e:	d2f5      	bcs.n	800336c <forward_cosh+0xa0>
 8003380:	b001      	add	sp, #4
 8003382:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003384 <nl_func_erf_array_f32>:
 8003384:	b570      	push	{r4, r5, r6, lr}
 8003386:	688c      	ldr	r4, [r1, #8]
 8003388:	6880      	ldr	r0, [r0, #8]
 800338a:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 800338e:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8003392:	1f0d      	subs	r5, r1, #4
 8003394:	1f16      	subs	r6, r2, #4
 8003396:	42a5      	cmp	r5, r4
 8003398:	f0c0 800a 	bcc.w	80033b0 <nl_func_erf_array_f32+0x2c>
 800339c:	ed95 0a00 	vldr	s0, [r5]
 80033a0:	1f2d      	subs	r5, r5, #4
 80033a2:	f007 ff31 	bl	800b208 <erff>
 80033a6:	ed86 0a00 	vstr	s0, [r6]
 80033aa:	1f36      	subs	r6, r6, #4
 80033ac:	42a5      	cmp	r5, r4
 80033ae:	d2f5      	bcs.n	800339c <nl_func_erf_array_f32+0x18>
 80033b0:	bd70      	pop	{r4, r5, r6, pc}
	...

080033b4 <forward_erf>:
 80033b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80033b6:	b081      	sub	sp, #4
 80033b8:	6942      	ldr	r2, [r0, #20]
 80033ba:	f04f 0501 	mov.w	r5, #1
 80033be:	8811      	ldrh	r1, [r2, #0]
 80033c0:	2900      	cmp	r1, #0
 80033c2:	bf1a      	itte	ne
 80033c4:	6850      	ldrne	r0, [r2, #4]
 80033c6:	1d00      	addne	r0, r0, #4
 80033c8:	2004      	moveq	r0, #4
 80033ca:	6800      	ldr	r0, [r0, #0]
 80033cc:	2800      	cmp	r0, #0
 80033ce:	bf14      	ite	ne
 80033d0:	6803      	ldrne	r3, [r0, #0]
 80033d2:	2300      	moveq	r3, #0
 80033d4:	2902      	cmp	r1, #2
 80033d6:	bfa6      	itte	ge
 80033d8:	6850      	ldrge	r0, [r2, #4]
 80033da:	3010      	addge	r0, #16
 80033dc:	2004      	movlt	r0, #4
 80033de:	6800      	ldr	r0, [r0, #0]
 80033e0:	2800      	cmp	r0, #0
 80033e2:	bf19      	ittee	ne
 80033e4:	6800      	ldrne	r0, [r0, #0]
 80033e6:	f100 0418 	addne.w	r4, r0, #24
 80033ea:	2100      	moveq	r1, #0
 80033ec:	f101 0418 	addeq.w	r4, r1, #24
 80033f0:	f103 0108 	add.w	r1, r3, #8
 80033f4:	680a      	ldr	r2, [r1, #0]
 80033f6:	0a12      	lsrs	r2, r2, #8
 80033f8:	d01f      	beq.n	800343a <forward_erf+0x86>
 80033fa:	684e      	ldr	r6, [r1, #4]
 80033fc:	4610      	mov	r0, r2
 80033fe:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003402:	1f0f      	subs	r7, r1, #4
 8003404:	f010 0103 	ands.w	r1, r0, #3
 8003408:	d006      	beq.n	8003418 <forward_erf+0x64>
 800340a:	1e52      	subs	r2, r2, #1
 800340c:	f857 c904 	ldr.w	ip, [r7], #-4
 8003410:	1e49      	subs	r1, r1, #1
 8003412:	fb0c f505 	mul.w	r5, ip, r5
 8003416:	d1f8      	bne.n	800340a <forward_erf+0x56>
 8003418:	0880      	lsrs	r0, r0, #2
 800341a:	d00e      	beq.n	800343a <forward_erf+0x86>
 800341c:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003420:	3910      	subs	r1, #16
 8003422:	68ca      	ldr	r2, [r1, #12]
 8003424:	688e      	ldr	r6, [r1, #8]
 8003426:	684f      	ldr	r7, [r1, #4]
 8003428:	f851 c910 	ldr.w	ip, [r1], #-16
 800342c:	4372      	muls	r2, r6
 800342e:	437a      	muls	r2, r7
 8003430:	fb0c f202 	mul.w	r2, ip, r2
 8003434:	4355      	muls	r5, r2
 8003436:	1e40      	subs	r0, r0, #1
 8003438:	d1f3      	bne.n	8003422 <forward_erf+0x6e>
 800343a:	6998      	ldr	r0, [r3, #24]
 800343c:	6821      	ldr	r1, [r4, #0]
 800343e:	6886      	ldr	r6, [r0, #8]
 8003440:	688a      	ldr	r2, [r1, #8]
 8003442:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 8003446:	eb02 0385 	add.w	r3, r2, r5, lsl #2
 800344a:	1f07      	subs	r7, r0, #4
 800344c:	1f1c      	subs	r4, r3, #4
 800344e:	42b7      	cmp	r7, r6
 8003450:	f0c0 800a 	bcc.w	8003468 <forward_erf+0xb4>
 8003454:	ed97 0a00 	vldr	s0, [r7]
 8003458:	1f3f      	subs	r7, r7, #4
 800345a:	f007 fed5 	bl	800b208 <erff>
 800345e:	ed84 0a00 	vstr	s0, [r4]
 8003462:	1f24      	subs	r4, r4, #4
 8003464:	42b7      	cmp	r7, r6
 8003466:	d2f5      	bcs.n	8003454 <forward_erf+0xa0>
 8003468:	b001      	add	sp, #4
 800346a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800346c <nl_func_log_array_f32>:
 800346c:	b570      	push	{r4, r5, r6, lr}
 800346e:	688c      	ldr	r4, [r1, #8]
 8003470:	6880      	ldr	r0, [r0, #8]
 8003472:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 8003476:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800347a:	1f0d      	subs	r5, r1, #4
 800347c:	1f16      	subs	r6, r2, #4
 800347e:	42a5      	cmp	r5, r4
 8003480:	f0c0 800a 	bcc.w	8003498 <nl_func_log_array_f32+0x2c>
 8003484:	ed95 0a00 	vldr	s0, [r5]
 8003488:	1f2d      	subs	r5, r5, #4
 800348a:	f008 fd7b 	bl	800bf84 <logf>
 800348e:	ed86 0a00 	vstr	s0, [r6]
 8003492:	1f36      	subs	r6, r6, #4
 8003494:	42a5      	cmp	r5, r4
 8003496:	d2f5      	bcs.n	8003484 <nl_func_log_array_f32+0x18>
 8003498:	bd70      	pop	{r4, r5, r6, pc}
	...

0800349c <forward_log>:
 800349c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800349e:	b081      	sub	sp, #4
 80034a0:	6942      	ldr	r2, [r0, #20]
 80034a2:	f04f 0501 	mov.w	r5, #1
 80034a6:	8811      	ldrh	r1, [r2, #0]
 80034a8:	2900      	cmp	r1, #0
 80034aa:	bf1a      	itte	ne
 80034ac:	6850      	ldrne	r0, [r2, #4]
 80034ae:	1d00      	addne	r0, r0, #4
 80034b0:	2004      	moveq	r0, #4
 80034b2:	6800      	ldr	r0, [r0, #0]
 80034b4:	2800      	cmp	r0, #0
 80034b6:	bf14      	ite	ne
 80034b8:	6803      	ldrne	r3, [r0, #0]
 80034ba:	2300      	moveq	r3, #0
 80034bc:	2902      	cmp	r1, #2
 80034be:	bfa6      	itte	ge
 80034c0:	6850      	ldrge	r0, [r2, #4]
 80034c2:	3010      	addge	r0, #16
 80034c4:	2004      	movlt	r0, #4
 80034c6:	6800      	ldr	r0, [r0, #0]
 80034c8:	2800      	cmp	r0, #0
 80034ca:	bf19      	ittee	ne
 80034cc:	6800      	ldrne	r0, [r0, #0]
 80034ce:	f100 0418 	addne.w	r4, r0, #24
 80034d2:	2100      	moveq	r1, #0
 80034d4:	f101 0418 	addeq.w	r4, r1, #24
 80034d8:	f103 0108 	add.w	r1, r3, #8
 80034dc:	680a      	ldr	r2, [r1, #0]
 80034de:	0a12      	lsrs	r2, r2, #8
 80034e0:	d01f      	beq.n	8003522 <forward_log+0x86>
 80034e2:	684e      	ldr	r6, [r1, #4]
 80034e4:	4610      	mov	r0, r2
 80034e6:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 80034ea:	1f0f      	subs	r7, r1, #4
 80034ec:	f010 0103 	ands.w	r1, r0, #3
 80034f0:	d006      	beq.n	8003500 <forward_log+0x64>
 80034f2:	1e52      	subs	r2, r2, #1
 80034f4:	f857 c904 	ldr.w	ip, [r7], #-4
 80034f8:	1e49      	subs	r1, r1, #1
 80034fa:	fb0c f505 	mul.w	r5, ip, r5
 80034fe:	d1f8      	bne.n	80034f2 <forward_log+0x56>
 8003500:	0880      	lsrs	r0, r0, #2
 8003502:	d00e      	beq.n	8003522 <forward_log+0x86>
 8003504:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003508:	3910      	subs	r1, #16
 800350a:	68ca      	ldr	r2, [r1, #12]
 800350c:	688e      	ldr	r6, [r1, #8]
 800350e:	684f      	ldr	r7, [r1, #4]
 8003510:	f851 c910 	ldr.w	ip, [r1], #-16
 8003514:	4372      	muls	r2, r6
 8003516:	437a      	muls	r2, r7
 8003518:	fb0c f202 	mul.w	r2, ip, r2
 800351c:	4355      	muls	r5, r2
 800351e:	1e40      	subs	r0, r0, #1
 8003520:	d1f3      	bne.n	800350a <forward_log+0x6e>
 8003522:	6998      	ldr	r0, [r3, #24]
 8003524:	6821      	ldr	r1, [r4, #0]
 8003526:	6886      	ldr	r6, [r0, #8]
 8003528:	688a      	ldr	r2, [r1, #8]
 800352a:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 800352e:	eb02 0385 	add.w	r3, r2, r5, lsl #2
 8003532:	1f07      	subs	r7, r0, #4
 8003534:	1f1c      	subs	r4, r3, #4
 8003536:	42b7      	cmp	r7, r6
 8003538:	f0c0 800a 	bcc.w	8003550 <forward_log+0xb4>
 800353c:	ed97 0a00 	vldr	s0, [r7]
 8003540:	1f3f      	subs	r7, r7, #4
 8003542:	f008 fd1f 	bl	800bf84 <logf>
 8003546:	ed84 0a00 	vstr	s0, [r4]
 800354a:	1f24      	subs	r4, r4, #4
 800354c:	42b7      	cmp	r7, r6
 800354e:	d2f5      	bcs.n	800353c <forward_log+0xa0>
 8003550:	b001      	add	sp, #4
 8003552:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003554 <nl_func_rsqrt_array_f32>:
 8003554:	b570      	push	{r4, r5, r6, lr}
 8003556:	460c      	mov	r4, r1
 8003558:	6880      	ldr	r0, [r0, #8]
 800355a:	68a1      	ldr	r1, [r4, #8]
 800355c:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 8003560:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8003564:	1f1d      	subs	r5, r3, #4
 8003566:	1f16      	subs	r6, r2, #4
 8003568:	428d      	cmp	r5, r1
 800356a:	d30e      	bcc.n	800358a <nl_func_rsqrt_array_f32+0x36>
 800356c:	ed95 0a00 	vldr	s0, [r5]
 8003570:	1f2d      	subs	r5, r5, #4
 8003572:	f003 fd21 	bl	8006fb8 <ai_math_sqrt>
 8003576:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 800357a:	eec0 0a80 	vdiv.f32	s1, s1, s0
 800357e:	edc6 0a00 	vstr	s1, [r6]
 8003582:	68a0      	ldr	r0, [r4, #8]
 8003584:	1f36      	subs	r6, r6, #4
 8003586:	4285      	cmp	r5, r0
 8003588:	d2f0      	bcs.n	800356c <nl_func_rsqrt_array_f32+0x18>
 800358a:	bd70      	pop	{r4, r5, r6, pc}

0800358c <forward_rsqrt>:
 800358c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800358e:	b081      	sub	sp, #4
 8003590:	6942      	ldr	r2, [r0, #20]
 8003592:	f04f 0501 	mov.w	r5, #1
 8003596:	8811      	ldrh	r1, [r2, #0]
 8003598:	2900      	cmp	r1, #0
 800359a:	bf1a      	itte	ne
 800359c:	6850      	ldrne	r0, [r2, #4]
 800359e:	1d00      	addne	r0, r0, #4
 80035a0:	2004      	moveq	r0, #4
 80035a2:	6800      	ldr	r0, [r0, #0]
 80035a4:	2800      	cmp	r0, #0
 80035a6:	bf14      	ite	ne
 80035a8:	6803      	ldrne	r3, [r0, #0]
 80035aa:	2300      	moveq	r3, #0
 80035ac:	2902      	cmp	r1, #2
 80035ae:	bfa6      	itte	ge
 80035b0:	6850      	ldrge	r0, [r2, #4]
 80035b2:	3010      	addge	r0, #16
 80035b4:	2004      	movlt	r0, #4
 80035b6:	6800      	ldr	r0, [r0, #0]
 80035b8:	2800      	cmp	r0, #0
 80035ba:	bf19      	ittee	ne
 80035bc:	6800      	ldrne	r0, [r0, #0]
 80035be:	f100 0418 	addne.w	r4, r0, #24
 80035c2:	2100      	moveq	r1, #0
 80035c4:	f101 0418 	addeq.w	r4, r1, #24
 80035c8:	f103 0108 	add.w	r1, r3, #8
 80035cc:	680a      	ldr	r2, [r1, #0]
 80035ce:	0a12      	lsrs	r2, r2, #8
 80035d0:	d01f      	beq.n	8003612 <forward_rsqrt+0x86>
 80035d2:	684e      	ldr	r6, [r1, #4]
 80035d4:	4610      	mov	r0, r2
 80035d6:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 80035da:	1f0f      	subs	r7, r1, #4
 80035dc:	f010 0103 	ands.w	r1, r0, #3
 80035e0:	d006      	beq.n	80035f0 <forward_rsqrt+0x64>
 80035e2:	1e52      	subs	r2, r2, #1
 80035e4:	f857 c904 	ldr.w	ip, [r7], #-4
 80035e8:	1e49      	subs	r1, r1, #1
 80035ea:	fb0c f505 	mul.w	r5, ip, r5
 80035ee:	d1f8      	bne.n	80035e2 <forward_rsqrt+0x56>
 80035f0:	0880      	lsrs	r0, r0, #2
 80035f2:	d00e      	beq.n	8003612 <forward_rsqrt+0x86>
 80035f4:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 80035f8:	3910      	subs	r1, #16
 80035fa:	68ca      	ldr	r2, [r1, #12]
 80035fc:	688e      	ldr	r6, [r1, #8]
 80035fe:	684f      	ldr	r7, [r1, #4]
 8003600:	f851 c910 	ldr.w	ip, [r1], #-16
 8003604:	4372      	muls	r2, r6
 8003606:	437a      	muls	r2, r7
 8003608:	fb0c f202 	mul.w	r2, ip, r2
 800360c:	4355      	muls	r5, r2
 800360e:	1e40      	subs	r0, r0, #1
 8003610:	d1f3      	bne.n	80035fa <forward_rsqrt+0x6e>
 8003612:	699e      	ldr	r6, [r3, #24]
 8003614:	6822      	ldr	r2, [r4, #0]
 8003616:	68b0      	ldr	r0, [r6, #8]
 8003618:	6893      	ldr	r3, [r2, #8]
 800361a:	eb00 0185 	add.w	r1, r0, r5, lsl #2
 800361e:	eb03 0485 	add.w	r4, r3, r5, lsl #2
 8003622:	1f0f      	subs	r7, r1, #4
 8003624:	1f24      	subs	r4, r4, #4
 8003626:	4287      	cmp	r7, r0
 8003628:	f0c0 800f 	bcc.w	800364a <forward_rsqrt+0xbe>
 800362c:	ed97 0a00 	vldr	s0, [r7]
 8003630:	1f3f      	subs	r7, r7, #4
 8003632:	f003 fcc1 	bl	8006fb8 <ai_math_sqrt>
 8003636:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 800363a:	eec0 0a80 	vdiv.f32	s1, s1, s0
 800363e:	edc4 0a00 	vstr	s1, [r4]
 8003642:	68b0      	ldr	r0, [r6, #8]
 8003644:	1f24      	subs	r4, r4, #4
 8003646:	4287      	cmp	r7, r0
 8003648:	d2f0      	bcs.n	800362c <forward_rsqrt+0xa0>
 800364a:	b001      	add	sp, #4
 800364c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003650 <nl_func_sin_array_f32>:
 8003650:	b570      	push	{r4, r5, r6, lr}
 8003652:	688c      	ldr	r4, [r1, #8]
 8003654:	6880      	ldr	r0, [r0, #8]
 8003656:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 800365a:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800365e:	1f0d      	subs	r5, r1, #4
 8003660:	1f16      	subs	r6, r2, #4
 8003662:	42a5      	cmp	r5, r4
 8003664:	f0c0 800a 	bcc.w	800367c <nl_func_sin_array_f32+0x2c>
 8003668:	ed95 0a00 	vldr	s0, [r5]
 800366c:	1f2d      	subs	r5, r5, #4
 800366e:	f008 f923 	bl	800b8b8 <sinf>
 8003672:	ed86 0a00 	vstr	s0, [r6]
 8003676:	1f36      	subs	r6, r6, #4
 8003678:	42a5      	cmp	r5, r4
 800367a:	d2f5      	bcs.n	8003668 <nl_func_sin_array_f32+0x18>
 800367c:	bd70      	pop	{r4, r5, r6, pc}
	...

08003680 <forward_sin>:
 8003680:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003682:	b081      	sub	sp, #4
 8003684:	6942      	ldr	r2, [r0, #20]
 8003686:	f04f 0501 	mov.w	r5, #1
 800368a:	8811      	ldrh	r1, [r2, #0]
 800368c:	2900      	cmp	r1, #0
 800368e:	bf1a      	itte	ne
 8003690:	6850      	ldrne	r0, [r2, #4]
 8003692:	1d00      	addne	r0, r0, #4
 8003694:	2004      	moveq	r0, #4
 8003696:	6800      	ldr	r0, [r0, #0]
 8003698:	2800      	cmp	r0, #0
 800369a:	bf14      	ite	ne
 800369c:	6803      	ldrne	r3, [r0, #0]
 800369e:	2300      	moveq	r3, #0
 80036a0:	2902      	cmp	r1, #2
 80036a2:	bfa6      	itte	ge
 80036a4:	6850      	ldrge	r0, [r2, #4]
 80036a6:	3010      	addge	r0, #16
 80036a8:	2004      	movlt	r0, #4
 80036aa:	6800      	ldr	r0, [r0, #0]
 80036ac:	2800      	cmp	r0, #0
 80036ae:	bf19      	ittee	ne
 80036b0:	6800      	ldrne	r0, [r0, #0]
 80036b2:	f100 0418 	addne.w	r4, r0, #24
 80036b6:	2100      	moveq	r1, #0
 80036b8:	f101 0418 	addeq.w	r4, r1, #24
 80036bc:	f103 0108 	add.w	r1, r3, #8
 80036c0:	680a      	ldr	r2, [r1, #0]
 80036c2:	0a12      	lsrs	r2, r2, #8
 80036c4:	d01f      	beq.n	8003706 <forward_sin+0x86>
 80036c6:	684e      	ldr	r6, [r1, #4]
 80036c8:	4610      	mov	r0, r2
 80036ca:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 80036ce:	1f0f      	subs	r7, r1, #4
 80036d0:	f010 0103 	ands.w	r1, r0, #3
 80036d4:	d006      	beq.n	80036e4 <forward_sin+0x64>
 80036d6:	1e52      	subs	r2, r2, #1
 80036d8:	f857 c904 	ldr.w	ip, [r7], #-4
 80036dc:	1e49      	subs	r1, r1, #1
 80036de:	fb0c f505 	mul.w	r5, ip, r5
 80036e2:	d1f8      	bne.n	80036d6 <forward_sin+0x56>
 80036e4:	0880      	lsrs	r0, r0, #2
 80036e6:	d00e      	beq.n	8003706 <forward_sin+0x86>
 80036e8:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 80036ec:	3910      	subs	r1, #16
 80036ee:	68ca      	ldr	r2, [r1, #12]
 80036f0:	688e      	ldr	r6, [r1, #8]
 80036f2:	684f      	ldr	r7, [r1, #4]
 80036f4:	f851 c910 	ldr.w	ip, [r1], #-16
 80036f8:	4372      	muls	r2, r6
 80036fa:	437a      	muls	r2, r7
 80036fc:	fb0c f202 	mul.w	r2, ip, r2
 8003700:	4355      	muls	r5, r2
 8003702:	1e40      	subs	r0, r0, #1
 8003704:	d1f3      	bne.n	80036ee <forward_sin+0x6e>
 8003706:	6998      	ldr	r0, [r3, #24]
 8003708:	6821      	ldr	r1, [r4, #0]
 800370a:	6886      	ldr	r6, [r0, #8]
 800370c:	688a      	ldr	r2, [r1, #8]
 800370e:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 8003712:	eb02 0385 	add.w	r3, r2, r5, lsl #2
 8003716:	1f07      	subs	r7, r0, #4
 8003718:	1f1c      	subs	r4, r3, #4
 800371a:	42b7      	cmp	r7, r6
 800371c:	f0c0 800a 	bcc.w	8003734 <forward_sin+0xb4>
 8003720:	ed97 0a00 	vldr	s0, [r7]
 8003724:	1f3f      	subs	r7, r7, #4
 8003726:	f008 f8c7 	bl	800b8b8 <sinf>
 800372a:	ed84 0a00 	vstr	s0, [r4]
 800372e:	1f24      	subs	r4, r4, #4
 8003730:	42b7      	cmp	r7, r6
 8003732:	d2f5      	bcs.n	8003720 <forward_sin+0xa0>
 8003734:	b001      	add	sp, #4
 8003736:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003738 <nl_func_sinh_array_f32>:
 8003738:	b570      	push	{r4, r5, r6, lr}
 800373a:	688c      	ldr	r4, [r1, #8]
 800373c:	6880      	ldr	r0, [r0, #8]
 800373e:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 8003742:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8003746:	1f0d      	subs	r5, r1, #4
 8003748:	1f16      	subs	r6, r2, #4
 800374a:	42a5      	cmp	r5, r4
 800374c:	f0c0 800a 	bcc.w	8003764 <nl_func_sinh_array_f32+0x2c>
 8003750:	ed95 0a00 	vldr	s0, [r5]
 8003754:	1f2d      	subs	r5, r5, #4
 8003756:	f008 fdef 	bl	800c338 <sinhf>
 800375a:	ed86 0a00 	vstr	s0, [r6]
 800375e:	1f36      	subs	r6, r6, #4
 8003760:	42a5      	cmp	r5, r4
 8003762:	d2f5      	bcs.n	8003750 <nl_func_sinh_array_f32+0x18>
 8003764:	bd70      	pop	{r4, r5, r6, pc}
	...

08003768 <forward_sinh>:
 8003768:	b5f0      	push	{r4, r5, r6, r7, lr}
 800376a:	b081      	sub	sp, #4
 800376c:	6942      	ldr	r2, [r0, #20]
 800376e:	f04f 0501 	mov.w	r5, #1
 8003772:	8811      	ldrh	r1, [r2, #0]
 8003774:	2900      	cmp	r1, #0
 8003776:	bf1a      	itte	ne
 8003778:	6850      	ldrne	r0, [r2, #4]
 800377a:	1d00      	addne	r0, r0, #4
 800377c:	2004      	moveq	r0, #4
 800377e:	6800      	ldr	r0, [r0, #0]
 8003780:	2800      	cmp	r0, #0
 8003782:	bf14      	ite	ne
 8003784:	6803      	ldrne	r3, [r0, #0]
 8003786:	2300      	moveq	r3, #0
 8003788:	2902      	cmp	r1, #2
 800378a:	bfa6      	itte	ge
 800378c:	6850      	ldrge	r0, [r2, #4]
 800378e:	3010      	addge	r0, #16
 8003790:	2004      	movlt	r0, #4
 8003792:	6800      	ldr	r0, [r0, #0]
 8003794:	2800      	cmp	r0, #0
 8003796:	bf19      	ittee	ne
 8003798:	6800      	ldrne	r0, [r0, #0]
 800379a:	f100 0418 	addne.w	r4, r0, #24
 800379e:	2100      	moveq	r1, #0
 80037a0:	f101 0418 	addeq.w	r4, r1, #24
 80037a4:	f103 0108 	add.w	r1, r3, #8
 80037a8:	680a      	ldr	r2, [r1, #0]
 80037aa:	0a12      	lsrs	r2, r2, #8
 80037ac:	d01f      	beq.n	80037ee <forward_sinh+0x86>
 80037ae:	684e      	ldr	r6, [r1, #4]
 80037b0:	4610      	mov	r0, r2
 80037b2:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 80037b6:	1f0f      	subs	r7, r1, #4
 80037b8:	f010 0103 	ands.w	r1, r0, #3
 80037bc:	d006      	beq.n	80037cc <forward_sinh+0x64>
 80037be:	1e52      	subs	r2, r2, #1
 80037c0:	f857 c904 	ldr.w	ip, [r7], #-4
 80037c4:	1e49      	subs	r1, r1, #1
 80037c6:	fb0c f505 	mul.w	r5, ip, r5
 80037ca:	d1f8      	bne.n	80037be <forward_sinh+0x56>
 80037cc:	0880      	lsrs	r0, r0, #2
 80037ce:	d00e      	beq.n	80037ee <forward_sinh+0x86>
 80037d0:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 80037d4:	3910      	subs	r1, #16
 80037d6:	68ca      	ldr	r2, [r1, #12]
 80037d8:	688e      	ldr	r6, [r1, #8]
 80037da:	684f      	ldr	r7, [r1, #4]
 80037dc:	f851 c910 	ldr.w	ip, [r1], #-16
 80037e0:	4372      	muls	r2, r6
 80037e2:	437a      	muls	r2, r7
 80037e4:	fb0c f202 	mul.w	r2, ip, r2
 80037e8:	4355      	muls	r5, r2
 80037ea:	1e40      	subs	r0, r0, #1
 80037ec:	d1f3      	bne.n	80037d6 <forward_sinh+0x6e>
 80037ee:	6998      	ldr	r0, [r3, #24]
 80037f0:	6821      	ldr	r1, [r4, #0]
 80037f2:	6886      	ldr	r6, [r0, #8]
 80037f4:	688a      	ldr	r2, [r1, #8]
 80037f6:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 80037fa:	eb02 0385 	add.w	r3, r2, r5, lsl #2
 80037fe:	1f07      	subs	r7, r0, #4
 8003800:	1f1c      	subs	r4, r3, #4
 8003802:	42b7      	cmp	r7, r6
 8003804:	f0c0 800a 	bcc.w	800381c <forward_sinh+0xb4>
 8003808:	ed97 0a00 	vldr	s0, [r7]
 800380c:	1f3f      	subs	r7, r7, #4
 800380e:	f008 fd93 	bl	800c338 <sinhf>
 8003812:	ed84 0a00 	vstr	s0, [r4]
 8003816:	1f24      	subs	r4, r4, #4
 8003818:	42b7      	cmp	r7, r6
 800381a:	d2f5      	bcs.n	8003808 <forward_sinh+0xa0>
 800381c:	b001      	add	sp, #4
 800381e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003820 <nl_func_tan_array_f32>:
 8003820:	b570      	push	{r4, r5, r6, lr}
 8003822:	688c      	ldr	r4, [r1, #8]
 8003824:	6880      	ldr	r0, [r0, #8]
 8003826:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 800382a:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800382e:	1f0d      	subs	r5, r1, #4
 8003830:	1f16      	subs	r6, r2, #4
 8003832:	42a5      	cmp	r5, r4
 8003834:	f0c0 800a 	bcc.w	800384c <nl_func_tan_array_f32+0x2c>
 8003838:	ed95 0a00 	vldr	s0, [r5]
 800383c:	1f2d      	subs	r5, r5, #4
 800383e:	f008 f87d 	bl	800b93c <tanf>
 8003842:	ed86 0a00 	vstr	s0, [r6]
 8003846:	1f36      	subs	r6, r6, #4
 8003848:	42a5      	cmp	r5, r4
 800384a:	d2f5      	bcs.n	8003838 <nl_func_tan_array_f32+0x18>
 800384c:	bd70      	pop	{r4, r5, r6, pc}
	...

08003850 <forward_tan>:
 8003850:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003852:	b081      	sub	sp, #4
 8003854:	6942      	ldr	r2, [r0, #20]
 8003856:	f04f 0501 	mov.w	r5, #1
 800385a:	8811      	ldrh	r1, [r2, #0]
 800385c:	2900      	cmp	r1, #0
 800385e:	bf1a      	itte	ne
 8003860:	6850      	ldrne	r0, [r2, #4]
 8003862:	1d00      	addne	r0, r0, #4
 8003864:	2004      	moveq	r0, #4
 8003866:	6800      	ldr	r0, [r0, #0]
 8003868:	2800      	cmp	r0, #0
 800386a:	bf14      	ite	ne
 800386c:	6803      	ldrne	r3, [r0, #0]
 800386e:	2300      	moveq	r3, #0
 8003870:	2902      	cmp	r1, #2
 8003872:	bfa6      	itte	ge
 8003874:	6850      	ldrge	r0, [r2, #4]
 8003876:	3010      	addge	r0, #16
 8003878:	2004      	movlt	r0, #4
 800387a:	6800      	ldr	r0, [r0, #0]
 800387c:	2800      	cmp	r0, #0
 800387e:	bf19      	ittee	ne
 8003880:	6800      	ldrne	r0, [r0, #0]
 8003882:	f100 0418 	addne.w	r4, r0, #24
 8003886:	2100      	moveq	r1, #0
 8003888:	f101 0418 	addeq.w	r4, r1, #24
 800388c:	f103 0108 	add.w	r1, r3, #8
 8003890:	680a      	ldr	r2, [r1, #0]
 8003892:	0a12      	lsrs	r2, r2, #8
 8003894:	d01f      	beq.n	80038d6 <forward_tan+0x86>
 8003896:	684e      	ldr	r6, [r1, #4]
 8003898:	4610      	mov	r0, r2
 800389a:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 800389e:	1f0f      	subs	r7, r1, #4
 80038a0:	f010 0103 	ands.w	r1, r0, #3
 80038a4:	d006      	beq.n	80038b4 <forward_tan+0x64>
 80038a6:	1e52      	subs	r2, r2, #1
 80038a8:	f857 c904 	ldr.w	ip, [r7], #-4
 80038ac:	1e49      	subs	r1, r1, #1
 80038ae:	fb0c f505 	mul.w	r5, ip, r5
 80038b2:	d1f8      	bne.n	80038a6 <forward_tan+0x56>
 80038b4:	0880      	lsrs	r0, r0, #2
 80038b6:	d00e      	beq.n	80038d6 <forward_tan+0x86>
 80038b8:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 80038bc:	3910      	subs	r1, #16
 80038be:	68ca      	ldr	r2, [r1, #12]
 80038c0:	688e      	ldr	r6, [r1, #8]
 80038c2:	684f      	ldr	r7, [r1, #4]
 80038c4:	f851 c910 	ldr.w	ip, [r1], #-16
 80038c8:	4372      	muls	r2, r6
 80038ca:	437a      	muls	r2, r7
 80038cc:	fb0c f202 	mul.w	r2, ip, r2
 80038d0:	4355      	muls	r5, r2
 80038d2:	1e40      	subs	r0, r0, #1
 80038d4:	d1f3      	bne.n	80038be <forward_tan+0x6e>
 80038d6:	6998      	ldr	r0, [r3, #24]
 80038d8:	6821      	ldr	r1, [r4, #0]
 80038da:	6886      	ldr	r6, [r0, #8]
 80038dc:	688a      	ldr	r2, [r1, #8]
 80038de:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 80038e2:	eb02 0385 	add.w	r3, r2, r5, lsl #2
 80038e6:	1f07      	subs	r7, r0, #4
 80038e8:	1f1c      	subs	r4, r3, #4
 80038ea:	42b7      	cmp	r7, r6
 80038ec:	f0c0 800a 	bcc.w	8003904 <forward_tan+0xb4>
 80038f0:	ed97 0a00 	vldr	s0, [r7]
 80038f4:	1f3f      	subs	r7, r7, #4
 80038f6:	f008 f821 	bl	800b93c <tanf>
 80038fa:	ed84 0a00 	vstr	s0, [r4]
 80038fe:	1f24      	subs	r4, r4, #4
 8003900:	42b7      	cmp	r7, r6
 8003902:	d2f5      	bcs.n	80038f0 <forward_tan+0xa0>
 8003904:	b001      	add	sp, #4
 8003906:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003908 <nl_func_abs_array_f32>:
 8003908:	6889      	ldr	r1, [r1, #8]
 800390a:	6880      	ldr	r0, [r0, #8]
 800390c:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 8003910:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8003914:	1f1b      	subs	r3, r3, #4
 8003916:	1f10      	subs	r0, r2, #4
 8003918:	428b      	cmp	r3, r1
 800391a:	d307      	bcc.n	800392c <nl_func_abs_array_f32+0x24>
 800391c:	f853 c904 	ldr.w	ip, [r3], #-4
 8003920:	428b      	cmp	r3, r1
 8003922:	f02c 4200 	bic.w	r2, ip, #2147483648	; 0x80000000
 8003926:	f840 2904 	str.w	r2, [r0], #-4
 800392a:	d2f7      	bcs.n	800391c <nl_func_abs_array_f32+0x14>
 800392c:	4770      	bx	lr
	...

08003930 <forward_abs>:
 8003930:	b4f0      	push	{r4, r5, r6, r7}
 8003932:	6942      	ldr	r2, [r0, #20]
 8003934:	f04f 0501 	mov.w	r5, #1
 8003938:	8811      	ldrh	r1, [r2, #0]
 800393a:	2900      	cmp	r1, #0
 800393c:	bf1a      	itte	ne
 800393e:	6850      	ldrne	r0, [r2, #4]
 8003940:	1d00      	addne	r0, r0, #4
 8003942:	2004      	moveq	r0, #4
 8003944:	6800      	ldr	r0, [r0, #0]
 8003946:	2800      	cmp	r0, #0
 8003948:	bf14      	ite	ne
 800394a:	6803      	ldrne	r3, [r0, #0]
 800394c:	2300      	moveq	r3, #0
 800394e:	2902      	cmp	r1, #2
 8003950:	bfa6      	itte	ge
 8003952:	6850      	ldrge	r0, [r2, #4]
 8003954:	3010      	addge	r0, #16
 8003956:	2004      	movlt	r0, #4
 8003958:	6800      	ldr	r0, [r0, #0]
 800395a:	2800      	cmp	r0, #0
 800395c:	bf19      	ittee	ne
 800395e:	6800      	ldrne	r0, [r0, #0]
 8003960:	f100 0418 	addne.w	r4, r0, #24
 8003964:	2100      	moveq	r1, #0
 8003966:	f101 0418 	addeq.w	r4, r1, #24
 800396a:	f103 0108 	add.w	r1, r3, #8
 800396e:	680a      	ldr	r2, [r1, #0]
 8003970:	0a12      	lsrs	r2, r2, #8
 8003972:	d01f      	beq.n	80039b4 <forward_abs+0x84>
 8003974:	684e      	ldr	r6, [r1, #4]
 8003976:	4610      	mov	r0, r2
 8003978:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 800397c:	1f0f      	subs	r7, r1, #4
 800397e:	f010 0103 	ands.w	r1, r0, #3
 8003982:	d006      	beq.n	8003992 <forward_abs+0x62>
 8003984:	1e52      	subs	r2, r2, #1
 8003986:	f857 c904 	ldr.w	ip, [r7], #-4
 800398a:	1e49      	subs	r1, r1, #1
 800398c:	fb0c f505 	mul.w	r5, ip, r5
 8003990:	d1f8      	bne.n	8003984 <forward_abs+0x54>
 8003992:	0880      	lsrs	r0, r0, #2
 8003994:	d00e      	beq.n	80039b4 <forward_abs+0x84>
 8003996:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 800399a:	3910      	subs	r1, #16
 800399c:	68ca      	ldr	r2, [r1, #12]
 800399e:	688e      	ldr	r6, [r1, #8]
 80039a0:	684f      	ldr	r7, [r1, #4]
 80039a2:	f851 c910 	ldr.w	ip, [r1], #-16
 80039a6:	4372      	muls	r2, r6
 80039a8:	437a      	muls	r2, r7
 80039aa:	fb0c f202 	mul.w	r2, ip, r2
 80039ae:	4355      	muls	r5, r2
 80039b0:	1e40      	subs	r0, r0, #1
 80039b2:	d1f3      	bne.n	800399c <forward_abs+0x6c>
 80039b4:	6998      	ldr	r0, [r3, #24]
 80039b6:	6822      	ldr	r2, [r4, #0]
 80039b8:	6880      	ldr	r0, [r0, #8]
 80039ba:	6893      	ldr	r3, [r2, #8]
 80039bc:	eb00 0185 	add.w	r1, r0, r5, lsl #2
 80039c0:	eb03 0485 	add.w	r4, r3, r5, lsl #2
 80039c4:	1f09      	subs	r1, r1, #4
 80039c6:	1f22      	subs	r2, r4, #4
 80039c8:	4281      	cmp	r1, r0
 80039ca:	d307      	bcc.n	80039dc <forward_abs+0xac>
 80039cc:	f851 5904 	ldr.w	r5, [r1], #-4
 80039d0:	4281      	cmp	r1, r0
 80039d2:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 80039d6:	f842 3904 	str.w	r3, [r2], #-4
 80039da:	d2f7      	bcs.n	80039cc <forward_abs+0x9c>
 80039dc:	bcf0      	pop	{r4, r5, r6, r7}
 80039de:	4770      	bx	lr

080039e0 <nl_func_ceil_array_f32>:
 80039e0:	b570      	push	{r4, r5, r6, lr}
 80039e2:	688c      	ldr	r4, [r1, #8]
 80039e4:	6880      	ldr	r0, [r0, #8]
 80039e6:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 80039ea:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80039ee:	1f0d      	subs	r5, r1, #4
 80039f0:	1f16      	subs	r6, r2, #4
 80039f2:	42a5      	cmp	r5, r4
 80039f4:	f0c0 800a 	bcc.w	8003a0c <nl_func_ceil_array_f32+0x2c>
 80039f8:	ed95 0a00 	vldr	s0, [r5]
 80039fc:	1f2d      	subs	r5, r5, #4
 80039fe:	f007 fb83 	bl	800b108 <ceilf>
 8003a02:	ed86 0a00 	vstr	s0, [r6]
 8003a06:	1f36      	subs	r6, r6, #4
 8003a08:	42a5      	cmp	r5, r4
 8003a0a:	d2f5      	bcs.n	80039f8 <nl_func_ceil_array_f32+0x18>
 8003a0c:	bd70      	pop	{r4, r5, r6, pc}
	...

08003a10 <forward_ceil>:
 8003a10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003a12:	b081      	sub	sp, #4
 8003a14:	6942      	ldr	r2, [r0, #20]
 8003a16:	f04f 0501 	mov.w	r5, #1
 8003a1a:	8811      	ldrh	r1, [r2, #0]
 8003a1c:	2900      	cmp	r1, #0
 8003a1e:	bf1a      	itte	ne
 8003a20:	6850      	ldrne	r0, [r2, #4]
 8003a22:	1d00      	addne	r0, r0, #4
 8003a24:	2004      	moveq	r0, #4
 8003a26:	6800      	ldr	r0, [r0, #0]
 8003a28:	2800      	cmp	r0, #0
 8003a2a:	bf14      	ite	ne
 8003a2c:	6803      	ldrne	r3, [r0, #0]
 8003a2e:	2300      	moveq	r3, #0
 8003a30:	2902      	cmp	r1, #2
 8003a32:	bfa6      	itte	ge
 8003a34:	6850      	ldrge	r0, [r2, #4]
 8003a36:	3010      	addge	r0, #16
 8003a38:	2004      	movlt	r0, #4
 8003a3a:	6800      	ldr	r0, [r0, #0]
 8003a3c:	2800      	cmp	r0, #0
 8003a3e:	bf19      	ittee	ne
 8003a40:	6800      	ldrne	r0, [r0, #0]
 8003a42:	f100 0418 	addne.w	r4, r0, #24
 8003a46:	2100      	moveq	r1, #0
 8003a48:	f101 0418 	addeq.w	r4, r1, #24
 8003a4c:	f103 0108 	add.w	r1, r3, #8
 8003a50:	680a      	ldr	r2, [r1, #0]
 8003a52:	0a12      	lsrs	r2, r2, #8
 8003a54:	d01f      	beq.n	8003a96 <forward_ceil+0x86>
 8003a56:	684e      	ldr	r6, [r1, #4]
 8003a58:	4610      	mov	r0, r2
 8003a5a:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003a5e:	1f0f      	subs	r7, r1, #4
 8003a60:	f010 0103 	ands.w	r1, r0, #3
 8003a64:	d006      	beq.n	8003a74 <forward_ceil+0x64>
 8003a66:	1e52      	subs	r2, r2, #1
 8003a68:	f857 c904 	ldr.w	ip, [r7], #-4
 8003a6c:	1e49      	subs	r1, r1, #1
 8003a6e:	fb0c f505 	mul.w	r5, ip, r5
 8003a72:	d1f8      	bne.n	8003a66 <forward_ceil+0x56>
 8003a74:	0880      	lsrs	r0, r0, #2
 8003a76:	d00e      	beq.n	8003a96 <forward_ceil+0x86>
 8003a78:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003a7c:	3910      	subs	r1, #16
 8003a7e:	68ca      	ldr	r2, [r1, #12]
 8003a80:	688e      	ldr	r6, [r1, #8]
 8003a82:	684f      	ldr	r7, [r1, #4]
 8003a84:	f851 c910 	ldr.w	ip, [r1], #-16
 8003a88:	4372      	muls	r2, r6
 8003a8a:	437a      	muls	r2, r7
 8003a8c:	fb0c f202 	mul.w	r2, ip, r2
 8003a90:	4355      	muls	r5, r2
 8003a92:	1e40      	subs	r0, r0, #1
 8003a94:	d1f3      	bne.n	8003a7e <forward_ceil+0x6e>
 8003a96:	6998      	ldr	r0, [r3, #24]
 8003a98:	6821      	ldr	r1, [r4, #0]
 8003a9a:	6886      	ldr	r6, [r0, #8]
 8003a9c:	688a      	ldr	r2, [r1, #8]
 8003a9e:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 8003aa2:	eb02 0385 	add.w	r3, r2, r5, lsl #2
 8003aa6:	1f07      	subs	r7, r0, #4
 8003aa8:	1f1c      	subs	r4, r3, #4
 8003aaa:	42b7      	cmp	r7, r6
 8003aac:	f0c0 800a 	bcc.w	8003ac4 <forward_ceil+0xb4>
 8003ab0:	ed97 0a00 	vldr	s0, [r7]
 8003ab4:	1f3f      	subs	r7, r7, #4
 8003ab6:	f007 fb27 	bl	800b108 <ceilf>
 8003aba:	ed84 0a00 	vstr	s0, [r4]
 8003abe:	1f24      	subs	r4, r4, #4
 8003ac0:	42b7      	cmp	r7, r6
 8003ac2:	d2f5      	bcs.n	8003ab0 <forward_ceil+0xa0>
 8003ac4:	b001      	add	sp, #4
 8003ac6:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003ac8 <nl_func_floor_array_f32>:
 8003ac8:	b570      	push	{r4, r5, r6, lr}
 8003aca:	688c      	ldr	r4, [r1, #8]
 8003acc:	6880      	ldr	r0, [r0, #8]
 8003ace:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 8003ad2:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8003ad6:	1f0d      	subs	r5, r1, #4
 8003ad8:	1f16      	subs	r6, r2, #4
 8003ada:	42a5      	cmp	r5, r4
 8003adc:	f0c0 800a 	bcc.w	8003af4 <nl_func_floor_array_f32+0x2c>
 8003ae0:	ed95 0a00 	vldr	s0, [r5]
 8003ae4:	1f2d      	subs	r5, r5, #4
 8003ae6:	f007 fd77 	bl	800b5d8 <floorf>
 8003aea:	ed86 0a00 	vstr	s0, [r6]
 8003aee:	1f36      	subs	r6, r6, #4
 8003af0:	42a5      	cmp	r5, r4
 8003af2:	d2f5      	bcs.n	8003ae0 <nl_func_floor_array_f32+0x18>
 8003af4:	bd70      	pop	{r4, r5, r6, pc}
	...

08003af8 <forward_floor>:
 8003af8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003afa:	b081      	sub	sp, #4
 8003afc:	6942      	ldr	r2, [r0, #20]
 8003afe:	f04f 0501 	mov.w	r5, #1
 8003b02:	8811      	ldrh	r1, [r2, #0]
 8003b04:	2900      	cmp	r1, #0
 8003b06:	bf1a      	itte	ne
 8003b08:	6850      	ldrne	r0, [r2, #4]
 8003b0a:	1d00      	addne	r0, r0, #4
 8003b0c:	2004      	moveq	r0, #4
 8003b0e:	6800      	ldr	r0, [r0, #0]
 8003b10:	2800      	cmp	r0, #0
 8003b12:	bf14      	ite	ne
 8003b14:	6803      	ldrne	r3, [r0, #0]
 8003b16:	2300      	moveq	r3, #0
 8003b18:	2902      	cmp	r1, #2
 8003b1a:	bfa6      	itte	ge
 8003b1c:	6850      	ldrge	r0, [r2, #4]
 8003b1e:	3010      	addge	r0, #16
 8003b20:	2004      	movlt	r0, #4
 8003b22:	6800      	ldr	r0, [r0, #0]
 8003b24:	2800      	cmp	r0, #0
 8003b26:	bf19      	ittee	ne
 8003b28:	6800      	ldrne	r0, [r0, #0]
 8003b2a:	f100 0418 	addne.w	r4, r0, #24
 8003b2e:	2100      	moveq	r1, #0
 8003b30:	f101 0418 	addeq.w	r4, r1, #24
 8003b34:	f103 0108 	add.w	r1, r3, #8
 8003b38:	680a      	ldr	r2, [r1, #0]
 8003b3a:	0a12      	lsrs	r2, r2, #8
 8003b3c:	d01f      	beq.n	8003b7e <forward_floor+0x86>
 8003b3e:	684e      	ldr	r6, [r1, #4]
 8003b40:	4610      	mov	r0, r2
 8003b42:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003b46:	1f0f      	subs	r7, r1, #4
 8003b48:	f010 0103 	ands.w	r1, r0, #3
 8003b4c:	d006      	beq.n	8003b5c <forward_floor+0x64>
 8003b4e:	1e52      	subs	r2, r2, #1
 8003b50:	f857 c904 	ldr.w	ip, [r7], #-4
 8003b54:	1e49      	subs	r1, r1, #1
 8003b56:	fb0c f505 	mul.w	r5, ip, r5
 8003b5a:	d1f8      	bne.n	8003b4e <forward_floor+0x56>
 8003b5c:	0880      	lsrs	r0, r0, #2
 8003b5e:	d00e      	beq.n	8003b7e <forward_floor+0x86>
 8003b60:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003b64:	3910      	subs	r1, #16
 8003b66:	68ca      	ldr	r2, [r1, #12]
 8003b68:	688e      	ldr	r6, [r1, #8]
 8003b6a:	684f      	ldr	r7, [r1, #4]
 8003b6c:	f851 c910 	ldr.w	ip, [r1], #-16
 8003b70:	4372      	muls	r2, r6
 8003b72:	437a      	muls	r2, r7
 8003b74:	fb0c f202 	mul.w	r2, ip, r2
 8003b78:	4355      	muls	r5, r2
 8003b7a:	1e40      	subs	r0, r0, #1
 8003b7c:	d1f3      	bne.n	8003b66 <forward_floor+0x6e>
 8003b7e:	6998      	ldr	r0, [r3, #24]
 8003b80:	6821      	ldr	r1, [r4, #0]
 8003b82:	6886      	ldr	r6, [r0, #8]
 8003b84:	688a      	ldr	r2, [r1, #8]
 8003b86:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 8003b8a:	eb02 0385 	add.w	r3, r2, r5, lsl #2
 8003b8e:	1f07      	subs	r7, r0, #4
 8003b90:	1f1c      	subs	r4, r3, #4
 8003b92:	42b7      	cmp	r7, r6
 8003b94:	f0c0 800a 	bcc.w	8003bac <forward_floor+0xb4>
 8003b98:	ed97 0a00 	vldr	s0, [r7]
 8003b9c:	1f3f      	subs	r7, r7, #4
 8003b9e:	f007 fd1b 	bl	800b5d8 <floorf>
 8003ba2:	ed84 0a00 	vstr	s0, [r4]
 8003ba6:	1f24      	subs	r4, r4, #4
 8003ba8:	42b7      	cmp	r7, r6
 8003baa:	d2f5      	bcs.n	8003b98 <forward_floor+0xa0>
 8003bac:	b001      	add	sp, #4
 8003bae:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003bb0 <nl_func_round_array_f32>:
 8003bb0:	b570      	push	{r4, r5, r6, lr}
 8003bb2:	688c      	ldr	r4, [r1, #8]
 8003bb4:	6880      	ldr	r0, [r0, #8]
 8003bb6:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 8003bba:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8003bbe:	1f0d      	subs	r5, r1, #4
 8003bc0:	1f16      	subs	r6, r2, #4
 8003bc2:	42a5      	cmp	r5, r4
 8003bc4:	f0c0 800a 	bcc.w	8003bdc <nl_func_round_array_f32+0x2c>
 8003bc8:	ed95 0a00 	vldr	s0, [r5]
 8003bcc:	1f2d      	subs	r5, r5, #4
 8003bce:	f007 fe4d 	bl	800b86c <roundf>
 8003bd2:	ed86 0a00 	vstr	s0, [r6]
 8003bd6:	1f36      	subs	r6, r6, #4
 8003bd8:	42a5      	cmp	r5, r4
 8003bda:	d2f5      	bcs.n	8003bc8 <nl_func_round_array_f32+0x18>
 8003bdc:	bd70      	pop	{r4, r5, r6, pc}
	...

08003be0 <forward_round>:
 8003be0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003be2:	b081      	sub	sp, #4
 8003be4:	6942      	ldr	r2, [r0, #20]
 8003be6:	f04f 0501 	mov.w	r5, #1
 8003bea:	8811      	ldrh	r1, [r2, #0]
 8003bec:	2900      	cmp	r1, #0
 8003bee:	bf1a      	itte	ne
 8003bf0:	6850      	ldrne	r0, [r2, #4]
 8003bf2:	1d00      	addne	r0, r0, #4
 8003bf4:	2004      	moveq	r0, #4
 8003bf6:	6800      	ldr	r0, [r0, #0]
 8003bf8:	2800      	cmp	r0, #0
 8003bfa:	bf14      	ite	ne
 8003bfc:	6803      	ldrne	r3, [r0, #0]
 8003bfe:	2300      	moveq	r3, #0
 8003c00:	2902      	cmp	r1, #2
 8003c02:	bfa6      	itte	ge
 8003c04:	6850      	ldrge	r0, [r2, #4]
 8003c06:	3010      	addge	r0, #16
 8003c08:	2004      	movlt	r0, #4
 8003c0a:	6800      	ldr	r0, [r0, #0]
 8003c0c:	2800      	cmp	r0, #0
 8003c0e:	bf19      	ittee	ne
 8003c10:	6800      	ldrne	r0, [r0, #0]
 8003c12:	f100 0418 	addne.w	r4, r0, #24
 8003c16:	2100      	moveq	r1, #0
 8003c18:	f101 0418 	addeq.w	r4, r1, #24
 8003c1c:	f103 0108 	add.w	r1, r3, #8
 8003c20:	680a      	ldr	r2, [r1, #0]
 8003c22:	0a12      	lsrs	r2, r2, #8
 8003c24:	d01f      	beq.n	8003c66 <forward_round+0x86>
 8003c26:	684e      	ldr	r6, [r1, #4]
 8003c28:	4610      	mov	r0, r2
 8003c2a:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003c2e:	1f0f      	subs	r7, r1, #4
 8003c30:	f010 0103 	ands.w	r1, r0, #3
 8003c34:	d006      	beq.n	8003c44 <forward_round+0x64>
 8003c36:	1e52      	subs	r2, r2, #1
 8003c38:	f857 c904 	ldr.w	ip, [r7], #-4
 8003c3c:	1e49      	subs	r1, r1, #1
 8003c3e:	fb0c f505 	mul.w	r5, ip, r5
 8003c42:	d1f8      	bne.n	8003c36 <forward_round+0x56>
 8003c44:	0880      	lsrs	r0, r0, #2
 8003c46:	d00e      	beq.n	8003c66 <forward_round+0x86>
 8003c48:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003c4c:	3910      	subs	r1, #16
 8003c4e:	68ca      	ldr	r2, [r1, #12]
 8003c50:	688e      	ldr	r6, [r1, #8]
 8003c52:	684f      	ldr	r7, [r1, #4]
 8003c54:	f851 c910 	ldr.w	ip, [r1], #-16
 8003c58:	4372      	muls	r2, r6
 8003c5a:	437a      	muls	r2, r7
 8003c5c:	fb0c f202 	mul.w	r2, ip, r2
 8003c60:	4355      	muls	r5, r2
 8003c62:	1e40      	subs	r0, r0, #1
 8003c64:	d1f3      	bne.n	8003c4e <forward_round+0x6e>
 8003c66:	6998      	ldr	r0, [r3, #24]
 8003c68:	6821      	ldr	r1, [r4, #0]
 8003c6a:	6886      	ldr	r6, [r0, #8]
 8003c6c:	688a      	ldr	r2, [r1, #8]
 8003c6e:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 8003c72:	eb02 0385 	add.w	r3, r2, r5, lsl #2
 8003c76:	1f07      	subs	r7, r0, #4
 8003c78:	1f1c      	subs	r4, r3, #4
 8003c7a:	42b7      	cmp	r7, r6
 8003c7c:	f0c0 800a 	bcc.w	8003c94 <forward_round+0xb4>
 8003c80:	ed97 0a00 	vldr	s0, [r7]
 8003c84:	1f3f      	subs	r7, r7, #4
 8003c86:	f007 fdf1 	bl	800b86c <roundf>
 8003c8a:	ed84 0a00 	vstr	s0, [r4]
 8003c8e:	1f24      	subs	r4, r4, #4
 8003c90:	42b7      	cmp	r7, r6
 8003c92:	d2f5      	bcs.n	8003c80 <forward_round+0xa0>
 8003c94:	b001      	add	sp, #4
 8003c96:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003c98 <nl_func_neg_array_f32>:
 8003c98:	6889      	ldr	r1, [r1, #8]
 8003c9a:	6880      	ldr	r0, [r0, #8]
 8003c9c:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 8003ca0:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8003ca4:	1f1b      	subs	r3, r3, #4
 8003ca6:	1f12      	subs	r2, r2, #4
 8003ca8:	428b      	cmp	r3, r1
 8003caa:	d32b      	bcc.n	8003d04 <nl_func_neg_array_f32+0x6c>
 8003cac:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8003cb0:	1f18      	subs	r0, r3, #4
 8003cb2:	edd3 0a00 	vldr	s1, [r3]
 8003cb6:	4288      	cmp	r0, r1
 8003cb8:	ee60 0a80 	vmul.f32	s1, s1, s0
 8003cbc:	edc2 0a00 	vstr	s1, [r2]
 8003cc0:	d320      	bcc.n	8003d04 <nl_func_neg_array_f32+0x6c>
 8003cc2:	ed90 1a00 	vldr	s2, [r0]
 8003cc6:	1f00      	subs	r0, r0, #4
 8003cc8:	1f13      	subs	r3, r2, #4
 8003cca:	ee21 1a00 	vmul.f32	s2, s2, s0
 8003cce:	4288      	cmp	r0, r1
 8003cd0:	ed83 1a00 	vstr	s2, [r3]
 8003cd4:	d316      	bcc.n	8003d04 <nl_func_neg_array_f32+0x6c>
 8003cd6:	edd0 0a00 	vldr	s1, [r0]
 8003cda:	1f00      	subs	r0, r0, #4
 8003cdc:	f1a2 0c08 	sub.w	ip, r2, #8
 8003ce0:	ee60 0a80 	vmul.f32	s1, s1, s0
 8003ce4:	4288      	cmp	r0, r1
 8003ce6:	edcc 0a00 	vstr	s1, [ip]
 8003cea:	d30b      	bcc.n	8003d04 <nl_func_neg_array_f32+0x6c>
 8003cec:	ed90 1a00 	vldr	s2, [r0]
 8003cf0:	f1a2 030c 	sub.w	r3, r2, #12
 8003cf4:	ee21 1a00 	vmul.f32	s2, s2, s0
 8003cf8:	3a10      	subs	r2, #16
 8003cfa:	ed83 1a00 	vstr	s2, [r3]
 8003cfe:	1f03      	subs	r3, r0, #4
 8003d00:	428b      	cmp	r3, r1
 8003d02:	d2d5      	bcs.n	8003cb0 <nl_func_neg_array_f32+0x18>
 8003d04:	4770      	bx	lr
	...

08003d08 <forward_neg>:
 8003d08:	b4f0      	push	{r4, r5, r6, r7}
 8003d0a:	6942      	ldr	r2, [r0, #20]
 8003d0c:	f04f 0501 	mov.w	r5, #1
 8003d10:	8811      	ldrh	r1, [r2, #0]
 8003d12:	2900      	cmp	r1, #0
 8003d14:	bf1a      	itte	ne
 8003d16:	6850      	ldrne	r0, [r2, #4]
 8003d18:	1d00      	addne	r0, r0, #4
 8003d1a:	2004      	moveq	r0, #4
 8003d1c:	6800      	ldr	r0, [r0, #0]
 8003d1e:	2800      	cmp	r0, #0
 8003d20:	bf14      	ite	ne
 8003d22:	6803      	ldrne	r3, [r0, #0]
 8003d24:	2300      	moveq	r3, #0
 8003d26:	2902      	cmp	r1, #2
 8003d28:	bfa6      	itte	ge
 8003d2a:	6850      	ldrge	r0, [r2, #4]
 8003d2c:	3010      	addge	r0, #16
 8003d2e:	2004      	movlt	r0, #4
 8003d30:	6800      	ldr	r0, [r0, #0]
 8003d32:	2800      	cmp	r0, #0
 8003d34:	bf19      	ittee	ne
 8003d36:	6800      	ldrne	r0, [r0, #0]
 8003d38:	f100 0418 	addne.w	r4, r0, #24
 8003d3c:	2100      	moveq	r1, #0
 8003d3e:	f101 0418 	addeq.w	r4, r1, #24
 8003d42:	f103 0108 	add.w	r1, r3, #8
 8003d46:	680a      	ldr	r2, [r1, #0]
 8003d48:	0a12      	lsrs	r2, r2, #8
 8003d4a:	d01f      	beq.n	8003d8c <forward_neg+0x84>
 8003d4c:	684e      	ldr	r6, [r1, #4]
 8003d4e:	4610      	mov	r0, r2
 8003d50:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003d54:	1f0f      	subs	r7, r1, #4
 8003d56:	f010 0103 	ands.w	r1, r0, #3
 8003d5a:	d006      	beq.n	8003d6a <forward_neg+0x62>
 8003d5c:	1e52      	subs	r2, r2, #1
 8003d5e:	f857 c904 	ldr.w	ip, [r7], #-4
 8003d62:	1e49      	subs	r1, r1, #1
 8003d64:	fb0c f505 	mul.w	r5, ip, r5
 8003d68:	d1f8      	bne.n	8003d5c <forward_neg+0x54>
 8003d6a:	0880      	lsrs	r0, r0, #2
 8003d6c:	d00e      	beq.n	8003d8c <forward_neg+0x84>
 8003d6e:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003d72:	3910      	subs	r1, #16
 8003d74:	68ca      	ldr	r2, [r1, #12]
 8003d76:	688e      	ldr	r6, [r1, #8]
 8003d78:	684f      	ldr	r7, [r1, #4]
 8003d7a:	f851 c910 	ldr.w	ip, [r1], #-16
 8003d7e:	4372      	muls	r2, r6
 8003d80:	437a      	muls	r2, r7
 8003d82:	fb0c f202 	mul.w	r2, ip, r2
 8003d86:	4355      	muls	r5, r2
 8003d88:	1e40      	subs	r0, r0, #1
 8003d8a:	d1f3      	bne.n	8003d74 <forward_neg+0x6c>
 8003d8c:	6998      	ldr	r0, [r3, #24]
 8003d8e:	6822      	ldr	r2, [r4, #0]
 8003d90:	6880      	ldr	r0, [r0, #8]
 8003d92:	6893      	ldr	r3, [r2, #8]
 8003d94:	eb00 0185 	add.w	r1, r0, r5, lsl #2
 8003d98:	eb03 0485 	add.w	r4, r3, r5, lsl #2
 8003d9c:	1f09      	subs	r1, r1, #4
 8003d9e:	1f22      	subs	r2, r4, #4
 8003da0:	4281      	cmp	r1, r0
 8003da2:	d32b      	bcc.n	8003dfc <forward_neg+0xf4>
 8003da4:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8003da8:	edd1 0a00 	vldr	s1, [r1]
 8003dac:	1f09      	subs	r1, r1, #4
 8003dae:	4281      	cmp	r1, r0
 8003db0:	ee60 0a80 	vmul.f32	s1, s1, s0
 8003db4:	edc2 0a00 	vstr	s1, [r2]
 8003db8:	d320      	bcc.n	8003dfc <forward_neg+0xf4>
 8003dba:	ed91 1a00 	vldr	s2, [r1]
 8003dbe:	1f09      	subs	r1, r1, #4
 8003dc0:	1f13      	subs	r3, r2, #4
 8003dc2:	ee21 1a00 	vmul.f32	s2, s2, s0
 8003dc6:	4281      	cmp	r1, r0
 8003dc8:	ed83 1a00 	vstr	s2, [r3]
 8003dcc:	d316      	bcc.n	8003dfc <forward_neg+0xf4>
 8003dce:	edd1 0a00 	vldr	s1, [r1]
 8003dd2:	1f09      	subs	r1, r1, #4
 8003dd4:	f1a2 0408 	sub.w	r4, r2, #8
 8003dd8:	ee60 0a80 	vmul.f32	s1, s1, s0
 8003ddc:	4281      	cmp	r1, r0
 8003dde:	edc4 0a00 	vstr	s1, [r4]
 8003de2:	d30b      	bcc.n	8003dfc <forward_neg+0xf4>
 8003de4:	ed91 1a00 	vldr	s2, [r1]
 8003de8:	f1a2 030c 	sub.w	r3, r2, #12
 8003dec:	1f09      	subs	r1, r1, #4
 8003dee:	3a10      	subs	r2, #16
 8003df0:	4281      	cmp	r1, r0
 8003df2:	ee21 1a00 	vmul.f32	s2, s2, s0
 8003df6:	ed83 1a00 	vstr	s2, [r3]
 8003dfa:	d2d5      	bcs.n	8003da8 <forward_neg+0xa0>
 8003dfc:	bcf0      	pop	{r4, r5, r6, r7}
 8003dfe:	4770      	bx	lr

08003e00 <nl_func_reciprocal_array_f32>:
 8003e00:	6889      	ldr	r1, [r1, #8]
 8003e02:	6880      	ldr	r0, [r0, #8]
 8003e04:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 8003e08:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8003e0c:	1f1b      	subs	r3, r3, #4
 8003e0e:	1f12      	subs	r2, r2, #4
 8003e10:	428b      	cmp	r3, r1
 8003e12:	d331      	bcc.n	8003e78 <nl_func_reciprocal_array_f32+0x78>
 8003e14:	1f18      	subs	r0, r3, #4
 8003e16:	ed93 0a00 	vldr	s0, [r3]
 8003e1a:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8003e1e:	4288      	cmp	r0, r1
 8003e20:	ee80 0a80 	vdiv.f32	s0, s1, s0
 8003e24:	ed82 0a00 	vstr	s0, [r2]
 8003e28:	d326      	bcc.n	8003e78 <nl_func_reciprocal_array_f32+0x78>
 8003e2a:	edd0 0a00 	vldr	s1, [r0]
 8003e2e:	1f00      	subs	r0, r0, #4
 8003e30:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8003e34:	1f13      	subs	r3, r2, #4
 8003e36:	4288      	cmp	r0, r1
 8003e38:	ee81 1a20 	vdiv.f32	s2, s2, s1
 8003e3c:	ed83 1a00 	vstr	s2, [r3]
 8003e40:	d31a      	bcc.n	8003e78 <nl_func_reciprocal_array_f32+0x78>
 8003e42:	ed90 0a00 	vldr	s0, [r0]
 8003e46:	1f00      	subs	r0, r0, #4
 8003e48:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8003e4c:	f1a2 0c08 	sub.w	ip, r2, #8
 8003e50:	4288      	cmp	r0, r1
 8003e52:	ee80 0a80 	vdiv.f32	s0, s1, s0
 8003e56:	ed8c 0a00 	vstr	s0, [ip]
 8003e5a:	d30d      	bcc.n	8003e78 <nl_func_reciprocal_array_f32+0x78>
 8003e5c:	edd0 0a00 	vldr	s1, [r0]
 8003e60:	f1a2 030c 	sub.w	r3, r2, #12
 8003e64:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8003e68:	3a10      	subs	r2, #16
 8003e6a:	ee81 1a20 	vdiv.f32	s2, s2, s1
 8003e6e:	ed83 1a00 	vstr	s2, [r3]
 8003e72:	1f03      	subs	r3, r0, #4
 8003e74:	428b      	cmp	r3, r1
 8003e76:	d2cd      	bcs.n	8003e14 <nl_func_reciprocal_array_f32+0x14>
 8003e78:	4770      	bx	lr
	...

08003e7c <forward_reciprocal>:
 8003e7c:	b4f0      	push	{r4, r5, r6, r7}
 8003e7e:	6942      	ldr	r2, [r0, #20]
 8003e80:	f04f 0501 	mov.w	r5, #1
 8003e84:	8811      	ldrh	r1, [r2, #0]
 8003e86:	2900      	cmp	r1, #0
 8003e88:	bf1a      	itte	ne
 8003e8a:	6850      	ldrne	r0, [r2, #4]
 8003e8c:	1d00      	addne	r0, r0, #4
 8003e8e:	2004      	moveq	r0, #4
 8003e90:	6800      	ldr	r0, [r0, #0]
 8003e92:	2800      	cmp	r0, #0
 8003e94:	bf14      	ite	ne
 8003e96:	6803      	ldrne	r3, [r0, #0]
 8003e98:	2300      	moveq	r3, #0
 8003e9a:	2902      	cmp	r1, #2
 8003e9c:	bfa6      	itte	ge
 8003e9e:	6850      	ldrge	r0, [r2, #4]
 8003ea0:	3010      	addge	r0, #16
 8003ea2:	2004      	movlt	r0, #4
 8003ea4:	6800      	ldr	r0, [r0, #0]
 8003ea6:	2800      	cmp	r0, #0
 8003ea8:	bf19      	ittee	ne
 8003eaa:	6800      	ldrne	r0, [r0, #0]
 8003eac:	f100 0418 	addne.w	r4, r0, #24
 8003eb0:	2100      	moveq	r1, #0
 8003eb2:	f101 0418 	addeq.w	r4, r1, #24
 8003eb6:	f103 0108 	add.w	r1, r3, #8
 8003eba:	680a      	ldr	r2, [r1, #0]
 8003ebc:	0a12      	lsrs	r2, r2, #8
 8003ebe:	d01f      	beq.n	8003f00 <forward_reciprocal+0x84>
 8003ec0:	684e      	ldr	r6, [r1, #4]
 8003ec2:	4610      	mov	r0, r2
 8003ec4:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003ec8:	1f0f      	subs	r7, r1, #4
 8003eca:	f010 0103 	ands.w	r1, r0, #3
 8003ece:	d006      	beq.n	8003ede <forward_reciprocal+0x62>
 8003ed0:	1e52      	subs	r2, r2, #1
 8003ed2:	f857 c904 	ldr.w	ip, [r7], #-4
 8003ed6:	1e49      	subs	r1, r1, #1
 8003ed8:	fb0c f505 	mul.w	r5, ip, r5
 8003edc:	d1f8      	bne.n	8003ed0 <forward_reciprocal+0x54>
 8003ede:	0880      	lsrs	r0, r0, #2
 8003ee0:	d00e      	beq.n	8003f00 <forward_reciprocal+0x84>
 8003ee2:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003ee6:	3910      	subs	r1, #16
 8003ee8:	68ca      	ldr	r2, [r1, #12]
 8003eea:	688e      	ldr	r6, [r1, #8]
 8003eec:	684f      	ldr	r7, [r1, #4]
 8003eee:	f851 c910 	ldr.w	ip, [r1], #-16
 8003ef2:	4372      	muls	r2, r6
 8003ef4:	437a      	muls	r2, r7
 8003ef6:	fb0c f202 	mul.w	r2, ip, r2
 8003efa:	4355      	muls	r5, r2
 8003efc:	1e40      	subs	r0, r0, #1
 8003efe:	d1f3      	bne.n	8003ee8 <forward_reciprocal+0x6c>
 8003f00:	6998      	ldr	r0, [r3, #24]
 8003f02:	6822      	ldr	r2, [r4, #0]
 8003f04:	6880      	ldr	r0, [r0, #8]
 8003f06:	6893      	ldr	r3, [r2, #8]
 8003f08:	eb00 0185 	add.w	r1, r0, r5, lsl #2
 8003f0c:	eb03 0485 	add.w	r4, r3, r5, lsl #2
 8003f10:	1f09      	subs	r1, r1, #4
 8003f12:	1f22      	subs	r2, r4, #4
 8003f14:	4281      	cmp	r1, r0
 8003f16:	d331      	bcc.n	8003f7c <forward_reciprocal+0x100>
 8003f18:	ed91 0a00 	vldr	s0, [r1]
 8003f1c:	1f09      	subs	r1, r1, #4
 8003f1e:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8003f22:	4281      	cmp	r1, r0
 8003f24:	ee80 0a80 	vdiv.f32	s0, s1, s0
 8003f28:	ed82 0a00 	vstr	s0, [r2]
 8003f2c:	d326      	bcc.n	8003f7c <forward_reciprocal+0x100>
 8003f2e:	edd1 0a00 	vldr	s1, [r1]
 8003f32:	1f09      	subs	r1, r1, #4
 8003f34:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8003f38:	1f13      	subs	r3, r2, #4
 8003f3a:	4281      	cmp	r1, r0
 8003f3c:	ee81 1a20 	vdiv.f32	s2, s2, s1
 8003f40:	ed83 1a00 	vstr	s2, [r3]
 8003f44:	d31a      	bcc.n	8003f7c <forward_reciprocal+0x100>
 8003f46:	ed91 0a00 	vldr	s0, [r1]
 8003f4a:	1f09      	subs	r1, r1, #4
 8003f4c:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8003f50:	f1a2 0408 	sub.w	r4, r2, #8
 8003f54:	4281      	cmp	r1, r0
 8003f56:	ee80 0a80 	vdiv.f32	s0, s1, s0
 8003f5a:	ed84 0a00 	vstr	s0, [r4]
 8003f5e:	d30d      	bcc.n	8003f7c <forward_reciprocal+0x100>
 8003f60:	edd1 0a00 	vldr	s1, [r1]
 8003f64:	f1a2 030c 	sub.w	r3, r2, #12
 8003f68:	1f09      	subs	r1, r1, #4
 8003f6a:	3a10      	subs	r2, #16
 8003f6c:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8003f70:	4281      	cmp	r1, r0
 8003f72:	ee81 1a20 	vdiv.f32	s2, s2, s1
 8003f76:	ed83 1a00 	vstr	s2, [r3]
 8003f7a:	d2cd      	bcs.n	8003f18 <forward_reciprocal+0x9c>
 8003f7c:	bcf0      	pop	{r4, r5, r6, r7}
 8003f7e:	4770      	bx	lr

08003f80 <nl_func_exp_array_f32>:
 8003f80:	b570      	push	{r4, r5, r6, lr}
 8003f82:	688c      	ldr	r4, [r1, #8]
 8003f84:	6880      	ldr	r0, [r0, #8]
 8003f86:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 8003f8a:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8003f8e:	1f0d      	subs	r5, r1, #4
 8003f90:	1f16      	subs	r6, r2, #4
 8003f92:	42a5      	cmp	r5, r4
 8003f94:	f0c0 800a 	bcc.w	8003fac <nl_func_exp_array_f32+0x2c>
 8003f98:	ed95 0a00 	vldr	s0, [r5]
 8003f9c:	1f2d      	subs	r5, r5, #4
 8003f9e:	f007 ff1b 	bl	800bdd8 <expf>
 8003fa2:	ed86 0a00 	vstr	s0, [r6]
 8003fa6:	1f36      	subs	r6, r6, #4
 8003fa8:	42a5      	cmp	r5, r4
 8003faa:	d2f5      	bcs.n	8003f98 <nl_func_exp_array_f32+0x18>
 8003fac:	bd70      	pop	{r4, r5, r6, pc}
	...

08003fb0 <forward_exp>:
 8003fb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003fb2:	b081      	sub	sp, #4
 8003fb4:	6942      	ldr	r2, [r0, #20]
 8003fb6:	f04f 0501 	mov.w	r5, #1
 8003fba:	8811      	ldrh	r1, [r2, #0]
 8003fbc:	2900      	cmp	r1, #0
 8003fbe:	bf1a      	itte	ne
 8003fc0:	6850      	ldrne	r0, [r2, #4]
 8003fc2:	1d00      	addne	r0, r0, #4
 8003fc4:	2004      	moveq	r0, #4
 8003fc6:	6800      	ldr	r0, [r0, #0]
 8003fc8:	2800      	cmp	r0, #0
 8003fca:	bf14      	ite	ne
 8003fcc:	6803      	ldrne	r3, [r0, #0]
 8003fce:	2300      	moveq	r3, #0
 8003fd0:	2902      	cmp	r1, #2
 8003fd2:	bfa6      	itte	ge
 8003fd4:	6850      	ldrge	r0, [r2, #4]
 8003fd6:	3010      	addge	r0, #16
 8003fd8:	2004      	movlt	r0, #4
 8003fda:	6800      	ldr	r0, [r0, #0]
 8003fdc:	2800      	cmp	r0, #0
 8003fde:	bf19      	ittee	ne
 8003fe0:	6800      	ldrne	r0, [r0, #0]
 8003fe2:	f100 0418 	addne.w	r4, r0, #24
 8003fe6:	2100      	moveq	r1, #0
 8003fe8:	f101 0418 	addeq.w	r4, r1, #24
 8003fec:	f103 0108 	add.w	r1, r3, #8
 8003ff0:	680a      	ldr	r2, [r1, #0]
 8003ff2:	0a12      	lsrs	r2, r2, #8
 8003ff4:	d01f      	beq.n	8004036 <forward_exp+0x86>
 8003ff6:	684e      	ldr	r6, [r1, #4]
 8003ff8:	4610      	mov	r0, r2
 8003ffa:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003ffe:	1f0f      	subs	r7, r1, #4
 8004000:	f010 0103 	ands.w	r1, r0, #3
 8004004:	d006      	beq.n	8004014 <forward_exp+0x64>
 8004006:	1e52      	subs	r2, r2, #1
 8004008:	f857 c904 	ldr.w	ip, [r7], #-4
 800400c:	1e49      	subs	r1, r1, #1
 800400e:	fb0c f505 	mul.w	r5, ip, r5
 8004012:	d1f8      	bne.n	8004006 <forward_exp+0x56>
 8004014:	0880      	lsrs	r0, r0, #2
 8004016:	d00e      	beq.n	8004036 <forward_exp+0x86>
 8004018:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 800401c:	3910      	subs	r1, #16
 800401e:	68ca      	ldr	r2, [r1, #12]
 8004020:	688e      	ldr	r6, [r1, #8]
 8004022:	684f      	ldr	r7, [r1, #4]
 8004024:	f851 c910 	ldr.w	ip, [r1], #-16
 8004028:	4372      	muls	r2, r6
 800402a:	437a      	muls	r2, r7
 800402c:	fb0c f202 	mul.w	r2, ip, r2
 8004030:	4355      	muls	r5, r2
 8004032:	1e40      	subs	r0, r0, #1
 8004034:	d1f3      	bne.n	800401e <forward_exp+0x6e>
 8004036:	6998      	ldr	r0, [r3, #24]
 8004038:	6821      	ldr	r1, [r4, #0]
 800403a:	6886      	ldr	r6, [r0, #8]
 800403c:	688a      	ldr	r2, [r1, #8]
 800403e:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 8004042:	eb02 0385 	add.w	r3, r2, r5, lsl #2
 8004046:	1f07      	subs	r7, r0, #4
 8004048:	1f1c      	subs	r4, r3, #4
 800404a:	42b7      	cmp	r7, r6
 800404c:	f0c0 800a 	bcc.w	8004064 <forward_exp+0xb4>
 8004050:	ed97 0a00 	vldr	s0, [r7]
 8004054:	1f3f      	subs	r7, r7, #4
 8004056:	f007 febf 	bl	800bdd8 <expf>
 800405a:	ed84 0a00 	vstr	s0, [r4]
 800405e:	1f24      	subs	r4, r4, #4
 8004060:	42b7      	cmp	r7, r6
 8004062:	d2f5      	bcs.n	8004050 <forward_exp+0xa0>
 8004064:	b001      	add	sp, #4
 8004066:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004068 <nl_func_sigmoid_array_f32>:
 8004068:	b570      	push	{r4, r5, r6, lr}
 800406a:	688c      	ldr	r4, [r1, #8]
 800406c:	6880      	ldr	r0, [r0, #8]
 800406e:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 8004072:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8004076:	1f0d      	subs	r5, r1, #4
 8004078:	1f16      	subs	r6, r2, #4
 800407a:	42a5      	cmp	r5, r4
 800407c:	f0c0 8014 	bcc.w	80040a8 <nl_func_sigmoid_array_f32+0x40>
 8004080:	ed95 0a00 	vldr	s0, [r5]
 8004084:	1f2d      	subs	r5, r5, #4
 8004086:	eeb1 0a40 	vneg.f32	s0, s0
 800408a:	f007 fea5 	bl	800bdd8 <expf>
 800408e:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8004092:	ee70 0a20 	vadd.f32	s1, s0, s1
 8004096:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 800409a:	ee81 1a20 	vdiv.f32	s2, s2, s1
 800409e:	ed86 1a00 	vstr	s2, [r6]
 80040a2:	1f36      	subs	r6, r6, #4
 80040a4:	42a5      	cmp	r5, r4
 80040a6:	d2eb      	bcs.n	8004080 <nl_func_sigmoid_array_f32+0x18>
 80040a8:	bd70      	pop	{r4, r5, r6, pc}
	...

080040ac <forward_sigmoid>:
 80040ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80040ae:	b081      	sub	sp, #4
 80040b0:	6942      	ldr	r2, [r0, #20]
 80040b2:	f04f 0501 	mov.w	r5, #1
 80040b6:	8811      	ldrh	r1, [r2, #0]
 80040b8:	2900      	cmp	r1, #0
 80040ba:	bf1a      	itte	ne
 80040bc:	6850      	ldrne	r0, [r2, #4]
 80040be:	1d00      	addne	r0, r0, #4
 80040c0:	2004      	moveq	r0, #4
 80040c2:	6800      	ldr	r0, [r0, #0]
 80040c4:	2800      	cmp	r0, #0
 80040c6:	bf14      	ite	ne
 80040c8:	6803      	ldrne	r3, [r0, #0]
 80040ca:	2300      	moveq	r3, #0
 80040cc:	2902      	cmp	r1, #2
 80040ce:	bfa6      	itte	ge
 80040d0:	6850      	ldrge	r0, [r2, #4]
 80040d2:	3010      	addge	r0, #16
 80040d4:	2004      	movlt	r0, #4
 80040d6:	6800      	ldr	r0, [r0, #0]
 80040d8:	2800      	cmp	r0, #0
 80040da:	bf19      	ittee	ne
 80040dc:	6800      	ldrne	r0, [r0, #0]
 80040de:	f100 0418 	addne.w	r4, r0, #24
 80040e2:	2100      	moveq	r1, #0
 80040e4:	f101 0418 	addeq.w	r4, r1, #24
 80040e8:	f103 0108 	add.w	r1, r3, #8
 80040ec:	680a      	ldr	r2, [r1, #0]
 80040ee:	0a12      	lsrs	r2, r2, #8
 80040f0:	d01f      	beq.n	8004132 <forward_sigmoid+0x86>
 80040f2:	684e      	ldr	r6, [r1, #4]
 80040f4:	4610      	mov	r0, r2
 80040f6:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 80040fa:	1f0f      	subs	r7, r1, #4
 80040fc:	f010 0103 	ands.w	r1, r0, #3
 8004100:	d006      	beq.n	8004110 <forward_sigmoid+0x64>
 8004102:	1e52      	subs	r2, r2, #1
 8004104:	f857 c904 	ldr.w	ip, [r7], #-4
 8004108:	1e49      	subs	r1, r1, #1
 800410a:	fb0c f505 	mul.w	r5, ip, r5
 800410e:	d1f8      	bne.n	8004102 <forward_sigmoid+0x56>
 8004110:	0880      	lsrs	r0, r0, #2
 8004112:	d00e      	beq.n	8004132 <forward_sigmoid+0x86>
 8004114:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8004118:	3910      	subs	r1, #16
 800411a:	68ca      	ldr	r2, [r1, #12]
 800411c:	688e      	ldr	r6, [r1, #8]
 800411e:	684f      	ldr	r7, [r1, #4]
 8004120:	f851 c910 	ldr.w	ip, [r1], #-16
 8004124:	4372      	muls	r2, r6
 8004126:	437a      	muls	r2, r7
 8004128:	fb0c f202 	mul.w	r2, ip, r2
 800412c:	4355      	muls	r5, r2
 800412e:	1e40      	subs	r0, r0, #1
 8004130:	d1f3      	bne.n	800411a <forward_sigmoid+0x6e>
 8004132:	6998      	ldr	r0, [r3, #24]
 8004134:	6821      	ldr	r1, [r4, #0]
 8004136:	6886      	ldr	r6, [r0, #8]
 8004138:	688a      	ldr	r2, [r1, #8]
 800413a:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 800413e:	eb02 0385 	add.w	r3, r2, r5, lsl #2
 8004142:	1f07      	subs	r7, r0, #4
 8004144:	1f1c      	subs	r4, r3, #4
 8004146:	42b7      	cmp	r7, r6
 8004148:	f0c0 8014 	bcc.w	8004174 <forward_sigmoid+0xc8>
 800414c:	ed97 0a00 	vldr	s0, [r7]
 8004150:	1f3f      	subs	r7, r7, #4
 8004152:	eeb1 0a40 	vneg.f32	s0, s0
 8004156:	f007 fe3f 	bl	800bdd8 <expf>
 800415a:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 800415e:	ee70 0a20 	vadd.f32	s1, s0, s1
 8004162:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8004166:	ee81 1a20 	vdiv.f32	s2, s2, s1
 800416a:	ed84 1a00 	vstr	s2, [r4]
 800416e:	1f24      	subs	r4, r4, #4
 8004170:	42b7      	cmp	r7, r6
 8004172:	d2eb      	bcs.n	800414c <forward_sigmoid+0xa0>
 8004174:	b001      	add	sp, #4
 8004176:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004178 <nl_func_sign_array_f32>:
 8004178:	6889      	ldr	r1, [r1, #8]
 800417a:	6880      	ldr	r0, [r0, #8]
 800417c:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 8004180:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8004184:	1f1b      	subs	r3, r3, #4
 8004186:	1f10      	subs	r0, r2, #4
 8004188:	428b      	cmp	r3, r1
 800418a:	d314      	bcc.n	80041b6 <nl_func_sign_array_f32+0x3e>
 800418c:	f04f 32ff 	mov.w	r2, #4294967295
 8004190:	ed93 0a00 	vldr	s0, [r3]
 8004194:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8004198:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800419c:	bfcc      	ite	gt
 800419e:	ed9f 0a39 	vldrgt	s0, [pc, #228]	; 8004284 <.text_49>
 80041a2:	ee00 2a10 	vmovle	s0, r2
 80041a6:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 80041aa:	1f1b      	subs	r3, r3, #4
 80041ac:	ed80 0a00 	vstr	s0, [r0]
 80041b0:	1f00      	subs	r0, r0, #4
 80041b2:	428b      	cmp	r3, r1
 80041b4:	d2ec      	bcs.n	8004190 <nl_func_sign_array_f32+0x18>
 80041b6:	4770      	bx	lr

080041b8 <forward_sign>:
 80041b8:	b4f0      	push	{r4, r5, r6, r7}
 80041ba:	6942      	ldr	r2, [r0, #20]
 80041bc:	f04f 0501 	mov.w	r5, #1
 80041c0:	8811      	ldrh	r1, [r2, #0]
 80041c2:	2900      	cmp	r1, #0
 80041c4:	bf1a      	itte	ne
 80041c6:	6850      	ldrne	r0, [r2, #4]
 80041c8:	1d00      	addne	r0, r0, #4
 80041ca:	2004      	moveq	r0, #4
 80041cc:	6800      	ldr	r0, [r0, #0]
 80041ce:	2800      	cmp	r0, #0
 80041d0:	bf14      	ite	ne
 80041d2:	6803      	ldrne	r3, [r0, #0]
 80041d4:	2300      	moveq	r3, #0
 80041d6:	2901      	cmp	r1, #1
 80041d8:	bfc6      	itte	gt
 80041da:	6850      	ldrgt	r0, [r2, #4]
 80041dc:	3010      	addgt	r0, #16
 80041de:	2004      	movle	r0, #4
 80041e0:	6800      	ldr	r0, [r0, #0]
 80041e2:	2800      	cmp	r0, #0
 80041e4:	bf19      	ittee	ne
 80041e6:	6800      	ldrne	r0, [r0, #0]
 80041e8:	f100 0418 	addne.w	r4, r0, #24
 80041ec:	2100      	moveq	r1, #0
 80041ee:	f101 0418 	addeq.w	r4, r1, #24
 80041f2:	f103 0108 	add.w	r1, r3, #8
 80041f6:	680a      	ldr	r2, [r1, #0]
 80041f8:	0a12      	lsrs	r2, r2, #8
 80041fa:	d01f      	beq.n	800423c <forward_sign+0x84>
 80041fc:	684e      	ldr	r6, [r1, #4]
 80041fe:	4610      	mov	r0, r2
 8004200:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8004204:	1f0f      	subs	r7, r1, #4
 8004206:	f010 0103 	ands.w	r1, r0, #3
 800420a:	d006      	beq.n	800421a <forward_sign+0x62>
 800420c:	1e52      	subs	r2, r2, #1
 800420e:	f857 c904 	ldr.w	ip, [r7], #-4
 8004212:	1e49      	subs	r1, r1, #1
 8004214:	fb0c f505 	mul.w	r5, ip, r5
 8004218:	d1f8      	bne.n	800420c <forward_sign+0x54>
 800421a:	0880      	lsrs	r0, r0, #2
 800421c:	d00e      	beq.n	800423c <forward_sign+0x84>
 800421e:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8004222:	3910      	subs	r1, #16
 8004224:	68ca      	ldr	r2, [r1, #12]
 8004226:	688e      	ldr	r6, [r1, #8]
 8004228:	684f      	ldr	r7, [r1, #4]
 800422a:	f851 c910 	ldr.w	ip, [r1], #-16
 800422e:	4372      	muls	r2, r6
 8004230:	437a      	muls	r2, r7
 8004232:	fb0c f202 	mul.w	r2, ip, r2
 8004236:	4355      	muls	r5, r2
 8004238:	1e40      	subs	r0, r0, #1
 800423a:	d1f3      	bne.n	8004224 <forward_sign+0x6c>
 800423c:	6998      	ldr	r0, [r3, #24]
 800423e:	6822      	ldr	r2, [r4, #0]
 8004240:	6880      	ldr	r0, [r0, #8]
 8004242:	6893      	ldr	r3, [r2, #8]
 8004244:	eb00 0185 	add.w	r1, r0, r5, lsl #2
 8004248:	eb03 0485 	add.w	r4, r3, r5, lsl #2
 800424c:	1f09      	subs	r1, r1, #4
 800424e:	1f22      	subs	r2, r4, #4
 8004250:	4281      	cmp	r1, r0
 8004252:	d314      	bcc.n	800427e <forward_sign+0xc6>
 8004254:	f04f 33ff 	mov.w	r3, #4294967295
 8004258:	ed91 0a00 	vldr	s0, [r1]
 800425c:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8004260:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004264:	bfcc      	ite	gt
 8004266:	ed9f 0a07 	vldrgt	s0, [pc, #28]	; 8004284 <.text_49>
 800426a:	ee00 3a10 	vmovle	s0, r3
 800426e:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8004272:	1f09      	subs	r1, r1, #4
 8004274:	ed82 0a00 	vstr	s0, [r2]
 8004278:	1f12      	subs	r2, r2, #4
 800427a:	4281      	cmp	r1, r0
 800427c:	d2ec      	bcs.n	8004258 <forward_sign+0xa0>
 800427e:	bcf0      	pop	{r4, r5, r6, r7}
 8004280:	4770      	bx	lr
	...

08004284 <.text_49>:
 8004284:	00000001 	.word	0x00000001

08004288 <nl_func_sqrt_array_f32>:
 8004288:	b570      	push	{r4, r5, r6, lr}
 800428a:	460c      	mov	r4, r1
 800428c:	6880      	ldr	r0, [r0, #8]
 800428e:	68a1      	ldr	r1, [r4, #8]
 8004290:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 8004294:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8004298:	1f1d      	subs	r5, r3, #4
 800429a:	1f16      	subs	r6, r2, #4
 800429c:	428d      	cmp	r5, r1
 800429e:	d30a      	bcc.n	80042b6 <nl_func_sqrt_array_f32+0x2e>
 80042a0:	ed95 0a00 	vldr	s0, [r5]
 80042a4:	1f2d      	subs	r5, r5, #4
 80042a6:	f002 fe87 	bl	8006fb8 <ai_math_sqrt>
 80042aa:	ed86 0a00 	vstr	s0, [r6]
 80042ae:	68a0      	ldr	r0, [r4, #8]
 80042b0:	1f36      	subs	r6, r6, #4
 80042b2:	4285      	cmp	r5, r0
 80042b4:	d2f4      	bcs.n	80042a0 <nl_func_sqrt_array_f32+0x18>
 80042b6:	bd70      	pop	{r4, r5, r6, pc}

080042b8 <forward_sqrt>:
 80042b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80042ba:	b081      	sub	sp, #4
 80042bc:	6942      	ldr	r2, [r0, #20]
 80042be:	f04f 0501 	mov.w	r5, #1
 80042c2:	8811      	ldrh	r1, [r2, #0]
 80042c4:	2900      	cmp	r1, #0
 80042c6:	bf1a      	itte	ne
 80042c8:	6850      	ldrne	r0, [r2, #4]
 80042ca:	1d00      	addne	r0, r0, #4
 80042cc:	2004      	moveq	r0, #4
 80042ce:	6800      	ldr	r0, [r0, #0]
 80042d0:	2800      	cmp	r0, #0
 80042d2:	bf14      	ite	ne
 80042d4:	6803      	ldrne	r3, [r0, #0]
 80042d6:	2300      	moveq	r3, #0
 80042d8:	2902      	cmp	r1, #2
 80042da:	bfa6      	itte	ge
 80042dc:	6850      	ldrge	r0, [r2, #4]
 80042de:	3010      	addge	r0, #16
 80042e0:	2004      	movlt	r0, #4
 80042e2:	6800      	ldr	r0, [r0, #0]
 80042e4:	2800      	cmp	r0, #0
 80042e6:	bf19      	ittee	ne
 80042e8:	6800      	ldrne	r0, [r0, #0]
 80042ea:	f100 0418 	addne.w	r4, r0, #24
 80042ee:	2100      	moveq	r1, #0
 80042f0:	f101 0418 	addeq.w	r4, r1, #24
 80042f4:	f103 0108 	add.w	r1, r3, #8
 80042f8:	680a      	ldr	r2, [r1, #0]
 80042fa:	0a12      	lsrs	r2, r2, #8
 80042fc:	d01f      	beq.n	800433e <forward_sqrt+0x86>
 80042fe:	684e      	ldr	r6, [r1, #4]
 8004300:	4610      	mov	r0, r2
 8004302:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8004306:	1f0f      	subs	r7, r1, #4
 8004308:	f010 0103 	ands.w	r1, r0, #3
 800430c:	d006      	beq.n	800431c <forward_sqrt+0x64>
 800430e:	1e52      	subs	r2, r2, #1
 8004310:	f857 c904 	ldr.w	ip, [r7], #-4
 8004314:	1e49      	subs	r1, r1, #1
 8004316:	fb0c f505 	mul.w	r5, ip, r5
 800431a:	d1f8      	bne.n	800430e <forward_sqrt+0x56>
 800431c:	0880      	lsrs	r0, r0, #2
 800431e:	d00e      	beq.n	800433e <forward_sqrt+0x86>
 8004320:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8004324:	3910      	subs	r1, #16
 8004326:	68ca      	ldr	r2, [r1, #12]
 8004328:	688e      	ldr	r6, [r1, #8]
 800432a:	684f      	ldr	r7, [r1, #4]
 800432c:	f851 c910 	ldr.w	ip, [r1], #-16
 8004330:	4372      	muls	r2, r6
 8004332:	437a      	muls	r2, r7
 8004334:	fb0c f202 	mul.w	r2, ip, r2
 8004338:	4355      	muls	r5, r2
 800433a:	1e40      	subs	r0, r0, #1
 800433c:	d1f3      	bne.n	8004326 <forward_sqrt+0x6e>
 800433e:	699e      	ldr	r6, [r3, #24]
 8004340:	6822      	ldr	r2, [r4, #0]
 8004342:	68b0      	ldr	r0, [r6, #8]
 8004344:	6893      	ldr	r3, [r2, #8]
 8004346:	eb00 0185 	add.w	r1, r0, r5, lsl #2
 800434a:	eb03 0485 	add.w	r4, r3, r5, lsl #2
 800434e:	1f0f      	subs	r7, r1, #4
 8004350:	1f24      	subs	r4, r4, #4
 8004352:	4287      	cmp	r7, r0
 8004354:	f0c0 800b 	bcc.w	800436e <forward_sqrt+0xb6>
 8004358:	ed97 0a00 	vldr	s0, [r7]
 800435c:	1f3f      	subs	r7, r7, #4
 800435e:	f002 fe2b 	bl	8006fb8 <ai_math_sqrt>
 8004362:	ed84 0a00 	vstr	s0, [r4]
 8004366:	68b0      	ldr	r0, [r6, #8]
 8004368:	1f24      	subs	r4, r4, #4
 800436a:	4287      	cmp	r7, r0
 800436c:	d2f4      	bcs.n	8004358 <forward_sqrt+0xa0>
 800436e:	b001      	add	sp, #4
 8004370:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08004374 <nl_func_soft_plus_array_f32>:
 8004374:	b570      	push	{r4, r5, r6, lr}
 8004376:	688c      	ldr	r4, [r1, #8]
 8004378:	6880      	ldr	r0, [r0, #8]
 800437a:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 800437e:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8004382:	1f0d      	subs	r5, r1, #4
 8004384:	1f16      	subs	r6, r2, #4
 8004386:	42a5      	cmp	r5, r4
 8004388:	f0c0 8010 	bcc.w	80043ac <nl_func_soft_plus_array_f32+0x38>
 800438c:	ed95 0a00 	vldr	s0, [r5]
 8004390:	1f2d      	subs	r5, r5, #4
 8004392:	f007 fd21 	bl	800bdd8 <expf>
 8004396:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 800439a:	ee30 0a20 	vadd.f32	s0, s0, s1
 800439e:	f007 fdf1 	bl	800bf84 <logf>
 80043a2:	ed86 0a00 	vstr	s0, [r6]
 80043a6:	1f36      	subs	r6, r6, #4
 80043a8:	42a5      	cmp	r5, r4
 80043aa:	d2ef      	bcs.n	800438c <nl_func_soft_plus_array_f32+0x18>
 80043ac:	bd70      	pop	{r4, r5, r6, pc}
	...

080043b0 <forward_soft_plus>:
 80043b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80043b2:	b081      	sub	sp, #4
 80043b4:	6942      	ldr	r2, [r0, #20]
 80043b6:	f04f 0501 	mov.w	r5, #1
 80043ba:	8811      	ldrh	r1, [r2, #0]
 80043bc:	2900      	cmp	r1, #0
 80043be:	bf1a      	itte	ne
 80043c0:	6850      	ldrne	r0, [r2, #4]
 80043c2:	1d00      	addne	r0, r0, #4
 80043c4:	2004      	moveq	r0, #4
 80043c6:	6800      	ldr	r0, [r0, #0]
 80043c8:	2800      	cmp	r0, #0
 80043ca:	bf14      	ite	ne
 80043cc:	6803      	ldrne	r3, [r0, #0]
 80043ce:	2300      	moveq	r3, #0
 80043d0:	2902      	cmp	r1, #2
 80043d2:	bfa6      	itte	ge
 80043d4:	6850      	ldrge	r0, [r2, #4]
 80043d6:	3010      	addge	r0, #16
 80043d8:	2004      	movlt	r0, #4
 80043da:	6800      	ldr	r0, [r0, #0]
 80043dc:	2800      	cmp	r0, #0
 80043de:	bf19      	ittee	ne
 80043e0:	6800      	ldrne	r0, [r0, #0]
 80043e2:	f100 0418 	addne.w	r4, r0, #24
 80043e6:	2100      	moveq	r1, #0
 80043e8:	f101 0418 	addeq.w	r4, r1, #24
 80043ec:	f103 0108 	add.w	r1, r3, #8
 80043f0:	680a      	ldr	r2, [r1, #0]
 80043f2:	0a12      	lsrs	r2, r2, #8
 80043f4:	d01f      	beq.n	8004436 <forward_soft_plus+0x86>
 80043f6:	684e      	ldr	r6, [r1, #4]
 80043f8:	4610      	mov	r0, r2
 80043fa:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 80043fe:	1f0f      	subs	r7, r1, #4
 8004400:	f010 0103 	ands.w	r1, r0, #3
 8004404:	d006      	beq.n	8004414 <forward_soft_plus+0x64>
 8004406:	1e52      	subs	r2, r2, #1
 8004408:	f857 c904 	ldr.w	ip, [r7], #-4
 800440c:	1e49      	subs	r1, r1, #1
 800440e:	fb0c f505 	mul.w	r5, ip, r5
 8004412:	d1f8      	bne.n	8004406 <forward_soft_plus+0x56>
 8004414:	0880      	lsrs	r0, r0, #2
 8004416:	d00e      	beq.n	8004436 <forward_soft_plus+0x86>
 8004418:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 800441c:	3910      	subs	r1, #16
 800441e:	68ca      	ldr	r2, [r1, #12]
 8004420:	688e      	ldr	r6, [r1, #8]
 8004422:	684f      	ldr	r7, [r1, #4]
 8004424:	f851 c910 	ldr.w	ip, [r1], #-16
 8004428:	4372      	muls	r2, r6
 800442a:	437a      	muls	r2, r7
 800442c:	fb0c f202 	mul.w	r2, ip, r2
 8004430:	4355      	muls	r5, r2
 8004432:	1e40      	subs	r0, r0, #1
 8004434:	d1f3      	bne.n	800441e <forward_soft_plus+0x6e>
 8004436:	6998      	ldr	r0, [r3, #24]
 8004438:	6821      	ldr	r1, [r4, #0]
 800443a:	6886      	ldr	r6, [r0, #8]
 800443c:	688a      	ldr	r2, [r1, #8]
 800443e:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 8004442:	eb02 0385 	add.w	r3, r2, r5, lsl #2
 8004446:	1f07      	subs	r7, r0, #4
 8004448:	1f1c      	subs	r4, r3, #4
 800444a:	42b7      	cmp	r7, r6
 800444c:	f0c0 8010 	bcc.w	8004470 <forward_soft_plus+0xc0>
 8004450:	ed97 0a00 	vldr	s0, [r7]
 8004454:	1f3f      	subs	r7, r7, #4
 8004456:	f007 fcbf 	bl	800bdd8 <expf>
 800445a:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 800445e:	ee30 0a20 	vadd.f32	s0, s0, s1
 8004462:	f007 fd8f 	bl	800bf84 <logf>
 8004466:	ed84 0a00 	vstr	s0, [r4]
 800446a:	1f24      	subs	r4, r4, #4
 800446c:	42b7      	cmp	r7, r6
 800446e:	d2ef      	bcs.n	8004450 <forward_soft_plus+0xa0>
 8004470:	b001      	add	sp, #4
 8004472:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004474 <nl_func_soft_sign_array_f32>:
 8004474:	6889      	ldr	r1, [r1, #8]
 8004476:	6880      	ldr	r0, [r0, #8]
 8004478:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 800447c:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8004480:	1f1b      	subs	r3, r3, #4
 8004482:	1f10      	subs	r0, r2, #4
 8004484:	428b      	cmp	r3, r1
 8004486:	d30f      	bcc.n	80044a8 <nl_func_soft_sign_array_f32+0x34>
 8004488:	ed93 0a00 	vldr	s0, [r3]
 800448c:	1f1b      	subs	r3, r3, #4
 800448e:	eef0 0ac0 	vabs.f32	s1, s0
 8004492:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8004496:	ee70 0a81 	vadd.f32	s1, s1, s2
 800449a:	ee80 0a20 	vdiv.f32	s0, s0, s1
 800449e:	ed80 0a00 	vstr	s0, [r0]
 80044a2:	1f00      	subs	r0, r0, #4
 80044a4:	428b      	cmp	r3, r1
 80044a6:	d2ef      	bcs.n	8004488 <nl_func_soft_sign_array_f32+0x14>
 80044a8:	4770      	bx	lr
	...

080044ac <forward_soft_sign>:
 80044ac:	b4f0      	push	{r4, r5, r6, r7}
 80044ae:	6942      	ldr	r2, [r0, #20]
 80044b0:	f04f 0501 	mov.w	r5, #1
 80044b4:	8811      	ldrh	r1, [r2, #0]
 80044b6:	2900      	cmp	r1, #0
 80044b8:	bf1a      	itte	ne
 80044ba:	6850      	ldrne	r0, [r2, #4]
 80044bc:	1d00      	addne	r0, r0, #4
 80044be:	2004      	moveq	r0, #4
 80044c0:	6800      	ldr	r0, [r0, #0]
 80044c2:	2800      	cmp	r0, #0
 80044c4:	bf14      	ite	ne
 80044c6:	6803      	ldrne	r3, [r0, #0]
 80044c8:	2300      	moveq	r3, #0
 80044ca:	2902      	cmp	r1, #2
 80044cc:	bfa6      	itte	ge
 80044ce:	6850      	ldrge	r0, [r2, #4]
 80044d0:	3010      	addge	r0, #16
 80044d2:	2004      	movlt	r0, #4
 80044d4:	6800      	ldr	r0, [r0, #0]
 80044d6:	2800      	cmp	r0, #0
 80044d8:	bf19      	ittee	ne
 80044da:	6800      	ldrne	r0, [r0, #0]
 80044dc:	f100 0418 	addne.w	r4, r0, #24
 80044e0:	2100      	moveq	r1, #0
 80044e2:	f101 0418 	addeq.w	r4, r1, #24
 80044e6:	f103 0108 	add.w	r1, r3, #8
 80044ea:	680a      	ldr	r2, [r1, #0]
 80044ec:	0a12      	lsrs	r2, r2, #8
 80044ee:	d01f      	beq.n	8004530 <forward_soft_sign+0x84>
 80044f0:	684e      	ldr	r6, [r1, #4]
 80044f2:	4610      	mov	r0, r2
 80044f4:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 80044f8:	1f0f      	subs	r7, r1, #4
 80044fa:	f010 0103 	ands.w	r1, r0, #3
 80044fe:	d006      	beq.n	800450e <forward_soft_sign+0x62>
 8004500:	1e52      	subs	r2, r2, #1
 8004502:	f857 c904 	ldr.w	ip, [r7], #-4
 8004506:	1e49      	subs	r1, r1, #1
 8004508:	fb0c f505 	mul.w	r5, ip, r5
 800450c:	d1f8      	bne.n	8004500 <forward_soft_sign+0x54>
 800450e:	0880      	lsrs	r0, r0, #2
 8004510:	d00e      	beq.n	8004530 <forward_soft_sign+0x84>
 8004512:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8004516:	3910      	subs	r1, #16
 8004518:	68ca      	ldr	r2, [r1, #12]
 800451a:	688e      	ldr	r6, [r1, #8]
 800451c:	684f      	ldr	r7, [r1, #4]
 800451e:	f851 c910 	ldr.w	ip, [r1], #-16
 8004522:	4372      	muls	r2, r6
 8004524:	437a      	muls	r2, r7
 8004526:	fb0c f202 	mul.w	r2, ip, r2
 800452a:	4355      	muls	r5, r2
 800452c:	1e40      	subs	r0, r0, #1
 800452e:	d1f3      	bne.n	8004518 <forward_soft_sign+0x6c>
 8004530:	6998      	ldr	r0, [r3, #24]
 8004532:	6822      	ldr	r2, [r4, #0]
 8004534:	6880      	ldr	r0, [r0, #8]
 8004536:	6893      	ldr	r3, [r2, #8]
 8004538:	eb00 0185 	add.w	r1, r0, r5, lsl #2
 800453c:	eb03 0485 	add.w	r4, r3, r5, lsl #2
 8004540:	1f09      	subs	r1, r1, #4
 8004542:	1f22      	subs	r2, r4, #4
 8004544:	4281      	cmp	r1, r0
 8004546:	d30f      	bcc.n	8004568 <forward_soft_sign+0xbc>
 8004548:	ed91 0a00 	vldr	s0, [r1]
 800454c:	1f09      	subs	r1, r1, #4
 800454e:	eef0 0ac0 	vabs.f32	s1, s0
 8004552:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8004556:	ee70 0a81 	vadd.f32	s1, s1, s2
 800455a:	ee80 0a20 	vdiv.f32	s0, s0, s1
 800455e:	ed82 0a00 	vstr	s0, [r2]
 8004562:	1f12      	subs	r2, r2, #4
 8004564:	4281      	cmp	r1, r0
 8004566:	d2ef      	bcs.n	8004548 <forward_soft_sign+0x9c>
 8004568:	bcf0      	pop	{r4, r5, r6, r7}
 800456a:	4770      	bx	lr

0800456c <nl_func_tanh_array_f32>:
 800456c:	b570      	push	{r4, r5, r6, lr}
 800456e:	688c      	ldr	r4, [r1, #8]
 8004570:	6880      	ldr	r0, [r0, #8]
 8004572:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 8004576:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800457a:	1f0d      	subs	r5, r1, #4
 800457c:	1f16      	subs	r6, r2, #4
 800457e:	42a5      	cmp	r5, r4
 8004580:	f0c0 800a 	bcc.w	8004598 <nl_func_tanh_array_f32+0x2c>
 8004584:	ed95 0a00 	vldr	s0, [r5]
 8004588:	1f2d      	subs	r5, r5, #4
 800458a:	f007 f9ff 	bl	800b98c <tanhf>
 800458e:	ed86 0a00 	vstr	s0, [r6]
 8004592:	1f36      	subs	r6, r6, #4
 8004594:	42a5      	cmp	r5, r4
 8004596:	d2f5      	bcs.n	8004584 <nl_func_tanh_array_f32+0x18>
 8004598:	bd70      	pop	{r4, r5, r6, pc}
	...

0800459c <forward_tanh>:
 800459c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800459e:	b081      	sub	sp, #4
 80045a0:	6942      	ldr	r2, [r0, #20]
 80045a2:	f04f 0501 	mov.w	r5, #1
 80045a6:	8811      	ldrh	r1, [r2, #0]
 80045a8:	2900      	cmp	r1, #0
 80045aa:	bf1a      	itte	ne
 80045ac:	6850      	ldrne	r0, [r2, #4]
 80045ae:	1d00      	addne	r0, r0, #4
 80045b0:	2004      	moveq	r0, #4
 80045b2:	6800      	ldr	r0, [r0, #0]
 80045b4:	2800      	cmp	r0, #0
 80045b6:	bf14      	ite	ne
 80045b8:	6803      	ldrne	r3, [r0, #0]
 80045ba:	2300      	moveq	r3, #0
 80045bc:	2902      	cmp	r1, #2
 80045be:	bfa6      	itte	ge
 80045c0:	6850      	ldrge	r0, [r2, #4]
 80045c2:	3010      	addge	r0, #16
 80045c4:	2004      	movlt	r0, #4
 80045c6:	6800      	ldr	r0, [r0, #0]
 80045c8:	2800      	cmp	r0, #0
 80045ca:	bf19      	ittee	ne
 80045cc:	6800      	ldrne	r0, [r0, #0]
 80045ce:	f100 0418 	addne.w	r4, r0, #24
 80045d2:	2100      	moveq	r1, #0
 80045d4:	f101 0418 	addeq.w	r4, r1, #24
 80045d8:	f103 0108 	add.w	r1, r3, #8
 80045dc:	680a      	ldr	r2, [r1, #0]
 80045de:	0a12      	lsrs	r2, r2, #8
 80045e0:	d01f      	beq.n	8004622 <forward_tanh+0x86>
 80045e2:	684e      	ldr	r6, [r1, #4]
 80045e4:	4610      	mov	r0, r2
 80045e6:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 80045ea:	1f0f      	subs	r7, r1, #4
 80045ec:	f010 0103 	ands.w	r1, r0, #3
 80045f0:	d006      	beq.n	8004600 <forward_tanh+0x64>
 80045f2:	1e52      	subs	r2, r2, #1
 80045f4:	f857 c904 	ldr.w	ip, [r7], #-4
 80045f8:	1e49      	subs	r1, r1, #1
 80045fa:	fb0c f505 	mul.w	r5, ip, r5
 80045fe:	d1f8      	bne.n	80045f2 <forward_tanh+0x56>
 8004600:	0880      	lsrs	r0, r0, #2
 8004602:	d00e      	beq.n	8004622 <forward_tanh+0x86>
 8004604:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8004608:	3910      	subs	r1, #16
 800460a:	68ca      	ldr	r2, [r1, #12]
 800460c:	688e      	ldr	r6, [r1, #8]
 800460e:	684f      	ldr	r7, [r1, #4]
 8004610:	f851 c910 	ldr.w	ip, [r1], #-16
 8004614:	4372      	muls	r2, r6
 8004616:	437a      	muls	r2, r7
 8004618:	fb0c f202 	mul.w	r2, ip, r2
 800461c:	4355      	muls	r5, r2
 800461e:	1e40      	subs	r0, r0, #1
 8004620:	d1f3      	bne.n	800460a <forward_tanh+0x6e>
 8004622:	6998      	ldr	r0, [r3, #24]
 8004624:	6821      	ldr	r1, [r4, #0]
 8004626:	6886      	ldr	r6, [r0, #8]
 8004628:	688a      	ldr	r2, [r1, #8]
 800462a:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 800462e:	eb02 0385 	add.w	r3, r2, r5, lsl #2
 8004632:	1f07      	subs	r7, r0, #4
 8004634:	1f1c      	subs	r4, r3, #4
 8004636:	42b7      	cmp	r7, r6
 8004638:	f0c0 800a 	bcc.w	8004650 <forward_tanh+0xb4>
 800463c:	ed97 0a00 	vldr	s0, [r7]
 8004640:	1f3f      	subs	r7, r7, #4
 8004642:	f007 f9a3 	bl	800b98c <tanhf>
 8004646:	ed84 0a00 	vstr	s0, [r4]
 800464a:	1f24      	subs	r4, r4, #4
 800464c:	42b7      	cmp	r7, r6
 800464e:	d2f5      	bcs.n	800463c <forward_tanh+0xa0>
 8004650:	b001      	add	sp, #4
 8004652:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004654 <nl_func_relu_array_f32>:
 8004654:	6889      	ldr	r1, [r1, #8]
 8004656:	6880      	ldr	r0, [r0, #8]
 8004658:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 800465c:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8004660:	1f1b      	subs	r3, r3, #4
 8004662:	1f10      	subs	r0, r2, #4
 8004664:	428b      	cmp	r3, r1
 8004666:	d30e      	bcc.n	8004686 <nl_func_relu_array_f32+0x32>
 8004668:	ed93 0a00 	vldr	s0, [r3]
 800466c:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8004670:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004674:	bf48      	it	mi
 8004676:	ed9f 0a7c 	vldrmi	s0, [pc, #496]	; 8004868 <.text_62>
 800467a:	ed80 0a00 	vstr	s0, [r0]
 800467e:	1f1b      	subs	r3, r3, #4
 8004680:	1f00      	subs	r0, r0, #4
 8004682:	428b      	cmp	r3, r1
 8004684:	d2f0      	bcs.n	8004668 <nl_func_relu_array_f32+0x14>
 8004686:	4770      	bx	lr

08004688 <nl_func_sm_channel_f32>:
 8004688:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800468c:	4614      	mov	r4, r2
 800468e:	2c02      	cmp	r4, #2
 8004690:	ed2d 8b02 	vpush	{d8}
 8004694:	688f      	ldr	r7, [r1, #8]
 8004696:	6886      	ldr	r6, [r0, #8]
 8004698:	eddf 8a73 	vldr	s17, [pc, #460]	; 8004868 <.text_62>
 800469c:	ed97 8a00 	vldr	s16, [r7]
 80046a0:	d33d      	bcc.n	800471e <nl_func_sm_channel_f32+0x96>
 80046a2:	1e61      	subs	r1, r4, #1
 80046a4:	1d3a      	adds	r2, r7, #4
 80046a6:	f011 0003 	ands.w	r0, r1, #3
 80046aa:	d00c      	beq.n	80046c6 <nl_func_sm_channel_f32+0x3e>
 80046ac:	ed92 0a00 	vldr	s0, [r2]
 80046b0:	f102 0204 	add.w	r2, r2, #4
 80046b4:	eeb4 0a48 	vcmp.f32	s0, s16
 80046b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046bc:	bf58      	it	pl
 80046be:	eeb0 8a40 	vmovpl.f32	s16, s0
 80046c2:	1e40      	subs	r0, r0, #1
 80046c4:	d1f2      	bne.n	80046ac <nl_func_sm_channel_f32+0x24>
 80046c6:	0889      	lsrs	r1, r1, #2
 80046c8:	f000 802b 	beq.w	8004722 <nl_func_sm_channel_f32+0x9a>
 80046cc:	ed92 0a00 	vldr	s0, [r2]
 80046d0:	eeb4 0a48 	vcmp.f32	s0, s16
 80046d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046d8:	bf58      	it	pl
 80046da:	eeb0 8a40 	vmovpl.f32	s16, s0
 80046de:	ed92 0a01 	vldr	s0, [r2, #4]
 80046e2:	eeb4 0a48 	vcmp.f32	s0, s16
 80046e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046ea:	bf58      	it	pl
 80046ec:	eeb0 8a40 	vmovpl.f32	s16, s0
 80046f0:	ed92 0a02 	vldr	s0, [r2, #8]
 80046f4:	eeb4 0a48 	vcmp.f32	s0, s16
 80046f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046fc:	bf58      	it	pl
 80046fe:	eeb0 8a40 	vmovpl.f32	s16, s0
 8004702:	ed92 0a03 	vldr	s0, [r2, #12]
 8004706:	f102 0210 	add.w	r2, r2, #16
 800470a:	eeb4 0a48 	vcmp.f32	s0, s16
 800470e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004712:	bf58      	it	pl
 8004714:	eeb0 8a40 	vmovpl.f32	s16, s0
 8004718:	1e49      	subs	r1, r1, #1
 800471a:	d1d7      	bne.n	80046cc <nl_func_sm_channel_f32+0x44>
 800471c:	e001      	b.n	8004722 <nl_func_sm_channel_f32+0x9a>
 800471e:	2c00      	cmp	r4, #0
 8004720:	d040      	beq.n	80047a4 <nl_func_sm_channel_f32+0x11c>
 8004722:	46b0      	mov	r8, r6
 8004724:	ea4f 0504 	mov.w	r5, r4
 8004728:	ed97 0a00 	vldr	s0, [r7]
 800472c:	1d3f      	adds	r7, r7, #4
 800472e:	ee30 0a48 	vsub.f32	s0, s0, s16
 8004732:	f007 fb51 	bl	800bdd8 <expf>
 8004736:	1e6d      	subs	r5, r5, #1
 8004738:	ed88 0a00 	vstr	s0, [r8]
 800473c:	ee78 8a80 	vadd.f32	s17, s17, s0
 8004740:	f108 0804 	add.w	r8, r8, #4
 8004744:	d1f0      	bne.n	8004728 <nl_func_sm_channel_f32+0xa0>
 8004746:	f014 0003 	ands.w	r0, r4, #3
 800474a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800474e:	ee80 0a28 	vdiv.f32	s0, s0, s17
 8004752:	d009      	beq.n	8004768 <nl_func_sm_channel_f32+0xe0>
 8004754:	edd6 0a00 	vldr	s1, [r6]
 8004758:	1e40      	subs	r0, r0, #1
 800475a:	ee60 0a80 	vmul.f32	s1, s1, s0
 800475e:	edc6 0a00 	vstr	s1, [r6]
 8004762:	f106 0604 	add.w	r6, r6, #4
 8004766:	d1f5      	bne.n	8004754 <nl_func_sm_channel_f32+0xcc>
 8004768:	08a4      	lsrs	r4, r4, #2
 800476a:	d01b      	beq.n	80047a4 <nl_func_sm_channel_f32+0x11c>
 800476c:	edd6 0a00 	vldr	s1, [r6]
 8004770:	1e64      	subs	r4, r4, #1
 8004772:	ee60 0a80 	vmul.f32	s1, s1, s0
 8004776:	edc6 0a00 	vstr	s1, [r6]
 800477a:	ed96 1a01 	vldr	s2, [r6, #4]
 800477e:	ee21 1a00 	vmul.f32	s2, s2, s0
 8004782:	ed86 1a01 	vstr	s2, [r6, #4]
 8004786:	edd6 0a02 	vldr	s1, [r6, #8]
 800478a:	ed96 1a03 	vldr	s2, [r6, #12]
 800478e:	ee60 1a80 	vmul.f32	s3, s1, s0
 8004792:	ee61 0a00 	vmul.f32	s1, s2, s0
 8004796:	edc6 1a02 	vstr	s3, [r6, #8]
 800479a:	edc6 0a03 	vstr	s1, [r6, #12]
 800479e:	f106 0610 	add.w	r6, r6, #16
 80047a2:	d1e3      	bne.n	800476c <nl_func_sm_channel_f32+0xe4>
 80047a4:	ecbd 8b02 	vpop	{d8}
 80047a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080047ac <nl_func_sm_array_f32>:
 80047ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80047b0:	4604      	mov	r4, r0
 80047b2:	460d      	mov	r5, r1
 80047b4:	9f08      	ldr	r7, [sp, #32]
 80047b6:	68a8      	ldr	r0, [r5, #8]
 80047b8:	9e09      	ldr	r6, [sp, #36]	; 0x24
 80047ba:	f8d4 8008 	ldr.w	r8, [r4, #8]
 80047be:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 80047c2:	f8d5 c00c 	ldr.w	ip, [r5, #12]
 80047c6:	00bf      	lsls	r7, r7, #2
 80047c8:	427f      	negs	r7, r7
 80047ca:	eb08 0282 	add.w	r2, r8, r2, lsl #2
 80047ce:	00b6      	lsls	r6, r6, #2
 80047d0:	eb01 0a07 	add.w	sl, r1, r7
 80047d4:	4276      	negs	r6, r6
 80047d6:	45e2      	cmp	sl, ip
 80047d8:	eb02 0906 	add.w	r9, r2, r6
 80047dc:	d310      	bcc.n	8004800 <nl_func_sm_array_f32+0x54>
 80047de:	4698      	mov	r8, r3
 80047e0:	f8c5 a008 	str.w	sl, [r5, #8]
 80047e4:	2300      	movs	r3, #0
 80047e6:	f8c4 9008 	str.w	r9, [r4, #8]
 80047ea:	4642      	mov	r2, r8
 80047ec:	4629      	mov	r1, r5
 80047ee:	4620      	mov	r0, r4
 80047f0:	f7ff ff4a 	bl	8004688 <nl_func_sm_channel_f32>
 80047f4:	f8d5 c00c 	ldr.w	ip, [r5, #12]
 80047f8:	44ba      	add	sl, r7
 80047fa:	44b1      	add	r9, r6
 80047fc:	45e2      	cmp	sl, ip
 80047fe:	d2ef      	bcs.n	80047e0 <nl_func_sm_array_f32+0x34>
 8004800:	68e8      	ldr	r0, [r5, #12]
 8004802:	60a8      	str	r0, [r5, #8]
 8004804:	68e1      	ldr	r1, [r4, #12]
 8004806:	60a1      	str	r1, [r4, #8]
 8004808:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800480c <nl_func_hard_sigmoid_array_f32>:
 800480c:	6889      	ldr	r1, [r1, #8]
 800480e:	6880      	ldr	r0, [r0, #8]
 8004810:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 8004814:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8004818:	1f1b      	subs	r3, r3, #4
 800481a:	1f10      	subs	r0, r2, #4
 800481c:	428b      	cmp	r3, r1
 800481e:	d321      	bcc.n	8004864 <nl_func_hard_sigmoid_array_f32+0x58>
 8004820:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8004824:	eddf 0aba 	vldr	s1, [pc, #744]	; 8004b10 <.text_68>
 8004828:	edd3 1a00 	vldr	s3, [r3]
 800482c:	ed9f 2ab9 	vldr	s4, [pc, #740]	; 8004b14 <.text_69>
 8004830:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
 8004834:	ee01 1a82 	vmla.f32	s2, s3, s4
 8004838:	eeb4 1a60 	vcmp.f32	s2, s1
 800483c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004840:	da08      	bge.n	8004854 <nl_func_hard_sigmoid_array_f32+0x48>
 8004842:	eeb5 1a40 	vcmp.f32	s2, #0.0
 8004846:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800484a:	d505      	bpl.n	8004858 <nl_func_hard_sigmoid_array_f32+0x4c>
 800484c:	ed9f 1a06 	vldr	s2, [pc, #24]	; 8004868 <.text_62>
 8004850:	e002      	b.n	8004858 <nl_func_hard_sigmoid_array_f32+0x4c>
 8004852:	bf00      	nop
 8004854:	eeb0 1a40 	vmov.f32	s2, s0
 8004858:	ed80 1a00 	vstr	s2, [r0]
 800485c:	1f1b      	subs	r3, r3, #4
 800485e:	1f00      	subs	r0, r0, #4
 8004860:	428b      	cmp	r3, r1
 8004862:	d2e1      	bcs.n	8004828 <nl_func_hard_sigmoid_array_f32+0x1c>
 8004864:	4770      	bx	lr
	...

08004868 <.text_62>:
 8004868:	00000000 	.word	0x00000000

0800486c <nl_func_clip_array_f32>:
 800486c:	6889      	ldr	r1, [r1, #8]
 800486e:	6880      	ldr	r0, [r0, #8]
 8004870:	ed93 0a00 	vldr	s0, [r3]
 8004874:	edd3 0a01 	vldr	s1, [r3, #4]
 8004878:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 800487c:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8004880:	1f1b      	subs	r3, r3, #4
 8004882:	1f10      	subs	r0, r2, #4
 8004884:	428b      	cmp	r3, r1
 8004886:	d315      	bcc.n	80048b4 <nl_func_clip_array_f32+0x48>
 8004888:	ed93 1a00 	vldr	s2, [r3]
 800488c:	eeb4 0a41 	vcmp.f32	s0, s2
 8004890:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004894:	bf58      	it	pl
 8004896:	eeb0 1a40 	vmovpl.f32	s2, s0
 800489a:	eeb4 1a60 	vcmp.f32	s2, s1
 800489e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048a2:	bf58      	it	pl
 80048a4:	eeb0 1a60 	vmovpl.f32	s2, s1
 80048a8:	ed80 1a00 	vstr	s2, [r0]
 80048ac:	1f1b      	subs	r3, r3, #4
 80048ae:	1f00      	subs	r0, r0, #4
 80048b0:	428b      	cmp	r3, r1
 80048b2:	d2e9      	bcs.n	8004888 <nl_func_clip_array_f32+0x1c>
 80048b4:	4770      	bx	lr
	...

080048b8 <nl_func_hardmax_array_f32>:
 80048b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80048bc:	6852      	ldr	r2, [r2, #4]
 80048be:	f8d0 8008 	ldr.w	r8, [r0, #8]
 80048c2:	6855      	ldr	r5, [r2, #4]
 80048c4:	688e      	ldr	r6, [r1, #8]
 80048c6:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80048ca:	68d4      	ldr	r4, [r2, #12]
 80048cc:	4640      	mov	r0, r8
 80048ce:	436c      	muls	r4, r5
 80048d0:	00a1      	lsls	r1, r4, #2
 80048d2:	f006 fa8b 	bl	800adec <__aeabi_memclr>
 80048d6:	2200      	movs	r2, #0
 80048d8:	2c00      	cmp	r4, #0
 80048da:	4633      	mov	r3, r6
 80048dc:	f000 805d 	beq.w	800499a <nl_func_hardmax_array_f32+0xe2>
 80048e0:	f102 0c01 	add.w	ip, r2, #1
 80048e4:	eb05 0e02 	add.w	lr, r5, r2
 80048e8:	45f4      	cmp	ip, lr
 80048ea:	edd3 0a00 	vldr	s1, [r3]
 80048ee:	d24b      	bcs.n	8004988 <nl_func_hardmax_array_f32+0xd0>
 80048f0:	1e69      	subs	r1, r5, #1
 80048f2:	f011 0003 	ands.w	r0, r1, #3
 80048f6:	eb06 078c 	add.w	r7, r6, ip, lsl #2
 80048fa:	d00f      	beq.n	800491c <nl_func_hardmax_array_f32+0x64>
 80048fc:	ed97 1a00 	vldr	s2, [r7]
 8004900:	f107 0704 	add.w	r7, r7, #4
 8004904:	eef4 0a41 	vcmp.f32	s1, s2
 8004908:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800490c:	bf44      	itt	mi
 800490e:	eef0 0a41 	vmovmi.f32	s1, s2
 8004912:	4662      	movmi	r2, ip
 8004914:	1e40      	subs	r0, r0, #1
 8004916:	f10c 0c01 	add.w	ip, ip, #1
 800491a:	d1ef      	bne.n	80048fc <nl_func_hardmax_array_f32+0x44>
 800491c:	0889      	lsrs	r1, r1, #2
 800491e:	d033      	beq.n	8004988 <nl_func_hardmax_array_f32+0xd0>
 8004920:	ed97 1a00 	vldr	s2, [r7]
 8004924:	eef4 0a41 	vcmp.f32	s1, s2
 8004928:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800492c:	bf44      	itt	mi
 800492e:	eef0 0a41 	vmovmi.f32	s1, s2
 8004932:	4662      	movmi	r2, ip
 8004934:	ed97 1a01 	vldr	s2, [r7, #4]
 8004938:	f10c 0c01 	add.w	ip, ip, #1
 800493c:	eef4 0a41 	vcmp.f32	s1, s2
 8004940:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004944:	bf44      	itt	mi
 8004946:	eef0 0a41 	vmovmi.f32	s1, s2
 800494a:	4662      	movmi	r2, ip
 800494c:	ed97 1a02 	vldr	s2, [r7, #8]
 8004950:	f10c 0c01 	add.w	ip, ip, #1
 8004954:	eef4 0a41 	vcmp.f32	s1, s2
 8004958:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800495c:	bf44      	itt	mi
 800495e:	eef0 0a41 	vmovmi.f32	s1, s2
 8004962:	4662      	movmi	r2, ip
 8004964:	ed97 1a03 	vldr	s2, [r7, #12]
 8004968:	f10c 0c01 	add.w	ip, ip, #1
 800496c:	eef4 0a41 	vcmp.f32	s1, s2
 8004970:	f107 0710 	add.w	r7, r7, #16
 8004974:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004978:	bf44      	itt	mi
 800497a:	eef0 0a41 	vmovmi.f32	s1, s2
 800497e:	4662      	movmi	r2, ip
 8004980:	1e49      	subs	r1, r1, #1
 8004982:	f10c 0c01 	add.w	ip, ip, #1
 8004986:	d1cb      	bne.n	8004920 <nl_func_hardmax_array_f32+0x68>
 8004988:	eb08 0082 	add.w	r0, r8, r2, lsl #2
 800498c:	4672      	mov	r2, lr
 800498e:	42a2      	cmp	r2, r4
 8004990:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 8004994:	ed80 0a00 	vstr	s0, [r0]
 8004998:	d3a2      	bcc.n	80048e0 <nl_func_hardmax_array_f32+0x28>
 800499a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

080049a0 <nl_func_relu_generic_array_f32>:
 80049a0:	6880      	ldr	r0, [r0, #8]
 80049a2:	6889      	ldr	r1, [r1, #8]
 80049a4:	ed93 0a00 	vldr	s0, [r3]
 80049a8:	edd3 0a01 	vldr	s1, [r3, #4]
 80049ac:	ed93 1a02 	vldr	s2, [r3, #8]
 80049b0:	1f03      	subs	r3, r0, #4
 80049b2:	eeb5 1a40 	vcmp.f32	s2, #0.0
 80049b6:	eb03 0082 	add.w	r0, r3, r2, lsl #2
 80049ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049be:	f1a1 0c04 	sub.w	ip, r1, #4
 80049c2:	eb0c 0282 	add.w	r2, ip, r2, lsl #2
 80049c6:	d52b      	bpl.n	8004a20 <nl_func_relu_generic_array_f32+0x80>
 80049c8:	eef5 0a40 	vcmp.f32	s1, #0.0
 80049cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049d0:	d014      	beq.n	80049fc <nl_func_relu_generic_array_f32+0x5c>
 80049d2:	428a      	cmp	r2, r1
 80049d4:	f0c0 8011 	bcc.w	80049fa <nl_func_relu_generic_array_f32+0x5a>
 80049d8:	ed92 1a00 	vldr	s2, [r2]
 80049dc:	eeb4 1a40 	vcmp.f32	s2, s0
 80049e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049e4:	bf44      	itt	mi
 80049e6:	ee31 1a40 	vsubmi.f32	s2, s2, s0
 80049ea:	ee21 1a20 	vmulmi.f32	s2, s2, s1
 80049ee:	ed80 1a00 	vstr	s2, [r0]
 80049f2:	1f12      	subs	r2, r2, #4
 80049f4:	1f00      	subs	r0, r0, #4
 80049f6:	428a      	cmp	r2, r1
 80049f8:	d2ee      	bcs.n	80049d8 <nl_func_relu_generic_array_f32+0x38>
 80049fa:	4770      	bx	lr
 80049fc:	428a      	cmp	r2, r1
 80049fe:	d3fc      	bcc.n	80049fa <nl_func_relu_generic_array_f32+0x5a>
 8004a00:	edd2 0a00 	vldr	s1, [r2]
 8004a04:	eef4 0a40 	vcmp.f32	s1, s0
 8004a08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a0c:	bf48      	it	mi
 8004a0e:	eddf 0aa7 	vldrmi	s1, [pc, #668]	; 8004cac <.text_73>
 8004a12:	edc0 0a00 	vstr	s1, [r0]
 8004a16:	1f12      	subs	r2, r2, #4
 8004a18:	1f00      	subs	r0, r0, #4
 8004a1a:	428a      	cmp	r2, r1
 8004a1c:	d2f0      	bcs.n	8004a00 <nl_func_relu_generic_array_f32+0x60>
 8004a1e:	4770      	bx	lr
 8004a20:	428a      	cmp	r2, r1
 8004a22:	d3ea      	bcc.n	80049fa <nl_func_relu_generic_array_f32+0x5a>
 8004a24:	edd2 1a00 	vldr	s3, [r2]
 8004a28:	eef4 1a41 	vcmp.f32	s3, s2
 8004a2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a30:	d50a      	bpl.n	8004a48 <nl_func_relu_generic_array_f32+0xa8>
 8004a32:	eef4 1a40 	vcmp.f32	s3, s0
 8004a36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a3a:	d507      	bpl.n	8004a4c <nl_func_relu_generic_array_f32+0xac>
 8004a3c:	ee71 1ac0 	vsub.f32	s3, s3, s0
 8004a40:	ee61 1aa0 	vmul.f32	s3, s3, s1
 8004a44:	e002      	b.n	8004a4c <nl_func_relu_generic_array_f32+0xac>
 8004a46:	bf00      	nop
 8004a48:	eef0 1a41 	vmov.f32	s3, s2
 8004a4c:	edc0 1a00 	vstr	s3, [r0]
 8004a50:	1f12      	subs	r2, r2, #4
 8004a52:	1f00      	subs	r0, r0, #4
 8004a54:	428a      	cmp	r2, r1
 8004a56:	d2e5      	bcs.n	8004a24 <nl_func_relu_generic_array_f32+0x84>
 8004a58:	4770      	bx	lr
	...

08004a5c <nl_func_relu_thresholded_array_f32>:
 8004a5c:	6889      	ldr	r1, [r1, #8]
 8004a5e:	ed93 0a00 	vldr	s0, [r3]
 8004a62:	6880      	ldr	r0, [r0, #8]
 8004a64:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 8004a68:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8004a6c:	1f1b      	subs	r3, r3, #4
 8004a6e:	1f10      	subs	r0, r2, #4
 8004a70:	428b      	cmp	r3, r1
 8004a72:	d30e      	bcc.n	8004a92 <nl_func_relu_thresholded_array_f32+0x36>
 8004a74:	edd3 0a00 	vldr	s1, [r3]
 8004a78:	eef4 0a40 	vcmp.f32	s1, s0
 8004a7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a80:	bf48      	it	mi
 8004a82:	eddf 0a8a 	vldrmi	s1, [pc, #552]	; 8004cac <.text_73>
 8004a86:	edc0 0a00 	vstr	s1, [r0]
 8004a8a:	1f1b      	subs	r3, r3, #4
 8004a8c:	1f00      	subs	r0, r0, #4
 8004a8e:	428b      	cmp	r3, r1
 8004a90:	d2f0      	bcs.n	8004a74 <nl_func_relu_thresholded_array_f32+0x18>
 8004a92:	4770      	bx	lr

08004a94 <nl_func_elu_array_f32>:
 8004a94:	b570      	push	{r4, r5, r6, lr}
 8004a96:	ed2d 8b04 	vpush	{d8-d9}
 8004a9a:	688c      	ldr	r4, [r1, #8]
 8004a9c:	6880      	ldr	r0, [r0, #8]
 8004a9e:	ed93 8a00 	vldr	s16, [r3]
 8004aa2:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 8004aa6:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8004aaa:	1f0d      	subs	r5, r1, #4
 8004aac:	1f16      	subs	r6, r2, #4
 8004aae:	42a5      	cmp	r5, r4
 8004ab0:	f0c0 802a 	bcc.w	8004b08 <nl_func_elu_array_f32+0x74>
 8004ab4:	edd5 8a00 	vldr	s17, [r5]
 8004ab8:	eef5 8a40 	vcmp.f32	s17, #0.0
 8004abc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ac0:	eeb0 0a68 	vmov.f32	s0, s17
 8004ac4:	bf4c      	ite	mi
 8004ac6:	ed9f 9a79 	vldrmi	s18, [pc, #484]	; 8004cac <.text_73>
 8004aca:	eeb0 9a68 	vmovpl.f32	s18, s17
 8004ace:	f007 f983 	bl	800bdd8 <expf>
 8004ad2:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 8004ad6:	ee30 0a20 	vadd.f32	s0, s0, s1
 8004ada:	ee20 0a08 	vmul.f32	s0, s0, s16
 8004ade:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8004ae2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004ae6:	dc09      	bgt.n	8004afc <nl_func_elu_array_f32+0x68>
 8004ae8:	eeb0 0a68 	vmov.f32	s0, s17
 8004aec:	f007 f974 	bl	800bdd8 <expf>
 8004af0:	eebf 1a00 	vmov.f32	s2, #240	; 0xbf800000 -1.0
 8004af4:	ee30 1a01 	vadd.f32	s2, s0, s2
 8004af8:	ee01 9a08 	vmla.f32	s18, s2, s16
 8004afc:	ed86 9a00 	vstr	s18, [r6]
 8004b00:	1f2d      	subs	r5, r5, #4
 8004b02:	1f36      	subs	r6, r6, #4
 8004b04:	42a5      	cmp	r5, r4
 8004b06:	d2d5      	bcs.n	8004ab4 <nl_func_elu_array_f32+0x20>
 8004b08:	ecbd 8b04 	vpop	{d8-d9}
 8004b0c:	bd70      	pop	{r4, r5, r6, pc}
	...

08004b10 <.text_68>:
 8004b10:	3f800001 	.word	0x3f800001

08004b14 <.text_69>:
 8004b14:	3e4ccccd 	.word	0x3e4ccccd

08004b18 <nl_func_selu_array_f32>:
 8004b18:	b570      	push	{r4, r5, r6, lr}
 8004b1a:	ed2d 8b04 	vpush	{d8-d9}
 8004b1e:	688c      	ldr	r4, [r1, #8]
 8004b20:	6880      	ldr	r0, [r0, #8]
 8004b22:	ed93 8a00 	vldr	s16, [r3]
 8004b26:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 8004b2a:	edd3 8a01 	vldr	s17, [r3, #4]
 8004b2e:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8004b32:	1f0d      	subs	r5, r1, #4
 8004b34:	1f16      	subs	r6, r2, #4
 8004b36:	42a5      	cmp	r5, r4
 8004b38:	f0c0 802c 	bcc.w	8004b94 <nl_func_selu_array_f32+0x7c>
 8004b3c:	ed95 9a00 	vldr	s18, [r5]
 8004b40:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8004b44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b48:	eeb0 0a49 	vmov.f32	s0, s18
 8004b4c:	bf4c      	ite	mi
 8004b4e:	eddf 9a57 	vldrmi	s19, [pc, #348]	; 8004cac <.text_73>
 8004b52:	eef0 9a49 	vmovpl.f32	s19, s18
 8004b56:	f007 f93f 	bl	800bdd8 <expf>
 8004b5a:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 8004b5e:	ee30 0a20 	vadd.f32	s0, s0, s1
 8004b62:	ee20 0a08 	vmul.f32	s0, s0, s16
 8004b66:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8004b6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004b6e:	dc09      	bgt.n	8004b84 <nl_func_selu_array_f32+0x6c>
 8004b70:	eeb0 0a49 	vmov.f32	s0, s18
 8004b74:	f007 f930 	bl	800bdd8 <expf>
 8004b78:	eebf 1a00 	vmov.f32	s2, #240	; 0xbf800000 -1.0
 8004b7c:	ee30 1a01 	vadd.f32	s2, s0, s2
 8004b80:	ee41 9a08 	vmla.f32	s19, s2, s16
 8004b84:	ee28 0aa9 	vmul.f32	s0, s17, s19
 8004b88:	1f2d      	subs	r5, r5, #4
 8004b8a:	ed86 0a00 	vstr	s0, [r6]
 8004b8e:	1f36      	subs	r6, r6, #4
 8004b90:	42a5      	cmp	r5, r4
 8004b92:	d2d3      	bcs.n	8004b3c <nl_func_selu_array_f32+0x24>
 8004b94:	ecbd 8b04 	vpop	{d8-d9}
 8004b98:	bd70      	pop	{r4, r5, r6, pc}
	...

08004b9c <nl_func_prelu_array_f32>:
 8004b9c:	6889      	ldr	r1, [r1, #8]
 8004b9e:	6880      	ldr	r0, [r0, #8]
 8004ba0:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8004ba4:	eb01 0c82 	add.w	ip, r1, r2, lsl #2
 8004ba8:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8004bac:	1f1b      	subs	r3, r3, #4
 8004bae:	f1ac 0c04 	sub.w	ip, ip, #4
 8004bb2:	1f10      	subs	r0, r2, #4
 8004bb4:	458c      	cmp	ip, r1
 8004bb6:	d320      	bcc.n	8004bfa <nl_func_prelu_array_f32+0x5e>
 8004bb8:	ed9c 0a00 	vldr	s0, [ip]
 8004bbc:	461a      	mov	r2, r3
 8004bbe:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8004bc2:	f1ac 0c04 	sub.w	ip, ip, #4
 8004bc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bca:	ed92 1a00 	vldr	s2, [r2]
 8004bce:	bf4c      	ite	mi
 8004bd0:	eddf 0a36 	vldrmi	s1, [pc, #216]	; 8004cac <.text_73>
 8004bd4:	eef0 0a40 	vmovpl.f32	s1, s0
 8004bd8:	eeb1 0a40 	vneg.f32	s0, s0
 8004bdc:	1f13      	subs	r3, r2, #4
 8004bde:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8004be2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004be6:	bf48      	it	mi
 8004be8:	ed9f 0a30 	vldrmi	s0, [pc, #192]	; 8004cac <.text_73>
 8004bec:	ee41 0a40 	vmls.f32	s1, s2, s0
 8004bf0:	edc0 0a00 	vstr	s1, [r0]
 8004bf4:	1f00      	subs	r0, r0, #4
 8004bf6:	458c      	cmp	ip, r1
 8004bf8:	d2de      	bcs.n	8004bb8 <nl_func_prelu_array_f32+0x1c>
 8004bfa:	4770      	bx	lr

08004bfc <forward_relu>:
 8004bfc:	b570      	push	{r4, r5, r6, lr}
 8004bfe:	4604      	mov	r4, r0
 8004c00:	6962      	ldr	r2, [r4, #20]
 8004c02:	8811      	ldrh	r1, [r2, #0]
 8004c04:	2900      	cmp	r1, #0
 8004c06:	bf1a      	itte	ne
 8004c08:	6850      	ldrne	r0, [r2, #4]
 8004c0a:	1d00      	addne	r0, r0, #4
 8004c0c:	2004      	moveq	r0, #4
 8004c0e:	6800      	ldr	r0, [r0, #0]
 8004c10:	2800      	cmp	r0, #0
 8004c12:	bf14      	ite	ne
 8004c14:	6805      	ldrne	r5, [r0, #0]
 8004c16:	2500      	moveq	r5, #0
 8004c18:	2902      	cmp	r1, #2
 8004c1a:	bfa6      	itte	ge
 8004c1c:	6850      	ldrge	r0, [r2, #4]
 8004c1e:	3010      	addge	r0, #16
 8004c20:	2004      	movlt	r0, #4
 8004c22:	6800      	ldr	r0, [r0, #0]
 8004c24:	2800      	cmp	r0, #0
 8004c26:	bf19      	ittee	ne
 8004c28:	6800      	ldrne	r0, [r0, #0]
 8004c2a:	f100 0618 	addne.w	r6, r0, #24
 8004c2e:	2100      	moveq	r1, #0
 8004c30:	f101 0618 	addeq.w	r6, r1, #24
 8004c34:	69a0      	ldr	r0, [r4, #24]
 8004c36:	b9f8      	cbnz	r0, 8004c78 <forward_relu+0x7c>
 8004c38:	f105 0008 	add.w	r0, r5, #8
 8004c3c:	f7fd ffd8 	bl	8002bf0 <ai_shape_get_size>
 8004c40:	69a9      	ldr	r1, [r5, #24]
 8004c42:	6833      	ldr	r3, [r6, #0]
 8004c44:	6889      	ldr	r1, [r1, #8]
 8004c46:	689c      	ldr	r4, [r3, #8]
 8004c48:	eb01 0280 	add.w	r2, r1, r0, lsl #2
 8004c4c:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 8004c50:	1f12      	subs	r2, r2, #4
 8004c52:	1f00      	subs	r0, r0, #4
 8004c54:	428a      	cmp	r2, r1
 8004c56:	d328      	bcc.n	8004caa <forward_relu+0xae>
 8004c58:	ed92 0a00 	vldr	s0, [r2]
 8004c5c:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8004c60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004c64:	bf48      	it	mi
 8004c66:	ed9f 0a11 	vldrmi	s0, [pc, #68]	; 8004cac <.text_73>
 8004c6a:	ed80 0a00 	vstr	s0, [r0]
 8004c6e:	1f12      	subs	r2, r2, #4
 8004c70:	1f00      	subs	r0, r0, #4
 8004c72:	428a      	cmp	r2, r1
 8004c74:	d2f0      	bcs.n	8004c58 <forward_relu+0x5c>
 8004c76:	bd70      	pop	{r4, r5, r6, pc}
 8004c78:	6840      	ldr	r0, [r0, #4]
 8004c7a:	2801      	cmp	r0, #1
 8004c7c:	f105 0008 	add.w	r0, r5, #8
 8004c80:	d109      	bne.n	8004c96 <forward_relu+0x9a>
 8004c82:	f7fd ffb5 	bl	8002bf0 <ai_shape_get_size>
 8004c86:	4602      	mov	r2, r0
 8004c88:	69a0      	ldr	r0, [r4, #24]
 8004c8a:	69a9      	ldr	r1, [r5, #24]
 8004c8c:	6883      	ldr	r3, [r0, #8]
 8004c8e:	6830      	ldr	r0, [r6, #0]
 8004c90:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004c94:	e6e2      	b.n	8004a5c <nl_func_relu_thresholded_array_f32>
 8004c96:	f7fd ffab 	bl	8002bf0 <ai_shape_get_size>
 8004c9a:	69a1      	ldr	r1, [r4, #24]
 8004c9c:	4602      	mov	r2, r0
 8004c9e:	6830      	ldr	r0, [r6, #0]
 8004ca0:	688b      	ldr	r3, [r1, #8]
 8004ca2:	69a9      	ldr	r1, [r5, #24]
 8004ca4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004ca8:	e67a      	b.n	80049a0 <nl_func_relu_generic_array_f32>
 8004caa:	bd70      	pop	{r4, r5, r6, pc}

08004cac <.text_73>:
 8004cac:	00000000 	.word	0x00000000

08004cb0 <forward_relu_thresholded>:
 8004cb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004cb2:	4602      	mov	r2, r0
 8004cb4:	f04f 0601 	mov.w	r6, #1
 8004cb8:	6953      	ldr	r3, [r2, #20]
 8004cba:	8819      	ldrh	r1, [r3, #0]
 8004cbc:	2900      	cmp	r1, #0
 8004cbe:	bf1a      	itte	ne
 8004cc0:	6858      	ldrne	r0, [r3, #4]
 8004cc2:	1d00      	addne	r0, r0, #4
 8004cc4:	2004      	moveq	r0, #4
 8004cc6:	6800      	ldr	r0, [r0, #0]
 8004cc8:	2800      	cmp	r0, #0
 8004cca:	bf14      	ite	ne
 8004ccc:	6804      	ldrne	r4, [r0, #0]
 8004cce:	2400      	moveq	r4, #0
 8004cd0:	2902      	cmp	r1, #2
 8004cd2:	bfa6      	itte	ge
 8004cd4:	6858      	ldrge	r0, [r3, #4]
 8004cd6:	3010      	addge	r0, #16
 8004cd8:	2004      	movlt	r0, #4
 8004cda:	6800      	ldr	r0, [r0, #0]
 8004cdc:	2800      	cmp	r0, #0
 8004cde:	bf19      	ittee	ne
 8004ce0:	6800      	ldrne	r0, [r0, #0]
 8004ce2:	f100 0518 	addne.w	r5, r0, #24
 8004ce6:	2100      	moveq	r1, #0
 8004ce8:	f101 0518 	addeq.w	r5, r1, #24
 8004cec:	f104 0108 	add.w	r1, r4, #8
 8004cf0:	680b      	ldr	r3, [r1, #0]
 8004cf2:	0a1b      	lsrs	r3, r3, #8
 8004cf4:	d022      	beq.n	8004d3c <forward_relu_thresholded+0x8c>
 8004cf6:	684f      	ldr	r7, [r1, #4]
 8004cf8:	4618      	mov	r0, r3
 8004cfa:	eb07 0183 	add.w	r1, r7, r3, lsl #2
 8004cfe:	f1a1 0c04 	sub.w	ip, r1, #4
 8004d02:	f010 0103 	ands.w	r1, r0, #3
 8004d06:	d006      	beq.n	8004d16 <forward_relu_thresholded+0x66>
 8004d08:	1e5b      	subs	r3, r3, #1
 8004d0a:	f85c e904 	ldr.w	lr, [ip], #-4
 8004d0e:	1e49      	subs	r1, r1, #1
 8004d10:	fb0e f606 	mul.w	r6, lr, r6
 8004d14:	d1f8      	bne.n	8004d08 <forward_relu_thresholded+0x58>
 8004d16:	0880      	lsrs	r0, r0, #2
 8004d18:	d010      	beq.n	8004d3c <forward_relu_thresholded+0x8c>
 8004d1a:	eb07 0183 	add.w	r1, r7, r3, lsl #2
 8004d1e:	3910      	subs	r1, #16
 8004d20:	68cb      	ldr	r3, [r1, #12]
 8004d22:	688f      	ldr	r7, [r1, #8]
 8004d24:	f8d1 c004 	ldr.w	ip, [r1, #4]
 8004d28:	f851 e910 	ldr.w	lr, [r1], #-16
 8004d2c:	437b      	muls	r3, r7
 8004d2e:	fb0c f303 	mul.w	r3, ip, r3
 8004d32:	fb0e f303 	mul.w	r3, lr, r3
 8004d36:	435e      	muls	r6, r3
 8004d38:	1e40      	subs	r0, r0, #1
 8004d3a:	d1f1      	bne.n	8004d20 <forward_relu_thresholded+0x70>
 8004d3c:	6990      	ldr	r0, [r2, #24]
 8004d3e:	682a      	ldr	r2, [r5, #0]
 8004d40:	6881      	ldr	r1, [r0, #8]
 8004d42:	69a0      	ldr	r0, [r4, #24]
 8004d44:	6880      	ldr	r0, [r0, #8]
 8004d46:	6893      	ldr	r3, [r2, #8]
 8004d48:	ed91 0a00 	vldr	s0, [r1]
 8004d4c:	eb00 0186 	add.w	r1, r0, r6, lsl #2
 8004d50:	eb03 0486 	add.w	r4, r3, r6, lsl #2
 8004d54:	1f09      	subs	r1, r1, #4
 8004d56:	1f22      	subs	r2, r4, #4
 8004d58:	4281      	cmp	r1, r0
 8004d5a:	d30e      	bcc.n	8004d7a <forward_relu_thresholded+0xca>
 8004d5c:	edd1 0a00 	vldr	s1, [r1]
 8004d60:	eef4 0a40 	vcmp.f32	s1, s0
 8004d64:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d68:	bf48      	it	mi
 8004d6a:	eddf 0ac1 	vldrmi	s1, [pc, #772]	; 8005070 <.text_80>
 8004d6e:	edc2 0a00 	vstr	s1, [r2]
 8004d72:	1f09      	subs	r1, r1, #4
 8004d74:	1f12      	subs	r2, r2, #4
 8004d76:	4281      	cmp	r1, r0
 8004d78:	d2f0      	bcs.n	8004d5c <forward_relu_thresholded+0xac>
 8004d7a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004d7c <forward_elu>:
 8004d7c:	b570      	push	{r4, r5, r6, lr}
 8004d7e:	4604      	mov	r4, r0
 8004d80:	6962      	ldr	r2, [r4, #20]
 8004d82:	8811      	ldrh	r1, [r2, #0]
 8004d84:	2900      	cmp	r1, #0
 8004d86:	bf1a      	itte	ne
 8004d88:	6850      	ldrne	r0, [r2, #4]
 8004d8a:	1d00      	addne	r0, r0, #4
 8004d8c:	2004      	moveq	r0, #4
 8004d8e:	6800      	ldr	r0, [r0, #0]
 8004d90:	2800      	cmp	r0, #0
 8004d92:	bf14      	ite	ne
 8004d94:	6805      	ldrne	r5, [r0, #0]
 8004d96:	2500      	moveq	r5, #0
 8004d98:	2902      	cmp	r1, #2
 8004d9a:	bfa6      	itte	ge
 8004d9c:	6850      	ldrge	r0, [r2, #4]
 8004d9e:	3010      	addge	r0, #16
 8004da0:	2004      	movlt	r0, #4
 8004da2:	6800      	ldr	r0, [r0, #0]
 8004da4:	2800      	cmp	r0, #0
 8004da6:	bf19      	ittee	ne
 8004da8:	6800      	ldrne	r0, [r0, #0]
 8004daa:	f100 0618 	addne.w	r6, r0, #24
 8004dae:	2100      	moveq	r1, #0
 8004db0:	f101 0618 	addeq.w	r6, r1, #24
 8004db4:	f105 0008 	add.w	r0, r5, #8
 8004db8:	f7fd ff1a 	bl	8002bf0 <ai_shape_get_size>
 8004dbc:	69a1      	ldr	r1, [r4, #24]
 8004dbe:	4602      	mov	r2, r0
 8004dc0:	6830      	ldr	r0, [r6, #0]
 8004dc2:	688b      	ldr	r3, [r1, #8]
 8004dc4:	69a9      	ldr	r1, [r5, #24]
 8004dc6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004dca:	e663      	b.n	8004a94 <nl_func_elu_array_f32>

08004dcc <forward_selu>:
 8004dcc:	b570      	push	{r4, r5, r6, lr}
 8004dce:	4604      	mov	r4, r0
 8004dd0:	6962      	ldr	r2, [r4, #20]
 8004dd2:	8811      	ldrh	r1, [r2, #0]
 8004dd4:	2900      	cmp	r1, #0
 8004dd6:	bf1a      	itte	ne
 8004dd8:	6850      	ldrne	r0, [r2, #4]
 8004dda:	1d00      	addne	r0, r0, #4
 8004ddc:	2004      	moveq	r0, #4
 8004dde:	6800      	ldr	r0, [r0, #0]
 8004de0:	2800      	cmp	r0, #0
 8004de2:	bf14      	ite	ne
 8004de4:	6805      	ldrne	r5, [r0, #0]
 8004de6:	2500      	moveq	r5, #0
 8004de8:	2902      	cmp	r1, #2
 8004dea:	bfa6      	itte	ge
 8004dec:	6850      	ldrge	r0, [r2, #4]
 8004dee:	3010      	addge	r0, #16
 8004df0:	2004      	movlt	r0, #4
 8004df2:	6800      	ldr	r0, [r0, #0]
 8004df4:	2800      	cmp	r0, #0
 8004df6:	bf19      	ittee	ne
 8004df8:	6800      	ldrne	r0, [r0, #0]
 8004dfa:	f100 0618 	addne.w	r6, r0, #24
 8004dfe:	2100      	moveq	r1, #0
 8004e00:	f101 0618 	addeq.w	r6, r1, #24
 8004e04:	f105 0008 	add.w	r0, r5, #8
 8004e08:	f7fd fef2 	bl	8002bf0 <ai_shape_get_size>
 8004e0c:	69a1      	ldr	r1, [r4, #24]
 8004e0e:	4602      	mov	r2, r0
 8004e10:	6830      	ldr	r0, [r6, #0]
 8004e12:	688b      	ldr	r3, [r1, #8]
 8004e14:	69a9      	ldr	r1, [r5, #24]
 8004e16:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004e1a:	e67d      	b.n	8004b18 <nl_func_selu_array_f32>

08004e1c <forward_prelu>:
 8004e1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e20:	b083      	sub	sp, #12
 8004e22:	6942      	ldr	r2, [r0, #20]
 8004e24:	8810      	ldrh	r0, [r2, #0]
 8004e26:	2800      	cmp	r0, #0
 8004e28:	bf1a      	itte	ne
 8004e2a:	6851      	ldrne	r1, [r2, #4]
 8004e2c:	1d09      	addne	r1, r1, #4
 8004e2e:	2104      	moveq	r1, #4
 8004e30:	6809      	ldr	r1, [r1, #0]
 8004e32:	2900      	cmp	r1, #0
 8004e34:	bf19      	ittee	ne
 8004e36:	6809      	ldrne	r1, [r1, #0]
 8004e38:	f101 0518 	addne.w	r5, r1, #24
 8004e3c:	2300      	moveq	r3, #0
 8004e3e:	f103 0518 	addeq.w	r5, r3, #24
 8004e42:	2801      	cmp	r0, #1
 8004e44:	bfc6      	itte	gt
 8004e46:	6851      	ldrgt	r1, [r2, #4]
 8004e48:	3110      	addgt	r1, #16
 8004e4a:	2104      	movle	r1, #4
 8004e4c:	6809      	ldr	r1, [r1, #0]
 8004e4e:	2900      	cmp	r1, #0
 8004e50:	bf19      	ittee	ne
 8004e52:	6809      	ldrne	r1, [r1, #0]
 8004e54:	f101 0618 	addne.w	r6, r1, #24
 8004e58:	2300      	moveq	r3, #0
 8004e5a:	f103 0618 	addeq.w	r6, r3, #24
 8004e5e:	2802      	cmp	r0, #2
 8004e60:	bfc6      	itte	gt
 8004e62:	6850      	ldrgt	r0, [r2, #4]
 8004e64:	301c      	addgt	r0, #28
 8004e66:	2004      	movle	r0, #4
 8004e68:	6800      	ldr	r0, [r0, #0]
 8004e6a:	2800      	cmp	r0, #0
 8004e6c:	bf14      	ite	ne
 8004e6e:	6804      	ldrne	r4, [r0, #0]
 8004e70:	2400      	moveq	r4, #0
 8004e72:	69a0      	ldr	r0, [r4, #24]
 8004e74:	6887      	ldr	r7, [r0, #8]
 8004e76:	b12c      	cbz	r4, 8004e84 <forward_prelu+0x68>
 8004e78:	6841      	ldr	r1, [r0, #4]
 8004e7a:	6800      	ldr	r0, [r0, #0]
 8004e7c:	f001 ff5c 	bl	8006d38 <ai_array_get_byte_size>
 8004e80:	4680      	mov	r8, r0
 8004e82:	e001      	b.n	8004e88 <forward_prelu+0x6c>
 8004e84:	f04f 0801 	mov.w	r8, #1
 8004e88:	6828      	ldr	r0, [r5, #0]
 8004e8a:	3408      	adds	r4, #8
 8004e8c:	6841      	ldr	r1, [r0, #4]
 8004e8e:	6800      	ldr	r0, [r0, #0]
 8004e90:	f001 ff52 	bl	8006d38 <ai_array_get_byte_size>
 8004e94:	4601      	mov	r1, r0
 8004e96:	6828      	ldr	r0, [r5, #0]
 8004e98:	6833      	ldr	r3, [r6, #0]
 8004e9a:	6880      	ldr	r0, [r0, #8]
 8004e9c:	4401      	add	r1, r0
 8004e9e:	4288      	cmp	r0, r1
 8004ea0:	f8d3 9008 	ldr.w	r9, [r3, #8]
 8004ea4:	9400      	str	r4, [sp, #0]
 8004ea6:	d240      	bcs.n	8004f2a <forward_prelu+0x10e>
 8004ea8:	9702      	str	r7, [sp, #8]
 8004eaa:	4607      	mov	r7, r0
 8004eac:	9101      	str	r1, [sp, #4]
 8004eae:	6829      	ldr	r1, [r5, #0]
 8004eb0:	f04f 0201 	mov.w	r2, #1
 8004eb4:	608f      	str	r7, [r1, #8]
 8004eb6:	6834      	ldr	r4, [r6, #0]
 8004eb8:	f8c4 9008 	str.w	r9, [r4, #8]
 8004ebc:	9b00      	ldr	r3, [sp, #0]
 8004ebe:	6818      	ldr	r0, [r3, #0]
 8004ec0:	0a00      	lsrs	r0, r0, #8
 8004ec2:	d029      	beq.n	8004f18 <forward_prelu+0xfc>
 8004ec4:	f8d3 e004 	ldr.w	lr, [r3, #4]
 8004ec8:	4684      	mov	ip, r0
 8004eca:	eb0e 0380 	add.w	r3, lr, r0, lsl #2
 8004ece:	f1a3 0a04 	sub.w	sl, r3, #4
 8004ed2:	f01c 0303 	ands.w	r3, ip, #3
 8004ed6:	d006      	beq.n	8004ee6 <forward_prelu+0xca>
 8004ed8:	1e40      	subs	r0, r0, #1
 8004eda:	f85a b904 	ldr.w	fp, [sl], #-4
 8004ede:	1e5b      	subs	r3, r3, #1
 8004ee0:	fb0b f202 	mul.w	r2, fp, r2
 8004ee4:	d1f8      	bne.n	8004ed8 <forward_prelu+0xbc>
 8004ee6:	ea5f 0c9c 	movs.w	ip, ip, lsr #2
 8004eea:	4663      	mov	r3, ip
 8004eec:	d014      	beq.n	8004f18 <forward_prelu+0xfc>
 8004eee:	eb0e 0080 	add.w	r0, lr, r0, lsl #2
 8004ef2:	3810      	subs	r0, #16
 8004ef4:	f8d0 c00c 	ldr.w	ip, [r0, #12]
 8004ef8:	f8d0 e008 	ldr.w	lr, [r0, #8]
 8004efc:	f8d0 a004 	ldr.w	sl, [r0, #4]
 8004f00:	f850 b910 	ldr.w	fp, [r0], #-16
 8004f04:	1e5b      	subs	r3, r3, #1
 8004f06:	fb0e fc0c 	mul.w	ip, lr, ip
 8004f0a:	fb0a fc0c 	mul.w	ip, sl, ip
 8004f0e:	fb0b fc0c 	mul.w	ip, fp, ip
 8004f12:	fb0c f202 	mul.w	r2, ip, r2
 8004f16:	d1ed      	bne.n	8004ef4 <forward_prelu+0xd8>
 8004f18:	9b02      	ldr	r3, [sp, #8]
 8004f1a:	4620      	mov	r0, r4
 8004f1c:	4447      	add	r7, r8
 8004f1e:	44c1      	add	r9, r8
 8004f20:	f7ff fe3c 	bl	8004b9c <nl_func_prelu_array_f32>
 8004f24:	9801      	ldr	r0, [sp, #4]
 8004f26:	4287      	cmp	r7, r0
 8004f28:	d3c1      	bcc.n	8004eae <forward_prelu+0x92>
 8004f2a:	6828      	ldr	r0, [r5, #0]
 8004f2c:	68c1      	ldr	r1, [r0, #12]
 8004f2e:	6081      	str	r1, [r0, #8]
 8004f30:	6830      	ldr	r0, [r6, #0]
 8004f32:	68c2      	ldr	r2, [r0, #12]
 8004f34:	6082      	str	r2, [r0, #8]
 8004f36:	b003      	add	sp, #12
 8004f38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08004f3c <forward_clip>:
 8004f3c:	b570      	push	{r4, r5, r6, lr}
 8004f3e:	4604      	mov	r4, r0
 8004f40:	6962      	ldr	r2, [r4, #20]
 8004f42:	8811      	ldrh	r1, [r2, #0]
 8004f44:	2900      	cmp	r1, #0
 8004f46:	bf1a      	itte	ne
 8004f48:	6850      	ldrne	r0, [r2, #4]
 8004f4a:	1d00      	addne	r0, r0, #4
 8004f4c:	2004      	moveq	r0, #4
 8004f4e:	6800      	ldr	r0, [r0, #0]
 8004f50:	2800      	cmp	r0, #0
 8004f52:	bf14      	ite	ne
 8004f54:	6805      	ldrne	r5, [r0, #0]
 8004f56:	2500      	moveq	r5, #0
 8004f58:	2902      	cmp	r1, #2
 8004f5a:	bfa6      	itte	ge
 8004f5c:	6850      	ldrge	r0, [r2, #4]
 8004f5e:	3010      	addge	r0, #16
 8004f60:	2004      	movlt	r0, #4
 8004f62:	6800      	ldr	r0, [r0, #0]
 8004f64:	2800      	cmp	r0, #0
 8004f66:	bf19      	ittee	ne
 8004f68:	6800      	ldrne	r0, [r0, #0]
 8004f6a:	f100 0618 	addne.w	r6, r0, #24
 8004f6e:	2100      	moveq	r1, #0
 8004f70:	f101 0618 	addeq.w	r6, r1, #24
 8004f74:	f105 0008 	add.w	r0, r5, #8
 8004f78:	f7fd fe3a 	bl	8002bf0 <ai_shape_get_size>
 8004f7c:	69a1      	ldr	r1, [r4, #24]
 8004f7e:	4602      	mov	r2, r0
 8004f80:	6830      	ldr	r0, [r6, #0]
 8004f82:	688b      	ldr	r3, [r1, #8]
 8004f84:	69a9      	ldr	r1, [r5, #24]
 8004f86:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004f8a:	e46f      	b.n	800486c <nl_func_clip_array_f32>

08004f8c <forward_hard_sigmoid>:
 8004f8c:	b4f0      	push	{r4, r5, r6, r7}
 8004f8e:	6942      	ldr	r2, [r0, #20]
 8004f90:	f04f 0501 	mov.w	r5, #1
 8004f94:	8811      	ldrh	r1, [r2, #0]
 8004f96:	2900      	cmp	r1, #0
 8004f98:	bf1a      	itte	ne
 8004f9a:	6850      	ldrne	r0, [r2, #4]
 8004f9c:	1d00      	addne	r0, r0, #4
 8004f9e:	2004      	moveq	r0, #4
 8004fa0:	6800      	ldr	r0, [r0, #0]
 8004fa2:	2800      	cmp	r0, #0
 8004fa4:	bf14      	ite	ne
 8004fa6:	6803      	ldrne	r3, [r0, #0]
 8004fa8:	2300      	moveq	r3, #0
 8004faa:	2902      	cmp	r1, #2
 8004fac:	bfa6      	itte	ge
 8004fae:	6850      	ldrge	r0, [r2, #4]
 8004fb0:	3010      	addge	r0, #16
 8004fb2:	2004      	movlt	r0, #4
 8004fb4:	6800      	ldr	r0, [r0, #0]
 8004fb6:	2800      	cmp	r0, #0
 8004fb8:	bf19      	ittee	ne
 8004fba:	6800      	ldrne	r0, [r0, #0]
 8004fbc:	f100 0418 	addne.w	r4, r0, #24
 8004fc0:	2100      	moveq	r1, #0
 8004fc2:	f101 0418 	addeq.w	r4, r1, #24
 8004fc6:	f103 0108 	add.w	r1, r3, #8
 8004fca:	680a      	ldr	r2, [r1, #0]
 8004fcc:	0a12      	lsrs	r2, r2, #8
 8004fce:	d01f      	beq.n	8005010 <forward_hard_sigmoid+0x84>
 8004fd0:	684e      	ldr	r6, [r1, #4]
 8004fd2:	4610      	mov	r0, r2
 8004fd4:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8004fd8:	1f0f      	subs	r7, r1, #4
 8004fda:	f010 0103 	ands.w	r1, r0, #3
 8004fde:	d006      	beq.n	8004fee <forward_hard_sigmoid+0x62>
 8004fe0:	1e52      	subs	r2, r2, #1
 8004fe2:	f857 c904 	ldr.w	ip, [r7], #-4
 8004fe6:	1e49      	subs	r1, r1, #1
 8004fe8:	fb0c f505 	mul.w	r5, ip, r5
 8004fec:	d1f8      	bne.n	8004fe0 <forward_hard_sigmoid+0x54>
 8004fee:	0880      	lsrs	r0, r0, #2
 8004ff0:	d00e      	beq.n	8005010 <forward_hard_sigmoid+0x84>
 8004ff2:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8004ff6:	3910      	subs	r1, #16
 8004ff8:	68ca      	ldr	r2, [r1, #12]
 8004ffa:	688e      	ldr	r6, [r1, #8]
 8004ffc:	684f      	ldr	r7, [r1, #4]
 8004ffe:	f851 c910 	ldr.w	ip, [r1], #-16
 8005002:	4372      	muls	r2, r6
 8005004:	437a      	muls	r2, r7
 8005006:	fb0c f202 	mul.w	r2, ip, r2
 800500a:	4355      	muls	r5, r2
 800500c:	1e40      	subs	r0, r0, #1
 800500e:	d1f3      	bne.n	8004ff8 <forward_hard_sigmoid+0x6c>
 8005010:	6998      	ldr	r0, [r3, #24]
 8005012:	6822      	ldr	r2, [r4, #0]
 8005014:	6880      	ldr	r0, [r0, #8]
 8005016:	6893      	ldr	r3, [r2, #8]
 8005018:	eb00 0185 	add.w	r1, r0, r5, lsl #2
 800501c:	eb03 0485 	add.w	r4, r3, r5, lsl #2
 8005020:	1f09      	subs	r1, r1, #4
 8005022:	1f22      	subs	r2, r4, #4
 8005024:	4281      	cmp	r1, r0
 8005026:	d321      	bcc.n	800506c <forward_hard_sigmoid+0xe0>
 8005028:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800502c:	eddf 0a11 	vldr	s1, [pc, #68]	; 8005074 <.text_81>
 8005030:	edd1 1a00 	vldr	s3, [r1]
 8005034:	ed9f 2a10 	vldr	s4, [pc, #64]	; 8005078 <.text_82>
 8005038:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
 800503c:	ee01 1a82 	vmla.f32	s2, s3, s4
 8005040:	eeb4 1a60 	vcmp.f32	s2, s1
 8005044:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005048:	da08      	bge.n	800505c <forward_hard_sigmoid+0xd0>
 800504a:	eeb5 1a40 	vcmp.f32	s2, #0.0
 800504e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005052:	d505      	bpl.n	8005060 <forward_hard_sigmoid+0xd4>
 8005054:	ed9f 1a06 	vldr	s2, [pc, #24]	; 8005070 <.text_80>
 8005058:	e002      	b.n	8005060 <forward_hard_sigmoid+0xd4>
 800505a:	bf00      	nop
 800505c:	eeb0 1a40 	vmov.f32	s2, s0
 8005060:	ed82 1a00 	vstr	s2, [r2]
 8005064:	1f09      	subs	r1, r1, #4
 8005066:	1f12      	subs	r2, r2, #4
 8005068:	4281      	cmp	r1, r0
 800506a:	d2e1      	bcs.n	8005030 <forward_hard_sigmoid+0xa4>
 800506c:	bcf0      	pop	{r4, r5, r6, r7}
 800506e:	4770      	bx	lr

08005070 <.text_80>:
 8005070:	00000000 	.word	0x00000000

08005074 <.text_81>:
 8005074:	3f800001 	.word	0x3f800001

08005078 <.text_82>:
 8005078:	3e4ccccd 	.word	0x3e4ccccd

0800507c <forward_sm>:
 800507c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800507e:	b083      	sub	sp, #12
 8005080:	6942      	ldr	r2, [r0, #20]
 8005082:	8811      	ldrh	r1, [r2, #0]
 8005084:	2900      	cmp	r1, #0
 8005086:	bf1a      	itte	ne
 8005088:	6850      	ldrne	r0, [r2, #4]
 800508a:	1d00      	addne	r0, r0, #4
 800508c:	2004      	moveq	r0, #4
 800508e:	6800      	ldr	r0, [r0, #0]
 8005090:	2800      	cmp	r0, #0
 8005092:	bf14      	ite	ne
 8005094:	6804      	ldrne	r4, [r0, #0]
 8005096:	2400      	moveq	r4, #0
 8005098:	2902      	cmp	r1, #2
 800509a:	bfa6      	itte	ge
 800509c:	6850      	ldrge	r0, [r2, #4]
 800509e:	3010      	addge	r0, #16
 80050a0:	2004      	movlt	r0, #4
 80050a2:	6800      	ldr	r0, [r0, #0]
 80050a4:	2800      	cmp	r0, #0
 80050a6:	bf14      	ite	ne
 80050a8:	6805      	ldrne	r5, [r0, #0]
 80050aa:	2500      	moveq	r5, #0
 80050ac:	68e0      	ldr	r0, [r4, #12]
 80050ae:	68e9      	ldr	r1, [r5, #12]
 80050b0:	6846      	ldr	r6, [r0, #4]
 80050b2:	f104 0008 	add.w	r0, r4, #8
 80050b6:	684f      	ldr	r7, [r1, #4]
 80050b8:	f7fd fd9a 	bl	8002bf0 <ai_shape_get_size>
 80050bc:	4602      	mov	r2, r0
 80050be:	9701      	str	r7, [sp, #4]
 80050c0:	9600      	str	r6, [sp, #0]
 80050c2:	69a1      	ldr	r1, [r4, #24]
 80050c4:	69a8      	ldr	r0, [r5, #24]
 80050c6:	4633      	mov	r3, r6
 80050c8:	f7ff fb70 	bl	80047ac <nl_func_sm_array_f32>
 80050cc:	b003      	add	sp, #12
 80050ce:	bdf0      	pop	{r4, r5, r6, r7, pc}

080050d0 <forward_hardmax>:
 80050d0:	b430      	push	{r4, r5}
 80050d2:	6943      	ldr	r3, [r0, #20]
 80050d4:	6980      	ldr	r0, [r0, #24]
 80050d6:	881a      	ldrh	r2, [r3, #0]
 80050d8:	2a00      	cmp	r2, #0
 80050da:	bf1a      	itte	ne
 80050dc:	6859      	ldrne	r1, [r3, #4]
 80050de:	1d09      	addne	r1, r1, #4
 80050e0:	2104      	moveq	r1, #4
 80050e2:	6809      	ldr	r1, [r1, #0]
 80050e4:	2900      	cmp	r1, #0
 80050e6:	bf14      	ite	ne
 80050e8:	680c      	ldrne	r4, [r1, #0]
 80050ea:	2400      	moveq	r4, #0
 80050ec:	2a02      	cmp	r2, #2
 80050ee:	bfa6      	itte	ge
 80050f0:	6859      	ldrge	r1, [r3, #4]
 80050f2:	3110      	addge	r1, #16
 80050f4:	2104      	movlt	r1, #4
 80050f6:	6809      	ldr	r1, [r1, #0]
 80050f8:	6883      	ldr	r3, [r0, #8]
 80050fa:	2900      	cmp	r1, #0
 80050fc:	bf19      	ittee	ne
 80050fe:	6809      	ldrne	r1, [r1, #0]
 8005100:	f101 0518 	addne.w	r5, r1, #24
 8005104:	2200      	moveq	r2, #0
 8005106:	f102 0518 	addeq.w	r5, r2, #24
 800510a:	f104 0208 	add.w	r2, r4, #8
 800510e:	69a1      	ldr	r1, [r4, #24]
 8005110:	6828      	ldr	r0, [r5, #0]
 8005112:	bc30      	pop	{r4, r5}
 8005114:	f7ff bbd0 	b.w	80048b8 <nl_func_hardmax_array_f32>

08005118 <ai_shape_get_size>:
 8005118:	b470      	push	{r4, r5, r6}
 800511a:	4601      	mov	r1, r0
 800511c:	f04f 0201 	mov.w	r2, #1
 8005120:	680b      	ldr	r3, [r1, #0]
 8005122:	0a1b      	lsrs	r3, r3, #8
 8005124:	d01e      	beq.n	8005164 <ai_shape_get_size+0x4c>
 8005126:	684c      	ldr	r4, [r1, #4]
 8005128:	4618      	mov	r0, r3
 800512a:	eb04 0183 	add.w	r1, r4, r3, lsl #2
 800512e:	1f0d      	subs	r5, r1, #4
 8005130:	f010 0103 	ands.w	r1, r0, #3
 8005134:	f000 8006 	beq.w	8005144 <ai_shape_get_size+0x2c>
 8005138:	f855 6904 	ldr.w	r6, [r5], #-4
 800513c:	1e5b      	subs	r3, r3, #1
 800513e:	4372      	muls	r2, r6
 8005140:	1e49      	subs	r1, r1, #1
 8005142:	d1f9      	bne.n	8005138 <ai_shape_get_size+0x20>
 8005144:	0880      	lsrs	r0, r0, #2
 8005146:	d00d      	beq.n	8005164 <ai_shape_get_size+0x4c>
 8005148:	eb04 0183 	add.w	r1, r4, r3, lsl #2
 800514c:	3910      	subs	r1, #16
 800514e:	68cb      	ldr	r3, [r1, #12]
 8005150:	688c      	ldr	r4, [r1, #8]
 8005152:	684d      	ldr	r5, [r1, #4]
 8005154:	f851 6910 	ldr.w	r6, [r1], #-16
 8005158:	4363      	muls	r3, r4
 800515a:	436b      	muls	r3, r5
 800515c:	4373      	muls	r3, r6
 800515e:	435a      	muls	r2, r3
 8005160:	1e40      	subs	r0, r0, #1
 8005162:	d1f4      	bne.n	800514e <ai_shape_get_size+0x36>
 8005164:	4610      	mov	r0, r2
 8005166:	bc70      	pop	{r4, r5, r6}
 8005168:	4770      	bx	lr
	...

0800516c <func_lrn_channel_f32>:
 800516c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005170:	461f      	mov	r7, r3
 8005172:	4604      	mov	r4, r0
 8005174:	ed2d 8b04 	vpush	{d8-d9}
 8005178:	4616      	mov	r6, r2
 800517a:	460d      	mov	r5, r1
 800517c:	00b1      	lsls	r1, r6, #2
 800517e:	eef0 8a40 	vmov.f32	s17, s0
 8005182:	f005 fe33 	bl	800adec <__aeabi_memclr>
 8005186:	2e00      	cmp	r6, #0
 8005188:	eeb0 9a60 	vmov.f32	s18, s1
 800518c:	eeb0 8a41 	vmov.f32	s16, s2
 8005190:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8005194:	dd4f      	ble.n	8005236 <func_lrn_channel_f32+0xca>
 8005196:	f107 0e01 	add.w	lr, r7, #1
 800519a:	427f      	negs	r7, r7
 800519c:	46a9      	mov	r9, r5
 800519e:	4630      	mov	r0, r6
 80051a0:	46b4      	mov	ip, r6
 80051a2:	463b      	mov	r3, r7
 80051a4:	4671      	mov	r1, lr
 80051a6:	ed99 0a00 	vldr	s0, [r9]
 80051aa:	45e6      	cmp	lr, ip
 80051ac:	ee20 0a00 	vmul.f32	s0, s0, s0
 80051b0:	bfc8      	it	gt
 80051b2:	4661      	movgt	r1, ip
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	bfcc      	ite	gt
 80051b8:	461a      	movgt	r2, r3
 80051ba:	2200      	movle	r2, #0
 80051bc:	428a      	cmp	r2, r1
 80051be:	da33      	bge.n	8005228 <func_lrn_channel_f32+0xbc>
 80051c0:	eb04 0782 	add.w	r7, r4, r2, lsl #2
 80051c4:	eb04 0682 	add.w	r6, r4, r2, lsl #2
 80051c8:	1c52      	adds	r2, r2, #1
 80051ca:	428a      	cmp	r2, r1
 80051cc:	edd7 0a00 	vldr	s1, [r7]
 80051d0:	ee70 0a80 	vadd.f32	s1, s1, s0
 80051d4:	edc6 0a00 	vstr	s1, [r6]
 80051d8:	da26      	bge.n	8005228 <func_lrn_channel_f32+0xbc>
 80051da:	eb04 0a82 	add.w	sl, r4, r2, lsl #2
 80051de:	eb04 0782 	add.w	r7, r4, r2, lsl #2
 80051e2:	1c52      	adds	r2, r2, #1
 80051e4:	428a      	cmp	r2, r1
 80051e6:	ed9a 1a00 	vldr	s2, [sl]
 80051ea:	ee31 1a00 	vadd.f32	s2, s2, s0
 80051ee:	ed87 1a00 	vstr	s2, [r7]
 80051f2:	da19      	bge.n	8005228 <func_lrn_channel_f32+0xbc>
 80051f4:	eb04 0682 	add.w	r6, r4, r2, lsl #2
 80051f8:	eb04 0a82 	add.w	sl, r4, r2, lsl #2
 80051fc:	1c52      	adds	r2, r2, #1
 80051fe:	428a      	cmp	r2, r1
 8005200:	edd6 0a00 	vldr	s1, [r6]
 8005204:	ee70 0a80 	vadd.f32	s1, s1, s0
 8005208:	edca 0a00 	vstr	s1, [sl]
 800520c:	da0c      	bge.n	8005228 <func_lrn_channel_f32+0xbc>
 800520e:	eb04 0782 	add.w	r7, r4, r2, lsl #2
 8005212:	eb04 0682 	add.w	r6, r4, r2, lsl #2
 8005216:	1c52      	adds	r2, r2, #1
 8005218:	428a      	cmp	r2, r1
 800521a:	ed97 1a00 	vldr	s2, [r7]
 800521e:	ee31 1a00 	vadd.f32	s2, s2, s0
 8005222:	ed86 1a00 	vstr	s2, [r6]
 8005226:	dbcb      	blt.n	80051c0 <func_lrn_channel_f32+0x54>
 8005228:	1c5b      	adds	r3, r3, #1
 800522a:	1e40      	subs	r0, r0, #1
 800522c:	f109 0904 	add.w	r9, r9, #4
 8005230:	f10e 0e01 	add.w	lr, lr, #1
 8005234:	d1b6      	bne.n	80051a4 <func_lrn_channel_f32+0x38>
 8005236:	4545      	cmp	r5, r8
 8005238:	f080 8014 	bcs.w	8005264 <func_lrn_channel_f32+0xf8>
 800523c:	ed94 1a00 	vldr	s2, [r4]
 8005240:	eeb0 0a68 	vmov.f32	s0, s17
 8005244:	eef1 0a48 	vneg.f32	s1, s16
 8005248:	ee09 0a01 	vmla.f32	s0, s18, s2
 800524c:	f006 ff10 	bl	800c070 <powf>
 8005250:	edd5 0a00 	vldr	s1, [r5]
 8005254:	1d2d      	adds	r5, r5, #4
 8005256:	ee60 0a80 	vmul.f32	s1, s1, s0
 800525a:	edc4 0a00 	vstr	s1, [r4]
 800525e:	1d24      	adds	r4, r4, #4
 8005260:	4545      	cmp	r5, r8
 8005262:	d3eb      	bcc.n	800523c <func_lrn_channel_f32+0xd0>
 8005264:	ecbd 8b04 	vpop	{d8-d9}
 8005268:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0800526c <func_norm_array_f32>:
 800526c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005270:	b081      	sub	sp, #4
 8005272:	4614      	mov	r4, r2
 8005274:	fb03 f804 	mul.w	r8, r3, r4
 8005278:	ed2d 8b04 	vpush	{d8-d9}
 800527c:	b084      	sub	sp, #16
 800527e:	eeb0 8a40 	vmov.f32	s16, s0
 8005282:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005284:	eef0 8a60 	vmov.f32	s17, s1
 8005288:	2a00      	cmp	r2, #0
 800528a:	d06a      	beq.n	8005362 <func_norm_array_f32+0xf6>
 800528c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8005290:	9102      	str	r1, [sp, #8]
 8005292:	ee80 9a08 	vdiv.f32	s18, s0, s16
 8005296:	9001      	str	r0, [sp, #4]
 8005298:	9200      	str	r2, [sp, #0]
 800529a:	2600      	movs	r6, #0
 800529c:	2c00      	cmp	r4, #0
 800529e:	d054      	beq.n	800534a <func_norm_array_f32+0xde>
 80052a0:	9d02      	ldr	r5, [sp, #8]
 80052a2:	9f01      	ldr	r7, [sp, #4]
 80052a4:	46a9      	mov	r9, r5
 80052a6:	46cb      	mov	fp, r9
 80052a8:	eb09 0a88 	add.w	sl, r9, r8, lsl #2
 80052ac:	9703      	str	r7, [sp, #12]
 80052ae:	eddf 9a68 	vldr	s19, [pc, #416]	; 8005450 <.text_6>
 80052b2:	45d3      	cmp	fp, sl
 80052b4:	f080 8016 	bcs.w	80052e4 <func_norm_array_f32+0x78>
 80052b8:	ed99 0a00 	vldr	s0, [r9]
 80052bc:	eb09 0984 	add.w	r9, r9, r4, lsl #2
 80052c0:	eef0 0a48 	vmov.f32	s1, s16
 80052c4:	eeb0 0ac0 	vabs.f32	s0, s0
 80052c8:	f006 fed2 	bl	800c070 <powf>
 80052cc:	45d1      	cmp	r9, sl
 80052ce:	ee79 9a80 	vadd.f32	s19, s19, s0
 80052d2:	d3f1      	bcc.n	80052b8 <func_norm_array_f32+0x4c>
 80052d4:	eef5 9a40 	vcmp.f32	s19, #0.0
 80052d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052dc:	bf18      	it	ne
 80052de:	ee88 0aa9 	vdivne.f32	s0, s17, s19
 80052e2:	d101      	bne.n	80052e8 <func_norm_array_f32+0x7c>
 80052e4:	eeb0 0a68 	vmov.f32	s0, s17
 80052e8:	eef0 0a49 	vmov.f32	s1, s18
 80052ec:	f006 fec0 	bl	800c070 <powf>
 80052f0:	45d3      	cmp	fp, sl
 80052f2:	4628      	mov	r0, r5
 80052f4:	d224      	bcs.n	8005340 <func_norm_array_f32+0xd4>
 80052f6:	9903      	ldr	r1, [sp, #12]
 80052f8:	edd0 0a00 	vldr	s1, [r0]
 80052fc:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 8005300:	ee60 0a80 	vmul.f32	s1, s1, s0
 8005304:	edc1 0a00 	vstr	s1, [r1]
 8005308:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800530c:	4550      	cmp	r0, sl
 800530e:	d217      	bcs.n	8005340 <func_norm_array_f32+0xd4>
 8005310:	ed90 1a00 	vldr	s2, [r0]
 8005314:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 8005318:	ee21 1a00 	vmul.f32	s2, s2, s0
 800531c:	ed81 1a00 	vstr	s2, [r1]
 8005320:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8005324:	4550      	cmp	r0, sl
 8005326:	d20b      	bcs.n	8005340 <func_norm_array_f32+0xd4>
 8005328:	edd0 0a00 	vldr	s1, [r0]
 800532c:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 8005330:	ee60 0a80 	vmul.f32	s1, s1, s0
 8005334:	edc1 0a00 	vstr	s1, [r1]
 8005338:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800533c:	4550      	cmp	r0, sl
 800533e:	d3db      	bcc.n	80052f8 <func_norm_array_f32+0x8c>
 8005340:	1c76      	adds	r6, r6, #1
 8005342:	1d3f      	adds	r7, r7, #4
 8005344:	1d2d      	adds	r5, r5, #4
 8005346:	42a6      	cmp	r6, r4
 8005348:	d3ac      	bcc.n	80052a4 <func_norm_array_f32+0x38>
 800534a:	9801      	ldr	r0, [sp, #4]
 800534c:	9a02      	ldr	r2, [sp, #8]
 800534e:	eb00 0188 	add.w	r1, r0, r8, lsl #2
 8005352:	9101      	str	r1, [sp, #4]
 8005354:	eb02 0388 	add.w	r3, r2, r8, lsl #2
 8005358:	9900      	ldr	r1, [sp, #0]
 800535a:	9302      	str	r3, [sp, #8]
 800535c:	1e49      	subs	r1, r1, #1
 800535e:	9100      	str	r1, [sp, #0]
 8005360:	d19b      	bne.n	800529a <func_norm_array_f32+0x2e>
 8005362:	b004      	add	sp, #16
 8005364:	ecbd 8b04 	vpop	{d8-d9}
 8005368:	b001      	add	sp, #4
 800536a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08005370 <func_norm_l2_fast_array_f32>:
 8005370:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005374:	b081      	sub	sp, #4
 8005376:	4616      	mov	r6, r2
 8005378:	460d      	mov	r5, r1
 800537a:	00b7      	lsls	r7, r6, #2
 800537c:	ed2d 8b02 	vpush	{d8}
 8005380:	4604      	mov	r4, r0
 8005382:	eeb0 8a40 	vmov.f32	s16, s0
 8005386:	eb05 0883 	add.w	r8, r5, r3, lsl #2
 800538a:	427f      	negs	r7, r7
 800538c:	4545      	cmp	r5, r8
 800538e:	d25a      	bcs.n	8005446 <func_norm_l2_fast_array_f32+0xd6>
 8005390:	eb05 0986 	add.w	r9, r5, r6, lsl #2
 8005394:	ed9f 0a2e 	vldr	s0, [pc, #184]	; 8005450 <.text_6>
 8005398:	454d      	cmp	r5, r9
 800539a:	d223      	bcs.n	80053e4 <func_norm_l2_fast_array_f32+0x74>
 800539c:	edd5 0a00 	vldr	s1, [r5]
 80053a0:	1d2d      	adds	r5, r5, #4
 80053a2:	454d      	cmp	r5, r9
 80053a4:	ee00 0aa0 	vmla.f32	s0, s1, s1
 80053a8:	bf3f      	itttt	cc
 80053aa:	ed95 1a00 	vldrcc	s2, [r5]
 80053ae:	ee01 0a01 	vmlacc.f32	s0, s2, s2
 80053b2:	1d2d      	addcc	r5, r5, #4
 80053b4:	454d      	cmpcc	r5, r9
 80053b6:	d20d      	bcs.n	80053d4 <func_norm_l2_fast_array_f32+0x64>
 80053b8:	edd5 0a00 	vldr	s1, [r5]
 80053bc:	1d2d      	adds	r5, r5, #4
 80053be:	454d      	cmp	r5, r9
 80053c0:	ee00 0aa0 	vmla.f32	s0, s1, s1
 80053c4:	bf3f      	itttt	cc
 80053c6:	ed95 1a00 	vldrcc	s2, [r5]
 80053ca:	ee01 0a01 	vmlacc.f32	s0, s2, s2
 80053ce:	1d2d      	addcc	r5, r5, #4
 80053d0:	454d      	cmpcc	r5, r9
 80053d2:	d3e3      	bcc.n	800539c <func_norm_l2_fast_array_f32+0x2c>
 80053d4:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80053d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053dc:	bf18      	it	ne
 80053de:	ee88 0a00 	vdivne.f32	s0, s16, s0
 80053e2:	d101      	bne.n	80053e8 <func_norm_l2_fast_array_f32+0x78>
 80053e4:	eeb0 0a48 	vmov.f32	s0, s16
 80053e8:	f001 fde6 	bl	8006fb8 <ai_math_sqrt>
 80053ec:	19ed      	adds	r5, r5, r7
 80053ee:	454d      	cmp	r5, r9
 80053f0:	f4bf afcc 	bcs.w	800538c <func_norm_l2_fast_array_f32+0x1c>
 80053f4:	edd5 0a00 	vldr	s1, [r5]
 80053f8:	1d2d      	adds	r5, r5, #4
 80053fa:	ee60 0a80 	vmul.f32	s1, s1, s0
 80053fe:	edc4 0a00 	vstr	s1, [r4]
 8005402:	1d24      	adds	r4, r4, #4
 8005404:	454d      	cmp	r5, r9
 8005406:	d2c1      	bcs.n	800538c <func_norm_l2_fast_array_f32+0x1c>
 8005408:	ed95 1a00 	vldr	s2, [r5]
 800540c:	1d2d      	adds	r5, r5, #4
 800540e:	ee21 1a00 	vmul.f32	s2, s2, s0
 8005412:	ed84 1a00 	vstr	s2, [r4]
 8005416:	1d24      	adds	r4, r4, #4
 8005418:	454d      	cmp	r5, r9
 800541a:	d2b7      	bcs.n	800538c <func_norm_l2_fast_array_f32+0x1c>
 800541c:	edd5 0a00 	vldr	s1, [r5]
 8005420:	1d2d      	adds	r5, r5, #4
 8005422:	ee60 0a80 	vmul.f32	s1, s1, s0
 8005426:	edc4 0a00 	vstr	s1, [r4]
 800542a:	1d24      	adds	r4, r4, #4
 800542c:	454d      	cmp	r5, r9
 800542e:	d2ad      	bcs.n	800538c <func_norm_l2_fast_array_f32+0x1c>
 8005430:	ed95 1a00 	vldr	s2, [r5]
 8005434:	1d2d      	adds	r5, r5, #4
 8005436:	ee21 1a00 	vmul.f32	s2, s2, s0
 800543a:	ed84 1a00 	vstr	s2, [r4]
 800543e:	1d24      	adds	r4, r4, #4
 8005440:	454d      	cmp	r5, r9
 8005442:	d3d7      	bcc.n	80053f4 <func_norm_l2_fast_array_f32+0x84>
 8005444:	e7a2      	b.n	800538c <func_norm_l2_fast_array_f32+0x1c>
 8005446:	ecbd 8b02 	vpop	{d8}
 800544a:	b001      	add	sp, #4
 800544c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08005450 <.text_6>:
 8005450:	00000000 	.word	0x00000000

08005454 <func_lrn_array_f32>:
 8005454:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005458:	460d      	mov	r5, r1
 800545a:	4604      	mov	r4, r0
 800545c:	eb05 0882 	add.w	r8, r5, r2, lsl #2
 8005460:	461e      	mov	r6, r3
 8005462:	ed2d 8b04 	vpush	{d8-d9}
 8005466:	eeb0 8a40 	vmov.f32	s16, s0
 800546a:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 800546c:	4545      	cmp	r5, r8
 800546e:	eef0 8a60 	vmov.f32	s17, s1
 8005472:	eeb0 9a41 	vmov.f32	s18, s2
 8005476:	d211      	bcs.n	800549c <func_lrn_array_f32+0x48>
 8005478:	eeb0 1a49 	vmov.f32	s2, s18
 800547c:	4629      	mov	r1, r5
 800547e:	eb05 0586 	add.w	r5, r5, r6, lsl #2
 8005482:	4620      	mov	r0, r4
 8005484:	eef0 0a68 	vmov.f32	s1, s17
 8005488:	463b      	mov	r3, r7
 800548a:	eeb0 0a48 	vmov.f32	s0, s16
 800548e:	4632      	mov	r2, r6
 8005490:	f7ff fe6c 	bl	800516c <func_lrn_channel_f32>
 8005494:	4545      	cmp	r5, r8
 8005496:	eb04 0486 	add.w	r4, r4, r6, lsl #2
 800549a:	d3ed      	bcc.n	8005478 <func_lrn_array_f32+0x24>
 800549c:	ecbd 8b04 	vpop	{d8-d9}
 80054a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080054a4 <forward_bn>:
 80054a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80054a8:	6942      	ldr	r2, [r0, #20]
 80054aa:	8810      	ldrh	r0, [r2, #0]
 80054ac:	2800      	cmp	r0, #0
 80054ae:	bf1a      	itte	ne
 80054b0:	6851      	ldrne	r1, [r2, #4]
 80054b2:	1d09      	addne	r1, r1, #4
 80054b4:	2104      	moveq	r1, #4
 80054b6:	6809      	ldr	r1, [r1, #0]
 80054b8:	2900      	cmp	r1, #0
 80054ba:	bf14      	ite	ne
 80054bc:	680c      	ldrne	r4, [r1, #0]
 80054be:	2400      	moveq	r4, #0
 80054c0:	2802      	cmp	r0, #2
 80054c2:	bfa6      	itte	ge
 80054c4:	6851      	ldrge	r1, [r2, #4]
 80054c6:	3110      	addge	r1, #16
 80054c8:	2104      	movlt	r1, #4
 80054ca:	6809      	ldr	r1, [r1, #0]
 80054cc:	2900      	cmp	r1, #0
 80054ce:	bf19      	ittee	ne
 80054d0:	6809      	ldrne	r1, [r1, #0]
 80054d2:	f101 0818 	addne.w	r8, r1, #24
 80054d6:	2300      	moveq	r3, #0
 80054d8:	f103 0818 	addeq.w	r8, r3, #24
 80054dc:	2803      	cmp	r0, #3
 80054de:	bfa6      	itte	ge
 80054e0:	6851      	ldrge	r1, [r2, #4]
 80054e2:	311c      	addge	r1, #28
 80054e4:	2104      	movlt	r1, #4
 80054e6:	6809      	ldr	r1, [r1, #0]
 80054e8:	2900      	cmp	r1, #0
 80054ea:	bf19      	ittee	ne
 80054ec:	6809      	ldrne	r1, [r1, #0]
 80054ee:	f101 0918 	addne.w	r9, r1, #24
 80054f2:	2300      	moveq	r3, #0
 80054f4:	f103 0918 	addeq.w	r9, r3, #24
 80054f8:	2803      	cmp	r0, #3
 80054fa:	db0a      	blt.n	8005512 <forward_bn+0x6e>
 80054fc:	6851      	ldr	r1, [r2, #4]
 80054fe:	f111 0018 	adds.w	r0, r1, #24
 8005502:	d006      	beq.n	8005512 <forward_bn+0x6e>
 8005504:	8b0a      	ldrh	r2, [r1, #24]
 8005506:	2a02      	cmp	r2, #2
 8005508:	db03      	blt.n	8005512 <forward_bn+0x6e>
 800550a:	69c8      	ldr	r0, [r1, #28]
 800550c:	b108      	cbz	r0, 8005512 <forward_bn+0x6e>
 800550e:	6846      	ldr	r6, [r0, #4]
 8005510:	e000      	b.n	8005514 <forward_bn+0x70>
 8005512:	2600      	movs	r6, #0
 8005514:	f104 0208 	add.w	r2, r4, #8
 8005518:	f04f 0101 	mov.w	r1, #1
 800551c:	6813      	ldr	r3, [r2, #0]
 800551e:	0a1b      	lsrs	r3, r3, #8
 8005520:	d024      	beq.n	800556c <forward_bn+0xc8>
 8005522:	f8d2 c004 	ldr.w	ip, [r2, #4]
 8005526:	4618      	mov	r0, r3
 8005528:	eb0c 0283 	add.w	r2, ip, r3, lsl #2
 800552c:	f1a2 0e04 	sub.w	lr, r2, #4
 8005530:	f010 0203 	ands.w	r2, r0, #3
 8005534:	f000 8006 	beq.w	8005544 <forward_bn+0xa0>
 8005538:	f85e 5904 	ldr.w	r5, [lr], #-4
 800553c:	1e5b      	subs	r3, r3, #1
 800553e:	4369      	muls	r1, r5
 8005540:	1e52      	subs	r2, r2, #1
 8005542:	d1f9      	bne.n	8005538 <forward_bn+0x94>
 8005544:	0880      	lsrs	r0, r0, #2
 8005546:	d011      	beq.n	800556c <forward_bn+0xc8>
 8005548:	eb0c 0283 	add.w	r2, ip, r3, lsl #2
 800554c:	3a10      	subs	r2, #16
 800554e:	68d3      	ldr	r3, [r2, #12]
 8005550:	f8d2 c008 	ldr.w	ip, [r2, #8]
 8005554:	f8d2 e004 	ldr.w	lr, [r2, #4]
 8005558:	f852 5910 	ldr.w	r5, [r2], #-16
 800555c:	fb0c f303 	mul.w	r3, ip, r3
 8005560:	fb0e f303 	mul.w	r3, lr, r3
 8005564:	436b      	muls	r3, r5
 8005566:	4359      	muls	r1, r3
 8005568:	1e40      	subs	r0, r0, #1
 800556a:	d1f0      	bne.n	800554e <forward_bn+0xaa>
 800556c:	68e0      	ldr	r0, [r4, #12]
 800556e:	69a3      	ldr	r3, [r4, #24]
 8005570:	2e00      	cmp	r6, #0
 8005572:	6842      	ldr	r2, [r0, #4]
 8005574:	f8d8 0000 	ldr.w	r0, [r8]
 8005578:	f8d9 8000 	ldr.w	r8, [r9]
 800557c:	689b      	ldr	r3, [r3, #8]
 800557e:	6884      	ldr	r4, [r0, #8]
 8005580:	f8d8 9008 	ldr.w	r9, [r8, #8]
 8005584:	d06c      	beq.n	8005660 <forward_bn+0x1bc>
 8005586:	69b0      	ldr	r0, [r6, #24]
 8005588:	46c8      	mov	r8, r9
 800558a:	2900      	cmp	r1, #0
 800558c:	f04f 0900 	mov.w	r9, #0
 8005590:	6886      	ldr	r6, [r0, #8]
 8005592:	d063      	beq.n	800565c <forward_bn+0x1b8>
 8005594:	eb02 0c09 	add.w	ip, r2, r9
 8005598:	45e1      	cmp	r9, ip
 800559a:	46ce      	mov	lr, r9
 800559c:	d25b      	bcs.n	8005656 <forward_bn+0x1b2>
 800559e:	f012 0003 	ands.w	r0, r2, #3
 80055a2:	eb04 058e 	add.w	r5, r4, lr, lsl #2
 80055a6:	eb03 078e 	add.w	r7, r3, lr, lsl #2
 80055aa:	46c2      	mov	sl, r8
 80055ac:	46b3      	mov	fp, r6
 80055ae:	d014      	beq.n	80055da <forward_bn+0x136>
 80055b0:	ed97 0a00 	vldr	s0, [r7]
 80055b4:	1e40      	subs	r0, r0, #1
 80055b6:	edda 0a00 	vldr	s1, [sl]
 80055ba:	1d3f      	adds	r7, r7, #4
 80055bc:	ed9b 1a00 	vldr	s2, [fp]
 80055c0:	f10e 0e01 	add.w	lr, lr, #1
 80055c4:	ee00 1a20 	vmla.f32	s2, s0, s1
 80055c8:	f10b 0b04 	add.w	fp, fp, #4
 80055cc:	ed85 1a00 	vstr	s2, [r5]
 80055d0:	1d2d      	adds	r5, r5, #4
 80055d2:	2800      	cmp	r0, #0
 80055d4:	f10a 0a04 	add.w	sl, sl, #4
 80055d8:	d1ea      	bne.n	80055b0 <forward_bn+0x10c>
 80055da:	0890      	lsrs	r0, r2, #2
 80055dc:	f000 803b 	beq.w	8005656 <forward_bn+0x1b2>
 80055e0:	ebae 0909 	sub.w	r9, lr, r9
 80055e4:	eb03 058e 	add.w	r5, r3, lr, lsl #2
 80055e8:	eb08 0789 	add.w	r7, r8, r9, lsl #2
 80055ec:	eb06 0989 	add.w	r9, r6, r9, lsl #2
 80055f0:	eb04 0e8e 	add.w	lr, r4, lr, lsl #2
 80055f4:	ed95 2a00 	vldr	s4, [r5]
 80055f8:	1e40      	subs	r0, r0, #1
 80055fa:	ed97 1a00 	vldr	s2, [r7]
 80055fe:	ed99 0a00 	vldr	s0, [r9]
 8005602:	ee02 0a01 	vmla.f32	s0, s4, s2
 8005606:	ed8e 0a00 	vstr	s0, [lr]
 800560a:	edd5 2a01 	vldr	s5, [r5, #4]
 800560e:	edd7 1a01 	vldr	s3, [r7, #4]
 8005612:	edd9 0a01 	vldr	s1, [r9, #4]
 8005616:	ee42 0aa1 	vmla.f32	s1, s5, s3
 800561a:	edce 0a01 	vstr	s1, [lr, #4]
 800561e:	ed95 2a02 	vldr	s4, [r5, #8]
 8005622:	ed97 1a02 	vldr	s2, [r7, #8]
 8005626:	ed99 0a02 	vldr	s0, [r9, #8]
 800562a:	ee02 0a01 	vmla.f32	s0, s4, s2
 800562e:	ed8e 0a02 	vstr	s0, [lr, #8]
 8005632:	edd5 1a03 	vldr	s3, [r5, #12]
 8005636:	3510      	adds	r5, #16
 8005638:	edd7 0a03 	vldr	s1, [r7, #12]
 800563c:	3710      	adds	r7, #16
 800563e:	edd9 2a03 	vldr	s5, [r9, #12]
 8005642:	2800      	cmp	r0, #0
 8005644:	ee41 2aa0 	vmla.f32	s5, s3, s1
 8005648:	f109 0910 	add.w	r9, r9, #16
 800564c:	edce 2a03 	vstr	s5, [lr, #12]
 8005650:	f10e 0e10 	add.w	lr, lr, #16
 8005654:	d1ce      	bne.n	80055f4 <forward_bn+0x150>
 8005656:	46e1      	mov	r9, ip
 8005658:	4589      	cmp	r9, r1
 800565a:	d39b      	bcc.n	8005594 <forward_bn+0xf0>
 800565c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005660:	2900      	cmp	r1, #0
 8005662:	f04f 0c00 	mov.w	ip, #0
 8005666:	d0f9      	beq.n	800565c <forward_bn+0x1b8>
 8005668:	4616      	mov	r6, r2
 800566a:	4698      	mov	r8, r3
 800566c:	eb06 020c 	add.w	r2, r6, ip
 8005670:	4594      	cmp	ip, r2
 8005672:	4663      	mov	r3, ip
 8005674:	d24a      	bcs.n	800570c <forward_bn+0x268>
 8005676:	f016 0003 	ands.w	r0, r6, #3
 800567a:	eb04 0e83 	add.w	lr, r4, r3, lsl #2
 800567e:	eb08 0583 	add.w	r5, r8, r3, lsl #2
 8005682:	464f      	mov	r7, r9
 8005684:	f000 8010 	beq.w	80056a8 <forward_bn+0x204>
 8005688:	ed95 0a00 	vldr	s0, [r5]
 800568c:	1c5b      	adds	r3, r3, #1
 800568e:	edd7 0a00 	vldr	s1, [r7]
 8005692:	1e40      	subs	r0, r0, #1
 8005694:	1d3f      	adds	r7, r7, #4
 8005696:	1d2d      	adds	r5, r5, #4
 8005698:	ee60 0a20 	vmul.f32	s1, s0, s1
 800569c:	2800      	cmp	r0, #0
 800569e:	edce 0a00 	vstr	s1, [lr]
 80056a2:	f10e 0e04 	add.w	lr, lr, #4
 80056a6:	d1ef      	bne.n	8005688 <forward_bn+0x1e4>
 80056a8:	08b0      	lsrs	r0, r6, #2
 80056aa:	d02f      	beq.n	800570c <forward_bn+0x268>
 80056ac:	eb08 0e83 	add.w	lr, r8, r3, lsl #2
 80056b0:	eba3 0c0c 	sub.w	ip, r3, ip
 80056b4:	eb09 0c8c 	add.w	ip, r9, ip, lsl #2
 80056b8:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80056bc:	ed9e 1a00 	vldr	s2, [lr]
 80056c0:	1e40      	subs	r0, r0, #1
 80056c2:	ed9c 0a00 	vldr	s0, [ip]
 80056c6:	ee21 0a00 	vmul.f32	s0, s2, s0
 80056ca:	ed83 0a00 	vstr	s0, [r3]
 80056ce:	edde 1a01 	vldr	s3, [lr, #4]
 80056d2:	eddc 0a01 	vldr	s1, [ip, #4]
 80056d6:	ee61 0aa0 	vmul.f32	s1, s3, s1
 80056da:	edc3 0a01 	vstr	s1, [r3, #4]
 80056de:	ed9e 1a02 	vldr	s2, [lr, #8]
 80056e2:	ed9c 0a02 	vldr	s0, [ip, #8]
 80056e6:	ee21 0a00 	vmul.f32	s0, s2, s0
 80056ea:	ed83 0a02 	vstr	s0, [r3, #8]
 80056ee:	edde 0a03 	vldr	s1, [lr, #12]
 80056f2:	f10e 0e10 	add.w	lr, lr, #16
 80056f6:	eddc 1a03 	vldr	s3, [ip, #12]
 80056fa:	f10c 0c10 	add.w	ip, ip, #16
 80056fe:	ee60 0aa1 	vmul.f32	s1, s1, s3
 8005702:	edc3 0a03 	vstr	s1, [r3, #12]
 8005706:	3310      	adds	r3, #16
 8005708:	2800      	cmp	r0, #0
 800570a:	d1d7      	bne.n	80056bc <forward_bn+0x218>
 800570c:	4694      	mov	ip, r2
 800570e:	458c      	cmp	ip, r1
 8005710:	d3ac      	bcc.n	800566c <forward_bn+0x1c8>
 8005712:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005716 <forward_lrn>:
 8005716:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005718:	b081      	sub	sp, #4
 800571a:	4604      	mov	r4, r0
 800571c:	6962      	ldr	r2, [r4, #20]
 800571e:	8811      	ldrh	r1, [r2, #0]
 8005720:	2900      	cmp	r1, #0
 8005722:	bf1a      	itte	ne
 8005724:	6850      	ldrne	r0, [r2, #4]
 8005726:	1d00      	addne	r0, r0, #4
 8005728:	2004      	moveq	r0, #4
 800572a:	6800      	ldr	r0, [r0, #0]
 800572c:	2800      	cmp	r0, #0
 800572e:	bf14      	ite	ne
 8005730:	6805      	ldrne	r5, [r0, #0]
 8005732:	2500      	moveq	r5, #0
 8005734:	2902      	cmp	r1, #2
 8005736:	bfa6      	itte	ge
 8005738:	6850      	ldrge	r0, [r2, #4]
 800573a:	3010      	addge	r0, #16
 800573c:	2004      	movlt	r0, #4
 800573e:	6800      	ldr	r0, [r0, #0]
 8005740:	68ea      	ldr	r2, [r5, #12]
 8005742:	2800      	cmp	r0, #0
 8005744:	bf19      	ittee	ne
 8005746:	6800      	ldrne	r0, [r0, #0]
 8005748:	f100 0618 	addne.w	r6, r0, #24
 800574c:	2100      	moveq	r1, #0
 800574e:	f101 0618 	addeq.w	r6, r1, #24
 8005752:	6857      	ldr	r7, [r2, #4]
 8005754:	f105 0008 	add.w	r0, r5, #8
 8005758:	f7ff fcde 	bl	8005118 <ai_shape_get_size>
 800575c:	69a1      	ldr	r1, [r4, #24]
 800575e:	4602      	mov	r2, r0
 8005760:	463b      	mov	r3, r7
 8005762:	0849      	lsrs	r1, r1, #1
 8005764:	9100      	str	r1, [sp, #0]
 8005766:	ed94 1a09 	vldr	s2, [r4, #36]	; 0x24
 800576a:	edd4 0a08 	vldr	s1, [r4, #32]
 800576e:	69a8      	ldr	r0, [r5, #24]
 8005770:	ed94 0a07 	vldr	s0, [r4, #28]
 8005774:	6834      	ldr	r4, [r6, #0]
 8005776:	6881      	ldr	r1, [r0, #8]
 8005778:	68a0      	ldr	r0, [r4, #8]
 800577a:	f7ff fe6b 	bl	8005454 <func_lrn_array_f32>
 800577e:	b001      	add	sp, #4
 8005780:	bdf0      	pop	{r4, r5, r6, r7, pc}

08005782 <forward_norm>:
 8005782:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005786:	b082      	sub	sp, #8
 8005788:	4604      	mov	r4, r0
 800578a:	6962      	ldr	r2, [r4, #20]
 800578c:	8811      	ldrh	r1, [r2, #0]
 800578e:	2900      	cmp	r1, #0
 8005790:	bf1a      	itte	ne
 8005792:	6850      	ldrne	r0, [r2, #4]
 8005794:	1d00      	addne	r0, r0, #4
 8005796:	2004      	moveq	r0, #4
 8005798:	6800      	ldr	r0, [r0, #0]
 800579a:	2800      	cmp	r0, #0
 800579c:	bf14      	ite	ne
 800579e:	6805      	ldrne	r5, [r0, #0]
 80057a0:	2500      	moveq	r5, #0
 80057a2:	2902      	cmp	r1, #2
 80057a4:	bfa6      	itte	ge
 80057a6:	6850      	ldrge	r0, [r2, #4]
 80057a8:	3010      	addge	r0, #16
 80057aa:	2004      	movlt	r0, #4
 80057ac:	6800      	ldr	r0, [r0, #0]
 80057ae:	2800      	cmp	r0, #0
 80057b0:	bf19      	ittee	ne
 80057b2:	6800      	ldrne	r0, [r0, #0]
 80057b4:	f100 0618 	addne.w	r6, r0, #24
 80057b8:	2100      	moveq	r1, #0
 80057ba:	f101 0618 	addeq.w	r6, r1, #24
 80057be:	7e20      	ldrb	r0, [r4, #24]
 80057c0:	68e9      	ldr	r1, [r5, #12]
 80057c2:	f851 8020 	ldr.w	r8, [r1, r0, lsl #2]
 80057c6:	6969      	ldr	r1, [r5, #20]
 80057c8:	f851 2020 	ldr.w	r2, [r1, r0, lsl #2]
 80057cc:	6809      	ldr	r1, [r1, #0]
 80057ce:	f105 0008 	add.w	r0, r5, #8
 80057d2:	fb92 f7f1 	sdiv	r7, r2, r1
 80057d6:	f7ff fc9f 	bl	8005118 <ai_shape_get_size>
 80057da:	4603      	mov	r3, r0
 80057dc:	fb07 f008 	mul.w	r0, r7, r8
 80057e0:	eeb0 1a00 	vmov.f32	s2, #0	; 0x40000000  2.0
 80057e4:	fbb3 f1f0 	udiv	r1, r3, r0
 80057e8:	f894 0020 	ldrb.w	r0, [r4, #32]
 80057ec:	2800      	cmp	r0, #0
 80057ee:	bf1a      	itte	ne
 80057f0:	ee00 8a10 	vmovne	s0, r8
 80057f4:	eef8 0a40 	vcvtne.f32.u32	s1, s0
 80057f8:	eef7 0a00 	vmoveq.f32	s1, #112	; 0x3f800000  1.0
 80057fc:	ed94 0a07 	vldr	s0, [r4, #28]
 8005800:	eeb4 0a41 	vcmp.f32	s0, s2
 8005804:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005808:	bf08      	it	eq
 800580a:	2f01      	cmpeq	r7, #1
 800580c:	d10a      	bne.n	8005824 <forward_norm+0xa2>
 800580e:	69a8      	ldr	r0, [r5, #24]
 8005810:	6834      	ldr	r4, [r6, #0]
 8005812:	4642      	mov	r2, r8
 8005814:	eeb0 0a60 	vmov.f32	s0, s1
 8005818:	6881      	ldr	r1, [r0, #8]
 800581a:	68a0      	ldr	r0, [r4, #8]
 800581c:	b002      	add	sp, #8
 800581e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005822:	e5a5      	b.n	8005370 <func_norm_l2_fast_array_f32>
 8005824:	9100      	str	r1, [sp, #0]
 8005826:	69a8      	ldr	r0, [r5, #24]
 8005828:	6834      	ldr	r4, [r6, #0]
 800582a:	4643      	mov	r3, r8
 800582c:	463a      	mov	r2, r7
 800582e:	6881      	ldr	r1, [r0, #8]
 8005830:	68a0      	ldr	r0, [r4, #8]
 8005832:	f7ff fd1b 	bl	800526c <func_norm_array_f32>
 8005836:	b002      	add	sp, #8
 8005838:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800583c <pool_func_mp_array_f32>:
 800583c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005840:	b08c      	sub	sp, #48	; 0x30
 8005842:	4688      	mov	r8, r1
 8005844:	9c1c      	ldr	r4, [sp, #112]	; 0x70
 8005846:	f8dd c060 	ldr.w	ip, [sp, #96]	; 0x60
 800584a:	9f16      	ldr	r7, [sp, #88]	; 0x58
 800584c:	f8d0 e008 	ldr.w	lr, [r0, #8]
 8005850:	f8bd 005c 	ldrh.w	r0, [sp, #92]	; 0x5c
 8005854:	991d      	ldr	r1, [sp, #116]	; 0x74
 8005856:	1e66      	subs	r6, r4, #1
 8005858:	4615      	mov	r5, r2
 800585a:	f8cd e014 	str.w	lr, [sp, #20]
 800585e:	f9bd e068 	ldrsh.w	lr, [sp, #104]	; 0x68
 8005862:	9a19      	ldr	r2, [sp, #100]	; 0x64
 8005864:	6889      	ldr	r1, [r1, #8]
 8005866:	fb16 fe0e 	smulbb	lr, r6, lr
 800586a:	ebae 0e0c 	sub.w	lr, lr, ip
 800586e:	44be      	add	lr, r7
 8005870:	f1ae 0601 	sub.w	r6, lr, #1
 8005874:	1b76      	subs	r6, r6, r5
 8005876:	ea50 000c 	orrs.w	r0, r0, ip
 800587a:	f040 80ea 	bne.w	8005a52 <pool_func_mp_array_f32+0x216>
 800587e:	f9bd 906c 	ldrsh.w	r9, [sp, #108]	; 0x6c
 8005882:	f9bd e05c 	ldrsh.w	lr, [sp, #92]	; 0x5c
 8005886:	f9bd 0054 	ldrsh.w	r0, [sp, #84]	; 0x54
 800588a:	f1a9 0a01 	sub.w	sl, r9, #1
 800588e:	fb1a fa02 	smulbb	sl, sl, r2
 8005892:	ebaa 0a0e 	sub.w	sl, sl, lr
 8005896:	4482      	add	sl, r0
 8005898:	f1aa 0901 	sub.w	r9, sl, #1
 800589c:	eba9 0908 	sub.w	r9, r9, r8
 80058a0:	fa0f f989 	sxth.w	r9, r9
 80058a4:	f1b9 0f00 	cmp.w	r9, #0
 80058a8:	bf44      	itt	mi
 80058aa:	b236      	sxthmi	r6, r6
 80058ac:	2e00      	cmpmi	r6, #0
 80058ae:	f140 80d0 	bpl.w	8005a52 <pool_func_mp_array_f32+0x216>
 80058b2:	2500      	movs	r5, #0
 80058b4:	0020      	movs	r0, r4
 80058b6:	9509      	str	r5, [sp, #36]	; 0x24
 80058b8:	f000 8188 	beq.w	8005bcc <pool_func_mp_array_f32+0x390>
 80058bc:	b23f      	sxth	r7, r7
 80058be:	ed9f 0ac5 	vldr	s0, [pc, #788]	; 8005bd4 <.text_3>
 80058c2:	f8ad 7006 	strh.w	r7, [sp, #6]
 80058c6:	9502      	str	r5, [sp, #8]
 80058c8:	9508      	str	r5, [sp, #32]
 80058ca:	9407      	str	r4, [sp, #28]
 80058cc:	ea4f 0403 	mov.w	r4, r3
 80058d0:	f8bd 006c 	ldrh.w	r0, [sp, #108]	; 0x6c
 80058d4:	f9bd 7006 	ldrsh.w	r7, [sp, #6]
 80058d8:	2800      	cmp	r0, #0
 80058da:	f000 809c 	beq.w	8005a16 <pool_func_mp_array_f32+0x1da>
 80058de:	f8bd 6068 	ldrh.w	r6, [sp, #104]	; 0x68
 80058e2:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80058e6:	f9bd 0054 	ldrsh.w	r0, [sp, #84]	; 0x54
 80058ea:	f8bd c06c 	ldrh.w	ip, [sp, #108]	; 0x6c
 80058ee:	9d08      	ldr	r5, [sp, #32]
 80058f0:	f8ad 3002 	strh.w	r3, [sp, #2]
 80058f4:	f04f 0a00 	mov.w	sl, #0
 80058f8:	9503      	str	r5, [sp, #12]
 80058fa:	fb06 f909 	mul.w	r9, r6, r9
 80058fe:	f8ad 2064 	strh.w	r2, [sp, #100]	; 0x64
 8005902:	9104      	str	r1, [sp, #16]
 8005904:	f8ad 0000 	strh.w	r0, [sp]
 8005908:	fa0f f989 	sxth.w	r9, r9
 800590c:	f8cd c018 	str.w	ip, [sp, #24]
 8005910:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
 8005914:	f8ad 8004 	strh.w	r8, [sp, #4]
 8005918:	f8bd 0002 	ldrh.w	r0, [sp, #2]
 800591c:	2100      	movs	r1, #0
 800591e:	f9bd e000 	ldrsh.w	lr, [sp]
 8005922:	2800      	cmp	r0, #0
 8005924:	d05f      	beq.n	80059e6 <pool_func_mp_array_f32+0x1aa>
 8005926:	9b03      	ldr	r3, [sp, #12]
 8005928:	f10d 0808 	add.w	r8, sp, #8
 800592c:	f9b8 6000 	ldrsh.w	r6, [r8]
 8005930:	9a04      	ldr	r2, [sp, #16]
 8005932:	4363      	muls	r3, r4
 8005934:	fa0f f58a 	sxth.w	r5, sl
 8005938:	960a      	str	r6, [sp, #40]	; 0x28
 800593a:	eb02 0c83 	add.w	ip, r2, r3, lsl #2
 800593e:	f8bd 8004 	ldrh.w	r8, [sp, #4]
 8005942:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005944:	eef0 0a40 	vmov.f32	s1, s0
 8005948:	42ba      	cmp	r2, r7
 800594a:	da45      	bge.n	80059d8 <pool_func_mp_array_f32+0x19c>
 800594c:	fb08 f902 	mul.w	r9, r8, r2
 8005950:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005952:	9805      	ldr	r0, [sp, #20]
 8005954:	1aba      	subs	r2, r7, r2
 8005956:	4575      	cmp	r5, lr
 8005958:	462e      	mov	r6, r5
 800595a:	da39      	bge.n	80059d0 <pool_func_mp_array_f32+0x194>
 800595c:	ebae 0305 	sub.w	r3, lr, r5
 8005960:	ea5f 7bc3 	movs.w	fp, r3, lsl #31
 8005964:	d50f      	bpl.n	8005986 <pool_func_mp_array_f32+0x14a>
 8005966:	eb09 0b06 	add.w	fp, r9, r6
 800596a:	fb0b 1b04 	mla	fp, fp, r4, r1
 800596e:	eb00 0b8b 	add.w	fp, r0, fp, lsl #2
 8005972:	ed9b 1a00 	vldr	s2, [fp]
 8005976:	eeb4 1a60 	vcmp.f32	s2, s1
 800597a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800597e:	bf58      	it	pl
 8005980:	eef0 0a41 	vmovpl.f32	s1, s2
 8005984:	1c76      	adds	r6, r6, #1
 8005986:	085b      	lsrs	r3, r3, #1
 8005988:	f000 8022 	beq.w	80059d0 <pool_func_mp_array_f32+0x194>
 800598c:	eb09 0b06 	add.w	fp, r9, r6
 8005990:	fb0b 1b04 	mla	fp, fp, r4, r1
 8005994:	eb00 0b8b 	add.w	fp, r0, fp, lsl #2
 8005998:	ed9b 1a00 	vldr	s2, [fp]
 800599c:	eeb4 1a60 	vcmp.f32	s2, s1
 80059a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80059a4:	bf58      	it	pl
 80059a6:	eef0 0a41 	vmovpl.f32	s1, s2
 80059aa:	1c76      	adds	r6, r6, #1
 80059ac:	eb09 0b06 	add.w	fp, r9, r6
 80059b0:	fb0b 1b04 	mla	fp, fp, r4, r1
 80059b4:	eb00 0b8b 	add.w	fp, r0, fp, lsl #2
 80059b8:	ed9b 1a00 	vldr	s2, [fp]
 80059bc:	eeb4 1a60 	vcmp.f32	s2, s1
 80059c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80059c4:	bf58      	it	pl
 80059c6:	eef0 0a41 	vmovpl.f32	s1, s2
 80059ca:	1c76      	adds	r6, r6, #1
 80059cc:	1e5b      	subs	r3, r3, #1
 80059ce:	d1dd      	bne.n	800598c <pool_func_mp_array_f32+0x150>
 80059d0:	1e52      	subs	r2, r2, #1
 80059d2:	44c1      	add	r9, r8
 80059d4:	d1bf      	bne.n	8005956 <pool_func_mp_array_f32+0x11a>
 80059d6:	9005      	str	r0, [sp, #20]
 80059d8:	1c49      	adds	r1, r1, #1
 80059da:	edcc 0a00 	vstr	s1, [ip]
 80059de:	42a1      	cmp	r1, r4
 80059e0:	f10c 0c04 	add.w	ip, ip, #4
 80059e4:	dbad      	blt.n	8005942 <pool_func_mp_array_f32+0x106>
 80059e6:	f8bd 1064 	ldrh.w	r1, [sp, #100]	; 0x64
 80059ea:	f8bd 2000 	ldrh.w	r2, [sp]
 80059ee:	f9bd 3064 	ldrsh.w	r3, [sp, #100]	; 0x64
 80059f2:	9803      	ldr	r0, [sp, #12]
 80059f4:	448a      	add	sl, r1
 80059f6:	9906      	ldr	r1, [sp, #24]
 80059f8:	1c40      	adds	r0, r0, #1
 80059fa:	9003      	str	r0, [sp, #12]
 80059fc:	189a      	adds	r2, r3, r2
 80059fe:	1e49      	subs	r1, r1, #1
 8005a00:	f8ad 2000 	strh.w	r2, [sp]
 8005a04:	9106      	str	r1, [sp, #24]
 8005a06:	d187      	bne.n	8005918 <pool_func_mp_array_f32+0xdc>
 8005a08:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8005a0c:	f8bd 2064 	ldrh.w	r2, [sp, #100]	; 0x64
 8005a10:	9904      	ldr	r1, [sp, #16]
 8005a12:	f8bd 8004 	ldrh.w	r8, [sp, #4]
 8005a16:	f8bd 706c 	ldrh.w	r7, [sp, #108]	; 0x6c
 8005a1a:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005a1c:	9d08      	ldr	r5, [sp, #32]
 8005a1e:	f8bd 6068 	ldrh.w	r6, [sp, #104]	; 0x68
 8005a22:	f8dd e008 	ldr.w	lr, [sp, #8]
 8005a26:	1c40      	adds	r0, r0, #1
 8005a28:	19ef      	adds	r7, r5, r7
 8005a2a:	9009      	str	r0, [sp, #36]	; 0x24
 8005a2c:	9708      	str	r7, [sp, #32]
 8005a2e:	4476      	add	r6, lr
 8005a30:	9602      	str	r6, [sp, #8]
 8005a32:	f8bd 7006 	ldrh.w	r7, [sp, #6]
 8005a36:	f9bd 5068 	ldrsh.w	r5, [sp, #104]	; 0x68
 8005a3a:	f8dd e01c 	ldr.w	lr, [sp, #28]
 8005a3e:	19ef      	adds	r7, r5, r7
 8005a40:	f8ad 7006 	strh.w	r7, [sp, #6]
 8005a44:	f1be 0e01 	subs.w	lr, lr, #1
 8005a48:	f8cd e01c 	str.w	lr, [sp, #28]
 8005a4c:	f000 80be 	beq.w	8005bcc <pool_func_mp_array_f32+0x390>
 8005a50:	e73e      	b.n	80058d0 <pool_func_mp_array_f32+0x94>
 8005a52:	0020      	movs	r0, r4
 8005a54:	f000 80ba 	beq.w	8005bcc <pool_func_mp_array_f32+0x390>
 8005a58:	f1cc 0c00 	rsb	ip, ip, #0
 8005a5c:	4467      	add	r7, ip
 8005a5e:	f8ad c000 	strh.w	ip, [sp]
 8005a62:	2600      	movs	r6, #0
 8005a64:	f8ad 700a 	strh.w	r7, [sp, #10]
 8005a68:	ed9f 0a5a 	vldr	s0, [pc, #360]	; 8005bd4 <.text_3>
 8005a6c:	9609      	str	r6, [sp, #36]	; 0x24
 8005a6e:	9408      	str	r4, [sp, #32]
 8005a70:	f8bd 006c 	ldrh.w	r0, [sp, #108]	; 0x6c
 8005a74:	f9bd a00a 	ldrsh.w	sl, [sp, #10]
 8005a78:	2800      	cmp	r0, #0
 8005a7a:	f000 808e 	beq.w	8005b9a <pool_func_mp_array_f32+0x35e>
 8005a7e:	f9bd 605c 	ldrsh.w	r6, [sp, #92]	; 0x5c
 8005a82:	f9bd 7054 	ldrsh.w	r7, [sp, #84]	; 0x54
 8005a86:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
 8005a8a:	f8ad 3002 	strh.w	r3, [sp, #2]
 8005a8e:	f8cd e00c 	str.w	lr, [sp, #12]
 8005a92:	f8bd e06c 	ldrh.w	lr, [sp, #108]	; 0x6c
 8005a96:	f8ad 2064 	strh.w	r2, [sp, #100]	; 0x64
 8005a9a:	4276      	negs	r6, r6
 8005a9c:	19bf      	adds	r7, r7, r6
 8005a9e:	9104      	str	r1, [sp, #16]
 8005aa0:	f8ad 6006 	strh.w	r6, [sp, #6]
 8005aa4:	f8ad 7008 	strh.w	r7, [sp, #8]
 8005aa8:	f8cd e01c 	str.w	lr, [sp, #28]
 8005aac:	f8ad 8004 	strh.w	r8, [sp, #4]
 8005ab0:	f8bd 1002 	ldrh.w	r1, [sp, #2]
 8005ab4:	2600      	movs	r6, #0
 8005ab6:	f9bd 0008 	ldrsh.w	r0, [sp, #8]
 8005aba:	2900      	cmp	r1, #0
 8005abc:	d051      	beq.n	8005b62 <pool_func_mp_array_f32+0x326>
 8005abe:	9b03      	ldr	r3, [sp, #12]
 8005ac0:	9a04      	ldr	r2, [sp, #16]
 8005ac2:	f9bd 4006 	ldrsh.w	r4, [sp, #6]
 8005ac6:	4359      	muls	r1, r3
 8005ac8:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8005acc:	eb02 0181 	add.w	r1, r2, r1, lsl #2
 8005ad0:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8005ad4:	f8cd 1018 	str.w	r1, [sp, #24]
 8005ad8:	f9bd 1000 	ldrsh.w	r1, [sp]
 8005adc:	eef0 0a40 	vmov.f32	s1, s0
 8005ae0:	4551      	cmp	r1, sl
 8005ae2:	da2c      	bge.n	8005b3e <pool_func_mp_array_f32+0x302>
 8005ae4:	fb03 f901 	mul.w	r9, r3, r1
 8005ae8:	f8ad 5002 	strh.w	r5, [sp, #2]
 8005aec:	4284      	cmp	r4, r0
 8005aee:	4625      	mov	r5, r4
 8005af0:	da1f      	bge.n	8005b32 <pool_func_mp_array_f32+0x2f6>
 8005af2:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 8005af6:	f8dd e014 	ldr.w	lr, [sp, #20]
 8005afa:	2900      	cmp	r1, #0
 8005afc:	bf58      	it	pl
 8005afe:	2d00      	cmppl	r5, #0
 8005b00:	d412      	bmi.n	8005b28 <pool_func_mp_array_f32+0x2ec>
 8005b02:	42b9      	cmp	r1, r7
 8005b04:	bfb8      	it	lt
 8005b06:	429d      	cmplt	r5, r3
 8005b08:	da0e      	bge.n	8005b28 <pool_func_mp_array_f32+0x2ec>
 8005b0a:	eb09 0b05 	add.w	fp, r9, r5
 8005b0e:	fb0b 6b02 	mla	fp, fp, r2, r6
 8005b12:	eb0e 0b8b 	add.w	fp, lr, fp, lsl #2
 8005b16:	ed9b 1a00 	vldr	s2, [fp]
 8005b1a:	eeb4 1a60 	vcmp.f32	s2, s1
 8005b1e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b22:	bf58      	it	pl
 8005b24:	eef0 0a41 	vmovpl.f32	s1, s2
 8005b28:	1c6d      	adds	r5, r5, #1
 8005b2a:	4285      	cmp	r5, r0
 8005b2c:	dbe5      	blt.n	8005afa <pool_func_mp_array_f32+0x2be>
 8005b2e:	f8cd e014 	str.w	lr, [sp, #20]
 8005b32:	1c49      	adds	r1, r1, #1
 8005b34:	4551      	cmp	r1, sl
 8005b36:	4499      	add	r9, r3
 8005b38:	dbd8      	blt.n	8005aec <pool_func_mp_array_f32+0x2b0>
 8005b3a:	f8bd 5002 	ldrh.w	r5, [sp, #2]
 8005b3e:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8005b42:	1c76      	adds	r6, r6, #1
 8005b44:	4296      	cmp	r6, r2
 8005b46:	edc8 0a00 	vstr	s1, [r8]
 8005b4a:	9f06      	ldr	r7, [sp, #24]
 8005b4c:	f107 0e04 	add.w	lr, r7, #4
 8005b50:	f8cd e018 	str.w	lr, [sp, #24]
 8005b54:	dbc0      	blt.n	8005ad8 <pool_func_mp_array_f32+0x29c>
 8005b56:	f8ad 2002 	strh.w	r2, [sp, #2]
 8005b5a:	f8ad 4006 	strh.w	r4, [sp, #6]
 8005b5e:	f8ad 3004 	strh.w	r3, [sp, #4]
 8005b62:	9903      	ldr	r1, [sp, #12]
 8005b64:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 8005b68:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8005b6c:	1c49      	adds	r1, r1, #1
 8005b6e:	9103      	str	r1, [sp, #12]
 8005b70:	f9bd 1064 	ldrsh.w	r1, [sp, #100]	; 0x64
 8005b74:	188a      	adds	r2, r1, r2
 8005b76:	9907      	ldr	r1, [sp, #28]
 8005b78:	f8ad 2008 	strh.w	r2, [sp, #8]
 8005b7c:	f9bd 2064 	ldrsh.w	r2, [sp, #100]	; 0x64
 8005b80:	18d3      	adds	r3, r2, r3
 8005b82:	1e49      	subs	r1, r1, #1
 8005b84:	f8ad 3006 	strh.w	r3, [sp, #6]
 8005b88:	9107      	str	r1, [sp, #28]
 8005b8a:	d191      	bne.n	8005ab0 <pool_func_mp_array_f32+0x274>
 8005b8c:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8005b90:	f8bd 2064 	ldrh.w	r2, [sp, #100]	; 0x64
 8005b94:	9904      	ldr	r1, [sp, #16]
 8005b96:	f8bd 8004 	ldrh.w	r8, [sp, #4]
 8005b9a:	f8bd c06c 	ldrh.w	ip, [sp, #108]	; 0x6c
 8005b9e:	f8bd e00a 	ldrh.w	lr, [sp, #10]
 8005ba2:	f9bd 7068 	ldrsh.w	r7, [sp, #104]	; 0x68
 8005ba6:	f8bd 6000 	ldrh.w	r6, [sp]
 8005baa:	9c09      	ldr	r4, [sp, #36]	; 0x24
 8005bac:	44a4      	add	ip, r4
 8005bae:	f9bd 4068 	ldrsh.w	r4, [sp, #104]	; 0x68
 8005bb2:	44be      	add	lr, r7
 8005bb4:	9f08      	ldr	r7, [sp, #32]
 8005bb6:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
 8005bba:	f8ad e00a 	strh.w	lr, [sp, #10]
 8005bbe:	19a6      	adds	r6, r4, r6
 8005bc0:	1e7f      	subs	r7, r7, #1
 8005bc2:	f8ad 6000 	strh.w	r6, [sp]
 8005bc6:	9708      	str	r7, [sp, #32]
 8005bc8:	f47f af52 	bne.w	8005a70 <pool_func_mp_array_f32+0x234>
 8005bcc:	b00c      	add	sp, #48	; 0x30
 8005bce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08005bd4 <.text_3>:
 8005bd4:	cf000000 	.word	0xcf000000

08005bd8 <pool_func_ap_array_f32>:
 8005bd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bdc:	468b      	mov	fp, r1
 8005bde:	4699      	mov	r9, r3
 8005be0:	b08c      	sub	sp, #48	; 0x30
 8005be2:	4614      	mov	r4, r2
 8005be4:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005be6:	f9bd c068 	ldrsh.w	ip, [sp, #104]	; 0x68
 8005bea:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8005bec:	f8bd a05c 	ldrh.w	sl, [sp, #92]	; 0x5c
 8005bf0:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8005bf2:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8005bf4:	1e4f      	subs	r7, r1, #1
 8005bf6:	f8dd 8064 	ldr.w	r8, [sp, #100]	; 0x64
 8005bfa:	fb17 fc0c 	smulbb	ip, r7, ip
 8005bfe:	6880      	ldr	r0, [r0, #8]
 8005c00:	ea5a 0a03 	orrs.w	sl, sl, r3
 8005c04:	68ad      	ldr	r5, [r5, #8]
 8005c06:	ebac 0c03 	sub.w	ip, ip, r3
 8005c0a:	4494      	add	ip, r2
 8005c0c:	f1ac 0e01 	sub.w	lr, ip, #1
 8005c10:	ebae 0e04 	sub.w	lr, lr, r4
 8005c14:	f040 80e4 	bne.w	8005de0 <pool_func_ap_array_f32+0x208>
 8005c18:	f9bd 606c 	ldrsh.w	r6, [sp, #108]	; 0x6c
 8005c1c:	f9bd c05c 	ldrsh.w	ip, [sp, #92]	; 0x5c
 8005c20:	1e77      	subs	r7, r6, #1
 8005c22:	fb17 fa08 	smulbb	sl, r7, r8
 8005c26:	f9bd 7054 	ldrsh.w	r7, [sp, #84]	; 0x54
 8005c2a:	ebaa 0a0c 	sub.w	sl, sl, ip
 8005c2e:	44ba      	add	sl, r7
 8005c30:	f1aa 0601 	sub.w	r6, sl, #1
 8005c34:	eba6 060b 	sub.w	r6, r6, fp
 8005c38:	b236      	sxth	r6, r6
 8005c3a:	2e00      	cmp	r6, #0
 8005c3c:	bf44      	itt	mi
 8005c3e:	fa0f fe8e 	sxthmi.w	lr, lr
 8005c42:	f1be 0f00 	cmpmi.w	lr, #0
 8005c46:	f140 80cb 	bpl.w	8005de0 <pool_func_ap_array_f32+0x208>
 8005c4a:	2400      	movs	r4, #0
 8005c4c:	000b      	movs	r3, r1
 8005c4e:	9409      	str	r4, [sp, #36]	; 0x24
 8005c50:	f000 81b9 	beq.w	8005fc6 <pool_func_ap_array_f32+0x3ee>
 8005c54:	b212      	sxth	r2, r2
 8005c56:	9408      	str	r4, [sp, #32]
 8005c58:	f8ad 2004 	strh.w	r2, [sp, #4]
 8005c5c:	9407      	str	r4, [sp, #28]
 8005c5e:	9106      	str	r1, [sp, #24]
 8005c60:	f8bd 106c 	ldrh.w	r1, [sp, #108]	; 0x6c
 8005c64:	f9bd e004 	ldrsh.w	lr, [sp, #4]
 8005c68:	2900      	cmp	r1, #0
 8005c6a:	f000 809f 	beq.w	8005dac <pool_func_ap_array_f32+0x1d4>
 8005c6e:	9907      	ldr	r1, [sp, #28]
 8005c70:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005c72:	9102      	str	r1, [sp, #8]
 8005c74:	f8bd 1068 	ldrh.w	r1, [sp, #104]	; 0x68
 8005c78:	2700      	movs	r7, #0
 8005c7a:	ae08      	add	r6, sp, #32
 8005c7c:	f9bd a054 	ldrsh.w	sl, [sp, #84]	; 0x54
 8005c80:	f8bd 306c 	ldrh.w	r3, [sp, #108]	; 0x6c
 8005c84:	464c      	mov	r4, r9
 8005c86:	434a      	muls	r2, r1
 8005c88:	b212      	sxth	r2, r2
 8005c8a:	920b      	str	r2, [sp, #44]	; 0x2c
 8005c8c:	5ff1      	ldrsh	r1, [r6, r7]
 8005c8e:	f8ad 9002 	strh.w	r9, [sp, #2]
 8005c92:	910a      	str	r1, [sp, #40]	; 0x28
 8005c94:	f8ad 8064 	strh.w	r8, [sp, #100]	; 0x64
 8005c98:	9505      	str	r5, [sp, #20]
 8005c9a:	f8ad a000 	strh.w	sl, [sp]
 8005c9e:	9303      	str	r3, [sp, #12]
 8005ca0:	f8bd 1002 	ldrh.w	r1, [sp, #2]
 8005ca4:	2200      	movs	r2, #0
 8005ca6:	f9bd c000 	ldrsh.w	ip, [sp]
 8005caa:	2900      	cmp	r1, #0
 8005cac:	d067      	beq.n	8005d7e <pool_func_ap_array_f32+0x1a6>
 8005cae:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8005cb2:	9d05      	ldr	r5, [sp, #20]
 8005cb4:	f8cd e010 	str.w	lr, [sp, #16]
 8005cb8:	f8ad b006 	strh.w	fp, [sp, #6]
 8005cbc:	fb08 f804 	mul.w	r8, r8, r4
 8005cc0:	eb05 0588 	add.w	r5, r5, r8, lsl #2
 8005cc4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005cc6:	9904      	ldr	r1, [sp, #16]
 8005cc8:	ed9f 0ac0 	vldr	s0, [pc, #768]	; 8005fcc <.text_5>
 8005ccc:	eddf 0abf 	vldr	s1, [pc, #764]	; 8005fcc <.text_5>
 8005cd0:	428b      	cmp	r3, r1
 8005cd2:	da46      	bge.n	8005d62 <pool_func_ap_array_f32+0x18a>
 8005cd4:	f8bd b006 	ldrh.w	fp, [sp, #6]
 8005cd8:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 8005cdc:	ee10 ea90 	vmov	lr, s1
 8005ce0:	fb0b f103 	mul.w	r1, fp, r3
 8005ce4:	9b04      	ldr	r3, [sp, #16]
 8005ce6:	eba3 0808 	sub.w	r8, r3, r8
 8005cea:	4603      	mov	r3, r0
 8005cec:	fa0f fa87 	sxth.w	sl, r7
 8005cf0:	45e2      	cmp	sl, ip
 8005cf2:	46b9      	mov	r9, r7
 8005cf4:	da2e      	bge.n	8005d54 <pool_func_ap_array_f32+0x17c>
 8005cf6:	ebac 000a 	sub.w	r0, ip, sl
 8005cfa:	44e6      	add	lr, ip
 8005cfc:	07c6      	lsls	r6, r0, #31
 8005cfe:	ebae 0e0a 	sub.w	lr, lr, sl
 8005d02:	d50a      	bpl.n	8005d1a <pool_func_ap_array_f32+0x142>
 8005d04:	448a      	add	sl, r1
 8005d06:	f109 0901 	add.w	r9, r9, #1
 8005d0a:	fb0a 2a04 	mla	sl, sl, r4, r2
 8005d0e:	eb03 0a8a 	add.w	sl, r3, sl, lsl #2
 8005d12:	edda 0a00 	vldr	s1, [sl]
 8005d16:	ee30 0a20 	vadd.f32	s0, s0, s1
 8005d1a:	0840      	lsrs	r0, r0, #1
 8005d1c:	f000 801a 	beq.w	8005d54 <pool_func_ap_array_f32+0x17c>
 8005d20:	fa01 fa89 	sxtah	sl, r1, r9
 8005d24:	f109 0901 	add.w	r9, r9, #1
 8005d28:	fb0a 2a04 	mla	sl, sl, r4, r2
 8005d2c:	fa01 f689 	sxtah	r6, r1, r9
 8005d30:	eb03 0a8a 	add.w	sl, r3, sl, lsl #2
 8005d34:	fb06 2604 	mla	r6, r6, r4, r2
 8005d38:	1e40      	subs	r0, r0, #1
 8005d3a:	f109 0901 	add.w	r9, r9, #1
 8005d3e:	edda 0a00 	vldr	s1, [sl]
 8005d42:	eb03 0a86 	add.w	sl, r3, r6, lsl #2
 8005d46:	ee30 0a20 	vadd.f32	s0, s0, s1
 8005d4a:	ed9a 1a00 	vldr	s2, [sl]
 8005d4e:	ee30 0a01 	vadd.f32	s0, s0, s2
 8005d52:	d1e5      	bne.n	8005d20 <pool_func_ap_array_f32+0x148>
 8005d54:	f1b8 0801 	subs.w	r8, r8, #1
 8005d58:	4459      	add	r1, fp
 8005d5a:	d1c7      	bne.n	8005cec <pool_func_ap_array_f32+0x114>
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	ee00 ea90 	vmov	s1, lr
 8005d62:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 8005d66:	1c52      	adds	r2, r2, #1
 8005d68:	ee80 0a20 	vdiv.f32	s0, s0, s1
 8005d6c:	ed85 0a00 	vstr	s0, [r5]
 8005d70:	1d2d      	adds	r5, r5, #4
 8005d72:	42a2      	cmp	r2, r4
 8005d74:	dba6      	blt.n	8005cc4 <pool_func_ap_array_f32+0xec>
 8005d76:	f8dd e010 	ldr.w	lr, [sp, #16]
 8005d7a:	f8bd b006 	ldrh.w	fp, [sp, #6]
 8005d7e:	9a02      	ldr	r2, [sp, #8]
 8005d80:	f8bd 3000 	ldrh.w	r3, [sp]
 8005d84:	f9bd 1064 	ldrsh.w	r1, [sp, #100]	; 0x64
 8005d88:	1c52      	adds	r2, r2, #1
 8005d8a:	9202      	str	r2, [sp, #8]
 8005d8c:	f9bd 2064 	ldrsh.w	r2, [sp, #100]	; 0x64
 8005d90:	18d3      	adds	r3, r2, r3
 8005d92:	f8ad 3000 	strh.w	r3, [sp]
 8005d96:	9b03      	ldr	r3, [sp, #12]
 8005d98:	19cf      	adds	r7, r1, r7
 8005d9a:	1e5b      	subs	r3, r3, #1
 8005d9c:	9303      	str	r3, [sp, #12]
 8005d9e:	f47f af7f 	bne.w	8005ca0 <pool_func_ap_array_f32+0xc8>
 8005da2:	f8bd 9002 	ldrh.w	r9, [sp, #2]
 8005da6:	f8bd 8064 	ldrh.w	r8, [sp, #100]	; 0x64
 8005daa:	9d05      	ldr	r5, [sp, #20]
 8005dac:	f8bd 306c 	ldrh.w	r3, [sp, #108]	; 0x6c
 8005db0:	9a07      	ldr	r2, [sp, #28]
 8005db2:	f8bd 7068 	ldrh.w	r7, [sp, #104]	; 0x68
 8005db6:	9909      	ldr	r1, [sp, #36]	; 0x24
 8005db8:	9c08      	ldr	r4, [sp, #32]
 8005dba:	18d3      	adds	r3, r2, r3
 8005dbc:	f9bd 2068 	ldrsh.w	r2, [sp, #104]	; 0x68
 8005dc0:	9307      	str	r3, [sp, #28]
 8005dc2:	1c49      	adds	r1, r1, #1
 8005dc4:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8005dc8:	19e7      	adds	r7, r4, r7
 8005dca:	9c06      	ldr	r4, [sp, #24]
 8005dcc:	9109      	str	r1, [sp, #36]	; 0x24
 8005dce:	9708      	str	r7, [sp, #32]
 8005dd0:	18d3      	adds	r3, r2, r3
 8005dd2:	1e64      	subs	r4, r4, #1
 8005dd4:	f8ad 3004 	strh.w	r3, [sp, #4]
 8005dd8:	9406      	str	r4, [sp, #24]
 8005dda:	f000 80f4 	beq.w	8005fc6 <pool_func_ap_array_f32+0x3ee>
 8005dde:	e73f      	b.n	8005c60 <pool_func_ap_array_f32+0x88>
 8005de0:	000f      	movs	r7, r1
 8005de2:	f000 80f0 	beq.w	8005fc6 <pool_func_ap_array_f32+0x3ee>
 8005de6:	425b      	negs	r3, r3
 8005de8:	18d2      	adds	r2, r2, r3
 8005dea:	f04f 0e00 	mov.w	lr, #0
 8005dee:	f8ad 3000 	strh.w	r3, [sp]
 8005df2:	f8ad 200a 	strh.w	r2, [sp, #10]
 8005df6:	f8cd e024 	str.w	lr, [sp, #36]	; 0x24
 8005dfa:	9108      	str	r1, [sp, #32]
 8005dfc:	f8bd 106c 	ldrh.w	r1, [sp, #108]	; 0x6c
 8005e00:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 8005e04:	2900      	cmp	r1, #0
 8005e06:	f000 80c6 	beq.w	8005f96 <pool_func_ap_array_f32+0x3be>
 8005e0a:	f9bd 705c 	ldrsh.w	r7, [sp, #92]	; 0x5c
 8005e0e:	f9bd 6054 	ldrsh.w	r6, [sp, #84]	; 0x54
 8005e12:	f8bd a06c 	ldrh.w	sl, [sp, #108]	; 0x6c
 8005e16:	f8ad 9002 	strh.w	r9, [sp, #2]
 8005e1a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005e1c:	f8ad 8064 	strh.w	r8, [sp, #100]	; 0x64
 8005e20:	9204      	str	r2, [sp, #16]
 8005e22:	427f      	negs	r7, r7
 8005e24:	19f6      	adds	r6, r6, r7
 8005e26:	9505      	str	r5, [sp, #20]
 8005e28:	f8ad 7004 	strh.w	r7, [sp, #4]
 8005e2c:	f8ad 6008 	strh.w	r6, [sp, #8]
 8005e30:	f8cd a01c 	str.w	sl, [sp, #28]
 8005e34:	f8ad b006 	strh.w	fp, [sp, #6]
 8005e38:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8005e3c:	2100      	movs	r1, #0
 8005e3e:	f9bd 8008 	ldrsh.w	r8, [sp, #8]
 8005e42:	2a00      	cmp	r2, #0
 8005e44:	f000 808a 	beq.w	8005f5c <pool_func_ap_array_f32+0x384>
 8005e48:	9f04      	ldr	r7, [sp, #16]
 8005e4a:	9d05      	ldr	r5, [sp, #20]
 8005e4c:	f8ad 400c 	strh.w	r4, [sp, #12]
 8005e50:	f8bd 9006 	ldrh.w	r9, [sp, #6]
 8005e54:	fb07 fb02 	mul.w	fp, r7, r2
 8005e58:	eb05 058b 	add.w	r5, r5, fp, lsl #2
 8005e5c:	f8cd 5018 	str.w	r5, [sp, #24]
 8005e60:	f9bd 5000 	ldrsh.w	r5, [sp]
 8005e64:	ed9f 0a59 	vldr	s0, [pc, #356]	; 8005fcc <.text_5>
 8005e68:	eddf 0a58 	vldr	s1, [pc, #352]	; 8005fcc <.text_5>
 8005e6c:	f8bd 4002 	ldrh.w	r4, [sp, #2]
 8005e70:	429d      	cmp	r5, r3
 8005e72:	da60      	bge.n	8005f36 <pool_func_ap_array_f32+0x35e>
 8005e74:	930a      	str	r3, [sp, #40]	; 0x28
 8005e76:	fb09 fe05 	mul.w	lr, r9, r5
 8005e7a:	462b      	mov	r3, r5
 8005e7c:	ee10 2a90 	vmov	r2, s1
 8005e80:	f9bd 5004 	ldrsh.w	r5, [sp, #4]
 8005e84:	f8bd b00c 	ldrh.w	fp, [sp, #12]
 8005e88:	4545      	cmp	r5, r8
 8005e8a:	462f      	mov	r7, r5
 8005e8c:	da47      	bge.n	8005f1e <pool_func_ap_array_f32+0x346>
 8005e8e:	eba8 0a05 	sub.w	sl, r8, r5
 8005e92:	ea5f 76ca 	movs.w	r6, sl, lsl #31
 8005e96:	d513      	bpl.n	8005ec0 <pool_func_ap_array_f32+0x2e8>
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	bf58      	it	pl
 8005e9c:	2f00      	cmppl	r7, #0
 8005e9e:	d40e      	bmi.n	8005ebe <pool_func_ap_array_f32+0x2e6>
 8005ea0:	455b      	cmp	r3, fp
 8005ea2:	bfb8      	it	lt
 8005ea4:	454f      	cmplt	r7, r9
 8005ea6:	da0a      	bge.n	8005ebe <pool_func_ap_array_f32+0x2e6>
 8005ea8:	eb0e 0607 	add.w	r6, lr, r7
 8005eac:	1c52      	adds	r2, r2, #1
 8005eae:	fb06 1604 	mla	r6, r6, r4, r1
 8005eb2:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 8005eb6:	edd6 0a00 	vldr	s1, [r6]
 8005eba:	ee30 0a20 	vadd.f32	s0, s0, s1
 8005ebe:	1c7f      	adds	r7, r7, #1
 8005ec0:	ea5f 0a5a 	movs.w	sl, sl, lsr #1
 8005ec4:	d02b      	beq.n	8005f1e <pool_func_ap_array_f32+0x346>
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d405      	bmi.n	8005ed6 <pool_func_ap_array_f32+0x2fe>
 8005eca:	2f00      	cmp	r7, #0
 8005ecc:	bf48      	it	mi
 8005ece:	1c7e      	addmi	r6, r7, #1
 8005ed0:	d410      	bmi.n	8005ef4 <pool_func_ap_array_f32+0x31c>
 8005ed2:	455b      	cmp	r3, fp
 8005ed4:	db01      	blt.n	8005eda <pool_func_ap_array_f32+0x302>
 8005ed6:	1c7e      	adds	r6, r7, #1
 8005ed8:	e01d      	b.n	8005f16 <pool_func_ap_array_f32+0x33e>
 8005eda:	1c7e      	adds	r6, r7, #1
 8005edc:	454f      	cmp	r7, r9
 8005ede:	da09      	bge.n	8005ef4 <pool_func_ap_array_f32+0x31c>
 8005ee0:	4477      	add	r7, lr
 8005ee2:	1c52      	adds	r2, r2, #1
 8005ee4:	fb07 1704 	mla	r7, r7, r4, r1
 8005ee8:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 8005eec:	edd7 0a00 	vldr	s1, [r7]
 8005ef0:	ee30 0a20 	vadd.f32	s0, s0, s1
 8005ef4:	2e00      	cmp	r6, #0
 8005ef6:	d40e      	bmi.n	8005f16 <pool_func_ap_array_f32+0x33e>
 8005ef8:	455b      	cmp	r3, fp
 8005efa:	bfb8      	it	lt
 8005efc:	454e      	cmplt	r6, r9
 8005efe:	da0a      	bge.n	8005f16 <pool_func_ap_array_f32+0x33e>
 8005f00:	eb0e 0706 	add.w	r7, lr, r6
 8005f04:	1c52      	adds	r2, r2, #1
 8005f06:	fb07 1704 	mla	r7, r7, r4, r1
 8005f0a:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 8005f0e:	edd7 0a00 	vldr	s1, [r7]
 8005f12:	ee30 0a20 	vadd.f32	s0, s0, s1
 8005f16:	1c77      	adds	r7, r6, #1
 8005f18:	f1ba 0a01 	subs.w	sl, sl, #1
 8005f1c:	d1d3      	bne.n	8005ec6 <pool_func_ap_array_f32+0x2ee>
 8005f1e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8005f20:	1c5b      	adds	r3, r3, #1
 8005f22:	44ce      	add	lr, r9
 8005f24:	42bb      	cmp	r3, r7
 8005f26:	dbaf      	blt.n	8005e88 <pool_func_ap_array_f32+0x2b0>
 8005f28:	463b      	mov	r3, r7
 8005f2a:	ee00 2a90 	vmov	s1, r2
 8005f2e:	f8ad 5004 	strh.w	r5, [sp, #4]
 8005f32:	f8ad b00c 	strh.w	fp, [sp, #12]
 8005f36:	9d06      	ldr	r5, [sp, #24]
 8005f38:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 8005f3c:	ee80 0a20 	vdiv.f32	s0, s0, s1
 8005f40:	1c49      	adds	r1, r1, #1
 8005f42:	42a1      	cmp	r1, r4
 8005f44:	ed85 0a00 	vstr	s0, [r5]
 8005f48:	9a06      	ldr	r2, [sp, #24]
 8005f4a:	f102 0b04 	add.w	fp, r2, #4
 8005f4e:	f8cd b018 	str.w	fp, [sp, #24]
 8005f52:	db85      	blt.n	8005e60 <pool_func_ap_array_f32+0x288>
 8005f54:	f8bd 400c 	ldrh.w	r4, [sp, #12]
 8005f58:	f8ad 9006 	strh.w	r9, [sp, #6]
 8005f5c:	9d04      	ldr	r5, [sp, #16]
 8005f5e:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 8005f62:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 8005f66:	f9bd b064 	ldrsh.w	fp, [sp, #100]	; 0x64
 8005f6a:	1c6d      	adds	r5, r5, #1
 8005f6c:	9504      	str	r5, [sp, #16]
 8005f6e:	f9bd 5064 	ldrsh.w	r5, [sp, #100]	; 0x64
 8005f72:	1869      	adds	r1, r5, r1
 8005f74:	9d07      	ldr	r5, [sp, #28]
 8005f76:	445a      	add	r2, fp
 8005f78:	f8ad 1008 	strh.w	r1, [sp, #8]
 8005f7c:	f8ad 2004 	strh.w	r2, [sp, #4]
 8005f80:	1e6d      	subs	r5, r5, #1
 8005f82:	9507      	str	r5, [sp, #28]
 8005f84:	f47f af58 	bne.w	8005e38 <pool_func_ap_array_f32+0x260>
 8005f88:	f8bd 9002 	ldrh.w	r9, [sp, #2]
 8005f8c:	f8bd 8064 	ldrh.w	r8, [sp, #100]	; 0x64
 8005f90:	9d05      	ldr	r5, [sp, #20]
 8005f92:	f8bd b006 	ldrh.w	fp, [sp, #6]
 8005f96:	f8bd 706c 	ldrh.w	r7, [sp, #108]	; 0x6c
 8005f9a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005f9c:	f8bd e00a 	ldrh.w	lr, [sp, #10]
 8005fa0:	f9bd 3068 	ldrsh.w	r3, [sp, #104]	; 0x68
 8005fa4:	19d7      	adds	r7, r2, r7
 8005fa6:	f9bd 2068 	ldrsh.w	r2, [sp, #104]	; 0x68
 8005faa:	9709      	str	r7, [sp, #36]	; 0x24
 8005fac:	f8bd 7000 	ldrh.w	r7, [sp]
 8005fb0:	449e      	add	lr, r3
 8005fb2:	9b08      	ldr	r3, [sp, #32]
 8005fb4:	f8ad e00a 	strh.w	lr, [sp, #10]
 8005fb8:	19d7      	adds	r7, r2, r7
 8005fba:	1e5b      	subs	r3, r3, #1
 8005fbc:	f8ad 7000 	strh.w	r7, [sp]
 8005fc0:	9308      	str	r3, [sp, #32]
 8005fc2:	f47f af1b 	bne.w	8005dfc <pool_func_ap_array_f32+0x224>
 8005fc6:	b00c      	add	sp, #48	; 0x30
 8005fc8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005fcc <.text_5>:
 8005fcc:	00000000 	.word	0x00000000

08005fd0 <pool_func_mp_kernel_array_f32>:
 8005fd0:	b470      	push	{r4, r5, r6}
 8005fd2:	eb01 0482 	add.w	r4, r1, r2, lsl #2
 8005fd6:	42a1      	cmp	r1, r4
 8005fd8:	d257      	bcs.n	800608a <pool_func_mp_kernel_array_f32+0xba>
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d051      	beq.n	8006082 <pool_func_mp_kernel_array_f32+0xb2>
 8005fde:	f013 0203 	ands.w	r2, r3, #3
 8005fe2:	460d      	mov	r5, r1
 8005fe4:	4606      	mov	r6, r0
 8005fe6:	d011      	beq.n	800600c <pool_func_mp_kernel_array_f32+0x3c>
 8005fe8:	ed96 0a00 	vldr	s0, [r6]
 8005fec:	edd5 0a00 	vldr	s1, [r5]
 8005ff0:	eef4 0a40 	vcmp.f32	s1, s0
 8005ff4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005ff8:	bf58      	it	pl
 8005ffa:	eeb0 0a60 	vmovpl.f32	s0, s1
 8005ffe:	ed86 0a00 	vstr	s0, [r6]
 8006002:	1e52      	subs	r2, r2, #1
 8006004:	1d36      	adds	r6, r6, #4
 8006006:	1d2d      	adds	r5, r5, #4
 8006008:	2a00      	cmp	r2, #0
 800600a:	d1ed      	bne.n	8005fe8 <pool_func_mp_kernel_array_f32+0x18>
 800600c:	089a      	lsrs	r2, r3, #2
 800600e:	d038      	beq.n	8006082 <pool_func_mp_kernel_array_f32+0xb2>
 8006010:	edd5 0a00 	vldr	s1, [r5]
 8006014:	edd6 1a00 	vldr	s3, [r6]
 8006018:	eef4 0a61 	vcmp.f32	s1, s3
 800601c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006020:	bf48      	it	mi
 8006022:	eef0 0a61 	vmovmi.f32	s1, s3
 8006026:	edc6 0a00 	vstr	s1, [r6]
 800602a:	edd5 0a01 	vldr	s1, [r5, #4]
 800602e:	edd6 1a01 	vldr	s3, [r6, #4]
 8006032:	eef4 0a61 	vcmp.f32	s1, s3
 8006036:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800603a:	ed96 0a02 	vldr	s0, [r6, #8]
 800603e:	bf48      	it	mi
 8006040:	eef0 0a61 	vmovmi.f32	s1, s3
 8006044:	edc6 0a01 	vstr	s1, [r6, #4]
 8006048:	ed95 1a02 	vldr	s2, [r5, #8]
 800604c:	eeb4 1a40 	vcmp.f32	s2, s0
 8006050:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006054:	edd6 1a03 	vldr	s3, [r6, #12]
 8006058:	bf48      	it	mi
 800605a:	eeb0 1a40 	vmovmi.f32	s2, s0
 800605e:	ed86 1a02 	vstr	s2, [r6, #8]
 8006062:	edd5 0a03 	vldr	s1, [r5, #12]
 8006066:	eef4 0a61 	vcmp.f32	s1, s3
 800606a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800606e:	bf58      	it	pl
 8006070:	eef0 1a60 	vmovpl.f32	s3, s1
 8006074:	edc6 1a03 	vstr	s3, [r6, #12]
 8006078:	1e52      	subs	r2, r2, #1
 800607a:	3610      	adds	r6, #16
 800607c:	3510      	adds	r5, #16
 800607e:	2a00      	cmp	r2, #0
 8006080:	d1c6      	bne.n	8006010 <pool_func_mp_kernel_array_f32+0x40>
 8006082:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8006086:	42a1      	cmp	r1, r4
 8006088:	d3a7      	bcc.n	8005fda <pool_func_mp_kernel_array_f32+0xa>
 800608a:	bc70      	pop	{r4, r5, r6}
 800608c:	4770      	bx	lr
	...

08006090 <pool_func_ap_kernel_array_f32>:
 8006090:	b4f0      	push	{r4, r5, r6, r7}
 8006092:	eb01 0582 	add.w	r5, r1, r2, lsl #2
 8006096:	9c05      	ldr	r4, [sp, #20]
 8006098:	42a9      	cmp	r1, r5
 800609a:	d251      	bcs.n	8006140 <pool_func_ap_kernel_array_f32+0xb0>
 800609c:	2b00      	cmp	r3, #0
 800609e:	d04a      	beq.n	8006136 <pool_func_ap_kernel_array_f32+0xa6>
 80060a0:	f013 0203 	ands.w	r2, r3, #3
 80060a4:	460e      	mov	r6, r1
 80060a6:	4607      	mov	r7, r0
 80060a8:	d00e      	beq.n	80060c8 <pool_func_ap_kernel_array_f32+0x38>
 80060aa:	2c01      	cmp	r4, #1
 80060ac:	ed96 0a00 	vldr	s0, [r6]
 80060b0:	bf1c      	itt	ne
 80060b2:	edd7 0a00 	vldrne	s1, [r7]
 80060b6:	ee30 0a80 	vaddne.f32	s0, s1, s0
 80060ba:	ed87 0a00 	vstr	s0, [r7]
 80060be:	1e52      	subs	r2, r2, #1
 80060c0:	1d3f      	adds	r7, r7, #4
 80060c2:	1d36      	adds	r6, r6, #4
 80060c4:	2a00      	cmp	r2, #0
 80060c6:	d1f0      	bne.n	80060aa <pool_func_ap_kernel_array_f32+0x1a>
 80060c8:	089a      	lsrs	r2, r3, #2
 80060ca:	d034      	beq.n	8006136 <pool_func_ap_kernel_array_f32+0xa6>
 80060cc:	2c01      	cmp	r4, #1
 80060ce:	edd6 1a00 	vldr	s3, [r6]
 80060d2:	d10d      	bne.n	80060f0 <pool_func_ap_kernel_array_f32+0x60>
 80060d4:	edc7 1a00 	vstr	s3, [r7]
 80060d8:	ed96 0a01 	vldr	s0, [r6, #4]
 80060dc:	ed87 0a01 	vstr	s0, [r7, #4]
 80060e0:	edd6 1a02 	vldr	s3, [r6, #8]
 80060e4:	edc7 1a02 	vstr	s3, [r7, #8]
 80060e8:	edd6 1a03 	vldr	s3, [r6, #12]
 80060ec:	e01c      	b.n	8006128 <pool_func_ap_kernel_array_f32+0x98>
 80060ee:	bf00      	nop
 80060f0:	edd7 0a00 	vldr	s1, [r7]
 80060f4:	ee30 0aa1 	vadd.f32	s0, s1, s3
 80060f8:	ed87 0a00 	vstr	s0, [r7]
 80060fc:	ed97 1a01 	vldr	s2, [r7, #4]
 8006100:	ed96 0a01 	vldr	s0, [r6, #4]
 8006104:	ee71 0a00 	vadd.f32	s1, s2, s0
 8006108:	edc7 0a01 	vstr	s1, [r7, #4]
 800610c:	edd7 1a02 	vldr	s3, [r7, #8]
 8006110:	edd6 0a02 	vldr	s1, [r6, #8]
 8006114:	ee31 0aa0 	vadd.f32	s0, s3, s1
 8006118:	ed87 0a02 	vstr	s0, [r7, #8]
 800611c:	ed97 0a03 	vldr	s0, [r7, #12]
 8006120:	ed96 1a03 	vldr	s2, [r6, #12]
 8006124:	ee70 1a01 	vadd.f32	s3, s0, s2
 8006128:	edc7 1a03 	vstr	s3, [r7, #12]
 800612c:	1e52      	subs	r2, r2, #1
 800612e:	3710      	adds	r7, #16
 8006130:	3610      	adds	r6, #16
 8006132:	2a00      	cmp	r2, #0
 8006134:	d1ca      	bne.n	80060cc <pool_func_ap_kernel_array_f32+0x3c>
 8006136:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 800613a:	2400      	movs	r4, #0
 800613c:	42a9      	cmp	r1, r5
 800613e:	d3ad      	bcc.n	800609c <pool_func_ap_kernel_array_f32+0xc>
 8006140:	9904      	ldr	r1, [sp, #16]
 8006142:	b399      	cbz	r1, 80061ac <pool_func_ap_kernel_array_f32+0x11c>
 8006144:	ee00 1a10 	vmov	s0, r1
 8006148:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 800614c:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8006150:	ee80 0a80 	vdiv.f32	s0, s1, s0
 8006154:	b353      	cbz	r3, 80061ac <pool_func_ap_kernel_array_f32+0x11c>
 8006156:	f013 0103 	ands.w	r1, r3, #3
 800615a:	d009      	beq.n	8006170 <pool_func_ap_kernel_array_f32+0xe0>
 800615c:	edd0 0a00 	vldr	s1, [r0]
 8006160:	1e49      	subs	r1, r1, #1
 8006162:	ee60 0a80 	vmul.f32	s1, s1, s0
 8006166:	edc0 0a00 	vstr	s1, [r0]
 800616a:	f100 0004 	add.w	r0, r0, #4
 800616e:	d1f5      	bne.n	800615c <pool_func_ap_kernel_array_f32+0xcc>
 8006170:	089b      	lsrs	r3, r3, #2
 8006172:	d01b      	beq.n	80061ac <pool_func_ap_kernel_array_f32+0x11c>
 8006174:	edd0 0a00 	vldr	s1, [r0]
 8006178:	1e5b      	subs	r3, r3, #1
 800617a:	ee60 0a80 	vmul.f32	s1, s1, s0
 800617e:	edc0 0a00 	vstr	s1, [r0]
 8006182:	ed90 1a01 	vldr	s2, [r0, #4]
 8006186:	ee21 1a00 	vmul.f32	s2, s2, s0
 800618a:	ed80 1a01 	vstr	s2, [r0, #4]
 800618e:	edd0 0a02 	vldr	s1, [r0, #8]
 8006192:	ed90 1a03 	vldr	s2, [r0, #12]
 8006196:	ee60 1a80 	vmul.f32	s3, s1, s0
 800619a:	ee61 0a00 	vmul.f32	s1, s2, s0
 800619e:	edc0 1a02 	vstr	s3, [r0, #8]
 80061a2:	edc0 0a03 	vstr	s1, [r0, #12]
 80061a6:	f100 0010 	add.w	r0, r0, #16
 80061aa:	d1e3      	bne.n	8006174 <pool_func_ap_kernel_array_f32+0xe4>
 80061ac:	bcf0      	pop	{r4, r5, r6, r7}
 80061ae:	4770      	bx	lr

080061b0 <forward_mp>:
 80061b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061b4:	b08e      	sub	sp, #56	; 0x38
 80061b6:	4680      	mov	r8, r0
 80061b8:	f8d8 2014 	ldr.w	r2, [r8, #20]
 80061bc:	8811      	ldrh	r1, [r2, #0]
 80061be:	2900      	cmp	r1, #0
 80061c0:	bf1a      	itte	ne
 80061c2:	6850      	ldrne	r0, [r2, #4]
 80061c4:	1d00      	addne	r0, r0, #4
 80061c6:	2004      	moveq	r0, #4
 80061c8:	6800      	ldr	r0, [r0, #0]
 80061ca:	2800      	cmp	r0, #0
 80061cc:	bf14      	ite	ne
 80061ce:	6805      	ldrne	r5, [r0, #0]
 80061d0:	2500      	moveq	r5, #0
 80061d2:	2901      	cmp	r1, #1
 80061d4:	bfc6      	itte	gt
 80061d6:	6850      	ldrgt	r0, [r2, #4]
 80061d8:	3010      	addgt	r0, #16
 80061da:	2004      	movle	r0, #4
 80061dc:	6800      	ldr	r0, [r0, #0]
 80061de:	68ea      	ldr	r2, [r5, #12]
 80061e0:	2800      	cmp	r0, #0
 80061e2:	bf14      	ite	ne
 80061e4:	6807      	ldrne	r7, [r0, #0]
 80061e6:	2700      	moveq	r7, #0
 80061e8:	68f9      	ldr	r1, [r7, #12]
 80061ea:	68d6      	ldr	r6, [r2, #12]
 80061ec:	68cb      	ldr	r3, [r1, #12]
 80061ee:	9609      	str	r6, [sp, #36]	; 0x24
 80061f0:	6889      	ldr	r1, [r1, #8]
 80061f2:	9108      	str	r1, [sp, #32]
 80061f4:	6896      	ldr	r6, [r2, #8]
 80061f6:	6851      	ldr	r1, [r2, #4]
 80061f8:	f8d8 2018 	ldr.w	r2, [r8, #24]
 80061fc:	f8d8 c01c 	ldr.w	ip, [r8, #28]
 8006200:	2b00      	cmp	r3, #0
 8006202:	f8cd c01c 	str.w	ip, [sp, #28]
 8006206:	f8d8 0020 	ldr.w	r0, [r8, #32]
 800620a:	f8d8 e024 	ldr.w	lr, [r8, #36]	; 0x24
 800620e:	f8cd e034 	str.w	lr, [sp, #52]	; 0x34
 8006212:	f8d8 c02c 	ldr.w	ip, [r8, #44]	; 0x2c
 8006216:	f8d5 8018 	ldr.w	r8, [r5, #24]
 800621a:	69bf      	ldr	r7, [r7, #24]
 800621c:	f8dc 9000 	ldr.w	r9, [ip]
 8006220:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8006224:	f8d8 8008 	ldr.w	r8, [r8, #8]
 8006228:	f8d7 e008 	ldr.w	lr, [r7, #8]
 800622c:	f1c9 0900 	rsb	r9, r9, #0
 8006230:	f8cd 9000 	str.w	r9, [sp]
 8006234:	f000 80d8 	beq.w	80063e8 <forward_mp+0x238>
 8006238:	9301      	str	r3, [sp, #4]
 800623a:	4264      	negs	r4, r4
 800623c:	940c      	str	r4, [sp, #48]	; 0x30
 800623e:	fb01 f706 	mul.w	r7, r1, r6
 8006242:	970b      	str	r7, [sp, #44]	; 0x2c
 8006244:	9d00      	ldr	r5, [sp, #0]
 8006246:	9b00      	ldr	r3, [sp, #0]
 8006248:	9f07      	ldr	r7, [sp, #28]
 800624a:	9c00      	ldr	r4, [sp, #0]
 800624c:	426d      	negs	r5, r5
 800624e:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8006250:	bfcc      	ite	gt
 8006252:	f04f 0c00 	movgt.w	ip, #0
 8006256:	f8dd c000 	ldrle.w	ip, [sp]
 800625a:	1aeb      	subs	r3, r5, r3
 800625c:	42bb      	cmp	r3, r7
 800625e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006260:	bf88      	it	hi
 8006262:	463b      	movhi	r3, r7
 8006264:	191c      	adds	r4, r3, r4
 8006266:	9b08      	ldr	r3, [sp, #32]
 8006268:	2b00      	cmp	r3, #0
 800626a:	f000 80b4 	beq.w	80063d6 <forward_mp+0x226>
 800626e:	fb06 fa0c 	mul.w	sl, r6, ip
 8006272:	9603      	str	r6, [sp, #12]
 8006274:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 8006278:	9202      	str	r2, [sp, #8]
 800627a:	9006      	str	r0, [sp, #24]
 800627c:	f8cd c014 	str.w	ip, [sp, #20]
 8006280:	9404      	str	r4, [sp, #16]
 8006282:	4268      	negs	r0, r5
 8006284:	9f03      	ldr	r7, [sp, #12]
 8006286:	9a02      	ldr	r2, [sp, #8]
 8006288:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
 800628c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800628e:	bfcc      	ite	gt
 8006290:	2000      	movgt	r0, #0
 8006292:	4628      	movle	r0, r5
 8006294:	1b7f      	subs	r7, r7, r5
 8006296:	4297      	cmp	r7, r2
 8006298:	bf88      	it	hi
 800629a:	4617      	movhi	r7, r2
 800629c:	197f      	adds	r7, r7, r5
 800629e:	1a3f      	subs	r7, r7, r0
 80062a0:	4460      	add	r0, ip
 80062a2:	434f      	muls	r7, r1
 80062a4:	4348      	muls	r0, r1
 80062a6:	eb08 0c80 	add.w	ip, r8, r0, lsl #2
 80062aa:	b311      	cbz	r1, 80062f2 <forward_mp+0x142>
 80062ac:	f011 0003 	ands.w	r0, r1, #3
 80062b0:	4672      	mov	r2, lr
 80062b2:	4664      	mov	r4, ip
 80062b4:	d005      	beq.n	80062c2 <forward_mp+0x112>
 80062b6:	1e40      	subs	r0, r0, #1
 80062b8:	f854 9b04 	ldr.w	r9, [r4], #4
 80062bc:	f842 9b04 	str.w	r9, [r2], #4
 80062c0:	d1f9      	bne.n	80062b6 <forward_mp+0x106>
 80062c2:	0888      	lsrs	r0, r1, #2
 80062c4:	f000 8015 	beq.w	80062f2 <forward_mp+0x142>
 80062c8:	ed94 0a00 	vldr	s0, [r4]
 80062cc:	1e40      	subs	r0, r0, #1
 80062ce:	ed82 0a00 	vstr	s0, [r2]
 80062d2:	edd4 0a01 	vldr	s1, [r4, #4]
 80062d6:	edc2 0a01 	vstr	s1, [r2, #4]
 80062da:	ed94 0a02 	vldr	s0, [r4, #8]
 80062de:	ed82 0a02 	vstr	s0, [r2, #8]
 80062e2:	edd4 0a03 	vldr	s1, [r4, #12]
 80062e6:	3410      	adds	r4, #16
 80062e8:	edc2 0a03 	vstr	s1, [r2, #12]
 80062ec:	3210      	adds	r2, #16
 80062ee:	2800      	cmp	r0, #0
 80062f0:	d1ea      	bne.n	80062c8 <forward_mp+0x118>
 80062f2:	9805      	ldr	r0, [sp, #20]
 80062f4:	9a04      	ldr	r2, [sp, #16]
 80062f6:	4290      	cmp	r0, r2
 80062f8:	da64      	bge.n	80063c4 <forward_mp+0x214>
 80062fa:	1a12      	subs	r2, r2, r0
 80062fc:	46e2      	mov	sl, ip
 80062fe:	eb0a 0b87 	add.w	fp, sl, r7, lsl #2
 8006302:	45da      	cmp	sl, fp
 8006304:	d25a      	bcs.n	80063bc <forward_mp+0x20c>
 8006306:	2900      	cmp	r1, #0
 8006308:	d054      	beq.n	80063b4 <forward_mp+0x204>
 800630a:	f011 0003 	ands.w	r0, r1, #3
 800630e:	4654      	mov	r4, sl
 8006310:	46f1      	mov	r9, lr
 8006312:	d012      	beq.n	800633a <forward_mp+0x18a>
 8006314:	ed99 0a00 	vldr	s0, [r9]
 8006318:	edd4 0a00 	vldr	s1, [r4]
 800631c:	eef4 0a40 	vcmp.f32	s1, s0
 8006320:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006324:	bf58      	it	pl
 8006326:	eeb0 0a60 	vmovpl.f32	s0, s1
 800632a:	1e40      	subs	r0, r0, #1
 800632c:	1d24      	adds	r4, r4, #4
 800632e:	2800      	cmp	r0, #0
 8006330:	ed89 0a00 	vstr	s0, [r9]
 8006334:	f109 0904 	add.w	r9, r9, #4
 8006338:	d1ec      	bne.n	8006314 <forward_mp+0x164>
 800633a:	0888      	lsrs	r0, r1, #2
 800633c:	f000 803a 	beq.w	80063b4 <forward_mp+0x204>
 8006340:	edd4 0a00 	vldr	s1, [r4]
 8006344:	edd9 1a00 	vldr	s3, [r9]
 8006348:	eef4 0a61 	vcmp.f32	s1, s3
 800634c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006350:	bf48      	it	mi
 8006352:	eef0 0a61 	vmovmi.f32	s1, s3
 8006356:	edc9 0a00 	vstr	s1, [r9]
 800635a:	edd4 0a01 	vldr	s1, [r4, #4]
 800635e:	edd9 1a01 	vldr	s3, [r9, #4]
 8006362:	eef4 0a61 	vcmp.f32	s1, s3
 8006366:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800636a:	ed99 0a02 	vldr	s0, [r9, #8]
 800636e:	bf48      	it	mi
 8006370:	eef0 0a61 	vmovmi.f32	s1, s3
 8006374:	edc9 0a01 	vstr	s1, [r9, #4]
 8006378:	ed94 1a02 	vldr	s2, [r4, #8]
 800637c:	eeb4 1a40 	vcmp.f32	s2, s0
 8006380:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006384:	edd9 1a03 	vldr	s3, [r9, #12]
 8006388:	bf48      	it	mi
 800638a:	eeb0 1a40 	vmovmi.f32	s2, s0
 800638e:	ed89 1a02 	vstr	s2, [r9, #8]
 8006392:	edd4 0a03 	vldr	s1, [r4, #12]
 8006396:	eef4 0a61 	vcmp.f32	s1, s3
 800639a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800639e:	bf58      	it	pl
 80063a0:	eef0 1a60 	vmovpl.f32	s3, s1
 80063a4:	1e40      	subs	r0, r0, #1
 80063a6:	3410      	adds	r4, #16
 80063a8:	2800      	cmp	r0, #0
 80063aa:	edc9 1a03 	vstr	s3, [r9, #12]
 80063ae:	f109 0910 	add.w	r9, r9, #16
 80063b2:	d1c5      	bne.n	8006340 <forward_mp+0x190>
 80063b4:	eb0a 0a81 	add.w	sl, sl, r1, lsl #2
 80063b8:	45da      	cmp	sl, fp
 80063ba:	d3a4      	bcc.n	8006306 <forward_mp+0x156>
 80063bc:	1e52      	subs	r2, r2, #1
 80063be:	eb0c 0c86 	add.w	ip, ip, r6, lsl #2
 80063c2:	d19b      	bne.n	80062fc <forward_mp+0x14c>
 80063c4:	9806      	ldr	r0, [sp, #24]
 80063c6:	eb0e 0e81 	add.w	lr, lr, r1, lsl #2
 80063ca:	1945      	adds	r5, r0, r5
 80063cc:	1e5b      	subs	r3, r3, #1
 80063ce:	f47f af58 	bne.w	8006282 <forward_mp+0xd2>
 80063d2:	9e03      	ldr	r6, [sp, #12]
 80063d4:	9a02      	ldr	r2, [sp, #8]
 80063d6:	9f00      	ldr	r7, [sp, #0]
 80063d8:	9d0d      	ldr	r5, [sp, #52]	; 0x34
 80063da:	19ef      	adds	r7, r5, r7
 80063dc:	9700      	str	r7, [sp, #0]
 80063de:	9c01      	ldr	r4, [sp, #4]
 80063e0:	1e64      	subs	r4, r4, #1
 80063e2:	9401      	str	r4, [sp, #4]
 80063e4:	f47f af2e 	bne.w	8006244 <forward_mp+0x94>
 80063e8:	b00e      	add	sp, #56	; 0x38
 80063ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080063f0 <forward_ap>:
 80063f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80063f4:	b097      	sub	sp, #92	; 0x5c
 80063f6:	4681      	mov	r9, r0
 80063f8:	f8d9 2014 	ldr.w	r2, [r9, #20]
 80063fc:	8811      	ldrh	r1, [r2, #0]
 80063fe:	2900      	cmp	r1, #0
 8006400:	bf1a      	itte	ne
 8006402:	6850      	ldrne	r0, [r2, #4]
 8006404:	1d00      	addne	r0, r0, #4
 8006406:	2004      	moveq	r0, #4
 8006408:	6800      	ldr	r0, [r0, #0]
 800640a:	2800      	cmp	r0, #0
 800640c:	bf14      	ite	ne
 800640e:	6806      	ldrne	r6, [r0, #0]
 8006410:	2600      	moveq	r6, #0
 8006412:	2901      	cmp	r1, #1
 8006414:	68f3      	ldr	r3, [r6, #12]
 8006416:	bfc6      	itte	gt
 8006418:	6850      	ldrgt	r0, [r2, #4]
 800641a:	3010      	addgt	r0, #16
 800641c:	2004      	movle	r0, #4
 800641e:	6800      	ldr	r0, [r0, #0]
 8006420:	f8d3 800c 	ldr.w	r8, [r3, #12]
 8006424:	2800      	cmp	r0, #0
 8006426:	bf14      	ite	ne
 8006428:	f8d0 e000 	ldrne.w	lr, [r0]
 800642c:	f04f 0e00 	moveq.w	lr, #0
 8006430:	f8de 200c 	ldr.w	r2, [lr, #12]
 8006434:	68d0      	ldr	r0, [r2, #12]
 8006436:	f8cd 8034 	str.w	r8, [sp, #52]	; 0x34
 800643a:	6892      	ldr	r2, [r2, #8]
 800643c:	920c      	str	r2, [sp, #48]	; 0x30
 800643e:	f8d3 8008 	ldr.w	r8, [r3, #8]
 8006442:	6859      	ldr	r1, [r3, #4]
 8006444:	f8d9 3018 	ldr.w	r3, [r9, #24]
 8006448:	f8d9 a01c 	ldr.w	sl, [r9, #28]
 800644c:	f8cd a014 	str.w	sl, [sp, #20]
 8006450:	f8d9 2020 	ldr.w	r2, [r9, #32]
 8006454:	f8d9 4024 	ldr.w	r4, [r9, #36]	; 0x24
 8006458:	9416      	str	r4, [sp, #88]	; 0x58
 800645a:	f8d9 c02c 	ldr.w	ip, [r9, #44]	; 0x2c
 800645e:	69b6      	ldr	r6, [r6, #24]
 8006460:	f8de e018 	ldr.w	lr, [lr, #24]
 8006464:	f8dc 7000 	ldr.w	r7, [ip]
 8006468:	f8dc 5004 	ldr.w	r5, [ip, #4]
 800646c:	f8d6 a008 	ldr.w	sl, [r6, #8]
 8006470:	f8de e008 	ldr.w	lr, [lr, #8]
 8006474:	427f      	negs	r7, r7
 8006476:	2800      	cmp	r0, #0
 8006478:	9701      	str	r7, [sp, #4]
 800647a:	f000 8121 	beq.w	80066c0 <forward_ap+0x2d0>
 800647e:	9004      	str	r0, [sp, #16]
 8006480:	426d      	negs	r5, r5
 8006482:	9515      	str	r5, [sp, #84]	; 0x54
 8006484:	9d05      	ldr	r5, [sp, #20]
 8006486:	fb01 f608 	mul.w	r6, r1, r8
 800648a:	435d      	muls	r5, r3
 800648c:	9514      	str	r5, [sp, #80]	; 0x50
 800648e:	9613      	str	r6, [sp, #76]	; 0x4c
 8006490:	f8dd c004 	ldr.w	ip, [sp, #4]
 8006494:	9e0d      	ldr	r6, [sp, #52]	; 0x34
 8006496:	9801      	ldr	r0, [sp, #4]
 8006498:	9d05      	ldr	r5, [sp, #20]
 800649a:	9f15      	ldr	r7, [sp, #84]	; 0x54
 800649c:	f1dc 0c00 	rsbs	ip, ip, #0
 80064a0:	bfcc      	ite	gt
 80064a2:	2400      	movgt	r4, #0
 80064a4:	9c01      	ldrle	r4, [sp, #4]
 80064a6:	1a30      	subs	r0, r6, r0
 80064a8:	42a8      	cmp	r0, r5
 80064aa:	9e01      	ldr	r6, [sp, #4]
 80064ac:	9700      	str	r7, [sp, #0]
 80064ae:	bf88      	it	hi
 80064b0:	4628      	movhi	r0, r5
 80064b2:	1986      	adds	r6, r0, r6
 80064b4:	980c      	ldr	r0, [sp, #48]	; 0x30
 80064b6:	2800      	cmp	r0, #0
 80064b8:	f000 80f7 	beq.w	80066aa <forward_ap+0x2ba>
 80064bc:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
 80064c0:	fb08 f704 	mul.w	r7, r8, r4
 80064c4:	f8cd b008 	str.w	fp, [sp, #8]
 80064c8:	1ba5      	subs	r5, r4, r6
 80064ca:	9712      	str	r7, [sp, #72]	; 0x48
 80064cc:	9511      	str	r5, [sp, #68]	; 0x44
 80064ce:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 80064d2:	f8cd 801c 	str.w	r8, [sp, #28]
 80064d6:	9306      	str	r3, [sp, #24]
 80064d8:	920b      	str	r2, [sp, #44]	; 0x2c
 80064da:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 80064de:	9409      	str	r4, [sp, #36]	; 0x24
 80064e0:	9608      	str	r6, [sp, #32]
 80064e2:	9b00      	ldr	r3, [sp, #0]
 80064e4:	9a07      	ldr	r2, [sp, #28]
 80064e6:	9800      	ldr	r0, [sp, #0]
 80064e8:	9f00      	ldr	r7, [sp, #0]
 80064ea:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 80064ee:	f04f 0a00 	mov.w	sl, #0
 80064f2:	425b      	negs	r3, r3
 80064f4:	9b06      	ldr	r3, [sp, #24]
 80064f6:	bfcc      	ite	gt
 80064f8:	2500      	movgt	r5, #0
 80064fa:	9d00      	ldrle	r5, [sp, #0]
 80064fc:	1a10      	subs	r0, r2, r0
 80064fe:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8006500:	4298      	cmp	r0, r3
 8006502:	9203      	str	r2, [sp, #12]
 8006504:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8006506:	bf88      	it	hi
 8006508:	4618      	movhi	r0, r3
 800650a:	19c7      	adds	r7, r0, r7
 800650c:	9811      	ldr	r0, [sp, #68]	; 0x44
 800650e:	1beb      	subs	r3, r5, r7
 8006510:	eba7 0805 	sub.w	r8, r7, r5
 8006514:	fb08 f801 	mul.w	r8, r8, r1
 8006518:	4343      	muls	r3, r0
 800651a:	9812      	ldr	r0, [sp, #72]	; 0x48
 800651c:	1828      	adds	r0, r5, r0
 800651e:	4348      	muls	r0, r1
 8006520:	eb09 0980 	add.w	r9, r9, r0, lsl #2
 8006524:	f892 0030 	ldrb.w	r0, [r2, #48]	; 0x30
 8006528:	9a08      	ldr	r2, [sp, #32]
 800652a:	2800      	cmp	r0, #0
 800652c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800652e:	bf14      	ite	ne
 8006530:	9e14      	ldrne	r6, [sp, #80]	; 0x50
 8006532:	461e      	moveq	r6, r3
 8006534:	2401      	movs	r4, #1
 8006536:	4290      	cmp	r0, r2
 8006538:	f280 80a1 	bge.w	800667e <forward_ap+0x28e>
 800653c:	1b7d      	subs	r5, r7, r5
 800653e:	1a12      	subs	r2, r2, r0
 8006540:	950f      	str	r5, [sp, #60]	; 0x3c
 8006542:	9310      	str	r3, [sp, #64]	; 0x40
 8006544:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8006546:	9810      	ldr	r0, [sp, #64]	; 0x40
 8006548:	464d      	mov	r5, r9
 800654a:	eb05 0c88 	add.w	ip, r5, r8, lsl #2
 800654e:	449a      	add	sl, r3
 8006550:	4550      	cmp	r0, sl
 8006552:	bf0c      	ite	eq
 8006554:	4633      	moveq	r3, r6
 8006556:	2300      	movne	r3, #0
 8006558:	4565      	cmp	r5, ip
 800655a:	d252      	bcs.n	8006602 <forward_ap+0x212>
 800655c:	2900      	cmp	r1, #0
 800655e:	d04b      	beq.n	80065f8 <forward_ap+0x208>
 8006560:	f011 0003 	ands.w	r0, r1, #3
 8006564:	462f      	mov	r7, r5
 8006566:	46f3      	mov	fp, lr
 8006568:	d00f      	beq.n	800658a <forward_ap+0x19a>
 800656a:	2c01      	cmp	r4, #1
 800656c:	ed97 0a00 	vldr	s0, [r7]
 8006570:	bf1c      	itt	ne
 8006572:	eddb 0a00 	vldrne	s1, [fp]
 8006576:	ee30 0a80 	vaddne.f32	s0, s1, s0
 800657a:	1e40      	subs	r0, r0, #1
 800657c:	1d3f      	adds	r7, r7, #4
 800657e:	2800      	cmp	r0, #0
 8006580:	ed8b 0a00 	vstr	s0, [fp]
 8006584:	f10b 0b04 	add.w	fp, fp, #4
 8006588:	d1ef      	bne.n	800656a <forward_ap+0x17a>
 800658a:	0888      	lsrs	r0, r1, #2
 800658c:	d034      	beq.n	80065f8 <forward_ap+0x208>
 800658e:	2c01      	cmp	r4, #1
 8006590:	edd7 1a00 	vldr	s3, [r7]
 8006594:	d10c      	bne.n	80065b0 <forward_ap+0x1c0>
 8006596:	edcb 1a00 	vstr	s3, [fp]
 800659a:	ed97 0a01 	vldr	s0, [r7, #4]
 800659e:	ed8b 0a01 	vstr	s0, [fp, #4]
 80065a2:	edd7 1a02 	vldr	s3, [r7, #8]
 80065a6:	edcb 1a02 	vstr	s3, [fp, #8]
 80065aa:	edd7 1a03 	vldr	s3, [r7, #12]
 80065ae:	e01b      	b.n	80065e8 <forward_ap+0x1f8>
 80065b0:	eddb 0a00 	vldr	s1, [fp]
 80065b4:	ee30 0aa1 	vadd.f32	s0, s1, s3
 80065b8:	ed8b 0a00 	vstr	s0, [fp]
 80065bc:	ed9b 1a01 	vldr	s2, [fp, #4]
 80065c0:	ed97 0a01 	vldr	s0, [r7, #4]
 80065c4:	ee71 0a00 	vadd.f32	s1, s2, s0
 80065c8:	edcb 0a01 	vstr	s1, [fp, #4]
 80065cc:	eddb 1a02 	vldr	s3, [fp, #8]
 80065d0:	edd7 0a02 	vldr	s1, [r7, #8]
 80065d4:	ee31 0aa0 	vadd.f32	s0, s3, s1
 80065d8:	ed8b 0a02 	vstr	s0, [fp, #8]
 80065dc:	ed9b 0a03 	vldr	s0, [fp, #12]
 80065e0:	ed97 1a03 	vldr	s2, [r7, #12]
 80065e4:	ee70 1a01 	vadd.f32	s3, s0, s2
 80065e8:	1e40      	subs	r0, r0, #1
 80065ea:	3710      	adds	r7, #16
 80065ec:	2800      	cmp	r0, #0
 80065ee:	edcb 1a03 	vstr	s3, [fp, #12]
 80065f2:	f10b 0b10 	add.w	fp, fp, #16
 80065f6:	d1ca      	bne.n	800658e <forward_ap+0x19e>
 80065f8:	eb05 0581 	add.w	r5, r5, r1, lsl #2
 80065fc:	2400      	movs	r4, #0
 80065fe:	4565      	cmp	r5, ip
 8006600:	d3ac      	bcc.n	800655c <forward_ap+0x16c>
 8006602:	b3ab      	cbz	r3, 8006670 <forward_ap+0x280>
 8006604:	ee00 3a10 	vmov	s0, r3
 8006608:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 800660c:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8006610:	ee80 0a80 	vdiv.f32	s0, s1, s0
 8006614:	b361      	cbz	r1, 8006670 <forward_ap+0x280>
 8006616:	f011 0003 	ands.w	r0, r1, #3
 800661a:	4673      	mov	r3, lr
 800661c:	f000 800a 	beq.w	8006634 <forward_ap+0x244>
 8006620:	edd3 0a00 	vldr	s1, [r3]
 8006624:	1e40      	subs	r0, r0, #1
 8006626:	ee60 0a80 	vmul.f32	s1, s1, s0
 800662a:	edc3 0a00 	vstr	s1, [r3]
 800662e:	f103 0304 	add.w	r3, r3, #4
 8006632:	d1f5      	bne.n	8006620 <forward_ap+0x230>
 8006634:	0888      	lsrs	r0, r1, #2
 8006636:	d01b      	beq.n	8006670 <forward_ap+0x280>
 8006638:	edd3 0a00 	vldr	s1, [r3]
 800663c:	1e40      	subs	r0, r0, #1
 800663e:	ee60 0a80 	vmul.f32	s1, s1, s0
 8006642:	edc3 0a00 	vstr	s1, [r3]
 8006646:	ed93 1a01 	vldr	s2, [r3, #4]
 800664a:	ee21 1a00 	vmul.f32	s2, s2, s0
 800664e:	ed83 1a01 	vstr	s2, [r3, #4]
 8006652:	edd3 0a02 	vldr	s1, [r3, #8]
 8006656:	ed93 1a03 	vldr	s2, [r3, #12]
 800665a:	ee60 1a80 	vmul.f32	s3, s1, s0
 800665e:	ee61 0a00 	vmul.f32	s1, s2, s0
 8006662:	edc3 1a02 	vstr	s3, [r3, #8]
 8006666:	edc3 0a03 	vstr	s1, [r3, #12]
 800666a:	f103 0310 	add.w	r3, r3, #16
 800666e:	d1e3      	bne.n	8006638 <forward_ap+0x248>
 8006670:	2400      	movs	r4, #0
 8006672:	9803      	ldr	r0, [sp, #12]
 8006674:	1e52      	subs	r2, r2, #1
 8006676:	eb09 0980 	add.w	r9, r9, r0, lsl #2
 800667a:	f47f af63 	bne.w	8006544 <forward_ap+0x154>
 800667e:	9a00      	ldr	r2, [sp, #0]
 8006680:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8006682:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8006686:	eb0e 0e81 	add.w	lr, lr, r1, lsl #2
 800668a:	189a      	adds	r2, r3, r2
 800668c:	9200      	str	r2, [sp, #0]
 800668e:	f1b8 0801 	subs.w	r8, r8, #1
 8006692:	f8cd 8008 	str.w	r8, [sp, #8]
 8006696:	f47f af24 	bne.w	80064e2 <forward_ap+0xf2>
 800669a:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 800669e:	f8dd 801c 	ldr.w	r8, [sp, #28]
 80066a2:	9b06      	ldr	r3, [sp, #24]
 80066a4:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80066a6:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 80066aa:	f8dd c004 	ldr.w	ip, [sp, #4]
 80066ae:	9e16      	ldr	r6, [sp, #88]	; 0x58
 80066b0:	44b4      	add	ip, r6
 80066b2:	f8cd c004 	str.w	ip, [sp, #4]
 80066b6:	9c04      	ldr	r4, [sp, #16]
 80066b8:	1e64      	subs	r4, r4, #1
 80066ba:	9404      	str	r4, [sp, #16]
 80066bc:	f47f aee8 	bne.w	8006490 <forward_ap+0xa0>
 80066c0:	b017      	add	sp, #92	; 0x5c
 80066c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080066c8 <ai_array_fmt_name>:
 80066c8:	f020 407e 	bic.w	r0, r0, #4261412864	; 0xfe000000
 80066cc:	f1b0 0140 	subs.w	r1, r0, #64	; 0x40
 80066d0:	d062      	beq.n	8006798 <ai_array_fmt_name+0xd0>
 80066d2:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80066d6:	1a89      	subs	r1, r1, r2
 80066d8:	f000 8094 	beq.w	8006804 <ai_array_fmt_name+0x13c>
 80066dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80066e0:	1a89      	subs	r1, r1, r2
 80066e2:	d071      	beq.n	80067c8 <ai_array_fmt_name+0x100>
 80066e4:	1a89      	subs	r1, r1, r2
 80066e6:	d063      	beq.n	80067b0 <ai_array_fmt_name+0xe8>
 80066e8:	1fc9      	subs	r1, r1, #7
 80066ea:	f000 808e 	beq.w	800680a <ai_array_fmt_name+0x142>
 80066ee:	f240 32f9 	movw	r2, #1017	; 0x3f9
 80066f2:	1a89      	subs	r1, r1, r2
 80066f4:	d05f      	beq.n	80067b6 <ai_array_fmt_name+0xee>
 80066f6:	390f      	subs	r1, #15
 80066f8:	f000 808a 	beq.w	8006810 <ai_array_fmt_name+0x148>
 80066fc:	f240 72f1 	movw	r2, #2033	; 0x7f1
 8006700:	1a89      	subs	r1, r1, r2
 8006702:	d05b      	beq.n	80067bc <ai_array_fmt_name+0xf4>
 8006704:	391f      	subs	r1, #31
 8006706:	f000 8086 	beq.w	8006816 <ai_array_fmt_name+0x14e>
 800670a:	f640 72e1 	movw	r2, #4065	; 0xfe1
 800670e:	1a89      	subs	r1, r1, r2
 8006710:	d057      	beq.n	80067c2 <ai_array_fmt_name+0xfa>
 8006712:	f8df 25d4 	ldr.w	r2, [pc, #1492]	; 8006ce8 <.text_15>
 8006716:	1a89      	subs	r1, r1, r2
 8006718:	f000 808f 	beq.w	800683a <ai_array_fmt_name+0x172>
 800671c:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 8006720:	1a89      	subs	r1, r1, r2
 8006722:	f000 8087 	beq.w	8006834 <ai_array_fmt_name+0x16c>
 8006726:	f8df 25c4 	ldr.w	r2, [pc, #1476]	; 8006cec <.text_16>
 800672a:	1a89      	subs	r1, r1, r2
 800672c:	d05e      	beq.n	80067ec <ai_array_fmt_name+0x124>
 800672e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006732:	1a89      	subs	r1, r1, r2
 8006734:	d057      	beq.n	80067e6 <ai_array_fmt_name+0x11e>
 8006736:	1a89      	subs	r1, r1, r2
 8006738:	d049      	beq.n	80067ce <ai_array_fmt_name+0x106>
 800673a:	1fc9      	subs	r1, r1, #7
 800673c:	d059      	beq.n	80067f2 <ai_array_fmt_name+0x12a>
 800673e:	f240 32f9 	movw	r2, #1017	; 0x3f9
 8006742:	1a89      	subs	r1, r1, r2
 8006744:	d046      	beq.n	80067d4 <ai_array_fmt_name+0x10c>
 8006746:	390f      	subs	r1, #15
 8006748:	d056      	beq.n	80067f8 <ai_array_fmt_name+0x130>
 800674a:	f240 72f1 	movw	r2, #2033	; 0x7f1
 800674e:	1a89      	subs	r1, r1, r2
 8006750:	d043      	beq.n	80067da <ai_array_fmt_name+0x112>
 8006752:	391f      	subs	r1, #31
 8006754:	d053      	beq.n	80067fe <ai_array_fmt_name+0x136>
 8006756:	f640 72e1 	movw	r2, #4065	; 0xfe1
 800675a:	1a89      	subs	r1, r1, r2
 800675c:	d040      	beq.n	80067e0 <ai_array_fmt_name+0x118>
 800675e:	f8df 2588 	ldr.w	r2, [pc, #1416]	; 8006ce8 <.text_15>
 8006762:	1a89      	subs	r1, r1, r2
 8006764:	d063      	beq.n	800682e <ai_array_fmt_name+0x166>
 8006766:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 800676a:	1a89      	subs	r1, r1, r2
 800676c:	d05c      	beq.n	8006828 <ai_array_fmt_name+0x160>
 800676e:	f8df 2580 	ldr.w	r2, [pc, #1408]	; 8006cf0 <.text_17>
 8006772:	1a89      	subs	r1, r1, r2
 8006774:	d019      	beq.n	80067aa <ai_array_fmt_name+0xe2>
 8006776:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800677a:	1a89      	subs	r1, r1, r2
 800677c:	d00f      	beq.n	800679e <ai_array_fmt_name+0xd6>
 800677e:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006782:	1a89      	subs	r1, r1, r2
 8006784:	d00e      	beq.n	80067a4 <ai_array_fmt_name+0xdc>
 8006786:	f8df 256c 	ldr.w	r2, [pc, #1388]	; 8006cf4 <.text_18>
 800678a:	1a89      	subs	r1, r1, r2
 800678c:	d049      	beq.n	8006822 <ai_array_fmt_name+0x15a>
 800678e:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 8006792:	1a89      	subs	r1, r1, r2
 8006794:	d042      	beq.n	800681c <ai_array_fmt_name+0x154>
 8006796:	e053      	b.n	8006840 <ai_array_fmt_name+0x178>
 8006798:	f20f 6074 	addw	r0, pc, #1652	; 0x674
 800679c:	4770      	bx	lr
 800679e:	f20f 607c 	addw	r0, pc, #1660	; 0x67c
 80067a2:	4770      	bx	lr
 80067a4:	f20f 6080 	addw	r0, pc, #1664	; 0x680
 80067a8:	4770      	bx	lr
 80067aa:	f20f 6088 	addw	r0, pc, #1672	; 0x688
 80067ae:	4770      	bx	lr
 80067b0:	f20f 608c 	addw	r0, pc, #1676	; 0x68c
 80067b4:	4770      	bx	lr
 80067b6:	f20f 6090 	addw	r0, pc, #1680	; 0x690
 80067ba:	4770      	bx	lr
 80067bc:	f20f 6090 	addw	r0, pc, #1680	; 0x690
 80067c0:	4770      	bx	lr
 80067c2:	f20f 6094 	addw	r0, pc, #1684	; 0x694
 80067c6:	4770      	bx	lr
 80067c8:	f20f 6094 	addw	r0, pc, #1684	; 0x694
 80067cc:	4770      	bx	lr
 80067ce:	f20f 6098 	addw	r0, pc, #1688	; 0x698
 80067d2:	4770      	bx	lr
 80067d4:	f20f 6098 	addw	r0, pc, #1688	; 0x698
 80067d8:	4770      	bx	lr
 80067da:	f20f 609c 	addw	r0, pc, #1692	; 0x69c
 80067de:	4770      	bx	lr
 80067e0:	f20f 609c 	addw	r0, pc, #1692	; 0x69c
 80067e4:	4770      	bx	lr
 80067e6:	f20f 60a0 	addw	r0, pc, #1696	; 0x6a0
 80067ea:	4770      	bx	lr
 80067ec:	f20f 60a0 	addw	r0, pc, #1696	; 0x6a0
 80067f0:	4770      	bx	lr
 80067f2:	f20f 60a4 	addw	r0, pc, #1700	; 0x6a4
 80067f6:	4770      	bx	lr
 80067f8:	f20f 60a4 	addw	r0, pc, #1700	; 0x6a4
 80067fc:	4770      	bx	lr
 80067fe:	f20f 60a8 	addw	r0, pc, #1704	; 0x6a8
 8006802:	4770      	bx	lr
 8006804:	f20f 60a8 	addw	r0, pc, #1704	; 0x6a8
 8006808:	4770      	bx	lr
 800680a:	f20f 60ac 	addw	r0, pc, #1708	; 0x6ac
 800680e:	4770      	bx	lr
 8006810:	f20f 60ac 	addw	r0, pc, #1708	; 0x6ac
 8006814:	4770      	bx	lr
 8006816:	f20f 60b4 	addw	r0, pc, #1716	; 0x6b4
 800681a:	4770      	bx	lr
 800681c:	f20f 60b8 	addw	r0, pc, #1720	; 0x6b8
 8006820:	4770      	bx	lr
 8006822:	f20f 60c4 	addw	r0, pc, #1732	; 0x6c4
 8006826:	4770      	bx	lr
 8006828:	f20f 60cc 	addw	r0, pc, #1740	; 0x6cc
 800682c:	4770      	bx	lr
 800682e:	f20f 60d8 	addw	r0, pc, #1752	; 0x6d8
 8006832:	4770      	bx	lr
 8006834:	f20f 60e0 	addw	r0, pc, #1760	; 0x6e0
 8006838:	4770      	bx	lr
 800683a:	f20f 60ec 	addw	r0, pc, #1772	; 0x6ec
 800683e:	4770      	bx	lr
 8006840:	f36f 000d 	bfc	r0, #0, #14
 8006844:	f040 0040 	orr.w	r0, r0, #64	; 0x40
 8006848:	2840      	cmp	r0, #64	; 0x40
 800684a:	d009      	beq.n	8006860 <ai_array_fmt_name+0x198>
 800684c:	f8df 14a8 	ldr.w	r1, [pc, #1192]	; 8006cf8 <.text_19>
 8006850:	4288      	cmp	r0, r1
 8006852:	d00b      	beq.n	800686c <ai_array_fmt_name+0x1a4>
 8006854:	f8df 14a4 	ldr.w	r1, [pc, #1188]	; 8006cfc <.text_20>
 8006858:	4288      	cmp	r0, r1
 800685a:	d004      	beq.n	8006866 <ai_array_fmt_name+0x19e>
 800685c:	a07a      	add	r0, pc, #488	; (adr r0, 8006a48 <.text_8>)
 800685e:	4770      	bx	lr
 8006860:	f20f 60d4 	addw	r0, pc, #1748	; 0x6d4
 8006864:	4770      	bx	lr
 8006866:	f20f 60e8 	addw	r0, pc, #1768	; 0x6e8
 800686a:	4770      	bx	lr
 800686c:	f20f 60f4 	addw	r0, pc, #1780	; 0x6f4
 8006870:	4770      	bx	lr

08006872 <ai_array_fmt_exported>:
 8006872:	f020 407e 	bic.w	r0, r0, #4261412864	; 0xfe000000
 8006876:	f1b0 0140 	subs.w	r1, r0, #64	; 0x40
 800687a:	d068      	beq.n	800694e <ai_array_fmt_exported+0xdc>
 800687c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8006880:	1a89      	subs	r1, r1, r2
 8006882:	d064      	beq.n	800694e <ai_array_fmt_exported+0xdc>
 8006884:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006888:	1a89      	subs	r1, r1, r2
 800688a:	d062      	beq.n	8006952 <ai_array_fmt_exported+0xe0>
 800688c:	1a89      	subs	r1, r1, r2
 800688e:	d05e      	beq.n	800694e <ai_array_fmt_exported+0xdc>
 8006890:	1fc9      	subs	r1, r1, #7
 8006892:	d05c      	beq.n	800694e <ai_array_fmt_exported+0xdc>
 8006894:	f240 32f9 	movw	r2, #1017	; 0x3f9
 8006898:	1a89      	subs	r1, r1, r2
 800689a:	d058      	beq.n	800694e <ai_array_fmt_exported+0xdc>
 800689c:	390f      	subs	r1, #15
 800689e:	d056      	beq.n	800694e <ai_array_fmt_exported+0xdc>
 80068a0:	f240 72f1 	movw	r2, #2033	; 0x7f1
 80068a4:	1a89      	subs	r1, r1, r2
 80068a6:	d054      	beq.n	8006952 <ai_array_fmt_exported+0xe0>
 80068a8:	391f      	subs	r1, #31
 80068aa:	d052      	beq.n	8006952 <ai_array_fmt_exported+0xe0>
 80068ac:	f640 72e1 	movw	r2, #4065	; 0xfe1
 80068b0:	1a89      	subs	r1, r1, r2
 80068b2:	d04e      	beq.n	8006952 <ai_array_fmt_exported+0xe0>
 80068b4:	f8df 2430 	ldr.w	r2, [pc, #1072]	; 8006ce8 <.text_15>
 80068b8:	1a89      	subs	r1, r1, r2
 80068ba:	d04a      	beq.n	8006952 <ai_array_fmt_exported+0xe0>
 80068bc:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 80068c0:	1a89      	subs	r1, r1, r2
 80068c2:	d046      	beq.n	8006952 <ai_array_fmt_exported+0xe0>
 80068c4:	f8df 2424 	ldr.w	r2, [pc, #1060]	; 8006cec <.text_16>
 80068c8:	1a89      	subs	r1, r1, r2
 80068ca:	d040      	beq.n	800694e <ai_array_fmt_exported+0xdc>
 80068cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80068d0:	1a89      	subs	r1, r1, r2
 80068d2:	d03e      	beq.n	8006952 <ai_array_fmt_exported+0xe0>
 80068d4:	1a89      	subs	r1, r1, r2
 80068d6:	d03a      	beq.n	800694e <ai_array_fmt_exported+0xdc>
 80068d8:	1fc9      	subs	r1, r1, #7
 80068da:	d038      	beq.n	800694e <ai_array_fmt_exported+0xdc>
 80068dc:	f240 32f9 	movw	r2, #1017	; 0x3f9
 80068e0:	1a89      	subs	r1, r1, r2
 80068e2:	d034      	beq.n	800694e <ai_array_fmt_exported+0xdc>
 80068e4:	390f      	subs	r1, #15
 80068e6:	d032      	beq.n	800694e <ai_array_fmt_exported+0xdc>
 80068e8:	f240 72f1 	movw	r2, #2033	; 0x7f1
 80068ec:	1a89      	subs	r1, r1, r2
 80068ee:	d030      	beq.n	8006952 <ai_array_fmt_exported+0xe0>
 80068f0:	391f      	subs	r1, #31
 80068f2:	d02e      	beq.n	8006952 <ai_array_fmt_exported+0xe0>
 80068f4:	f640 72e1 	movw	r2, #4065	; 0xfe1
 80068f8:	1a89      	subs	r1, r1, r2
 80068fa:	d02a      	beq.n	8006952 <ai_array_fmt_exported+0xe0>
 80068fc:	f8df 23e8 	ldr.w	r2, [pc, #1000]	; 8006ce8 <.text_15>
 8006900:	1a89      	subs	r1, r1, r2
 8006902:	d026      	beq.n	8006952 <ai_array_fmt_exported+0xe0>
 8006904:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 8006908:	1a89      	subs	r1, r1, r2
 800690a:	d022      	beq.n	8006952 <ai_array_fmt_exported+0xe0>
 800690c:	f8df 23e0 	ldr.w	r2, [pc, #992]	; 8006cf0 <.text_17>
 8006910:	1a89      	subs	r1, r1, r2
 8006912:	d01e      	beq.n	8006952 <ai_array_fmt_exported+0xe0>
 8006914:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006918:	1a89      	subs	r1, r1, r2
 800691a:	d018      	beq.n	800694e <ai_array_fmt_exported+0xdc>
 800691c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006920:	1a89      	subs	r1, r1, r2
 8006922:	d016      	beq.n	8006952 <ai_array_fmt_exported+0xe0>
 8006924:	f8df 23cc 	ldr.w	r2, [pc, #972]	; 8006cf4 <.text_18>
 8006928:	1a89      	subs	r1, r1, r2
 800692a:	d012      	beq.n	8006952 <ai_array_fmt_exported+0xe0>
 800692c:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 8006930:	1a89      	subs	r1, r1, r2
 8006932:	d00e      	beq.n	8006952 <ai_array_fmt_exported+0xe0>
 8006934:	f36f 000d 	bfc	r0, #0, #14
 8006938:	f040 0040 	orr.w	r0, r0, #64	; 0x40
 800693c:	2840      	cmp	r0, #64	; 0x40
 800693e:	bf1f      	itttt	ne
 8006940:	f8df 33b4 	ldrne.w	r3, [pc, #948]	; 8006cf8 <.text_19>
 8006944:	4298      	cmpne	r0, r3
 8006946:	f8df 33b4 	ldrne.w	r3, [pc, #948]	; 8006cfc <.text_20>
 800694a:	4298      	cmpne	r0, r3
 800694c:	d101      	bne.n	8006952 <ai_array_fmt_exported+0xe0>
 800694e:	2001      	movs	r0, #1
 8006950:	4770      	bx	lr
 8006952:	2000      	movs	r0, #0
 8006954:	4770      	bx	lr

08006956 <ai_array_fmt_valid>:
 8006956:	f020 407e 	bic.w	r0, r0, #4261412864	; 0xfe000000
 800695a:	f1b0 0140 	subs.w	r1, r0, #64	; 0x40
 800695e:	d069      	beq.n	8006a34 <ai_array_fmt_valid+0xde>
 8006960:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8006964:	1a89      	subs	r1, r1, r2
 8006966:	d065      	beq.n	8006a34 <ai_array_fmt_valid+0xde>
 8006968:	f44f 7200 	mov.w	r2, #512	; 0x200
 800696c:	1a89      	subs	r1, r1, r2
 800696e:	d061      	beq.n	8006a34 <ai_array_fmt_valid+0xde>
 8006970:	1a89      	subs	r1, r1, r2
 8006972:	d05f      	beq.n	8006a34 <ai_array_fmt_valid+0xde>
 8006974:	1fc9      	subs	r1, r1, #7
 8006976:	d05d      	beq.n	8006a34 <ai_array_fmt_valid+0xde>
 8006978:	f240 32f9 	movw	r2, #1017	; 0x3f9
 800697c:	1a89      	subs	r1, r1, r2
 800697e:	d059      	beq.n	8006a34 <ai_array_fmt_valid+0xde>
 8006980:	390f      	subs	r1, #15
 8006982:	d057      	beq.n	8006a34 <ai_array_fmt_valid+0xde>
 8006984:	f240 72f1 	movw	r2, #2033	; 0x7f1
 8006988:	1a89      	subs	r1, r1, r2
 800698a:	d053      	beq.n	8006a34 <ai_array_fmt_valid+0xde>
 800698c:	391f      	subs	r1, #31
 800698e:	d051      	beq.n	8006a34 <ai_array_fmt_valid+0xde>
 8006990:	f640 72e1 	movw	r2, #4065	; 0xfe1
 8006994:	1a89      	subs	r1, r1, r2
 8006996:	d04d      	beq.n	8006a34 <ai_array_fmt_valid+0xde>
 8006998:	f8df 234c 	ldr.w	r2, [pc, #844]	; 8006ce8 <.text_15>
 800699c:	1a89      	subs	r1, r1, r2
 800699e:	d049      	beq.n	8006a34 <ai_array_fmt_valid+0xde>
 80069a0:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 80069a4:	1a89      	subs	r1, r1, r2
 80069a6:	d045      	beq.n	8006a34 <ai_array_fmt_valid+0xde>
 80069a8:	f8df 2340 	ldr.w	r2, [pc, #832]	; 8006cec <.text_16>
 80069ac:	1a89      	subs	r1, r1, r2
 80069ae:	d041      	beq.n	8006a34 <ai_array_fmt_valid+0xde>
 80069b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80069b4:	1a89      	subs	r1, r1, r2
 80069b6:	d03d      	beq.n	8006a34 <ai_array_fmt_valid+0xde>
 80069b8:	1a89      	subs	r1, r1, r2
 80069ba:	d03b      	beq.n	8006a34 <ai_array_fmt_valid+0xde>
 80069bc:	1fc9      	subs	r1, r1, #7
 80069be:	d039      	beq.n	8006a34 <ai_array_fmt_valid+0xde>
 80069c0:	f240 32f9 	movw	r2, #1017	; 0x3f9
 80069c4:	1a89      	subs	r1, r1, r2
 80069c6:	d035      	beq.n	8006a34 <ai_array_fmt_valid+0xde>
 80069c8:	390f      	subs	r1, #15
 80069ca:	d033      	beq.n	8006a34 <ai_array_fmt_valid+0xde>
 80069cc:	f240 72f1 	movw	r2, #2033	; 0x7f1
 80069d0:	1a89      	subs	r1, r1, r2
 80069d2:	d02f      	beq.n	8006a34 <ai_array_fmt_valid+0xde>
 80069d4:	391f      	subs	r1, #31
 80069d6:	d02d      	beq.n	8006a34 <ai_array_fmt_valid+0xde>
 80069d8:	f640 72e1 	movw	r2, #4065	; 0xfe1
 80069dc:	1a89      	subs	r1, r1, r2
 80069de:	d029      	beq.n	8006a34 <ai_array_fmt_valid+0xde>
 80069e0:	f8df 2304 	ldr.w	r2, [pc, #772]	; 8006ce8 <.text_15>
 80069e4:	1a89      	subs	r1, r1, r2
 80069e6:	d025      	beq.n	8006a34 <ai_array_fmt_valid+0xde>
 80069e8:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 80069ec:	1a89      	subs	r1, r1, r2
 80069ee:	d021      	beq.n	8006a34 <ai_array_fmt_valid+0xde>
 80069f0:	f8df 22fc 	ldr.w	r2, [pc, #764]	; 8006cf0 <.text_17>
 80069f4:	1a89      	subs	r1, r1, r2
 80069f6:	d01d      	beq.n	8006a34 <ai_array_fmt_valid+0xde>
 80069f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80069fc:	1a89      	subs	r1, r1, r2
 80069fe:	d019      	beq.n	8006a34 <ai_array_fmt_valid+0xde>
 8006a00:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006a04:	1a89      	subs	r1, r1, r2
 8006a06:	d015      	beq.n	8006a34 <ai_array_fmt_valid+0xde>
 8006a08:	f8df 22e8 	ldr.w	r2, [pc, #744]	; 8006cf4 <.text_18>
 8006a0c:	1a89      	subs	r1, r1, r2
 8006a0e:	d011      	beq.n	8006a34 <ai_array_fmt_valid+0xde>
 8006a10:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 8006a14:	1a89      	subs	r1, r1, r2
 8006a16:	bf1e      	ittt	ne
 8006a18:	f36f 000d 	bfcne	r0, #0, #14
 8006a1c:	f040 0040 	orrne.w	r0, r0, #64	; 0x40
 8006a20:	2840      	cmpne	r0, #64	; 0x40
 8006a22:	d007      	beq.n	8006a34 <ai_array_fmt_valid+0xde>
 8006a24:	f8df 32d0 	ldr.w	r3, [pc, #720]	; 8006cf8 <.text_19>
 8006a28:	4298      	cmp	r0, r3
 8006a2a:	bf1c      	itt	ne
 8006a2c:	f8df 32cc 	ldrne.w	r3, [pc, #716]	; 8006cfc <.text_20>
 8006a30:	4298      	cmpne	r0, r3
 8006a32:	d101      	bne.n	8006a38 <ai_array_fmt_valid+0xe2>
 8006a34:	2001      	movs	r0, #1
 8006a36:	4770      	bx	lr
 8006a38:	2000      	movs	r0, #0
 8006a3a:	4770      	bx	lr

08006a3c <ai_array_fmt_get_formats>:
 8006a3c:	f8df 12c0 	ldr.w	r1, [pc, #704]	; 8006d00 <.text_21>
 8006a40:	6001      	str	r1, [r0, #0]
 8006a42:	201c      	movs	r0, #28
 8006a44:	4770      	bx	lr
	...

08006a48 <.text_8>:
 8006a48:	00000000 	.word	0x00000000

08006a4c <ai_buffer_fmt_name>:
 8006a4c:	f020 407e 	bic.w	r0, r0, #4261412864	; 0xfe000000
 8006a50:	f1b0 0140 	subs.w	r1, r0, #64	; 0x40
 8006a54:	d022      	beq.n	8006a9c <ai_buffer_fmt_name+0x50>
 8006a56:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8006a5a:	1a89      	subs	r1, r1, r2
 8006a5c:	d039      	beq.n	8006ad2 <ai_buffer_fmt_name+0x86>
 8006a5e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006a62:	1a89      	subs	r1, r1, r2
 8006a64:	d020      	beq.n	8006aa8 <ai_buffer_fmt_name+0x5c>
 8006a66:	1fc9      	subs	r1, r1, #7
 8006a68:	d036      	beq.n	8006ad8 <ai_buffer_fmt_name+0x8c>
 8006a6a:	f240 32f9 	movw	r2, #1017	; 0x3f9
 8006a6e:	1a89      	subs	r1, r1, r2
 8006a70:	d01d      	beq.n	8006aae <ai_buffer_fmt_name+0x62>
 8006a72:	390f      	subs	r1, #15
 8006a74:	d033      	beq.n	8006ade <ai_buffer_fmt_name+0x92>
 8006a76:	4aa3      	ldr	r2, [pc, #652]	; (8006d04 <.text_22>)
 8006a78:	1a89      	subs	r1, r1, r2
 8006a7a:	d021      	beq.n	8006ac0 <ai_buffer_fmt_name+0x74>
 8006a7c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006a80:	1a89      	subs	r1, r1, r2
 8006a82:	d017      	beq.n	8006ab4 <ai_buffer_fmt_name+0x68>
 8006a84:	1fc9      	subs	r1, r1, #7
 8006a86:	d01e      	beq.n	8006ac6 <ai_buffer_fmt_name+0x7a>
 8006a88:	f240 32f9 	movw	r2, #1017	; 0x3f9
 8006a8c:	1a89      	subs	r1, r1, r2
 8006a8e:	d014      	beq.n	8006aba <ai_buffer_fmt_name+0x6e>
 8006a90:	390f      	subs	r1, #15
 8006a92:	d01b      	beq.n	8006acc <ai_buffer_fmt_name+0x80>
 8006a94:	4a9c      	ldr	r2, [pc, #624]	; (8006d08 <.text_23>)
 8006a96:	1a89      	subs	r1, r1, r2
 8006a98:	d003      	beq.n	8006aa2 <ai_buffer_fmt_name+0x56>
 8006a9a:	e023      	b.n	8006ae4 <ai_buffer_fmt_name+0x98>
 8006a9c:	f20f 3070 	addw	r0, pc, #880	; 0x370
 8006aa0:	4770      	bx	lr
 8006aa2:	f20f 3078 	addw	r0, pc, #888	; 0x378
 8006aa6:	4770      	bx	lr
 8006aa8:	f20f 3094 	addw	r0, pc, #916	; 0x394
 8006aac:	4770      	bx	lr
 8006aae:	f20f 3098 	addw	r0, pc, #920	; 0x398
 8006ab2:	4770      	bx	lr
 8006ab4:	f20f 30b0 	addw	r0, pc, #944	; 0x3b0
 8006ab8:	4770      	bx	lr
 8006aba:	f20f 30b4 	addw	r0, pc, #948	; 0x3b4
 8006abe:	4770      	bx	lr
 8006ac0:	f20f 30cc 	addw	r0, pc, #972	; 0x3cc
 8006ac4:	4770      	bx	lr
 8006ac6:	f20f 30d0 	addw	r0, pc, #976	; 0x3d0
 8006aca:	4770      	bx	lr
 8006acc:	f20f 30d0 	addw	r0, pc, #976	; 0x3d0
 8006ad0:	4770      	bx	lr
 8006ad2:	f20f 30dc 	addw	r0, pc, #988	; 0x3dc
 8006ad6:	4770      	bx	lr
 8006ad8:	f20f 30dc 	addw	r0, pc, #988	; 0x3dc
 8006adc:	4770      	bx	lr
 8006ade:	f20f 30e0 	addw	r0, pc, #992	; 0x3e0
 8006ae2:	4770      	bx	lr
 8006ae4:	0b80      	lsrs	r0, r0, #14
 8006ae6:	0380      	lsls	r0, r0, #14
 8006ae8:	f040 0040 	orr.w	r0, r0, #64	; 0x40
 8006aec:	2840      	cmp	r0, #64	; 0x40
 8006aee:	d007      	beq.n	8006b00 <ai_buffer_fmt_name+0xb4>
 8006af0:	4981      	ldr	r1, [pc, #516]	; (8006cf8 <.text_19>)
 8006af2:	4288      	cmp	r0, r1
 8006af4:	d00a      	beq.n	8006b0c <ai_buffer_fmt_name+0xc0>
 8006af6:	4981      	ldr	r1, [pc, #516]	; (8006cfc <.text_20>)
 8006af8:	4288      	cmp	r0, r1
 8006afa:	d004      	beq.n	8006b06 <ai_buffer_fmt_name+0xba>
 8006afc:	a079      	add	r0, pc, #484	; (adr r0, 8006ce4 <.text_14>)
 8006afe:	4770      	bx	lr
 8006b00:	f20f 4074 	addw	r0, pc, #1140	; 0x474
 8006b04:	4770      	bx	lr
 8006b06:	f20f 4088 	addw	r0, pc, #1160	; 0x488
 8006b0a:	4770      	bx	lr
 8006b0c:	f20f 4094 	addw	r0, pc, #1172	; 0x494
 8006b10:	4770      	bx	lr

08006b12 <ai_buffer_fmt_valid>:
 8006b12:	f020 407e 	bic.w	r0, r0, #4261412864	; 0xfe000000
 8006b16:	f1b0 0140 	subs.w	r1, r0, #64	; 0x40
 8006b1a:	d02d      	beq.n	8006b78 <ai_buffer_fmt_valid+0x66>
 8006b1c:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8006b20:	1a89      	subs	r1, r1, r2
 8006b22:	d029      	beq.n	8006b78 <ai_buffer_fmt_valid+0x66>
 8006b24:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006b28:	1a89      	subs	r1, r1, r2
 8006b2a:	d025      	beq.n	8006b78 <ai_buffer_fmt_valid+0x66>
 8006b2c:	1fc9      	subs	r1, r1, #7
 8006b2e:	d023      	beq.n	8006b78 <ai_buffer_fmt_valid+0x66>
 8006b30:	f240 32f9 	movw	r2, #1017	; 0x3f9
 8006b34:	1a89      	subs	r1, r1, r2
 8006b36:	d01f      	beq.n	8006b78 <ai_buffer_fmt_valid+0x66>
 8006b38:	390f      	subs	r1, #15
 8006b3a:	d01d      	beq.n	8006b78 <ai_buffer_fmt_valid+0x66>
 8006b3c:	4a71      	ldr	r2, [pc, #452]	; (8006d04 <.text_22>)
 8006b3e:	1a89      	subs	r1, r1, r2
 8006b40:	d01a      	beq.n	8006b78 <ai_buffer_fmt_valid+0x66>
 8006b42:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006b46:	1a89      	subs	r1, r1, r2
 8006b48:	d016      	beq.n	8006b78 <ai_buffer_fmt_valid+0x66>
 8006b4a:	1fc9      	subs	r1, r1, #7
 8006b4c:	d014      	beq.n	8006b78 <ai_buffer_fmt_valid+0x66>
 8006b4e:	f240 32f9 	movw	r2, #1017	; 0x3f9
 8006b52:	1a89      	subs	r1, r1, r2
 8006b54:	d010      	beq.n	8006b78 <ai_buffer_fmt_valid+0x66>
 8006b56:	390f      	subs	r1, #15
 8006b58:	d00e      	beq.n	8006b78 <ai_buffer_fmt_valid+0x66>
 8006b5a:	4a6b      	ldr	r2, [pc, #428]	; (8006d08 <.text_23>)
 8006b5c:	1a89      	subs	r1, r1, r2
 8006b5e:	bf1f      	itttt	ne
 8006b60:	0b80      	lsrne	r0, r0, #14
 8006b62:	0380      	lslne	r0, r0, #14
 8006b64:	f040 0040 	orrne.w	r0, r0, #64	; 0x40
 8006b68:	2840      	cmpne	r0, #64	; 0x40
 8006b6a:	d005      	beq.n	8006b78 <ai_buffer_fmt_valid+0x66>
 8006b6c:	4b62      	ldr	r3, [pc, #392]	; (8006cf8 <.text_19>)
 8006b6e:	4298      	cmp	r0, r3
 8006b70:	bf1c      	itt	ne
 8006b72:	4b62      	ldrne	r3, [pc, #392]	; (8006cfc <.text_20>)
 8006b74:	4298      	cmpne	r0, r3
 8006b76:	d101      	bne.n	8006b7c <ai_buffer_fmt_valid+0x6a>
 8006b78:	2001      	movs	r0, #1
 8006b7a:	4770      	bx	lr
 8006b7c:	2000      	movs	r0, #0
 8006b7e:	4770      	bx	lr

08006b80 <ai_buffer_fmt_get_formats>:
 8006b80:	4962      	ldr	r1, [pc, #392]	; (8006d0c <.text_24>)
 8006b82:	6001      	str	r1, [r0, #0]
 8006b84:	200c      	movs	r0, #12
 8006b86:	4770      	bx	lr

08006b88 <ai_array_to_buffer_fmt>:
 8006b88:	4601      	mov	r1, r0
 8006b8a:	2040      	movs	r0, #64	; 0x40
 8006b8c:	f3c1 4243 	ubfx	r2, r1, #17, #4
 8006b90:	2a02      	cmp	r2, #2
 8006b92:	d104      	bne.n	8006b9e <ai_array_to_buffer_fmt+0x16>
 8006b94:	485e      	ldr	r0, [pc, #376]	; (8006d10 <.text_25>)
 8006b96:	4008      	ands	r0, r1
 8006b98:	f440 2080 	orr.w	r0, r0, #262144	; 0x40000
 8006b9c:	e037      	b.n	8006c0e <ai_array_to_buffer_fmt+0x86>
 8006b9e:	f021 427e 	bic.w	r2, r1, #4261412864	; 0xfe000000
 8006ba2:	4b55      	ldr	r3, [pc, #340]	; (8006cf8 <.text_19>)
 8006ba4:	1ad2      	subs	r2, r2, r3
 8006ba6:	d02d      	beq.n	8006c04 <ai_array_to_buffer_fmt+0x7c>
 8006ba8:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006bac:	1ad2      	subs	r2, r2, r3
 8006bae:	d01b      	beq.n	8006be8 <ai_array_to_buffer_fmt+0x60>
 8006bb0:	1fd2      	subs	r2, r2, #7
 8006bb2:	d029      	beq.n	8006c08 <ai_array_to_buffer_fmt+0x80>
 8006bb4:	f240 33f9 	movw	r3, #1017	; 0x3f9
 8006bb8:	1ad2      	subs	r2, r2, r3
 8006bba:	d017      	beq.n	8006bec <ai_array_to_buffer_fmt+0x64>
 8006bbc:	3a0f      	subs	r2, #15
 8006bbe:	d025      	beq.n	8006c0c <ai_array_to_buffer_fmt+0x84>
 8006bc0:	4b50      	ldr	r3, [pc, #320]	; (8006d04 <.text_22>)
 8006bc2:	1ad2      	subs	r2, r2, r3
 8006bc4:	d018      	beq.n	8006bf8 <ai_array_to_buffer_fmt+0x70>
 8006bc6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006bca:	1ad2      	subs	r2, r2, r3
 8006bcc:	d010      	beq.n	8006bf0 <ai_array_to_buffer_fmt+0x68>
 8006bce:	1fd2      	subs	r2, r2, #7
 8006bd0:	d014      	beq.n	8006bfc <ai_array_to_buffer_fmt+0x74>
 8006bd2:	f240 33f9 	movw	r3, #1017	; 0x3f9
 8006bd6:	1ad2      	subs	r2, r2, r3
 8006bd8:	d00c      	beq.n	8006bf4 <ai_array_to_buffer_fmt+0x6c>
 8006bda:	3a0f      	subs	r2, #15
 8006bdc:	d010      	beq.n	8006c00 <ai_array_to_buffer_fmt+0x78>
 8006bde:	4b4a      	ldr	r3, [pc, #296]	; (8006d08 <.text_23>)
 8006be0:	1ad2      	subs	r2, r2, r3
 8006be2:	d114      	bne.n	8006c0e <ai_array_to_buffer_fmt+0x86>
 8006be4:	484b      	ldr	r0, [pc, #300]	; (8006d14 <.text_26>)
 8006be6:	e012      	b.n	8006c0e <ai_array_to_buffer_fmt+0x86>
 8006be8:	484b      	ldr	r0, [pc, #300]	; (8006d18 <.text_27>)
 8006bea:	e010      	b.n	8006c0e <ai_array_to_buffer_fmt+0x86>
 8006bec:	484b      	ldr	r0, [pc, #300]	; (8006d1c <.text_28>)
 8006bee:	e00e      	b.n	8006c0e <ai_array_to_buffer_fmt+0x86>
 8006bf0:	484b      	ldr	r0, [pc, #300]	; (8006d20 <.text_29>)
 8006bf2:	e00c      	b.n	8006c0e <ai_array_to_buffer_fmt+0x86>
 8006bf4:	484b      	ldr	r0, [pc, #300]	; (8006d24 <.text_30>)
 8006bf6:	e00a      	b.n	8006c0e <ai_array_to_buffer_fmt+0x86>
 8006bf8:	4840      	ldr	r0, [pc, #256]	; (8006cfc <.text_20>)
 8006bfa:	e008      	b.n	8006c0e <ai_array_to_buffer_fmt+0x86>
 8006bfc:	484a      	ldr	r0, [pc, #296]	; (8006d28 <.text_31>)
 8006bfe:	e006      	b.n	8006c0e <ai_array_to_buffer_fmt+0x86>
 8006c00:	484a      	ldr	r0, [pc, #296]	; (8006d2c <.text_32>)
 8006c02:	e004      	b.n	8006c0e <ai_array_to_buffer_fmt+0x86>
 8006c04:	4618      	mov	r0, r3
 8006c06:	e002      	b.n	8006c0e <ai_array_to_buffer_fmt+0x86>
 8006c08:	4849      	ldr	r0, [pc, #292]	; (8006d30 <.text_33>)
 8006c0a:	e000      	b.n	8006c0e <ai_array_to_buffer_fmt+0x86>
 8006c0c:	4849      	ldr	r0, [pc, #292]	; (8006d34 <.text_34>)
 8006c0e:	004a      	lsls	r2, r1, #1
 8006c10:	bf4c      	ite	mi
 8006c12:	f04f 4280 	movmi.w	r2, #1073741824	; 0x40000000
 8006c16:	2200      	movpl	r2, #0
 8006c18:	4310      	orrs	r0, r2
 8006c1a:	008a      	lsls	r2, r1, #2
 8006c1c:	bf4c      	ite	mi
 8006c1e:	f04f 5200 	movmi.w	r2, #536870912	; 0x20000000
 8006c22:	2200      	movpl	r2, #0
 8006c24:	4310      	orrs	r0, r2
 8006c26:	0109      	lsls	r1, r1, #4
 8006c28:	bf4c      	ite	mi
 8006c2a:	f04f 6100 	movmi.w	r1, #134217728	; 0x8000000
 8006c2e:	2100      	movpl	r1, #0
 8006c30:	4308      	orrs	r0, r1
 8006c32:	4770      	bx	lr

08006c34 <ai_buffer_to_array_fmt>:
 8006c34:	4602      	mov	r2, r0
 8006c36:	f022 407e 	bic.w	r0, r2, #4261412864	; 0xfe000000
 8006c3a:	3840      	subs	r0, #64	; 0x40
 8006c3c:	d022      	beq.n	8006c84 <ai_buffer_to_array_fmt+0x50>
 8006c3e:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 8006c42:	1a40      	subs	r0, r0, r1
 8006c44:	d030      	beq.n	8006ca8 <ai_buffer_to_array_fmt+0x74>
 8006c46:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006c4a:	1a40      	subs	r0, r0, r1
 8006c4c:	d01e      	beq.n	8006c8c <ai_buffer_to_array_fmt+0x58>
 8006c4e:	1fc0      	subs	r0, r0, #7
 8006c50:	d02c      	beq.n	8006cac <ai_buffer_to_array_fmt+0x78>
 8006c52:	f240 31f9 	movw	r1, #1017	; 0x3f9
 8006c56:	1a40      	subs	r0, r0, r1
 8006c58:	d01a      	beq.n	8006c90 <ai_buffer_to_array_fmt+0x5c>
 8006c5a:	380f      	subs	r0, #15
 8006c5c:	d028      	beq.n	8006cb0 <ai_buffer_to_array_fmt+0x7c>
 8006c5e:	4929      	ldr	r1, [pc, #164]	; (8006d04 <.text_22>)
 8006c60:	1a40      	subs	r0, r0, r1
 8006c62:	d01b      	beq.n	8006c9c <ai_buffer_to_array_fmt+0x68>
 8006c64:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006c68:	1a40      	subs	r0, r0, r1
 8006c6a:	d013      	beq.n	8006c94 <ai_buffer_to_array_fmt+0x60>
 8006c6c:	1fc0      	subs	r0, r0, #7
 8006c6e:	d017      	beq.n	8006ca0 <ai_buffer_to_array_fmt+0x6c>
 8006c70:	f240 31f9 	movw	r1, #1017	; 0x3f9
 8006c74:	1a40      	subs	r0, r0, r1
 8006c76:	d00f      	beq.n	8006c98 <ai_buffer_to_array_fmt+0x64>
 8006c78:	380f      	subs	r0, #15
 8006c7a:	d013      	beq.n	8006ca4 <ai_buffer_to_array_fmt+0x70>
 8006c7c:	4922      	ldr	r1, [pc, #136]	; (8006d08 <.text_23>)
 8006c7e:	1a40      	subs	r0, r0, r1
 8006c80:	d002      	beq.n	8006c88 <ai_buffer_to_array_fmt+0x54>
 8006c82:	e017      	b.n	8006cb4 <ai_buffer_to_array_fmt+0x80>
 8006c84:	2040      	movs	r0, #64	; 0x40
 8006c86:	e01f      	b.n	8006cc8 <ai_buffer_to_array_fmt+0x94>
 8006c88:	4822      	ldr	r0, [pc, #136]	; (8006d14 <.text_26>)
 8006c8a:	e01d      	b.n	8006cc8 <ai_buffer_to_array_fmt+0x94>
 8006c8c:	4822      	ldr	r0, [pc, #136]	; (8006d18 <.text_27>)
 8006c8e:	e01b      	b.n	8006cc8 <ai_buffer_to_array_fmt+0x94>
 8006c90:	4822      	ldr	r0, [pc, #136]	; (8006d1c <.text_28>)
 8006c92:	e019      	b.n	8006cc8 <ai_buffer_to_array_fmt+0x94>
 8006c94:	4822      	ldr	r0, [pc, #136]	; (8006d20 <.text_29>)
 8006c96:	e017      	b.n	8006cc8 <ai_buffer_to_array_fmt+0x94>
 8006c98:	4822      	ldr	r0, [pc, #136]	; (8006d24 <.text_30>)
 8006c9a:	e015      	b.n	8006cc8 <ai_buffer_to_array_fmt+0x94>
 8006c9c:	4817      	ldr	r0, [pc, #92]	; (8006cfc <.text_20>)
 8006c9e:	e013      	b.n	8006cc8 <ai_buffer_to_array_fmt+0x94>
 8006ca0:	4821      	ldr	r0, [pc, #132]	; (8006d28 <.text_31>)
 8006ca2:	e011      	b.n	8006cc8 <ai_buffer_to_array_fmt+0x94>
 8006ca4:	4821      	ldr	r0, [pc, #132]	; (8006d2c <.text_32>)
 8006ca6:	e00f      	b.n	8006cc8 <ai_buffer_to_array_fmt+0x94>
 8006ca8:	4813      	ldr	r0, [pc, #76]	; (8006cf8 <.text_19>)
 8006caa:	e00d      	b.n	8006cc8 <ai_buffer_to_array_fmt+0x94>
 8006cac:	4820      	ldr	r0, [pc, #128]	; (8006d30 <.text_33>)
 8006cae:	e00b      	b.n	8006cc8 <ai_buffer_to_array_fmt+0x94>
 8006cb0:	4820      	ldr	r0, [pc, #128]	; (8006d34 <.text_34>)
 8006cb2:	e009      	b.n	8006cc8 <ai_buffer_to_array_fmt+0x94>
 8006cb4:	f3c2 51c0 	ubfx	r1, r2, #23, #1
 8006cb8:	f3c2 000d 	ubfx	r0, r2, #0, #14
 8006cbc:	2900      	cmp	r1, #0
 8006cbe:	bf14      	ite	ne
 8006cc0:	f440 0004 	orrne.w	r0, r0, #8650752	; 0x840000
 8006cc4:	f440 2080 	orreq.w	r0, r0, #262144	; 0x40000
 8006cc8:	0051      	lsls	r1, r2, #1
 8006cca:	bf48      	it	mi
 8006ccc:	f040 4080 	orrmi.w	r0, r0, #1073741824	; 0x40000000
 8006cd0:	0093      	lsls	r3, r2, #2
 8006cd2:	bf48      	it	mi
 8006cd4:	f040 5000 	orrmi.w	r0, r0, #536870912	; 0x20000000
 8006cd8:	0111      	lsls	r1, r2, #4
 8006cda:	bf48      	it	mi
 8006cdc:	f040 6000 	orrmi.w	r0, r0, #134217728	; 0x8000000
 8006ce0:	4770      	bx	lr
	...

08006ce4 <.text_14>:
 8006ce4:	00000000 	.word	0x00000000

08006ce8 <.text_15>:
 8006ce8:	002be80f 	.word	0x002be80f

08006cec <.text_16>:
 8006cec:	003bf7f1 	.word	0x003bf7f1

08006cf0 <.text_17>:
 8006cf0:	00b9fff1 	.word	0x00b9fff1

08006cf4 <.text_18>:
 8006cf4:	004df000 	.word	0x004df000

08006cf8 <.text_19>:
 8006cf8:	00040040 	.word	0x00040040

08006cfc <.text_20>:
 8006cfc:	00840040 	.word	0x00840040

08006d00 <.text_21>:
 8006d00:	0800e364 	.word	0x0800e364

08006d04 <.text_22>:
 8006d04:	007ff7f1 	.word	0x007ff7f1

08006d08 <.text_23>:
 8006d08:	00fe07f1 	.word	0x00fe07f1

08006d0c <.text_24>:
 8006d0c:	0800e3d4 	.word	0x0800e3d4

08006d10 <.text_25>:
 8006d10:	00803fff 	.word	0x00803fff

08006d14 <.text_26>:
 8006d14:	01821040 	.word	0x01821040

08006d18 <.text_27>:
 8006d18:	00040440 	.word	0x00040440

08006d1c <.text_28>:
 8006d1c:	00040840 	.word	0x00040840

08006d20 <.text_29>:
 8006d20:	00840440 	.word	0x00840440

08006d24 <.text_30>:
 8006d24:	00840840 	.word	0x00840840

08006d28 <.text_31>:
 8006d28:	00840447 	.word	0x00840447

08006d2c <.text_32>:
 8006d2c:	0084084f 	.word	0x0084084f

08006d30 <.text_33>:
 8006d30:	00040447 	.word	0x00040447

08006d34 <.text_34>:
 8006d34:	0004084f 	.word	0x0004084f

08006d38 <ai_array_get_byte_size>:
 8006d38:	b909      	cbnz	r1, 8006d3e <ai_array_get_byte_size+0x6>
 8006d3a:	2000      	movs	r0, #0
 8006d3c:	4770      	bx	lr
 8006d3e:	11c2      	asrs	r2, r0, #7
 8006d40:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006d44:	f3c0 3382 	ubfx	r3, r0, #14, #3
 8006d48:	189b      	adds	r3, r3, r2
 8006d4a:	4359      	muls	r1, r3
 8006d4c:	ea4f 4c60 	mov.w	ip, r0, asr #17
 8006d50:	f00c 0c0f 	and.w	ip, ip, #15
 8006d54:	1543      	asrs	r3, r0, #21
 8006d56:	f003 0303 	and.w	r3, r3, #3
 8006d5a:	1dc9      	adds	r1, r1, #7
 8006d5c:	08c9      	lsrs	r1, r1, #3
 8006d5e:	00c9      	lsls	r1, r1, #3
 8006d60:	40d9      	lsrs	r1, r3
 8006d62:	f1bc 0f04 	cmp.w	ip, #4
 8006d66:	d00a      	beq.n	8006d7e <ai_array_get_byte_size+0x46>
 8006d68:	f1bc 0f08 	cmp.w	ip, #8
 8006d6c:	bf02      	ittt	eq
 8006d6e:	f3c0 3082 	ubfxeq	r0, r0, #14, #3
 8006d72:	1882      	addeq	r2, r0, r2
 8006d74:	eb01 2102 	addeq.w	r1, r1, r2, lsl #8
 8006d78:	1dc9      	adds	r1, r1, #7
 8006d7a:	08c8      	lsrs	r0, r1, #3
 8006d7c:	4770      	bx	lr
 8006d7e:	f3c0 3082 	ubfx	r0, r0, #14, #3
 8006d82:	1882      	adds	r2, r0, r2
 8006d84:	eb01 1102 	add.w	r1, r1, r2, lsl #4
 8006d88:	1dc9      	adds	r1, r1, #7
 8006d8a:	08c8      	lsrs	r0, r1, #3
 8006d8c:	4770      	bx	lr

08006d8e <ai_array_get_data_byte_size>:
 8006d8e:	b909      	cbnz	r1, 8006d94 <ai_array_get_data_byte_size+0x6>
 8006d90:	2000      	movs	r0, #0
 8006d92:	4770      	bx	lr
 8006d94:	11c2      	asrs	r2, r0, #7
 8006d96:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006d9a:	f3c0 3382 	ubfx	r3, r0, #14, #3
 8006d9e:	189a      	adds	r2, r3, r2
 8006da0:	4351      	muls	r1, r2
 8006da2:	1540      	asrs	r0, r0, #21
 8006da4:	f000 0003 	and.w	r0, r0, #3
 8006da8:	1dc9      	adds	r1, r1, #7
 8006daa:	08c9      	lsrs	r1, r1, #3
 8006dac:	00c9      	lsls	r1, r1, #3
 8006dae:	40c1      	lsrs	r1, r0
 8006db0:	1dc9      	adds	r1, r1, #7
 8006db2:	08c8      	lsrs	r0, r1, #3
 8006db4:	4770      	bx	lr

08006db6 <ai_array_get_elems_from_size>:
 8006db6:	b909      	cbnz	r1, 8006dbc <ai_array_get_elems_from_size+0x6>
 8006db8:	2000      	movs	r0, #0
 8006dba:	4770      	bx	lr
 8006dbc:	1442      	asrs	r2, r0, #17
 8006dbe:	00c9      	lsls	r1, r1, #3
 8006dc0:	f002 020f 	and.w	r2, r2, #15
 8006dc4:	2a04      	cmp	r2, #4
 8006dc6:	d002      	beq.n	8006dce <ai_array_get_elems_from_size+0x18>
 8006dc8:	2a08      	cmp	r2, #8
 8006dca:	d009      	beq.n	8006de0 <ai_array_get_elems_from_size+0x2a>
 8006dcc:	e010      	b.n	8006df0 <ai_array_get_elems_from_size+0x3a>
 8006dce:	11c3      	asrs	r3, r0, #7
 8006dd0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006dd4:	f3c0 3282 	ubfx	r2, r0, #14, #3
 8006dd8:	18d2      	adds	r2, r2, r3
 8006dda:	eba1 1102 	sub.w	r1, r1, r2, lsl #4
 8006dde:	e007      	b.n	8006df0 <ai_array_get_elems_from_size+0x3a>
 8006de0:	11c2      	asrs	r2, r0, #7
 8006de2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8006de6:	f3c0 3382 	ubfx	r3, r0, #14, #3
 8006dea:	189a      	adds	r2, r3, r2
 8006dec:	eba1 2102 	sub.w	r1, r1, r2, lsl #8
 8006df0:	1542      	asrs	r2, r0, #21
 8006df2:	f002 0203 	and.w	r2, r2, #3
 8006df6:	4091      	lsls	r1, r2
 8006df8:	1dc9      	adds	r1, r1, #7
 8006dfa:	11c3      	asrs	r3, r0, #7
 8006dfc:	08c9      	lsrs	r1, r1, #3
 8006dfe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006e02:	f3c0 3082 	ubfx	r0, r0, #14, #3
 8006e06:	00c9      	lsls	r1, r1, #3
 8006e08:	18c0      	adds	r0, r0, r3
 8006e0a:	fbb1 f0f0 	udiv	r0, r1, r0
 8006e0e:	4770      	bx	lr

08006e10 <.text_38>:
 8006e10:	5f544d46 	.word	0x5f544d46
 8006e14:	454e4f4e 	.word	0x454e4f4e
 8006e18:	00          	.byte	0x00
 8006e19:	00          	.byte	0x00
	...

08006e1c <.text_39>:
 8006e1c:	5f544d46 	.word	0x5f544d46
 8006e20:	414f4c46 	.word	0x414f4c46
 8006e24:	0054      	.short	0x0054
	...

08006e28 <.text_40>:
 8006e28:	5f544d46 	.word	0x5f544d46
 8006e2c:	414f4c46 	.word	0x414f4c46
 8006e30:	00343654 	.word	0x00343654

08006e34 <.text_41>:
 8006e34:	5f544d46 	.word	0x5f544d46
 8006e38:	414f4c46 	.word	0x414f4c46
 8006e3c:	00363154 	.word	0x00363154

08006e40 <.text_42>:
 8006e40:	5f544d46 	.word	0x5f544d46
 8006e44:	00003855 	.word	0x00003855

08006e48 <.text_43>:
 8006e48:	5f544d46 	.word	0x5f544d46
 8006e4c:	00363155 	.word	0x00363155

08006e50 <.text_44>:
 8006e50:	5f544d46 	.word	0x5f544d46
 8006e54:	00323355 	.word	0x00323355

08006e58 <.text_45>:
 8006e58:	5f544d46 	.word	0x5f544d46
 8006e5c:	00343655 	.word	0x00343655

08006e60 <.text_46>:
 8006e60:	5f544d46 	.word	0x5f544d46
 8006e64:	00003455 	.word	0x00003455

08006e68 <.text_47>:
 8006e68:	5f544d46 	.word	0x5f544d46
 8006e6c:	00003853 	.word	0x00003853

08006e70 <.text_48>:
 8006e70:	5f544d46 	.word	0x5f544d46
 8006e74:	00363153 	.word	0x00363153

08006e78 <.text_49>:
 8006e78:	5f544d46 	.word	0x5f544d46
 8006e7c:	00323353 	.word	0x00323353

08006e80 <.text_50>:
 8006e80:	5f544d46 	.word	0x5f544d46
 8006e84:	00343653 	.word	0x00343653

08006e88 <.text_51>:
 8006e88:	5f544d46 	.word	0x5f544d46
 8006e8c:	00003453 	.word	0x00003453

08006e90 <.text_52>:
 8006e90:	5f544d46 	.word	0x5f544d46
 8006e94:	0051      	.short	0x0051
	...

08006e98 <.text_53>:
 8006e98:	5f544d46 	.word	0x5f544d46
 8006e9c:	00003751 	.word	0x00003751

08006ea0 <.text_54>:
 8006ea0:	5f544d46 	.word	0x5f544d46
 8006ea4:	00353151 	.word	0x00353151

08006ea8 <.text_55>:
 8006ea8:	5f544d46 	.word	0x5f544d46
 8006eac:	00313351 	.word	0x00313351

08006eb0 <.text_56>:
 8006eb0:	5f544d46 	.word	0x5f544d46
 8006eb4:	00005155 	.word	0x00005155

08006eb8 <.text_57>:
 8006eb8:	5f544d46 	.word	0x5f544d46
 8006ebc:	00375155 	.word	0x00375155

08006ec0 <.text_58>:
 8006ec0:	5f544d46 	.word	0x5f544d46
 8006ec4:	35315155 	.word	0x35315155
 8006ec8:	00          	.byte	0x00
 8006ec9:	00          	.byte	0x00
	...

08006ecc <.text_59>:
 8006ecc:	5f544d46 	.word	0x5f544d46
 8006ed0:	31335155 	.word	0x31335155
 8006ed4:	00          	.byte	0x00
 8006ed5:	00          	.byte	0x00
	...

08006ed8 <.text_60>:
 8006ed8:	5f544d46 	.word	0x5f544d46
 8006edc:	3454554c 	.word	0x3454554c
 8006ee0:	4f4c465f 	.word	0x4f4c465f
 8006ee4:	00005441 	.word	0x00005441

08006ee8 <.text_61>:
 8006ee8:	5f544d46 	.word	0x5f544d46
 8006eec:	3854554c 	.word	0x3854554c
 8006ef0:	4f4c465f 	.word	0x4f4c465f
 8006ef4:	00005441 	.word	0x00005441

08006ef8 <.text_62>:
 8006ef8:	5f544d46 	.word	0x5f544d46
 8006efc:	3454554c 	.word	0x3454554c
 8006f00:	3531515f 	.word	0x3531515f
 8006f04:	00          	.byte	0x00
 8006f05:	00          	.byte	0x00
	...

08006f08 <.text_63>:
 8006f08:	5f544d46 	.word	0x5f544d46
 8006f0c:	3854554c 	.word	0x3854554c
 8006f10:	3531515f 	.word	0x3531515f
 8006f14:	00          	.byte	0x00
 8006f15:	00          	.byte	0x00
	...

08006f18 <.text_64>:
 8006f18:	5f544d46 	.word	0x5f544d46
 8006f1c:	3454554c 	.word	0x3454554c
 8006f20:	3151555f 	.word	0x3151555f
 8006f24:	0035      	.short	0x0035
	...

08006f28 <.text_65>:
 8006f28:	5f544d46 	.word	0x5f544d46
 8006f2c:	3854554c 	.word	0x3854554c
 8006f30:	3151555f 	.word	0x3151555f
 8006f34:	0035      	.short	0x0035
	...

08006f38 <.text_66>:
 8006f38:	415f4941 	.word	0x415f4941
 8006f3c:	59415252 	.word	0x59415252
 8006f40:	524f465f 	.word	0x524f465f
 8006f44:	5f54414d 	.word	0x5f54414d
 8006f48:	454e4f4e 	.word	0x454e4f4e
 8006f4c:	00          	.byte	0x00
 8006f4d:	00          	.byte	0x00
	...

08006f50 <.text_67>:
 8006f50:	415f4941 	.word	0x415f4941
 8006f54:	59415252 	.word	0x59415252
 8006f58:	524f465f 	.word	0x524f465f
 8006f5c:	5f54414d 	.word	0x5f54414d
 8006f60:	0051      	.short	0x0051
	...

08006f64 <.text_68>:
 8006f64:	415f4941 	.word	0x415f4941
 8006f68:	59415252 	.word	0x59415252
 8006f6c:	524f465f 	.word	0x524f465f
 8006f70:	5f54414d 	.word	0x5f54414d
 8006f74:	00005155 	.word	0x00005155

08006f78 <.text_69>:
 8006f78:	425f4941 	.word	0x425f4941
 8006f7c:	45464655 	.word	0x45464655
 8006f80:	4f465f52 	.word	0x4f465f52
 8006f84:	54414d52 	.word	0x54414d52
 8006f88:	4e4f4e5f 	.word	0x4e4f4e5f
 8006f8c:	0045      	.short	0x0045
	...

08006f90 <.text_70>:
 8006f90:	425f4941 	.word	0x425f4941
 8006f94:	45464655 	.word	0x45464655
 8006f98:	4f465f52 	.word	0x4f465f52
 8006f9c:	54414d52 	.word	0x54414d52
 8006fa0:	0000515f 	.word	0x0000515f

08006fa4 <.text_71>:
 8006fa4:	425f4941 	.word	0x425f4941
 8006fa8:	45464655 	.word	0x45464655
 8006fac:	4f465f52 	.word	0x4f465f52
 8006fb0:	54414d52 	.word	0x54414d52
 8006fb4:	0051555f 	.word	0x0051555f

08006fb8 <ai_math_sqrt>:
 8006fb8:	eef0 0a40 	vmov.f32	s1, s0
 8006fbc:	eef5 0a40 	vcmp.f32	s1, #0.0
 8006fc0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006fc4:	ed9f 0a29 	vldr	s0, [pc, #164]	; 800706c <.text_12>
 8006fc8:	db01      	blt.n	8006fce <ai_math_sqrt+0x16>
 8006fca:	eeb1 0ae0 	vsqrt.f32	s0, s1
 8006fce:	4770      	bx	lr

08006fd0 <ai_math_exp>:
 8006fd0:	f004 bf02 	b.w	800bdd8 <expf>

08006fd4 <ai_math_pow>:
 8006fd4:	f005 b84c 	b.w	800c070 <powf>

08006fd8 <ai_math_tanh>:
 8006fd8:	f004 bcd8 	b.w	800b98c <tanhf>

08006fdc <ai_math_cosh>:
 8006fdc:	f004 be9c 	b.w	800bd18 <coshf>

08006fe0 <ai_math_relu>:
 8006fe0:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8006fe4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006fe8:	bf48      	it	mi
 8006fea:	ed9f 0a20 	vldrmi	s0, [pc, #128]	; 800706c <.text_12>
 8006fee:	4770      	bx	lr

08006ff0 <ai_math_prelu>:
 8006ff0:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8006ff4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006ff8:	bf48      	it	mi
 8006ffa:	ee20 0a20 	vmulmi.f32	s0, s0, s1
 8006ffe:	4770      	bx	lr

08007000 <ai_math_sigmoid>:
 8007000:	b500      	push	{lr}
 8007002:	b081      	sub	sp, #4
 8007004:	eeb1 0a40 	vneg.f32	s0, s0
 8007008:	f004 fee6 	bl	800bdd8 <expf>
 800700c:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8007010:	b001      	add	sp, #4
 8007012:	ee30 0a20 	vadd.f32	s0, s0, s1
 8007016:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 800701a:	ee81 0a00 	vdiv.f32	s0, s2, s0
 800701e:	bd00      	pop	{pc}

08007020 <ai_math_hard_sigmoid>:
 8007020:	eef0 0a40 	vmov.f32	s1, s0
 8007024:	ed9f 1a12 	vldr	s2, [pc, #72]	; 8007070 <.text_13>
 8007028:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 800702c:	ee00 0a81 	vmla.f32	s0, s1, s2
 8007030:	eddf 0a10 	vldr	s1, [pc, #64]	; 8007074 <.text_14>
 8007034:	eeb4 0a60 	vcmp.f32	s0, s1
 8007038:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800703c:	da07      	bge.n	800704e <ai_math_hard_sigmoid+0x2e>
 800703e:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8007042:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007046:	d504      	bpl.n	8007052 <ai_math_hard_sigmoid+0x32>
 8007048:	ed9f 0a08 	vldr	s0, [pc, #32]	; 800706c <.text_12>
 800704c:	4770      	bx	lr
 800704e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8007052:	4770      	bx	lr

08007054 <ai_math_sign>:
 8007054:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8007058:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800705c:	bfcc      	ite	gt
 800705e:	ed9f 0a06 	vldrgt	s0, [pc, #24]	; 8007078 <.text_15>
 8007062:	ed9f 0a06 	vldrle	s0, [pc, #24]	; 800707c <.text_16>
 8007066:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 800706a:	4770      	bx	lr

0800706c <.text_12>:
 800706c:	00000000 	.word	0x00000000

08007070 <.text_13>:
 8007070:	3e4ccccd 	.word	0x3e4ccccd

08007074 <.text_14>:
 8007074:	3f800001 	.word	0x3f800001

08007078 <.text_15>:
 8007078:	00000001 	.word	0x00000001

0800707c <.text_16>:
 800707c:	ffffffff 	.word	0xffffffff

08007080 <ai_div>:
 8007080:	ee80 0a20 	vdiv.f32	s0, s0, s1
 8007084:	4770      	bx	lr

08007086 <ai_floor_div>:
 8007086:	ee80 0a20 	vdiv.f32	s0, s0, s1
 800708a:	f004 baa5 	b.w	800b5d8 <floorf>

0800708e <ai_floor_mod>:
 800708e:	f004 bf1d 	b.w	800becc <fmodf>

08007092 <ai_max>:
 8007092:	eef4 0a40 	vcmp.f32	s1, s0
 8007096:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800709a:	bf58      	it	pl
 800709c:	eeb0 0a60 	vmovpl.f32	s0, s1
 80070a0:	4770      	bx	lr

080070a2 <ai_min>:
 80070a2:	eeb4 0a60 	vcmp.f32	s0, s1
 80070a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80070aa:	bf58      	it	pl
 80070ac:	eeb0 0a60 	vmovpl.f32	s0, s1
 80070b0:	4770      	bx	lr

080070b2 <ai_mul>:
 80070b2:	ee20 0a20 	vmul.f32	s0, s0, s1
 80070b6:	4770      	bx	lr

080070b8 <ai_sub>:
 80070b8:	ee30 0a60 	vsub.f32	s0, s0, s1
 80070bc:	4770      	bx	lr

080070be <ai_sum>:
 80070be:	ee30 0a20 	vadd.f32	s0, s0, s1
 80070c2:	4770      	bx	lr

080070c4 <arm_mat_init_f32>:
 80070c4:	8001      	strh	r1, [r0, #0]
 80070c6:	8042      	strh	r2, [r0, #2]
 80070c8:	6043      	str	r3, [r0, #4]
 80070ca:	4770      	bx	lr

080070cc <__aeabi_memset>:
 80070cc:	b470      	push	{r4, r5, r6}
 80070ce:	0784      	lsls	r4, r0, #30
 80070d0:	d046      	beq.n	8007160 <__aeabi_memset+0x94>
 80070d2:	1e4c      	subs	r4, r1, #1
 80070d4:	2900      	cmp	r1, #0
 80070d6:	d041      	beq.n	800715c <__aeabi_memset+0x90>
 80070d8:	b2d5      	uxtb	r5, r2
 80070da:	4603      	mov	r3, r0
 80070dc:	e002      	b.n	80070e4 <__aeabi_memset+0x18>
 80070de:	1e61      	subs	r1, r4, #1
 80070e0:	b3e4      	cbz	r4, 800715c <__aeabi_memset+0x90>
 80070e2:	460c      	mov	r4, r1
 80070e4:	f803 5b01 	strb.w	r5, [r3], #1
 80070e8:	0799      	lsls	r1, r3, #30
 80070ea:	d1f8      	bne.n	80070de <__aeabi_memset+0x12>
 80070ec:	2c03      	cmp	r4, #3
 80070ee:	d92e      	bls.n	800714e <__aeabi_memset+0x82>
 80070f0:	b2d5      	uxtb	r5, r2
 80070f2:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 80070f6:	2c0f      	cmp	r4, #15
 80070f8:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 80070fc:	d919      	bls.n	8007132 <__aeabi_memset+0x66>
 80070fe:	4626      	mov	r6, r4
 8007100:	f103 0110 	add.w	r1, r3, #16
 8007104:	3e10      	subs	r6, #16
 8007106:	2e0f      	cmp	r6, #15
 8007108:	f841 5c10 	str.w	r5, [r1, #-16]
 800710c:	f841 5c0c 	str.w	r5, [r1, #-12]
 8007110:	f841 5c08 	str.w	r5, [r1, #-8]
 8007114:	f841 5c04 	str.w	r5, [r1, #-4]
 8007118:	f101 0110 	add.w	r1, r1, #16
 800711c:	d8f2      	bhi.n	8007104 <__aeabi_memset+0x38>
 800711e:	f1a4 0110 	sub.w	r1, r4, #16
 8007122:	f021 010f 	bic.w	r1, r1, #15
 8007126:	f004 040f 	and.w	r4, r4, #15
 800712a:	3110      	adds	r1, #16
 800712c:	2c03      	cmp	r4, #3
 800712e:	440b      	add	r3, r1
 8007130:	d90d      	bls.n	800714e <__aeabi_memset+0x82>
 8007132:	461e      	mov	r6, r3
 8007134:	4621      	mov	r1, r4
 8007136:	3904      	subs	r1, #4
 8007138:	2903      	cmp	r1, #3
 800713a:	f846 5b04 	str.w	r5, [r6], #4
 800713e:	d8fa      	bhi.n	8007136 <__aeabi_memset+0x6a>
 8007140:	1f21      	subs	r1, r4, #4
 8007142:	f021 0103 	bic.w	r1, r1, #3
 8007146:	3104      	adds	r1, #4
 8007148:	440b      	add	r3, r1
 800714a:	f004 0403 	and.w	r4, r4, #3
 800714e:	b12c      	cbz	r4, 800715c <__aeabi_memset+0x90>
 8007150:	b2d2      	uxtb	r2, r2
 8007152:	441c      	add	r4, r3
 8007154:	f803 2b01 	strb.w	r2, [r3], #1
 8007158:	42a3      	cmp	r3, r4
 800715a:	d1fb      	bne.n	8007154 <__aeabi_memset+0x88>
 800715c:	bc70      	pop	{r4, r5, r6}
 800715e:	4770      	bx	lr
 8007160:	460c      	mov	r4, r1
 8007162:	4603      	mov	r3, r0
 8007164:	e7c2      	b.n	80070ec <__aeabi_memset+0x20>
	...

08007168 <__aeabi_drsub>:
 8007168:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800716c:	e002      	b.n	8007174 <__adddf3>
 800716e:	bf00      	nop

08007170 <__aeabi_dsub>:
 8007170:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08007174 <__adddf3>:
 8007174:	b530      	push	{r4, r5, lr}
 8007176:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800717a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800717e:	ea94 0f05 	teq	r4, r5
 8007182:	bf08      	it	eq
 8007184:	ea90 0f02 	teqeq	r0, r2
 8007188:	bf1f      	itttt	ne
 800718a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800718e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8007192:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8007196:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800719a:	f000 80e2 	beq.w	8007362 <__adddf3+0x1ee>
 800719e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80071a2:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80071a6:	bfb8      	it	lt
 80071a8:	426d      	neglt	r5, r5
 80071aa:	dd0c      	ble.n	80071c6 <__adddf3+0x52>
 80071ac:	442c      	add	r4, r5
 80071ae:	ea80 0202 	eor.w	r2, r0, r2
 80071b2:	ea81 0303 	eor.w	r3, r1, r3
 80071b6:	ea82 0000 	eor.w	r0, r2, r0
 80071ba:	ea83 0101 	eor.w	r1, r3, r1
 80071be:	ea80 0202 	eor.w	r2, r0, r2
 80071c2:	ea81 0303 	eor.w	r3, r1, r3
 80071c6:	2d36      	cmp	r5, #54	; 0x36
 80071c8:	bf88      	it	hi
 80071ca:	bd30      	pophi	{r4, r5, pc}
 80071cc:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80071d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80071d4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80071d8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80071dc:	d002      	beq.n	80071e4 <__adddf3+0x70>
 80071de:	4240      	negs	r0, r0
 80071e0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80071e4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80071e8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80071ec:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80071f0:	d002      	beq.n	80071f8 <__adddf3+0x84>
 80071f2:	4252      	negs	r2, r2
 80071f4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80071f8:	ea94 0f05 	teq	r4, r5
 80071fc:	f000 80a7 	beq.w	800734e <__adddf3+0x1da>
 8007200:	f1a4 0401 	sub.w	r4, r4, #1
 8007204:	f1d5 0e20 	rsbs	lr, r5, #32
 8007208:	db0d      	blt.n	8007226 <__adddf3+0xb2>
 800720a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800720e:	fa22 f205 	lsr.w	r2, r2, r5
 8007212:	1880      	adds	r0, r0, r2
 8007214:	f141 0100 	adc.w	r1, r1, #0
 8007218:	fa03 f20e 	lsl.w	r2, r3, lr
 800721c:	1880      	adds	r0, r0, r2
 800721e:	fa43 f305 	asr.w	r3, r3, r5
 8007222:	4159      	adcs	r1, r3
 8007224:	e00e      	b.n	8007244 <__adddf3+0xd0>
 8007226:	f1a5 0520 	sub.w	r5, r5, #32
 800722a:	f10e 0e20 	add.w	lr, lr, #32
 800722e:	2a01      	cmp	r2, #1
 8007230:	fa03 fc0e 	lsl.w	ip, r3, lr
 8007234:	bf28      	it	cs
 8007236:	f04c 0c02 	orrcs.w	ip, ip, #2
 800723a:	fa43 f305 	asr.w	r3, r3, r5
 800723e:	18c0      	adds	r0, r0, r3
 8007240:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8007244:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8007248:	d507      	bpl.n	800725a <__adddf3+0xe6>
 800724a:	f04f 0e00 	mov.w	lr, #0
 800724e:	f1dc 0c00 	rsbs	ip, ip, #0
 8007252:	eb7e 0000 	sbcs.w	r0, lr, r0
 8007256:	eb6e 0101 	sbc.w	r1, lr, r1
 800725a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800725e:	d31b      	bcc.n	8007298 <__adddf3+0x124>
 8007260:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8007264:	d30c      	bcc.n	8007280 <__adddf3+0x10c>
 8007266:	0849      	lsrs	r1, r1, #1
 8007268:	ea5f 0030 	movs.w	r0, r0, rrx
 800726c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8007270:	f104 0401 	add.w	r4, r4, #1
 8007274:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8007278:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800727c:	f080 809a 	bcs.w	80073b4 <__adddf3+0x240>
 8007280:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8007284:	bf08      	it	eq
 8007286:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800728a:	f150 0000 	adcs.w	r0, r0, #0
 800728e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8007292:	ea41 0105 	orr.w	r1, r1, r5
 8007296:	bd30      	pop	{r4, r5, pc}
 8007298:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800729c:	4140      	adcs	r0, r0
 800729e:	eb41 0101 	adc.w	r1, r1, r1
 80072a2:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80072a6:	f1a4 0401 	sub.w	r4, r4, #1
 80072aa:	d1e9      	bne.n	8007280 <__adddf3+0x10c>
 80072ac:	f091 0f00 	teq	r1, #0
 80072b0:	bf04      	itt	eq
 80072b2:	4601      	moveq	r1, r0
 80072b4:	2000      	moveq	r0, #0
 80072b6:	fab1 f381 	clz	r3, r1
 80072ba:	bf08      	it	eq
 80072bc:	3320      	addeq	r3, #32
 80072be:	f1a3 030b 	sub.w	r3, r3, #11
 80072c2:	f1b3 0220 	subs.w	r2, r3, #32
 80072c6:	da0c      	bge.n	80072e2 <__adddf3+0x16e>
 80072c8:	320c      	adds	r2, #12
 80072ca:	dd08      	ble.n	80072de <__adddf3+0x16a>
 80072cc:	f102 0c14 	add.w	ip, r2, #20
 80072d0:	f1c2 020c 	rsb	r2, r2, #12
 80072d4:	fa01 f00c 	lsl.w	r0, r1, ip
 80072d8:	fa21 f102 	lsr.w	r1, r1, r2
 80072dc:	e00c      	b.n	80072f8 <__adddf3+0x184>
 80072de:	f102 0214 	add.w	r2, r2, #20
 80072e2:	bfd8      	it	le
 80072e4:	f1c2 0c20 	rsble	ip, r2, #32
 80072e8:	fa01 f102 	lsl.w	r1, r1, r2
 80072ec:	fa20 fc0c 	lsr.w	ip, r0, ip
 80072f0:	bfdc      	itt	le
 80072f2:	ea41 010c 	orrle.w	r1, r1, ip
 80072f6:	4090      	lslle	r0, r2
 80072f8:	1ae4      	subs	r4, r4, r3
 80072fa:	bfa2      	ittt	ge
 80072fc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8007300:	4329      	orrge	r1, r5
 8007302:	bd30      	popge	{r4, r5, pc}
 8007304:	ea6f 0404 	mvn.w	r4, r4
 8007308:	3c1f      	subs	r4, #31
 800730a:	da1c      	bge.n	8007346 <__adddf3+0x1d2>
 800730c:	340c      	adds	r4, #12
 800730e:	dc0e      	bgt.n	800732e <__adddf3+0x1ba>
 8007310:	f104 0414 	add.w	r4, r4, #20
 8007314:	f1c4 0220 	rsb	r2, r4, #32
 8007318:	fa20 f004 	lsr.w	r0, r0, r4
 800731c:	fa01 f302 	lsl.w	r3, r1, r2
 8007320:	ea40 0003 	orr.w	r0, r0, r3
 8007324:	fa21 f304 	lsr.w	r3, r1, r4
 8007328:	ea45 0103 	orr.w	r1, r5, r3
 800732c:	bd30      	pop	{r4, r5, pc}
 800732e:	f1c4 040c 	rsb	r4, r4, #12
 8007332:	f1c4 0220 	rsb	r2, r4, #32
 8007336:	fa20 f002 	lsr.w	r0, r0, r2
 800733a:	fa01 f304 	lsl.w	r3, r1, r4
 800733e:	ea40 0003 	orr.w	r0, r0, r3
 8007342:	4629      	mov	r1, r5
 8007344:	bd30      	pop	{r4, r5, pc}
 8007346:	fa21 f004 	lsr.w	r0, r1, r4
 800734a:	4629      	mov	r1, r5
 800734c:	bd30      	pop	{r4, r5, pc}
 800734e:	f094 0f00 	teq	r4, #0
 8007352:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8007356:	bf06      	itte	eq
 8007358:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800735c:	3401      	addeq	r4, #1
 800735e:	3d01      	subne	r5, #1
 8007360:	e74e      	b.n	8007200 <__adddf3+0x8c>
 8007362:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8007366:	bf18      	it	ne
 8007368:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800736c:	d029      	beq.n	80073c2 <__adddf3+0x24e>
 800736e:	ea94 0f05 	teq	r4, r5
 8007372:	bf08      	it	eq
 8007374:	ea90 0f02 	teqeq	r0, r2
 8007378:	d005      	beq.n	8007386 <__adddf3+0x212>
 800737a:	ea54 0c00 	orrs.w	ip, r4, r0
 800737e:	bf04      	itt	eq
 8007380:	4619      	moveq	r1, r3
 8007382:	4610      	moveq	r0, r2
 8007384:	bd30      	pop	{r4, r5, pc}
 8007386:	ea91 0f03 	teq	r1, r3
 800738a:	bf1e      	ittt	ne
 800738c:	2100      	movne	r1, #0
 800738e:	2000      	movne	r0, #0
 8007390:	bd30      	popne	{r4, r5, pc}
 8007392:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8007396:	d105      	bne.n	80073a4 <__adddf3+0x230>
 8007398:	0040      	lsls	r0, r0, #1
 800739a:	4149      	adcs	r1, r1
 800739c:	bf28      	it	cs
 800739e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80073a2:	bd30      	pop	{r4, r5, pc}
 80073a4:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80073a8:	bf3c      	itt	cc
 80073aa:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80073ae:	bd30      	popcc	{r4, r5, pc}
 80073b0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80073b4:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80073b8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80073bc:	f04f 0000 	mov.w	r0, #0
 80073c0:	bd30      	pop	{r4, r5, pc}
 80073c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80073c6:	bf1a      	itte	ne
 80073c8:	4619      	movne	r1, r3
 80073ca:	4610      	movne	r0, r2
 80073cc:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80073d0:	bf1c      	itt	ne
 80073d2:	460b      	movne	r3, r1
 80073d4:	4602      	movne	r2, r0
 80073d6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80073da:	bf06      	itte	eq
 80073dc:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80073e0:	ea91 0f03 	teqeq	r1, r3
 80073e4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80073e8:	bd30      	pop	{r4, r5, pc}
 80073ea:	bf00      	nop

080073ec <__aeabi_ui2d>:
 80073ec:	f090 0f00 	teq	r0, #0
 80073f0:	bf04      	itt	eq
 80073f2:	2100      	moveq	r1, #0
 80073f4:	4770      	bxeq	lr
 80073f6:	b530      	push	{r4, r5, lr}
 80073f8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80073fc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8007400:	f04f 0500 	mov.w	r5, #0
 8007404:	f04f 0100 	mov.w	r1, #0
 8007408:	e750      	b.n	80072ac <__adddf3+0x138>
 800740a:	bf00      	nop

0800740c <__aeabi_i2d>:
 800740c:	f090 0f00 	teq	r0, #0
 8007410:	bf04      	itt	eq
 8007412:	2100      	moveq	r1, #0
 8007414:	4770      	bxeq	lr
 8007416:	b530      	push	{r4, r5, lr}
 8007418:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800741c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8007420:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8007424:	bf48      	it	mi
 8007426:	4240      	negmi	r0, r0
 8007428:	f04f 0100 	mov.w	r1, #0
 800742c:	e73e      	b.n	80072ac <__adddf3+0x138>
 800742e:	bf00      	nop

08007430 <__aeabi_f2d>:
 8007430:	0042      	lsls	r2, r0, #1
 8007432:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8007436:	ea4f 0131 	mov.w	r1, r1, rrx
 800743a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800743e:	bf1f      	itttt	ne
 8007440:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8007444:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8007448:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800744c:	4770      	bxne	lr
 800744e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8007452:	bf08      	it	eq
 8007454:	4770      	bxeq	lr
 8007456:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800745a:	bf04      	itt	eq
 800745c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8007460:	4770      	bxeq	lr
 8007462:	b530      	push	{r4, r5, lr}
 8007464:	f44f 7460 	mov.w	r4, #896	; 0x380
 8007468:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800746c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8007470:	e71c      	b.n	80072ac <__adddf3+0x138>
 8007472:	bf00      	nop

08007474 <__aeabi_ul2d>:
 8007474:	ea50 0201 	orrs.w	r2, r0, r1
 8007478:	bf08      	it	eq
 800747a:	4770      	bxeq	lr
 800747c:	b530      	push	{r4, r5, lr}
 800747e:	f04f 0500 	mov.w	r5, #0
 8007482:	e00a      	b.n	800749a <__aeabi_l2d+0x16>

08007484 <__aeabi_l2d>:
 8007484:	ea50 0201 	orrs.w	r2, r0, r1
 8007488:	bf08      	it	eq
 800748a:	4770      	bxeq	lr
 800748c:	b530      	push	{r4, r5, lr}
 800748e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8007492:	d502      	bpl.n	800749a <__aeabi_l2d+0x16>
 8007494:	4240      	negs	r0, r0
 8007496:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800749a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800749e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80074a2:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80074a6:	f43f aed8 	beq.w	800725a <__adddf3+0xe6>
 80074aa:	f04f 0203 	mov.w	r2, #3
 80074ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80074b2:	bf18      	it	ne
 80074b4:	3203      	addne	r2, #3
 80074b6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80074ba:	bf18      	it	ne
 80074bc:	3203      	addne	r2, #3
 80074be:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80074c2:	f1c2 0320 	rsb	r3, r2, #32
 80074c6:	fa00 fc03 	lsl.w	ip, r0, r3
 80074ca:	fa20 f002 	lsr.w	r0, r0, r2
 80074ce:	fa01 fe03 	lsl.w	lr, r1, r3
 80074d2:	ea40 000e 	orr.w	r0, r0, lr
 80074d6:	fa21 f102 	lsr.w	r1, r1, r2
 80074da:	4414      	add	r4, r2
 80074dc:	e6bd      	b.n	800725a <__adddf3+0xe6>
 80074de:	bf00      	nop

080074e0 <__aeabi_dmul>:
 80074e0:	b570      	push	{r4, r5, r6, lr}
 80074e2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80074e6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80074ea:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80074ee:	bf1d      	ittte	ne
 80074f0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80074f4:	ea94 0f0c 	teqne	r4, ip
 80074f8:	ea95 0f0c 	teqne	r5, ip
 80074fc:	f000 f8de 	bleq	80076bc <__aeabi_dmul+0x1dc>
 8007500:	442c      	add	r4, r5
 8007502:	ea81 0603 	eor.w	r6, r1, r3
 8007506:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800750a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800750e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8007512:	bf18      	it	ne
 8007514:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8007518:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800751c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007520:	d038      	beq.n	8007594 <__aeabi_dmul+0xb4>
 8007522:	fba0 ce02 	umull	ip, lr, r0, r2
 8007526:	f04f 0500 	mov.w	r5, #0
 800752a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800752e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8007532:	fbe0 e503 	umlal	lr, r5, r0, r3
 8007536:	f04f 0600 	mov.w	r6, #0
 800753a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800753e:	f09c 0f00 	teq	ip, #0
 8007542:	bf18      	it	ne
 8007544:	f04e 0e01 	orrne.w	lr, lr, #1
 8007548:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800754c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8007550:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8007554:	d204      	bcs.n	8007560 <__aeabi_dmul+0x80>
 8007556:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800755a:	416d      	adcs	r5, r5
 800755c:	eb46 0606 	adc.w	r6, r6, r6
 8007560:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8007564:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8007568:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800756c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8007570:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8007574:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8007578:	bf88      	it	hi
 800757a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800757e:	d81e      	bhi.n	80075be <__aeabi_dmul+0xde>
 8007580:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8007584:	bf08      	it	eq
 8007586:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800758a:	f150 0000 	adcs.w	r0, r0, #0
 800758e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8007592:	bd70      	pop	{r4, r5, r6, pc}
 8007594:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8007598:	ea46 0101 	orr.w	r1, r6, r1
 800759c:	ea40 0002 	orr.w	r0, r0, r2
 80075a0:	ea81 0103 	eor.w	r1, r1, r3
 80075a4:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80075a8:	bfc2      	ittt	gt
 80075aa:	ebd4 050c 	rsbsgt	r5, r4, ip
 80075ae:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80075b2:	bd70      	popgt	{r4, r5, r6, pc}
 80075b4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80075b8:	f04f 0e00 	mov.w	lr, #0
 80075bc:	3c01      	subs	r4, #1
 80075be:	f300 80ab 	bgt.w	8007718 <__aeabi_dmul+0x238>
 80075c2:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80075c6:	bfde      	ittt	le
 80075c8:	2000      	movle	r0, #0
 80075ca:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80075ce:	bd70      	pople	{r4, r5, r6, pc}
 80075d0:	f1c4 0400 	rsb	r4, r4, #0
 80075d4:	3c20      	subs	r4, #32
 80075d6:	da35      	bge.n	8007644 <__aeabi_dmul+0x164>
 80075d8:	340c      	adds	r4, #12
 80075da:	dc1b      	bgt.n	8007614 <__aeabi_dmul+0x134>
 80075dc:	f104 0414 	add.w	r4, r4, #20
 80075e0:	f1c4 0520 	rsb	r5, r4, #32
 80075e4:	fa00 f305 	lsl.w	r3, r0, r5
 80075e8:	fa20 f004 	lsr.w	r0, r0, r4
 80075ec:	fa01 f205 	lsl.w	r2, r1, r5
 80075f0:	ea40 0002 	orr.w	r0, r0, r2
 80075f4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80075f8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80075fc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8007600:	fa21 f604 	lsr.w	r6, r1, r4
 8007604:	eb42 0106 	adc.w	r1, r2, r6
 8007608:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800760c:	bf08      	it	eq
 800760e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8007612:	bd70      	pop	{r4, r5, r6, pc}
 8007614:	f1c4 040c 	rsb	r4, r4, #12
 8007618:	f1c4 0520 	rsb	r5, r4, #32
 800761c:	fa00 f304 	lsl.w	r3, r0, r4
 8007620:	fa20 f005 	lsr.w	r0, r0, r5
 8007624:	fa01 f204 	lsl.w	r2, r1, r4
 8007628:	ea40 0002 	orr.w	r0, r0, r2
 800762c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8007630:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8007634:	f141 0100 	adc.w	r1, r1, #0
 8007638:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800763c:	bf08      	it	eq
 800763e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8007642:	bd70      	pop	{r4, r5, r6, pc}
 8007644:	f1c4 0520 	rsb	r5, r4, #32
 8007648:	fa00 f205 	lsl.w	r2, r0, r5
 800764c:	ea4e 0e02 	orr.w	lr, lr, r2
 8007650:	fa20 f304 	lsr.w	r3, r0, r4
 8007654:	fa01 f205 	lsl.w	r2, r1, r5
 8007658:	ea43 0302 	orr.w	r3, r3, r2
 800765c:	fa21 f004 	lsr.w	r0, r1, r4
 8007660:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8007664:	fa21 f204 	lsr.w	r2, r1, r4
 8007668:	ea20 0002 	bic.w	r0, r0, r2
 800766c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8007670:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8007674:	bf08      	it	eq
 8007676:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800767a:	bd70      	pop	{r4, r5, r6, pc}
 800767c:	f094 0f00 	teq	r4, #0
 8007680:	d10f      	bne.n	80076a2 <__aeabi_dmul+0x1c2>
 8007682:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8007686:	0040      	lsls	r0, r0, #1
 8007688:	eb41 0101 	adc.w	r1, r1, r1
 800768c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8007690:	bf08      	it	eq
 8007692:	3c01      	subeq	r4, #1
 8007694:	d0f7      	beq.n	8007686 <__aeabi_dmul+0x1a6>
 8007696:	ea41 0106 	orr.w	r1, r1, r6
 800769a:	f095 0f00 	teq	r5, #0
 800769e:	bf18      	it	ne
 80076a0:	4770      	bxne	lr
 80076a2:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80076a6:	0052      	lsls	r2, r2, #1
 80076a8:	eb43 0303 	adc.w	r3, r3, r3
 80076ac:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80076b0:	bf08      	it	eq
 80076b2:	3d01      	subeq	r5, #1
 80076b4:	d0f7      	beq.n	80076a6 <__aeabi_dmul+0x1c6>
 80076b6:	ea43 0306 	orr.w	r3, r3, r6
 80076ba:	4770      	bx	lr
 80076bc:	ea94 0f0c 	teq	r4, ip
 80076c0:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80076c4:	bf18      	it	ne
 80076c6:	ea95 0f0c 	teqne	r5, ip
 80076ca:	d00c      	beq.n	80076e6 <__aeabi_dmul+0x206>
 80076cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80076d0:	bf18      	it	ne
 80076d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80076d6:	d1d1      	bne.n	800767c <__aeabi_dmul+0x19c>
 80076d8:	ea81 0103 	eor.w	r1, r1, r3
 80076dc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80076e0:	f04f 0000 	mov.w	r0, #0
 80076e4:	bd70      	pop	{r4, r5, r6, pc}
 80076e6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80076ea:	bf06      	itte	eq
 80076ec:	4610      	moveq	r0, r2
 80076ee:	4619      	moveq	r1, r3
 80076f0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80076f4:	d019      	beq.n	800772a <__aeabi_dmul+0x24a>
 80076f6:	ea94 0f0c 	teq	r4, ip
 80076fa:	d102      	bne.n	8007702 <__aeabi_dmul+0x222>
 80076fc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8007700:	d113      	bne.n	800772a <__aeabi_dmul+0x24a>
 8007702:	ea95 0f0c 	teq	r5, ip
 8007706:	d105      	bne.n	8007714 <__aeabi_dmul+0x234>
 8007708:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800770c:	bf1c      	itt	ne
 800770e:	4610      	movne	r0, r2
 8007710:	4619      	movne	r1, r3
 8007712:	d10a      	bne.n	800772a <__aeabi_dmul+0x24a>
 8007714:	ea81 0103 	eor.w	r1, r1, r3
 8007718:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800771c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8007720:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007724:	f04f 0000 	mov.w	r0, #0
 8007728:	bd70      	pop	{r4, r5, r6, pc}
 800772a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800772e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8007732:	bd70      	pop	{r4, r5, r6, pc}

08007734 <__aeabi_ddiv>:
 8007734:	b570      	push	{r4, r5, r6, lr}
 8007736:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800773a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800773e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8007742:	bf1d      	ittte	ne
 8007744:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8007748:	ea94 0f0c 	teqne	r4, ip
 800774c:	ea95 0f0c 	teqne	r5, ip
 8007750:	f000 f8a7 	bleq	80078a2 <__aeabi_ddiv+0x16e>
 8007754:	eba4 0405 	sub.w	r4, r4, r5
 8007758:	ea81 0e03 	eor.w	lr, r1, r3
 800775c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8007760:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8007764:	f000 8088 	beq.w	8007878 <__aeabi_ddiv+0x144>
 8007768:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800776c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8007770:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8007774:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8007778:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800777c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8007780:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8007784:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8007788:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800778c:	429d      	cmp	r5, r3
 800778e:	bf08      	it	eq
 8007790:	4296      	cmpeq	r6, r2
 8007792:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8007796:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800779a:	d202      	bcs.n	80077a2 <__aeabi_ddiv+0x6e>
 800779c:	085b      	lsrs	r3, r3, #1
 800779e:	ea4f 0232 	mov.w	r2, r2, rrx
 80077a2:	1ab6      	subs	r6, r6, r2
 80077a4:	eb65 0503 	sbc.w	r5, r5, r3
 80077a8:	085b      	lsrs	r3, r3, #1
 80077aa:	ea4f 0232 	mov.w	r2, r2, rrx
 80077ae:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80077b2:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80077b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80077ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80077be:	bf22      	ittt	cs
 80077c0:	1ab6      	subcs	r6, r6, r2
 80077c2:	4675      	movcs	r5, lr
 80077c4:	ea40 000c 	orrcs.w	r0, r0, ip
 80077c8:	085b      	lsrs	r3, r3, #1
 80077ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80077ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80077d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80077d6:	bf22      	ittt	cs
 80077d8:	1ab6      	subcs	r6, r6, r2
 80077da:	4675      	movcs	r5, lr
 80077dc:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80077e0:	085b      	lsrs	r3, r3, #1
 80077e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80077e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80077ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80077ee:	bf22      	ittt	cs
 80077f0:	1ab6      	subcs	r6, r6, r2
 80077f2:	4675      	movcs	r5, lr
 80077f4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80077f8:	085b      	lsrs	r3, r3, #1
 80077fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80077fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8007802:	eb75 0e03 	sbcs.w	lr, r5, r3
 8007806:	bf22      	ittt	cs
 8007808:	1ab6      	subcs	r6, r6, r2
 800780a:	4675      	movcs	r5, lr
 800780c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8007810:	ea55 0e06 	orrs.w	lr, r5, r6
 8007814:	d018      	beq.n	8007848 <__aeabi_ddiv+0x114>
 8007816:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800781a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800781e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8007822:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8007826:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800782a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800782e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8007832:	d1c0      	bne.n	80077b6 <__aeabi_ddiv+0x82>
 8007834:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8007838:	d10b      	bne.n	8007852 <__aeabi_ddiv+0x11e>
 800783a:	ea41 0100 	orr.w	r1, r1, r0
 800783e:	f04f 0000 	mov.w	r0, #0
 8007842:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8007846:	e7b6      	b.n	80077b6 <__aeabi_ddiv+0x82>
 8007848:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800784c:	bf04      	itt	eq
 800784e:	4301      	orreq	r1, r0
 8007850:	2000      	moveq	r0, #0
 8007852:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8007856:	bf88      	it	hi
 8007858:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800785c:	f63f aeaf 	bhi.w	80075be <__aeabi_dmul+0xde>
 8007860:	ebb5 0c03 	subs.w	ip, r5, r3
 8007864:	bf04      	itt	eq
 8007866:	ebb6 0c02 	subseq.w	ip, r6, r2
 800786a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800786e:	f150 0000 	adcs.w	r0, r0, #0
 8007872:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8007876:	bd70      	pop	{r4, r5, r6, pc}
 8007878:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800787c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8007880:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8007884:	bfc2      	ittt	gt
 8007886:	ebd4 050c 	rsbsgt	r5, r4, ip
 800788a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800788e:	bd70      	popgt	{r4, r5, r6, pc}
 8007890:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8007894:	f04f 0e00 	mov.w	lr, #0
 8007898:	3c01      	subs	r4, #1
 800789a:	e690      	b.n	80075be <__aeabi_dmul+0xde>
 800789c:	ea45 0e06 	orr.w	lr, r5, r6
 80078a0:	e68d      	b.n	80075be <__aeabi_dmul+0xde>
 80078a2:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80078a6:	ea94 0f0c 	teq	r4, ip
 80078aa:	bf08      	it	eq
 80078ac:	ea95 0f0c 	teqeq	r5, ip
 80078b0:	f43f af3b 	beq.w	800772a <__aeabi_dmul+0x24a>
 80078b4:	ea94 0f0c 	teq	r4, ip
 80078b8:	d10a      	bne.n	80078d0 <__aeabi_ddiv+0x19c>
 80078ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80078be:	f47f af34 	bne.w	800772a <__aeabi_dmul+0x24a>
 80078c2:	ea95 0f0c 	teq	r5, ip
 80078c6:	f47f af25 	bne.w	8007714 <__aeabi_dmul+0x234>
 80078ca:	4610      	mov	r0, r2
 80078cc:	4619      	mov	r1, r3
 80078ce:	e72c      	b.n	800772a <__aeabi_dmul+0x24a>
 80078d0:	ea95 0f0c 	teq	r5, ip
 80078d4:	d106      	bne.n	80078e4 <__aeabi_ddiv+0x1b0>
 80078d6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80078da:	f43f aefd 	beq.w	80076d8 <__aeabi_dmul+0x1f8>
 80078de:	4610      	mov	r0, r2
 80078e0:	4619      	mov	r1, r3
 80078e2:	e722      	b.n	800772a <__aeabi_dmul+0x24a>
 80078e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80078e8:	bf18      	it	ne
 80078ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80078ee:	f47f aec5 	bne.w	800767c <__aeabi_dmul+0x19c>
 80078f2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80078f6:	f47f af0d 	bne.w	8007714 <__aeabi_dmul+0x234>
 80078fa:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80078fe:	f47f aeeb 	bne.w	80076d8 <__aeabi_dmul+0x1f8>
 8007902:	e712      	b.n	800772a <__aeabi_dmul+0x24a>

08007904 <__aeabi_d2f>:
 8007904:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8007908:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 800790c:	bf24      	itt	cs
 800790e:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8007912:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8007916:	d90d      	bls.n	8007934 <__aeabi_d2f+0x30>
 8007918:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 800791c:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8007920:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8007924:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8007928:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800792c:	bf08      	it	eq
 800792e:	f020 0001 	biceq.w	r0, r0, #1
 8007932:	4770      	bx	lr
 8007934:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8007938:	d121      	bne.n	800797e <__aeabi_d2f+0x7a>
 800793a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800793e:	bfbc      	itt	lt
 8007940:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8007944:	4770      	bxlt	lr
 8007946:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800794a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800794e:	f1c2 0218 	rsb	r2, r2, #24
 8007952:	f1c2 0c20 	rsb	ip, r2, #32
 8007956:	fa10 f30c 	lsls.w	r3, r0, ip
 800795a:	fa20 f002 	lsr.w	r0, r0, r2
 800795e:	bf18      	it	ne
 8007960:	f040 0001 	orrne.w	r0, r0, #1
 8007964:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8007968:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 800796c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8007970:	ea40 000c 	orr.w	r0, r0, ip
 8007974:	fa23 f302 	lsr.w	r3, r3, r2
 8007978:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800797c:	e7cc      	b.n	8007918 <__aeabi_d2f+0x14>
 800797e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8007982:	d107      	bne.n	8007994 <__aeabi_d2f+0x90>
 8007984:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8007988:	bf1e      	ittt	ne
 800798a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 800798e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8007992:	4770      	bxne	lr
 8007994:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8007998:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800799c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80079a0:	4770      	bx	lr
 80079a2:	bf00      	nop

080079a4 <__aeabi_uldivmod>:
 80079a4:	b953      	cbnz	r3, 80079bc <__aeabi_uldivmod+0x18>
 80079a6:	b94a      	cbnz	r2, 80079bc <__aeabi_uldivmod+0x18>
 80079a8:	2900      	cmp	r1, #0
 80079aa:	bf08      	it	eq
 80079ac:	2800      	cmpeq	r0, #0
 80079ae:	bf1c      	itt	ne
 80079b0:	f04f 31ff 	movne.w	r1, #4294967295
 80079b4:	f04f 30ff 	movne.w	r0, #4294967295
 80079b8:	f000 b972 	b.w	8007ca0 <__aeabi_idiv0>
 80079bc:	f1ad 0c08 	sub.w	ip, sp, #8
 80079c0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80079c4:	f000 f806 	bl	80079d4 <__udivmoddi4>
 80079c8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80079cc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80079d0:	b004      	add	sp, #16
 80079d2:	4770      	bx	lr

080079d4 <__udivmoddi4>:
 80079d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80079d8:	9e08      	ldr	r6, [sp, #32]
 80079da:	4604      	mov	r4, r0
 80079dc:	4688      	mov	r8, r1
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d14b      	bne.n	8007a7a <__udivmoddi4+0xa6>
 80079e2:	428a      	cmp	r2, r1
 80079e4:	4615      	mov	r5, r2
 80079e6:	d967      	bls.n	8007ab8 <__udivmoddi4+0xe4>
 80079e8:	fab2 f282 	clz	r2, r2
 80079ec:	b14a      	cbz	r2, 8007a02 <__udivmoddi4+0x2e>
 80079ee:	f1c2 0720 	rsb	r7, r2, #32
 80079f2:	fa01 f302 	lsl.w	r3, r1, r2
 80079f6:	fa20 f707 	lsr.w	r7, r0, r7
 80079fa:	4095      	lsls	r5, r2
 80079fc:	ea47 0803 	orr.w	r8, r7, r3
 8007a00:	4094      	lsls	r4, r2
 8007a02:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8007a06:	0c23      	lsrs	r3, r4, #16
 8007a08:	fbb8 f7fe 	udiv	r7, r8, lr
 8007a0c:	fa1f fc85 	uxth.w	ip, r5
 8007a10:	fb0e 8817 	mls	r8, lr, r7, r8
 8007a14:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8007a18:	fb07 f10c 	mul.w	r1, r7, ip
 8007a1c:	4299      	cmp	r1, r3
 8007a1e:	d909      	bls.n	8007a34 <__udivmoddi4+0x60>
 8007a20:	18eb      	adds	r3, r5, r3
 8007a22:	f107 30ff 	add.w	r0, r7, #4294967295
 8007a26:	f080 811b 	bcs.w	8007c60 <__udivmoddi4+0x28c>
 8007a2a:	4299      	cmp	r1, r3
 8007a2c:	f240 8118 	bls.w	8007c60 <__udivmoddi4+0x28c>
 8007a30:	3f02      	subs	r7, #2
 8007a32:	442b      	add	r3, r5
 8007a34:	1a5b      	subs	r3, r3, r1
 8007a36:	b2a4      	uxth	r4, r4
 8007a38:	fbb3 f0fe 	udiv	r0, r3, lr
 8007a3c:	fb0e 3310 	mls	r3, lr, r0, r3
 8007a40:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8007a44:	fb00 fc0c 	mul.w	ip, r0, ip
 8007a48:	45a4      	cmp	ip, r4
 8007a4a:	d909      	bls.n	8007a60 <__udivmoddi4+0x8c>
 8007a4c:	192c      	adds	r4, r5, r4
 8007a4e:	f100 33ff 	add.w	r3, r0, #4294967295
 8007a52:	f080 8107 	bcs.w	8007c64 <__udivmoddi4+0x290>
 8007a56:	45a4      	cmp	ip, r4
 8007a58:	f240 8104 	bls.w	8007c64 <__udivmoddi4+0x290>
 8007a5c:	3802      	subs	r0, #2
 8007a5e:	442c      	add	r4, r5
 8007a60:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8007a64:	eba4 040c 	sub.w	r4, r4, ip
 8007a68:	2700      	movs	r7, #0
 8007a6a:	b11e      	cbz	r6, 8007a74 <__udivmoddi4+0xa0>
 8007a6c:	40d4      	lsrs	r4, r2
 8007a6e:	2300      	movs	r3, #0
 8007a70:	e9c6 4300 	strd	r4, r3, [r6]
 8007a74:	4639      	mov	r1, r7
 8007a76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a7a:	428b      	cmp	r3, r1
 8007a7c:	d909      	bls.n	8007a92 <__udivmoddi4+0xbe>
 8007a7e:	2e00      	cmp	r6, #0
 8007a80:	f000 80eb 	beq.w	8007c5a <__udivmoddi4+0x286>
 8007a84:	2700      	movs	r7, #0
 8007a86:	e9c6 0100 	strd	r0, r1, [r6]
 8007a8a:	4638      	mov	r0, r7
 8007a8c:	4639      	mov	r1, r7
 8007a8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a92:	fab3 f783 	clz	r7, r3
 8007a96:	2f00      	cmp	r7, #0
 8007a98:	d147      	bne.n	8007b2a <__udivmoddi4+0x156>
 8007a9a:	428b      	cmp	r3, r1
 8007a9c:	d302      	bcc.n	8007aa4 <__udivmoddi4+0xd0>
 8007a9e:	4282      	cmp	r2, r0
 8007aa0:	f200 80fa 	bhi.w	8007c98 <__udivmoddi4+0x2c4>
 8007aa4:	1a84      	subs	r4, r0, r2
 8007aa6:	eb61 0303 	sbc.w	r3, r1, r3
 8007aaa:	2001      	movs	r0, #1
 8007aac:	4698      	mov	r8, r3
 8007aae:	2e00      	cmp	r6, #0
 8007ab0:	d0e0      	beq.n	8007a74 <__udivmoddi4+0xa0>
 8007ab2:	e9c6 4800 	strd	r4, r8, [r6]
 8007ab6:	e7dd      	b.n	8007a74 <__udivmoddi4+0xa0>
 8007ab8:	b902      	cbnz	r2, 8007abc <__udivmoddi4+0xe8>
 8007aba:	deff      	udf	#255	; 0xff
 8007abc:	fab2 f282 	clz	r2, r2
 8007ac0:	2a00      	cmp	r2, #0
 8007ac2:	f040 808f 	bne.w	8007be4 <__udivmoddi4+0x210>
 8007ac6:	1b49      	subs	r1, r1, r5
 8007ac8:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8007acc:	fa1f f885 	uxth.w	r8, r5
 8007ad0:	2701      	movs	r7, #1
 8007ad2:	fbb1 fcfe 	udiv	ip, r1, lr
 8007ad6:	0c23      	lsrs	r3, r4, #16
 8007ad8:	fb0e 111c 	mls	r1, lr, ip, r1
 8007adc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8007ae0:	fb08 f10c 	mul.w	r1, r8, ip
 8007ae4:	4299      	cmp	r1, r3
 8007ae6:	d907      	bls.n	8007af8 <__udivmoddi4+0x124>
 8007ae8:	18eb      	adds	r3, r5, r3
 8007aea:	f10c 30ff 	add.w	r0, ip, #4294967295
 8007aee:	d202      	bcs.n	8007af6 <__udivmoddi4+0x122>
 8007af0:	4299      	cmp	r1, r3
 8007af2:	f200 80cd 	bhi.w	8007c90 <__udivmoddi4+0x2bc>
 8007af6:	4684      	mov	ip, r0
 8007af8:	1a59      	subs	r1, r3, r1
 8007afa:	b2a3      	uxth	r3, r4
 8007afc:	fbb1 f0fe 	udiv	r0, r1, lr
 8007b00:	fb0e 1410 	mls	r4, lr, r0, r1
 8007b04:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8007b08:	fb08 f800 	mul.w	r8, r8, r0
 8007b0c:	45a0      	cmp	r8, r4
 8007b0e:	d907      	bls.n	8007b20 <__udivmoddi4+0x14c>
 8007b10:	192c      	adds	r4, r5, r4
 8007b12:	f100 33ff 	add.w	r3, r0, #4294967295
 8007b16:	d202      	bcs.n	8007b1e <__udivmoddi4+0x14a>
 8007b18:	45a0      	cmp	r8, r4
 8007b1a:	f200 80b6 	bhi.w	8007c8a <__udivmoddi4+0x2b6>
 8007b1e:	4618      	mov	r0, r3
 8007b20:	eba4 0408 	sub.w	r4, r4, r8
 8007b24:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8007b28:	e79f      	b.n	8007a6a <__udivmoddi4+0x96>
 8007b2a:	f1c7 0c20 	rsb	ip, r7, #32
 8007b2e:	40bb      	lsls	r3, r7
 8007b30:	fa22 fe0c 	lsr.w	lr, r2, ip
 8007b34:	ea4e 0e03 	orr.w	lr, lr, r3
 8007b38:	fa01 f407 	lsl.w	r4, r1, r7
 8007b3c:	fa20 f50c 	lsr.w	r5, r0, ip
 8007b40:	fa21 f30c 	lsr.w	r3, r1, ip
 8007b44:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8007b48:	4325      	orrs	r5, r4
 8007b4a:	fbb3 f9f8 	udiv	r9, r3, r8
 8007b4e:	0c2c      	lsrs	r4, r5, #16
 8007b50:	fb08 3319 	mls	r3, r8, r9, r3
 8007b54:	fa1f fa8e 	uxth.w	sl, lr
 8007b58:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8007b5c:	fb09 f40a 	mul.w	r4, r9, sl
 8007b60:	429c      	cmp	r4, r3
 8007b62:	fa02 f207 	lsl.w	r2, r2, r7
 8007b66:	fa00 f107 	lsl.w	r1, r0, r7
 8007b6a:	d90b      	bls.n	8007b84 <__udivmoddi4+0x1b0>
 8007b6c:	eb1e 0303 	adds.w	r3, lr, r3
 8007b70:	f109 30ff 	add.w	r0, r9, #4294967295
 8007b74:	f080 8087 	bcs.w	8007c86 <__udivmoddi4+0x2b2>
 8007b78:	429c      	cmp	r4, r3
 8007b7a:	f240 8084 	bls.w	8007c86 <__udivmoddi4+0x2b2>
 8007b7e:	f1a9 0902 	sub.w	r9, r9, #2
 8007b82:	4473      	add	r3, lr
 8007b84:	1b1b      	subs	r3, r3, r4
 8007b86:	b2ad      	uxth	r5, r5
 8007b88:	fbb3 f0f8 	udiv	r0, r3, r8
 8007b8c:	fb08 3310 	mls	r3, r8, r0, r3
 8007b90:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8007b94:	fb00 fa0a 	mul.w	sl, r0, sl
 8007b98:	45a2      	cmp	sl, r4
 8007b9a:	d908      	bls.n	8007bae <__udivmoddi4+0x1da>
 8007b9c:	eb1e 0404 	adds.w	r4, lr, r4
 8007ba0:	f100 33ff 	add.w	r3, r0, #4294967295
 8007ba4:	d26b      	bcs.n	8007c7e <__udivmoddi4+0x2aa>
 8007ba6:	45a2      	cmp	sl, r4
 8007ba8:	d969      	bls.n	8007c7e <__udivmoddi4+0x2aa>
 8007baa:	3802      	subs	r0, #2
 8007bac:	4474      	add	r4, lr
 8007bae:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8007bb2:	fba0 8902 	umull	r8, r9, r0, r2
 8007bb6:	eba4 040a 	sub.w	r4, r4, sl
 8007bba:	454c      	cmp	r4, r9
 8007bbc:	46c2      	mov	sl, r8
 8007bbe:	464b      	mov	r3, r9
 8007bc0:	d354      	bcc.n	8007c6c <__udivmoddi4+0x298>
 8007bc2:	d051      	beq.n	8007c68 <__udivmoddi4+0x294>
 8007bc4:	2e00      	cmp	r6, #0
 8007bc6:	d069      	beq.n	8007c9c <__udivmoddi4+0x2c8>
 8007bc8:	ebb1 050a 	subs.w	r5, r1, sl
 8007bcc:	eb64 0403 	sbc.w	r4, r4, r3
 8007bd0:	fa04 fc0c 	lsl.w	ip, r4, ip
 8007bd4:	40fd      	lsrs	r5, r7
 8007bd6:	40fc      	lsrs	r4, r7
 8007bd8:	ea4c 0505 	orr.w	r5, ip, r5
 8007bdc:	e9c6 5400 	strd	r5, r4, [r6]
 8007be0:	2700      	movs	r7, #0
 8007be2:	e747      	b.n	8007a74 <__udivmoddi4+0xa0>
 8007be4:	f1c2 0320 	rsb	r3, r2, #32
 8007be8:	fa20 f703 	lsr.w	r7, r0, r3
 8007bec:	4095      	lsls	r5, r2
 8007bee:	fa01 f002 	lsl.w	r0, r1, r2
 8007bf2:	fa21 f303 	lsr.w	r3, r1, r3
 8007bf6:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8007bfa:	4338      	orrs	r0, r7
 8007bfc:	0c01      	lsrs	r1, r0, #16
 8007bfe:	fbb3 f7fe 	udiv	r7, r3, lr
 8007c02:	fa1f f885 	uxth.w	r8, r5
 8007c06:	fb0e 3317 	mls	r3, lr, r7, r3
 8007c0a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8007c0e:	fb07 f308 	mul.w	r3, r7, r8
 8007c12:	428b      	cmp	r3, r1
 8007c14:	fa04 f402 	lsl.w	r4, r4, r2
 8007c18:	d907      	bls.n	8007c2a <__udivmoddi4+0x256>
 8007c1a:	1869      	adds	r1, r5, r1
 8007c1c:	f107 3cff 	add.w	ip, r7, #4294967295
 8007c20:	d22f      	bcs.n	8007c82 <__udivmoddi4+0x2ae>
 8007c22:	428b      	cmp	r3, r1
 8007c24:	d92d      	bls.n	8007c82 <__udivmoddi4+0x2ae>
 8007c26:	3f02      	subs	r7, #2
 8007c28:	4429      	add	r1, r5
 8007c2a:	1acb      	subs	r3, r1, r3
 8007c2c:	b281      	uxth	r1, r0
 8007c2e:	fbb3 f0fe 	udiv	r0, r3, lr
 8007c32:	fb0e 3310 	mls	r3, lr, r0, r3
 8007c36:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8007c3a:	fb00 f308 	mul.w	r3, r0, r8
 8007c3e:	428b      	cmp	r3, r1
 8007c40:	d907      	bls.n	8007c52 <__udivmoddi4+0x27e>
 8007c42:	1869      	adds	r1, r5, r1
 8007c44:	f100 3cff 	add.w	ip, r0, #4294967295
 8007c48:	d217      	bcs.n	8007c7a <__udivmoddi4+0x2a6>
 8007c4a:	428b      	cmp	r3, r1
 8007c4c:	d915      	bls.n	8007c7a <__udivmoddi4+0x2a6>
 8007c4e:	3802      	subs	r0, #2
 8007c50:	4429      	add	r1, r5
 8007c52:	1ac9      	subs	r1, r1, r3
 8007c54:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8007c58:	e73b      	b.n	8007ad2 <__udivmoddi4+0xfe>
 8007c5a:	4637      	mov	r7, r6
 8007c5c:	4630      	mov	r0, r6
 8007c5e:	e709      	b.n	8007a74 <__udivmoddi4+0xa0>
 8007c60:	4607      	mov	r7, r0
 8007c62:	e6e7      	b.n	8007a34 <__udivmoddi4+0x60>
 8007c64:	4618      	mov	r0, r3
 8007c66:	e6fb      	b.n	8007a60 <__udivmoddi4+0x8c>
 8007c68:	4541      	cmp	r1, r8
 8007c6a:	d2ab      	bcs.n	8007bc4 <__udivmoddi4+0x1f0>
 8007c6c:	ebb8 0a02 	subs.w	sl, r8, r2
 8007c70:	eb69 020e 	sbc.w	r2, r9, lr
 8007c74:	3801      	subs	r0, #1
 8007c76:	4613      	mov	r3, r2
 8007c78:	e7a4      	b.n	8007bc4 <__udivmoddi4+0x1f0>
 8007c7a:	4660      	mov	r0, ip
 8007c7c:	e7e9      	b.n	8007c52 <__udivmoddi4+0x27e>
 8007c7e:	4618      	mov	r0, r3
 8007c80:	e795      	b.n	8007bae <__udivmoddi4+0x1da>
 8007c82:	4667      	mov	r7, ip
 8007c84:	e7d1      	b.n	8007c2a <__udivmoddi4+0x256>
 8007c86:	4681      	mov	r9, r0
 8007c88:	e77c      	b.n	8007b84 <__udivmoddi4+0x1b0>
 8007c8a:	3802      	subs	r0, #2
 8007c8c:	442c      	add	r4, r5
 8007c8e:	e747      	b.n	8007b20 <__udivmoddi4+0x14c>
 8007c90:	f1ac 0c02 	sub.w	ip, ip, #2
 8007c94:	442b      	add	r3, r5
 8007c96:	e72f      	b.n	8007af8 <__udivmoddi4+0x124>
 8007c98:	4638      	mov	r0, r7
 8007c9a:	e708      	b.n	8007aae <__udivmoddi4+0xda>
 8007c9c:	4637      	mov	r7, r6
 8007c9e:	e6e9      	b.n	8007a74 <__udivmoddi4+0xa0>

08007ca0 <__aeabi_idiv0>:
 8007ca0:	4770      	bx	lr
 8007ca2:	bf00      	nop

08007ca4 <ResetTimer>:
#include "CycleCounter.h"

void ResetTimer(){
 8007ca4:	b480      	push	{r7}
 8007ca6:	af00      	add	r7, sp, #0
	DWT_CYCCNT   = (unsigned int *)0xE0001004; //address of the register
 8007ca8:	4b0e      	ldr	r3, [pc, #56]	; (8007ce4 <ResetTimer+0x40>)
 8007caa:	4a0f      	ldr	r2, [pc, #60]	; (8007ce8 <ResetTimer+0x44>)
 8007cac:	601a      	str	r2, [r3, #0]
	DWT_CONTROL  = (unsigned int *)0xE0001000; //address of the register
 8007cae:	4b0f      	ldr	r3, [pc, #60]	; (8007cec <ResetTimer+0x48>)
 8007cb0:	4a0f      	ldr	r2, [pc, #60]	; (8007cf0 <ResetTimer+0x4c>)
 8007cb2:	601a      	str	r2, [r3, #0]
	SCB_DEMCR    = (unsigned int *)0xE000EDFC; //address of the register
 8007cb4:	4b0f      	ldr	r3, [pc, #60]	; (8007cf4 <ResetTimer+0x50>)
 8007cb6:	4a10      	ldr	r2, [pc, #64]	; (8007cf8 <ResetTimer+0x54>)
 8007cb8:	601a      	str	r2, [r3, #0]
	*SCB_DEMCR   = *SCB_DEMCR | 0x01000000;
 8007cba:	4b0e      	ldr	r3, [pc, #56]	; (8007cf4 <ResetTimer+0x50>)
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	681a      	ldr	r2, [r3, #0]
 8007cc0:	4b0c      	ldr	r3, [pc, #48]	; (8007cf4 <ResetTimer+0x50>)
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8007cc8:	601a      	str	r2, [r3, #0]
	*DWT_CYCCNT  = 0; // reset the counter
 8007cca:	4b06      	ldr	r3, [pc, #24]	; (8007ce4 <ResetTimer+0x40>)
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	2200      	movs	r2, #0
 8007cd0:	601a      	str	r2, [r3, #0]
	*DWT_CONTROL = 0; 
 8007cd2:	4b06      	ldr	r3, [pc, #24]	; (8007cec <ResetTimer+0x48>)
 8007cd4:	681b      	ldr	r3, [r3, #0]
 8007cd6:	2200      	movs	r2, #0
 8007cd8:	601a      	str	r2, [r3, #0]
}
 8007cda:	bf00      	nop
 8007cdc:	46bd      	mov	sp, r7
 8007cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce2:	4770      	bx	lr
 8007ce4:	20000e78 	.word	0x20000e78
 8007ce8:	e0001004 	.word	0xe0001004
 8007cec:	20000e7c 	.word	0x20000e7c
 8007cf0:	e0001000 	.word	0xe0001000
 8007cf4:	20000e80 	.word	0x20000e80
 8007cf8:	e000edfc 	.word	0xe000edfc

08007cfc <StartTimer>:

void StartTimer(){
 8007cfc:	b480      	push	{r7}
 8007cfe:	af00      	add	r7, sp, #0
	*DWT_CONTROL = *DWT_CONTROL | 1 ; // enable the counter
 8007d00:	4b06      	ldr	r3, [pc, #24]	; (8007d1c <StartTimer+0x20>)
 8007d02:	681b      	ldr	r3, [r3, #0]
 8007d04:	681a      	ldr	r2, [r3, #0]
 8007d06:	4b05      	ldr	r3, [pc, #20]	; (8007d1c <StartTimer+0x20>)
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	f042 0201 	orr.w	r2, r2, #1
 8007d0e:	601a      	str	r2, [r3, #0]
}
 8007d10:	bf00      	nop
 8007d12:	46bd      	mov	sp, r7
 8007d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d18:	4770      	bx	lr
 8007d1a:	bf00      	nop
 8007d1c:	20000e7c 	.word	0x20000e7c

08007d20 <StopTimer>:

void StopTimer(){
 8007d20:	b480      	push	{r7}
 8007d22:	af00      	add	r7, sp, #0
	*DWT_CONTROL = *DWT_CONTROL & 0 ; // disable the counter    
 8007d24:	4b05      	ldr	r3, [pc, #20]	; (8007d3c <StopTimer+0x1c>)
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	681b      	ldr	r3, [r3, #0]
 8007d2a:	4b04      	ldr	r3, [pc, #16]	; (8007d3c <StopTimer+0x1c>)
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	2200      	movs	r2, #0
 8007d30:	601a      	str	r2, [r3, #0]
}
 8007d32:	bf00      	nop
 8007d34:	46bd      	mov	sp, r7
 8007d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d3a:	4770      	bx	lr
 8007d3c:	20000e7c 	.word	0x20000e7c

08007d40 <getCycles>:

unsigned int getCycles(){
 8007d40:	b480      	push	{r7}
 8007d42:	af00      	add	r7, sp, #0
	return *DWT_CYCCNT;
 8007d44:	4b03      	ldr	r3, [pc, #12]	; (8007d54 <getCycles+0x14>)
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	681b      	ldr	r3, [r3, #0]
}
 8007d4a:	4618      	mov	r0, r3
 8007d4c:	46bd      	mov	sp, r7
 8007d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d52:	4770      	bx	lr
 8007d54:	20000e78 	.word	0x20000e78

08007d58 <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 8007d58:	b480      	push	{r7}
 8007d5a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8007d5c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8007d60:	f3bf 8f6f 	isb	sy
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8007d64:	4b0b      	ldr	r3, [pc, #44]	; (8007d94 <SCB_EnableICache+0x3c>)
 8007d66:	2200      	movs	r2, #0
 8007d68:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8007d6c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8007d70:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8007d74:	4b07      	ldr	r3, [pc, #28]	; (8007d94 <SCB_EnableICache+0x3c>)
 8007d76:	695b      	ldr	r3, [r3, #20]
 8007d78:	4a06      	ldr	r2, [pc, #24]	; (8007d94 <SCB_EnableICache+0x3c>)
 8007d7a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007d7e:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8007d80:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8007d84:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
  #endif
}
 8007d88:	bf00      	nop
 8007d8a:	46bd      	mov	sp, r7
 8007d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d90:	4770      	bx	lr
 8007d92:	bf00      	nop
 8007d94:	e000ed00 	.word	0xe000ed00

08007d98 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 8007d98:	b480      	push	{r7}
 8007d9a:	b085      	sub	sp, #20
 8007d9c:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 8007d9e:	4b1d      	ldr	r3, [pc, #116]	; (8007e14 <SCB_EnableDCache+0x7c>)
 8007da0:	2200      	movs	r2, #0
 8007da2:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8007da6:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8007daa:	4b1a      	ldr	r3, [pc, #104]	; (8007e14 <SCB_EnableDCache+0x7c>)
 8007dac:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8007db0:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	0b5b      	lsrs	r3, r3, #13
 8007db6:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8007dba:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8007dbc:	687b      	ldr	r3, [r7, #4]
 8007dbe:	08db      	lsrs	r3, r3, #3
 8007dc0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007dc4:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	015a      	lsls	r2, r3, #5
 8007dca:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8007dce:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8007dd0:	68ba      	ldr	r2, [r7, #8]
 8007dd2:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8007dd4:	490f      	ldr	r1, [pc, #60]	; (8007e14 <SCB_EnableDCache+0x7c>)
 8007dd6:	4313      	orrs	r3, r2
 8007dd8:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8007ddc:	68bb      	ldr	r3, [r7, #8]
 8007dde:	1e5a      	subs	r2, r3, #1
 8007de0:	60ba      	str	r2, [r7, #8]
 8007de2:	2b00      	cmp	r3, #0
 8007de4:	d1ef      	bne.n	8007dc6 <SCB_EnableDCache+0x2e>
    } while(sets-- != 0U);
 8007de6:	68fb      	ldr	r3, [r7, #12]
 8007de8:	1e5a      	subs	r2, r3, #1
 8007dea:	60fa      	str	r2, [r7, #12]
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d1e5      	bne.n	8007dbc <SCB_EnableDCache+0x24>
 8007df0:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8007df4:	4b07      	ldr	r3, [pc, #28]	; (8007e14 <SCB_EnableDCache+0x7c>)
 8007df6:	695b      	ldr	r3, [r3, #20]
 8007df8:	4a06      	ldr	r2, [pc, #24]	; (8007e14 <SCB_EnableDCache+0x7c>)
 8007dfa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007dfe:	6153      	str	r3, [r2, #20]
 8007e00:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8007e04:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
  #endif
}
 8007e08:	bf00      	nop
 8007e0a:	3714      	adds	r7, #20
 8007e0c:	46bd      	mov	sp, r7
 8007e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e12:	4770      	bx	lr
 8007e14:	e000ed00 	.word	0xe000ed00

08007e18 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007e18:	b580      	push	{r7, lr}
 8007e1a:	f5ad 5d15 	sub.w	sp, sp, #9536	; 0x2540
 8007e1e:	b08e      	sub	sp, #56	; 0x38
 8007e20:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 8007e22:	f7ff ff99 	bl	8007d58 <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 8007e26:	f7ff ffb7 	bl	8007d98 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8007e2a:	f000 fb48 	bl	80084be <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8007e2e:	f000 f94f 	bl	80080d0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8007e32:	f000 fa2f 	bl	8008294 <MX_GPIO_Init>
  MX_USART6_UART_Init();
 8007e36:	f000 f9fd 	bl	8008234 <MX_USART6_UART_Init>
  MX_CRC_Init();
 8007e3a:	f000 f9d9 	bl	80081f0 <MX_CRC_Init>
  MX_X_CUBE_AI_Init();
 8007e3e:	f002 fd53 	bl	800a8e8 <MX_X_CUBE_AI_Init>
  /* USER CODE BEGIN 2 */
  //char buffer[50] = {};
  //sprintf(buffer, "Starting the App\n");
  //HAL_UART_Transmit(&huart6, buffer, strlen(buffer), 1000);

  uint8_t x_data[BUFFER_SIZE] = {};
 8007e42:	f242 1368 	movw	r3, #8552	; 0x2168
 8007e46:	443b      	add	r3, r7
 8007e48:	4618      	mov	r0, r3
 8007e4a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007e4e:	461a      	mov	r2, r3
 8007e50:	2100      	movs	r1, #0
 8007e52:	f003 f815 	bl	800ae80 <memset>
    float output_arr[43] = {};
 8007e56:	f242 03bc 	movw	r3, #8380	; 0x20bc
 8007e5a:	443b      	add	r3, r7
 8007e5c:	4618      	mov	r0, r3
 8007e5e:	23ac      	movs	r3, #172	; 0xac
 8007e60:	461a      	mov	r2, r3
 8007e62:	2100      	movs	r1, #0
 8007e64:	f003 f80c 	bl	800ae80 <memset>
    int array_pos = 0;
 8007e68:	2300      	movs	r3, #0
 8007e6a:	f242 5274 	movw	r2, #9588	; 0x2574
 8007e6e:	443a      	add	r2, r7
 8007e70:	6013      	str	r3, [r2, #0]
    uint8_t byte_received = 0;
 8007e72:	f242 03bb 	movw	r3, #8379	; 0x20bb
 8007e76:	443b      	add	r3, r7
 8007e78:	2200      	movs	r2, #0
 8007e7a:	701a      	strb	r2, [r3, #0]
  {
    /* USER CODE END WHILE */

  //MX_X_CUBE_AI_Process();
    /* USER CODE BEGIN 3 */
	  int uart_status = HAL_UART_Receive(&huart6, &byte_received, sizeof(uint8_t), 100);
 8007e7c:	f242 01bb 	movw	r1, #8379	; 0x20bb
 8007e80:	4439      	add	r1, r7
 8007e82:	2364      	movs	r3, #100	; 0x64
 8007e84:	2201      	movs	r2, #1
 8007e86:	488d      	ldr	r0, [pc, #564]	; (80080bc <main+0x2a4>)
 8007e88:	f001 ffcd 	bl	8009e26 <HAL_UART_Receive>
 8007e8c:	4603      	mov	r3, r0
 8007e8e:	f242 5268 	movw	r2, #9576	; 0x2568
 8007e92:	443a      	add	r2, r7
 8007e94:	6013      	str	r3, [r2, #0]
	  	  if (uart_status == HAL_OK)
 8007e96:	f242 5368 	movw	r3, #9576	; 0x2568
 8007e9a:	443b      	add	r3, r7
 8007e9c:	681b      	ldr	r3, [r3, #0]
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d116      	bne.n	8007ed0 <main+0xb8>
	  	  {
	  	  	x_data[array_pos] = byte_received;
 8007ea2:	f242 03bb 	movw	r3, #8379	; 0x20bb
 8007ea6:	443b      	add	r3, r7
 8007ea8:	7819      	ldrb	r1, [r3, #0]
 8007eaa:	f242 1268 	movw	r2, #8552	; 0x2168
 8007eae:	443a      	add	r2, r7
 8007eb0:	f242 5374 	movw	r3, #9588	; 0x2574
 8007eb4:	443b      	add	r3, r7
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	4413      	add	r3, r2
 8007eba:	460a      	mov	r2, r1
 8007ebc:	701a      	strb	r2, [r3, #0]
	  	  	array_pos++;
 8007ebe:	f242 5374 	movw	r3, #9588	; 0x2574
 8007ec2:	443b      	add	r3, r7
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	3301      	adds	r3, #1
 8007ec8:	f242 5274 	movw	r2, #9588	; 0x2574
 8007ecc:	443a      	add	r2, r7
 8007ece:	6013      	str	r3, [r2, #0]
	  	  }
	  	  if (array_pos == BUFFER_SIZE)
 8007ed0:	f242 5374 	movw	r3, #9588	; 0x2574
 8007ed4:	443b      	add	r3, r7
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007edc:	d1ce      	bne.n	8007e7c <main+0x64>
	  	  {
	  	  	//HAL_Delay(500);
	  	  	//HAL_UART_Transmit(&huart1, x_data, BUFFER_SIZE*sizeof(uint8_t), 2000);
	  	  	array_pos = 0;
 8007ede:	2300      	movs	r3, #0
 8007ee0:	f242 5274 	movw	r2, #9588	; 0x2574
 8007ee4:	443a      	add	r2, r7
 8007ee6:	6013      	str	r3, [r2, #0]

	  	  	// instantiate float array
	  	  	float fArray[BUFFER_SIZE];

	  	  	// step through each element of integer array, and copy into float array as float
	  	  	for (int i = 0; i < BUFFER_SIZE; i++)
 8007ee8:	2300      	movs	r3, #0
 8007eea:	f242 5270 	movw	r2, #9584	; 0x2570
 8007eee:	443a      	add	r2, r7
 8007ef0:	6013      	str	r3, [r2, #0]
 8007ef2:	e026      	b.n	8007f42 <main+0x12a>
	  	  	{
	  	  		fArray[i] = ((float)x_data[i]) / 255;
 8007ef4:	f242 1268 	movw	r2, #8552	; 0x2168
 8007ef8:	443a      	add	r2, r7
 8007efa:	f242 5370 	movw	r3, #9584	; 0x2570
 8007efe:	443b      	add	r3, r7
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	4413      	add	r3, r2
 8007f04:	781b      	ldrb	r3, [r3, #0]
 8007f06:	ee07 3a90 	vmov	s15, r3
 8007f0a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8007f0e:	eddf 6a6c 	vldr	s13, [pc, #432]	; 80080c0 <main+0x2a8>
 8007f12:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8007f16:	4b6b      	ldr	r3, [pc, #428]	; (80080c4 <main+0x2ac>)
 8007f18:	f242 5278 	movw	r2, #9592	; 0x2578
 8007f1c:	443a      	add	r2, r7
 8007f1e:	4413      	add	r3, r2
 8007f20:	f242 5270 	movw	r2, #9584	; 0x2570
 8007f24:	443a      	add	r2, r7
 8007f26:	6812      	ldr	r2, [r2, #0]
 8007f28:	0092      	lsls	r2, r2, #2
 8007f2a:	4413      	add	r3, r2
 8007f2c:	edc3 7a00 	vstr	s15, [r3]
	  	  	for (int i = 0; i < BUFFER_SIZE; i++)
 8007f30:	f242 5370 	movw	r3, #9584	; 0x2570
 8007f34:	443b      	add	r3, r7
 8007f36:	681b      	ldr	r3, [r3, #0]
 8007f38:	3301      	adds	r3, #1
 8007f3a:	f242 5270 	movw	r2, #9584	; 0x2570
 8007f3e:	443a      	add	r2, r7
 8007f40:	6013      	str	r3, [r2, #0]
 8007f42:	f242 5370 	movw	r3, #9584	; 0x2570
 8007f46:	443b      	add	r3, r7
 8007f48:	681b      	ldr	r3, [r3, #0]
 8007f4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007f4e:	dbd1      	blt.n	8007ef4 <main+0xdc>
	  	  	}

	  	  	ai_i8 x_data_ai[4 * BUFFER_SIZE] = {};
 8007f50:	4b5d      	ldr	r3, [pc, #372]	; (80080c8 <main+0x2b0>)
 8007f52:	f242 5278 	movw	r2, #9592	; 0x2578
 8007f56:	443a      	add	r2, r7
 8007f58:	4413      	add	r3, r2
 8007f5a:	4618      	mov	r0, r3
 8007f5c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007f60:	461a      	mov	r2, r3
 8007f62:	2100      	movs	r1, #0
 8007f64:	f002 ff8c 	bl	800ae80 <memset>
	  	  	ai_i8 y_data_ai[4 * 43] = {};
 8007f68:	4b58      	ldr	r3, [pc, #352]	; (80080cc <main+0x2b4>)
 8007f6a:	f242 5278 	movw	r2, #9592	; 0x2578
 8007f6e:	443a      	add	r2, r7
 8007f70:	4413      	add	r3, r2
 8007f72:	4618      	mov	r0, r3
 8007f74:	23ac      	movs	r3, #172	; 0xac
 8007f76:	461a      	mov	r2, r3
 8007f78:	2100      	movs	r1, #0
 8007f7a:	f002 ff81 	bl	800ae80 <memset>
	  	  	uint8_t best_output = 0;
 8007f7e:	f242 03ba 	movw	r3, #8378	; 0x20ba
 8007f82:	443b      	add	r3, r7
 8007f84:	2200      	movs	r2, #0
 8007f86:	701a      	strb	r2, [r3, #0]
	  	  	float accuracy = 0;
 8007f88:	f242 03b4 	movw	r3, #8372	; 0x20b4
 8007f8c:	443b      	add	r3, r7
 8007f8e:	f04f 0200 	mov.w	r2, #0
 8007f92:	601a      	str	r2, [r3, #0]
	  	  	memcpy(x_data_ai, fArray, 4 * BUFFER_SIZE);
 8007f94:	4a4c      	ldr	r2, [pc, #304]	; (80080c8 <main+0x2b0>)
 8007f96:	f242 5378 	movw	r3, #9592	; 0x2578
 8007f9a:	443b      	add	r3, r7
 8007f9c:	441a      	add	r2, r3
 8007f9e:	4b49      	ldr	r3, [pc, #292]	; (80080c4 <main+0x2ac>)
 8007fa0:	f242 5178 	movw	r1, #9592	; 0x2578
 8007fa4:	4439      	add	r1, r7
 8007fa6:	440b      	add	r3, r1
 8007fa8:	4610      	mov	r0, r2
 8007faa:	4619      	mov	r1, r3
 8007fac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007fb0:	461a      	mov	r2, r3
 8007fb2:	f002 ff5a 	bl	800ae6a <memcpy>

	  	  	ResetTimer();
 8007fb6:	f7ff fe75 	bl	8007ca4 <ResetTimer>
	  	  	StartTimer();
 8007fba:	f7ff fe9f 	bl	8007cfc <StartTimer>
	  	  	aiRun(x_data_ai, y_data_ai);
 8007fbe:	4a43      	ldr	r2, [pc, #268]	; (80080cc <main+0x2b4>)
 8007fc0:	f242 5378 	movw	r3, #9592	; 0x2578
 8007fc4:	443b      	add	r3, r7
 8007fc6:	441a      	add	r2, r3
 8007fc8:	4b3f      	ldr	r3, [pc, #252]	; (80080c8 <main+0x2b0>)
 8007fca:	f242 5178 	movw	r1, #9592	; 0x2578
 8007fce:	4439      	add	r1, r7
 8007fd0:	440b      	add	r3, r1
 8007fd2:	4611      	mov	r1, r2
 8007fd4:	4618      	mov	r0, r3
 8007fd6:	f002 fc47 	bl	800a868 <aiRun>
	  	  	StopTimer();
 8007fda:	f7ff fea1 	bl	8007d20 <StopTimer>
	  	  	uint32_t cycles_count = getCycles();
 8007fde:	f7ff feaf 	bl	8007d40 <getCycles>
 8007fe2:	4603      	mov	r3, r0
 8007fe4:	461a      	mov	r2, r3
 8007fe6:	f242 03b0 	movw	r3, #8368	; 0x20b0
 8007fea:	443b      	add	r3, r7
 8007fec:	601a      	str	r2, [r3, #0]
	  	  	memcpy(output_arr, y_data_ai, sizeof(float) * 43);
 8007fee:	4b37      	ldr	r3, [pc, #220]	; (80080cc <main+0x2b4>)
 8007ff0:	f242 5278 	movw	r2, #9592	; 0x2578
 8007ff4:	443a      	add	r2, r7
 8007ff6:	4413      	add	r3, r2
 8007ff8:	f242 00bc 	movw	r0, #8380	; 0x20bc
 8007ffc:	4438      	add	r0, r7
 8007ffe:	22ac      	movs	r2, #172	; 0xac
 8008000:	4619      	mov	r1, r3
 8008002:	f002 ff32 	bl	800ae6a <memcpy>
	  	  	for (int i = 0; i < 43; i++)
 8008006:	2300      	movs	r3, #0
 8008008:	f242 526c 	movw	r2, #9580	; 0x256c
 800800c:	443a      	add	r2, r7
 800800e:	6013      	str	r3, [r2, #0]
 8008010:	e034      	b.n	800807c <main+0x264>
	  	  	{
	  	  		if (accuracy < output_arr[i])
 8008012:	f242 02bc 	movw	r2, #8380	; 0x20bc
 8008016:	443a      	add	r2, r7
 8008018:	f242 536c 	movw	r3, #9580	; 0x256c
 800801c:	443b      	add	r3, r7
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	009b      	lsls	r3, r3, #2
 8008022:	4413      	add	r3, r2
 8008024:	ed93 7a00 	vldr	s14, [r3]
 8008028:	f242 03b4 	movw	r3, #8372	; 0x20b4
 800802c:	443b      	add	r3, r7
 800802e:	edd3 7a00 	vldr	s15, [r3]
 8008032:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008036:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800803a:	dd16      	ble.n	800806a <main+0x252>
	  	  		{
	  	  			accuracy = output_arr[i];
 800803c:	f242 02bc 	movw	r2, #8380	; 0x20bc
 8008040:	443a      	add	r2, r7
 8008042:	f242 536c 	movw	r3, #9580	; 0x256c
 8008046:	443b      	add	r3, r7
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	009b      	lsls	r3, r3, #2
 800804c:	4413      	add	r3, r2
 800804e:	681a      	ldr	r2, [r3, #0]
 8008050:	f242 03b4 	movw	r3, #8372	; 0x20b4
 8008054:	443b      	add	r3, r7
 8008056:	601a      	str	r2, [r3, #0]
	  	  			best_output = i;
 8008058:	f242 536c 	movw	r3, #9580	; 0x256c
 800805c:	443b      	add	r3, r7
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	b2da      	uxtb	r2, r3
 8008062:	f242 03ba 	movw	r3, #8378	; 0x20ba
 8008066:	443b      	add	r3, r7
 8008068:	701a      	strb	r2, [r3, #0]
	  	  	for (int i = 0; i < 43; i++)
 800806a:	f242 536c 	movw	r3, #9580	; 0x256c
 800806e:	443b      	add	r3, r7
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	3301      	adds	r3, #1
 8008074:	f242 526c 	movw	r2, #9580	; 0x256c
 8008078:	443a      	add	r2, r7
 800807a:	6013      	str	r3, [r2, #0]
 800807c:	f242 536c 	movw	r3, #9580	; 0x256c
 8008080:	443b      	add	r3, r7
 8008082:	681b      	ldr	r3, [r3, #0]
 8008084:	2b2a      	cmp	r3, #42	; 0x2a
 8008086:	ddc4      	ble.n	8008012 <main+0x1fa>
	  	  		}
	  	  	}
	  	  	HAL_UART_Transmit(&huart6, &best_output, 1, 200);
 8008088:	f242 01ba 	movw	r1, #8378	; 0x20ba
 800808c:	4439      	add	r1, r7
 800808e:	23c8      	movs	r3, #200	; 0xc8
 8008090:	2201      	movs	r2, #1
 8008092:	480a      	ldr	r0, [pc, #40]	; (80080bc <main+0x2a4>)
 8008094:	f001 fe36 	bl	8009d04 <HAL_UART_Transmit>
	  	  	HAL_UART_Transmit(&huart6, &accuracy, sizeof(float), 200);
 8008098:	f242 01b4 	movw	r1, #8372	; 0x20b4
 800809c:	4439      	add	r1, r7
 800809e:	23c8      	movs	r3, #200	; 0xc8
 80080a0:	2204      	movs	r2, #4
 80080a2:	4806      	ldr	r0, [pc, #24]	; (80080bc <main+0x2a4>)
 80080a4:	f001 fe2e 	bl	8009d04 <HAL_UART_Transmit>
	  	  	HAL_UART_Transmit(&huart6, &cycles_count, sizeof(uint32_t), 200);
 80080a8:	f242 01b0 	movw	r1, #8368	; 0x20b0
 80080ac:	4439      	add	r1, r7
 80080ae:	23c8      	movs	r3, #200	; 0xc8
 80080b0:	2204      	movs	r2, #4
 80080b2:	4802      	ldr	r0, [pc, #8]	; (80080bc <main+0x2a4>)
 80080b4:	f001 fe26 	bl	8009d04 <HAL_UART_Transmit>
  {
 80080b8:	e6e0      	b.n	8007e7c <main+0x64>
 80080ba:	bf00      	nop
 80080bc:	20003e48 	.word	0x20003e48
 80080c0:	437f0000 	.word	0x437f0000
 80080c4:	ffffdb38 	.word	0xffffdb38
 80080c8:	ffffeb38 	.word	0xffffeb38
 80080cc:	ffffda8c 	.word	0xffffda8c

080080d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80080d0:	b580      	push	{r7, lr}
 80080d2:	b0b4      	sub	sp, #208	; 0xd0
 80080d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80080d6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80080da:	2230      	movs	r2, #48	; 0x30
 80080dc:	2100      	movs	r1, #0
 80080de:	4618      	mov	r0, r3
 80080e0:	f002 fece 	bl	800ae80 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80080e4:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80080e8:	2200      	movs	r2, #0
 80080ea:	601a      	str	r2, [r3, #0]
 80080ec:	605a      	str	r2, [r3, #4]
 80080ee:	609a      	str	r2, [r3, #8]
 80080f0:	60da      	str	r2, [r3, #12]
 80080f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80080f4:	f107 030c 	add.w	r3, r7, #12
 80080f8:	2280      	movs	r2, #128	; 0x80
 80080fa:	2100      	movs	r1, #0
 80080fc:	4618      	mov	r0, r3
 80080fe:	f002 febf 	bl	800ae80 <memset>

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8008102:	4b39      	ldr	r3, [pc, #228]	; (80081e8 <SystemClock_Config+0x118>)
 8008104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008106:	4a38      	ldr	r2, [pc, #224]	; (80081e8 <SystemClock_Config+0x118>)
 8008108:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800810c:	6413      	str	r3, [r2, #64]	; 0x40
 800810e:	4b36      	ldr	r3, [pc, #216]	; (80081e8 <SystemClock_Config+0x118>)
 8008110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008112:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008116:	60bb      	str	r3, [r7, #8]
 8008118:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800811a:	4b34      	ldr	r3, [pc, #208]	; (80081ec <SystemClock_Config+0x11c>)
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	4a33      	ldr	r2, [pc, #204]	; (80081ec <SystemClock_Config+0x11c>)
 8008120:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8008124:	6013      	str	r3, [r2, #0]
 8008126:	4b31      	ldr	r3, [pc, #196]	; (80081ec <SystemClock_Config+0x11c>)
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800812e:	607b      	str	r3, [r7, #4]
 8008130:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8008132:	2302      	movs	r3, #2
 8008134:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8008138:	2301      	movs	r3, #1
 800813a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800813e:	2310      	movs	r3, #16
 8008140:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8008144:	2302      	movs	r3, #2
 8008146:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800814a:	2300      	movs	r3, #0
 800814c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 8;
 8008150:	2308      	movs	r3, #8
 8008152:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 216;
 8008156:	23d8      	movs	r3, #216	; 0xd8
 8008158:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800815c:	2302      	movs	r3, #2
 800815e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8008162:	2302      	movs	r3, #2
 8008164:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8008168:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800816c:	4618      	mov	r0, r3
 800816e:	f000 fdbd 	bl	8008cec <HAL_RCC_OscConfig>
 8008172:	4603      	mov	r3, r0
 8008174:	2b00      	cmp	r3, #0
 8008176:	d001      	beq.n	800817c <SystemClock_Config+0xac>
  {
    Error_Handler();
 8008178:	f000 f8a4 	bl	80082c4 <Error_Handler>
  }
  /** Activate the Over-Drive mode 
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 800817c:	f000 fd66 	bl	8008c4c <HAL_PWREx_EnableOverDrive>
 8008180:	4603      	mov	r3, r0
 8008182:	2b00      	cmp	r3, #0
 8008184:	d001      	beq.n	800818a <SystemClock_Config+0xba>
  {
    Error_Handler();
 8008186:	f000 f89d 	bl	80082c4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800818a:	230f      	movs	r3, #15
 800818c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8008190:	2302      	movs	r3, #2
 8008192:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8008196:	2300      	movs	r3, #0
 8008198:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800819c:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80081a0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80081a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80081a8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80081ac:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80081b0:	2107      	movs	r1, #7
 80081b2:	4618      	mov	r0, r3
 80081b4:	f001 f83e 	bl	8009234 <HAL_RCC_ClockConfig>
 80081b8:	4603      	mov	r3, r0
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d001      	beq.n	80081c2 <SystemClock_Config+0xf2>
  {
    Error_Handler();
 80081be:	f000 f881 	bl	80082c4 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 80081c2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80081c6:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 80081c8:	2300      	movs	r3, #0
 80081ca:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80081cc:	f107 030c 	add.w	r3, r7, #12
 80081d0:	4618      	mov	r0, r3
 80081d2:	f001 fa01 	bl	80095d8 <HAL_RCCEx_PeriphCLKConfig>
 80081d6:	4603      	mov	r3, r0
 80081d8:	2b00      	cmp	r3, #0
 80081da:	d001      	beq.n	80081e0 <SystemClock_Config+0x110>
  {
    Error_Handler();
 80081dc:	f000 f872 	bl	80082c4 <Error_Handler>
  }
}
 80081e0:	bf00      	nop
 80081e2:	37d0      	adds	r7, #208	; 0xd0
 80081e4:	46bd      	mov	sp, r7
 80081e6:	bd80      	pop	{r7, pc}
 80081e8:	40023800 	.word	0x40023800
 80081ec:	40007000 	.word	0x40007000

080081f0 <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 80081f0:	b580      	push	{r7, lr}
 80081f2:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 80081f4:	4b0d      	ldr	r3, [pc, #52]	; (800822c <MX_CRC_Init+0x3c>)
 80081f6:	4a0e      	ldr	r2, [pc, #56]	; (8008230 <MX_CRC_Init+0x40>)
 80081f8:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 80081fa:	4b0c      	ldr	r3, [pc, #48]	; (800822c <MX_CRC_Init+0x3c>)
 80081fc:	2200      	movs	r2, #0
 80081fe:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8008200:	4b0a      	ldr	r3, [pc, #40]	; (800822c <MX_CRC_Init+0x3c>)
 8008202:	2200      	movs	r2, #0
 8008204:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8008206:	4b09      	ldr	r3, [pc, #36]	; (800822c <MX_CRC_Init+0x3c>)
 8008208:	2200      	movs	r2, #0
 800820a:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 800820c:	4b07      	ldr	r3, [pc, #28]	; (800822c <MX_CRC_Init+0x3c>)
 800820e:	2200      	movs	r2, #0
 8008210:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8008212:	4b06      	ldr	r3, [pc, #24]	; (800822c <MX_CRC_Init+0x3c>)
 8008214:	2201      	movs	r2, #1
 8008216:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8008218:	4804      	ldr	r0, [pc, #16]	; (800822c <MX_CRC_Init+0x3c>)
 800821a:	f000 fa93 	bl	8008744 <HAL_CRC_Init>
 800821e:	4603      	mov	r3, r0
 8008220:	2b00      	cmp	r3, #0
 8008222:	d001      	beq.n	8008228 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8008224:	f000 f84e 	bl	80082c4 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8008228:	bf00      	nop
 800822a:	bd80      	pop	{r7, pc}
 800822c:	20003e24 	.word	0x20003e24
 8008230:	40023000 	.word	0x40023000

08008234 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8008234:	b580      	push	{r7, lr}
 8008236:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8008238:	4b14      	ldr	r3, [pc, #80]	; (800828c <MX_USART6_UART_Init+0x58>)
 800823a:	4a15      	ldr	r2, [pc, #84]	; (8008290 <MX_USART6_UART_Init+0x5c>)
 800823c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800823e:	4b13      	ldr	r3, [pc, #76]	; (800828c <MX_USART6_UART_Init+0x58>)
 8008240:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8008244:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8008246:	4b11      	ldr	r3, [pc, #68]	; (800828c <MX_USART6_UART_Init+0x58>)
 8008248:	2200      	movs	r2, #0
 800824a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800824c:	4b0f      	ldr	r3, [pc, #60]	; (800828c <MX_USART6_UART_Init+0x58>)
 800824e:	2200      	movs	r2, #0
 8008250:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8008252:	4b0e      	ldr	r3, [pc, #56]	; (800828c <MX_USART6_UART_Init+0x58>)
 8008254:	2200      	movs	r2, #0
 8008256:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8008258:	4b0c      	ldr	r3, [pc, #48]	; (800828c <MX_USART6_UART_Init+0x58>)
 800825a:	220c      	movs	r2, #12
 800825c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800825e:	4b0b      	ldr	r3, [pc, #44]	; (800828c <MX_USART6_UART_Init+0x58>)
 8008260:	2200      	movs	r2, #0
 8008262:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8008264:	4b09      	ldr	r3, [pc, #36]	; (800828c <MX_USART6_UART_Init+0x58>)
 8008266:	2200      	movs	r2, #0
 8008268:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800826a:	4b08      	ldr	r3, [pc, #32]	; (800828c <MX_USART6_UART_Init+0x58>)
 800826c:	2200      	movs	r2, #0
 800826e:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8008270:	4b06      	ldr	r3, [pc, #24]	; (800828c <MX_USART6_UART_Init+0x58>)
 8008272:	2200      	movs	r2, #0
 8008274:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8008276:	4805      	ldr	r0, [pc, #20]	; (800828c <MX_USART6_UART_Init+0x58>)
 8008278:	f001 fcf6 	bl	8009c68 <HAL_UART_Init>
 800827c:	4603      	mov	r3, r0
 800827e:	2b00      	cmp	r3, #0
 8008280:	d001      	beq.n	8008286 <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 8008282:	f000 f81f 	bl	80082c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8008286:	bf00      	nop
 8008288:	bd80      	pop	{r7, pc}
 800828a:	bf00      	nop
 800828c:	20003e48 	.word	0x20003e48
 8008290:	40011400 	.word	0x40011400

08008294 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8008294:	b480      	push	{r7}
 8008296:	b083      	sub	sp, #12
 8008298:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800829a:	4b09      	ldr	r3, [pc, #36]	; (80082c0 <MX_GPIO_Init+0x2c>)
 800829c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800829e:	4a08      	ldr	r2, [pc, #32]	; (80082c0 <MX_GPIO_Init+0x2c>)
 80082a0:	f043 0304 	orr.w	r3, r3, #4
 80082a4:	6313      	str	r3, [r2, #48]	; 0x30
 80082a6:	4b06      	ldr	r3, [pc, #24]	; (80082c0 <MX_GPIO_Init+0x2c>)
 80082a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082aa:	f003 0304 	and.w	r3, r3, #4
 80082ae:	607b      	str	r3, [r7, #4]
 80082b0:	687b      	ldr	r3, [r7, #4]

}
 80082b2:	bf00      	nop
 80082b4:	370c      	adds	r7, #12
 80082b6:	46bd      	mov	sp, r7
 80082b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082bc:	4770      	bx	lr
 80082be:	bf00      	nop
 80082c0:	40023800 	.word	0x40023800

080082c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80082c4:	b480      	push	{r7}
 80082c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 80082c8:	bf00      	nop
 80082ca:	46bd      	mov	sp, r7
 80082cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d0:	4770      	bx	lr
	...

080082d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80082d4:	b480      	push	{r7}
 80082d6:	b083      	sub	sp, #12
 80082d8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80082da:	4b0f      	ldr	r3, [pc, #60]	; (8008318 <HAL_MspInit+0x44>)
 80082dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082de:	4a0e      	ldr	r2, [pc, #56]	; (8008318 <HAL_MspInit+0x44>)
 80082e0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80082e4:	6413      	str	r3, [r2, #64]	; 0x40
 80082e6:	4b0c      	ldr	r3, [pc, #48]	; (8008318 <HAL_MspInit+0x44>)
 80082e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80082ea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80082ee:	607b      	str	r3, [r7, #4]
 80082f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80082f2:	4b09      	ldr	r3, [pc, #36]	; (8008318 <HAL_MspInit+0x44>)
 80082f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80082f6:	4a08      	ldr	r2, [pc, #32]	; (8008318 <HAL_MspInit+0x44>)
 80082f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80082fc:	6453      	str	r3, [r2, #68]	; 0x44
 80082fe:	4b06      	ldr	r3, [pc, #24]	; (8008318 <HAL_MspInit+0x44>)
 8008300:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008302:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008306:	603b      	str	r3, [r7, #0]
 8008308:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800830a:	bf00      	nop
 800830c:	370c      	adds	r7, #12
 800830e:	46bd      	mov	sp, r7
 8008310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008314:	4770      	bx	lr
 8008316:	bf00      	nop
 8008318:	40023800 	.word	0x40023800

0800831c <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 800831c:	b480      	push	{r7}
 800831e:	b085      	sub	sp, #20
 8008320:	af00      	add	r7, sp, #0
 8008322:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	681b      	ldr	r3, [r3, #0]
 8008328:	4a0a      	ldr	r2, [pc, #40]	; (8008354 <HAL_CRC_MspInit+0x38>)
 800832a:	4293      	cmp	r3, r2
 800832c:	d10b      	bne.n	8008346 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 800832e:	4b0a      	ldr	r3, [pc, #40]	; (8008358 <HAL_CRC_MspInit+0x3c>)
 8008330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008332:	4a09      	ldr	r2, [pc, #36]	; (8008358 <HAL_CRC_MspInit+0x3c>)
 8008334:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008338:	6313      	str	r3, [r2, #48]	; 0x30
 800833a:	4b07      	ldr	r3, [pc, #28]	; (8008358 <HAL_CRC_MspInit+0x3c>)
 800833c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800833e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008342:	60fb      	str	r3, [r7, #12]
 8008344:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8008346:	bf00      	nop
 8008348:	3714      	adds	r7, #20
 800834a:	46bd      	mov	sp, r7
 800834c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008350:	4770      	bx	lr
 8008352:	bf00      	nop
 8008354:	40023000 	.word	0x40023000
 8008358:	40023800 	.word	0x40023800

0800835c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800835c:	b580      	push	{r7, lr}
 800835e:	b08a      	sub	sp, #40	; 0x28
 8008360:	af00      	add	r7, sp, #0
 8008362:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008364:	f107 0314 	add.w	r3, r7, #20
 8008368:	2200      	movs	r2, #0
 800836a:	601a      	str	r2, [r3, #0]
 800836c:	605a      	str	r2, [r3, #4]
 800836e:	609a      	str	r2, [r3, #8]
 8008370:	60da      	str	r2, [r3, #12]
 8008372:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	4a17      	ldr	r2, [pc, #92]	; (80083d8 <HAL_UART_MspInit+0x7c>)
 800837a:	4293      	cmp	r3, r2
 800837c:	d127      	bne.n	80083ce <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART6_MspInit 0 */

  /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 800837e:	4b17      	ldr	r3, [pc, #92]	; (80083dc <HAL_UART_MspInit+0x80>)
 8008380:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008382:	4a16      	ldr	r2, [pc, #88]	; (80083dc <HAL_UART_MspInit+0x80>)
 8008384:	f043 0320 	orr.w	r3, r3, #32
 8008388:	6453      	str	r3, [r2, #68]	; 0x44
 800838a:	4b14      	ldr	r3, [pc, #80]	; (80083dc <HAL_UART_MspInit+0x80>)
 800838c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800838e:	f003 0320 	and.w	r3, r3, #32
 8008392:	613b      	str	r3, [r7, #16]
 8008394:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008396:	4b11      	ldr	r3, [pc, #68]	; (80083dc <HAL_UART_MspInit+0x80>)
 8008398:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800839a:	4a10      	ldr	r2, [pc, #64]	; (80083dc <HAL_UART_MspInit+0x80>)
 800839c:	f043 0304 	orr.w	r3, r3, #4
 80083a0:	6313      	str	r3, [r2, #48]	; 0x30
 80083a2:	4b0e      	ldr	r3, [pc, #56]	; (80083dc <HAL_UART_MspInit+0x80>)
 80083a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80083a6:	f003 0304 	and.w	r3, r3, #4
 80083aa:	60fb      	str	r3, [r7, #12]
 80083ac:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration    
    PC7     ------> USART6_RX
    PC6     ------> USART6_TX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_6;
 80083ae:	23c0      	movs	r3, #192	; 0xc0
 80083b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80083b2:	2302      	movs	r3, #2
 80083b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80083b6:	2300      	movs	r3, #0
 80083b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80083ba:	2303      	movs	r3, #3
 80083bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80083be:	2308      	movs	r3, #8
 80083c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80083c2:	f107 0314 	add.w	r3, r7, #20
 80083c6:	4619      	mov	r1, r3
 80083c8:	4805      	ldr	r0, [pc, #20]	; (80083e0 <HAL_UART_MspInit+0x84>)
 80083ca:	f000 faa5 	bl	8008918 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80083ce:	bf00      	nop
 80083d0:	3728      	adds	r7, #40	; 0x28
 80083d2:	46bd      	mov	sp, r7
 80083d4:	bd80      	pop	{r7, pc}
 80083d6:	bf00      	nop
 80083d8:	40011400 	.word	0x40011400
 80083dc:	40023800 	.word	0x40023800
 80083e0:	40020800 	.word	0x40020800

080083e4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80083e4:	b480      	push	{r7}
 80083e6:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80083e8:	bf00      	nop
 80083ea:	46bd      	mov	sp, r7
 80083ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f0:	4770      	bx	lr

080083f2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80083f2:	b480      	push	{r7}
 80083f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80083f6:	e7fe      	b.n	80083f6 <HardFault_Handler+0x4>

080083f8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80083f8:	b480      	push	{r7}
 80083fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80083fc:	e7fe      	b.n	80083fc <MemManage_Handler+0x4>

080083fe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80083fe:	b480      	push	{r7}
 8008400:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8008402:	e7fe      	b.n	8008402 <BusFault_Handler+0x4>

08008404 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008404:	b480      	push	{r7}
 8008406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008408:	e7fe      	b.n	8008408 <UsageFault_Handler+0x4>

0800840a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800840a:	b480      	push	{r7}
 800840c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800840e:	bf00      	nop
 8008410:	46bd      	mov	sp, r7
 8008412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008416:	4770      	bx	lr

08008418 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008418:	b480      	push	{r7}
 800841a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800841c:	bf00      	nop
 800841e:	46bd      	mov	sp, r7
 8008420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008424:	4770      	bx	lr

08008426 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8008426:	b480      	push	{r7}
 8008428:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800842a:	bf00      	nop
 800842c:	46bd      	mov	sp, r7
 800842e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008432:	4770      	bx	lr

08008434 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8008434:	b580      	push	{r7, lr}
 8008436:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8008438:	f000 f87e 	bl	8008538 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800843c:	bf00      	nop
 800843e:	bd80      	pop	{r7, pc}

08008440 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8008440:	b480      	push	{r7}
 8008442:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8008444:	4b08      	ldr	r3, [pc, #32]	; (8008468 <SystemInit+0x28>)
 8008446:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800844a:	4a07      	ldr	r2, [pc, #28]	; (8008468 <SystemInit+0x28>)
 800844c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008450:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = RAMDTCM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8008454:	4b04      	ldr	r3, [pc, #16]	; (8008468 <SystemInit+0x28>)
 8008456:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800845a:	609a      	str	r2, [r3, #8]
#endif
}
 800845c:	bf00      	nop
 800845e:	46bd      	mov	sp, r7
 8008460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008464:	4770      	bx	lr
 8008466:	bf00      	nop
 8008468:	e000ed00 	.word	0xe000ed00

0800846c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800846c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80084a4 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8008470:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8008472:	e003      	b.n	800847c <LoopCopyDataInit>

08008474 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8008474:	4b0c      	ldr	r3, [pc, #48]	; (80084a8 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8008476:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8008478:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800847a:	3104      	adds	r1, #4

0800847c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800847c:	480b      	ldr	r0, [pc, #44]	; (80084ac <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800847e:	4b0c      	ldr	r3, [pc, #48]	; (80084b0 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8008480:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8008482:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8008484:	d3f6      	bcc.n	8008474 <CopyDataInit>
  ldr  r2, =_sbss
 8008486:	4a0b      	ldr	r2, [pc, #44]	; (80084b4 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8008488:	e002      	b.n	8008490 <LoopFillZerobss>

0800848a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800848a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800848c:	f842 3b04 	str.w	r3, [r2], #4

08008490 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8008490:	4b09      	ldr	r3, [pc, #36]	; (80084b8 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8008492:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8008494:	d3f9      	bcc.n	800848a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8008496:	f7ff ffd3 	bl	8008440 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800849a:	f002 fcb3 	bl	800ae04 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800849e:	f7ff fcbb 	bl	8007e18 <main>
  bx  lr    
 80084a2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80084a4:	20040000 	.word	0x20040000
  ldr  r3, =_sidata
 80084a8:	080738b8 	.word	0x080738b8
  ldr  r0, =_sdata
 80084ac:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80084b0:	20000e5c 	.word	0x20000e5c
  ldr  r2, =_sbss
 80084b4:	20000e5c 	.word	0x20000e5c
  ldr  r3, = _ebss
 80084b8:	20003ecc 	.word	0x20003ecc

080084bc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80084bc:	e7fe      	b.n	80084bc <ADC_IRQHandler>

080084be <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80084be:	b580      	push	{r7, lr}
 80084c0:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80084c2:	2003      	movs	r0, #3
 80084c4:	f000 f90a 	bl	80086dc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80084c8:	2000      	movs	r0, #0
 80084ca:	f000 f805 	bl	80084d8 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80084ce:	f7ff ff01 	bl	80082d4 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80084d2:	2300      	movs	r3, #0
}
 80084d4:	4618      	mov	r0, r3
 80084d6:	bd80      	pop	{r7, pc}

080084d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80084d8:	b580      	push	{r7, lr}
 80084da:	b082      	sub	sp, #8
 80084dc:	af00      	add	r7, sp, #0
 80084de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80084e0:	4b12      	ldr	r3, [pc, #72]	; (800852c <HAL_InitTick+0x54>)
 80084e2:	681a      	ldr	r2, [r3, #0]
 80084e4:	4b12      	ldr	r3, [pc, #72]	; (8008530 <HAL_InitTick+0x58>)
 80084e6:	781b      	ldrb	r3, [r3, #0]
 80084e8:	4619      	mov	r1, r3
 80084ea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80084ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80084f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80084f6:	4618      	mov	r0, r3
 80084f8:	f000 f917 	bl	800872a <HAL_SYSTICK_Config>
 80084fc:	4603      	mov	r3, r0
 80084fe:	2b00      	cmp	r3, #0
 8008500:	d001      	beq.n	8008506 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8008502:	2301      	movs	r3, #1
 8008504:	e00e      	b.n	8008524 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	2b0f      	cmp	r3, #15
 800850a:	d80a      	bhi.n	8008522 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800850c:	2200      	movs	r2, #0
 800850e:	6879      	ldr	r1, [r7, #4]
 8008510:	f04f 30ff 	mov.w	r0, #4294967295
 8008514:	f000 f8ed 	bl	80086f2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8008518:	4a06      	ldr	r2, [pc, #24]	; (8008534 <HAL_InitTick+0x5c>)
 800851a:	687b      	ldr	r3, [r7, #4]
 800851c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800851e:	2300      	movs	r3, #0
 8008520:	e000      	b.n	8008524 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8008522:	2301      	movs	r3, #1
}
 8008524:	4618      	mov	r0, r3
 8008526:	3708      	adds	r7, #8
 8008528:	46bd      	mov	sp, r7
 800852a:	bd80      	pop	{r7, pc}
 800852c:	20000000 	.word	0x20000000
 8008530:	20000008 	.word	0x20000008
 8008534:	20000004 	.word	0x20000004

08008538 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008538:	b480      	push	{r7}
 800853a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800853c:	4b06      	ldr	r3, [pc, #24]	; (8008558 <HAL_IncTick+0x20>)
 800853e:	781b      	ldrb	r3, [r3, #0]
 8008540:	461a      	mov	r2, r3
 8008542:	4b06      	ldr	r3, [pc, #24]	; (800855c <HAL_IncTick+0x24>)
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	4413      	add	r3, r2
 8008548:	4a04      	ldr	r2, [pc, #16]	; (800855c <HAL_IncTick+0x24>)
 800854a:	6013      	str	r3, [r2, #0]
}
 800854c:	bf00      	nop
 800854e:	46bd      	mov	sp, r7
 8008550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008554:	4770      	bx	lr
 8008556:	bf00      	nop
 8008558:	20000008 	.word	0x20000008
 800855c:	20003ec8 	.word	0x20003ec8

08008560 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008560:	b480      	push	{r7}
 8008562:	af00      	add	r7, sp, #0
  return uwTick;
 8008564:	4b03      	ldr	r3, [pc, #12]	; (8008574 <HAL_GetTick+0x14>)
 8008566:	681b      	ldr	r3, [r3, #0]
}
 8008568:	4618      	mov	r0, r3
 800856a:	46bd      	mov	sp, r7
 800856c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008570:	4770      	bx	lr
 8008572:	bf00      	nop
 8008574:	20003ec8 	.word	0x20003ec8

08008578 <__NVIC_SetPriorityGrouping>:
{
 8008578:	b480      	push	{r7}
 800857a:	b085      	sub	sp, #20
 800857c:	af00      	add	r7, sp, #0
 800857e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	f003 0307 	and.w	r3, r3, #7
 8008586:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8008588:	4b0b      	ldr	r3, [pc, #44]	; (80085b8 <__NVIC_SetPriorityGrouping+0x40>)
 800858a:	68db      	ldr	r3, [r3, #12]
 800858c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800858e:	68ba      	ldr	r2, [r7, #8]
 8008590:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8008594:	4013      	ands	r3, r2
 8008596:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8008598:	68fb      	ldr	r3, [r7, #12]
 800859a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800859c:	68bb      	ldr	r3, [r7, #8]
 800859e:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80085a0:	4b06      	ldr	r3, [pc, #24]	; (80085bc <__NVIC_SetPriorityGrouping+0x44>)
 80085a2:	4313      	orrs	r3, r2
 80085a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80085a6:	4a04      	ldr	r2, [pc, #16]	; (80085b8 <__NVIC_SetPriorityGrouping+0x40>)
 80085a8:	68bb      	ldr	r3, [r7, #8]
 80085aa:	60d3      	str	r3, [r2, #12]
}
 80085ac:	bf00      	nop
 80085ae:	3714      	adds	r7, #20
 80085b0:	46bd      	mov	sp, r7
 80085b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085b6:	4770      	bx	lr
 80085b8:	e000ed00 	.word	0xe000ed00
 80085bc:	05fa0000 	.word	0x05fa0000

080085c0 <__NVIC_GetPriorityGrouping>:
{
 80085c0:	b480      	push	{r7}
 80085c2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80085c4:	4b04      	ldr	r3, [pc, #16]	; (80085d8 <__NVIC_GetPriorityGrouping+0x18>)
 80085c6:	68db      	ldr	r3, [r3, #12]
 80085c8:	0a1b      	lsrs	r3, r3, #8
 80085ca:	f003 0307 	and.w	r3, r3, #7
}
 80085ce:	4618      	mov	r0, r3
 80085d0:	46bd      	mov	sp, r7
 80085d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d6:	4770      	bx	lr
 80085d8:	e000ed00 	.word	0xe000ed00

080085dc <__NVIC_SetPriority>:
{
 80085dc:	b480      	push	{r7}
 80085de:	b083      	sub	sp, #12
 80085e0:	af00      	add	r7, sp, #0
 80085e2:	4603      	mov	r3, r0
 80085e4:	6039      	str	r1, [r7, #0]
 80085e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80085e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80085ec:	2b00      	cmp	r3, #0
 80085ee:	db0a      	blt.n	8008606 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80085f0:	683b      	ldr	r3, [r7, #0]
 80085f2:	b2da      	uxtb	r2, r3
 80085f4:	490c      	ldr	r1, [pc, #48]	; (8008628 <__NVIC_SetPriority+0x4c>)
 80085f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80085fa:	0112      	lsls	r2, r2, #4
 80085fc:	b2d2      	uxtb	r2, r2
 80085fe:	440b      	add	r3, r1
 8008600:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8008604:	e00a      	b.n	800861c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008606:	683b      	ldr	r3, [r7, #0]
 8008608:	b2da      	uxtb	r2, r3
 800860a:	4908      	ldr	r1, [pc, #32]	; (800862c <__NVIC_SetPriority+0x50>)
 800860c:	79fb      	ldrb	r3, [r7, #7]
 800860e:	f003 030f 	and.w	r3, r3, #15
 8008612:	3b04      	subs	r3, #4
 8008614:	0112      	lsls	r2, r2, #4
 8008616:	b2d2      	uxtb	r2, r2
 8008618:	440b      	add	r3, r1
 800861a:	761a      	strb	r2, [r3, #24]
}
 800861c:	bf00      	nop
 800861e:	370c      	adds	r7, #12
 8008620:	46bd      	mov	sp, r7
 8008622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008626:	4770      	bx	lr
 8008628:	e000e100 	.word	0xe000e100
 800862c:	e000ed00 	.word	0xe000ed00

08008630 <NVIC_EncodePriority>:
{
 8008630:	b480      	push	{r7}
 8008632:	b089      	sub	sp, #36	; 0x24
 8008634:	af00      	add	r7, sp, #0
 8008636:	60f8      	str	r0, [r7, #12]
 8008638:	60b9      	str	r1, [r7, #8]
 800863a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800863c:	68fb      	ldr	r3, [r7, #12]
 800863e:	f003 0307 	and.w	r3, r3, #7
 8008642:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8008644:	69fb      	ldr	r3, [r7, #28]
 8008646:	f1c3 0307 	rsb	r3, r3, #7
 800864a:	2b04      	cmp	r3, #4
 800864c:	bf28      	it	cs
 800864e:	2304      	movcs	r3, #4
 8008650:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8008652:	69fb      	ldr	r3, [r7, #28]
 8008654:	3304      	adds	r3, #4
 8008656:	2b06      	cmp	r3, #6
 8008658:	d902      	bls.n	8008660 <NVIC_EncodePriority+0x30>
 800865a:	69fb      	ldr	r3, [r7, #28]
 800865c:	3b03      	subs	r3, #3
 800865e:	e000      	b.n	8008662 <NVIC_EncodePriority+0x32>
 8008660:	2300      	movs	r3, #0
 8008662:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008664:	f04f 32ff 	mov.w	r2, #4294967295
 8008668:	69bb      	ldr	r3, [r7, #24]
 800866a:	fa02 f303 	lsl.w	r3, r2, r3
 800866e:	43da      	mvns	r2, r3
 8008670:	68bb      	ldr	r3, [r7, #8]
 8008672:	401a      	ands	r2, r3
 8008674:	697b      	ldr	r3, [r7, #20]
 8008676:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8008678:	f04f 31ff 	mov.w	r1, #4294967295
 800867c:	697b      	ldr	r3, [r7, #20]
 800867e:	fa01 f303 	lsl.w	r3, r1, r3
 8008682:	43d9      	mvns	r1, r3
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8008688:	4313      	orrs	r3, r2
}
 800868a:	4618      	mov	r0, r3
 800868c:	3724      	adds	r7, #36	; 0x24
 800868e:	46bd      	mov	sp, r7
 8008690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008694:	4770      	bx	lr
	...

08008698 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8008698:	b580      	push	{r7, lr}
 800869a:	b082      	sub	sp, #8
 800869c:	af00      	add	r7, sp, #0
 800869e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80086a0:	687b      	ldr	r3, [r7, #4]
 80086a2:	3b01      	subs	r3, #1
 80086a4:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80086a8:	d301      	bcc.n	80086ae <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80086aa:	2301      	movs	r3, #1
 80086ac:	e00f      	b.n	80086ce <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80086ae:	4a0a      	ldr	r2, [pc, #40]	; (80086d8 <SysTick_Config+0x40>)
 80086b0:	687b      	ldr	r3, [r7, #4]
 80086b2:	3b01      	subs	r3, #1
 80086b4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80086b6:	210f      	movs	r1, #15
 80086b8:	f04f 30ff 	mov.w	r0, #4294967295
 80086bc:	f7ff ff8e 	bl	80085dc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80086c0:	4b05      	ldr	r3, [pc, #20]	; (80086d8 <SysTick_Config+0x40>)
 80086c2:	2200      	movs	r2, #0
 80086c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80086c6:	4b04      	ldr	r3, [pc, #16]	; (80086d8 <SysTick_Config+0x40>)
 80086c8:	2207      	movs	r2, #7
 80086ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80086cc:	2300      	movs	r3, #0
}
 80086ce:	4618      	mov	r0, r3
 80086d0:	3708      	adds	r7, #8
 80086d2:	46bd      	mov	sp, r7
 80086d4:	bd80      	pop	{r7, pc}
 80086d6:	bf00      	nop
 80086d8:	e000e010 	.word	0xe000e010

080086dc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80086dc:	b580      	push	{r7, lr}
 80086de:	b082      	sub	sp, #8
 80086e0:	af00      	add	r7, sp, #0
 80086e2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80086e4:	6878      	ldr	r0, [r7, #4]
 80086e6:	f7ff ff47 	bl	8008578 <__NVIC_SetPriorityGrouping>
}
 80086ea:	bf00      	nop
 80086ec:	3708      	adds	r7, #8
 80086ee:	46bd      	mov	sp, r7
 80086f0:	bd80      	pop	{r7, pc}

080086f2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80086f2:	b580      	push	{r7, lr}
 80086f4:	b086      	sub	sp, #24
 80086f6:	af00      	add	r7, sp, #0
 80086f8:	4603      	mov	r3, r0
 80086fa:	60b9      	str	r1, [r7, #8]
 80086fc:	607a      	str	r2, [r7, #4]
 80086fe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8008700:	2300      	movs	r3, #0
 8008702:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8008704:	f7ff ff5c 	bl	80085c0 <__NVIC_GetPriorityGrouping>
 8008708:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800870a:	687a      	ldr	r2, [r7, #4]
 800870c:	68b9      	ldr	r1, [r7, #8]
 800870e:	6978      	ldr	r0, [r7, #20]
 8008710:	f7ff ff8e 	bl	8008630 <NVIC_EncodePriority>
 8008714:	4602      	mov	r2, r0
 8008716:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800871a:	4611      	mov	r1, r2
 800871c:	4618      	mov	r0, r3
 800871e:	f7ff ff5d 	bl	80085dc <__NVIC_SetPriority>
}
 8008722:	bf00      	nop
 8008724:	3718      	adds	r7, #24
 8008726:	46bd      	mov	sp, r7
 8008728:	bd80      	pop	{r7, pc}

0800872a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800872a:	b580      	push	{r7, lr}
 800872c:	b082      	sub	sp, #8
 800872e:	af00      	add	r7, sp, #0
 8008730:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8008732:	6878      	ldr	r0, [r7, #4]
 8008734:	f7ff ffb0 	bl	8008698 <SysTick_Config>
 8008738:	4603      	mov	r3, r0
}
 800873a:	4618      	mov	r0, r3
 800873c:	3708      	adds	r7, #8
 800873e:	46bd      	mov	sp, r7
 8008740:	bd80      	pop	{r7, pc}
	...

08008744 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8008744:	b580      	push	{r7, lr}
 8008746:	b082      	sub	sp, #8
 8008748:	af00      	add	r7, sp, #0
 800874a:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	2b00      	cmp	r3, #0
 8008750:	d101      	bne.n	8008756 <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8008752:	2301      	movs	r3, #1
 8008754:	e054      	b.n	8008800 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8008756:	687b      	ldr	r3, [r7, #4]
 8008758:	7f5b      	ldrb	r3, [r3, #29]
 800875a:	b2db      	uxtb	r3, r3
 800875c:	2b00      	cmp	r3, #0
 800875e:	d105      	bne.n	800876c <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8008760:	687b      	ldr	r3, [r7, #4]
 8008762:	2200      	movs	r2, #0
 8008764:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8008766:	6878      	ldr	r0, [r7, #4]
 8008768:	f7ff fdd8 	bl	800831c <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 800876c:	687b      	ldr	r3, [r7, #4]
 800876e:	2202      	movs	r2, #2
 8008770:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	791b      	ldrb	r3, [r3, #4]
 8008776:	2b00      	cmp	r3, #0
 8008778:	d10c      	bne.n	8008794 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	681b      	ldr	r3, [r3, #0]
 800877e:	4a22      	ldr	r2, [pc, #136]	; (8008808 <HAL_CRC_Init+0xc4>)
 8008780:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	689a      	ldr	r2, [r3, #8]
 8008788:	687b      	ldr	r3, [r7, #4]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	f022 0218 	bic.w	r2, r2, #24
 8008790:	609a      	str	r2, [r3, #8]
 8008792:	e00c      	b.n	80087ae <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8008794:	687b      	ldr	r3, [r7, #4]
 8008796:	6899      	ldr	r1, [r3, #8]
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	68db      	ldr	r3, [r3, #12]
 800879c:	461a      	mov	r2, r3
 800879e:	6878      	ldr	r0, [r7, #4]
 80087a0:	f000 f834 	bl	800880c <HAL_CRCEx_Polynomial_Set>
 80087a4:	4603      	mov	r3, r0
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d001      	beq.n	80087ae <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 80087aa:	2301      	movs	r3, #1
 80087ac:	e028      	b.n	8008800 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	795b      	ldrb	r3, [r3, #5]
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d105      	bne.n	80087c2 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	f04f 32ff 	mov.w	r2, #4294967295
 80087be:	611a      	str	r2, [r3, #16]
 80087c0:	e004      	b.n	80087cc <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80087c2:	687b      	ldr	r3, [r7, #4]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	687a      	ldr	r2, [r7, #4]
 80087c8:	6912      	ldr	r2, [r2, #16]
 80087ca:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	681b      	ldr	r3, [r3, #0]
 80087d0:	689b      	ldr	r3, [r3, #8]
 80087d2:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	695a      	ldr	r2, [r3, #20]
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	681b      	ldr	r3, [r3, #0]
 80087de:	430a      	orrs	r2, r1
 80087e0:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	689b      	ldr	r3, [r3, #8]
 80087e8:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	699a      	ldr	r2, [r3, #24]
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	430a      	orrs	r2, r1
 80087f6:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 80087f8:	687b      	ldr	r3, [r7, #4]
 80087fa:	2201      	movs	r2, #1
 80087fc:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 80087fe:	2300      	movs	r3, #0
}
 8008800:	4618      	mov	r0, r3
 8008802:	3708      	adds	r7, #8
 8008804:	46bd      	mov	sp, r7
 8008806:	bd80      	pop	{r7, pc}
 8008808:	04c11db7 	.word	0x04c11db7

0800880c <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 800880c:	b480      	push	{r7}
 800880e:	b087      	sub	sp, #28
 8008810:	af00      	add	r7, sp, #0
 8008812:	60f8      	str	r0, [r7, #12]
 8008814:	60b9      	str	r1, [r7, #8]
 8008816:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008818:	2300      	movs	r3, #0
 800881a:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800881c:	231f      	movs	r3, #31
 800881e:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8008820:	bf00      	nop
 8008822:	693b      	ldr	r3, [r7, #16]
 8008824:	1e5a      	subs	r2, r3, #1
 8008826:	613a      	str	r2, [r7, #16]
 8008828:	2b00      	cmp	r3, #0
 800882a:	d009      	beq.n	8008840 <HAL_CRCEx_Polynomial_Set+0x34>
 800882c:	693b      	ldr	r3, [r7, #16]
 800882e:	f003 031f 	and.w	r3, r3, #31
 8008832:	68ba      	ldr	r2, [r7, #8]
 8008834:	fa22 f303 	lsr.w	r3, r2, r3
 8008838:	f003 0301 	and.w	r3, r3, #1
 800883c:	2b00      	cmp	r3, #0
 800883e:	d0f0      	beq.n	8008822 <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	2b18      	cmp	r3, #24
 8008844:	d846      	bhi.n	80088d4 <HAL_CRCEx_Polynomial_Set+0xc8>
 8008846:	a201      	add	r2, pc, #4	; (adr r2, 800884c <HAL_CRCEx_Polynomial_Set+0x40>)
 8008848:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800884c:	080088db 	.word	0x080088db
 8008850:	080088d5 	.word	0x080088d5
 8008854:	080088d5 	.word	0x080088d5
 8008858:	080088d5 	.word	0x080088d5
 800885c:	080088d5 	.word	0x080088d5
 8008860:	080088d5 	.word	0x080088d5
 8008864:	080088d5 	.word	0x080088d5
 8008868:	080088d5 	.word	0x080088d5
 800886c:	080088c9 	.word	0x080088c9
 8008870:	080088d5 	.word	0x080088d5
 8008874:	080088d5 	.word	0x080088d5
 8008878:	080088d5 	.word	0x080088d5
 800887c:	080088d5 	.word	0x080088d5
 8008880:	080088d5 	.word	0x080088d5
 8008884:	080088d5 	.word	0x080088d5
 8008888:	080088d5 	.word	0x080088d5
 800888c:	080088bd 	.word	0x080088bd
 8008890:	080088d5 	.word	0x080088d5
 8008894:	080088d5 	.word	0x080088d5
 8008898:	080088d5 	.word	0x080088d5
 800889c:	080088d5 	.word	0x080088d5
 80088a0:	080088d5 	.word	0x080088d5
 80088a4:	080088d5 	.word	0x080088d5
 80088a8:	080088d5 	.word	0x080088d5
 80088ac:	080088b1 	.word	0x080088b1
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 80088b0:	693b      	ldr	r3, [r7, #16]
 80088b2:	2b06      	cmp	r3, #6
 80088b4:	d913      	bls.n	80088de <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 80088b6:	2301      	movs	r3, #1
 80088b8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80088ba:	e010      	b.n	80088de <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 80088bc:	693b      	ldr	r3, [r7, #16]
 80088be:	2b07      	cmp	r3, #7
 80088c0:	d90f      	bls.n	80088e2 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 80088c2:	2301      	movs	r3, #1
 80088c4:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80088c6:	e00c      	b.n	80088e2 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 80088c8:	693b      	ldr	r3, [r7, #16]
 80088ca:	2b0f      	cmp	r3, #15
 80088cc:	d90b      	bls.n	80088e6 <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 80088ce:	2301      	movs	r3, #1
 80088d0:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80088d2:	e008      	b.n	80088e6 <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 80088d4:	2301      	movs	r3, #1
 80088d6:	75fb      	strb	r3, [r7, #23]
      break;
 80088d8:	e006      	b.n	80088e8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80088da:	bf00      	nop
 80088dc:	e004      	b.n	80088e8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80088de:	bf00      	nop
 80088e0:	e002      	b.n	80088e8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80088e2:	bf00      	nop
 80088e4:	e000      	b.n	80088e8 <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80088e6:	bf00      	nop
  }
  if (status == HAL_OK)
 80088e8:	7dfb      	ldrb	r3, [r7, #23]
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d10d      	bne.n	800890a <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	681b      	ldr	r3, [r3, #0]
 80088f2:	68ba      	ldr	r2, [r7, #8]
 80088f4:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	681b      	ldr	r3, [r3, #0]
 80088fa:	689b      	ldr	r3, [r3, #8]
 80088fc:	f023 0118 	bic.w	r1, r3, #24
 8008900:	68fb      	ldr	r3, [r7, #12]
 8008902:	681b      	ldr	r3, [r3, #0]
 8008904:	687a      	ldr	r2, [r7, #4]
 8008906:	430a      	orrs	r2, r1
 8008908:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 800890a:	7dfb      	ldrb	r3, [r7, #23]
}
 800890c:	4618      	mov	r0, r3
 800890e:	371c      	adds	r7, #28
 8008910:	46bd      	mov	sp, r7
 8008912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008916:	4770      	bx	lr

08008918 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008918:	b480      	push	{r7}
 800891a:	b089      	sub	sp, #36	; 0x24
 800891c:	af00      	add	r7, sp, #0
 800891e:	6078      	str	r0, [r7, #4]
 8008920:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8008922:	2300      	movs	r3, #0
 8008924:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8008926:	2300      	movs	r3, #0
 8008928:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800892a:	2300      	movs	r3, #0
 800892c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800892e:	2300      	movs	r3, #0
 8008930:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8008932:	2300      	movs	r3, #0
 8008934:	61fb      	str	r3, [r7, #28]
 8008936:	e169      	b.n	8008c0c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8008938:	2201      	movs	r2, #1
 800893a:	69fb      	ldr	r3, [r7, #28]
 800893c:	fa02 f303 	lsl.w	r3, r2, r3
 8008940:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008942:	683b      	ldr	r3, [r7, #0]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	697a      	ldr	r2, [r7, #20]
 8008948:	4013      	ands	r3, r2
 800894a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800894c:	693a      	ldr	r2, [r7, #16]
 800894e:	697b      	ldr	r3, [r7, #20]
 8008950:	429a      	cmp	r2, r3
 8008952:	f040 8158 	bne.w	8008c06 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8008956:	683b      	ldr	r3, [r7, #0]
 8008958:	685b      	ldr	r3, [r3, #4]
 800895a:	2b01      	cmp	r3, #1
 800895c:	d00b      	beq.n	8008976 <HAL_GPIO_Init+0x5e>
 800895e:	683b      	ldr	r3, [r7, #0]
 8008960:	685b      	ldr	r3, [r3, #4]
 8008962:	2b02      	cmp	r3, #2
 8008964:	d007      	beq.n	8008976 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008966:	683b      	ldr	r3, [r7, #0]
 8008968:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800896a:	2b11      	cmp	r3, #17
 800896c:	d003      	beq.n	8008976 <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800896e:	683b      	ldr	r3, [r7, #0]
 8008970:	685b      	ldr	r3, [r3, #4]
 8008972:	2b12      	cmp	r3, #18
 8008974:	d130      	bne.n	80089d8 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8008976:	687b      	ldr	r3, [r7, #4]
 8008978:	689b      	ldr	r3, [r3, #8]
 800897a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 800897c:	69fb      	ldr	r3, [r7, #28]
 800897e:	005b      	lsls	r3, r3, #1
 8008980:	2203      	movs	r2, #3
 8008982:	fa02 f303 	lsl.w	r3, r2, r3
 8008986:	43db      	mvns	r3, r3
 8008988:	69ba      	ldr	r2, [r7, #24]
 800898a:	4013      	ands	r3, r2
 800898c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 800898e:	683b      	ldr	r3, [r7, #0]
 8008990:	68da      	ldr	r2, [r3, #12]
 8008992:	69fb      	ldr	r3, [r7, #28]
 8008994:	005b      	lsls	r3, r3, #1
 8008996:	fa02 f303 	lsl.w	r3, r2, r3
 800899a:	69ba      	ldr	r2, [r7, #24]
 800899c:	4313      	orrs	r3, r2
 800899e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	69ba      	ldr	r2, [r7, #24]
 80089a4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	685b      	ldr	r3, [r3, #4]
 80089aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80089ac:	2201      	movs	r2, #1
 80089ae:	69fb      	ldr	r3, [r7, #28]
 80089b0:	fa02 f303 	lsl.w	r3, r2, r3
 80089b4:	43db      	mvns	r3, r3
 80089b6:	69ba      	ldr	r2, [r7, #24]
 80089b8:	4013      	ands	r3, r2
 80089ba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80089bc:	683b      	ldr	r3, [r7, #0]
 80089be:	685b      	ldr	r3, [r3, #4]
 80089c0:	091b      	lsrs	r3, r3, #4
 80089c2:	f003 0201 	and.w	r2, r3, #1
 80089c6:	69fb      	ldr	r3, [r7, #28]
 80089c8:	fa02 f303 	lsl.w	r3, r2, r3
 80089cc:	69ba      	ldr	r2, [r7, #24]
 80089ce:	4313      	orrs	r3, r2
 80089d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	69ba      	ldr	r2, [r7, #24]
 80089d6:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	68db      	ldr	r3, [r3, #12]
 80089dc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80089de:	69fb      	ldr	r3, [r7, #28]
 80089e0:	005b      	lsls	r3, r3, #1
 80089e2:	2203      	movs	r2, #3
 80089e4:	fa02 f303 	lsl.w	r3, r2, r3
 80089e8:	43db      	mvns	r3, r3
 80089ea:	69ba      	ldr	r2, [r7, #24]
 80089ec:	4013      	ands	r3, r2
 80089ee:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80089f0:	683b      	ldr	r3, [r7, #0]
 80089f2:	689a      	ldr	r2, [r3, #8]
 80089f4:	69fb      	ldr	r3, [r7, #28]
 80089f6:	005b      	lsls	r3, r3, #1
 80089f8:	fa02 f303 	lsl.w	r3, r2, r3
 80089fc:	69ba      	ldr	r2, [r7, #24]
 80089fe:	4313      	orrs	r3, r2
 8008a00:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	69ba      	ldr	r2, [r7, #24]
 8008a06:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008a08:	683b      	ldr	r3, [r7, #0]
 8008a0a:	685b      	ldr	r3, [r3, #4]
 8008a0c:	2b02      	cmp	r3, #2
 8008a0e:	d003      	beq.n	8008a18 <HAL_GPIO_Init+0x100>
 8008a10:	683b      	ldr	r3, [r7, #0]
 8008a12:	685b      	ldr	r3, [r3, #4]
 8008a14:	2b12      	cmp	r3, #18
 8008a16:	d123      	bne.n	8008a60 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8008a18:	69fb      	ldr	r3, [r7, #28]
 8008a1a:	08da      	lsrs	r2, r3, #3
 8008a1c:	687b      	ldr	r3, [r7, #4]
 8008a1e:	3208      	adds	r2, #8
 8008a20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008a24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8008a26:	69fb      	ldr	r3, [r7, #28]
 8008a28:	f003 0307 	and.w	r3, r3, #7
 8008a2c:	009b      	lsls	r3, r3, #2
 8008a2e:	220f      	movs	r2, #15
 8008a30:	fa02 f303 	lsl.w	r3, r2, r3
 8008a34:	43db      	mvns	r3, r3
 8008a36:	69ba      	ldr	r2, [r7, #24]
 8008a38:	4013      	ands	r3, r2
 8008a3a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8008a3c:	683b      	ldr	r3, [r7, #0]
 8008a3e:	691a      	ldr	r2, [r3, #16]
 8008a40:	69fb      	ldr	r3, [r7, #28]
 8008a42:	f003 0307 	and.w	r3, r3, #7
 8008a46:	009b      	lsls	r3, r3, #2
 8008a48:	fa02 f303 	lsl.w	r3, r2, r3
 8008a4c:	69ba      	ldr	r2, [r7, #24]
 8008a4e:	4313      	orrs	r3, r2
 8008a50:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8008a52:	69fb      	ldr	r3, [r7, #28]
 8008a54:	08da      	lsrs	r2, r3, #3
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	3208      	adds	r2, #8
 8008a5a:	69b9      	ldr	r1, [r7, #24]
 8008a5c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8008a66:	69fb      	ldr	r3, [r7, #28]
 8008a68:	005b      	lsls	r3, r3, #1
 8008a6a:	2203      	movs	r2, #3
 8008a6c:	fa02 f303 	lsl.w	r3, r2, r3
 8008a70:	43db      	mvns	r3, r3
 8008a72:	69ba      	ldr	r2, [r7, #24]
 8008a74:	4013      	ands	r3, r2
 8008a76:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8008a78:	683b      	ldr	r3, [r7, #0]
 8008a7a:	685b      	ldr	r3, [r3, #4]
 8008a7c:	f003 0203 	and.w	r2, r3, #3
 8008a80:	69fb      	ldr	r3, [r7, #28]
 8008a82:	005b      	lsls	r3, r3, #1
 8008a84:	fa02 f303 	lsl.w	r3, r2, r3
 8008a88:	69ba      	ldr	r2, [r7, #24]
 8008a8a:	4313      	orrs	r3, r2
 8008a8c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	69ba      	ldr	r2, [r7, #24]
 8008a92:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8008a94:	683b      	ldr	r3, [r7, #0]
 8008a96:	685b      	ldr	r3, [r3, #4]
 8008a98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008a9c:	2b00      	cmp	r3, #0
 8008a9e:	f000 80b2 	beq.w	8008c06 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008aa2:	4b5f      	ldr	r3, [pc, #380]	; (8008c20 <HAL_GPIO_Init+0x308>)
 8008aa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008aa6:	4a5e      	ldr	r2, [pc, #376]	; (8008c20 <HAL_GPIO_Init+0x308>)
 8008aa8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008aac:	6453      	str	r3, [r2, #68]	; 0x44
 8008aae:	4b5c      	ldr	r3, [pc, #368]	; (8008c20 <HAL_GPIO_Init+0x308>)
 8008ab0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008ab2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008ab6:	60fb      	str	r3, [r7, #12]
 8008ab8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8008aba:	4a5a      	ldr	r2, [pc, #360]	; (8008c24 <HAL_GPIO_Init+0x30c>)
 8008abc:	69fb      	ldr	r3, [r7, #28]
 8008abe:	089b      	lsrs	r3, r3, #2
 8008ac0:	3302      	adds	r3, #2
 8008ac2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008ac6:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8008ac8:	69fb      	ldr	r3, [r7, #28]
 8008aca:	f003 0303 	and.w	r3, r3, #3
 8008ace:	009b      	lsls	r3, r3, #2
 8008ad0:	220f      	movs	r2, #15
 8008ad2:	fa02 f303 	lsl.w	r3, r2, r3
 8008ad6:	43db      	mvns	r3, r3
 8008ad8:	69ba      	ldr	r2, [r7, #24]
 8008ada:	4013      	ands	r3, r2
 8008adc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	4a51      	ldr	r2, [pc, #324]	; (8008c28 <HAL_GPIO_Init+0x310>)
 8008ae2:	4293      	cmp	r3, r2
 8008ae4:	d02b      	beq.n	8008b3e <HAL_GPIO_Init+0x226>
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	4a50      	ldr	r2, [pc, #320]	; (8008c2c <HAL_GPIO_Init+0x314>)
 8008aea:	4293      	cmp	r3, r2
 8008aec:	d025      	beq.n	8008b3a <HAL_GPIO_Init+0x222>
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	4a4f      	ldr	r2, [pc, #316]	; (8008c30 <HAL_GPIO_Init+0x318>)
 8008af2:	4293      	cmp	r3, r2
 8008af4:	d01f      	beq.n	8008b36 <HAL_GPIO_Init+0x21e>
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	4a4e      	ldr	r2, [pc, #312]	; (8008c34 <HAL_GPIO_Init+0x31c>)
 8008afa:	4293      	cmp	r3, r2
 8008afc:	d019      	beq.n	8008b32 <HAL_GPIO_Init+0x21a>
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	4a4d      	ldr	r2, [pc, #308]	; (8008c38 <HAL_GPIO_Init+0x320>)
 8008b02:	4293      	cmp	r3, r2
 8008b04:	d013      	beq.n	8008b2e <HAL_GPIO_Init+0x216>
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	4a4c      	ldr	r2, [pc, #304]	; (8008c3c <HAL_GPIO_Init+0x324>)
 8008b0a:	4293      	cmp	r3, r2
 8008b0c:	d00d      	beq.n	8008b2a <HAL_GPIO_Init+0x212>
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	4a4b      	ldr	r2, [pc, #300]	; (8008c40 <HAL_GPIO_Init+0x328>)
 8008b12:	4293      	cmp	r3, r2
 8008b14:	d007      	beq.n	8008b26 <HAL_GPIO_Init+0x20e>
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	4a4a      	ldr	r2, [pc, #296]	; (8008c44 <HAL_GPIO_Init+0x32c>)
 8008b1a:	4293      	cmp	r3, r2
 8008b1c:	d101      	bne.n	8008b22 <HAL_GPIO_Init+0x20a>
 8008b1e:	2307      	movs	r3, #7
 8008b20:	e00e      	b.n	8008b40 <HAL_GPIO_Init+0x228>
 8008b22:	2308      	movs	r3, #8
 8008b24:	e00c      	b.n	8008b40 <HAL_GPIO_Init+0x228>
 8008b26:	2306      	movs	r3, #6
 8008b28:	e00a      	b.n	8008b40 <HAL_GPIO_Init+0x228>
 8008b2a:	2305      	movs	r3, #5
 8008b2c:	e008      	b.n	8008b40 <HAL_GPIO_Init+0x228>
 8008b2e:	2304      	movs	r3, #4
 8008b30:	e006      	b.n	8008b40 <HAL_GPIO_Init+0x228>
 8008b32:	2303      	movs	r3, #3
 8008b34:	e004      	b.n	8008b40 <HAL_GPIO_Init+0x228>
 8008b36:	2302      	movs	r3, #2
 8008b38:	e002      	b.n	8008b40 <HAL_GPIO_Init+0x228>
 8008b3a:	2301      	movs	r3, #1
 8008b3c:	e000      	b.n	8008b40 <HAL_GPIO_Init+0x228>
 8008b3e:	2300      	movs	r3, #0
 8008b40:	69fa      	ldr	r2, [r7, #28]
 8008b42:	f002 0203 	and.w	r2, r2, #3
 8008b46:	0092      	lsls	r2, r2, #2
 8008b48:	4093      	lsls	r3, r2
 8008b4a:	69ba      	ldr	r2, [r7, #24]
 8008b4c:	4313      	orrs	r3, r2
 8008b4e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8008b50:	4934      	ldr	r1, [pc, #208]	; (8008c24 <HAL_GPIO_Init+0x30c>)
 8008b52:	69fb      	ldr	r3, [r7, #28]
 8008b54:	089b      	lsrs	r3, r3, #2
 8008b56:	3302      	adds	r3, #2
 8008b58:	69ba      	ldr	r2, [r7, #24]
 8008b5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8008b5e:	4b3a      	ldr	r3, [pc, #232]	; (8008c48 <HAL_GPIO_Init+0x330>)
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008b64:	693b      	ldr	r3, [r7, #16]
 8008b66:	43db      	mvns	r3, r3
 8008b68:	69ba      	ldr	r2, [r7, #24]
 8008b6a:	4013      	ands	r3, r2
 8008b6c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8008b6e:	683b      	ldr	r3, [r7, #0]
 8008b70:	685b      	ldr	r3, [r3, #4]
 8008b72:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d003      	beq.n	8008b82 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8008b7a:	69ba      	ldr	r2, [r7, #24]
 8008b7c:	693b      	ldr	r3, [r7, #16]
 8008b7e:	4313      	orrs	r3, r2
 8008b80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8008b82:	4a31      	ldr	r2, [pc, #196]	; (8008c48 <HAL_GPIO_Init+0x330>)
 8008b84:	69bb      	ldr	r3, [r7, #24]
 8008b86:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8008b88:	4b2f      	ldr	r3, [pc, #188]	; (8008c48 <HAL_GPIO_Init+0x330>)
 8008b8a:	685b      	ldr	r3, [r3, #4]
 8008b8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008b8e:	693b      	ldr	r3, [r7, #16]
 8008b90:	43db      	mvns	r3, r3
 8008b92:	69ba      	ldr	r2, [r7, #24]
 8008b94:	4013      	ands	r3, r2
 8008b96:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8008b98:	683b      	ldr	r3, [r7, #0]
 8008b9a:	685b      	ldr	r3, [r3, #4]
 8008b9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	d003      	beq.n	8008bac <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8008ba4:	69ba      	ldr	r2, [r7, #24]
 8008ba6:	693b      	ldr	r3, [r7, #16]
 8008ba8:	4313      	orrs	r3, r2
 8008baa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8008bac:	4a26      	ldr	r2, [pc, #152]	; (8008c48 <HAL_GPIO_Init+0x330>)
 8008bae:	69bb      	ldr	r3, [r7, #24]
 8008bb0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8008bb2:	4b25      	ldr	r3, [pc, #148]	; (8008c48 <HAL_GPIO_Init+0x330>)
 8008bb4:	689b      	ldr	r3, [r3, #8]
 8008bb6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008bb8:	693b      	ldr	r3, [r7, #16]
 8008bba:	43db      	mvns	r3, r3
 8008bbc:	69ba      	ldr	r2, [r7, #24]
 8008bbe:	4013      	ands	r3, r2
 8008bc0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8008bc2:	683b      	ldr	r3, [r7, #0]
 8008bc4:	685b      	ldr	r3, [r3, #4]
 8008bc6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	d003      	beq.n	8008bd6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8008bce:	69ba      	ldr	r2, [r7, #24]
 8008bd0:	693b      	ldr	r3, [r7, #16]
 8008bd2:	4313      	orrs	r3, r2
 8008bd4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8008bd6:	4a1c      	ldr	r2, [pc, #112]	; (8008c48 <HAL_GPIO_Init+0x330>)
 8008bd8:	69bb      	ldr	r3, [r7, #24]
 8008bda:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8008bdc:	4b1a      	ldr	r3, [pc, #104]	; (8008c48 <HAL_GPIO_Init+0x330>)
 8008bde:	68db      	ldr	r3, [r3, #12]
 8008be0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008be2:	693b      	ldr	r3, [r7, #16]
 8008be4:	43db      	mvns	r3, r3
 8008be6:	69ba      	ldr	r2, [r7, #24]
 8008be8:	4013      	ands	r3, r2
 8008bea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8008bec:	683b      	ldr	r3, [r7, #0]
 8008bee:	685b      	ldr	r3, [r3, #4]
 8008bf0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d003      	beq.n	8008c00 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8008bf8:	69ba      	ldr	r2, [r7, #24]
 8008bfa:	693b      	ldr	r3, [r7, #16]
 8008bfc:	4313      	orrs	r3, r2
 8008bfe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8008c00:	4a11      	ldr	r2, [pc, #68]	; (8008c48 <HAL_GPIO_Init+0x330>)
 8008c02:	69bb      	ldr	r3, [r7, #24]
 8008c04:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8008c06:	69fb      	ldr	r3, [r7, #28]
 8008c08:	3301      	adds	r3, #1
 8008c0a:	61fb      	str	r3, [r7, #28]
 8008c0c:	69fb      	ldr	r3, [r7, #28]
 8008c0e:	2b0f      	cmp	r3, #15
 8008c10:	f67f ae92 	bls.w	8008938 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8008c14:	bf00      	nop
 8008c16:	3724      	adds	r7, #36	; 0x24
 8008c18:	46bd      	mov	sp, r7
 8008c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c1e:	4770      	bx	lr
 8008c20:	40023800 	.word	0x40023800
 8008c24:	40013800 	.word	0x40013800
 8008c28:	40020000 	.word	0x40020000
 8008c2c:	40020400 	.word	0x40020400
 8008c30:	40020800 	.word	0x40020800
 8008c34:	40020c00 	.word	0x40020c00
 8008c38:	40021000 	.word	0x40021000
 8008c3c:	40021400 	.word	0x40021400
 8008c40:	40021800 	.word	0x40021800
 8008c44:	40021c00 	.word	0x40021c00
 8008c48:	40013c00 	.word	0x40013c00

08008c4c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8008c4c:	b580      	push	{r7, lr}
 8008c4e:	b082      	sub	sp, #8
 8008c50:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8008c52:	2300      	movs	r3, #0
 8008c54:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8008c56:	4b23      	ldr	r3, [pc, #140]	; (8008ce4 <HAL_PWREx_EnableOverDrive+0x98>)
 8008c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c5a:	4a22      	ldr	r2, [pc, #136]	; (8008ce4 <HAL_PWREx_EnableOverDrive+0x98>)
 8008c5c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008c60:	6413      	str	r3, [r2, #64]	; 0x40
 8008c62:	4b20      	ldr	r3, [pc, #128]	; (8008ce4 <HAL_PWREx_EnableOverDrive+0x98>)
 8008c64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c66:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008c6a:	603b      	str	r3, [r7, #0]
 8008c6c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8008c6e:	4b1e      	ldr	r3, [pc, #120]	; (8008ce8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	4a1d      	ldr	r2, [pc, #116]	; (8008ce8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008c74:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008c78:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008c7a:	f7ff fc71 	bl	8008560 <HAL_GetTick>
 8008c7e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8008c80:	e009      	b.n	8008c96 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8008c82:	f7ff fc6d 	bl	8008560 <HAL_GetTick>
 8008c86:	4602      	mov	r2, r0
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	1ad3      	subs	r3, r2, r3
 8008c8c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008c90:	d901      	bls.n	8008c96 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8008c92:	2303      	movs	r3, #3
 8008c94:	e022      	b.n	8008cdc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8008c96:	4b14      	ldr	r3, [pc, #80]	; (8008ce8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008c98:	685b      	ldr	r3, [r3, #4]
 8008c9a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008c9e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008ca2:	d1ee      	bne.n	8008c82 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8008ca4:	4b10      	ldr	r3, [pc, #64]	; (8008ce8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	4a0f      	ldr	r2, [pc, #60]	; (8008ce8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008caa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008cae:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008cb0:	f7ff fc56 	bl	8008560 <HAL_GetTick>
 8008cb4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8008cb6:	e009      	b.n	8008ccc <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8008cb8:	f7ff fc52 	bl	8008560 <HAL_GetTick>
 8008cbc:	4602      	mov	r2, r0
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	1ad3      	subs	r3, r2, r3
 8008cc2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008cc6:	d901      	bls.n	8008ccc <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8008cc8:	2303      	movs	r3, #3
 8008cca:	e007      	b.n	8008cdc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8008ccc:	4b06      	ldr	r3, [pc, #24]	; (8008ce8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008cce:	685b      	ldr	r3, [r3, #4]
 8008cd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008cd4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008cd8:	d1ee      	bne.n	8008cb8 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8008cda:	2300      	movs	r3, #0
}
 8008cdc:	4618      	mov	r0, r3
 8008cde:	3708      	adds	r7, #8
 8008ce0:	46bd      	mov	sp, r7
 8008ce2:	bd80      	pop	{r7, pc}
 8008ce4:	40023800 	.word	0x40023800
 8008ce8:	40007000 	.word	0x40007000

08008cec <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008cec:	b580      	push	{r7, lr}
 8008cee:	b086      	sub	sp, #24
 8008cf0:	af00      	add	r7, sp, #0
 8008cf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8008cf4:	2300      	movs	r3, #0
 8008cf6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d101      	bne.n	8008d02 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8008cfe:	2301      	movs	r3, #1
 8008d00:	e291      	b.n	8009226 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008d02:	687b      	ldr	r3, [r7, #4]
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	f003 0301 	and.w	r3, r3, #1
 8008d0a:	2b00      	cmp	r3, #0
 8008d0c:	f000 8087 	beq.w	8008e1e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8008d10:	4b96      	ldr	r3, [pc, #600]	; (8008f6c <HAL_RCC_OscConfig+0x280>)
 8008d12:	689b      	ldr	r3, [r3, #8]
 8008d14:	f003 030c 	and.w	r3, r3, #12
 8008d18:	2b04      	cmp	r3, #4
 8008d1a:	d00c      	beq.n	8008d36 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008d1c:	4b93      	ldr	r3, [pc, #588]	; (8008f6c <HAL_RCC_OscConfig+0x280>)
 8008d1e:	689b      	ldr	r3, [r3, #8]
 8008d20:	f003 030c 	and.w	r3, r3, #12
 8008d24:	2b08      	cmp	r3, #8
 8008d26:	d112      	bne.n	8008d4e <HAL_RCC_OscConfig+0x62>
 8008d28:	4b90      	ldr	r3, [pc, #576]	; (8008f6c <HAL_RCC_OscConfig+0x280>)
 8008d2a:	685b      	ldr	r3, [r3, #4]
 8008d2c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008d30:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008d34:	d10b      	bne.n	8008d4e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008d36:	4b8d      	ldr	r3, [pc, #564]	; (8008f6c <HAL_RCC_OscConfig+0x280>)
 8008d38:	681b      	ldr	r3, [r3, #0]
 8008d3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008d3e:	2b00      	cmp	r3, #0
 8008d40:	d06c      	beq.n	8008e1c <HAL_RCC_OscConfig+0x130>
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	685b      	ldr	r3, [r3, #4]
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	d168      	bne.n	8008e1c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8008d4a:	2301      	movs	r3, #1
 8008d4c:	e26b      	b.n	8009226 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008d4e:	687b      	ldr	r3, [r7, #4]
 8008d50:	685b      	ldr	r3, [r3, #4]
 8008d52:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008d56:	d106      	bne.n	8008d66 <HAL_RCC_OscConfig+0x7a>
 8008d58:	4b84      	ldr	r3, [pc, #528]	; (8008f6c <HAL_RCC_OscConfig+0x280>)
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	4a83      	ldr	r2, [pc, #524]	; (8008f6c <HAL_RCC_OscConfig+0x280>)
 8008d5e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008d62:	6013      	str	r3, [r2, #0]
 8008d64:	e02e      	b.n	8008dc4 <HAL_RCC_OscConfig+0xd8>
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	685b      	ldr	r3, [r3, #4]
 8008d6a:	2b00      	cmp	r3, #0
 8008d6c:	d10c      	bne.n	8008d88 <HAL_RCC_OscConfig+0x9c>
 8008d6e:	4b7f      	ldr	r3, [pc, #508]	; (8008f6c <HAL_RCC_OscConfig+0x280>)
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	4a7e      	ldr	r2, [pc, #504]	; (8008f6c <HAL_RCC_OscConfig+0x280>)
 8008d74:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008d78:	6013      	str	r3, [r2, #0]
 8008d7a:	4b7c      	ldr	r3, [pc, #496]	; (8008f6c <HAL_RCC_OscConfig+0x280>)
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	4a7b      	ldr	r2, [pc, #492]	; (8008f6c <HAL_RCC_OscConfig+0x280>)
 8008d80:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008d84:	6013      	str	r3, [r2, #0]
 8008d86:	e01d      	b.n	8008dc4 <HAL_RCC_OscConfig+0xd8>
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	685b      	ldr	r3, [r3, #4]
 8008d8c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008d90:	d10c      	bne.n	8008dac <HAL_RCC_OscConfig+0xc0>
 8008d92:	4b76      	ldr	r3, [pc, #472]	; (8008f6c <HAL_RCC_OscConfig+0x280>)
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	4a75      	ldr	r2, [pc, #468]	; (8008f6c <HAL_RCC_OscConfig+0x280>)
 8008d98:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008d9c:	6013      	str	r3, [r2, #0]
 8008d9e:	4b73      	ldr	r3, [pc, #460]	; (8008f6c <HAL_RCC_OscConfig+0x280>)
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	4a72      	ldr	r2, [pc, #456]	; (8008f6c <HAL_RCC_OscConfig+0x280>)
 8008da4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008da8:	6013      	str	r3, [r2, #0]
 8008daa:	e00b      	b.n	8008dc4 <HAL_RCC_OscConfig+0xd8>
 8008dac:	4b6f      	ldr	r3, [pc, #444]	; (8008f6c <HAL_RCC_OscConfig+0x280>)
 8008dae:	681b      	ldr	r3, [r3, #0]
 8008db0:	4a6e      	ldr	r2, [pc, #440]	; (8008f6c <HAL_RCC_OscConfig+0x280>)
 8008db2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008db6:	6013      	str	r3, [r2, #0]
 8008db8:	4b6c      	ldr	r3, [pc, #432]	; (8008f6c <HAL_RCC_OscConfig+0x280>)
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	4a6b      	ldr	r2, [pc, #428]	; (8008f6c <HAL_RCC_OscConfig+0x280>)
 8008dbe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008dc2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	685b      	ldr	r3, [r3, #4]
 8008dc8:	2b00      	cmp	r3, #0
 8008dca:	d013      	beq.n	8008df4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008dcc:	f7ff fbc8 	bl	8008560 <HAL_GetTick>
 8008dd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008dd2:	e008      	b.n	8008de6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008dd4:	f7ff fbc4 	bl	8008560 <HAL_GetTick>
 8008dd8:	4602      	mov	r2, r0
 8008dda:	693b      	ldr	r3, [r7, #16]
 8008ddc:	1ad3      	subs	r3, r2, r3
 8008dde:	2b64      	cmp	r3, #100	; 0x64
 8008de0:	d901      	bls.n	8008de6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008de2:	2303      	movs	r3, #3
 8008de4:	e21f      	b.n	8009226 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008de6:	4b61      	ldr	r3, [pc, #388]	; (8008f6c <HAL_RCC_OscConfig+0x280>)
 8008de8:	681b      	ldr	r3, [r3, #0]
 8008dea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d0f0      	beq.n	8008dd4 <HAL_RCC_OscConfig+0xe8>
 8008df2:	e014      	b.n	8008e1e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008df4:	f7ff fbb4 	bl	8008560 <HAL_GetTick>
 8008df8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008dfa:	e008      	b.n	8008e0e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008dfc:	f7ff fbb0 	bl	8008560 <HAL_GetTick>
 8008e00:	4602      	mov	r2, r0
 8008e02:	693b      	ldr	r3, [r7, #16]
 8008e04:	1ad3      	subs	r3, r2, r3
 8008e06:	2b64      	cmp	r3, #100	; 0x64
 8008e08:	d901      	bls.n	8008e0e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8008e0a:	2303      	movs	r3, #3
 8008e0c:	e20b      	b.n	8009226 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008e0e:	4b57      	ldr	r3, [pc, #348]	; (8008f6c <HAL_RCC_OscConfig+0x280>)
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d1f0      	bne.n	8008dfc <HAL_RCC_OscConfig+0x110>
 8008e1a:	e000      	b.n	8008e1e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008e1c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008e1e:	687b      	ldr	r3, [r7, #4]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	f003 0302 	and.w	r3, r3, #2
 8008e26:	2b00      	cmp	r3, #0
 8008e28:	d069      	beq.n	8008efe <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8008e2a:	4b50      	ldr	r3, [pc, #320]	; (8008f6c <HAL_RCC_OscConfig+0x280>)
 8008e2c:	689b      	ldr	r3, [r3, #8]
 8008e2e:	f003 030c 	and.w	r3, r3, #12
 8008e32:	2b00      	cmp	r3, #0
 8008e34:	d00b      	beq.n	8008e4e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008e36:	4b4d      	ldr	r3, [pc, #308]	; (8008f6c <HAL_RCC_OscConfig+0x280>)
 8008e38:	689b      	ldr	r3, [r3, #8]
 8008e3a:	f003 030c 	and.w	r3, r3, #12
 8008e3e:	2b08      	cmp	r3, #8
 8008e40:	d11c      	bne.n	8008e7c <HAL_RCC_OscConfig+0x190>
 8008e42:	4b4a      	ldr	r3, [pc, #296]	; (8008f6c <HAL_RCC_OscConfig+0x280>)
 8008e44:	685b      	ldr	r3, [r3, #4]
 8008e46:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d116      	bne.n	8008e7c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008e4e:	4b47      	ldr	r3, [pc, #284]	; (8008f6c <HAL_RCC_OscConfig+0x280>)
 8008e50:	681b      	ldr	r3, [r3, #0]
 8008e52:	f003 0302 	and.w	r3, r3, #2
 8008e56:	2b00      	cmp	r3, #0
 8008e58:	d005      	beq.n	8008e66 <HAL_RCC_OscConfig+0x17a>
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	68db      	ldr	r3, [r3, #12]
 8008e5e:	2b01      	cmp	r3, #1
 8008e60:	d001      	beq.n	8008e66 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8008e62:	2301      	movs	r3, #1
 8008e64:	e1df      	b.n	8009226 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008e66:	4b41      	ldr	r3, [pc, #260]	; (8008f6c <HAL_RCC_OscConfig+0x280>)
 8008e68:	681b      	ldr	r3, [r3, #0]
 8008e6a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	691b      	ldr	r3, [r3, #16]
 8008e72:	00db      	lsls	r3, r3, #3
 8008e74:	493d      	ldr	r1, [pc, #244]	; (8008f6c <HAL_RCC_OscConfig+0x280>)
 8008e76:	4313      	orrs	r3, r2
 8008e78:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008e7a:	e040      	b.n	8008efe <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	68db      	ldr	r3, [r3, #12]
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d023      	beq.n	8008ecc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008e84:	4b39      	ldr	r3, [pc, #228]	; (8008f6c <HAL_RCC_OscConfig+0x280>)
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	4a38      	ldr	r2, [pc, #224]	; (8008f6c <HAL_RCC_OscConfig+0x280>)
 8008e8a:	f043 0301 	orr.w	r3, r3, #1
 8008e8e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008e90:	f7ff fb66 	bl	8008560 <HAL_GetTick>
 8008e94:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008e96:	e008      	b.n	8008eaa <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008e98:	f7ff fb62 	bl	8008560 <HAL_GetTick>
 8008e9c:	4602      	mov	r2, r0
 8008e9e:	693b      	ldr	r3, [r7, #16]
 8008ea0:	1ad3      	subs	r3, r2, r3
 8008ea2:	2b02      	cmp	r3, #2
 8008ea4:	d901      	bls.n	8008eaa <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8008ea6:	2303      	movs	r3, #3
 8008ea8:	e1bd      	b.n	8009226 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008eaa:	4b30      	ldr	r3, [pc, #192]	; (8008f6c <HAL_RCC_OscConfig+0x280>)
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	f003 0302 	and.w	r3, r3, #2
 8008eb2:	2b00      	cmp	r3, #0
 8008eb4:	d0f0      	beq.n	8008e98 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008eb6:	4b2d      	ldr	r3, [pc, #180]	; (8008f6c <HAL_RCC_OscConfig+0x280>)
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008ebe:	687b      	ldr	r3, [r7, #4]
 8008ec0:	691b      	ldr	r3, [r3, #16]
 8008ec2:	00db      	lsls	r3, r3, #3
 8008ec4:	4929      	ldr	r1, [pc, #164]	; (8008f6c <HAL_RCC_OscConfig+0x280>)
 8008ec6:	4313      	orrs	r3, r2
 8008ec8:	600b      	str	r3, [r1, #0]
 8008eca:	e018      	b.n	8008efe <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008ecc:	4b27      	ldr	r3, [pc, #156]	; (8008f6c <HAL_RCC_OscConfig+0x280>)
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	4a26      	ldr	r2, [pc, #152]	; (8008f6c <HAL_RCC_OscConfig+0x280>)
 8008ed2:	f023 0301 	bic.w	r3, r3, #1
 8008ed6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ed8:	f7ff fb42 	bl	8008560 <HAL_GetTick>
 8008edc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008ede:	e008      	b.n	8008ef2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008ee0:	f7ff fb3e 	bl	8008560 <HAL_GetTick>
 8008ee4:	4602      	mov	r2, r0
 8008ee6:	693b      	ldr	r3, [r7, #16]
 8008ee8:	1ad3      	subs	r3, r2, r3
 8008eea:	2b02      	cmp	r3, #2
 8008eec:	d901      	bls.n	8008ef2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8008eee:	2303      	movs	r3, #3
 8008ef0:	e199      	b.n	8009226 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008ef2:	4b1e      	ldr	r3, [pc, #120]	; (8008f6c <HAL_RCC_OscConfig+0x280>)
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	f003 0302 	and.w	r3, r3, #2
 8008efa:	2b00      	cmp	r3, #0
 8008efc:	d1f0      	bne.n	8008ee0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	f003 0308 	and.w	r3, r3, #8
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d038      	beq.n	8008f7c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8008f0a:	687b      	ldr	r3, [r7, #4]
 8008f0c:	695b      	ldr	r3, [r3, #20]
 8008f0e:	2b00      	cmp	r3, #0
 8008f10:	d019      	beq.n	8008f46 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008f12:	4b16      	ldr	r3, [pc, #88]	; (8008f6c <HAL_RCC_OscConfig+0x280>)
 8008f14:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008f16:	4a15      	ldr	r2, [pc, #84]	; (8008f6c <HAL_RCC_OscConfig+0x280>)
 8008f18:	f043 0301 	orr.w	r3, r3, #1
 8008f1c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008f1e:	f7ff fb1f 	bl	8008560 <HAL_GetTick>
 8008f22:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008f24:	e008      	b.n	8008f38 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008f26:	f7ff fb1b 	bl	8008560 <HAL_GetTick>
 8008f2a:	4602      	mov	r2, r0
 8008f2c:	693b      	ldr	r3, [r7, #16]
 8008f2e:	1ad3      	subs	r3, r2, r3
 8008f30:	2b02      	cmp	r3, #2
 8008f32:	d901      	bls.n	8008f38 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8008f34:	2303      	movs	r3, #3
 8008f36:	e176      	b.n	8009226 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008f38:	4b0c      	ldr	r3, [pc, #48]	; (8008f6c <HAL_RCC_OscConfig+0x280>)
 8008f3a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008f3c:	f003 0302 	and.w	r3, r3, #2
 8008f40:	2b00      	cmp	r3, #0
 8008f42:	d0f0      	beq.n	8008f26 <HAL_RCC_OscConfig+0x23a>
 8008f44:	e01a      	b.n	8008f7c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008f46:	4b09      	ldr	r3, [pc, #36]	; (8008f6c <HAL_RCC_OscConfig+0x280>)
 8008f48:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008f4a:	4a08      	ldr	r2, [pc, #32]	; (8008f6c <HAL_RCC_OscConfig+0x280>)
 8008f4c:	f023 0301 	bic.w	r3, r3, #1
 8008f50:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008f52:	f7ff fb05 	bl	8008560 <HAL_GetTick>
 8008f56:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008f58:	e00a      	b.n	8008f70 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008f5a:	f7ff fb01 	bl	8008560 <HAL_GetTick>
 8008f5e:	4602      	mov	r2, r0
 8008f60:	693b      	ldr	r3, [r7, #16]
 8008f62:	1ad3      	subs	r3, r2, r3
 8008f64:	2b02      	cmp	r3, #2
 8008f66:	d903      	bls.n	8008f70 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8008f68:	2303      	movs	r3, #3
 8008f6a:	e15c      	b.n	8009226 <HAL_RCC_OscConfig+0x53a>
 8008f6c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008f70:	4b91      	ldr	r3, [pc, #580]	; (80091b8 <HAL_RCC_OscConfig+0x4cc>)
 8008f72:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008f74:	f003 0302 	and.w	r3, r3, #2
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d1ee      	bne.n	8008f5a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	f003 0304 	and.w	r3, r3, #4
 8008f84:	2b00      	cmp	r3, #0
 8008f86:	f000 80a4 	beq.w	80090d2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008f8a:	4b8b      	ldr	r3, [pc, #556]	; (80091b8 <HAL_RCC_OscConfig+0x4cc>)
 8008f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008f92:	2b00      	cmp	r3, #0
 8008f94:	d10d      	bne.n	8008fb2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8008f96:	4b88      	ldr	r3, [pc, #544]	; (80091b8 <HAL_RCC_OscConfig+0x4cc>)
 8008f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008f9a:	4a87      	ldr	r2, [pc, #540]	; (80091b8 <HAL_RCC_OscConfig+0x4cc>)
 8008f9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008fa0:	6413      	str	r3, [r2, #64]	; 0x40
 8008fa2:	4b85      	ldr	r3, [pc, #532]	; (80091b8 <HAL_RCC_OscConfig+0x4cc>)
 8008fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fa6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008faa:	60bb      	str	r3, [r7, #8]
 8008fac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008fae:	2301      	movs	r3, #1
 8008fb0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008fb2:	4b82      	ldr	r3, [pc, #520]	; (80091bc <HAL_RCC_OscConfig+0x4d0>)
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d118      	bne.n	8008ff0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8008fbe:	4b7f      	ldr	r3, [pc, #508]	; (80091bc <HAL_RCC_OscConfig+0x4d0>)
 8008fc0:	681b      	ldr	r3, [r3, #0]
 8008fc2:	4a7e      	ldr	r2, [pc, #504]	; (80091bc <HAL_RCC_OscConfig+0x4d0>)
 8008fc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008fc8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8008fca:	f7ff fac9 	bl	8008560 <HAL_GetTick>
 8008fce:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008fd0:	e008      	b.n	8008fe4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008fd2:	f7ff fac5 	bl	8008560 <HAL_GetTick>
 8008fd6:	4602      	mov	r2, r0
 8008fd8:	693b      	ldr	r3, [r7, #16]
 8008fda:	1ad3      	subs	r3, r2, r3
 8008fdc:	2b64      	cmp	r3, #100	; 0x64
 8008fde:	d901      	bls.n	8008fe4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8008fe0:	2303      	movs	r3, #3
 8008fe2:	e120      	b.n	8009226 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008fe4:	4b75      	ldr	r3, [pc, #468]	; (80091bc <HAL_RCC_OscConfig+0x4d0>)
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008fec:	2b00      	cmp	r3, #0
 8008fee:	d0f0      	beq.n	8008fd2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008ff0:	687b      	ldr	r3, [r7, #4]
 8008ff2:	689b      	ldr	r3, [r3, #8]
 8008ff4:	2b01      	cmp	r3, #1
 8008ff6:	d106      	bne.n	8009006 <HAL_RCC_OscConfig+0x31a>
 8008ff8:	4b6f      	ldr	r3, [pc, #444]	; (80091b8 <HAL_RCC_OscConfig+0x4cc>)
 8008ffa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008ffc:	4a6e      	ldr	r2, [pc, #440]	; (80091b8 <HAL_RCC_OscConfig+0x4cc>)
 8008ffe:	f043 0301 	orr.w	r3, r3, #1
 8009002:	6713      	str	r3, [r2, #112]	; 0x70
 8009004:	e02d      	b.n	8009062 <HAL_RCC_OscConfig+0x376>
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	689b      	ldr	r3, [r3, #8]
 800900a:	2b00      	cmp	r3, #0
 800900c:	d10c      	bne.n	8009028 <HAL_RCC_OscConfig+0x33c>
 800900e:	4b6a      	ldr	r3, [pc, #424]	; (80091b8 <HAL_RCC_OscConfig+0x4cc>)
 8009010:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009012:	4a69      	ldr	r2, [pc, #420]	; (80091b8 <HAL_RCC_OscConfig+0x4cc>)
 8009014:	f023 0301 	bic.w	r3, r3, #1
 8009018:	6713      	str	r3, [r2, #112]	; 0x70
 800901a:	4b67      	ldr	r3, [pc, #412]	; (80091b8 <HAL_RCC_OscConfig+0x4cc>)
 800901c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800901e:	4a66      	ldr	r2, [pc, #408]	; (80091b8 <HAL_RCC_OscConfig+0x4cc>)
 8009020:	f023 0304 	bic.w	r3, r3, #4
 8009024:	6713      	str	r3, [r2, #112]	; 0x70
 8009026:	e01c      	b.n	8009062 <HAL_RCC_OscConfig+0x376>
 8009028:	687b      	ldr	r3, [r7, #4]
 800902a:	689b      	ldr	r3, [r3, #8]
 800902c:	2b05      	cmp	r3, #5
 800902e:	d10c      	bne.n	800904a <HAL_RCC_OscConfig+0x35e>
 8009030:	4b61      	ldr	r3, [pc, #388]	; (80091b8 <HAL_RCC_OscConfig+0x4cc>)
 8009032:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009034:	4a60      	ldr	r2, [pc, #384]	; (80091b8 <HAL_RCC_OscConfig+0x4cc>)
 8009036:	f043 0304 	orr.w	r3, r3, #4
 800903a:	6713      	str	r3, [r2, #112]	; 0x70
 800903c:	4b5e      	ldr	r3, [pc, #376]	; (80091b8 <HAL_RCC_OscConfig+0x4cc>)
 800903e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009040:	4a5d      	ldr	r2, [pc, #372]	; (80091b8 <HAL_RCC_OscConfig+0x4cc>)
 8009042:	f043 0301 	orr.w	r3, r3, #1
 8009046:	6713      	str	r3, [r2, #112]	; 0x70
 8009048:	e00b      	b.n	8009062 <HAL_RCC_OscConfig+0x376>
 800904a:	4b5b      	ldr	r3, [pc, #364]	; (80091b8 <HAL_RCC_OscConfig+0x4cc>)
 800904c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800904e:	4a5a      	ldr	r2, [pc, #360]	; (80091b8 <HAL_RCC_OscConfig+0x4cc>)
 8009050:	f023 0301 	bic.w	r3, r3, #1
 8009054:	6713      	str	r3, [r2, #112]	; 0x70
 8009056:	4b58      	ldr	r3, [pc, #352]	; (80091b8 <HAL_RCC_OscConfig+0x4cc>)
 8009058:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800905a:	4a57      	ldr	r2, [pc, #348]	; (80091b8 <HAL_RCC_OscConfig+0x4cc>)
 800905c:	f023 0304 	bic.w	r3, r3, #4
 8009060:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	689b      	ldr	r3, [r3, #8]
 8009066:	2b00      	cmp	r3, #0
 8009068:	d015      	beq.n	8009096 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800906a:	f7ff fa79 	bl	8008560 <HAL_GetTick>
 800906e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009070:	e00a      	b.n	8009088 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009072:	f7ff fa75 	bl	8008560 <HAL_GetTick>
 8009076:	4602      	mov	r2, r0
 8009078:	693b      	ldr	r3, [r7, #16]
 800907a:	1ad3      	subs	r3, r2, r3
 800907c:	f241 3288 	movw	r2, #5000	; 0x1388
 8009080:	4293      	cmp	r3, r2
 8009082:	d901      	bls.n	8009088 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8009084:	2303      	movs	r3, #3
 8009086:	e0ce      	b.n	8009226 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009088:	4b4b      	ldr	r3, [pc, #300]	; (80091b8 <HAL_RCC_OscConfig+0x4cc>)
 800908a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800908c:	f003 0302 	and.w	r3, r3, #2
 8009090:	2b00      	cmp	r3, #0
 8009092:	d0ee      	beq.n	8009072 <HAL_RCC_OscConfig+0x386>
 8009094:	e014      	b.n	80090c0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009096:	f7ff fa63 	bl	8008560 <HAL_GetTick>
 800909a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800909c:	e00a      	b.n	80090b4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800909e:	f7ff fa5f 	bl	8008560 <HAL_GetTick>
 80090a2:	4602      	mov	r2, r0
 80090a4:	693b      	ldr	r3, [r7, #16]
 80090a6:	1ad3      	subs	r3, r2, r3
 80090a8:	f241 3288 	movw	r2, #5000	; 0x1388
 80090ac:	4293      	cmp	r3, r2
 80090ae:	d901      	bls.n	80090b4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80090b0:	2303      	movs	r3, #3
 80090b2:	e0b8      	b.n	8009226 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80090b4:	4b40      	ldr	r3, [pc, #256]	; (80091b8 <HAL_RCC_OscConfig+0x4cc>)
 80090b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090b8:	f003 0302 	and.w	r3, r3, #2
 80090bc:	2b00      	cmp	r3, #0
 80090be:	d1ee      	bne.n	800909e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80090c0:	7dfb      	ldrb	r3, [r7, #23]
 80090c2:	2b01      	cmp	r3, #1
 80090c4:	d105      	bne.n	80090d2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80090c6:	4b3c      	ldr	r3, [pc, #240]	; (80091b8 <HAL_RCC_OscConfig+0x4cc>)
 80090c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090ca:	4a3b      	ldr	r2, [pc, #236]	; (80091b8 <HAL_RCC_OscConfig+0x4cc>)
 80090cc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80090d0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	699b      	ldr	r3, [r3, #24]
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	f000 80a4 	beq.w	8009224 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80090dc:	4b36      	ldr	r3, [pc, #216]	; (80091b8 <HAL_RCC_OscConfig+0x4cc>)
 80090de:	689b      	ldr	r3, [r3, #8]
 80090e0:	f003 030c 	and.w	r3, r3, #12
 80090e4:	2b08      	cmp	r3, #8
 80090e6:	d06b      	beq.n	80091c0 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	699b      	ldr	r3, [r3, #24]
 80090ec:	2b02      	cmp	r3, #2
 80090ee:	d149      	bne.n	8009184 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80090f0:	4b31      	ldr	r3, [pc, #196]	; (80091b8 <HAL_RCC_OscConfig+0x4cc>)
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	4a30      	ldr	r2, [pc, #192]	; (80091b8 <HAL_RCC_OscConfig+0x4cc>)
 80090f6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80090fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80090fc:	f7ff fa30 	bl	8008560 <HAL_GetTick>
 8009100:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009102:	e008      	b.n	8009116 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009104:	f7ff fa2c 	bl	8008560 <HAL_GetTick>
 8009108:	4602      	mov	r2, r0
 800910a:	693b      	ldr	r3, [r7, #16]
 800910c:	1ad3      	subs	r3, r2, r3
 800910e:	2b02      	cmp	r3, #2
 8009110:	d901      	bls.n	8009116 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8009112:	2303      	movs	r3, #3
 8009114:	e087      	b.n	8009226 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009116:	4b28      	ldr	r3, [pc, #160]	; (80091b8 <HAL_RCC_OscConfig+0x4cc>)
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800911e:	2b00      	cmp	r3, #0
 8009120:	d1f0      	bne.n	8009104 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009122:	687b      	ldr	r3, [r7, #4]
 8009124:	69da      	ldr	r2, [r3, #28]
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	6a1b      	ldr	r3, [r3, #32]
 800912a:	431a      	orrs	r2, r3
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009130:	019b      	lsls	r3, r3, #6
 8009132:	431a      	orrs	r2, r3
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009138:	085b      	lsrs	r3, r3, #1
 800913a:	3b01      	subs	r3, #1
 800913c:	041b      	lsls	r3, r3, #16
 800913e:	431a      	orrs	r2, r3
 8009140:	687b      	ldr	r3, [r7, #4]
 8009142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009144:	061b      	lsls	r3, r3, #24
 8009146:	4313      	orrs	r3, r2
 8009148:	4a1b      	ldr	r2, [pc, #108]	; (80091b8 <HAL_RCC_OscConfig+0x4cc>)
 800914a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800914e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8009150:	4b19      	ldr	r3, [pc, #100]	; (80091b8 <HAL_RCC_OscConfig+0x4cc>)
 8009152:	681b      	ldr	r3, [r3, #0]
 8009154:	4a18      	ldr	r2, [pc, #96]	; (80091b8 <HAL_RCC_OscConfig+0x4cc>)
 8009156:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800915a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800915c:	f7ff fa00 	bl	8008560 <HAL_GetTick>
 8009160:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009162:	e008      	b.n	8009176 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009164:	f7ff f9fc 	bl	8008560 <HAL_GetTick>
 8009168:	4602      	mov	r2, r0
 800916a:	693b      	ldr	r3, [r7, #16]
 800916c:	1ad3      	subs	r3, r2, r3
 800916e:	2b02      	cmp	r3, #2
 8009170:	d901      	bls.n	8009176 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8009172:	2303      	movs	r3, #3
 8009174:	e057      	b.n	8009226 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009176:	4b10      	ldr	r3, [pc, #64]	; (80091b8 <HAL_RCC_OscConfig+0x4cc>)
 8009178:	681b      	ldr	r3, [r3, #0]
 800917a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800917e:	2b00      	cmp	r3, #0
 8009180:	d0f0      	beq.n	8009164 <HAL_RCC_OscConfig+0x478>
 8009182:	e04f      	b.n	8009224 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009184:	4b0c      	ldr	r3, [pc, #48]	; (80091b8 <HAL_RCC_OscConfig+0x4cc>)
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	4a0b      	ldr	r2, [pc, #44]	; (80091b8 <HAL_RCC_OscConfig+0x4cc>)
 800918a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800918e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009190:	f7ff f9e6 	bl	8008560 <HAL_GetTick>
 8009194:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009196:	e008      	b.n	80091aa <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009198:	f7ff f9e2 	bl	8008560 <HAL_GetTick>
 800919c:	4602      	mov	r2, r0
 800919e:	693b      	ldr	r3, [r7, #16]
 80091a0:	1ad3      	subs	r3, r2, r3
 80091a2:	2b02      	cmp	r3, #2
 80091a4:	d901      	bls.n	80091aa <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80091a6:	2303      	movs	r3, #3
 80091a8:	e03d      	b.n	8009226 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80091aa:	4b03      	ldr	r3, [pc, #12]	; (80091b8 <HAL_RCC_OscConfig+0x4cc>)
 80091ac:	681b      	ldr	r3, [r3, #0]
 80091ae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	d1f0      	bne.n	8009198 <HAL_RCC_OscConfig+0x4ac>
 80091b6:	e035      	b.n	8009224 <HAL_RCC_OscConfig+0x538>
 80091b8:	40023800 	.word	0x40023800
 80091bc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80091c0:	4b1b      	ldr	r3, [pc, #108]	; (8009230 <HAL_RCC_OscConfig+0x544>)
 80091c2:	685b      	ldr	r3, [r3, #4]
 80091c4:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	699b      	ldr	r3, [r3, #24]
 80091ca:	2b01      	cmp	r3, #1
 80091cc:	d028      	beq.n	8009220 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80091ce:	68fb      	ldr	r3, [r7, #12]
 80091d0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80091d8:	429a      	cmp	r2, r3
 80091da:	d121      	bne.n	8009220 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80091dc:	68fb      	ldr	r3, [r7, #12]
 80091de:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80091e6:	429a      	cmp	r2, r3
 80091e8:	d11a      	bne.n	8009220 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80091ea:	68fa      	ldr	r2, [r7, #12]
 80091ec:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80091f0:	4013      	ands	r3, r2
 80091f2:	687a      	ldr	r2, [r7, #4]
 80091f4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80091f6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80091f8:	4293      	cmp	r3, r2
 80091fa:	d111      	bne.n	8009220 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80091fc:	68fb      	ldr	r3, [r7, #12]
 80091fe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009206:	085b      	lsrs	r3, r3, #1
 8009208:	3b01      	subs	r3, #1
 800920a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800920c:	429a      	cmp	r2, r3
 800920e:	d107      	bne.n	8009220 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8009210:	68fb      	ldr	r3, [r7, #12]
 8009212:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800921a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800921c:	429a      	cmp	r2, r3
 800921e:	d001      	beq.n	8009224 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8009220:	2301      	movs	r3, #1
 8009222:	e000      	b.n	8009226 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8009224:	2300      	movs	r3, #0
}
 8009226:	4618      	mov	r0, r3
 8009228:	3718      	adds	r7, #24
 800922a:	46bd      	mov	sp, r7
 800922c:	bd80      	pop	{r7, pc}
 800922e:	bf00      	nop
 8009230:	40023800 	.word	0x40023800

08009234 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009234:	b580      	push	{r7, lr}
 8009236:	b084      	sub	sp, #16
 8009238:	af00      	add	r7, sp, #0
 800923a:	6078      	str	r0, [r7, #4]
 800923c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800923e:	2300      	movs	r3, #0
 8009240:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	2b00      	cmp	r3, #0
 8009246:	d101      	bne.n	800924c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8009248:	2301      	movs	r3, #1
 800924a:	e0d0      	b.n	80093ee <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800924c:	4b6a      	ldr	r3, [pc, #424]	; (80093f8 <HAL_RCC_ClockConfig+0x1c4>)
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	f003 030f 	and.w	r3, r3, #15
 8009254:	683a      	ldr	r2, [r7, #0]
 8009256:	429a      	cmp	r2, r3
 8009258:	d910      	bls.n	800927c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800925a:	4b67      	ldr	r3, [pc, #412]	; (80093f8 <HAL_RCC_ClockConfig+0x1c4>)
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	f023 020f 	bic.w	r2, r3, #15
 8009262:	4965      	ldr	r1, [pc, #404]	; (80093f8 <HAL_RCC_ClockConfig+0x1c4>)
 8009264:	683b      	ldr	r3, [r7, #0]
 8009266:	4313      	orrs	r3, r2
 8009268:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800926a:	4b63      	ldr	r3, [pc, #396]	; (80093f8 <HAL_RCC_ClockConfig+0x1c4>)
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	f003 030f 	and.w	r3, r3, #15
 8009272:	683a      	ldr	r2, [r7, #0]
 8009274:	429a      	cmp	r2, r3
 8009276:	d001      	beq.n	800927c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8009278:	2301      	movs	r3, #1
 800927a:	e0b8      	b.n	80093ee <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800927c:	687b      	ldr	r3, [r7, #4]
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	f003 0302 	and.w	r3, r3, #2
 8009284:	2b00      	cmp	r3, #0
 8009286:	d020      	beq.n	80092ca <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009288:	687b      	ldr	r3, [r7, #4]
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	f003 0304 	and.w	r3, r3, #4
 8009290:	2b00      	cmp	r3, #0
 8009292:	d005      	beq.n	80092a0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8009294:	4b59      	ldr	r3, [pc, #356]	; (80093fc <HAL_RCC_ClockConfig+0x1c8>)
 8009296:	689b      	ldr	r3, [r3, #8]
 8009298:	4a58      	ldr	r2, [pc, #352]	; (80093fc <HAL_RCC_ClockConfig+0x1c8>)
 800929a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800929e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	f003 0308 	and.w	r3, r3, #8
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	d005      	beq.n	80092b8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80092ac:	4b53      	ldr	r3, [pc, #332]	; (80093fc <HAL_RCC_ClockConfig+0x1c8>)
 80092ae:	689b      	ldr	r3, [r3, #8]
 80092b0:	4a52      	ldr	r2, [pc, #328]	; (80093fc <HAL_RCC_ClockConfig+0x1c8>)
 80092b2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80092b6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80092b8:	4b50      	ldr	r3, [pc, #320]	; (80093fc <HAL_RCC_ClockConfig+0x1c8>)
 80092ba:	689b      	ldr	r3, [r3, #8]
 80092bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	689b      	ldr	r3, [r3, #8]
 80092c4:	494d      	ldr	r1, [pc, #308]	; (80093fc <HAL_RCC_ClockConfig+0x1c8>)
 80092c6:	4313      	orrs	r3, r2
 80092c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	f003 0301 	and.w	r3, r3, #1
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d040      	beq.n	8009358 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	685b      	ldr	r3, [r3, #4]
 80092da:	2b01      	cmp	r3, #1
 80092dc:	d107      	bne.n	80092ee <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80092de:	4b47      	ldr	r3, [pc, #284]	; (80093fc <HAL_RCC_ClockConfig+0x1c8>)
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d115      	bne.n	8009316 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80092ea:	2301      	movs	r3, #1
 80092ec:	e07f      	b.n	80093ee <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	685b      	ldr	r3, [r3, #4]
 80092f2:	2b02      	cmp	r3, #2
 80092f4:	d107      	bne.n	8009306 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80092f6:	4b41      	ldr	r3, [pc, #260]	; (80093fc <HAL_RCC_ClockConfig+0x1c8>)
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80092fe:	2b00      	cmp	r3, #0
 8009300:	d109      	bne.n	8009316 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8009302:	2301      	movs	r3, #1
 8009304:	e073      	b.n	80093ee <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009306:	4b3d      	ldr	r3, [pc, #244]	; (80093fc <HAL_RCC_ClockConfig+0x1c8>)
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	f003 0302 	and.w	r3, r3, #2
 800930e:	2b00      	cmp	r3, #0
 8009310:	d101      	bne.n	8009316 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8009312:	2301      	movs	r3, #1
 8009314:	e06b      	b.n	80093ee <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009316:	4b39      	ldr	r3, [pc, #228]	; (80093fc <HAL_RCC_ClockConfig+0x1c8>)
 8009318:	689b      	ldr	r3, [r3, #8]
 800931a:	f023 0203 	bic.w	r2, r3, #3
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	685b      	ldr	r3, [r3, #4]
 8009322:	4936      	ldr	r1, [pc, #216]	; (80093fc <HAL_RCC_ClockConfig+0x1c8>)
 8009324:	4313      	orrs	r3, r2
 8009326:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009328:	f7ff f91a 	bl	8008560 <HAL_GetTick>
 800932c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800932e:	e00a      	b.n	8009346 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8009330:	f7ff f916 	bl	8008560 <HAL_GetTick>
 8009334:	4602      	mov	r2, r0
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	1ad3      	subs	r3, r2, r3
 800933a:	f241 3288 	movw	r2, #5000	; 0x1388
 800933e:	4293      	cmp	r3, r2
 8009340:	d901      	bls.n	8009346 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8009342:	2303      	movs	r3, #3
 8009344:	e053      	b.n	80093ee <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009346:	4b2d      	ldr	r3, [pc, #180]	; (80093fc <HAL_RCC_ClockConfig+0x1c8>)
 8009348:	689b      	ldr	r3, [r3, #8]
 800934a:	f003 020c 	and.w	r2, r3, #12
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	685b      	ldr	r3, [r3, #4]
 8009352:	009b      	lsls	r3, r3, #2
 8009354:	429a      	cmp	r2, r3
 8009356:	d1eb      	bne.n	8009330 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009358:	4b27      	ldr	r3, [pc, #156]	; (80093f8 <HAL_RCC_ClockConfig+0x1c4>)
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	f003 030f 	and.w	r3, r3, #15
 8009360:	683a      	ldr	r2, [r7, #0]
 8009362:	429a      	cmp	r2, r3
 8009364:	d210      	bcs.n	8009388 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009366:	4b24      	ldr	r3, [pc, #144]	; (80093f8 <HAL_RCC_ClockConfig+0x1c4>)
 8009368:	681b      	ldr	r3, [r3, #0]
 800936a:	f023 020f 	bic.w	r2, r3, #15
 800936e:	4922      	ldr	r1, [pc, #136]	; (80093f8 <HAL_RCC_ClockConfig+0x1c4>)
 8009370:	683b      	ldr	r3, [r7, #0]
 8009372:	4313      	orrs	r3, r2
 8009374:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8009376:	4b20      	ldr	r3, [pc, #128]	; (80093f8 <HAL_RCC_ClockConfig+0x1c4>)
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	f003 030f 	and.w	r3, r3, #15
 800937e:	683a      	ldr	r2, [r7, #0]
 8009380:	429a      	cmp	r2, r3
 8009382:	d001      	beq.n	8009388 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8009384:	2301      	movs	r3, #1
 8009386:	e032      	b.n	80093ee <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	f003 0304 	and.w	r3, r3, #4
 8009390:	2b00      	cmp	r3, #0
 8009392:	d008      	beq.n	80093a6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8009394:	4b19      	ldr	r3, [pc, #100]	; (80093fc <HAL_RCC_ClockConfig+0x1c8>)
 8009396:	689b      	ldr	r3, [r3, #8]
 8009398:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	68db      	ldr	r3, [r3, #12]
 80093a0:	4916      	ldr	r1, [pc, #88]	; (80093fc <HAL_RCC_ClockConfig+0x1c8>)
 80093a2:	4313      	orrs	r3, r2
 80093a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80093a6:	687b      	ldr	r3, [r7, #4]
 80093a8:	681b      	ldr	r3, [r3, #0]
 80093aa:	f003 0308 	and.w	r3, r3, #8
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d009      	beq.n	80093c6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80093b2:	4b12      	ldr	r3, [pc, #72]	; (80093fc <HAL_RCC_ClockConfig+0x1c8>)
 80093b4:	689b      	ldr	r3, [r3, #8]
 80093b6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	691b      	ldr	r3, [r3, #16]
 80093be:	00db      	lsls	r3, r3, #3
 80093c0:	490e      	ldr	r1, [pc, #56]	; (80093fc <HAL_RCC_ClockConfig+0x1c8>)
 80093c2:	4313      	orrs	r3, r2
 80093c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80093c6:	f000 f821 	bl	800940c <HAL_RCC_GetSysClockFreq>
 80093ca:	4601      	mov	r1, r0
 80093cc:	4b0b      	ldr	r3, [pc, #44]	; (80093fc <HAL_RCC_ClockConfig+0x1c8>)
 80093ce:	689b      	ldr	r3, [r3, #8]
 80093d0:	091b      	lsrs	r3, r3, #4
 80093d2:	f003 030f 	and.w	r3, r3, #15
 80093d6:	4a0a      	ldr	r2, [pc, #40]	; (8009400 <HAL_RCC_ClockConfig+0x1cc>)
 80093d8:	5cd3      	ldrb	r3, [r2, r3]
 80093da:	fa21 f303 	lsr.w	r3, r1, r3
 80093de:	4a09      	ldr	r2, [pc, #36]	; (8009404 <HAL_RCC_ClockConfig+0x1d0>)
 80093e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80093e2:	4b09      	ldr	r3, [pc, #36]	; (8009408 <HAL_RCC_ClockConfig+0x1d4>)
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	4618      	mov	r0, r3
 80093e8:	f7ff f876 	bl	80084d8 <HAL_InitTick>

  return HAL_OK;
 80093ec:	2300      	movs	r3, #0
}
 80093ee:	4618      	mov	r0, r3
 80093f0:	3710      	adds	r7, #16
 80093f2:	46bd      	mov	sp, r7
 80093f4:	bd80      	pop	{r7, pc}
 80093f6:	bf00      	nop
 80093f8:	40023c00 	.word	0x40023c00
 80093fc:	40023800 	.word	0x40023800
 8009400:	0800e404 	.word	0x0800e404
 8009404:	20000000 	.word	0x20000000
 8009408:	20000004 	.word	0x20000004

0800940c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800940c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800940e:	b085      	sub	sp, #20
 8009410:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8009412:	2300      	movs	r3, #0
 8009414:	607b      	str	r3, [r7, #4]
 8009416:	2300      	movs	r3, #0
 8009418:	60fb      	str	r3, [r7, #12]
 800941a:	2300      	movs	r3, #0
 800941c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 800941e:	2300      	movs	r3, #0
 8009420:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009422:	4b50      	ldr	r3, [pc, #320]	; (8009564 <HAL_RCC_GetSysClockFreq+0x158>)
 8009424:	689b      	ldr	r3, [r3, #8]
 8009426:	f003 030c 	and.w	r3, r3, #12
 800942a:	2b04      	cmp	r3, #4
 800942c:	d007      	beq.n	800943e <HAL_RCC_GetSysClockFreq+0x32>
 800942e:	2b08      	cmp	r3, #8
 8009430:	d008      	beq.n	8009444 <HAL_RCC_GetSysClockFreq+0x38>
 8009432:	2b00      	cmp	r3, #0
 8009434:	f040 808d 	bne.w	8009552 <HAL_RCC_GetSysClockFreq+0x146>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8009438:	4b4b      	ldr	r3, [pc, #300]	; (8009568 <HAL_RCC_GetSysClockFreq+0x15c>)
 800943a:	60bb      	str	r3, [r7, #8]
      break;
 800943c:	e08c      	b.n	8009558 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800943e:	4b4b      	ldr	r3, [pc, #300]	; (800956c <HAL_RCC_GetSysClockFreq+0x160>)
 8009440:	60bb      	str	r3, [r7, #8]
      break;
 8009442:	e089      	b.n	8009558 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009444:	4b47      	ldr	r3, [pc, #284]	; (8009564 <HAL_RCC_GetSysClockFreq+0x158>)
 8009446:	685b      	ldr	r3, [r3, #4]
 8009448:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800944c:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800944e:	4b45      	ldr	r3, [pc, #276]	; (8009564 <HAL_RCC_GetSysClockFreq+0x158>)
 8009450:	685b      	ldr	r3, [r3, #4]
 8009452:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009456:	2b00      	cmp	r3, #0
 8009458:	d023      	beq.n	80094a2 <HAL_RCC_GetSysClockFreq+0x96>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800945a:	4b42      	ldr	r3, [pc, #264]	; (8009564 <HAL_RCC_GetSysClockFreq+0x158>)
 800945c:	685b      	ldr	r3, [r3, #4]
 800945e:	099b      	lsrs	r3, r3, #6
 8009460:	f04f 0400 	mov.w	r4, #0
 8009464:	f240 11ff 	movw	r1, #511	; 0x1ff
 8009468:	f04f 0200 	mov.w	r2, #0
 800946c:	ea03 0501 	and.w	r5, r3, r1
 8009470:	ea04 0602 	and.w	r6, r4, r2
 8009474:	4a3d      	ldr	r2, [pc, #244]	; (800956c <HAL_RCC_GetSysClockFreq+0x160>)
 8009476:	fb02 f106 	mul.w	r1, r2, r6
 800947a:	2200      	movs	r2, #0
 800947c:	fb02 f205 	mul.w	r2, r2, r5
 8009480:	440a      	add	r2, r1
 8009482:	493a      	ldr	r1, [pc, #232]	; (800956c <HAL_RCC_GetSysClockFreq+0x160>)
 8009484:	fba5 0101 	umull	r0, r1, r5, r1
 8009488:	1853      	adds	r3, r2, r1
 800948a:	4619      	mov	r1, r3
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	f04f 0400 	mov.w	r4, #0
 8009492:	461a      	mov	r2, r3
 8009494:	4623      	mov	r3, r4
 8009496:	f7fe fa85 	bl	80079a4 <__aeabi_uldivmod>
 800949a:	4603      	mov	r3, r0
 800949c:	460c      	mov	r4, r1
 800949e:	60fb      	str	r3, [r7, #12]
 80094a0:	e049      	b.n	8009536 <HAL_RCC_GetSysClockFreq+0x12a>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80094a2:	4b30      	ldr	r3, [pc, #192]	; (8009564 <HAL_RCC_GetSysClockFreq+0x158>)
 80094a4:	685b      	ldr	r3, [r3, #4]
 80094a6:	099b      	lsrs	r3, r3, #6
 80094a8:	f04f 0400 	mov.w	r4, #0
 80094ac:	f240 11ff 	movw	r1, #511	; 0x1ff
 80094b0:	f04f 0200 	mov.w	r2, #0
 80094b4:	ea03 0501 	and.w	r5, r3, r1
 80094b8:	ea04 0602 	and.w	r6, r4, r2
 80094bc:	4629      	mov	r1, r5
 80094be:	4632      	mov	r2, r6
 80094c0:	f04f 0300 	mov.w	r3, #0
 80094c4:	f04f 0400 	mov.w	r4, #0
 80094c8:	0154      	lsls	r4, r2, #5
 80094ca:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80094ce:	014b      	lsls	r3, r1, #5
 80094d0:	4619      	mov	r1, r3
 80094d2:	4622      	mov	r2, r4
 80094d4:	1b49      	subs	r1, r1, r5
 80094d6:	eb62 0206 	sbc.w	r2, r2, r6
 80094da:	f04f 0300 	mov.w	r3, #0
 80094de:	f04f 0400 	mov.w	r4, #0
 80094e2:	0194      	lsls	r4, r2, #6
 80094e4:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 80094e8:	018b      	lsls	r3, r1, #6
 80094ea:	1a5b      	subs	r3, r3, r1
 80094ec:	eb64 0402 	sbc.w	r4, r4, r2
 80094f0:	f04f 0100 	mov.w	r1, #0
 80094f4:	f04f 0200 	mov.w	r2, #0
 80094f8:	00e2      	lsls	r2, r4, #3
 80094fa:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 80094fe:	00d9      	lsls	r1, r3, #3
 8009500:	460b      	mov	r3, r1
 8009502:	4614      	mov	r4, r2
 8009504:	195b      	adds	r3, r3, r5
 8009506:	eb44 0406 	adc.w	r4, r4, r6
 800950a:	f04f 0100 	mov.w	r1, #0
 800950e:	f04f 0200 	mov.w	r2, #0
 8009512:	02a2      	lsls	r2, r4, #10
 8009514:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8009518:	0299      	lsls	r1, r3, #10
 800951a:	460b      	mov	r3, r1
 800951c:	4614      	mov	r4, r2
 800951e:	4618      	mov	r0, r3
 8009520:	4621      	mov	r1, r4
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	f04f 0400 	mov.w	r4, #0
 8009528:	461a      	mov	r2, r3
 800952a:	4623      	mov	r3, r4
 800952c:	f7fe fa3a 	bl	80079a4 <__aeabi_uldivmod>
 8009530:	4603      	mov	r3, r0
 8009532:	460c      	mov	r4, r1
 8009534:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8009536:	4b0b      	ldr	r3, [pc, #44]	; (8009564 <HAL_RCC_GetSysClockFreq+0x158>)
 8009538:	685b      	ldr	r3, [r3, #4]
 800953a:	0c1b      	lsrs	r3, r3, #16
 800953c:	f003 0303 	and.w	r3, r3, #3
 8009540:	3301      	adds	r3, #1
 8009542:	005b      	lsls	r3, r3, #1
 8009544:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8009546:	68fa      	ldr	r2, [r7, #12]
 8009548:	683b      	ldr	r3, [r7, #0]
 800954a:	fbb2 f3f3 	udiv	r3, r2, r3
 800954e:	60bb      	str	r3, [r7, #8]
      break;
 8009550:	e002      	b.n	8009558 <HAL_RCC_GetSysClockFreq+0x14c>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009552:	4b05      	ldr	r3, [pc, #20]	; (8009568 <HAL_RCC_GetSysClockFreq+0x15c>)
 8009554:	60bb      	str	r3, [r7, #8]
      break;
 8009556:	bf00      	nop
    }
  }
  return sysclockfreq;
 8009558:	68bb      	ldr	r3, [r7, #8]
}
 800955a:	4618      	mov	r0, r3
 800955c:	3714      	adds	r7, #20
 800955e:	46bd      	mov	sp, r7
 8009560:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009562:	bf00      	nop
 8009564:	40023800 	.word	0x40023800
 8009568:	00f42400 	.word	0x00f42400
 800956c:	017d7840 	.word	0x017d7840

08009570 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009570:	b480      	push	{r7}
 8009572:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009574:	4b03      	ldr	r3, [pc, #12]	; (8009584 <HAL_RCC_GetHCLKFreq+0x14>)
 8009576:	681b      	ldr	r3, [r3, #0]
}
 8009578:	4618      	mov	r0, r3
 800957a:	46bd      	mov	sp, r7
 800957c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009580:	4770      	bx	lr
 8009582:	bf00      	nop
 8009584:	20000000 	.word	0x20000000

08009588 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8009588:	b580      	push	{r7, lr}
 800958a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800958c:	f7ff fff0 	bl	8009570 <HAL_RCC_GetHCLKFreq>
 8009590:	4601      	mov	r1, r0
 8009592:	4b05      	ldr	r3, [pc, #20]	; (80095a8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8009594:	689b      	ldr	r3, [r3, #8]
 8009596:	0a9b      	lsrs	r3, r3, #10
 8009598:	f003 0307 	and.w	r3, r3, #7
 800959c:	4a03      	ldr	r2, [pc, #12]	; (80095ac <HAL_RCC_GetPCLK1Freq+0x24>)
 800959e:	5cd3      	ldrb	r3, [r2, r3]
 80095a0:	fa21 f303 	lsr.w	r3, r1, r3
}
 80095a4:	4618      	mov	r0, r3
 80095a6:	bd80      	pop	{r7, pc}
 80095a8:	40023800 	.word	0x40023800
 80095ac:	0800e414 	.word	0x0800e414

080095b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80095b0:	b580      	push	{r7, lr}
 80095b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80095b4:	f7ff ffdc 	bl	8009570 <HAL_RCC_GetHCLKFreq>
 80095b8:	4601      	mov	r1, r0
 80095ba:	4b05      	ldr	r3, [pc, #20]	; (80095d0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80095bc:	689b      	ldr	r3, [r3, #8]
 80095be:	0b5b      	lsrs	r3, r3, #13
 80095c0:	f003 0307 	and.w	r3, r3, #7
 80095c4:	4a03      	ldr	r2, [pc, #12]	; (80095d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80095c6:	5cd3      	ldrb	r3, [r2, r3]
 80095c8:	fa21 f303 	lsr.w	r3, r1, r3
}
 80095cc:	4618      	mov	r0, r3
 80095ce:	bd80      	pop	{r7, pc}
 80095d0:	40023800 	.word	0x40023800
 80095d4:	0800e414 	.word	0x0800e414

080095d8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80095d8:	b580      	push	{r7, lr}
 80095da:	b088      	sub	sp, #32
 80095dc:	af00      	add	r7, sp, #0
 80095de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80095e0:	2300      	movs	r3, #0
 80095e2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80095e4:	2300      	movs	r3, #0
 80095e6:	613b      	str	r3, [r7, #16]
  uint32_t plli2sused = 0;
 80095e8:	2300      	movs	r3, #0
 80095ea:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80095ec:	2300      	movs	r3, #0
 80095ee:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	f003 0301 	and.w	r3, r3, #1
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d012      	beq.n	8009622 <HAL_RCCEx_PeriphCLKConfig+0x4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80095fc:	4b65      	ldr	r3, [pc, #404]	; (8009794 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80095fe:	689b      	ldr	r3, [r3, #8]
 8009600:	4a64      	ldr	r2, [pc, #400]	; (8009794 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8009602:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8009606:	6093      	str	r3, [r2, #8]
 8009608:	4b62      	ldr	r3, [pc, #392]	; (8009794 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800960a:	689a      	ldr	r2, [r3, #8]
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009610:	4960      	ldr	r1, [pc, #384]	; (8009794 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8009612:	4313      	orrs	r3, r2
 8009614:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800961a:	2b00      	cmp	r3, #0
 800961c:	d101      	bne.n	8009622 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      plli2sused = 1;
 800961e:	2301      	movs	r3, #1
 8009620:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800962a:	2b00      	cmp	r3, #0
 800962c:	d017      	beq.n	800965e <HAL_RCCEx_PeriphCLKConfig+0x86>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800962e:	4b59      	ldr	r3, [pc, #356]	; (8009794 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8009630:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009634:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800963c:	4955      	ldr	r1, [pc, #340]	; (8009794 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800963e:	4313      	orrs	r3, r2
 8009640:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8009644:	687b      	ldr	r3, [r7, #4]
 8009646:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009648:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800964c:	d101      	bne.n	8009652 <HAL_RCCEx_PeriphCLKConfig+0x7a>
    {
      plli2sused = 1;
 800964e:	2301      	movs	r3, #1
 8009650:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009656:	2b00      	cmp	r3, #0
 8009658:	d101      	bne.n	800965e <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      pllsaiused = 1;
 800965a:	2301      	movs	r3, #1
 800965c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8009666:	2b00      	cmp	r3, #0
 8009668:	d017      	beq.n	800969a <HAL_RCCEx_PeriphCLKConfig+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800966a:	4b4a      	ldr	r3, [pc, #296]	; (8009794 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800966c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009670:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009678:	4946      	ldr	r1, [pc, #280]	; (8009794 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800967a:	4313      	orrs	r3, r2
 800967c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009684:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009688:	d101      	bne.n	800968e <HAL_RCCEx_PeriphCLKConfig+0xb6>
    {
      plli2sused = 1;
 800968a:	2301      	movs	r3, #1
 800968c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 800968e:	687b      	ldr	r3, [r7, #4]
 8009690:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009692:	2b00      	cmp	r3, #0
 8009694:	d101      	bne.n	800969a <HAL_RCCEx_PeriphCLKConfig+0xc2>
    {
      pllsaiused = 1;
 8009696:	2301      	movs	r3, #1
 8009698:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800969a:	687b      	ldr	r3, [r7, #4]
 800969c:	681b      	ldr	r3, [r3, #0]
 800969e:	f003 0320 	and.w	r3, r3, #32
 80096a2:	2b00      	cmp	r3, #0
 80096a4:	f000 808b 	beq.w	80097be <HAL_RCCEx_PeriphCLKConfig+0x1e6>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80096a8:	4b3a      	ldr	r3, [pc, #232]	; (8009794 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80096aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096ac:	4a39      	ldr	r2, [pc, #228]	; (8009794 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80096ae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80096b2:	6413      	str	r3, [r2, #64]	; 0x40
 80096b4:	4b37      	ldr	r3, [pc, #220]	; (8009794 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80096b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80096b8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80096bc:	60fb      	str	r3, [r7, #12]
 80096be:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80096c0:	4b35      	ldr	r3, [pc, #212]	; (8009798 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80096c2:	681b      	ldr	r3, [r3, #0]
 80096c4:	4a34      	ldr	r2, [pc, #208]	; (8009798 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80096c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80096ca:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80096cc:	f7fe ff48 	bl	8008560 <HAL_GetTick>
 80096d0:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80096d2:	e008      	b.n	80096e6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80096d4:	f7fe ff44 	bl	8008560 <HAL_GetTick>
 80096d8:	4602      	mov	r2, r0
 80096da:	697b      	ldr	r3, [r7, #20]
 80096dc:	1ad3      	subs	r3, r2, r3
 80096de:	2b64      	cmp	r3, #100	; 0x64
 80096e0:	d901      	bls.n	80096e6 <HAL_RCCEx_PeriphCLKConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80096e2:	2303      	movs	r3, #3
 80096e4:	e2ba      	b.n	8009c5c <HAL_RCCEx_PeriphCLKConfig+0x684>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80096e6:	4b2c      	ldr	r3, [pc, #176]	; (8009798 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d0f0      	beq.n	80096d4 <HAL_RCCEx_PeriphCLKConfig+0xfc>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80096f2:	4b28      	ldr	r3, [pc, #160]	; (8009794 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80096f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80096f6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80096fa:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80096fc:	693b      	ldr	r3, [r7, #16]
 80096fe:	2b00      	cmp	r3, #0
 8009700:	d035      	beq.n	800976e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8009702:	687b      	ldr	r3, [r7, #4]
 8009704:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009706:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800970a:	693a      	ldr	r2, [r7, #16]
 800970c:	429a      	cmp	r2, r3
 800970e:	d02e      	beq.n	800976e <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009710:	4b20      	ldr	r3, [pc, #128]	; (8009794 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8009712:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009714:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009718:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800971a:	4b1e      	ldr	r3, [pc, #120]	; (8009794 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800971c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800971e:	4a1d      	ldr	r2, [pc, #116]	; (8009794 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8009720:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009724:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8009726:	4b1b      	ldr	r3, [pc, #108]	; (8009794 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8009728:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800972a:	4a1a      	ldr	r2, [pc, #104]	; (8009794 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800972c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009730:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8009732:	4a18      	ldr	r2, [pc, #96]	; (8009794 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8009734:	693b      	ldr	r3, [r7, #16]
 8009736:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8009738:	4b16      	ldr	r3, [pc, #88]	; (8009794 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800973a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800973c:	f003 0301 	and.w	r3, r3, #1
 8009740:	2b01      	cmp	r3, #1
 8009742:	d114      	bne.n	800976e <HAL_RCCEx_PeriphCLKConfig+0x196>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009744:	f7fe ff0c 	bl	8008560 <HAL_GetTick>
 8009748:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800974a:	e00a      	b.n	8009762 <HAL_RCCEx_PeriphCLKConfig+0x18a>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800974c:	f7fe ff08 	bl	8008560 <HAL_GetTick>
 8009750:	4602      	mov	r2, r0
 8009752:	697b      	ldr	r3, [r7, #20]
 8009754:	1ad3      	subs	r3, r2, r3
 8009756:	f241 3288 	movw	r2, #5000	; 0x1388
 800975a:	4293      	cmp	r3, r2
 800975c:	d901      	bls.n	8009762 <HAL_RCCEx_PeriphCLKConfig+0x18a>
          {
            return HAL_TIMEOUT;
 800975e:	2303      	movs	r3, #3
 8009760:	e27c      	b.n	8009c5c <HAL_RCCEx_PeriphCLKConfig+0x684>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009762:	4b0c      	ldr	r3, [pc, #48]	; (8009794 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8009764:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009766:	f003 0302 	and.w	r3, r3, #2
 800976a:	2b00      	cmp	r3, #0
 800976c:	d0ee      	beq.n	800974c <HAL_RCCEx_PeriphCLKConfig+0x174>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009772:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009776:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800977a:	d111      	bne.n	80097a0 <HAL_RCCEx_PeriphCLKConfig+0x1c8>
 800977c:	4b05      	ldr	r3, [pc, #20]	; (8009794 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800977e:	689b      	ldr	r3, [r3, #8]
 8009780:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	6a99      	ldr	r1, [r3, #40]	; 0x28
 8009788:	4b04      	ldr	r3, [pc, #16]	; (800979c <HAL_RCCEx_PeriphCLKConfig+0x1c4>)
 800978a:	400b      	ands	r3, r1
 800978c:	4901      	ldr	r1, [pc, #4]	; (8009794 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800978e:	4313      	orrs	r3, r2
 8009790:	608b      	str	r3, [r1, #8]
 8009792:	e00b      	b.n	80097ac <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 8009794:	40023800 	.word	0x40023800
 8009798:	40007000 	.word	0x40007000
 800979c:	0ffffcff 	.word	0x0ffffcff
 80097a0:	4ba3      	ldr	r3, [pc, #652]	; (8009a30 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80097a2:	689b      	ldr	r3, [r3, #8]
 80097a4:	4aa2      	ldr	r2, [pc, #648]	; (8009a30 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80097a6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80097aa:	6093      	str	r3, [r2, #8]
 80097ac:	4ba0      	ldr	r3, [pc, #640]	; (8009a30 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80097ae:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80097b8:	499d      	ldr	r1, [pc, #628]	; (8009a30 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80097ba:	4313      	orrs	r3, r2
 80097bc:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	f003 0310 	and.w	r3, r3, #16
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d010      	beq.n	80097ec <HAL_RCCEx_PeriphCLKConfig+0x214>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80097ca:	4b99      	ldr	r3, [pc, #612]	; (8009a30 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80097cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80097d0:	4a97      	ldr	r2, [pc, #604]	; (8009a30 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80097d2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80097d6:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80097da:	4b95      	ldr	r3, [pc, #596]	; (8009a30 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80097dc:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80097e4:	4992      	ldr	r1, [pc, #584]	; (8009a30 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80097e6:	4313      	orrs	r3, r2
 80097e8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80097ec:	687b      	ldr	r3, [r7, #4]
 80097ee:	681b      	ldr	r3, [r3, #0]
 80097f0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80097f4:	2b00      	cmp	r3, #0
 80097f6:	d00a      	beq.n	800980e <HAL_RCCEx_PeriphCLKConfig+0x236>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80097f8:	4b8d      	ldr	r3, [pc, #564]	; (8009a30 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80097fa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80097fe:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009806:	498a      	ldr	r1, [pc, #552]	; (8009a30 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8009808:	4313      	orrs	r3, r2
 800980a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800980e:	687b      	ldr	r3, [r7, #4]
 8009810:	681b      	ldr	r3, [r3, #0]
 8009812:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009816:	2b00      	cmp	r3, #0
 8009818:	d00a      	beq.n	8009830 <HAL_RCCEx_PeriphCLKConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800981a:	4b85      	ldr	r3, [pc, #532]	; (8009a30 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800981c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009820:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009828:	4981      	ldr	r1, [pc, #516]	; (8009a30 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800982a:	4313      	orrs	r3, r2
 800982c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009838:	2b00      	cmp	r3, #0
 800983a:	d00a      	beq.n	8009852 <HAL_RCCEx_PeriphCLKConfig+0x27a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800983c:	4b7c      	ldr	r3, [pc, #496]	; (8009a30 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800983e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009842:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800984a:	4979      	ldr	r1, [pc, #484]	; (8009a30 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800984c:	4313      	orrs	r3, r2
 800984e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8009852:	687b      	ldr	r3, [r7, #4]
 8009854:	681b      	ldr	r3, [r3, #0]
 8009856:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800985a:	2b00      	cmp	r3, #0
 800985c:	d00a      	beq.n	8009874 <HAL_RCCEx_PeriphCLKConfig+0x29c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800985e:	4b74      	ldr	r3, [pc, #464]	; (8009a30 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8009860:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009864:	f023 0203 	bic.w	r2, r3, #3
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800986c:	4970      	ldr	r1, [pc, #448]	; (8009a30 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800986e:	4313      	orrs	r3, r2
 8009870:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8009874:	687b      	ldr	r3, [r7, #4]
 8009876:	681b      	ldr	r3, [r3, #0]
 8009878:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800987c:	2b00      	cmp	r3, #0
 800987e:	d00a      	beq.n	8009896 <HAL_RCCEx_PeriphCLKConfig+0x2be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8009880:	4b6b      	ldr	r3, [pc, #428]	; (8009a30 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8009882:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009886:	f023 020c 	bic.w	r2, r3, #12
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800988e:	4968      	ldr	r1, [pc, #416]	; (8009a30 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8009890:	4313      	orrs	r3, r2
 8009892:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d00a      	beq.n	80098b8 <HAL_RCCEx_PeriphCLKConfig+0x2e0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80098a2:	4b63      	ldr	r3, [pc, #396]	; (8009a30 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80098a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80098a8:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80098b0:	495f      	ldr	r1, [pc, #380]	; (8009a30 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80098b2:	4313      	orrs	r3, r2
 80098b4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80098c0:	2b00      	cmp	r3, #0
 80098c2:	d00a      	beq.n	80098da <HAL_RCCEx_PeriphCLKConfig+0x302>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80098c4:	4b5a      	ldr	r3, [pc, #360]	; (8009a30 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80098c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80098ca:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80098d2:	4957      	ldr	r1, [pc, #348]	; (8009a30 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80098d4:	4313      	orrs	r3, r2
 80098d6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d00a      	beq.n	80098fc <HAL_RCCEx_PeriphCLKConfig+0x324>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80098e6:	4b52      	ldr	r3, [pc, #328]	; (8009a30 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80098e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80098ec:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80098f0:	687b      	ldr	r3, [r7, #4]
 80098f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80098f4:	494e      	ldr	r1, [pc, #312]	; (8009a30 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80098f6:	4313      	orrs	r3, r2
 80098f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009904:	2b00      	cmp	r3, #0
 8009906:	d00a      	beq.n	800991e <HAL_RCCEx_PeriphCLKConfig+0x346>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8009908:	4b49      	ldr	r3, [pc, #292]	; (8009a30 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800990a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800990e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009916:	4946      	ldr	r1, [pc, #280]	; (8009a30 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8009918:	4313      	orrs	r3, r2
 800991a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009926:	2b00      	cmp	r3, #0
 8009928:	d00a      	beq.n	8009940 <HAL_RCCEx_PeriphCLKConfig+0x368>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800992a:	4b41      	ldr	r3, [pc, #260]	; (8009a30 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800992c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009930:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009938:	493d      	ldr	r1, [pc, #244]	; (8009a30 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800993a:	4313      	orrs	r3, r2
 800993c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009948:	2b00      	cmp	r3, #0
 800994a:	d00a      	beq.n	8009962 <HAL_RCCEx_PeriphCLKConfig+0x38a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 800994c:	4b38      	ldr	r3, [pc, #224]	; (8009a30 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800994e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009952:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800995a:	4935      	ldr	r1, [pc, #212]	; (8009a30 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800995c:	4313      	orrs	r3, r2
 800995e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800996a:	2b00      	cmp	r3, #0
 800996c:	d011      	beq.n	8009992 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 800996e:	4b30      	ldr	r3, [pc, #192]	; (8009a30 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8009970:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009974:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800997c:	492c      	ldr	r1, [pc, #176]	; (8009a30 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 800997e:	4313      	orrs	r3, r2
 8009980:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009988:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800998c:	d101      	bne.n	8009992 <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      pllsaiused = 1;
 800998e:	2301      	movs	r3, #1
 8009990:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800999a:	2b00      	cmp	r3, #0
 800999c:	d00a      	beq.n	80099b4 <HAL_RCCEx_PeriphCLKConfig+0x3dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800999e:	4b24      	ldr	r3, [pc, #144]	; (8009a30 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80099a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80099a4:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80099ac:	4920      	ldr	r1, [pc, #128]	; (8009a30 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80099ae:	4313      	orrs	r3, r2
 80099b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80099b4:	687b      	ldr	r3, [r7, #4]
 80099b6:	681b      	ldr	r3, [r3, #0]
 80099b8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80099bc:	2b00      	cmp	r3, #0
 80099be:	d00a      	beq.n	80099d6 <HAL_RCCEx_PeriphCLKConfig+0x3fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80099c0:	4b1b      	ldr	r3, [pc, #108]	; (8009a30 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80099c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80099c6:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80099ce:	4918      	ldr	r1, [pc, #96]	; (8009a30 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80099d0:	4313      	orrs	r3, r2
 80099d2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*------------------------------------- SDMMC2 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC2) == RCC_PERIPHCLK_SDMMC2)
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d00a      	beq.n	80099f8 <HAL_RCCEx_PeriphCLKConfig+0x420>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC2CLKSOURCE(PeriphClkInit->Sdmmc2ClockSelection));

    /* Configure the SDMMC2 clock source */
    __HAL_RCC_SDMMC2_CONFIG(PeriphClkInit->Sdmmc2ClockSelection);
 80099e2:	4b13      	ldr	r3, [pc, #76]	; (8009a30 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80099e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80099e8:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80099f0:	490f      	ldr	r1, [pc, #60]	; (8009a30 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80099f2:	4313      	orrs	r3, r2
 80099f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2 or I2S */
  if((plli2sused == 1) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 80099f8:	69fb      	ldr	r3, [r7, #28]
 80099fa:	2b01      	cmp	r3, #1
 80099fc:	d005      	beq.n	8009a0a <HAL_RCCEx_PeriphCLKConfig+0x432>
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8009a06:	f040 809c 	bne.w	8009b42 <HAL_RCCEx_PeriphCLKConfig+0x56a>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8009a0a:	4b09      	ldr	r3, [pc, #36]	; (8009a30 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8009a0c:	681b      	ldr	r3, [r3, #0]
 8009a0e:	4a08      	ldr	r2, [pc, #32]	; (8009a30 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8009a10:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009a14:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009a16:	f7fe fda3 	bl	8008560 <HAL_GetTick>
 8009a1a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8009a1c:	e00a      	b.n	8009a34 <HAL_RCCEx_PeriphCLKConfig+0x45c>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8009a1e:	f7fe fd9f 	bl	8008560 <HAL_GetTick>
 8009a22:	4602      	mov	r2, r0
 8009a24:	697b      	ldr	r3, [r7, #20]
 8009a26:	1ad3      	subs	r3, r2, r3
 8009a28:	2b64      	cmp	r3, #100	; 0x64
 8009a2a:	d903      	bls.n	8009a34 <HAL_RCCEx_PeriphCLKConfig+0x45c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009a2c:	2303      	movs	r3, #3
 8009a2e:	e115      	b.n	8009c5c <HAL_RCCEx_PeriphCLKConfig+0x684>
 8009a30:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8009a34:	4b8b      	ldr	r3, [pc, #556]	; (8009c64 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d1ee      	bne.n	8009a1e <HAL_RCCEx_PeriphCLKConfig+0x446>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	f003 0301 	and.w	r3, r3, #1
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d017      	beq.n	8009a7c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	d113      	bne.n	8009a7c <HAL_RCCEx_PeriphCLKConfig+0x4a4>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8009a54:	4b83      	ldr	r3, [pc, #524]	; (8009c64 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8009a56:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009a5a:	0e1b      	lsrs	r3, r3, #24
 8009a5c:	f003 030f 	and.w	r3, r3, #15
 8009a60:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, PeriphClkInit->PLLI2S.PLLI2SR);
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	685b      	ldr	r3, [r3, #4]
 8009a66:	019a      	lsls	r2, r3, #6
 8009a68:	693b      	ldr	r3, [r7, #16]
 8009a6a:	061b      	lsls	r3, r3, #24
 8009a6c:	431a      	orrs	r2, r3
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	689b      	ldr	r3, [r3, #8]
 8009a72:	071b      	lsls	r3, r3, #28
 8009a74:	497b      	ldr	r1, [pc, #492]	; (8009c64 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8009a76:	4313      	orrs	r3, r2
 8009a78:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009a84:	2b00      	cmp	r3, #0
 8009a86:	d004      	beq.n	8009a92 <HAL_RCCEx_PeriphCLKConfig+0x4ba>
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009a8c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009a90:	d00a      	beq.n	8009aa8 <HAL_RCCEx_PeriphCLKConfig+0x4d0>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d024      	beq.n	8009ae8 <HAL_RCCEx_PeriphCLKConfig+0x510>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009aa2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009aa6:	d11f      	bne.n	8009ae8 <HAL_RCCEx_PeriphCLKConfig+0x510>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8009aa8:	4b6e      	ldr	r3, [pc, #440]	; (8009c64 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8009aaa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009aae:	0f1b      	lsrs	r3, r3, #28
 8009ab0:	f003 0307 	and.w	r3, r3, #7
 8009ab4:	613b      	str	r3, [r7, #16]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg0);
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	685b      	ldr	r3, [r3, #4]
 8009aba:	019a      	lsls	r2, r3, #6
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	68db      	ldr	r3, [r3, #12]
 8009ac0:	061b      	lsls	r3, r3, #24
 8009ac2:	431a      	orrs	r2, r3
 8009ac4:	693b      	ldr	r3, [r7, #16]
 8009ac6:	071b      	lsls	r3, r3, #28
 8009ac8:	4966      	ldr	r1, [pc, #408]	; (8009c64 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8009aca:	4313      	orrs	r3, r2
 8009acc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8009ad0:	4b64      	ldr	r3, [pc, #400]	; (8009c64 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8009ad2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009ad6:	f023 021f 	bic.w	r2, r3, #31
 8009ada:	687b      	ldr	r3, [r7, #4]
 8009adc:	69db      	ldr	r3, [r3, #28]
 8009ade:	3b01      	subs	r3, #1
 8009ae0:	4960      	ldr	r1, [pc, #384]	; (8009c64 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8009ae2:	4313      	orrs	r3, r2
 8009ae4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8009ae8:	687b      	ldr	r3, [r7, #4]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d00d      	beq.n	8009b10 <HAL_RCCEx_PeriphCLKConfig+0x538>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	685b      	ldr	r3, [r3, #4]
 8009af8:	019a      	lsls	r2, r3, #6
 8009afa:	687b      	ldr	r3, [r7, #4]
 8009afc:	68db      	ldr	r3, [r3, #12]
 8009afe:	061b      	lsls	r3, r3, #24
 8009b00:	431a      	orrs	r2, r3
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	689b      	ldr	r3, [r3, #8]
 8009b06:	071b      	lsls	r3, r3, #28
 8009b08:	4956      	ldr	r1, [pc, #344]	; (8009c64 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8009b0a:	4313      	orrs	r3, r2
 8009b0c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8009b10:	4b54      	ldr	r3, [pc, #336]	; (8009c64 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8009b12:	681b      	ldr	r3, [r3, #0]
 8009b14:	4a53      	ldr	r2, [pc, #332]	; (8009c64 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8009b16:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009b1a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009b1c:	f7fe fd20 	bl	8008560 <HAL_GetTick>
 8009b20:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009b22:	e008      	b.n	8009b36 <HAL_RCCEx_PeriphCLKConfig+0x55e>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8009b24:	f7fe fd1c 	bl	8008560 <HAL_GetTick>
 8009b28:	4602      	mov	r2, r0
 8009b2a:	697b      	ldr	r3, [r7, #20]
 8009b2c:	1ad3      	subs	r3, r2, r3
 8009b2e:	2b64      	cmp	r3, #100	; 0x64
 8009b30:	d901      	bls.n	8009b36 <HAL_RCCEx_PeriphCLKConfig+0x55e>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009b32:	2303      	movs	r3, #3
 8009b34:	e092      	b.n	8009c5c <HAL_RCCEx_PeriphCLKConfig+0x684>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009b36:	4b4b      	ldr	r3, [pc, #300]	; (8009c64 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8009b38:	681b      	ldr	r3, [r3, #0]
 8009b3a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d0f0      	beq.n	8009b24 <HAL_RCCEx_PeriphCLKConfig+0x54c>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8009b42:	69bb      	ldr	r3, [r7, #24]
 8009b44:	2b01      	cmp	r3, #1
 8009b46:	f040 8088 	bne.w	8009c5a <HAL_RCCEx_PeriphCLKConfig+0x682>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8009b4a:	4b46      	ldr	r3, [pc, #280]	; (8009c64 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	4a45      	ldr	r2, [pc, #276]	; (8009c64 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8009b50:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009b54:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009b56:	f7fe fd03 	bl	8008560 <HAL_GetTick>
 8009b5a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8009b5c:	e008      	b.n	8009b70 <HAL_RCCEx_PeriphCLKConfig+0x598>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8009b5e:	f7fe fcff 	bl	8008560 <HAL_GetTick>
 8009b62:	4602      	mov	r2, r0
 8009b64:	697b      	ldr	r3, [r7, #20]
 8009b66:	1ad3      	subs	r3, r2, r3
 8009b68:	2b64      	cmp	r3, #100	; 0x64
 8009b6a:	d901      	bls.n	8009b70 <HAL_RCCEx_PeriphCLKConfig+0x598>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009b6c:	2303      	movs	r3, #3
 8009b6e:	e075      	b.n	8009c5c <HAL_RCCEx_PeriphCLKConfig+0x684>
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8009b70:	4b3c      	ldr	r3, [pc, #240]	; (8009c64 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8009b72:	681b      	ldr	r3, [r3, #0]
 8009b74:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009b78:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009b7c:	d0ef      	beq.n	8009b5e <HAL_RCCEx_PeriphCLKConfig+0x586>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8009b7e:	687b      	ldr	r3, [r7, #4]
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d003      	beq.n	8009b92 <HAL_RCCEx_PeriphCLKConfig+0x5ba>
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d009      	beq.n	8009ba6 <HAL_RCCEx_PeriphCLKConfig+0x5ce>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	681b      	ldr	r3, [r3, #0]
 8009b96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d024      	beq.n	8009be8 <HAL_RCCEx_PeriphCLKConfig+0x610>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009ba2:	2b00      	cmp	r3, #0
 8009ba4:	d120      	bne.n	8009be8 <HAL_RCCEx_PeriphCLKConfig+0x610>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8009ba6:	4b2f      	ldr	r3, [pc, #188]	; (8009c64 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8009ba8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009bac:	0c1b      	lsrs	r3, r3, #16
 8009bae:	f003 0303 	and.w	r3, r3, #3
 8009bb2:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ);
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	691b      	ldr	r3, [r3, #16]
 8009bb8:	019a      	lsls	r2, r3, #6
 8009bba:	693b      	ldr	r3, [r7, #16]
 8009bbc:	041b      	lsls	r3, r3, #16
 8009bbe:	431a      	orrs	r2, r3
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	695b      	ldr	r3, [r3, #20]
 8009bc4:	061b      	lsls	r3, r3, #24
 8009bc6:	4927      	ldr	r1, [pc, #156]	; (8009c64 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8009bc8:	4313      	orrs	r3, r2
 8009bca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8009bce:	4b25      	ldr	r3, [pc, #148]	; (8009c64 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8009bd0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009bd4:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	6a1b      	ldr	r3, [r3, #32]
 8009bdc:	3b01      	subs	r3, #1
 8009bde:	021b      	lsls	r3, r3, #8
 8009be0:	4920      	ldr	r1, [pc, #128]	; (8009c64 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8009be2:	4313      	orrs	r3, r2
 8009be4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	681b      	ldr	r3, [r3, #0]
 8009bec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009bf0:	2b00      	cmp	r3, #0
 8009bf2:	d018      	beq.n	8009c26 <HAL_RCCEx_PeriphCLKConfig+0x64e>
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009bf8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009bfc:	d113      	bne.n	8009c26 <HAL_RCCEx_PeriphCLKConfig+0x64e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8009bfe:	4b19      	ldr	r3, [pc, #100]	; (8009c64 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8009c00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009c04:	0e1b      	lsrs	r3, r3, #24
 8009c06:	f003 030f 	and.w	r3, r3, #15
 8009c0a:	613b      	str	r3, [r7, #16]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0);
 8009c0c:	687b      	ldr	r3, [r7, #4]
 8009c0e:	691b      	ldr	r3, [r3, #16]
 8009c10:	019a      	lsls	r2, r3, #6
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	699b      	ldr	r3, [r3, #24]
 8009c16:	041b      	lsls	r3, r3, #16
 8009c18:	431a      	orrs	r2, r3
 8009c1a:	693b      	ldr	r3, [r7, #16]
 8009c1c:	061b      	lsls	r3, r3, #24
 8009c1e:	4911      	ldr	r1, [pc, #68]	; (8009c64 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8009c20:	4313      	orrs	r3, r2
 8009c22:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8009c26:	4b0f      	ldr	r3, [pc, #60]	; (8009c64 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8009c28:	681b      	ldr	r3, [r3, #0]
 8009c2a:	4a0e      	ldr	r2, [pc, #56]	; (8009c64 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8009c2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009c30:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009c32:	f7fe fc95 	bl	8008560 <HAL_GetTick>
 8009c36:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8009c38:	e008      	b.n	8009c4c <HAL_RCCEx_PeriphCLKConfig+0x674>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8009c3a:	f7fe fc91 	bl	8008560 <HAL_GetTick>
 8009c3e:	4602      	mov	r2, r0
 8009c40:	697b      	ldr	r3, [r7, #20]
 8009c42:	1ad3      	subs	r3, r2, r3
 8009c44:	2b64      	cmp	r3, #100	; 0x64
 8009c46:	d901      	bls.n	8009c4c <HAL_RCCEx_PeriphCLKConfig+0x674>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009c48:	2303      	movs	r3, #3
 8009c4a:	e007      	b.n	8009c5c <HAL_RCCEx_PeriphCLKConfig+0x684>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8009c4c:	4b05      	ldr	r3, [pc, #20]	; (8009c64 <HAL_RCCEx_PeriphCLKConfig+0x68c>)
 8009c4e:	681b      	ldr	r3, [r3, #0]
 8009c50:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009c54:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009c58:	d1ef      	bne.n	8009c3a <HAL_RCCEx_PeriphCLKConfig+0x662>
      }
    }
  }
  return HAL_OK;
 8009c5a:	2300      	movs	r3, #0
}
 8009c5c:	4618      	mov	r0, r3
 8009c5e:	3720      	adds	r7, #32
 8009c60:	46bd      	mov	sp, r7
 8009c62:	bd80      	pop	{r7, pc}
 8009c64:	40023800 	.word	0x40023800

08009c68 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009c68:	b580      	push	{r7, lr}
 8009c6a:	b082      	sub	sp, #8
 8009c6c:	af00      	add	r7, sp, #0
 8009c6e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	2b00      	cmp	r3, #0
 8009c74:	d101      	bne.n	8009c7a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009c76:	2301      	movs	r3, #1
 8009c78:	e040      	b.n	8009cfc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009c7e:	2b00      	cmp	r3, #0
 8009c80:	d106      	bne.n	8009c90 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009c82:	687b      	ldr	r3, [r7, #4]
 8009c84:	2200      	movs	r2, #0
 8009c86:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009c8a:	6878      	ldr	r0, [r7, #4]
 8009c8c:	f7fe fb66 	bl	800835c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009c90:	687b      	ldr	r3, [r7, #4]
 8009c92:	2224      	movs	r2, #36	; 0x24
 8009c94:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	681a      	ldr	r2, [r3, #0]
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	f022 0201 	bic.w	r2, r2, #1
 8009ca4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009ca6:	6878      	ldr	r0, [r7, #4]
 8009ca8:	f000 f98a 	bl	8009fc0 <UART_SetConfig>
 8009cac:	4603      	mov	r3, r0
 8009cae:	2b01      	cmp	r3, #1
 8009cb0:	d101      	bne.n	8009cb6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8009cb2:	2301      	movs	r3, #1
 8009cb4:	e022      	b.n	8009cfc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d002      	beq.n	8009cc4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8009cbe:	6878      	ldr	r0, [r7, #4]
 8009cc0:	f000 fc28 	bl	800a514 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009cc4:	687b      	ldr	r3, [r7, #4]
 8009cc6:	681b      	ldr	r3, [r3, #0]
 8009cc8:	685a      	ldr	r2, [r3, #4]
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009cd2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	681b      	ldr	r3, [r3, #0]
 8009cd8:	689a      	ldr	r2, [r3, #8]
 8009cda:	687b      	ldr	r3, [r7, #4]
 8009cdc:	681b      	ldr	r3, [r3, #0]
 8009cde:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009ce2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	681a      	ldr	r2, [r3, #0]
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	f042 0201 	orr.w	r2, r2, #1
 8009cf2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009cf4:	6878      	ldr	r0, [r7, #4]
 8009cf6:	f000 fcaf 	bl	800a658 <UART_CheckIdleState>
 8009cfa:	4603      	mov	r3, r0
}
 8009cfc:	4618      	mov	r0, r3
 8009cfe:	3708      	adds	r7, #8
 8009d00:	46bd      	mov	sp, r7
 8009d02:	bd80      	pop	{r7, pc}

08009d04 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009d04:	b580      	push	{r7, lr}
 8009d06:	b08a      	sub	sp, #40	; 0x28
 8009d08:	af02      	add	r7, sp, #8
 8009d0a:	60f8      	str	r0, [r7, #12]
 8009d0c:	60b9      	str	r1, [r7, #8]
 8009d0e:	603b      	str	r3, [r7, #0]
 8009d10:	4613      	mov	r3, r2
 8009d12:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009d18:	2b20      	cmp	r3, #32
 8009d1a:	d17f      	bne.n	8009e1c <HAL_UART_Transmit+0x118>
  {
    if ((pData == NULL) || (Size == 0U))
 8009d1c:	68bb      	ldr	r3, [r7, #8]
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d002      	beq.n	8009d28 <HAL_UART_Transmit+0x24>
 8009d22:	88fb      	ldrh	r3, [r7, #6]
 8009d24:	2b00      	cmp	r3, #0
 8009d26:	d101      	bne.n	8009d2c <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8009d28:	2301      	movs	r3, #1
 8009d2a:	e078      	b.n	8009e1e <HAL_UART_Transmit+0x11a>
    }

    __HAL_LOCK(huart);
 8009d2c:	68fb      	ldr	r3, [r7, #12]
 8009d2e:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8009d32:	2b01      	cmp	r3, #1
 8009d34:	d101      	bne.n	8009d3a <HAL_UART_Transmit+0x36>
 8009d36:	2302      	movs	r3, #2
 8009d38:	e071      	b.n	8009e1e <HAL_UART_Transmit+0x11a>
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	2201      	movs	r2, #1
 8009d3e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009d42:	68fb      	ldr	r3, [r7, #12]
 8009d44:	2200      	movs	r2, #0
 8009d46:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	2221      	movs	r2, #33	; 0x21
 8009d4c:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8009d4e:	f7fe fc07 	bl	8008560 <HAL_GetTick>
 8009d52:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009d54:	68fb      	ldr	r3, [r7, #12]
 8009d56:	88fa      	ldrh	r2, [r7, #6]
 8009d58:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	88fa      	ldrh	r2, [r7, #6]
 8009d60:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	689b      	ldr	r3, [r3, #8]
 8009d68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009d6c:	d108      	bne.n	8009d80 <HAL_UART_Transmit+0x7c>
 8009d6e:	68fb      	ldr	r3, [r7, #12]
 8009d70:	691b      	ldr	r3, [r3, #16]
 8009d72:	2b00      	cmp	r3, #0
 8009d74:	d104      	bne.n	8009d80 <HAL_UART_Transmit+0x7c>
    {
      pdata8bits  = NULL;
 8009d76:	2300      	movs	r3, #0
 8009d78:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8009d7a:	68bb      	ldr	r3, [r7, #8]
 8009d7c:	61bb      	str	r3, [r7, #24]
 8009d7e:	e003      	b.n	8009d88 <HAL_UART_Transmit+0x84>
    }
    else
    {
      pdata8bits  = pData;
 8009d80:	68bb      	ldr	r3, [r7, #8]
 8009d82:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009d84:	2300      	movs	r3, #0
 8009d86:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8009d88:	68fb      	ldr	r3, [r7, #12]
 8009d8a:	2200      	movs	r2, #0
 8009d8c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8009d90:	e02c      	b.n	8009dec <HAL_UART_Transmit+0xe8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009d92:	683b      	ldr	r3, [r7, #0]
 8009d94:	9300      	str	r3, [sp, #0]
 8009d96:	697b      	ldr	r3, [r7, #20]
 8009d98:	2200      	movs	r2, #0
 8009d9a:	2180      	movs	r1, #128	; 0x80
 8009d9c:	68f8      	ldr	r0, [r7, #12]
 8009d9e:	f000 fc8a 	bl	800a6b6 <UART_WaitOnFlagUntilTimeout>
 8009da2:	4603      	mov	r3, r0
 8009da4:	2b00      	cmp	r3, #0
 8009da6:	d001      	beq.n	8009dac <HAL_UART_Transmit+0xa8>
      {
        return HAL_TIMEOUT;
 8009da8:	2303      	movs	r3, #3
 8009daa:	e038      	b.n	8009e1e <HAL_UART_Transmit+0x11a>
      }
      if (pdata8bits == NULL)
 8009dac:	69fb      	ldr	r3, [r7, #28]
 8009dae:	2b00      	cmp	r3, #0
 8009db0:	d10b      	bne.n	8009dca <HAL_UART_Transmit+0xc6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009db2:	69bb      	ldr	r3, [r7, #24]
 8009db4:	881b      	ldrh	r3, [r3, #0]
 8009db6:	461a      	mov	r2, r3
 8009db8:	68fb      	ldr	r3, [r7, #12]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009dc0:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8009dc2:	69bb      	ldr	r3, [r7, #24]
 8009dc4:	3302      	adds	r3, #2
 8009dc6:	61bb      	str	r3, [r7, #24]
 8009dc8:	e007      	b.n	8009dda <HAL_UART_Transmit+0xd6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009dca:	69fb      	ldr	r3, [r7, #28]
 8009dcc:	781a      	ldrb	r2, [r3, #0]
 8009dce:	68fb      	ldr	r3, [r7, #12]
 8009dd0:	681b      	ldr	r3, [r3, #0]
 8009dd2:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8009dd4:	69fb      	ldr	r3, [r7, #28]
 8009dd6:	3301      	adds	r3, #1
 8009dd8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009dda:	68fb      	ldr	r3, [r7, #12]
 8009ddc:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009de0:	b29b      	uxth	r3, r3
 8009de2:	3b01      	subs	r3, #1
 8009de4:	b29a      	uxth	r2, r3
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009df2:	b29b      	uxth	r3, r3
 8009df4:	2b00      	cmp	r3, #0
 8009df6:	d1cc      	bne.n	8009d92 <HAL_UART_Transmit+0x8e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009df8:	683b      	ldr	r3, [r7, #0]
 8009dfa:	9300      	str	r3, [sp, #0]
 8009dfc:	697b      	ldr	r3, [r7, #20]
 8009dfe:	2200      	movs	r2, #0
 8009e00:	2140      	movs	r1, #64	; 0x40
 8009e02:	68f8      	ldr	r0, [r7, #12]
 8009e04:	f000 fc57 	bl	800a6b6 <UART_WaitOnFlagUntilTimeout>
 8009e08:	4603      	mov	r3, r0
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d001      	beq.n	8009e12 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8009e0e:	2303      	movs	r3, #3
 8009e10:	e005      	b.n	8009e1e <HAL_UART_Transmit+0x11a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009e12:	68fb      	ldr	r3, [r7, #12]
 8009e14:	2220      	movs	r2, #32
 8009e16:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8009e18:	2300      	movs	r3, #0
 8009e1a:	e000      	b.n	8009e1e <HAL_UART_Transmit+0x11a>
  }
  else
  {
    return HAL_BUSY;
 8009e1c:	2302      	movs	r3, #2
  }
}
 8009e1e:	4618      	mov	r0, r3
 8009e20:	3720      	adds	r7, #32
 8009e22:	46bd      	mov	sp, r7
 8009e24:	bd80      	pop	{r7, pc}

08009e26 <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009e26:	b580      	push	{r7, lr}
 8009e28:	b08a      	sub	sp, #40	; 0x28
 8009e2a:	af02      	add	r7, sp, #8
 8009e2c:	60f8      	str	r0, [r7, #12]
 8009e2e:	60b9      	str	r1, [r7, #8]
 8009e30:	603b      	str	r3, [r7, #0]
 8009e32:	4613      	mov	r3, r2
 8009e34:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009e36:	68fb      	ldr	r3, [r7, #12]
 8009e38:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009e3a:	2b20      	cmp	r3, #32
 8009e3c:	f040 80ba 	bne.w	8009fb4 <HAL_UART_Receive+0x18e>
  {
    if ((pData == NULL) || (Size == 0U))
 8009e40:	68bb      	ldr	r3, [r7, #8]
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d002      	beq.n	8009e4c <HAL_UART_Receive+0x26>
 8009e46:	88fb      	ldrh	r3, [r7, #6]
 8009e48:	2b00      	cmp	r3, #0
 8009e4a:	d101      	bne.n	8009e50 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8009e4c:	2301      	movs	r3, #1
 8009e4e:	e0b2      	b.n	8009fb6 <HAL_UART_Receive+0x190>
    }

    __HAL_LOCK(huart);
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8009e56:	2b01      	cmp	r3, #1
 8009e58:	d101      	bne.n	8009e5e <HAL_UART_Receive+0x38>
 8009e5a:	2302      	movs	r3, #2
 8009e5c:	e0ab      	b.n	8009fb6 <HAL_UART_Receive+0x190>
 8009e5e:	68fb      	ldr	r3, [r7, #12]
 8009e60:	2201      	movs	r2, #1
 8009e62:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009e66:	68fb      	ldr	r3, [r7, #12]
 8009e68:	2200      	movs	r2, #0
 8009e6a:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009e6c:	68fb      	ldr	r3, [r7, #12]
 8009e6e:	2222      	movs	r2, #34	; 0x22
 8009e70:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8009e72:	f7fe fb75 	bl	8008560 <HAL_GetTick>
 8009e76:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8009e78:	68fb      	ldr	r3, [r7, #12]
 8009e7a:	88fa      	ldrh	r2, [r7, #6]
 8009e7c:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8009e80:	68fb      	ldr	r3, [r7, #12]
 8009e82:	88fa      	ldrh	r2, [r7, #6]
 8009e84:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8009e88:	68fb      	ldr	r3, [r7, #12]
 8009e8a:	689b      	ldr	r3, [r3, #8]
 8009e8c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009e90:	d10e      	bne.n	8009eb0 <HAL_UART_Receive+0x8a>
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	691b      	ldr	r3, [r3, #16]
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d105      	bne.n	8009ea6 <HAL_UART_Receive+0x80>
 8009e9a:	68fb      	ldr	r3, [r7, #12]
 8009e9c:	f240 12ff 	movw	r2, #511	; 0x1ff
 8009ea0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009ea4:	e02d      	b.n	8009f02 <HAL_UART_Receive+0xdc>
 8009ea6:	68fb      	ldr	r3, [r7, #12]
 8009ea8:	22ff      	movs	r2, #255	; 0xff
 8009eaa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009eae:	e028      	b.n	8009f02 <HAL_UART_Receive+0xdc>
 8009eb0:	68fb      	ldr	r3, [r7, #12]
 8009eb2:	689b      	ldr	r3, [r3, #8]
 8009eb4:	2b00      	cmp	r3, #0
 8009eb6:	d10d      	bne.n	8009ed4 <HAL_UART_Receive+0xae>
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	691b      	ldr	r3, [r3, #16]
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	d104      	bne.n	8009eca <HAL_UART_Receive+0xa4>
 8009ec0:	68fb      	ldr	r3, [r7, #12]
 8009ec2:	22ff      	movs	r2, #255	; 0xff
 8009ec4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009ec8:	e01b      	b.n	8009f02 <HAL_UART_Receive+0xdc>
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	227f      	movs	r2, #127	; 0x7f
 8009ece:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009ed2:	e016      	b.n	8009f02 <HAL_UART_Receive+0xdc>
 8009ed4:	68fb      	ldr	r3, [r7, #12]
 8009ed6:	689b      	ldr	r3, [r3, #8]
 8009ed8:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009edc:	d10d      	bne.n	8009efa <HAL_UART_Receive+0xd4>
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	691b      	ldr	r3, [r3, #16]
 8009ee2:	2b00      	cmp	r3, #0
 8009ee4:	d104      	bne.n	8009ef0 <HAL_UART_Receive+0xca>
 8009ee6:	68fb      	ldr	r3, [r7, #12]
 8009ee8:	227f      	movs	r2, #127	; 0x7f
 8009eea:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009eee:	e008      	b.n	8009f02 <HAL_UART_Receive+0xdc>
 8009ef0:	68fb      	ldr	r3, [r7, #12]
 8009ef2:	223f      	movs	r2, #63	; 0x3f
 8009ef4:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009ef8:	e003      	b.n	8009f02 <HAL_UART_Receive+0xdc>
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	2200      	movs	r2, #0
 8009efe:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8009f02:	68fb      	ldr	r3, [r7, #12]
 8009f04:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009f08:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009f0a:	68fb      	ldr	r3, [r7, #12]
 8009f0c:	689b      	ldr	r3, [r3, #8]
 8009f0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009f12:	d108      	bne.n	8009f26 <HAL_UART_Receive+0x100>
 8009f14:	68fb      	ldr	r3, [r7, #12]
 8009f16:	691b      	ldr	r3, [r3, #16]
 8009f18:	2b00      	cmp	r3, #0
 8009f1a:	d104      	bne.n	8009f26 <HAL_UART_Receive+0x100>
    {
      pdata8bits  = NULL;
 8009f1c:	2300      	movs	r3, #0
 8009f1e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8009f20:	68bb      	ldr	r3, [r7, #8]
 8009f22:	61bb      	str	r3, [r7, #24]
 8009f24:	e003      	b.n	8009f2e <HAL_UART_Receive+0x108>
    }
    else
    {
      pdata8bits  = pData;
 8009f26:	68bb      	ldr	r3, [r7, #8]
 8009f28:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009f2a:	2300      	movs	r3, #0
 8009f2c:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8009f2e:	68fb      	ldr	r3, [r7, #12]
 8009f30:	2200      	movs	r2, #0
 8009f32:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8009f36:	e032      	b.n	8009f9e <HAL_UART_Receive+0x178>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8009f38:	683b      	ldr	r3, [r7, #0]
 8009f3a:	9300      	str	r3, [sp, #0]
 8009f3c:	697b      	ldr	r3, [r7, #20]
 8009f3e:	2200      	movs	r2, #0
 8009f40:	2120      	movs	r1, #32
 8009f42:	68f8      	ldr	r0, [r7, #12]
 8009f44:	f000 fbb7 	bl	800a6b6 <UART_WaitOnFlagUntilTimeout>
 8009f48:	4603      	mov	r3, r0
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d001      	beq.n	8009f52 <HAL_UART_Receive+0x12c>
      {
        return HAL_TIMEOUT;
 8009f4e:	2303      	movs	r3, #3
 8009f50:	e031      	b.n	8009fb6 <HAL_UART_Receive+0x190>
      }
      if (pdata8bits == NULL)
 8009f52:	69fb      	ldr	r3, [r7, #28]
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d10c      	bne.n	8009f72 <HAL_UART_Receive+0x14c>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8009f58:	68fb      	ldr	r3, [r7, #12]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f5e:	b29a      	uxth	r2, r3
 8009f60:	8a7b      	ldrh	r3, [r7, #18]
 8009f62:	4013      	ands	r3, r2
 8009f64:	b29a      	uxth	r2, r3
 8009f66:	69bb      	ldr	r3, [r7, #24]
 8009f68:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8009f6a:	69bb      	ldr	r3, [r7, #24]
 8009f6c:	3302      	adds	r3, #2
 8009f6e:	61bb      	str	r3, [r7, #24]
 8009f70:	e00c      	b.n	8009f8c <HAL_UART_Receive+0x166>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8009f72:	68fb      	ldr	r3, [r7, #12]
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f78:	b2da      	uxtb	r2, r3
 8009f7a:	8a7b      	ldrh	r3, [r7, #18]
 8009f7c:	b2db      	uxtb	r3, r3
 8009f7e:	4013      	ands	r3, r2
 8009f80:	b2da      	uxtb	r2, r3
 8009f82:	69fb      	ldr	r3, [r7, #28]
 8009f84:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8009f86:	69fb      	ldr	r3, [r7, #28]
 8009f88:	3301      	adds	r3, #1
 8009f8a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009f92:	b29b      	uxth	r3, r3
 8009f94:	3b01      	subs	r3, #1
 8009f96:	b29a      	uxth	r2, r3
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009fa4:	b29b      	uxth	r3, r3
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d1c6      	bne.n	8009f38 <HAL_UART_Receive+0x112>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009faa:	68fb      	ldr	r3, [r7, #12]
 8009fac:	2220      	movs	r2, #32
 8009fae:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8009fb0:	2300      	movs	r3, #0
 8009fb2:	e000      	b.n	8009fb6 <HAL_UART_Receive+0x190>
  }
  else
  {
    return HAL_BUSY;
 8009fb4:	2302      	movs	r3, #2
  }
}
 8009fb6:	4618      	mov	r0, r3
 8009fb8:	3720      	adds	r7, #32
 8009fba:	46bd      	mov	sp, r7
 8009fbc:	bd80      	pop	{r7, pc}
	...

08009fc0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009fc0:	b580      	push	{r7, lr}
 8009fc2:	b088      	sub	sp, #32
 8009fc4:	af00      	add	r7, sp, #0
 8009fc6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8009fc8:	2300      	movs	r3, #0
 8009fca:	61bb      	str	r3, [r7, #24]
  HAL_StatusTypeDef ret               = HAL_OK;
 8009fcc:	2300      	movs	r3, #0
 8009fce:	75fb      	strb	r3, [r7, #23]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	689a      	ldr	r2, [r3, #8]
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	691b      	ldr	r3, [r3, #16]
 8009fd8:	431a      	orrs	r2, r3
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	695b      	ldr	r3, [r3, #20]
 8009fde:	431a      	orrs	r2, r3
 8009fe0:	687b      	ldr	r3, [r7, #4]
 8009fe2:	69db      	ldr	r3, [r3, #28]
 8009fe4:	4313      	orrs	r3, r2
 8009fe6:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009fe8:	687b      	ldr	r3, [r7, #4]
 8009fea:	681b      	ldr	r3, [r3, #0]
 8009fec:	681a      	ldr	r2, [r3, #0]
 8009fee:	4bb1      	ldr	r3, [pc, #708]	; (800a2b4 <UART_SetConfig+0x2f4>)
 8009ff0:	4013      	ands	r3, r2
 8009ff2:	687a      	ldr	r2, [r7, #4]
 8009ff4:	6812      	ldr	r2, [r2, #0]
 8009ff6:	6939      	ldr	r1, [r7, #16]
 8009ff8:	430b      	orrs	r3, r1
 8009ffa:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009ffc:	687b      	ldr	r3, [r7, #4]
 8009ffe:	681b      	ldr	r3, [r3, #0]
 800a000:	685b      	ldr	r3, [r3, #4]
 800a002:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	68da      	ldr	r2, [r3, #12]
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	430a      	orrs	r2, r1
 800a010:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800a012:	687b      	ldr	r3, [r7, #4]
 800a014:	699b      	ldr	r3, [r3, #24]
 800a016:	613b      	str	r3, [r7, #16]

  tmpreg |= huart->Init.OneBitSampling;
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	6a1b      	ldr	r3, [r3, #32]
 800a01c:	693a      	ldr	r2, [r7, #16]
 800a01e:	4313      	orrs	r3, r2
 800a020:	613b      	str	r3, [r7, #16]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	681b      	ldr	r3, [r3, #0]
 800a026:	689b      	ldr	r3, [r3, #8]
 800a028:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	681b      	ldr	r3, [r3, #0]
 800a030:	693a      	ldr	r2, [r7, #16]
 800a032:	430a      	orrs	r2, r1
 800a034:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	4a9f      	ldr	r2, [pc, #636]	; (800a2b8 <UART_SetConfig+0x2f8>)
 800a03c:	4293      	cmp	r3, r2
 800a03e:	d121      	bne.n	800a084 <UART_SetConfig+0xc4>
 800a040:	4b9e      	ldr	r3, [pc, #632]	; (800a2bc <UART_SetConfig+0x2fc>)
 800a042:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a046:	f003 0303 	and.w	r3, r3, #3
 800a04a:	2b03      	cmp	r3, #3
 800a04c:	d816      	bhi.n	800a07c <UART_SetConfig+0xbc>
 800a04e:	a201      	add	r2, pc, #4	; (adr r2, 800a054 <UART_SetConfig+0x94>)
 800a050:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a054:	0800a065 	.word	0x0800a065
 800a058:	0800a071 	.word	0x0800a071
 800a05c:	0800a06b 	.word	0x0800a06b
 800a060:	0800a077 	.word	0x0800a077
 800a064:	2301      	movs	r3, #1
 800a066:	77fb      	strb	r3, [r7, #31]
 800a068:	e151      	b.n	800a30e <UART_SetConfig+0x34e>
 800a06a:	2302      	movs	r3, #2
 800a06c:	77fb      	strb	r3, [r7, #31]
 800a06e:	e14e      	b.n	800a30e <UART_SetConfig+0x34e>
 800a070:	2304      	movs	r3, #4
 800a072:	77fb      	strb	r3, [r7, #31]
 800a074:	e14b      	b.n	800a30e <UART_SetConfig+0x34e>
 800a076:	2308      	movs	r3, #8
 800a078:	77fb      	strb	r3, [r7, #31]
 800a07a:	e148      	b.n	800a30e <UART_SetConfig+0x34e>
 800a07c:	2310      	movs	r3, #16
 800a07e:	77fb      	strb	r3, [r7, #31]
 800a080:	bf00      	nop
 800a082:	e144      	b.n	800a30e <UART_SetConfig+0x34e>
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	4a8d      	ldr	r2, [pc, #564]	; (800a2c0 <UART_SetConfig+0x300>)
 800a08a:	4293      	cmp	r3, r2
 800a08c:	d134      	bne.n	800a0f8 <UART_SetConfig+0x138>
 800a08e:	4b8b      	ldr	r3, [pc, #556]	; (800a2bc <UART_SetConfig+0x2fc>)
 800a090:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a094:	f003 030c 	and.w	r3, r3, #12
 800a098:	2b0c      	cmp	r3, #12
 800a09a:	d829      	bhi.n	800a0f0 <UART_SetConfig+0x130>
 800a09c:	a201      	add	r2, pc, #4	; (adr r2, 800a0a4 <UART_SetConfig+0xe4>)
 800a09e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a0a2:	bf00      	nop
 800a0a4:	0800a0d9 	.word	0x0800a0d9
 800a0a8:	0800a0f1 	.word	0x0800a0f1
 800a0ac:	0800a0f1 	.word	0x0800a0f1
 800a0b0:	0800a0f1 	.word	0x0800a0f1
 800a0b4:	0800a0e5 	.word	0x0800a0e5
 800a0b8:	0800a0f1 	.word	0x0800a0f1
 800a0bc:	0800a0f1 	.word	0x0800a0f1
 800a0c0:	0800a0f1 	.word	0x0800a0f1
 800a0c4:	0800a0df 	.word	0x0800a0df
 800a0c8:	0800a0f1 	.word	0x0800a0f1
 800a0cc:	0800a0f1 	.word	0x0800a0f1
 800a0d0:	0800a0f1 	.word	0x0800a0f1
 800a0d4:	0800a0eb 	.word	0x0800a0eb
 800a0d8:	2300      	movs	r3, #0
 800a0da:	77fb      	strb	r3, [r7, #31]
 800a0dc:	e117      	b.n	800a30e <UART_SetConfig+0x34e>
 800a0de:	2302      	movs	r3, #2
 800a0e0:	77fb      	strb	r3, [r7, #31]
 800a0e2:	e114      	b.n	800a30e <UART_SetConfig+0x34e>
 800a0e4:	2304      	movs	r3, #4
 800a0e6:	77fb      	strb	r3, [r7, #31]
 800a0e8:	e111      	b.n	800a30e <UART_SetConfig+0x34e>
 800a0ea:	2308      	movs	r3, #8
 800a0ec:	77fb      	strb	r3, [r7, #31]
 800a0ee:	e10e      	b.n	800a30e <UART_SetConfig+0x34e>
 800a0f0:	2310      	movs	r3, #16
 800a0f2:	77fb      	strb	r3, [r7, #31]
 800a0f4:	bf00      	nop
 800a0f6:	e10a      	b.n	800a30e <UART_SetConfig+0x34e>
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	681b      	ldr	r3, [r3, #0]
 800a0fc:	4a71      	ldr	r2, [pc, #452]	; (800a2c4 <UART_SetConfig+0x304>)
 800a0fe:	4293      	cmp	r3, r2
 800a100:	d120      	bne.n	800a144 <UART_SetConfig+0x184>
 800a102:	4b6e      	ldr	r3, [pc, #440]	; (800a2bc <UART_SetConfig+0x2fc>)
 800a104:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a108:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800a10c:	2b10      	cmp	r3, #16
 800a10e:	d00f      	beq.n	800a130 <UART_SetConfig+0x170>
 800a110:	2b10      	cmp	r3, #16
 800a112:	d802      	bhi.n	800a11a <UART_SetConfig+0x15a>
 800a114:	2b00      	cmp	r3, #0
 800a116:	d005      	beq.n	800a124 <UART_SetConfig+0x164>
 800a118:	e010      	b.n	800a13c <UART_SetConfig+0x17c>
 800a11a:	2b20      	cmp	r3, #32
 800a11c:	d005      	beq.n	800a12a <UART_SetConfig+0x16a>
 800a11e:	2b30      	cmp	r3, #48	; 0x30
 800a120:	d009      	beq.n	800a136 <UART_SetConfig+0x176>
 800a122:	e00b      	b.n	800a13c <UART_SetConfig+0x17c>
 800a124:	2300      	movs	r3, #0
 800a126:	77fb      	strb	r3, [r7, #31]
 800a128:	e0f1      	b.n	800a30e <UART_SetConfig+0x34e>
 800a12a:	2302      	movs	r3, #2
 800a12c:	77fb      	strb	r3, [r7, #31]
 800a12e:	e0ee      	b.n	800a30e <UART_SetConfig+0x34e>
 800a130:	2304      	movs	r3, #4
 800a132:	77fb      	strb	r3, [r7, #31]
 800a134:	e0eb      	b.n	800a30e <UART_SetConfig+0x34e>
 800a136:	2308      	movs	r3, #8
 800a138:	77fb      	strb	r3, [r7, #31]
 800a13a:	e0e8      	b.n	800a30e <UART_SetConfig+0x34e>
 800a13c:	2310      	movs	r3, #16
 800a13e:	77fb      	strb	r3, [r7, #31]
 800a140:	bf00      	nop
 800a142:	e0e4      	b.n	800a30e <UART_SetConfig+0x34e>
 800a144:	687b      	ldr	r3, [r7, #4]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	4a5f      	ldr	r2, [pc, #380]	; (800a2c8 <UART_SetConfig+0x308>)
 800a14a:	4293      	cmp	r3, r2
 800a14c:	d120      	bne.n	800a190 <UART_SetConfig+0x1d0>
 800a14e:	4b5b      	ldr	r3, [pc, #364]	; (800a2bc <UART_SetConfig+0x2fc>)
 800a150:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a154:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800a158:	2b40      	cmp	r3, #64	; 0x40
 800a15a:	d00f      	beq.n	800a17c <UART_SetConfig+0x1bc>
 800a15c:	2b40      	cmp	r3, #64	; 0x40
 800a15e:	d802      	bhi.n	800a166 <UART_SetConfig+0x1a6>
 800a160:	2b00      	cmp	r3, #0
 800a162:	d005      	beq.n	800a170 <UART_SetConfig+0x1b0>
 800a164:	e010      	b.n	800a188 <UART_SetConfig+0x1c8>
 800a166:	2b80      	cmp	r3, #128	; 0x80
 800a168:	d005      	beq.n	800a176 <UART_SetConfig+0x1b6>
 800a16a:	2bc0      	cmp	r3, #192	; 0xc0
 800a16c:	d009      	beq.n	800a182 <UART_SetConfig+0x1c2>
 800a16e:	e00b      	b.n	800a188 <UART_SetConfig+0x1c8>
 800a170:	2300      	movs	r3, #0
 800a172:	77fb      	strb	r3, [r7, #31]
 800a174:	e0cb      	b.n	800a30e <UART_SetConfig+0x34e>
 800a176:	2302      	movs	r3, #2
 800a178:	77fb      	strb	r3, [r7, #31]
 800a17a:	e0c8      	b.n	800a30e <UART_SetConfig+0x34e>
 800a17c:	2304      	movs	r3, #4
 800a17e:	77fb      	strb	r3, [r7, #31]
 800a180:	e0c5      	b.n	800a30e <UART_SetConfig+0x34e>
 800a182:	2308      	movs	r3, #8
 800a184:	77fb      	strb	r3, [r7, #31]
 800a186:	e0c2      	b.n	800a30e <UART_SetConfig+0x34e>
 800a188:	2310      	movs	r3, #16
 800a18a:	77fb      	strb	r3, [r7, #31]
 800a18c:	bf00      	nop
 800a18e:	e0be      	b.n	800a30e <UART_SetConfig+0x34e>
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	4a4d      	ldr	r2, [pc, #308]	; (800a2cc <UART_SetConfig+0x30c>)
 800a196:	4293      	cmp	r3, r2
 800a198:	d124      	bne.n	800a1e4 <UART_SetConfig+0x224>
 800a19a:	4b48      	ldr	r3, [pc, #288]	; (800a2bc <UART_SetConfig+0x2fc>)
 800a19c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a1a0:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a1a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a1a8:	d012      	beq.n	800a1d0 <UART_SetConfig+0x210>
 800a1aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a1ae:	d802      	bhi.n	800a1b6 <UART_SetConfig+0x1f6>
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	d007      	beq.n	800a1c4 <UART_SetConfig+0x204>
 800a1b4:	e012      	b.n	800a1dc <UART_SetConfig+0x21c>
 800a1b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800a1ba:	d006      	beq.n	800a1ca <UART_SetConfig+0x20a>
 800a1bc:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a1c0:	d009      	beq.n	800a1d6 <UART_SetConfig+0x216>
 800a1c2:	e00b      	b.n	800a1dc <UART_SetConfig+0x21c>
 800a1c4:	2300      	movs	r3, #0
 800a1c6:	77fb      	strb	r3, [r7, #31]
 800a1c8:	e0a1      	b.n	800a30e <UART_SetConfig+0x34e>
 800a1ca:	2302      	movs	r3, #2
 800a1cc:	77fb      	strb	r3, [r7, #31]
 800a1ce:	e09e      	b.n	800a30e <UART_SetConfig+0x34e>
 800a1d0:	2304      	movs	r3, #4
 800a1d2:	77fb      	strb	r3, [r7, #31]
 800a1d4:	e09b      	b.n	800a30e <UART_SetConfig+0x34e>
 800a1d6:	2308      	movs	r3, #8
 800a1d8:	77fb      	strb	r3, [r7, #31]
 800a1da:	e098      	b.n	800a30e <UART_SetConfig+0x34e>
 800a1dc:	2310      	movs	r3, #16
 800a1de:	77fb      	strb	r3, [r7, #31]
 800a1e0:	bf00      	nop
 800a1e2:	e094      	b.n	800a30e <UART_SetConfig+0x34e>
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	4a39      	ldr	r2, [pc, #228]	; (800a2d0 <UART_SetConfig+0x310>)
 800a1ea:	4293      	cmp	r3, r2
 800a1ec:	d124      	bne.n	800a238 <UART_SetConfig+0x278>
 800a1ee:	4b33      	ldr	r3, [pc, #204]	; (800a2bc <UART_SetConfig+0x2fc>)
 800a1f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a1f4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800a1f8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a1fc:	d012      	beq.n	800a224 <UART_SetConfig+0x264>
 800a1fe:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a202:	d802      	bhi.n	800a20a <UART_SetConfig+0x24a>
 800a204:	2b00      	cmp	r3, #0
 800a206:	d007      	beq.n	800a218 <UART_SetConfig+0x258>
 800a208:	e012      	b.n	800a230 <UART_SetConfig+0x270>
 800a20a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a20e:	d006      	beq.n	800a21e <UART_SetConfig+0x25e>
 800a210:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a214:	d009      	beq.n	800a22a <UART_SetConfig+0x26a>
 800a216:	e00b      	b.n	800a230 <UART_SetConfig+0x270>
 800a218:	2301      	movs	r3, #1
 800a21a:	77fb      	strb	r3, [r7, #31]
 800a21c:	e077      	b.n	800a30e <UART_SetConfig+0x34e>
 800a21e:	2302      	movs	r3, #2
 800a220:	77fb      	strb	r3, [r7, #31]
 800a222:	e074      	b.n	800a30e <UART_SetConfig+0x34e>
 800a224:	2304      	movs	r3, #4
 800a226:	77fb      	strb	r3, [r7, #31]
 800a228:	e071      	b.n	800a30e <UART_SetConfig+0x34e>
 800a22a:	2308      	movs	r3, #8
 800a22c:	77fb      	strb	r3, [r7, #31]
 800a22e:	e06e      	b.n	800a30e <UART_SetConfig+0x34e>
 800a230:	2310      	movs	r3, #16
 800a232:	77fb      	strb	r3, [r7, #31]
 800a234:	bf00      	nop
 800a236:	e06a      	b.n	800a30e <UART_SetConfig+0x34e>
 800a238:	687b      	ldr	r3, [r7, #4]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	4a25      	ldr	r2, [pc, #148]	; (800a2d4 <UART_SetConfig+0x314>)
 800a23e:	4293      	cmp	r3, r2
 800a240:	d124      	bne.n	800a28c <UART_SetConfig+0x2cc>
 800a242:	4b1e      	ldr	r3, [pc, #120]	; (800a2bc <UART_SetConfig+0x2fc>)
 800a244:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a248:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800a24c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a250:	d012      	beq.n	800a278 <UART_SetConfig+0x2b8>
 800a252:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a256:	d802      	bhi.n	800a25e <UART_SetConfig+0x29e>
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d007      	beq.n	800a26c <UART_SetConfig+0x2ac>
 800a25c:	e012      	b.n	800a284 <UART_SetConfig+0x2c4>
 800a25e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a262:	d006      	beq.n	800a272 <UART_SetConfig+0x2b2>
 800a264:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800a268:	d009      	beq.n	800a27e <UART_SetConfig+0x2be>
 800a26a:	e00b      	b.n	800a284 <UART_SetConfig+0x2c4>
 800a26c:	2300      	movs	r3, #0
 800a26e:	77fb      	strb	r3, [r7, #31]
 800a270:	e04d      	b.n	800a30e <UART_SetConfig+0x34e>
 800a272:	2302      	movs	r3, #2
 800a274:	77fb      	strb	r3, [r7, #31]
 800a276:	e04a      	b.n	800a30e <UART_SetConfig+0x34e>
 800a278:	2304      	movs	r3, #4
 800a27a:	77fb      	strb	r3, [r7, #31]
 800a27c:	e047      	b.n	800a30e <UART_SetConfig+0x34e>
 800a27e:	2308      	movs	r3, #8
 800a280:	77fb      	strb	r3, [r7, #31]
 800a282:	e044      	b.n	800a30e <UART_SetConfig+0x34e>
 800a284:	2310      	movs	r3, #16
 800a286:	77fb      	strb	r3, [r7, #31]
 800a288:	bf00      	nop
 800a28a:	e040      	b.n	800a30e <UART_SetConfig+0x34e>
 800a28c:	687b      	ldr	r3, [r7, #4]
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	4a11      	ldr	r2, [pc, #68]	; (800a2d8 <UART_SetConfig+0x318>)
 800a292:	4293      	cmp	r3, r2
 800a294:	d139      	bne.n	800a30a <UART_SetConfig+0x34a>
 800a296:	4b09      	ldr	r3, [pc, #36]	; (800a2bc <UART_SetConfig+0x2fc>)
 800a298:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800a29c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800a2a0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a2a4:	d027      	beq.n	800a2f6 <UART_SetConfig+0x336>
 800a2a6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800a2aa:	d817      	bhi.n	800a2dc <UART_SetConfig+0x31c>
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d01c      	beq.n	800a2ea <UART_SetConfig+0x32a>
 800a2b0:	e027      	b.n	800a302 <UART_SetConfig+0x342>
 800a2b2:	bf00      	nop
 800a2b4:	efff69f3 	.word	0xefff69f3
 800a2b8:	40011000 	.word	0x40011000
 800a2bc:	40023800 	.word	0x40023800
 800a2c0:	40004400 	.word	0x40004400
 800a2c4:	40004800 	.word	0x40004800
 800a2c8:	40004c00 	.word	0x40004c00
 800a2cc:	40005000 	.word	0x40005000
 800a2d0:	40011400 	.word	0x40011400
 800a2d4:	40007800 	.word	0x40007800
 800a2d8:	40007c00 	.word	0x40007c00
 800a2dc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a2e0:	d006      	beq.n	800a2f0 <UART_SetConfig+0x330>
 800a2e2:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800a2e6:	d009      	beq.n	800a2fc <UART_SetConfig+0x33c>
 800a2e8:	e00b      	b.n	800a302 <UART_SetConfig+0x342>
 800a2ea:	2300      	movs	r3, #0
 800a2ec:	77fb      	strb	r3, [r7, #31]
 800a2ee:	e00e      	b.n	800a30e <UART_SetConfig+0x34e>
 800a2f0:	2302      	movs	r3, #2
 800a2f2:	77fb      	strb	r3, [r7, #31]
 800a2f4:	e00b      	b.n	800a30e <UART_SetConfig+0x34e>
 800a2f6:	2304      	movs	r3, #4
 800a2f8:	77fb      	strb	r3, [r7, #31]
 800a2fa:	e008      	b.n	800a30e <UART_SetConfig+0x34e>
 800a2fc:	2308      	movs	r3, #8
 800a2fe:	77fb      	strb	r3, [r7, #31]
 800a300:	e005      	b.n	800a30e <UART_SetConfig+0x34e>
 800a302:	2310      	movs	r3, #16
 800a304:	77fb      	strb	r3, [r7, #31]
 800a306:	bf00      	nop
 800a308:	e001      	b.n	800a30e <UART_SetConfig+0x34e>
 800a30a:	2310      	movs	r3, #16
 800a30c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a30e:	687b      	ldr	r3, [r7, #4]
 800a310:	69db      	ldr	r3, [r3, #28]
 800a312:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a316:	d17f      	bne.n	800a418 <UART_SetConfig+0x458>
  {
    switch (clocksource)
 800a318:	7ffb      	ldrb	r3, [r7, #31]
 800a31a:	2b08      	cmp	r3, #8
 800a31c:	d85c      	bhi.n	800a3d8 <UART_SetConfig+0x418>
 800a31e:	a201      	add	r2, pc, #4	; (adr r2, 800a324 <UART_SetConfig+0x364>)
 800a320:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a324:	0800a349 	.word	0x0800a349
 800a328:	0800a369 	.word	0x0800a369
 800a32c:	0800a389 	.word	0x0800a389
 800a330:	0800a3d9 	.word	0x0800a3d9
 800a334:	0800a3a1 	.word	0x0800a3a1
 800a338:	0800a3d9 	.word	0x0800a3d9
 800a33c:	0800a3d9 	.word	0x0800a3d9
 800a340:	0800a3d9 	.word	0x0800a3d9
 800a344:	0800a3c1 	.word	0x0800a3c1
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a348:	f7ff f91e 	bl	8009588 <HAL_RCC_GetPCLK1Freq>
 800a34c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	005a      	lsls	r2, r3, #1
 800a352:	687b      	ldr	r3, [r7, #4]
 800a354:	685b      	ldr	r3, [r3, #4]
 800a356:	085b      	lsrs	r3, r3, #1
 800a358:	441a      	add	r2, r3
 800a35a:	687b      	ldr	r3, [r7, #4]
 800a35c:	685b      	ldr	r3, [r3, #4]
 800a35e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a362:	b29b      	uxth	r3, r3
 800a364:	61bb      	str	r3, [r7, #24]
        break;
 800a366:	e03a      	b.n	800a3de <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a368:	f7ff f922 	bl	80095b0 <HAL_RCC_GetPCLK2Freq>
 800a36c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	005a      	lsls	r2, r3, #1
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	685b      	ldr	r3, [r3, #4]
 800a376:	085b      	lsrs	r3, r3, #1
 800a378:	441a      	add	r2, r3
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	685b      	ldr	r3, [r3, #4]
 800a37e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a382:	b29b      	uxth	r3, r3
 800a384:	61bb      	str	r3, [r7, #24]
        break;
 800a386:	e02a      	b.n	800a3de <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	685b      	ldr	r3, [r3, #4]
 800a38c:	085a      	lsrs	r2, r3, #1
 800a38e:	4b5f      	ldr	r3, [pc, #380]	; (800a50c <UART_SetConfig+0x54c>)
 800a390:	4413      	add	r3, r2
 800a392:	687a      	ldr	r2, [r7, #4]
 800a394:	6852      	ldr	r2, [r2, #4]
 800a396:	fbb3 f3f2 	udiv	r3, r3, r2
 800a39a:	b29b      	uxth	r3, r3
 800a39c:	61bb      	str	r3, [r7, #24]
        break;
 800a39e:	e01e      	b.n	800a3de <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a3a0:	f7ff f834 	bl	800940c <HAL_RCC_GetSysClockFreq>
 800a3a4:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a3a6:	68fb      	ldr	r3, [r7, #12]
 800a3a8:	005a      	lsls	r2, r3, #1
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	685b      	ldr	r3, [r3, #4]
 800a3ae:	085b      	lsrs	r3, r3, #1
 800a3b0:	441a      	add	r2, r3
 800a3b2:	687b      	ldr	r3, [r7, #4]
 800a3b4:	685b      	ldr	r3, [r3, #4]
 800a3b6:	fbb2 f3f3 	udiv	r3, r2, r3
 800a3ba:	b29b      	uxth	r3, r3
 800a3bc:	61bb      	str	r3, [r7, #24]
        break;
 800a3be:	e00e      	b.n	800a3de <UART_SetConfig+0x41e>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	685b      	ldr	r3, [r3, #4]
 800a3c4:	085b      	lsrs	r3, r3, #1
 800a3c6:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	685b      	ldr	r3, [r3, #4]
 800a3ce:	fbb2 f3f3 	udiv	r3, r2, r3
 800a3d2:	b29b      	uxth	r3, r3
 800a3d4:	61bb      	str	r3, [r7, #24]
        break;
 800a3d6:	e002      	b.n	800a3de <UART_SetConfig+0x41e>
      default:
        ret = HAL_ERROR;
 800a3d8:	2301      	movs	r3, #1
 800a3da:	75fb      	strb	r3, [r7, #23]
        break;
 800a3dc:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a3de:	69bb      	ldr	r3, [r7, #24]
 800a3e0:	2b0f      	cmp	r3, #15
 800a3e2:	d916      	bls.n	800a412 <UART_SetConfig+0x452>
 800a3e4:	69bb      	ldr	r3, [r7, #24]
 800a3e6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a3ea:	d212      	bcs.n	800a412 <UART_SetConfig+0x452>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a3ec:	69bb      	ldr	r3, [r7, #24]
 800a3ee:	b29b      	uxth	r3, r3
 800a3f0:	f023 030f 	bic.w	r3, r3, #15
 800a3f4:	817b      	strh	r3, [r7, #10]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a3f6:	69bb      	ldr	r3, [r7, #24]
 800a3f8:	085b      	lsrs	r3, r3, #1
 800a3fa:	b29b      	uxth	r3, r3
 800a3fc:	f003 0307 	and.w	r3, r3, #7
 800a400:	b29a      	uxth	r2, r3
 800a402:	897b      	ldrh	r3, [r7, #10]
 800a404:	4313      	orrs	r3, r2
 800a406:	817b      	strh	r3, [r7, #10]
      huart->Instance->BRR = brrtemp;
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	897a      	ldrh	r2, [r7, #10]
 800a40e:	60da      	str	r2, [r3, #12]
 800a410:	e070      	b.n	800a4f4 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800a412:	2301      	movs	r3, #1
 800a414:	75fb      	strb	r3, [r7, #23]
 800a416:	e06d      	b.n	800a4f4 <UART_SetConfig+0x534>
    }
  }
  else
  {
    switch (clocksource)
 800a418:	7ffb      	ldrb	r3, [r7, #31]
 800a41a:	2b08      	cmp	r3, #8
 800a41c:	d859      	bhi.n	800a4d2 <UART_SetConfig+0x512>
 800a41e:	a201      	add	r2, pc, #4	; (adr r2, 800a424 <UART_SetConfig+0x464>)
 800a420:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a424:	0800a449 	.word	0x0800a449
 800a428:	0800a467 	.word	0x0800a467
 800a42c:	0800a485 	.word	0x0800a485
 800a430:	0800a4d3 	.word	0x0800a4d3
 800a434:	0800a49d 	.word	0x0800a49d
 800a438:	0800a4d3 	.word	0x0800a4d3
 800a43c:	0800a4d3 	.word	0x0800a4d3
 800a440:	0800a4d3 	.word	0x0800a4d3
 800a444:	0800a4bb 	.word	0x0800a4bb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a448:	f7ff f89e 	bl	8009588 <HAL_RCC_GetPCLK1Freq>
 800a44c:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	685b      	ldr	r3, [r3, #4]
 800a452:	085a      	lsrs	r2, r3, #1
 800a454:	68fb      	ldr	r3, [r7, #12]
 800a456:	441a      	add	r2, r3
 800a458:	687b      	ldr	r3, [r7, #4]
 800a45a:	685b      	ldr	r3, [r3, #4]
 800a45c:	fbb2 f3f3 	udiv	r3, r2, r3
 800a460:	b29b      	uxth	r3, r3
 800a462:	61bb      	str	r3, [r7, #24]
        break;
 800a464:	e038      	b.n	800a4d8 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a466:	f7ff f8a3 	bl	80095b0 <HAL_RCC_GetPCLK2Freq>
 800a46a:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	685b      	ldr	r3, [r3, #4]
 800a470:	085a      	lsrs	r2, r3, #1
 800a472:	68fb      	ldr	r3, [r7, #12]
 800a474:	441a      	add	r2, r3
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	685b      	ldr	r3, [r3, #4]
 800a47a:	fbb2 f3f3 	udiv	r3, r2, r3
 800a47e:	b29b      	uxth	r3, r3
 800a480:	61bb      	str	r3, [r7, #24]
        break;
 800a482:	e029      	b.n	800a4d8 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_HSI:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	685b      	ldr	r3, [r3, #4]
 800a488:	085a      	lsrs	r2, r3, #1
 800a48a:	4b21      	ldr	r3, [pc, #132]	; (800a510 <UART_SetConfig+0x550>)
 800a48c:	4413      	add	r3, r2
 800a48e:	687a      	ldr	r2, [r7, #4]
 800a490:	6852      	ldr	r2, [r2, #4]
 800a492:	fbb3 f3f2 	udiv	r3, r3, r2
 800a496:	b29b      	uxth	r3, r3
 800a498:	61bb      	str	r3, [r7, #24]
        break;
 800a49a:	e01d      	b.n	800a4d8 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a49c:	f7fe ffb6 	bl	800940c <HAL_RCC_GetSysClockFreq>
 800a4a0:	60f8      	str	r0, [r7, #12]
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a4a2:	687b      	ldr	r3, [r7, #4]
 800a4a4:	685b      	ldr	r3, [r3, #4]
 800a4a6:	085a      	lsrs	r2, r3, #1
 800a4a8:	68fb      	ldr	r3, [r7, #12]
 800a4aa:	441a      	add	r2, r3
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	685b      	ldr	r3, [r3, #4]
 800a4b0:	fbb2 f3f3 	udiv	r3, r2, r3
 800a4b4:	b29b      	uxth	r3, r3
 800a4b6:	61bb      	str	r3, [r7, #24]
        break;
 800a4b8:	e00e      	b.n	800a4d8 <UART_SetConfig+0x518>
      case UART_CLOCKSOURCE_LSE:
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	685b      	ldr	r3, [r3, #4]
 800a4be:	085b      	lsrs	r3, r3, #1
 800a4c0:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	685b      	ldr	r3, [r3, #4]
 800a4c8:	fbb2 f3f3 	udiv	r3, r2, r3
 800a4cc:	b29b      	uxth	r3, r3
 800a4ce:	61bb      	str	r3, [r7, #24]
        break;
 800a4d0:	e002      	b.n	800a4d8 <UART_SetConfig+0x518>
      default:
        ret = HAL_ERROR;
 800a4d2:	2301      	movs	r3, #1
 800a4d4:	75fb      	strb	r3, [r7, #23]
        break;
 800a4d6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a4d8:	69bb      	ldr	r3, [r7, #24]
 800a4da:	2b0f      	cmp	r3, #15
 800a4dc:	d908      	bls.n	800a4f0 <UART_SetConfig+0x530>
 800a4de:	69bb      	ldr	r3, [r7, #24]
 800a4e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a4e4:	d204      	bcs.n	800a4f0 <UART_SetConfig+0x530>
    {
      huart->Instance->BRR = usartdiv;
 800a4e6:	687b      	ldr	r3, [r7, #4]
 800a4e8:	681b      	ldr	r3, [r3, #0]
 800a4ea:	69ba      	ldr	r2, [r7, #24]
 800a4ec:	60da      	str	r2, [r3, #12]
 800a4ee:	e001      	b.n	800a4f4 <UART_SetConfig+0x534>
    }
    else
    {
      ret = HAL_ERROR;
 800a4f0:	2301      	movs	r3, #1
 800a4f2:	75fb      	strb	r3, [r7, #23]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	2200      	movs	r2, #0
 800a4f8:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800a4fa:	687b      	ldr	r3, [r7, #4]
 800a4fc:	2200      	movs	r2, #0
 800a4fe:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800a500:	7dfb      	ldrb	r3, [r7, #23]
}
 800a502:	4618      	mov	r0, r3
 800a504:	3720      	adds	r7, #32
 800a506:	46bd      	mov	sp, r7
 800a508:	bd80      	pop	{r7, pc}
 800a50a:	bf00      	nop
 800a50c:	01e84800 	.word	0x01e84800
 800a510:	00f42400 	.word	0x00f42400

0800a514 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a514:	b480      	push	{r7}
 800a516:	b083      	sub	sp, #12
 800a518:	af00      	add	r7, sp, #0
 800a51a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a51c:	687b      	ldr	r3, [r7, #4]
 800a51e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a520:	f003 0301 	and.w	r3, r3, #1
 800a524:	2b00      	cmp	r3, #0
 800a526:	d00a      	beq.n	800a53e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a528:	687b      	ldr	r3, [r7, #4]
 800a52a:	681b      	ldr	r3, [r3, #0]
 800a52c:	685b      	ldr	r3, [r3, #4]
 800a52e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	430a      	orrs	r2, r1
 800a53c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a542:	f003 0302 	and.w	r3, r3, #2
 800a546:	2b00      	cmp	r3, #0
 800a548:	d00a      	beq.n	800a560 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a54a:	687b      	ldr	r3, [r7, #4]
 800a54c:	681b      	ldr	r3, [r3, #0]
 800a54e:	685b      	ldr	r3, [r3, #4]
 800a550:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	430a      	orrs	r2, r1
 800a55e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a564:	f003 0304 	and.w	r3, r3, #4
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d00a      	beq.n	800a582 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	681b      	ldr	r3, [r3, #0]
 800a570:	685b      	ldr	r3, [r3, #4]
 800a572:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	681b      	ldr	r3, [r3, #0]
 800a57e:	430a      	orrs	r2, r1
 800a580:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a586:	f003 0308 	and.w	r3, r3, #8
 800a58a:	2b00      	cmp	r3, #0
 800a58c:	d00a      	beq.n	800a5a4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	681b      	ldr	r3, [r3, #0]
 800a592:	685b      	ldr	r3, [r3, #4]
 800a594:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	681b      	ldr	r3, [r3, #0]
 800a5a0:	430a      	orrs	r2, r1
 800a5a2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a5a4:	687b      	ldr	r3, [r7, #4]
 800a5a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5a8:	f003 0310 	and.w	r3, r3, #16
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	d00a      	beq.n	800a5c6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a5b0:	687b      	ldr	r3, [r7, #4]
 800a5b2:	681b      	ldr	r3, [r3, #0]
 800a5b4:	689b      	ldr	r3, [r3, #8]
 800a5b6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a5be:	687b      	ldr	r3, [r7, #4]
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	430a      	orrs	r2, r1
 800a5c4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5ca:	f003 0320 	and.w	r3, r3, #32
 800a5ce:	2b00      	cmp	r3, #0
 800a5d0:	d00a      	beq.n	800a5e8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	689b      	ldr	r3, [r3, #8]
 800a5d8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	430a      	orrs	r2, r1
 800a5e6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a5e8:	687b      	ldr	r3, [r7, #4]
 800a5ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a5f0:	2b00      	cmp	r3, #0
 800a5f2:	d01a      	beq.n	800a62a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a5f4:	687b      	ldr	r3, [r7, #4]
 800a5f6:	681b      	ldr	r3, [r3, #0]
 800a5f8:	685b      	ldr	r3, [r3, #4]
 800a5fa:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a5fe:	687b      	ldr	r3, [r7, #4]
 800a600:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	430a      	orrs	r2, r1
 800a608:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a60e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a612:	d10a      	bne.n	800a62a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a614:	687b      	ldr	r3, [r7, #4]
 800a616:	681b      	ldr	r3, [r3, #0]
 800a618:	685b      	ldr	r3, [r3, #4]
 800a61a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	430a      	orrs	r2, r1
 800a628:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a62e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a632:	2b00      	cmp	r3, #0
 800a634:	d00a      	beq.n	800a64c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a636:	687b      	ldr	r3, [r7, #4]
 800a638:	681b      	ldr	r3, [r3, #0]
 800a63a:	685b      	ldr	r3, [r3, #4]
 800a63c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	681b      	ldr	r3, [r3, #0]
 800a648:	430a      	orrs	r2, r1
 800a64a:	605a      	str	r2, [r3, #4]
  }
}
 800a64c:	bf00      	nop
 800a64e:	370c      	adds	r7, #12
 800a650:	46bd      	mov	sp, r7
 800a652:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a656:	4770      	bx	lr

0800a658 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a658:	b580      	push	{r7, lr}
 800a65a:	b086      	sub	sp, #24
 800a65c:	af02      	add	r7, sp, #8
 800a65e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	2200      	movs	r2, #0
 800a664:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800a666:	f7fd ff7b 	bl	8008560 <HAL_GetTick>
 800a66a:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	681b      	ldr	r3, [r3, #0]
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	f003 0308 	and.w	r3, r3, #8
 800a676:	2b08      	cmp	r3, #8
 800a678:	d10e      	bne.n	800a698 <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a67a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a67e:	9300      	str	r3, [sp, #0]
 800a680:	68fb      	ldr	r3, [r7, #12]
 800a682:	2200      	movs	r2, #0
 800a684:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a688:	6878      	ldr	r0, [r7, #4]
 800a68a:	f000 f814 	bl	800a6b6 <UART_WaitOnFlagUntilTimeout>
 800a68e:	4603      	mov	r3, r0
 800a690:	2b00      	cmp	r3, #0
 800a692:	d001      	beq.n	800a698 <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a694:	2303      	movs	r3, #3
 800a696:	e00a      	b.n	800a6ae <UART_CheckIdleState+0x56>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	2220      	movs	r2, #32
 800a69c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	2220      	movs	r2, #32
 800a6a2:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	2200      	movs	r2, #0
 800a6a8:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800a6ac:	2300      	movs	r3, #0
}
 800a6ae:	4618      	mov	r0, r3
 800a6b0:	3710      	adds	r7, #16
 800a6b2:	46bd      	mov	sp, r7
 800a6b4:	bd80      	pop	{r7, pc}

0800a6b6 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a6b6:	b580      	push	{r7, lr}
 800a6b8:	b084      	sub	sp, #16
 800a6ba:	af00      	add	r7, sp, #0
 800a6bc:	60f8      	str	r0, [r7, #12]
 800a6be:	60b9      	str	r1, [r7, #8]
 800a6c0:	603b      	str	r3, [r7, #0]
 800a6c2:	4613      	mov	r3, r2
 800a6c4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a6c6:	e05d      	b.n	800a784 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a6c8:	69bb      	ldr	r3, [r7, #24]
 800a6ca:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a6ce:	d059      	beq.n	800a784 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a6d0:	f7fd ff46 	bl	8008560 <HAL_GetTick>
 800a6d4:	4602      	mov	r2, r0
 800a6d6:	683b      	ldr	r3, [r7, #0]
 800a6d8:	1ad3      	subs	r3, r2, r3
 800a6da:	69ba      	ldr	r2, [r7, #24]
 800a6dc:	429a      	cmp	r2, r3
 800a6de:	d302      	bcc.n	800a6e6 <UART_WaitOnFlagUntilTimeout+0x30>
 800a6e0:	69bb      	ldr	r3, [r7, #24]
 800a6e2:	2b00      	cmp	r3, #0
 800a6e4:	d11b      	bne.n	800a71e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	681a      	ldr	r2, [r3, #0]
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a6f4:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	689a      	ldr	r2, [r3, #8]
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	f022 0201 	bic.w	r2, r2, #1
 800a704:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	2220      	movs	r2, #32
 800a70a:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	2220      	movs	r2, #32
 800a710:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	2200      	movs	r2, #0
 800a716:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800a71a:	2303      	movs	r3, #3
 800a71c:	e042      	b.n	800a7a4 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a71e:	68fb      	ldr	r3, [r7, #12]
 800a720:	681b      	ldr	r3, [r3, #0]
 800a722:	681b      	ldr	r3, [r3, #0]
 800a724:	f003 0304 	and.w	r3, r3, #4
 800a728:	2b00      	cmp	r3, #0
 800a72a:	d02b      	beq.n	800a784 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	69db      	ldr	r3, [r3, #28]
 800a732:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a736:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a73a:	d123      	bne.n	800a784 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a744:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a746:	68fb      	ldr	r3, [r7, #12]
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	681a      	ldr	r2, [r3, #0]
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a754:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a756:	68fb      	ldr	r3, [r7, #12]
 800a758:	681b      	ldr	r3, [r3, #0]
 800a75a:	689a      	ldr	r2, [r3, #8]
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	681b      	ldr	r3, [r3, #0]
 800a760:	f022 0201 	bic.w	r2, r2, #1
 800a764:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800a766:	68fb      	ldr	r3, [r7, #12]
 800a768:	2220      	movs	r2, #32
 800a76a:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800a76c:	68fb      	ldr	r3, [r7, #12]
 800a76e:	2220      	movs	r2, #32
 800a770:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a772:	68fb      	ldr	r3, [r7, #12]
 800a774:	2220      	movs	r2, #32
 800a776:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	2200      	movs	r2, #0
 800a77c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 800a780:	2303      	movs	r3, #3
 800a782:	e00f      	b.n	800a7a4 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a784:	68fb      	ldr	r3, [r7, #12]
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	69da      	ldr	r2, [r3, #28]
 800a78a:	68bb      	ldr	r3, [r7, #8]
 800a78c:	4013      	ands	r3, r2
 800a78e:	68ba      	ldr	r2, [r7, #8]
 800a790:	429a      	cmp	r2, r3
 800a792:	bf0c      	ite	eq
 800a794:	2301      	moveq	r3, #1
 800a796:	2300      	movne	r3, #0
 800a798:	b2db      	uxtb	r3, r3
 800a79a:	461a      	mov	r2, r3
 800a79c:	79fb      	ldrb	r3, [r7, #7]
 800a79e:	429a      	cmp	r2, r3
 800a7a0:	d092      	beq.n	800a6c8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a7a2:	2300      	movs	r3, #0
}
 800a7a4:	4618      	mov	r0, r3
 800a7a6:	3710      	adds	r7, #16
 800a7a8:	46bd      	mov	sp, r7
 800a7aa:	bd80      	pop	{r7, pc}

0800a7ac <aiInit>:

/*
 * Init function to create and initialize a NN.
 */
int aiInit(const ai_u8* activations)
{
 800a7ac:	b580      	push	{r7, lr}
 800a7ae:	b090      	sub	sp, #64	; 0x40
 800a7b0:	af00      	add	r7, sp, #0
 800a7b2:	6078      	str	r0, [r7, #4]
    ai_error err;

    /* 1 - Specific AI data structure to provide the references of the
     * activation/working memory chunk and the weights/bias parameters */
    const ai_network_params params = {
 800a7b4:	4b28      	ldr	r3, [pc, #160]	; (800a858 <aiInit+0xac>)
 800a7b6:	60fb      	str	r3, [r7, #12]
 800a7b8:	2301      	movs	r3, #1
 800a7ba:	823b      	strh	r3, [r7, #16]
 800a7bc:	2301      	movs	r3, #1
 800a7be:	827b      	strh	r3, [r7, #18]
 800a7c0:	2301      	movs	r3, #1
 800a7c2:	82bb      	strh	r3, [r7, #20]
 800a7c4:	4b25      	ldr	r3, [pc, #148]	; (800a85c <aiInit+0xb0>)
 800a7c6:	61bb      	str	r3, [r7, #24]
            AI_NETWORK_DATA_WEIGHTS(ai_network_data_weights_get()),
 800a7c8:	f000 fb06 	bl	800add8 <ai_network_data_weights_get>
 800a7cc:	4603      	mov	r3, r0
    const ai_network_params params = {
 800a7ce:	61fb      	str	r3, [r7, #28]
 800a7d0:	2300      	movs	r3, #0
 800a7d2:	623b      	str	r3, [r7, #32]
 800a7d4:	4b22      	ldr	r3, [pc, #136]	; (800a860 <aiInit+0xb4>)
 800a7d6:	627b      	str	r3, [r7, #36]	; 0x24
 800a7d8:	2301      	movs	r3, #1
 800a7da:	853b      	strh	r3, [r7, #40]	; 0x28
 800a7dc:	2301      	movs	r3, #1
 800a7de:	857b      	strh	r3, [r7, #42]	; 0x2a
 800a7e0:	2301      	movs	r3, #1
 800a7e2:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800a7e4:	f642 63b8 	movw	r3, #11960	; 0x2eb8
 800a7e8:	633b      	str	r3, [r7, #48]	; 0x30
 800a7ea:	687b      	ldr	r3, [r7, #4]
 800a7ec:	637b      	str	r3, [r7, #52]	; 0x34
 800a7ee:	2300      	movs	r3, #0
 800a7f0:	63bb      	str	r3, [r7, #56]	; 0x38
            AI_NETWORK_DATA_ACTIVATIONS(activations)
    };

    /* 2 - Create an instance of the NN */
    err = ai_network_create(&network, AI_NETWORK_DATA_CONFIG);
 800a7f2:	2100      	movs	r1, #0
 800a7f4:	481b      	ldr	r0, [pc, #108]	; (800a864 <aiInit+0xb8>)
 800a7f6:	f000 fa89 	bl	800ad0c <ai_network_create>
 800a7fa:	4603      	mov	r3, r0
 800a7fc:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (err.type != AI_ERROR_NONE) {
 800a7fe:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800a802:	2b00      	cmp	r3, #0
 800a804:	d002      	beq.n	800a80c <aiInit+0x60>
	    return -1;
 800a806:	f04f 33ff 	mov.w	r3, #4294967295
 800a80a:	e020      	b.n	800a84e <aiInit+0xa2>
    }

    /* 3 - Initialize the NN - Ready to be used */
    if (!ai_network_init(network, &params)) {
 800a80c:	4b15      	ldr	r3, [pc, #84]	; (800a864 <aiInit+0xb8>)
 800a80e:	681b      	ldr	r3, [r3, #0]
 800a810:	f107 020c 	add.w	r2, r7, #12
 800a814:	4611      	mov	r1, r2
 800a816:	4618      	mov	r0, r3
 800a818:	f000 fa9a 	bl	800ad50 <ai_network_init>
 800a81c:	4603      	mov	r3, r0
 800a81e:	f083 0301 	eor.w	r3, r3, #1
 800a822:	b2db      	uxtb	r3, r3
 800a824:	2b00      	cmp	r3, #0
 800a826:	d011      	beq.n	800a84c <aiInit+0xa0>
        err = ai_network_get_error(network);
 800a828:	4b0e      	ldr	r3, [pc, #56]	; (800a864 <aiInit+0xb8>)
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	4618      	mov	r0, r3
 800a82e:	f000 fa61 	bl	800acf4 <ai_network_get_error>
 800a832:	4603      	mov	r3, r0
 800a834:	63fb      	str	r3, [r7, #60]	; 0x3c
        ai_network_destroy(network);
 800a836:	4b0b      	ldr	r3, [pc, #44]	; (800a864 <aiInit+0xb8>)
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	4618      	mov	r0, r3
 800a83c:	f000 fa7c 	bl	800ad38 <ai_network_destroy>
        network = AI_HANDLE_NULL;
 800a840:	4b08      	ldr	r3, [pc, #32]	; (800a864 <aiInit+0xb8>)
 800a842:	2200      	movs	r2, #0
 800a844:	601a      	str	r2, [r3, #0]
	    return -2;
 800a846:	f06f 0301 	mvn.w	r3, #1
 800a84a:	e000      	b.n	800a84e <aiInit+0xa2>
    }

    return 0;
 800a84c:	2300      	movs	r3, #0
}
 800a84e:	4618      	mov	r0, r3
 800a850:	3740      	adds	r7, #64	; 0x40
 800a852:	46bd      	mov	sp, r7
 800a854:	bd80      	pop	{r7, pc}
 800a856:	bf00      	nop
 800a858:	40040440 	.word	0x40040440
 800a85c:	00064fd4 	.word	0x00064fd4
 800a860:	00040440 	.word	0x00040440
 800a864:	20000e84 	.word	0x20000e84

0800a868 <aiRun>:

/*
 * Run function to execute an inference.
 */
int aiRun(const void *in_data, void *out_data)
{
 800a868:	b580      	push	{r7, lr}
 800a86a:	b084      	sub	sp, #16
 800a86c:	af00      	add	r7, sp, #0
 800a86e:	6078      	str	r0, [r7, #4]
 800a870:	6039      	str	r1, [r7, #0]
    ai_i32 nbatch;
    ai_error err;

    /* Parameters checking */
    if (!in_data || !out_data || !network)
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	2b00      	cmp	r3, #0
 800a876:	d006      	beq.n	800a886 <aiRun+0x1e>
 800a878:	683b      	ldr	r3, [r7, #0]
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d003      	beq.n	800a886 <aiRun+0x1e>
 800a87e:	4b17      	ldr	r3, [pc, #92]	; (800a8dc <aiRun+0x74>)
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	2b00      	cmp	r3, #0
 800a884:	d102      	bne.n	800a88c <aiRun+0x24>
        return -1;
 800a886:	f04f 33ff 	mov.w	r3, #4294967295
 800a88a:	e022      	b.n	800a8d2 <aiRun+0x6a>

    /* Initialize input/output buffer handlers */
    ai_input[0].n_batches = 1;
 800a88c:	4b14      	ldr	r3, [pc, #80]	; (800a8e0 <aiRun+0x78>)
 800a88e:	2201      	movs	r2, #1
 800a890:	809a      	strh	r2, [r3, #4]
    ai_input[0].data = AI_HANDLE_PTR(in_data);
 800a892:	4a13      	ldr	r2, [pc, #76]	; (800a8e0 <aiRun+0x78>)
 800a894:	687b      	ldr	r3, [r7, #4]
 800a896:	6113      	str	r3, [r2, #16]
    ai_output[0].n_batches = 1;
 800a898:	4b12      	ldr	r3, [pc, #72]	; (800a8e4 <aiRun+0x7c>)
 800a89a:	2201      	movs	r2, #1
 800a89c:	809a      	strh	r2, [r3, #4]
    ai_output[0].data = AI_HANDLE_PTR(out_data);
 800a89e:	4a11      	ldr	r2, [pc, #68]	; (800a8e4 <aiRun+0x7c>)
 800a8a0:	683b      	ldr	r3, [r7, #0]
 800a8a2:	6113      	str	r3, [r2, #16]

    /* 2 - Perform the inference */
    nbatch = ai_network_run(network, &ai_input[0], &ai_output[0]);
 800a8a4:	4b0d      	ldr	r3, [pc, #52]	; (800a8dc <aiRun+0x74>)
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	4a0e      	ldr	r2, [pc, #56]	; (800a8e4 <aiRun+0x7c>)
 800a8aa:	490d      	ldr	r1, [pc, #52]	; (800a8e0 <aiRun+0x78>)
 800a8ac:	4618      	mov	r0, r3
 800a8ae:	f000 fa82 	bl	800adb6 <ai_network_run>
 800a8b2:	60f8      	str	r0, [r7, #12]
    if (nbatch != 1) {
 800a8b4:	68fb      	ldr	r3, [r7, #12]
 800a8b6:	2b01      	cmp	r3, #1
 800a8b8:	d00a      	beq.n	800a8d0 <aiRun+0x68>
        err = ai_network_get_error(network);
 800a8ba:	4b08      	ldr	r3, [pc, #32]	; (800a8dc <aiRun+0x74>)
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	4618      	mov	r0, r3
 800a8c0:	f000 fa18 	bl	800acf4 <ai_network_get_error>
 800a8c4:	4603      	mov	r3, r0
 800a8c6:	60bb      	str	r3, [r7, #8]
        // ...
        return err.code;
 800a8c8:	68bb      	ldr	r3, [r7, #8]
 800a8ca:	f3c3 2317 	ubfx	r3, r3, #8, #24
 800a8ce:	e000      	b.n	800a8d2 <aiRun+0x6a>
    }

    return 0;
 800a8d0:	2300      	movs	r3, #0
}
 800a8d2:	4618      	mov	r0, r3
 800a8d4:	3710      	adds	r7, #16
 800a8d6:	46bd      	mov	sp, r7
 800a8d8:	bd80      	pop	{r7, pc}
 800a8da:	bf00      	nop
 800a8dc:	20000e84 	.word	0x20000e84
 800a8e0:	2000000c 	.word	0x2000000c
 800a8e4:	20000024 	.word	0x20000024

0800a8e8 <MX_X_CUBE_AI_Init>:

/*************************************************************************
  *
  */
void MX_X_CUBE_AI_Init(void)
{
 800a8e8:	b580      	push	{r7, lr}
 800a8ea:	af00      	add	r7, sp, #0
    /* Activation/working buffer is allocated as a static memory chunk
     * (bss section) */
    AI_ALIGNED(4)
    static ai_u8 activations[AI_NETWORK_DATA_ACTIVATIONS_SIZE];

    aiInit(activations);
 800a8ec:	4802      	ldr	r0, [pc, #8]	; (800a8f8 <MX_X_CUBE_AI_Init+0x10>)
 800a8ee:	f7ff ff5d 	bl	800a7ac <aiInit>
    /* USER CODE END 0 */
}
 800a8f2:	bf00      	nop
 800a8f4:	bd80      	pop	{r7, pc}
 800a8f6:	bf00      	nop
 800a8f8:	20000e88 	.word	0x20000e88

0800a8fc <network_configure_activations>:


AI_DECLARE_STATIC
ai_bool network_configure_activations(
  ai_network* net_ctx, const ai_buffer* activation_buffer)
{
 800a8fc:	b480      	push	{r7}
 800a8fe:	b085      	sub	sp, #20
 800a900:	af00      	add	r7, sp, #0
 800a902:	6078      	str	r0, [r7, #4]
 800a904:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx &&  activation_buffer && activation_buffer->data)

  ai_ptr activations = AI_PTR(AI_PTR_ALIGN(activation_buffer->data, 4));
 800a906:	683b      	ldr	r3, [r7, #0]
 800a908:	691b      	ldr	r3, [r3, #16]
 800a90a:	3303      	adds	r3, #3
 800a90c:	f023 0303 	bic.w	r3, r3, #3
 800a910:	60fb      	str	r3, [r7, #12]
  AI_ASSERT(activations)
  AI_UNUSED(net_ctx)

  {
    /* Updating activations (byte) offsets */
    conv2d_6_scratch0_array.data = AI_PTR(activations + 7960);
 800a912:	68fa      	ldr	r2, [r7, #12]
 800a914:	f641 7318 	movw	r3, #7960	; 0x1f18
 800a918:	4413      	add	r3, r2
 800a91a:	4a47      	ldr	r2, [pc, #284]	; (800aa38 <network_configure_activations+0x13c>)
 800a91c:	6093      	str	r3, [r2, #8]
    conv2d_6_scratch0_array.data_start = AI_PTR(activations + 7960);
 800a91e:	68fa      	ldr	r2, [r7, #12]
 800a920:	f641 7318 	movw	r3, #7960	; 0x1f18
 800a924:	4413      	add	r3, r2
 800a926:	4a44      	ldr	r2, [pc, #272]	; (800aa38 <network_configure_activations+0x13c>)
 800a928:	60d3      	str	r3, [r2, #12]
    conv2d_5_scratch0_array.data = AI_PTR(activations + 7960);
 800a92a:	68fa      	ldr	r2, [r7, #12]
 800a92c:	f641 7318 	movw	r3, #7960	; 0x1f18
 800a930:	4413      	add	r3, r2
 800a932:	4a42      	ldr	r2, [pc, #264]	; (800aa3c <network_configure_activations+0x140>)
 800a934:	6093      	str	r3, [r2, #8]
    conv2d_5_scratch0_array.data_start = AI_PTR(activations + 7960);
 800a936:	68fa      	ldr	r2, [r7, #12]
 800a938:	f641 7318 	movw	r3, #7960	; 0x1f18
 800a93c:	4413      	add	r3, r2
 800a93e:	4a3f      	ldr	r2, [pc, #252]	; (800aa3c <network_configure_activations+0x140>)
 800a940:	60d3      	str	r3, [r2, #12]
    conv2d_4_scratch0_array.data = AI_PTR(activations + 7960);
 800a942:	68fa      	ldr	r2, [r7, #12]
 800a944:	f641 7318 	movw	r3, #7960	; 0x1f18
 800a948:	4413      	add	r3, r2
 800a94a:	4a3d      	ldr	r2, [pc, #244]	; (800aa40 <network_configure_activations+0x144>)
 800a94c:	6093      	str	r3, [r2, #8]
    conv2d_4_scratch0_array.data_start = AI_PTR(activations + 7960);
 800a94e:	68fa      	ldr	r2, [r7, #12]
 800a950:	f641 7318 	movw	r3, #7960	; 0x1f18
 800a954:	4413      	add	r3, r2
 800a956:	4a3a      	ldr	r2, [pc, #232]	; (800aa40 <network_configure_activations+0x144>)
 800a958:	60d3      	str	r3, [r2, #12]
    input_0_output_array.data = AI_PTR(NULL);
 800a95a:	4b3a      	ldr	r3, [pc, #232]	; (800aa44 <network_configure_activations+0x148>)
 800a95c:	2200      	movs	r2, #0
 800a95e:	609a      	str	r2, [r3, #8]
    input_0_output_array.data_start = AI_PTR(NULL);
 800a960:	4b38      	ldr	r3, [pc, #224]	; (800aa44 <network_configure_activations+0x148>)
 800a962:	2200      	movs	r2, #0
 800a964:	60da      	str	r2, [r3, #12]
    conv2d_4_output_array.data = AI_PTR(activations + 1200);
 800a966:	68fb      	ldr	r3, [r7, #12]
 800a968:	f503 6396 	add.w	r3, r3, #1200	; 0x4b0
 800a96c:	4a36      	ldr	r2, [pc, #216]	; (800aa48 <network_configure_activations+0x14c>)
 800a96e:	6093      	str	r3, [r2, #8]
    conv2d_4_output_array.data_start = AI_PTR(activations + 1200);
 800a970:	68fb      	ldr	r3, [r7, #12]
 800a972:	f503 6396 	add.w	r3, r3, #1200	; 0x4b0
 800a976:	4a34      	ldr	r2, [pc, #208]	; (800aa48 <network_configure_activations+0x14c>)
 800a978:	60d3      	str	r3, [r2, #12]
    batch_normalization_1_output_array.data = AI_PTR(activations + 1200);
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	f503 6396 	add.w	r3, r3, #1200	; 0x4b0
 800a980:	4a32      	ldr	r2, [pc, #200]	; (800aa4c <network_configure_activations+0x150>)
 800a982:	6093      	str	r3, [r2, #8]
    batch_normalization_1_output_array.data_start = AI_PTR(activations + 1200);
 800a984:	68fb      	ldr	r3, [r7, #12]
 800a986:	f503 6396 	add.w	r3, r3, #1200	; 0x4b0
 800a98a:	4a30      	ldr	r2, [pc, #192]	; (800aa4c <network_configure_activations+0x150>)
 800a98c:	60d3      	str	r3, [r2, #12]
    conv2d_5_output_array.data = AI_PTR(activations + 0);
 800a98e:	4a30      	ldr	r2, [pc, #192]	; (800aa50 <network_configure_activations+0x154>)
 800a990:	68fb      	ldr	r3, [r7, #12]
 800a992:	6093      	str	r3, [r2, #8]
    conv2d_5_output_array.data_start = AI_PTR(activations + 0);
 800a994:	4a2e      	ldr	r2, [pc, #184]	; (800aa50 <network_configure_activations+0x154>)
 800a996:	68fb      	ldr	r3, [r7, #12]
 800a998:	60d3      	str	r3, [r2, #12]
    batch_normalization_2_output_array.data = AI_PTR(activations + 0);
 800a99a:	4a2e      	ldr	r2, [pc, #184]	; (800aa54 <network_configure_activations+0x158>)
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	6093      	str	r3, [r2, #8]
    batch_normalization_2_output_array.data_start = AI_PTR(activations + 0);
 800a9a0:	4a2c      	ldr	r2, [pc, #176]	; (800aa54 <network_configure_activations+0x158>)
 800a9a2:	68fb      	ldr	r3, [r7, #12]
 800a9a4:	60d3      	str	r3, [r2, #12]
    conv2d_6_output_array.data = AI_PTR(activations + 7560);
 800a9a6:	68fa      	ldr	r2, [r7, #12]
 800a9a8:	f641 5388 	movw	r3, #7560	; 0x1d88
 800a9ac:	4413      	add	r3, r2
 800a9ae:	4a2a      	ldr	r2, [pc, #168]	; (800aa58 <network_configure_activations+0x15c>)
 800a9b0:	6093      	str	r3, [r2, #8]
    conv2d_6_output_array.data_start = AI_PTR(activations + 7560);
 800a9b2:	68fa      	ldr	r2, [r7, #12]
 800a9b4:	f641 5388 	movw	r3, #7560	; 0x1d88
 800a9b8:	4413      	add	r3, r2
 800a9ba:	4a27      	ldr	r2, [pc, #156]	; (800aa58 <network_configure_activations+0x15c>)
 800a9bc:	60d3      	str	r3, [r2, #12]
    batch_normalization_3_output_array.data = AI_PTR(activations + 7560);
 800a9be:	68fa      	ldr	r2, [r7, #12]
 800a9c0:	f641 5388 	movw	r3, #7560	; 0x1d88
 800a9c4:	4413      	add	r3, r2
 800a9c6:	4a25      	ldr	r2, [pc, #148]	; (800aa5c <network_configure_activations+0x160>)
 800a9c8:	6093      	str	r3, [r2, #8]
    batch_normalization_3_output_array.data_start = AI_PTR(activations + 7560);
 800a9ca:	68fa      	ldr	r2, [r7, #12]
 800a9cc:	f641 5388 	movw	r3, #7560	; 0x1d88
 800a9d0:	4413      	add	r3, r2
 800a9d2:	4a22      	ldr	r2, [pc, #136]	; (800aa5c <network_configure_activations+0x160>)
 800a9d4:	60d3      	str	r3, [r2, #12]
    dense_3_output_array.data = AI_PTR(activations + 7160);
 800a9d6:	68fa      	ldr	r2, [r7, #12]
 800a9d8:	f641 33f8 	movw	r3, #7160	; 0x1bf8
 800a9dc:	4413      	add	r3, r2
 800a9de:	4a20      	ldr	r2, [pc, #128]	; (800aa60 <network_configure_activations+0x164>)
 800a9e0:	6093      	str	r3, [r2, #8]
    dense_3_output_array.data_start = AI_PTR(activations + 7160);
 800a9e2:	68fa      	ldr	r2, [r7, #12]
 800a9e4:	f641 33f8 	movw	r3, #7160	; 0x1bf8
 800a9e8:	4413      	add	r3, r2
 800a9ea:	4a1d      	ldr	r2, [pc, #116]	; (800aa60 <network_configure_activations+0x164>)
 800a9ec:	60d3      	str	r3, [r2, #12]
    activation_9_output_array.data = AI_PTR(activations + 7160);
 800a9ee:	68fa      	ldr	r2, [r7, #12]
 800a9f0:	f641 33f8 	movw	r3, #7160	; 0x1bf8
 800a9f4:	4413      	add	r3, r2
 800a9f6:	4a1b      	ldr	r2, [pc, #108]	; (800aa64 <network_configure_activations+0x168>)
 800a9f8:	6093      	str	r3, [r2, #8]
    activation_9_output_array.data_start = AI_PTR(activations + 7160);
 800a9fa:	68fa      	ldr	r2, [r7, #12]
 800a9fc:	f641 33f8 	movw	r3, #7160	; 0x1bf8
 800aa00:	4413      	add	r3, r2
 800aa02:	4a18      	ldr	r2, [pc, #96]	; (800aa64 <network_configure_activations+0x168>)
 800aa04:	60d3      	str	r3, [r2, #12]
    dense_4_output_array.data = AI_PTR(activations + 6988);
 800aa06:	68fa      	ldr	r2, [r7, #12]
 800aa08:	f641 334c 	movw	r3, #6988	; 0x1b4c
 800aa0c:	4413      	add	r3, r2
 800aa0e:	4a16      	ldr	r2, [pc, #88]	; (800aa68 <network_configure_activations+0x16c>)
 800aa10:	6093      	str	r3, [r2, #8]
    dense_4_output_array.data_start = AI_PTR(activations + 6988);
 800aa12:	68fa      	ldr	r2, [r7, #12]
 800aa14:	f641 334c 	movw	r3, #6988	; 0x1b4c
 800aa18:	4413      	add	r3, r2
 800aa1a:	4a13      	ldr	r2, [pc, #76]	; (800aa68 <network_configure_activations+0x16c>)
 800aa1c:	60d3      	str	r3, [r2, #12]
    activation_10_output_array.data = AI_PTR(NULL);
 800aa1e:	4b13      	ldr	r3, [pc, #76]	; (800aa6c <network_configure_activations+0x170>)
 800aa20:	2200      	movs	r2, #0
 800aa22:	609a      	str	r2, [r3, #8]
    activation_10_output_array.data_start = AI_PTR(NULL);
 800aa24:	4b11      	ldr	r3, [pc, #68]	; (800aa6c <network_configure_activations+0x170>)
 800aa26:	2200      	movs	r2, #0
 800aa28:	60da      	str	r2, [r3, #12]
    
  }
  return true;
 800aa2a:	2301      	movs	r3, #1
}
 800aa2c:	4618      	mov	r0, r3
 800aa2e:	3714      	adds	r7, #20
 800aa30:	46bd      	mov	sp, r7
 800aa32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa36:	4770      	bx	lr
 800aa38:	20000094 	.word	0x20000094
 800aa3c:	200000a4 	.word	0x200000a4
 800aa40:	200000b4 	.word	0x200000b4
 800aa44:	200001c4 	.word	0x200001c4
 800aa48:	200001d4 	.word	0x200001d4
 800aa4c:	200001e4 	.word	0x200001e4
 800aa50:	200001f4 	.word	0x200001f4
 800aa54:	20000204 	.word	0x20000204
 800aa58:	20000214 	.word	0x20000214
 800aa5c:	20000224 	.word	0x20000224
 800aa60:	20000234 	.word	0x20000234
 800aa64:	20000244 	.word	0x20000244
 800aa68:	20000254 	.word	0x20000254
 800aa6c:	20000264 	.word	0x20000264

0800aa70 <network_configure_weights>:


AI_DECLARE_STATIC
ai_bool network_configure_weights(
  ai_network* net_ctx, const ai_buffer* weights_buffer)
{
 800aa70:	b480      	push	{r7}
 800aa72:	b085      	sub	sp, #20
 800aa74:	af00      	add	r7, sp, #0
 800aa76:	6078      	str	r0, [r7, #4]
 800aa78:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx &&  weights_buffer && weights_buffer->data)

  ai_ptr weights = AI_PTR(weights_buffer->data);
 800aa7a:	683b      	ldr	r3, [r7, #0]
 800aa7c:	691b      	ldr	r3, [r3, #16]
 800aa7e:	60fb      	str	r3, [r7, #12]
  AI_UNUSED(net_ctx)

  {
    /* Updating weights (byte) offsets */
    
    dense_4_bias_array.format |= AI_FMT_FLAG_CONST;
 800aa80:	4b85      	ldr	r3, [pc, #532]	; (800ac98 <network_configure_weights+0x228>)
 800aa82:	681b      	ldr	r3, [r3, #0]
 800aa84:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800aa88:	4a83      	ldr	r2, [pc, #524]	; (800ac98 <network_configure_weights+0x228>)
 800aa8a:	6013      	str	r3, [r2, #0]
    dense_4_bias_array.data = AI_PTR(weights + 413480);
 800aa8c:	68fa      	ldr	r2, [r7, #12]
 800aa8e:	4b83      	ldr	r3, [pc, #524]	; (800ac9c <network_configure_weights+0x22c>)
 800aa90:	4413      	add	r3, r2
 800aa92:	4a81      	ldr	r2, [pc, #516]	; (800ac98 <network_configure_weights+0x228>)
 800aa94:	6093      	str	r3, [r2, #8]
    dense_4_bias_array.data_start = AI_PTR(weights + 413480);
 800aa96:	68fa      	ldr	r2, [r7, #12]
 800aa98:	4b80      	ldr	r3, [pc, #512]	; (800ac9c <network_configure_weights+0x22c>)
 800aa9a:	4413      	add	r3, r2
 800aa9c:	4a7e      	ldr	r2, [pc, #504]	; (800ac98 <network_configure_weights+0x228>)
 800aa9e:	60d3      	str	r3, [r2, #12]
    dense_4_weights_array.format |= AI_FMT_FLAG_CONST;
 800aaa0:	4b7f      	ldr	r3, [pc, #508]	; (800aca0 <network_configure_weights+0x230>)
 800aaa2:	681b      	ldr	r3, [r3, #0]
 800aaa4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800aaa8:	4a7d      	ldr	r2, [pc, #500]	; (800aca0 <network_configure_weights+0x230>)
 800aaaa:	6013      	str	r3, [r2, #0]
    dense_4_weights_array.data = AI_PTR(weights + 396280);
 800aaac:	68fa      	ldr	r2, [r7, #12]
 800aaae:	4b7d      	ldr	r3, [pc, #500]	; (800aca4 <network_configure_weights+0x234>)
 800aab0:	4413      	add	r3, r2
 800aab2:	4a7b      	ldr	r2, [pc, #492]	; (800aca0 <network_configure_weights+0x230>)
 800aab4:	6093      	str	r3, [r2, #8]
    dense_4_weights_array.data_start = AI_PTR(weights + 396280);
 800aab6:	68fa      	ldr	r2, [r7, #12]
 800aab8:	4b7a      	ldr	r3, [pc, #488]	; (800aca4 <network_configure_weights+0x234>)
 800aaba:	4413      	add	r3, r2
 800aabc:	4a78      	ldr	r2, [pc, #480]	; (800aca0 <network_configure_weights+0x230>)
 800aabe:	60d3      	str	r3, [r2, #12]
    dense_3_bias_array.format |= AI_FMT_FLAG_CONST;
 800aac0:	4b79      	ldr	r3, [pc, #484]	; (800aca8 <network_configure_weights+0x238>)
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800aac8:	4a77      	ldr	r2, [pc, #476]	; (800aca8 <network_configure_weights+0x238>)
 800aaca:	6013      	str	r3, [r2, #0]
    dense_3_bias_array.data = AI_PTR(weights + 395880);
 800aacc:	68fa      	ldr	r2, [r7, #12]
 800aace:	4b77      	ldr	r3, [pc, #476]	; (800acac <network_configure_weights+0x23c>)
 800aad0:	4413      	add	r3, r2
 800aad2:	4a75      	ldr	r2, [pc, #468]	; (800aca8 <network_configure_weights+0x238>)
 800aad4:	6093      	str	r3, [r2, #8]
    dense_3_bias_array.data_start = AI_PTR(weights + 395880);
 800aad6:	68fa      	ldr	r2, [r7, #12]
 800aad8:	4b74      	ldr	r3, [pc, #464]	; (800acac <network_configure_weights+0x23c>)
 800aada:	4413      	add	r3, r2
 800aadc:	4a72      	ldr	r2, [pc, #456]	; (800aca8 <network_configure_weights+0x238>)
 800aade:	60d3      	str	r3, [r2, #12]
    dense_3_weights_array.format |= AI_FMT_FLAG_CONST;
 800aae0:	4b73      	ldr	r3, [pc, #460]	; (800acb0 <network_configure_weights+0x240>)
 800aae2:	681b      	ldr	r3, [r3, #0]
 800aae4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800aae8:	4a71      	ldr	r2, [pc, #452]	; (800acb0 <network_configure_weights+0x240>)
 800aaea:	6013      	str	r3, [r2, #0]
    dense_3_weights_array.data = AI_PTR(weights + 355880);
 800aaec:	68fa      	ldr	r2, [r7, #12]
 800aaee:	4b71      	ldr	r3, [pc, #452]	; (800acb4 <network_configure_weights+0x244>)
 800aaf0:	4413      	add	r3, r2
 800aaf2:	4a6f      	ldr	r2, [pc, #444]	; (800acb0 <network_configure_weights+0x240>)
 800aaf4:	6093      	str	r3, [r2, #8]
    dense_3_weights_array.data_start = AI_PTR(weights + 355880);
 800aaf6:	68fa      	ldr	r2, [r7, #12]
 800aaf8:	4b6e      	ldr	r3, [pc, #440]	; (800acb4 <network_configure_weights+0x244>)
 800aafa:	4413      	add	r3, r2
 800aafc:	4a6c      	ldr	r2, [pc, #432]	; (800acb0 <network_configure_weights+0x240>)
 800aafe:	60d3      	str	r3, [r2, #12]
    batch_normalization_3_bias_array.format |= AI_FMT_FLAG_CONST;
 800ab00:	4b6d      	ldr	r3, [pc, #436]	; (800acb8 <network_configure_weights+0x248>)
 800ab02:	681b      	ldr	r3, [r3, #0]
 800ab04:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ab08:	4a6b      	ldr	r2, [pc, #428]	; (800acb8 <network_configure_weights+0x248>)
 800ab0a:	6013      	str	r3, [r2, #0]
    batch_normalization_3_bias_array.data = AI_PTR(weights + 355480);
 800ab0c:	68fa      	ldr	r2, [r7, #12]
 800ab0e:	4b6b      	ldr	r3, [pc, #428]	; (800acbc <network_configure_weights+0x24c>)
 800ab10:	4413      	add	r3, r2
 800ab12:	4a69      	ldr	r2, [pc, #420]	; (800acb8 <network_configure_weights+0x248>)
 800ab14:	6093      	str	r3, [r2, #8]
    batch_normalization_3_bias_array.data_start = AI_PTR(weights + 355480);
 800ab16:	68fa      	ldr	r2, [r7, #12]
 800ab18:	4b68      	ldr	r3, [pc, #416]	; (800acbc <network_configure_weights+0x24c>)
 800ab1a:	4413      	add	r3, r2
 800ab1c:	4a66      	ldr	r2, [pc, #408]	; (800acb8 <network_configure_weights+0x248>)
 800ab1e:	60d3      	str	r3, [r2, #12]
    batch_normalization_3_scale_array.format |= AI_FMT_FLAG_CONST;
 800ab20:	4b67      	ldr	r3, [pc, #412]	; (800acc0 <network_configure_weights+0x250>)
 800ab22:	681b      	ldr	r3, [r3, #0]
 800ab24:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ab28:	4a65      	ldr	r2, [pc, #404]	; (800acc0 <network_configure_weights+0x250>)
 800ab2a:	6013      	str	r3, [r2, #0]
    batch_normalization_3_scale_array.data = AI_PTR(weights + 355080);
 800ab2c:	68fa      	ldr	r2, [r7, #12]
 800ab2e:	4b65      	ldr	r3, [pc, #404]	; (800acc4 <network_configure_weights+0x254>)
 800ab30:	4413      	add	r3, r2
 800ab32:	4a63      	ldr	r2, [pc, #396]	; (800acc0 <network_configure_weights+0x250>)
 800ab34:	6093      	str	r3, [r2, #8]
    batch_normalization_3_scale_array.data_start = AI_PTR(weights + 355080);
 800ab36:	68fa      	ldr	r2, [r7, #12]
 800ab38:	4b62      	ldr	r3, [pc, #392]	; (800acc4 <network_configure_weights+0x254>)
 800ab3a:	4413      	add	r3, r2
 800ab3c:	4a60      	ldr	r2, [pc, #384]	; (800acc0 <network_configure_weights+0x250>)
 800ab3e:	60d3      	str	r3, [r2, #12]
    conv2d_6_bias_array.format |= AI_FMT_FLAG_CONST;
 800ab40:	4b61      	ldr	r3, [pc, #388]	; (800acc8 <network_configure_weights+0x258>)
 800ab42:	681b      	ldr	r3, [r3, #0]
 800ab44:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ab48:	4a5f      	ldr	r2, [pc, #380]	; (800acc8 <network_configure_weights+0x258>)
 800ab4a:	6013      	str	r3, [r2, #0]
    conv2d_6_bias_array.data = AI_PTR(weights + 354680);
 800ab4c:	68fa      	ldr	r2, [r7, #12]
 800ab4e:	4b5f      	ldr	r3, [pc, #380]	; (800accc <network_configure_weights+0x25c>)
 800ab50:	4413      	add	r3, r2
 800ab52:	4a5d      	ldr	r2, [pc, #372]	; (800acc8 <network_configure_weights+0x258>)
 800ab54:	6093      	str	r3, [r2, #8]
    conv2d_6_bias_array.data_start = AI_PTR(weights + 354680);
 800ab56:	68fa      	ldr	r2, [r7, #12]
 800ab58:	4b5c      	ldr	r3, [pc, #368]	; (800accc <network_configure_weights+0x25c>)
 800ab5a:	4413      	add	r3, r2
 800ab5c:	4a5a      	ldr	r2, [pc, #360]	; (800acc8 <network_configure_weights+0x258>)
 800ab5e:	60d3      	str	r3, [r2, #12]
    conv2d_6_weights_array.format |= AI_FMT_FLAG_CONST;
 800ab60:	4b5b      	ldr	r3, [pc, #364]	; (800acd0 <network_configure_weights+0x260>)
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ab68:	4a59      	ldr	r2, [pc, #356]	; (800acd0 <network_configure_weights+0x260>)
 800ab6a:	6013      	str	r3, [r2, #0]
    conv2d_6_weights_array.data = AI_PTR(weights + 34680);
 800ab6c:	68fa      	ldr	r2, [r7, #12]
 800ab6e:	f248 7378 	movw	r3, #34680	; 0x8778
 800ab72:	4413      	add	r3, r2
 800ab74:	4a56      	ldr	r2, [pc, #344]	; (800acd0 <network_configure_weights+0x260>)
 800ab76:	6093      	str	r3, [r2, #8]
    conv2d_6_weights_array.data_start = AI_PTR(weights + 34680);
 800ab78:	68fa      	ldr	r2, [r7, #12]
 800ab7a:	f248 7378 	movw	r3, #34680	; 0x8778
 800ab7e:	4413      	add	r3, r2
 800ab80:	4a53      	ldr	r2, [pc, #332]	; (800acd0 <network_configure_weights+0x260>)
 800ab82:	60d3      	str	r3, [r2, #12]
    batch_normalization_2_bias_array.format |= AI_FMT_FLAG_CONST;
 800ab84:	4b53      	ldr	r3, [pc, #332]	; (800acd4 <network_configure_weights+0x264>)
 800ab86:	681b      	ldr	r3, [r3, #0]
 800ab88:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ab8c:	4a51      	ldr	r2, [pc, #324]	; (800acd4 <network_configure_weights+0x264>)
 800ab8e:	6013      	str	r3, [r2, #0]
    batch_normalization_2_bias_array.data = AI_PTR(weights + 34480);
 800ab90:	68fa      	ldr	r2, [r7, #12]
 800ab92:	f248 63b0 	movw	r3, #34480	; 0x86b0
 800ab96:	4413      	add	r3, r2
 800ab98:	4a4e      	ldr	r2, [pc, #312]	; (800acd4 <network_configure_weights+0x264>)
 800ab9a:	6093      	str	r3, [r2, #8]
    batch_normalization_2_bias_array.data_start = AI_PTR(weights + 34480);
 800ab9c:	68fa      	ldr	r2, [r7, #12]
 800ab9e:	f248 63b0 	movw	r3, #34480	; 0x86b0
 800aba2:	4413      	add	r3, r2
 800aba4:	4a4b      	ldr	r2, [pc, #300]	; (800acd4 <network_configure_weights+0x264>)
 800aba6:	60d3      	str	r3, [r2, #12]
    batch_normalization_2_scale_array.format |= AI_FMT_FLAG_CONST;
 800aba8:	4b4b      	ldr	r3, [pc, #300]	; (800acd8 <network_configure_weights+0x268>)
 800abaa:	681b      	ldr	r3, [r3, #0]
 800abac:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800abb0:	4a49      	ldr	r2, [pc, #292]	; (800acd8 <network_configure_weights+0x268>)
 800abb2:	6013      	str	r3, [r2, #0]
    batch_normalization_2_scale_array.data = AI_PTR(weights + 34280);
 800abb4:	68fa      	ldr	r2, [r7, #12]
 800abb6:	f248 53e8 	movw	r3, #34280	; 0x85e8
 800abba:	4413      	add	r3, r2
 800abbc:	4a46      	ldr	r2, [pc, #280]	; (800acd8 <network_configure_weights+0x268>)
 800abbe:	6093      	str	r3, [r2, #8]
    batch_normalization_2_scale_array.data_start = AI_PTR(weights + 34280);
 800abc0:	68fa      	ldr	r2, [r7, #12]
 800abc2:	f248 53e8 	movw	r3, #34280	; 0x85e8
 800abc6:	4413      	add	r3, r2
 800abc8:	4a43      	ldr	r2, [pc, #268]	; (800acd8 <network_configure_weights+0x268>)
 800abca:	60d3      	str	r3, [r2, #12]
    conv2d_5_bias_array.format |= AI_FMT_FLAG_CONST;
 800abcc:	4b43      	ldr	r3, [pc, #268]	; (800acdc <network_configure_weights+0x26c>)
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800abd4:	4a41      	ldr	r2, [pc, #260]	; (800acdc <network_configure_weights+0x26c>)
 800abd6:	6013      	str	r3, [r2, #0]
    conv2d_5_bias_array.data = AI_PTR(weights + 34080);
 800abd8:	68fa      	ldr	r2, [r7, #12]
 800abda:	f248 5320 	movw	r3, #34080	; 0x8520
 800abde:	4413      	add	r3, r2
 800abe0:	4a3e      	ldr	r2, [pc, #248]	; (800acdc <network_configure_weights+0x26c>)
 800abe2:	6093      	str	r3, [r2, #8]
    conv2d_5_bias_array.data_start = AI_PTR(weights + 34080);
 800abe4:	68fa      	ldr	r2, [r7, #12]
 800abe6:	f248 5320 	movw	r3, #34080	; 0x8520
 800abea:	4413      	add	r3, r2
 800abec:	4a3b      	ldr	r2, [pc, #236]	; (800acdc <network_configure_weights+0x26c>)
 800abee:	60d3      	str	r3, [r2, #12]
    conv2d_5_weights_array.format |= AI_FMT_FLAG_CONST;
 800abf0:	4b3b      	ldr	r3, [pc, #236]	; (800ace0 <network_configure_weights+0x270>)
 800abf2:	681b      	ldr	r3, [r3, #0]
 800abf4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800abf8:	4a39      	ldr	r2, [pc, #228]	; (800ace0 <network_configure_weights+0x270>)
 800abfa:	6013      	str	r3, [r2, #0]
    conv2d_5_weights_array.data = AI_PTR(weights + 2080);
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	f503 6302 	add.w	r3, r3, #2080	; 0x820
 800ac02:	4a37      	ldr	r2, [pc, #220]	; (800ace0 <network_configure_weights+0x270>)
 800ac04:	6093      	str	r3, [r2, #8]
    conv2d_5_weights_array.data_start = AI_PTR(weights + 2080);
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	f503 6302 	add.w	r3, r3, #2080	; 0x820
 800ac0c:	4a34      	ldr	r2, [pc, #208]	; (800ace0 <network_configure_weights+0x270>)
 800ac0e:	60d3      	str	r3, [r2, #12]
    batch_normalization_1_bias_array.format |= AI_FMT_FLAG_CONST;
 800ac10:	4b34      	ldr	r3, [pc, #208]	; (800ace4 <network_configure_weights+0x274>)
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ac18:	4a32      	ldr	r2, [pc, #200]	; (800ace4 <network_configure_weights+0x274>)
 800ac1a:	6013      	str	r3, [r2, #0]
    batch_normalization_1_bias_array.data = AI_PTR(weights + 2040);
 800ac1c:	68fb      	ldr	r3, [r7, #12]
 800ac1e:	f503 63ff 	add.w	r3, r3, #2040	; 0x7f8
 800ac22:	4a30      	ldr	r2, [pc, #192]	; (800ace4 <network_configure_weights+0x274>)
 800ac24:	6093      	str	r3, [r2, #8]
    batch_normalization_1_bias_array.data_start = AI_PTR(weights + 2040);
 800ac26:	68fb      	ldr	r3, [r7, #12]
 800ac28:	f503 63ff 	add.w	r3, r3, #2040	; 0x7f8
 800ac2c:	4a2d      	ldr	r2, [pc, #180]	; (800ace4 <network_configure_weights+0x274>)
 800ac2e:	60d3      	str	r3, [r2, #12]
    batch_normalization_1_scale_array.format |= AI_FMT_FLAG_CONST;
 800ac30:	4b2d      	ldr	r3, [pc, #180]	; (800ace8 <network_configure_weights+0x278>)
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ac38:	4a2b      	ldr	r2, [pc, #172]	; (800ace8 <network_configure_weights+0x278>)
 800ac3a:	6013      	str	r3, [r2, #0]
    batch_normalization_1_scale_array.data = AI_PTR(weights + 2000);
 800ac3c:	68fb      	ldr	r3, [r7, #12]
 800ac3e:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 800ac42:	4a29      	ldr	r2, [pc, #164]	; (800ace8 <network_configure_weights+0x278>)
 800ac44:	6093      	str	r3, [r2, #8]
    batch_normalization_1_scale_array.data_start = AI_PTR(weights + 2000);
 800ac46:	68fb      	ldr	r3, [r7, #12]
 800ac48:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 800ac4c:	4a26      	ldr	r2, [pc, #152]	; (800ace8 <network_configure_weights+0x278>)
 800ac4e:	60d3      	str	r3, [r2, #12]
    conv2d_4_bias_array.format |= AI_FMT_FLAG_CONST;
 800ac50:	4b26      	ldr	r3, [pc, #152]	; (800acec <network_configure_weights+0x27c>)
 800ac52:	681b      	ldr	r3, [r3, #0]
 800ac54:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ac58:	4a24      	ldr	r2, [pc, #144]	; (800acec <network_configure_weights+0x27c>)
 800ac5a:	6013      	str	r3, [r2, #0]
    conv2d_4_bias_array.data = AI_PTR(weights + 1960);
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	f503 63f5 	add.w	r3, r3, #1960	; 0x7a8
 800ac62:	4a22      	ldr	r2, [pc, #136]	; (800acec <network_configure_weights+0x27c>)
 800ac64:	6093      	str	r3, [r2, #8]
    conv2d_4_bias_array.data_start = AI_PTR(weights + 1960);
 800ac66:	68fb      	ldr	r3, [r7, #12]
 800ac68:	f503 63f5 	add.w	r3, r3, #1960	; 0x7a8
 800ac6c:	4a1f      	ldr	r2, [pc, #124]	; (800acec <network_configure_weights+0x27c>)
 800ac6e:	60d3      	str	r3, [r2, #12]
    conv2d_4_weights_array.format |= AI_FMT_FLAG_CONST;
 800ac70:	4b1f      	ldr	r3, [pc, #124]	; (800acf0 <network_configure_weights+0x280>)
 800ac72:	681b      	ldr	r3, [r3, #0]
 800ac74:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ac78:	4a1d      	ldr	r2, [pc, #116]	; (800acf0 <network_configure_weights+0x280>)
 800ac7a:	6013      	str	r3, [r2, #0]
    conv2d_4_weights_array.data = AI_PTR(weights + 0);
 800ac7c:	4a1c      	ldr	r2, [pc, #112]	; (800acf0 <network_configure_weights+0x280>)
 800ac7e:	68fb      	ldr	r3, [r7, #12]
 800ac80:	6093      	str	r3, [r2, #8]
    conv2d_4_weights_array.data_start = AI_PTR(weights + 0);
 800ac82:	4a1b      	ldr	r2, [pc, #108]	; (800acf0 <network_configure_weights+0x280>)
 800ac84:	68fb      	ldr	r3, [r7, #12]
 800ac86:	60d3      	str	r3, [r2, #12]
  }

  return true;
 800ac88:	2301      	movs	r3, #1
}
 800ac8a:	4618      	mov	r0, r3
 800ac8c:	3714      	adds	r7, #20
 800ac8e:	46bd      	mov	sp, r7
 800ac90:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac94:	4770      	bx	lr
 800ac96:	bf00      	nop
 800ac98:	200000c4 	.word	0x200000c4
 800ac9c:	00064f28 	.word	0x00064f28
 800aca0:	200000d4 	.word	0x200000d4
 800aca4:	00060bf8 	.word	0x00060bf8
 800aca8:	200000e4 	.word	0x200000e4
 800acac:	00060a68 	.word	0x00060a68
 800acb0:	200000f4 	.word	0x200000f4
 800acb4:	00056e28 	.word	0x00056e28
 800acb8:	20000104 	.word	0x20000104
 800acbc:	00056c98 	.word	0x00056c98
 800acc0:	20000114 	.word	0x20000114
 800acc4:	00056b08 	.word	0x00056b08
 800acc8:	20000124 	.word	0x20000124
 800accc:	00056978 	.word	0x00056978
 800acd0:	20000134 	.word	0x20000134
 800acd4:	20000144 	.word	0x20000144
 800acd8:	20000154 	.word	0x20000154
 800acdc:	20000164 	.word	0x20000164
 800ace0:	20000174 	.word	0x20000174
 800ace4:	20000184 	.word	0x20000184
 800ace8:	20000194 	.word	0x20000194
 800acec:	200001a4 	.word	0x200001a4
 800acf0:	200001b4 	.word	0x200001b4

0800acf4 <ai_network_get_error>:
  return false;
}

AI_API_ENTRY
ai_error ai_network_get_error(ai_handle network)
{
 800acf4:	b580      	push	{r7, lr}
 800acf6:	b082      	sub	sp, #8
 800acf8:	af00      	add	r7, sp, #0
 800acfa:	6078      	str	r0, [r7, #4]
  return ai_platform_network_get_error(network);
 800acfc:	6878      	ldr	r0, [r7, #4]
 800acfe:	f7f5 fce3 	bl	80006c8 <ai_platform_network_get_error>
 800ad02:	4603      	mov	r3, r0
}
 800ad04:	4618      	mov	r0, r3
 800ad06:	3708      	adds	r7, #8
 800ad08:	46bd      	mov	sp, r7
 800ad0a:	bd80      	pop	{r7, pc}

0800ad0c <ai_network_create>:

AI_API_ENTRY
ai_error ai_network_create(
  ai_handle* network, const ai_buffer* network_config)
{
 800ad0c:	b580      	push	{r7, lr}
 800ad0e:	b084      	sub	sp, #16
 800ad10:	af02      	add	r7, sp, #8
 800ad12:	6078      	str	r0, [r7, #4]
 800ad14:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 800ad16:	2300      	movs	r3, #0
 800ad18:	9301      	str	r3, [sp, #4]
 800ad1a:	2303      	movs	r3, #3
 800ad1c:	9300      	str	r3, [sp, #0]
 800ad1e:	2301      	movs	r3, #1
 800ad20:	4a04      	ldr	r2, [pc, #16]	; (800ad34 <ai_network_create+0x28>)
 800ad22:	6839      	ldr	r1, [r7, #0]
 800ad24:	6878      	ldr	r0, [r7, #4]
 800ad26:	f7f5 fdef 	bl	8000908 <ai_platform_network_create>
 800ad2a:	4603      	mov	r3, r0
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 800ad2c:	4618      	mov	r0, r3
 800ad2e:	3708      	adds	r7, #8
 800ad30:	46bd      	mov	sp, r7
 800ad32:	bd80      	pop	{r7, pc}
 800ad34:	2000003c 	.word	0x2000003c

0800ad38 <ai_network_destroy>:

AI_API_ENTRY
ai_handle ai_network_destroy(ai_handle network)
{
 800ad38:	b580      	push	{r7, lr}
 800ad3a:	b082      	sub	sp, #8
 800ad3c:	af00      	add	r7, sp, #0
 800ad3e:	6078      	str	r0, [r7, #4]
  return ai_platform_network_destroy(network);
 800ad40:	6878      	ldr	r0, [r7, #4]
 800ad42:	f7f5 fe17 	bl	8000974 <ai_platform_network_destroy>
 800ad46:	4603      	mov	r3, r0
}
 800ad48:	4618      	mov	r0, r3
 800ad4a:	3708      	adds	r7, #8
 800ad4c:	46bd      	mov	sp, r7
 800ad4e:	bd80      	pop	{r7, pc}

0800ad50 <ai_network_init>:

AI_API_ENTRY
ai_bool ai_network_init(
  ai_handle network, const ai_network_params* params)
{
 800ad50:	b580      	push	{r7, lr}
 800ad52:	b084      	sub	sp, #16
 800ad54:	af00      	add	r7, sp, #0
 800ad56:	6078      	str	r0, [r7, #4]
 800ad58:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = ai_platform_network_init(network, params);
 800ad5a:	6839      	ldr	r1, [r7, #0]
 800ad5c:	6878      	ldr	r0, [r7, #4]
 800ad5e:	f7f5 fe59 	bl	8000a14 <ai_platform_network_init>
 800ad62:	60f8      	str	r0, [r7, #12]
  if ( !net_ctx ) return false;
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d101      	bne.n	800ad6e <ai_network_init+0x1e>
 800ad6a:	2300      	movs	r3, #0
 800ad6c:	e01f      	b.n	800adae <ai_network_init+0x5e>

  ai_bool ok = true;
 800ad6e:	2301      	movs	r3, #1
 800ad70:	72fb      	strb	r3, [r7, #11]
  ok &= network_configure_weights(net_ctx, &params->params);
 800ad72:	683b      	ldr	r3, [r7, #0]
 800ad74:	4619      	mov	r1, r3
 800ad76:	68f8      	ldr	r0, [r7, #12]
 800ad78:	f7ff fe7a 	bl	800aa70 <network_configure_weights>
 800ad7c:	4603      	mov	r3, r0
 800ad7e:	461a      	mov	r2, r3
 800ad80:	7afb      	ldrb	r3, [r7, #11]
 800ad82:	4013      	ands	r3, r2
 800ad84:	2b00      	cmp	r3, #0
 800ad86:	bf14      	ite	ne
 800ad88:	2301      	movne	r3, #1
 800ad8a:	2300      	moveq	r3, #0
 800ad8c:	72fb      	strb	r3, [r7, #11]
  ok &= network_configure_activations(net_ctx, &params->activations);
 800ad8e:	683b      	ldr	r3, [r7, #0]
 800ad90:	3318      	adds	r3, #24
 800ad92:	4619      	mov	r1, r3
 800ad94:	68f8      	ldr	r0, [r7, #12]
 800ad96:	f7ff fdb1 	bl	800a8fc <network_configure_activations>
 800ad9a:	4603      	mov	r3, r0
 800ad9c:	461a      	mov	r2, r3
 800ad9e:	7afb      	ldrb	r3, [r7, #11]
 800ada0:	4013      	ands	r3, r2
 800ada2:	2b00      	cmp	r3, #0
 800ada4:	bf14      	ite	ne
 800ada6:	2301      	movne	r3, #1
 800ada8:	2300      	moveq	r3, #0
 800adaa:	72fb      	strb	r3, [r7, #11]

  return ok;
 800adac:	7afb      	ldrb	r3, [r7, #11]
}
 800adae:	4618      	mov	r0, r3
 800adb0:	3710      	adds	r7, #16
 800adb2:	46bd      	mov	sp, r7
 800adb4:	bd80      	pop	{r7, pc}

0800adb6 <ai_network_run>:


AI_API_ENTRY
ai_i32 ai_network_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 800adb6:	b580      	push	{r7, lr}
 800adb8:	b084      	sub	sp, #16
 800adba:	af00      	add	r7, sp, #0
 800adbc:	60f8      	str	r0, [r7, #12]
 800adbe:	60b9      	str	r1, [r7, #8]
 800adc0:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 800adc2:	687a      	ldr	r2, [r7, #4]
 800adc4:	68b9      	ldr	r1, [r7, #8]
 800adc6:	68f8      	ldr	r0, [r7, #12]
 800adc8:	f7f5 febc 	bl	8000b44 <ai_platform_network_process>
 800adcc:	4603      	mov	r3, r0
}
 800adce:	4618      	mov	r0, r3
 800add0:	3710      	adds	r7, #16
 800add2:	46bd      	mov	sp, r7
 800add4:	bd80      	pop	{r7, pc}
	...

0800add8 <ai_network_data_weights_get>:
#include "network_data.h"

ai_handle ai_network_data_weights_get(void)
{
 800add8:	b480      	push	{r7}
 800adda:	af00      	add	r7, sp, #0
    0x40, 0x43, 0x3d, 0x86, 0xf3, 0x90, 0x3c, 0xf4, 0xc9,
    0x12, 0xbd, 0x40, 0x03, 0xe0, 0xbd, 0xe2, 0x6b, 0xb6,
    0x3c, 0x06, 0x81, 0x2a, 0x3c, 0xce, 0x5d, 0x62, 0xbc
  };

  return AI_HANDLE_PTR(s_network_weights);
 800addc:	4b02      	ldr	r3, [pc, #8]	; (800ade8 <ai_network_data_weights_get+0x10>)

}
 800adde:	4618      	mov	r0, r3
 800ade0:	46bd      	mov	sp, r7
 800ade2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ade6:	4770      	bx	lr
 800ade8:	0800e46c 	.word	0x0800e46c

0800adec <__aeabi_memclr>:
 800adec:	2200      	movs	r2, #0
 800adee:	f7fc b96d 	b.w	80070cc <__aeabi_memset>

0800adf2 <__aeabi_memcpy>:
 800adf2:	f000 b83a 	b.w	800ae6a <memcpy>
	...

0800adf8 <__errno>:
 800adf8:	4b01      	ldr	r3, [pc, #4]	; (800ae00 <__errno+0x8>)
 800adfa:	6818      	ldr	r0, [r3, #0]
 800adfc:	4770      	bx	lr
 800adfe:	bf00      	nop
 800ae00:	20000df4 	.word	0x20000df4

0800ae04 <__libc_init_array>:
 800ae04:	b570      	push	{r4, r5, r6, lr}
 800ae06:	4e0d      	ldr	r6, [pc, #52]	; (800ae3c <__libc_init_array+0x38>)
 800ae08:	4c0d      	ldr	r4, [pc, #52]	; (800ae40 <__libc_init_array+0x3c>)
 800ae0a:	1ba4      	subs	r4, r4, r6
 800ae0c:	10a4      	asrs	r4, r4, #2
 800ae0e:	2500      	movs	r5, #0
 800ae10:	42a5      	cmp	r5, r4
 800ae12:	d109      	bne.n	800ae28 <__libc_init_array+0x24>
 800ae14:	4e0b      	ldr	r6, [pc, #44]	; (800ae44 <__libc_init_array+0x40>)
 800ae16:	4c0c      	ldr	r4, [pc, #48]	; (800ae48 <__libc_init_array+0x44>)
 800ae18:	f003 fa98 	bl	800e34c <_init>
 800ae1c:	1ba4      	subs	r4, r4, r6
 800ae1e:	10a4      	asrs	r4, r4, #2
 800ae20:	2500      	movs	r5, #0
 800ae22:	42a5      	cmp	r5, r4
 800ae24:	d105      	bne.n	800ae32 <__libc_init_array+0x2e>
 800ae26:	bd70      	pop	{r4, r5, r6, pc}
 800ae28:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800ae2c:	4798      	blx	r3
 800ae2e:	3501      	adds	r5, #1
 800ae30:	e7ee      	b.n	800ae10 <__libc_init_array+0xc>
 800ae32:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800ae36:	4798      	blx	r3
 800ae38:	3501      	adds	r5, #1
 800ae3a:	e7f2      	b.n	800ae22 <__libc_init_array+0x1e>
 800ae3c:	080738b0 	.word	0x080738b0
 800ae40:	080738b0 	.word	0x080738b0
 800ae44:	080738b0 	.word	0x080738b0
 800ae48:	080738b4 	.word	0x080738b4

0800ae4c <memcmp>:
 800ae4c:	b530      	push	{r4, r5, lr}
 800ae4e:	2400      	movs	r4, #0
 800ae50:	42a2      	cmp	r2, r4
 800ae52:	d101      	bne.n	800ae58 <memcmp+0xc>
 800ae54:	2000      	movs	r0, #0
 800ae56:	e007      	b.n	800ae68 <memcmp+0x1c>
 800ae58:	5d03      	ldrb	r3, [r0, r4]
 800ae5a:	3401      	adds	r4, #1
 800ae5c:	190d      	adds	r5, r1, r4
 800ae5e:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 800ae62:	42ab      	cmp	r3, r5
 800ae64:	d0f4      	beq.n	800ae50 <memcmp+0x4>
 800ae66:	1b58      	subs	r0, r3, r5
 800ae68:	bd30      	pop	{r4, r5, pc}

0800ae6a <memcpy>:
 800ae6a:	b510      	push	{r4, lr}
 800ae6c:	1e43      	subs	r3, r0, #1
 800ae6e:	440a      	add	r2, r1
 800ae70:	4291      	cmp	r1, r2
 800ae72:	d100      	bne.n	800ae76 <memcpy+0xc>
 800ae74:	bd10      	pop	{r4, pc}
 800ae76:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ae7a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ae7e:	e7f7      	b.n	800ae70 <memcpy+0x6>

0800ae80 <memset>:
 800ae80:	4402      	add	r2, r0
 800ae82:	4603      	mov	r3, r0
 800ae84:	4293      	cmp	r3, r2
 800ae86:	d100      	bne.n	800ae8a <memset+0xa>
 800ae88:	4770      	bx	lr
 800ae8a:	f803 1b01 	strb.w	r1, [r3], #1
 800ae8e:	e7f9      	b.n	800ae84 <memset+0x4>

0800ae90 <asinhf>:
 800ae90:	b510      	push	{r4, lr}
 800ae92:	ee10 4a10 	vmov	r4, s0
 800ae96:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800ae9a:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800ae9e:	ed2d 8b04 	vpush	{d8-d9}
 800aea2:	eeb0 8a40 	vmov.f32	s16, s0
 800aea6:	db06      	blt.n	800aeb6 <asinhf+0x26>
 800aea8:	ee30 8a00 	vadd.f32	s16, s0, s0
 800aeac:	eeb0 0a48 	vmov.f32	s0, s16
 800aeb0:	ecbd 8b04 	vpop	{d8-d9}
 800aeb4:	bd10      	pop	{r4, pc}
 800aeb6:	f1b3 5f46 	cmp.w	r3, #830472192	; 0x31800000
 800aeba:	da21      	bge.n	800af00 <asinhf+0x70>
 800aebc:	eddf 7a26 	vldr	s15, [pc, #152]	; 800af58 <asinhf+0xc8>
 800aec0:	ee70 7a27 	vadd.f32	s15, s0, s15
 800aec4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800aec8:	eef4 7ac7 	vcmpe.f32	s15, s14
 800aecc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800aed0:	dcec      	bgt.n	800aeac <asinhf+0x1c>
 800aed2:	eeb0 0a48 	vmov.f32	s0, s16
 800aed6:	f000 fb77 	bl	800b5c8 <fabsf>
 800aeda:	ee68 8a08 	vmul.f32	s17, s16, s16
 800aede:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 800aee2:	eeb0 9a40 	vmov.f32	s18, s0
 800aee6:	ee38 0a88 	vadd.f32	s0, s17, s16
 800aeea:	f002 fc11 	bl	800d710 <__ieee754_sqrtf>
 800aeee:	ee30 8a08 	vadd.f32	s16, s0, s16
 800aef2:	ee88 0a88 	vdiv.f32	s0, s17, s16
 800aef6:	ee30 0a09 	vadd.f32	s0, s0, s18
 800aefa:	f000 fbaf 	bl	800b65c <log1pf>
 800aefe:	e028      	b.n	800af52 <asinhf+0xc2>
 800af00:	f1b3 4f9b 	cmp.w	r3, #1300234240	; 0x4d800000
 800af04:	dd0c      	ble.n	800af20 <asinhf+0x90>
 800af06:	f000 fb5f 	bl	800b5c8 <fabsf>
 800af0a:	f001 feb9 	bl	800cc80 <__ieee754_logf>
 800af0e:	ed9f 8a13 	vldr	s16, [pc, #76]	; 800af5c <asinhf+0xcc>
 800af12:	ee30 8a08 	vadd.f32	s16, s0, s16
 800af16:	2c00      	cmp	r4, #0
 800af18:	bfd8      	it	le
 800af1a:	eeb1 8a48 	vnegle.f32	s16, s16
 800af1e:	e7c5      	b.n	800aeac <asinhf+0x1c>
 800af20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800af24:	ddd5      	ble.n	800aed2 <asinhf+0x42>
 800af26:	f000 fb4f 	bl	800b5c8 <fabsf>
 800af2a:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 800af2e:	eef0 8a40 	vmov.f32	s17, s0
 800af32:	eeb0 0a49 	vmov.f32	s0, s18
 800af36:	eea8 0a08 	vfma.f32	s0, s16, s16
 800af3a:	f002 fbe9 	bl	800d710 <__ieee754_sqrtf>
 800af3e:	ee70 7a28 	vadd.f32	s15, s0, s17
 800af42:	ee89 0a27 	vdiv.f32	s0, s18, s15
 800af46:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 800af4a:	eea8 0aa7 	vfma.f32	s0, s17, s15
 800af4e:	f001 fe97 	bl	800cc80 <__ieee754_logf>
 800af52:	eeb0 8a40 	vmov.f32	s16, s0
 800af56:	e7de      	b.n	800af16 <asinhf+0x86>
 800af58:	7149f2ca 	.word	0x7149f2ca
 800af5c:	3f317218 	.word	0x3f317218

0800af60 <atanf>:
 800af60:	b538      	push	{r3, r4, r5, lr}
 800af62:	ee10 5a10 	vmov	r5, s0
 800af66:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800af6a:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 800af6e:	eef0 7a40 	vmov.f32	s15, s0
 800af72:	db10      	blt.n	800af96 <atanf+0x36>
 800af74:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800af78:	dd04      	ble.n	800af84 <atanf+0x24>
 800af7a:	ee70 7a00 	vadd.f32	s15, s0, s0
 800af7e:	eeb0 0a67 	vmov.f32	s0, s15
 800af82:	bd38      	pop	{r3, r4, r5, pc}
 800af84:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 800b0bc <atanf+0x15c>
 800af88:	eddf 7a4d 	vldr	s15, [pc, #308]	; 800b0c0 <atanf+0x160>
 800af8c:	2d00      	cmp	r5, #0
 800af8e:	bfd8      	it	le
 800af90:	eef0 7a47 	vmovle.f32	s15, s14
 800af94:	e7f3      	b.n	800af7e <atanf+0x1e>
 800af96:	4b4b      	ldr	r3, [pc, #300]	; (800b0c4 <atanf+0x164>)
 800af98:	429c      	cmp	r4, r3
 800af9a:	dc10      	bgt.n	800afbe <atanf+0x5e>
 800af9c:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 800afa0:	da0a      	bge.n	800afb8 <atanf+0x58>
 800afa2:	ed9f 7a49 	vldr	s14, [pc, #292]	; 800b0c8 <atanf+0x168>
 800afa6:	ee30 7a07 	vadd.f32	s14, s0, s14
 800afaa:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800afae:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800afb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800afb6:	dce2      	bgt.n	800af7e <atanf+0x1e>
 800afb8:	f04f 33ff 	mov.w	r3, #4294967295
 800afbc:	e013      	b.n	800afe6 <atanf+0x86>
 800afbe:	f000 fb03 	bl	800b5c8 <fabsf>
 800afc2:	4b42      	ldr	r3, [pc, #264]	; (800b0cc <atanf+0x16c>)
 800afc4:	429c      	cmp	r4, r3
 800afc6:	dc4f      	bgt.n	800b068 <atanf+0x108>
 800afc8:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 800afcc:	429c      	cmp	r4, r3
 800afce:	dc41      	bgt.n	800b054 <atanf+0xf4>
 800afd0:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 800afd4:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800afd8:	eea0 7a27 	vfma.f32	s14, s0, s15
 800afdc:	2300      	movs	r3, #0
 800afde:	ee30 0a27 	vadd.f32	s0, s0, s15
 800afe2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800afe6:	1c5a      	adds	r2, r3, #1
 800afe8:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800afec:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800b0d0 <atanf+0x170>
 800aff0:	eddf 5a38 	vldr	s11, [pc, #224]	; 800b0d4 <atanf+0x174>
 800aff4:	ed9f 5a38 	vldr	s10, [pc, #224]	; 800b0d8 <atanf+0x178>
 800aff8:	ee66 6a06 	vmul.f32	s13, s12, s12
 800affc:	eee6 5a87 	vfma.f32	s11, s13, s14
 800b000:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800b0dc <atanf+0x17c>
 800b004:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800b008:	eddf 5a35 	vldr	s11, [pc, #212]	; 800b0e0 <atanf+0x180>
 800b00c:	eee7 5a26 	vfma.f32	s11, s14, s13
 800b010:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800b0e4 <atanf+0x184>
 800b014:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800b018:	eddf 5a33 	vldr	s11, [pc, #204]	; 800b0e8 <atanf+0x188>
 800b01c:	eee7 5a26 	vfma.f32	s11, s14, s13
 800b020:	ed9f 7a32 	vldr	s14, [pc, #200]	; 800b0ec <atanf+0x18c>
 800b024:	eea6 5a87 	vfma.f32	s10, s13, s14
 800b028:	ed9f 7a31 	vldr	s14, [pc, #196]	; 800b0f0 <atanf+0x190>
 800b02c:	eea5 7a26 	vfma.f32	s14, s10, s13
 800b030:	ed9f 5a30 	vldr	s10, [pc, #192]	; 800b0f4 <atanf+0x194>
 800b034:	eea7 5a26 	vfma.f32	s10, s14, s13
 800b038:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 800b0f8 <atanf+0x198>
 800b03c:	eea5 7a26 	vfma.f32	s14, s10, s13
 800b040:	ee27 7a26 	vmul.f32	s14, s14, s13
 800b044:	eea5 7a86 	vfma.f32	s14, s11, s12
 800b048:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b04c:	d121      	bne.n	800b092 <atanf+0x132>
 800b04e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b052:	e794      	b.n	800af7e <atanf+0x1e>
 800b054:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800b058:	ee30 7a67 	vsub.f32	s14, s0, s15
 800b05c:	ee30 0a27 	vadd.f32	s0, s0, s15
 800b060:	2301      	movs	r3, #1
 800b062:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800b066:	e7be      	b.n	800afe6 <atanf+0x86>
 800b068:	4b24      	ldr	r3, [pc, #144]	; (800b0fc <atanf+0x19c>)
 800b06a:	429c      	cmp	r4, r3
 800b06c:	dc0b      	bgt.n	800b086 <atanf+0x126>
 800b06e:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 800b072:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b076:	eea0 7a27 	vfma.f32	s14, s0, s15
 800b07a:	2302      	movs	r3, #2
 800b07c:	ee70 6a67 	vsub.f32	s13, s0, s15
 800b080:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b084:	e7af      	b.n	800afe6 <atanf+0x86>
 800b086:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800b08a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800b08e:	2303      	movs	r3, #3
 800b090:	e7a9      	b.n	800afe6 <atanf+0x86>
 800b092:	4a1b      	ldr	r2, [pc, #108]	; (800b100 <atanf+0x1a0>)
 800b094:	491b      	ldr	r1, [pc, #108]	; (800b104 <atanf+0x1a4>)
 800b096:	009b      	lsls	r3, r3, #2
 800b098:	441a      	add	r2, r3
 800b09a:	440b      	add	r3, r1
 800b09c:	edd3 6a00 	vldr	s13, [r3]
 800b0a0:	ee37 7a66 	vsub.f32	s14, s14, s13
 800b0a4:	2d00      	cmp	r5, #0
 800b0a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b0aa:	ed92 7a00 	vldr	s14, [r2]
 800b0ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b0b2:	bfb8      	it	lt
 800b0b4:	eef1 7a67 	vneglt.f32	s15, s15
 800b0b8:	e761      	b.n	800af7e <atanf+0x1e>
 800b0ba:	bf00      	nop
 800b0bc:	bfc90fdb 	.word	0xbfc90fdb
 800b0c0:	3fc90fdb 	.word	0x3fc90fdb
 800b0c4:	3edfffff 	.word	0x3edfffff
 800b0c8:	7149f2ca 	.word	0x7149f2ca
 800b0cc:	3f97ffff 	.word	0x3f97ffff
 800b0d0:	3c8569d7 	.word	0x3c8569d7
 800b0d4:	3d4bda59 	.word	0x3d4bda59
 800b0d8:	bd6ef16b 	.word	0xbd6ef16b
 800b0dc:	3d886b35 	.word	0x3d886b35
 800b0e0:	3dba2e6e 	.word	0x3dba2e6e
 800b0e4:	3e124925 	.word	0x3e124925
 800b0e8:	3eaaaaab 	.word	0x3eaaaaab
 800b0ec:	bd15a221 	.word	0xbd15a221
 800b0f0:	bd9d8795 	.word	0xbd9d8795
 800b0f4:	bde38e38 	.word	0xbde38e38
 800b0f8:	be4ccccd 	.word	0xbe4ccccd
 800b0fc:	401bffff 	.word	0x401bffff
 800b100:	08073440 	.word	0x08073440
 800b104:	08073450 	.word	0x08073450

0800b108 <ceilf>:
 800b108:	ee10 3a10 	vmov	r3, s0
 800b10c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800b110:	0dca      	lsrs	r2, r1, #23
 800b112:	3a7f      	subs	r2, #127	; 0x7f
 800b114:	2a16      	cmp	r2, #22
 800b116:	dc2a      	bgt.n	800b16e <ceilf+0x66>
 800b118:	2a00      	cmp	r2, #0
 800b11a:	da11      	bge.n	800b140 <ceilf+0x38>
 800b11c:	eddf 7a18 	vldr	s15, [pc, #96]	; 800b180 <ceilf+0x78>
 800b120:	ee30 0a27 	vadd.f32	s0, s0, s15
 800b124:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800b128:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b12c:	dd05      	ble.n	800b13a <ceilf+0x32>
 800b12e:	2b00      	cmp	r3, #0
 800b130:	db23      	blt.n	800b17a <ceilf+0x72>
 800b132:	2900      	cmp	r1, #0
 800b134:	bf18      	it	ne
 800b136:	f04f 537e 	movne.w	r3, #1065353216	; 0x3f800000
 800b13a:	ee00 3a10 	vmov	s0, r3
 800b13e:	4770      	bx	lr
 800b140:	4910      	ldr	r1, [pc, #64]	; (800b184 <ceilf+0x7c>)
 800b142:	4111      	asrs	r1, r2
 800b144:	420b      	tst	r3, r1
 800b146:	d0fa      	beq.n	800b13e <ceilf+0x36>
 800b148:	eddf 7a0d 	vldr	s15, [pc, #52]	; 800b180 <ceilf+0x78>
 800b14c:	ee30 0a27 	vadd.f32	s0, s0, s15
 800b150:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800b154:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b158:	ddef      	ble.n	800b13a <ceilf+0x32>
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	bfc2      	ittt	gt
 800b15e:	f44f 0000 	movgt.w	r0, #8388608	; 0x800000
 800b162:	fa40 f202 	asrgt.w	r2, r0, r2
 800b166:	189b      	addgt	r3, r3, r2
 800b168:	ea23 0301 	bic.w	r3, r3, r1
 800b16c:	e7e5      	b.n	800b13a <ceilf+0x32>
 800b16e:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800b172:	d3e4      	bcc.n	800b13e <ceilf+0x36>
 800b174:	ee30 0a00 	vadd.f32	s0, s0, s0
 800b178:	4770      	bx	lr
 800b17a:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b17e:	e7dc      	b.n	800b13a <ceilf+0x32>
 800b180:	7149f2ca 	.word	0x7149f2ca
 800b184:	007fffff 	.word	0x007fffff

0800b188 <cosf>:
 800b188:	ee10 3a10 	vmov	r3, s0
 800b18c:	b507      	push	{r0, r1, r2, lr}
 800b18e:	4a1c      	ldr	r2, [pc, #112]	; (800b200 <cosf+0x78>)
 800b190:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b194:	4293      	cmp	r3, r2
 800b196:	dc04      	bgt.n	800b1a2 <cosf+0x1a>
 800b198:	eddf 0a1a 	vldr	s1, [pc, #104]	; 800b204 <cosf+0x7c>
 800b19c:	f002 fabc 	bl	800d718 <__kernel_cosf>
 800b1a0:	e004      	b.n	800b1ac <cosf+0x24>
 800b1a2:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800b1a6:	db04      	blt.n	800b1b2 <cosf+0x2a>
 800b1a8:	ee30 0a40 	vsub.f32	s0, s0, s0
 800b1ac:	b003      	add	sp, #12
 800b1ae:	f85d fb04 	ldr.w	pc, [sp], #4
 800b1b2:	4668      	mov	r0, sp
 800b1b4:	f002 f912 	bl	800d3dc <__ieee754_rem_pio2f>
 800b1b8:	f000 0003 	and.w	r0, r0, #3
 800b1bc:	2801      	cmp	r0, #1
 800b1be:	d007      	beq.n	800b1d0 <cosf+0x48>
 800b1c0:	2802      	cmp	r0, #2
 800b1c2:	d00e      	beq.n	800b1e2 <cosf+0x5a>
 800b1c4:	b9a0      	cbnz	r0, 800b1f0 <cosf+0x68>
 800b1c6:	eddd 0a01 	vldr	s1, [sp, #4]
 800b1ca:	ed9d 0a00 	vldr	s0, [sp]
 800b1ce:	e7e5      	b.n	800b19c <cosf+0x14>
 800b1d0:	eddd 0a01 	vldr	s1, [sp, #4]
 800b1d4:	ed9d 0a00 	vldr	s0, [sp]
 800b1d8:	f002 fd7e 	bl	800dcd8 <__kernel_sinf>
 800b1dc:	eeb1 0a40 	vneg.f32	s0, s0
 800b1e0:	e7e4      	b.n	800b1ac <cosf+0x24>
 800b1e2:	eddd 0a01 	vldr	s1, [sp, #4]
 800b1e6:	ed9d 0a00 	vldr	s0, [sp]
 800b1ea:	f002 fa95 	bl	800d718 <__kernel_cosf>
 800b1ee:	e7f5      	b.n	800b1dc <cosf+0x54>
 800b1f0:	2001      	movs	r0, #1
 800b1f2:	eddd 0a01 	vldr	s1, [sp, #4]
 800b1f6:	ed9d 0a00 	vldr	s0, [sp]
 800b1fa:	f002 fd6d 	bl	800dcd8 <__kernel_sinf>
 800b1fe:	e7d5      	b.n	800b1ac <cosf+0x24>
 800b200:	3f490fd8 	.word	0x3f490fd8
 800b204:	00000000 	.word	0x00000000

0800b208 <erff>:
 800b208:	b538      	push	{r3, r4, r5, lr}
 800b20a:	ee10 4a10 	vmov	r4, s0
 800b20e:	f024 4500 	bic.w	r5, r4, #2147483648	; 0x80000000
 800b212:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800b216:	ed2d 8b06 	vpush	{d8-d10}
 800b21a:	eef0 7a40 	vmov.f32	s15, s0
 800b21e:	db12      	blt.n	800b246 <erff+0x3e>
 800b220:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b224:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b228:	0fe4      	lsrs	r4, r4, #31
 800b22a:	0064      	lsls	r4, r4, #1
 800b22c:	f1c4 0301 	rsb	r3, r4, #1
 800b230:	ee00 3a10 	vmov	s0, r3
 800b234:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 800b238:	ee70 7a07 	vadd.f32	s15, s0, s14
 800b23c:	ecbd 8b06 	vpop	{d8-d10}
 800b240:	eeb0 0a67 	vmov.f32	s0, s15
 800b244:	bd38      	pop	{r3, r4, r5, pc}
 800b246:	4ba4      	ldr	r3, [pc, #656]	; (800b4d8 <erff+0x2d0>)
 800b248:	429d      	cmp	r5, r3
 800b24a:	dc4a      	bgt.n	800b2e2 <erff+0xda>
 800b24c:	f1b5 5f46 	cmp.w	r5, #830472192	; 0x31800000
 800b250:	da16      	bge.n	800b280 <erff+0x78>
 800b252:	f1b5 6f80 	cmp.w	r5, #67108864	; 0x4000000
 800b256:	da0e      	bge.n	800b276 <erff+0x6e>
 800b258:	ed9f 0aa0 	vldr	s0, [pc, #640]	; 800b4dc <erff+0x2d4>
 800b25c:	ee27 0a80 	vmul.f32	s0, s15, s0
 800b260:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 800b264:	eea7 0a87 	vfma.f32	s0, s15, s14
 800b268:	eef0 7a40 	vmov.f32	s15, s0
 800b26c:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 800b270:	ee67 7a80 	vmul.f32	s15, s15, s0
 800b274:	e7e2      	b.n	800b23c <erff+0x34>
 800b276:	ed9f 7a9a 	vldr	s14, [pc, #616]	; 800b4e0 <erff+0x2d8>
 800b27a:	eee0 7a07 	vfma.f32	s15, s0, s14
 800b27e:	e7dd      	b.n	800b23c <erff+0x34>
 800b280:	ee20 7a00 	vmul.f32	s14, s0, s0
 800b284:	ed9f 6a97 	vldr	s12, [pc, #604]	; 800b4e4 <erff+0x2dc>
 800b288:	eddf 6a97 	vldr	s13, [pc, #604]	; 800b4e8 <erff+0x2e0>
 800b28c:	eddf 5a97 	vldr	s11, [pc, #604]	; 800b4ec <erff+0x2e4>
 800b290:	eee7 6a06 	vfma.f32	s13, s14, s12
 800b294:	ed9f 6a96 	vldr	s12, [pc, #600]	; 800b4f0 <erff+0x2e8>
 800b298:	eea6 6a87 	vfma.f32	s12, s13, s14
 800b29c:	eddf 6a95 	vldr	s13, [pc, #596]	; 800b4f4 <erff+0x2ec>
 800b2a0:	eee6 6a07 	vfma.f32	s13, s12, s14
 800b2a4:	ed9f 6a8e 	vldr	s12, [pc, #568]	; 800b4e0 <erff+0x2d8>
 800b2a8:	eea6 6a87 	vfma.f32	s12, s13, s14
 800b2ac:	eddf 6a92 	vldr	s13, [pc, #584]	; 800b4f8 <erff+0x2f0>
 800b2b0:	eee7 6a25 	vfma.f32	s13, s14, s11
 800b2b4:	eddf 5a91 	vldr	s11, [pc, #580]	; 800b4fc <erff+0x2f4>
 800b2b8:	eee6 5a87 	vfma.f32	s11, s13, s14
 800b2bc:	eddf 6a90 	vldr	s13, [pc, #576]	; 800b500 <erff+0x2f8>
 800b2c0:	eee5 6a87 	vfma.f32	s13, s11, s14
 800b2c4:	eddf 5a8f 	vldr	s11, [pc, #572]	; 800b504 <erff+0x2fc>
 800b2c8:	eee6 5a87 	vfma.f32	s11, s13, s14
 800b2cc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b2d0:	eee5 6a87 	vfma.f32	s13, s11, s14
 800b2d4:	eeb0 7a66 	vmov.f32	s14, s13
 800b2d8:	eec6 6a07 	vdiv.f32	s13, s12, s14
 800b2dc:	eee0 7a26 	vfma.f32	s15, s0, s13
 800b2e0:	e7ac      	b.n	800b23c <erff+0x34>
 800b2e2:	4b89      	ldr	r3, [pc, #548]	; (800b508 <erff+0x300>)
 800b2e4:	429d      	cmp	r5, r3
 800b2e6:	dc44      	bgt.n	800b372 <erff+0x16a>
 800b2e8:	f000 f96e 	bl	800b5c8 <fabsf>
 800b2ec:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800b2f0:	ee30 0a67 	vsub.f32	s0, s0, s15
 800b2f4:	ed9f 7a85 	vldr	s14, [pc, #532]	; 800b50c <erff+0x304>
 800b2f8:	eddf 6a85 	vldr	s13, [pc, #532]	; 800b510 <erff+0x308>
 800b2fc:	ed9f 6a85 	vldr	s12, [pc, #532]	; 800b514 <erff+0x30c>
 800b300:	eee0 6a07 	vfma.f32	s13, s0, s14
 800b304:	2c00      	cmp	r4, #0
 800b306:	ed9f 7a84 	vldr	s14, [pc, #528]	; 800b518 <erff+0x310>
 800b30a:	eea6 7a80 	vfma.f32	s14, s13, s0
 800b30e:	eddf 6a83 	vldr	s13, [pc, #524]	; 800b51c <erff+0x314>
 800b312:	eee7 6a00 	vfma.f32	s13, s14, s0
 800b316:	ed9f 7a82 	vldr	s14, [pc, #520]	; 800b520 <erff+0x318>
 800b31a:	eea6 7a80 	vfma.f32	s14, s13, s0
 800b31e:	eddf 6a81 	vldr	s13, [pc, #516]	; 800b524 <erff+0x31c>
 800b322:	eee7 6a00 	vfma.f32	s13, s14, s0
 800b326:	ed9f 7a80 	vldr	s14, [pc, #512]	; 800b528 <erff+0x320>
 800b32a:	eea6 7a80 	vfma.f32	s14, s13, s0
 800b32e:	eddf 6a7f 	vldr	s13, [pc, #508]	; 800b52c <erff+0x324>
 800b332:	eee0 6a06 	vfma.f32	s13, s0, s12
 800b336:	ed9f 6a7e 	vldr	s12, [pc, #504]	; 800b530 <erff+0x328>
 800b33a:	eea6 6a80 	vfma.f32	s12, s13, s0
 800b33e:	eddf 6a7d 	vldr	s13, [pc, #500]	; 800b534 <erff+0x32c>
 800b342:	eee6 6a00 	vfma.f32	s13, s12, s0
 800b346:	ed9f 6a7c 	vldr	s12, [pc, #496]	; 800b538 <erff+0x330>
 800b34a:	eea6 6a80 	vfma.f32	s12, s13, s0
 800b34e:	eddf 6a7b 	vldr	s13, [pc, #492]	; 800b53c <erff+0x334>
 800b352:	eee6 6a00 	vfma.f32	s13, s12, s0
 800b356:	eee6 7a80 	vfma.f32	s15, s13, s0
 800b35a:	ee87 0a27 	vdiv.f32	s0, s14, s15
 800b35e:	bfab      	itete	ge
 800b360:	eddf 7a77 	vldrge	s15, [pc, #476]	; 800b540 <erff+0x338>
 800b364:	eddf 7a77 	vldrlt	s15, [pc, #476]	; 800b544 <erff+0x33c>
 800b368:	ee70 7a27 	vaddge.f32	s15, s0, s15
 800b36c:	ee77 7ac0 	vsublt.f32	s15, s15, s0
 800b370:	e764      	b.n	800b23c <erff+0x34>
 800b372:	4b75      	ldr	r3, [pc, #468]	; (800b548 <erff+0x340>)
 800b374:	429d      	cmp	r5, r3
 800b376:	dd08      	ble.n	800b38a <erff+0x182>
 800b378:	2c00      	cmp	r4, #0
 800b37a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800b37e:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 800b382:	bfa8      	it	ge
 800b384:	eef0 7a40 	vmovge.f32	s15, s0
 800b388:	e758      	b.n	800b23c <erff+0x34>
 800b38a:	f000 f91d 	bl	800b5c8 <fabsf>
 800b38e:	4b6f      	ldr	r3, [pc, #444]	; (800b54c <erff+0x344>)
 800b390:	ee60 7a00 	vmul.f32	s15, s0, s0
 800b394:	eeb0 9a40 	vmov.f32	s18, s0
 800b398:	429d      	cmp	r5, r3
 800b39a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800b39e:	ee80 7a27 	vdiv.f32	s14, s0, s15
 800b3a2:	eef0 8a40 	vmov.f32	s17, s0
 800b3a6:	dc64      	bgt.n	800b472 <erff+0x26a>
 800b3a8:	eddf 7a69 	vldr	s15, [pc, #420]	; 800b550 <erff+0x348>
 800b3ac:	eddf 6a69 	vldr	s13, [pc, #420]	; 800b554 <erff+0x34c>
 800b3b0:	eddf 9a69 	vldr	s19, [pc, #420]	; 800b558 <erff+0x350>
 800b3b4:	eee7 6a27 	vfma.f32	s13, s14, s15
 800b3b8:	eddf 7a68 	vldr	s15, [pc, #416]	; 800b55c <erff+0x354>
 800b3bc:	eee6 7a87 	vfma.f32	s15, s13, s14
 800b3c0:	eddf 6a67 	vldr	s13, [pc, #412]	; 800b560 <erff+0x358>
 800b3c4:	eee7 6a87 	vfma.f32	s13, s15, s14
 800b3c8:	eddf 7a66 	vldr	s15, [pc, #408]	; 800b564 <erff+0x35c>
 800b3cc:	eee6 7a87 	vfma.f32	s15, s13, s14
 800b3d0:	eddf 6a65 	vldr	s13, [pc, #404]	; 800b568 <erff+0x360>
 800b3d4:	eee7 6a87 	vfma.f32	s13, s15, s14
 800b3d8:	eddf 7a64 	vldr	s15, [pc, #400]	; 800b56c <erff+0x364>
 800b3dc:	eee6 7a87 	vfma.f32	s15, s13, s14
 800b3e0:	eddf 6a63 	vldr	s13, [pc, #396]	; 800b570 <erff+0x368>
 800b3e4:	eee7 9a87 	vfma.f32	s19, s15, s14
 800b3e8:	eddf 7a62 	vldr	s15, [pc, #392]	; 800b574 <erff+0x36c>
 800b3ec:	eee7 7a26 	vfma.f32	s15, s14, s13
 800b3f0:	eddf 6a61 	vldr	s13, [pc, #388]	; 800b578 <erff+0x370>
 800b3f4:	eee7 6a87 	vfma.f32	s13, s15, s14
 800b3f8:	eddf 7a60 	vldr	s15, [pc, #384]	; 800b57c <erff+0x374>
 800b3fc:	eee6 7a87 	vfma.f32	s15, s13, s14
 800b400:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800b580 <erff+0x378>
 800b404:	eee7 6a87 	vfma.f32	s13, s15, s14
 800b408:	eddf 7a5e 	vldr	s15, [pc, #376]	; 800b584 <erff+0x37c>
 800b40c:	eee6 7a87 	vfma.f32	s15, s13, s14
 800b410:	eddf 6a5d 	vldr	s13, [pc, #372]	; 800b588 <erff+0x380>
 800b414:	eee7 6a87 	vfma.f32	s13, s15, s14
 800b418:	eddf 7a5c 	vldr	s15, [pc, #368]	; 800b58c <erff+0x384>
 800b41c:	ee19 3a10 	vmov	r3, s18
 800b420:	eee6 7a87 	vfma.f32	s15, s13, s14
 800b424:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800b428:	f023 030f 	bic.w	r3, r3, #15
 800b42c:	ee08 3a10 	vmov	s16, r3
 800b430:	eef0 aa68 	vmov.f32	s21, s17
 800b434:	eebe 0a02 	vmov.f32	s0, #226	; 0xbf100000 -0.5625000
 800b438:	eee7 aa87 	vfma.f32	s21, s15, s14
 800b43c:	eea8 0a48 	vfms.f32	s0, s16, s16
 800b440:	f001 fac2 	bl	800c9c8 <__ieee754_expf>
 800b444:	eeb0 aa40 	vmov.f32	s20, s0
 800b448:	ee89 0aaa 	vdiv.f32	s0, s19, s21
 800b44c:	ee78 7a49 	vsub.f32	s15, s16, s18
 800b450:	ee38 8a09 	vadd.f32	s16, s16, s18
 800b454:	eea7 0a88 	vfma.f32	s0, s15, s16
 800b458:	f001 fab6 	bl	800c9c8 <__ieee754_expf>
 800b45c:	ee2a 0a00 	vmul.f32	s0, s20, s0
 800b460:	2c00      	cmp	r4, #0
 800b462:	eec0 7a09 	vdiv.f32	s15, s0, s18
 800b466:	bfac      	ite	ge
 800b468:	ee78 7ae7 	vsubge.f32	s15, s17, s15
 800b46c:	ee77 7ae8 	vsublt.f32	s15, s15, s17
 800b470:	e6e4      	b.n	800b23c <erff+0x34>
 800b472:	eddf 6a47 	vldr	s13, [pc, #284]	; 800b590 <erff+0x388>
 800b476:	eddf 7a47 	vldr	s15, [pc, #284]	; 800b594 <erff+0x38c>
 800b47a:	eddf 9a47 	vldr	s19, [pc, #284]	; 800b598 <erff+0x390>
 800b47e:	eee7 7a26 	vfma.f32	s15, s14, s13
 800b482:	eddf 6a46 	vldr	s13, [pc, #280]	; 800b59c <erff+0x394>
 800b486:	eee7 6a87 	vfma.f32	s13, s15, s14
 800b48a:	eddf 7a45 	vldr	s15, [pc, #276]	; 800b5a0 <erff+0x398>
 800b48e:	eee6 7a87 	vfma.f32	s15, s13, s14
 800b492:	eddf 6a44 	vldr	s13, [pc, #272]	; 800b5a4 <erff+0x39c>
 800b496:	eee7 6a87 	vfma.f32	s13, s15, s14
 800b49a:	eddf 7a43 	vldr	s15, [pc, #268]	; 800b5a8 <erff+0x3a0>
 800b49e:	eee6 7a87 	vfma.f32	s15, s13, s14
 800b4a2:	eddf 6a42 	vldr	s13, [pc, #264]	; 800b5ac <erff+0x3a4>
 800b4a6:	eee7 9a87 	vfma.f32	s19, s15, s14
 800b4aa:	eddf 7a41 	vldr	s15, [pc, #260]	; 800b5b0 <erff+0x3a8>
 800b4ae:	eee7 6a27 	vfma.f32	s13, s14, s15
 800b4b2:	eddf 7a40 	vldr	s15, [pc, #256]	; 800b5b4 <erff+0x3ac>
 800b4b6:	eee6 7a87 	vfma.f32	s15, s13, s14
 800b4ba:	eddf 6a3f 	vldr	s13, [pc, #252]	; 800b5b8 <erff+0x3b0>
 800b4be:	eee7 6a87 	vfma.f32	s13, s15, s14
 800b4c2:	eddf 7a3e 	vldr	s15, [pc, #248]	; 800b5bc <erff+0x3b4>
 800b4c6:	eee6 7a87 	vfma.f32	s15, s13, s14
 800b4ca:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800b5c0 <erff+0x3b8>
 800b4ce:	eee7 6a87 	vfma.f32	s13, s15, s14
 800b4d2:	eddf 7a3c 	vldr	s15, [pc, #240]	; 800b5c4 <erff+0x3bc>
 800b4d6:	e7a1      	b.n	800b41c <erff+0x214>
 800b4d8:	3f57ffff 	.word	0x3f57ffff
 800b4dc:	3f8375d4 	.word	0x3f8375d4
 800b4e0:	3e0375d4 	.word	0x3e0375d4
 800b4e4:	b7c756b1 	.word	0xb7c756b1
 800b4e8:	bbbd1489 	.word	0xbbbd1489
 800b4ec:	b684e21a 	.word	0xb684e21a
 800b4f0:	bce9528f 	.word	0xbce9528f
 800b4f4:	bea66beb 	.word	0xbea66beb
 800b4f8:	390aee49 	.word	0x390aee49
 800b4fc:	3ba68116 	.word	0x3ba68116
 800b500:	3d852a63 	.word	0x3d852a63
 800b504:	3ecbbbce 	.word	0x3ecbbbce
 800b508:	3f9fffff 	.word	0x3f9fffff
 800b50c:	bb0df9c0 	.word	0xbb0df9c0
 800b510:	3d1151b3 	.word	0x3d1151b3
 800b514:	3c445aa3 	.word	0x3c445aa3
 800b518:	bde31cc2 	.word	0xbde31cc2
 800b51c:	3ea2fe54 	.word	0x3ea2fe54
 800b520:	bebe9208 	.word	0xbebe9208
 800b524:	3ed46805 	.word	0x3ed46805
 800b528:	bb1acdc6 	.word	0xbb1acdc6
 800b52c:	3c5f6e13 	.word	0x3c5f6e13
 800b530:	3e013307 	.word	0x3e013307
 800b534:	3d931ae7 	.word	0x3d931ae7
 800b538:	3f0a5785 	.word	0x3f0a5785
 800b53c:	3dd9f331 	.word	0x3dd9f331
 800b540:	3f58560b 	.word	0x3f58560b
 800b544:	bf58560b 	.word	0xbf58560b
 800b548:	40bfffff 	.word	0x40bfffff
 800b54c:	4036db6d 	.word	0x4036db6d
 800b550:	c11d077e 	.word	0xc11d077e
 800b554:	c2a2932b 	.word	0xc2a2932b
 800b558:	bc21a093 	.word	0xbc21a093
 800b55c:	c3389ae7 	.word	0xc3389ae7
 800b560:	c322658c 	.word	0xc322658c
 800b564:	c2798057 	.word	0xc2798057
 800b568:	c128f022 	.word	0xc128f022
 800b56c:	bf31a0b7 	.word	0xbf31a0b7
 800b570:	bd777f97 	.word	0xbd777f97
 800b574:	40d23f7c 	.word	0x40d23f7c
 800b578:	42d9451f 	.word	0x42d9451f
 800b57c:	43d6810b 	.word	0x43d6810b
 800b580:	442158c9 	.word	0x442158c9
 800b584:	43d9486f 	.word	0x43d9486f
 800b588:	4309a863 	.word	0x4309a863
 800b58c:	419d35ce 	.word	0x419d35ce
 800b590:	c3f1c275 	.word	0xc3f1c275
 800b594:	c480230b 	.word	0xc480230b
 800b598:	bc21a092 	.word	0xbc21a092
 800b59c:	c41f6441 	.word	0xc41f6441
 800b5a0:	c320a2ea 	.word	0xc320a2ea
 800b5a4:	c18e104b 	.word	0xc18e104b
 800b5a8:	bf4c9dd4 	.word	0xbf4c9dd4
 800b5ac:	43ed43a7 	.word	0x43ed43a7
 800b5b0:	c1b38712 	.word	0xc1b38712
 800b5b4:	451f90ce 	.word	0x451f90ce
 800b5b8:	4547fdbb 	.word	0x4547fdbb
 800b5bc:	44c01759 	.word	0x44c01759
 800b5c0:	43a2e571 	.word	0x43a2e571
 800b5c4:	41f2b459 	.word	0x41f2b459

0800b5c8 <fabsf>:
 800b5c8:	ee10 3a10 	vmov	r3, s0
 800b5cc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b5d0:	ee00 3a10 	vmov	s0, r3
 800b5d4:	4770      	bx	lr
	...

0800b5d8 <floorf>:
 800b5d8:	ee10 3a10 	vmov	r3, s0
 800b5dc:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800b5e0:	0dca      	lsrs	r2, r1, #23
 800b5e2:	3a7f      	subs	r2, #127	; 0x7f
 800b5e4:	2a16      	cmp	r2, #22
 800b5e6:	dc2a      	bgt.n	800b63e <floorf+0x66>
 800b5e8:	2a00      	cmp	r2, #0
 800b5ea:	da11      	bge.n	800b610 <floorf+0x38>
 800b5ec:	eddf 7a18 	vldr	s15, [pc, #96]	; 800b650 <floorf+0x78>
 800b5f0:	ee30 0a27 	vadd.f32	s0, s0, s15
 800b5f4:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800b5f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b5fc:	dd05      	ble.n	800b60a <floorf+0x32>
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	da23      	bge.n	800b64a <floorf+0x72>
 800b602:	4a14      	ldr	r2, [pc, #80]	; (800b654 <floorf+0x7c>)
 800b604:	2900      	cmp	r1, #0
 800b606:	bf18      	it	ne
 800b608:	4613      	movne	r3, r2
 800b60a:	ee00 3a10 	vmov	s0, r3
 800b60e:	4770      	bx	lr
 800b610:	4911      	ldr	r1, [pc, #68]	; (800b658 <floorf+0x80>)
 800b612:	4111      	asrs	r1, r2
 800b614:	420b      	tst	r3, r1
 800b616:	d0fa      	beq.n	800b60e <floorf+0x36>
 800b618:	eddf 7a0d 	vldr	s15, [pc, #52]	; 800b650 <floorf+0x78>
 800b61c:	ee30 0a27 	vadd.f32	s0, s0, s15
 800b620:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800b624:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b628:	ddef      	ble.n	800b60a <floorf+0x32>
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	bfbe      	ittt	lt
 800b62e:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 800b632:	fa40 f202 	asrlt.w	r2, r0, r2
 800b636:	189b      	addlt	r3, r3, r2
 800b638:	ea23 0301 	bic.w	r3, r3, r1
 800b63c:	e7e5      	b.n	800b60a <floorf+0x32>
 800b63e:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800b642:	d3e4      	bcc.n	800b60e <floorf+0x36>
 800b644:	ee30 0a00 	vadd.f32	s0, s0, s0
 800b648:	4770      	bx	lr
 800b64a:	2300      	movs	r3, #0
 800b64c:	e7dd      	b.n	800b60a <floorf+0x32>
 800b64e:	bf00      	nop
 800b650:	7149f2ca 	.word	0x7149f2ca
 800b654:	bf800000 	.word	0xbf800000
 800b658:	007fffff 	.word	0x007fffff

0800b65c <log1pf>:
 800b65c:	ee10 2a10 	vmov	r2, s0
 800b660:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800b664:	db02      	blt.n	800b66c <log1pf+0x10>
 800b666:	ee30 0a00 	vadd.f32	s0, s0, s0
 800b66a:	4770      	bx	lr
 800b66c:	4b70      	ldr	r3, [pc, #448]	; (800b830 <log1pf+0x1d4>)
 800b66e:	429a      	cmp	r2, r3
 800b670:	dc78      	bgt.n	800b764 <log1pf+0x108>
 800b672:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 800b676:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 800b67a:	db12      	blt.n	800b6a2 <log1pf+0x46>
 800b67c:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 800b680:	eeb4 0a67 	vcmp.f32	s0, s15
 800b684:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b688:	bf05      	ittet	eq
 800b68a:	ed9f 7a6a 	vldreq	s14, [pc, #424]	; 800b834 <log1pf+0x1d8>
 800b68e:	eddf 7a6a 	vldreq	s15, [pc, #424]	; 800b838 <log1pf+0x1dc>
 800b692:	ee70 7a40 	vsubne.f32	s15, s0, s0
 800b696:	ee87 0a27 	vdiveq.f32	s0, s14, s15
 800b69a:	bf18      	it	ne
 800b69c:	ee87 0aa7 	vdivne.f32	s0, s15, s15
 800b6a0:	4770      	bx	lr
 800b6a2:	f1b3 5f44 	cmp.w	r3, #822083584	; 0x31000000
 800b6a6:	da13      	bge.n	800b6d0 <log1pf+0x74>
 800b6a8:	eddf 7a64 	vldr	s15, [pc, #400]	; 800b83c <log1pf+0x1e0>
 800b6ac:	ee70 7a27 	vadd.f32	s15, s0, s15
 800b6b0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b6b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b6b8:	dd03      	ble.n	800b6c2 <log1pf+0x66>
 800b6ba:	f1b3 5f12 	cmp.w	r3, #612368384	; 0x24800000
 800b6be:	f2c0 80b6 	blt.w	800b82e <log1pf+0x1d2>
 800b6c2:	ee20 7a40 	vnmul.f32	s14, s0, s0
 800b6c6:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800b6ca:	eea7 0a27 	vfma.f32	s0, s14, s15
 800b6ce:	4770      	bx	lr
 800b6d0:	4b5b      	ldr	r3, [pc, #364]	; (800b840 <log1pf+0x1e4>)
 800b6d2:	441a      	add	r2, r3
 800b6d4:	429a      	cmp	r2, r3
 800b6d6:	d84d      	bhi.n	800b774 <log1pf+0x118>
 800b6d8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800b6dc:	ee30 7a27 	vadd.f32	s14, s0, s15
 800b6e0:	ee17 2a10 	vmov	r2, s14
 800b6e4:	15d3      	asrs	r3, r2, #23
 800b6e6:	3b7f      	subs	r3, #127	; 0x7f
 800b6e8:	2b00      	cmp	r3, #0
 800b6ea:	bfcb      	itete	gt
 800b6ec:	ee37 0a40 	vsubgt.f32	s0, s14, s0
 800b6f0:	ee77 7a67 	vsuble.f32	s15, s14, s15
 800b6f4:	ee37 0ac0 	vsubgt.f32	s0, s15, s0
 800b6f8:	ee30 0a67 	vsuble.f32	s0, s0, s15
 800b6fc:	eec0 6a07 	vdiv.f32	s13, s0, s14
 800b700:	4950      	ldr	r1, [pc, #320]	; (800b844 <log1pf+0x1e8>)
 800b702:	f3c2 0216 	ubfx	r2, r2, #0, #23
 800b706:	428a      	cmp	r2, r1
 800b708:	bfc9      	itett	gt
 800b70a:	f042 517c 	orrgt.w	r1, r2, #1056964608	; 0x3f000000
 800b70e:	f042 517e 	orrle.w	r1, r2, #1065353216	; 0x3f800000
 800b712:	f5c2 0200 	rsbgt	r2, r2, #8388608	; 0x800000
 800b716:	3301      	addgt	r3, #1
 800b718:	bfc8      	it	gt
 800b71a:	1092      	asrgt	r2, r2, #2
 800b71c:	ee07 1a90 	vmov	s15, r1
 800b720:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800b724:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800b728:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800b72c:	ee20 7a07 	vmul.f32	s14, s0, s14
 800b730:	ee27 7a00 	vmul.f32	s14, s14, s0
 800b734:	2a00      	cmp	r2, #0
 800b736:	d13d      	bne.n	800b7b4 <log1pf+0x158>
 800b738:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800b73c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b740:	d11b      	bne.n	800b77a <log1pf+0x11e>
 800b742:	2b00      	cmp	r3, #0
 800b744:	d071      	beq.n	800b82a <log1pf+0x1ce>
 800b746:	ee07 3a90 	vmov	s15, r3
 800b74a:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 800b848 <log1pf+0x1ec>
 800b74e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b752:	eee7 6a87 	vfma.f32	s13, s15, s14
 800b756:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 800b84c <log1pf+0x1f0>
 800b75a:	eeb0 0a66 	vmov.f32	s0, s13
 800b75e:	eea7 0a87 	vfma.f32	s0, s15, s14
 800b762:	4770      	bx	lr
 800b764:	f1b2 4fb4 	cmp.w	r2, #1509949440	; 0x5a000000
 800b768:	dbb6      	blt.n	800b6d8 <log1pf+0x7c>
 800b76a:	15d3      	asrs	r3, r2, #23
 800b76c:	3b7f      	subs	r3, #127	; 0x7f
 800b76e:	eddf 6a32 	vldr	s13, [pc, #200]	; 800b838 <log1pf+0x1dc>
 800b772:	e7c5      	b.n	800b700 <log1pf+0xa4>
 800b774:	2201      	movs	r2, #1
 800b776:	2300      	movs	r3, #0
 800b778:	e7d6      	b.n	800b728 <log1pf+0xcc>
 800b77a:	eddf 7a35 	vldr	s15, [pc, #212]	; 800b850 <log1pf+0x1f4>
 800b77e:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800b782:	eea0 6a67 	vfms.f32	s12, s0, s15
 800b786:	ee26 6a07 	vmul.f32	s12, s12, s14
 800b78a:	b913      	cbnz	r3, 800b792 <log1pf+0x136>
 800b78c:	ee30 0a46 	vsub.f32	s0, s0, s12
 800b790:	4770      	bx	lr
 800b792:	ee07 3a90 	vmov	s15, r3
 800b796:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 800b848 <log1pf+0x1ec>
 800b79a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b79e:	eee7 6a87 	vfma.f32	s13, s15, s14
 800b7a2:	ee36 7a66 	vsub.f32	s14, s12, s13
 800b7a6:	ee37 0a40 	vsub.f32	s0, s14, s0
 800b7aa:	ed9f 7a28 	vldr	s14, [pc, #160]	; 800b84c <log1pf+0x1f0>
 800b7ae:	ee97 0a87 	vfnms.f32	s0, s15, s14
 800b7b2:	4770      	bx	lr
 800b7b4:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 800b7b8:	ee70 7a27 	vadd.f32	s15, s0, s15
 800b7bc:	ed9f 6a25 	vldr	s12, [pc, #148]	; 800b854 <log1pf+0x1f8>
 800b7c0:	ed9f 5a25 	vldr	s10, [pc, #148]	; 800b858 <log1pf+0x1fc>
 800b7c4:	eec0 5a27 	vdiv.f32	s11, s0, s15
 800b7c8:	ee65 7aa5 	vmul.f32	s15, s11, s11
 800b7cc:	eea7 5a86 	vfma.f32	s10, s15, s12
 800b7d0:	ed9f 6a22 	vldr	s12, [pc, #136]	; 800b85c <log1pf+0x200>
 800b7d4:	eea5 6a27 	vfma.f32	s12, s10, s15
 800b7d8:	ed9f 5a21 	vldr	s10, [pc, #132]	; 800b860 <log1pf+0x204>
 800b7dc:	eea6 5a27 	vfma.f32	s10, s12, s15
 800b7e0:	ed9f 6a20 	vldr	s12, [pc, #128]	; 800b864 <log1pf+0x208>
 800b7e4:	eea5 6a27 	vfma.f32	s12, s10, s15
 800b7e8:	ed9f 5a1f 	vldr	s10, [pc, #124]	; 800b868 <log1pf+0x20c>
 800b7ec:	eea6 5a27 	vfma.f32	s10, s12, s15
 800b7f0:	ed9f 6a17 	vldr	s12, [pc, #92]	; 800b850 <log1pf+0x1f4>
 800b7f4:	eea5 6a27 	vfma.f32	s12, s10, s15
 800b7f8:	eeb0 5a47 	vmov.f32	s10, s14
 800b7fc:	eea6 5a27 	vfma.f32	s10, s12, s15
 800b800:	ee25 6a25 	vmul.f32	s12, s10, s11
 800b804:	b923      	cbnz	r3, 800b810 <log1pf+0x1b4>
 800b806:	ee37 7a46 	vsub.f32	s14, s14, s12
 800b80a:	ee30 0a47 	vsub.f32	s0, s0, s14
 800b80e:	4770      	bx	lr
 800b810:	ee07 3a90 	vmov	s15, r3
 800b814:	eddf 5a0c 	vldr	s11, [pc, #48]	; 800b848 <log1pf+0x1ec>
 800b818:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b81c:	eee7 6aa5 	vfma.f32	s13, s15, s11
 800b820:	ee76 6a86 	vadd.f32	s13, s13, s12
 800b824:	ee37 7a66 	vsub.f32	s14, s14, s13
 800b828:	e7bd      	b.n	800b7a6 <log1pf+0x14a>
 800b82a:	ed9f 0a03 	vldr	s0, [pc, #12]	; 800b838 <log1pf+0x1dc>
 800b82e:	4770      	bx	lr
 800b830:	3ed413d6 	.word	0x3ed413d6
 800b834:	cc000000 	.word	0xcc000000
 800b838:	00000000 	.word	0x00000000
 800b83c:	4c000000 	.word	0x4c000000
 800b840:	416a09e0 	.word	0x416a09e0
 800b844:	003504f6 	.word	0x003504f6
 800b848:	3717f7d1 	.word	0x3717f7d1
 800b84c:	3f317180 	.word	0x3f317180
 800b850:	3f2aaaab 	.word	0x3f2aaaab
 800b854:	3e178897 	.word	0x3e178897
 800b858:	3e1cd04f 	.word	0x3e1cd04f
 800b85c:	3e3a3325 	.word	0x3e3a3325
 800b860:	3e638e29 	.word	0x3e638e29
 800b864:	3e924925 	.word	0x3e924925
 800b868:	3ecccccd 	.word	0x3ecccccd

0800b86c <roundf>:
 800b86c:	ee10 0a10 	vmov	r0, s0
 800b870:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800b874:	f1a3 027f 	sub.w	r2, r3, #127	; 0x7f
 800b878:	2a16      	cmp	r2, #22
 800b87a:	dc15      	bgt.n	800b8a8 <roundf+0x3c>
 800b87c:	2a00      	cmp	r2, #0
 800b87e:	da08      	bge.n	800b892 <roundf+0x26>
 800b880:	3201      	adds	r2, #1
 800b882:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800b886:	d101      	bne.n	800b88c <roundf+0x20>
 800b888:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 800b88c:	ee00 3a10 	vmov	s0, r3
 800b890:	4770      	bx	lr
 800b892:	4908      	ldr	r1, [pc, #32]	; (800b8b4 <roundf+0x48>)
 800b894:	4111      	asrs	r1, r2
 800b896:	4208      	tst	r0, r1
 800b898:	d0fa      	beq.n	800b890 <roundf+0x24>
 800b89a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800b89e:	4113      	asrs	r3, r2
 800b8a0:	4403      	add	r3, r0
 800b8a2:	ea23 0301 	bic.w	r3, r3, r1
 800b8a6:	e7f1      	b.n	800b88c <roundf+0x20>
 800b8a8:	2a80      	cmp	r2, #128	; 0x80
 800b8aa:	d1f1      	bne.n	800b890 <roundf+0x24>
 800b8ac:	ee30 0a00 	vadd.f32	s0, s0, s0
 800b8b0:	4770      	bx	lr
 800b8b2:	bf00      	nop
 800b8b4:	007fffff 	.word	0x007fffff

0800b8b8 <sinf>:
 800b8b8:	ee10 3a10 	vmov	r3, s0
 800b8bc:	b507      	push	{r0, r1, r2, lr}
 800b8be:	4a1d      	ldr	r2, [pc, #116]	; (800b934 <sinf+0x7c>)
 800b8c0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b8c4:	4293      	cmp	r3, r2
 800b8c6:	dc05      	bgt.n	800b8d4 <sinf+0x1c>
 800b8c8:	eddf 0a1b 	vldr	s1, [pc, #108]	; 800b938 <sinf+0x80>
 800b8cc:	2000      	movs	r0, #0
 800b8ce:	f002 fa03 	bl	800dcd8 <__kernel_sinf>
 800b8d2:	e004      	b.n	800b8de <sinf+0x26>
 800b8d4:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800b8d8:	db04      	blt.n	800b8e4 <sinf+0x2c>
 800b8da:	ee30 0a40 	vsub.f32	s0, s0, s0
 800b8de:	b003      	add	sp, #12
 800b8e0:	f85d fb04 	ldr.w	pc, [sp], #4
 800b8e4:	4668      	mov	r0, sp
 800b8e6:	f001 fd79 	bl	800d3dc <__ieee754_rem_pio2f>
 800b8ea:	f000 0003 	and.w	r0, r0, #3
 800b8ee:	2801      	cmp	r0, #1
 800b8f0:	d008      	beq.n	800b904 <sinf+0x4c>
 800b8f2:	2802      	cmp	r0, #2
 800b8f4:	d00d      	beq.n	800b912 <sinf+0x5a>
 800b8f6:	b9b0      	cbnz	r0, 800b926 <sinf+0x6e>
 800b8f8:	2001      	movs	r0, #1
 800b8fa:	eddd 0a01 	vldr	s1, [sp, #4]
 800b8fe:	ed9d 0a00 	vldr	s0, [sp]
 800b902:	e7e4      	b.n	800b8ce <sinf+0x16>
 800b904:	eddd 0a01 	vldr	s1, [sp, #4]
 800b908:	ed9d 0a00 	vldr	s0, [sp]
 800b90c:	f001 ff04 	bl	800d718 <__kernel_cosf>
 800b910:	e7e5      	b.n	800b8de <sinf+0x26>
 800b912:	2001      	movs	r0, #1
 800b914:	eddd 0a01 	vldr	s1, [sp, #4]
 800b918:	ed9d 0a00 	vldr	s0, [sp]
 800b91c:	f002 f9dc 	bl	800dcd8 <__kernel_sinf>
 800b920:	eeb1 0a40 	vneg.f32	s0, s0
 800b924:	e7db      	b.n	800b8de <sinf+0x26>
 800b926:	eddd 0a01 	vldr	s1, [sp, #4]
 800b92a:	ed9d 0a00 	vldr	s0, [sp]
 800b92e:	f001 fef3 	bl	800d718 <__kernel_cosf>
 800b932:	e7f5      	b.n	800b920 <sinf+0x68>
 800b934:	3f490fd8 	.word	0x3f490fd8
 800b938:	00000000 	.word	0x00000000

0800b93c <tanf>:
 800b93c:	ee10 3a10 	vmov	r3, s0
 800b940:	b507      	push	{r0, r1, r2, lr}
 800b942:	4a10      	ldr	r2, [pc, #64]	; (800b984 <tanf+0x48>)
 800b944:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b948:	4293      	cmp	r3, r2
 800b94a:	dc05      	bgt.n	800b958 <tanf+0x1c>
 800b94c:	eddf 0a0e 	vldr	s1, [pc, #56]	; 800b988 <tanf+0x4c>
 800b950:	2001      	movs	r0, #1
 800b952:	f002 fa09 	bl	800dd68 <__kernel_tanf>
 800b956:	e004      	b.n	800b962 <tanf+0x26>
 800b958:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800b95c:	db04      	blt.n	800b968 <tanf+0x2c>
 800b95e:	ee30 0a40 	vsub.f32	s0, s0, s0
 800b962:	b003      	add	sp, #12
 800b964:	f85d fb04 	ldr.w	pc, [sp], #4
 800b968:	4668      	mov	r0, sp
 800b96a:	f001 fd37 	bl	800d3dc <__ieee754_rem_pio2f>
 800b96e:	0040      	lsls	r0, r0, #1
 800b970:	f000 0002 	and.w	r0, r0, #2
 800b974:	f1c0 0001 	rsb	r0, r0, #1
 800b978:	eddd 0a01 	vldr	s1, [sp, #4]
 800b97c:	ed9d 0a00 	vldr	s0, [sp]
 800b980:	e7e7      	b.n	800b952 <tanf+0x16>
 800b982:	bf00      	nop
 800b984:	3f490fda 	.word	0x3f490fda
 800b988:	00000000 	.word	0x00000000

0800b98c <tanhf>:
 800b98c:	b510      	push	{r4, lr}
 800b98e:	ee10 4a10 	vmov	r4, s0
 800b992:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800b996:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800b99a:	ed2d 8b02 	vpush	{d8}
 800b99e:	eef0 7a40 	vmov.f32	s15, s0
 800b9a2:	db0c      	blt.n	800b9be <tanhf+0x32>
 800b9a4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b9a8:	ee87 0a27 	vdiv.f32	s0, s14, s15
 800b9ac:	2c00      	cmp	r4, #0
 800b9ae:	bfac      	ite	ge
 800b9b0:	ee30 0a07 	vaddge.f32	s0, s0, s14
 800b9b4:	ee30 0a47 	vsublt.f32	s0, s0, s14
 800b9b8:	ecbd 8b02 	vpop	{d8}
 800b9bc:	bd10      	pop	{r4, pc}
 800b9be:	4a1b      	ldr	r2, [pc, #108]	; (800ba2c <tanhf+0xa0>)
 800b9c0:	4293      	cmp	r3, r2
 800b9c2:	dc30      	bgt.n	800ba26 <tanhf+0x9a>
 800b9c4:	f1b3 5f10 	cmp.w	r3, #603979776	; 0x24000000
 800b9c8:	da06      	bge.n	800b9d8 <tanhf+0x4c>
 800b9ca:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800b9ce:	ee37 0a80 	vadd.f32	s0, s15, s0
 800b9d2:	ee20 0a27 	vmul.f32	s0, s0, s15
 800b9d6:	e7ef      	b.n	800b9b8 <tanhf+0x2c>
 800b9d8:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 800b9dc:	eeb0 8a00 	vmov.f32	s16, #0	; 0x40000000  2.0
 800b9e0:	db12      	blt.n	800ba08 <tanhf+0x7c>
 800b9e2:	f7ff fdf1 	bl	800b5c8 <fabsf>
 800b9e6:	ee30 0a00 	vadd.f32	s0, s0, s0
 800b9ea:	f002 faad 	bl	800df48 <expm1f>
 800b9ee:	ee30 0a08 	vadd.f32	s0, s0, s16
 800b9f2:	eec8 7a00 	vdiv.f32	s15, s16, s0
 800b9f6:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800b9fa:	ee30 0a67 	vsub.f32	s0, s0, s15
 800b9fe:	2c00      	cmp	r4, #0
 800ba00:	bfb8      	it	lt
 800ba02:	eeb1 0a40 	vneglt.f32	s0, s0
 800ba06:	e7d7      	b.n	800b9b8 <tanhf+0x2c>
 800ba08:	f7ff fdde 	bl	800b5c8 <fabsf>
 800ba0c:	eef8 7a00 	vmov.f32	s15, #128	; 0xc0000000 -2.0
 800ba10:	ee20 0a27 	vmul.f32	s0, s0, s15
 800ba14:	f002 fa98 	bl	800df48 <expm1f>
 800ba18:	ee70 7a08 	vadd.f32	s15, s0, s16
 800ba1c:	eeb1 7a40 	vneg.f32	s14, s0
 800ba20:	ee87 0a27 	vdiv.f32	s0, s14, s15
 800ba24:	e7eb      	b.n	800b9fe <tanhf+0x72>
 800ba26:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800ba2a:	e7e8      	b.n	800b9fe <tanhf+0x72>
 800ba2c:	41afffff 	.word	0x41afffff

0800ba30 <acosf>:
 800ba30:	b510      	push	{r4, lr}
 800ba32:	ed2d 8b02 	vpush	{d8}
 800ba36:	4c27      	ldr	r4, [pc, #156]	; (800bad4 <acosf+0xa4>)
 800ba38:	b08a      	sub	sp, #40	; 0x28
 800ba3a:	eeb0 8a40 	vmov.f32	s16, s0
 800ba3e:	f000 fce1 	bl	800c404 <__ieee754_acosf>
 800ba42:	f994 3000 	ldrsb.w	r3, [r4]
 800ba46:	3301      	adds	r3, #1
 800ba48:	eef0 8a40 	vmov.f32	s17, s0
 800ba4c:	d03c      	beq.n	800bac8 <acosf+0x98>
 800ba4e:	eeb4 8a48 	vcmp.f32	s16, s16
 800ba52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba56:	d637      	bvs.n	800bac8 <acosf+0x98>
 800ba58:	eeb0 0a48 	vmov.f32	s0, s16
 800ba5c:	f7ff fdb4 	bl	800b5c8 <fabsf>
 800ba60:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800ba64:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800ba68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba6c:	dd2c      	ble.n	800bac8 <acosf+0x98>
 800ba6e:	2301      	movs	r3, #1
 800ba70:	9300      	str	r3, [sp, #0]
 800ba72:	4b19      	ldr	r3, [pc, #100]	; (800bad8 <acosf+0xa8>)
 800ba74:	9301      	str	r3, [sp, #4]
 800ba76:	ee18 0a10 	vmov	r0, s16
 800ba7a:	2300      	movs	r3, #0
 800ba7c:	9308      	str	r3, [sp, #32]
 800ba7e:	f7fb fcd7 	bl	8007430 <__aeabi_f2d>
 800ba82:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ba86:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ba8a:	4814      	ldr	r0, [pc, #80]	; (800badc <acosf+0xac>)
 800ba8c:	f002 fa54 	bl	800df38 <nan>
 800ba90:	f994 3000 	ldrsb.w	r3, [r4]
 800ba94:	2b02      	cmp	r3, #2
 800ba96:	ed8d 0b06 	vstr	d0, [sp, #24]
 800ba9a:	d104      	bne.n	800baa6 <acosf+0x76>
 800ba9c:	f7ff f9ac 	bl	800adf8 <__errno>
 800baa0:	2321      	movs	r3, #33	; 0x21
 800baa2:	6003      	str	r3, [r0, #0]
 800baa4:	e004      	b.n	800bab0 <acosf+0x80>
 800baa6:	4668      	mov	r0, sp
 800baa8:	f002 fa42 	bl	800df30 <matherr>
 800baac:	2800      	cmp	r0, #0
 800baae:	d0f5      	beq.n	800ba9c <acosf+0x6c>
 800bab0:	9b08      	ldr	r3, [sp, #32]
 800bab2:	b11b      	cbz	r3, 800babc <acosf+0x8c>
 800bab4:	f7ff f9a0 	bl	800adf8 <__errno>
 800bab8:	9b08      	ldr	r3, [sp, #32]
 800baba:	6003      	str	r3, [r0, #0]
 800babc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bac0:	f7fb ff20 	bl	8007904 <__aeabi_d2f>
 800bac4:	ee08 0a90 	vmov	s17, r0
 800bac8:	eeb0 0a68 	vmov.f32	s0, s17
 800bacc:	b00a      	add	sp, #40	; 0x28
 800bace:	ecbd 8b02 	vpop	{d8}
 800bad2:	bd10      	pop	{r4, pc}
 800bad4:	20000e58 	.word	0x20000e58
 800bad8:	08073460 	.word	0x08073460
 800badc:	08073484 	.word	0x08073484

0800bae0 <acoshf>:
 800bae0:	b510      	push	{r4, lr}
 800bae2:	ed2d 8b02 	vpush	{d8}
 800bae6:	b08a      	sub	sp, #40	; 0x28
 800bae8:	eeb0 8a40 	vmov.f32	s16, s0
 800baec:	f000 fd86 	bl	800c5fc <__ieee754_acoshf>
 800baf0:	4b21      	ldr	r3, [pc, #132]	; (800bb78 <acoshf+0x98>)
 800baf2:	f993 4000 	ldrsb.w	r4, [r3]
 800baf6:	1c63      	adds	r3, r4, #1
 800baf8:	d039      	beq.n	800bb6e <acoshf+0x8e>
 800bafa:	eeb4 8a48 	vcmp.f32	s16, s16
 800bafe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb02:	d634      	bvs.n	800bb6e <acoshf+0x8e>
 800bb04:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800bb08:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800bb0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb10:	d52d      	bpl.n	800bb6e <acoshf+0x8e>
 800bb12:	2301      	movs	r3, #1
 800bb14:	9300      	str	r3, [sp, #0]
 800bb16:	4b19      	ldr	r3, [pc, #100]	; (800bb7c <acoshf+0x9c>)
 800bb18:	9301      	str	r3, [sp, #4]
 800bb1a:	ee18 0a10 	vmov	r0, s16
 800bb1e:	2300      	movs	r3, #0
 800bb20:	9308      	str	r3, [sp, #32]
 800bb22:	f7fb fc85 	bl	8007430 <__aeabi_f2d>
 800bb26:	2200      	movs	r2, #0
 800bb28:	2300      	movs	r3, #0
 800bb2a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bb2e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bb32:	4610      	mov	r0, r2
 800bb34:	4619      	mov	r1, r3
 800bb36:	f7fb fdfd 	bl	8007734 <__aeabi_ddiv>
 800bb3a:	2c02      	cmp	r4, #2
 800bb3c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800bb40:	d104      	bne.n	800bb4c <acoshf+0x6c>
 800bb42:	f7ff f959 	bl	800adf8 <__errno>
 800bb46:	2321      	movs	r3, #33	; 0x21
 800bb48:	6003      	str	r3, [r0, #0]
 800bb4a:	e004      	b.n	800bb56 <acoshf+0x76>
 800bb4c:	4668      	mov	r0, sp
 800bb4e:	f002 f9ef 	bl	800df30 <matherr>
 800bb52:	2800      	cmp	r0, #0
 800bb54:	d0f5      	beq.n	800bb42 <acoshf+0x62>
 800bb56:	9b08      	ldr	r3, [sp, #32]
 800bb58:	b11b      	cbz	r3, 800bb62 <acoshf+0x82>
 800bb5a:	f7ff f94d 	bl	800adf8 <__errno>
 800bb5e:	9b08      	ldr	r3, [sp, #32]
 800bb60:	6003      	str	r3, [r0, #0]
 800bb62:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bb66:	f7fb fecd 	bl	8007904 <__aeabi_d2f>
 800bb6a:	ee00 0a10 	vmov	s0, r0
 800bb6e:	b00a      	add	sp, #40	; 0x28
 800bb70:	ecbd 8b02 	vpop	{d8}
 800bb74:	bd10      	pop	{r4, pc}
 800bb76:	bf00      	nop
 800bb78:	20000e58 	.word	0x20000e58
 800bb7c:	08073466 	.word	0x08073466

0800bb80 <asinf>:
 800bb80:	b510      	push	{r4, lr}
 800bb82:	ed2d 8b02 	vpush	{d8}
 800bb86:	4c27      	ldr	r4, [pc, #156]	; (800bc24 <asinf+0xa4>)
 800bb88:	b08a      	sub	sp, #40	; 0x28
 800bb8a:	eeb0 8a40 	vmov.f32	s16, s0
 800bb8e:	f000 fd89 	bl	800c6a4 <__ieee754_asinf>
 800bb92:	f994 3000 	ldrsb.w	r3, [r4]
 800bb96:	3301      	adds	r3, #1
 800bb98:	eef0 8a40 	vmov.f32	s17, s0
 800bb9c:	d03c      	beq.n	800bc18 <asinf+0x98>
 800bb9e:	eeb4 8a48 	vcmp.f32	s16, s16
 800bba2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bba6:	d637      	bvs.n	800bc18 <asinf+0x98>
 800bba8:	eeb0 0a48 	vmov.f32	s0, s16
 800bbac:	f7ff fd0c 	bl	800b5c8 <fabsf>
 800bbb0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800bbb4:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800bbb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bbbc:	dd2c      	ble.n	800bc18 <asinf+0x98>
 800bbbe:	2301      	movs	r3, #1
 800bbc0:	9300      	str	r3, [sp, #0]
 800bbc2:	4b19      	ldr	r3, [pc, #100]	; (800bc28 <asinf+0xa8>)
 800bbc4:	9301      	str	r3, [sp, #4]
 800bbc6:	ee18 0a10 	vmov	r0, s16
 800bbca:	2300      	movs	r3, #0
 800bbcc:	9308      	str	r3, [sp, #32]
 800bbce:	f7fb fc2f 	bl	8007430 <__aeabi_f2d>
 800bbd2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bbd6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bbda:	4814      	ldr	r0, [pc, #80]	; (800bc2c <asinf+0xac>)
 800bbdc:	f002 f9ac 	bl	800df38 <nan>
 800bbe0:	f994 3000 	ldrsb.w	r3, [r4]
 800bbe4:	2b02      	cmp	r3, #2
 800bbe6:	ed8d 0b06 	vstr	d0, [sp, #24]
 800bbea:	d104      	bne.n	800bbf6 <asinf+0x76>
 800bbec:	f7ff f904 	bl	800adf8 <__errno>
 800bbf0:	2321      	movs	r3, #33	; 0x21
 800bbf2:	6003      	str	r3, [r0, #0]
 800bbf4:	e004      	b.n	800bc00 <asinf+0x80>
 800bbf6:	4668      	mov	r0, sp
 800bbf8:	f002 f99a 	bl	800df30 <matherr>
 800bbfc:	2800      	cmp	r0, #0
 800bbfe:	d0f5      	beq.n	800bbec <asinf+0x6c>
 800bc00:	9b08      	ldr	r3, [sp, #32]
 800bc02:	b11b      	cbz	r3, 800bc0c <asinf+0x8c>
 800bc04:	f7ff f8f8 	bl	800adf8 <__errno>
 800bc08:	9b08      	ldr	r3, [sp, #32]
 800bc0a:	6003      	str	r3, [r0, #0]
 800bc0c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bc10:	f7fb fe78 	bl	8007904 <__aeabi_d2f>
 800bc14:	ee08 0a90 	vmov	s17, r0
 800bc18:	eeb0 0a68 	vmov.f32	s0, s17
 800bc1c:	b00a      	add	sp, #40	; 0x28
 800bc1e:	ecbd 8b02 	vpop	{d8}
 800bc22:	bd10      	pop	{r4, pc}
 800bc24:	20000e58 	.word	0x20000e58
 800bc28:	0807346d 	.word	0x0807346d
 800bc2c:	08073484 	.word	0x08073484

0800bc30 <atanhf>:
 800bc30:	b570      	push	{r4, r5, r6, lr}
 800bc32:	ed2d 8b04 	vpush	{d8-d9}
 800bc36:	4c36      	ldr	r4, [pc, #216]	; (800bd10 <atanhf+0xe0>)
 800bc38:	b08a      	sub	sp, #40	; 0x28
 800bc3a:	eeb0 8a40 	vmov.f32	s16, s0
 800bc3e:	f000 fe19 	bl	800c874 <__ieee754_atanhf>
 800bc42:	f994 3000 	ldrsb.w	r3, [r4]
 800bc46:	3301      	adds	r3, #1
 800bc48:	eef0 8a40 	vmov.f32	s17, s0
 800bc4c:	d059      	beq.n	800bd02 <atanhf+0xd2>
 800bc4e:	eeb4 8a48 	vcmp.f32	s16, s16
 800bc52:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc56:	d654      	bvs.n	800bd02 <atanhf+0xd2>
 800bc58:	eeb0 0a48 	vmov.f32	s0, s16
 800bc5c:	f7ff fcb4 	bl	800b5c8 <fabsf>
 800bc60:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 800bc64:	eeb4 0ac9 	vcmpe.f32	s0, s18
 800bc68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc6c:	eef0 9a40 	vmov.f32	s19, s0
 800bc70:	db47      	blt.n	800bd02 <atanhf+0xd2>
 800bc72:	ee18 0a10 	vmov	r0, s16
 800bc76:	f7fb fbdb 	bl	8007430 <__aeabi_f2d>
 800bc7a:	eef4 9ac9 	vcmpe.f32	s19, s18
 800bc7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc82:	4602      	mov	r2, r0
 800bc84:	460b      	mov	r3, r1
 800bc86:	f994 4000 	ldrsb.w	r4, [r4]
 800bc8a:	4d22      	ldr	r5, [pc, #136]	; (800bd14 <atanhf+0xe4>)
 800bc8c:	dd17      	ble.n	800bcbe <atanhf+0x8e>
 800bc8e:	2101      	movs	r1, #1
 800bc90:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800bc94:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800bc98:	e9cd 1500 	strd	r1, r5, [sp]
 800bc9c:	2200      	movs	r2, #0
 800bc9e:	2100      	movs	r1, #0
 800bca0:	2300      	movs	r3, #0
 800bca2:	9108      	str	r1, [sp, #32]
 800bca4:	4610      	mov	r0, r2
 800bca6:	4619      	mov	r1, r3
 800bca8:	f7fb fd44 	bl	8007734 <__aeabi_ddiv>
 800bcac:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800bcb0:	2c02      	cmp	r4, #2
 800bcb2:	d115      	bne.n	800bce0 <atanhf+0xb0>
 800bcb4:	f7ff f8a0 	bl	800adf8 <__errno>
 800bcb8:	2321      	movs	r3, #33	; 0x21
 800bcba:	6003      	str	r3, [r0, #0]
 800bcbc:	e015      	b.n	800bcea <atanhf+0xba>
 800bcbe:	2602      	movs	r6, #2
 800bcc0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800bcc4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800bcc8:	e9cd 6500 	strd	r6, r5, [sp]
 800bccc:	2200      	movs	r2, #0
 800bcce:	2500      	movs	r5, #0
 800bcd0:	2300      	movs	r3, #0
 800bcd2:	9508      	str	r5, [sp, #32]
 800bcd4:	f7fb fd2e 	bl	8007734 <__aeabi_ddiv>
 800bcd8:	42b4      	cmp	r4, r6
 800bcda:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800bcde:	e7e8      	b.n	800bcb2 <atanhf+0x82>
 800bce0:	4668      	mov	r0, sp
 800bce2:	f002 f925 	bl	800df30 <matherr>
 800bce6:	2800      	cmp	r0, #0
 800bce8:	d0e4      	beq.n	800bcb4 <atanhf+0x84>
 800bcea:	9b08      	ldr	r3, [sp, #32]
 800bcec:	b11b      	cbz	r3, 800bcf6 <atanhf+0xc6>
 800bcee:	f7ff f883 	bl	800adf8 <__errno>
 800bcf2:	9b08      	ldr	r3, [sp, #32]
 800bcf4:	6003      	str	r3, [r0, #0]
 800bcf6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bcfa:	f7fb fe03 	bl	8007904 <__aeabi_d2f>
 800bcfe:	ee08 0a90 	vmov	s17, r0
 800bd02:	eeb0 0a68 	vmov.f32	s0, s17
 800bd06:	b00a      	add	sp, #40	; 0x28
 800bd08:	ecbd 8b04 	vpop	{d8-d9}
 800bd0c:	bd70      	pop	{r4, r5, r6, pc}
 800bd0e:	bf00      	nop
 800bd10:	20000e58 	.word	0x20000e58
 800bd14:	08073473 	.word	0x08073473

0800bd18 <coshf>:
 800bd18:	b510      	push	{r4, lr}
 800bd1a:	ed2d 8b02 	vpush	{d8}
 800bd1e:	4c29      	ldr	r4, [pc, #164]	; (800bdc4 <coshf+0xac>)
 800bd20:	b08a      	sub	sp, #40	; 0x28
 800bd22:	eeb0 8a40 	vmov.f32	s16, s0
 800bd26:	f000 fdeb 	bl	800c900 <__ieee754_coshf>
 800bd2a:	f994 3000 	ldrsb.w	r3, [r4]
 800bd2e:	3301      	adds	r3, #1
 800bd30:	eef0 8a40 	vmov.f32	s17, s0
 800bd34:	d035      	beq.n	800bda2 <coshf+0x8a>
 800bd36:	eeb4 8a48 	vcmp.f32	s16, s16
 800bd3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bd3e:	d630      	bvs.n	800bda2 <coshf+0x8a>
 800bd40:	eeb0 0a48 	vmov.f32	s0, s16
 800bd44:	f7ff fc40 	bl	800b5c8 <fabsf>
 800bd48:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800bdc8 <coshf+0xb0>
 800bd4c:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800bd50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bd54:	dd25      	ble.n	800bda2 <coshf+0x8a>
 800bd56:	2303      	movs	r3, #3
 800bd58:	9300      	str	r3, [sp, #0]
 800bd5a:	4b1c      	ldr	r3, [pc, #112]	; (800bdcc <coshf+0xb4>)
 800bd5c:	9301      	str	r3, [sp, #4]
 800bd5e:	ee18 0a10 	vmov	r0, s16
 800bd62:	2300      	movs	r3, #0
 800bd64:	9308      	str	r3, [sp, #32]
 800bd66:	f7fb fb63 	bl	8007430 <__aeabi_f2d>
 800bd6a:	f994 3000 	ldrsb.w	r3, [r4]
 800bd6e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bd72:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bd76:	b9d3      	cbnz	r3, 800bdae <coshf+0x96>
 800bd78:	4b15      	ldr	r3, [pc, #84]	; (800bdd0 <coshf+0xb8>)
 800bd7a:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800bd7e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800bd82:	4668      	mov	r0, sp
 800bd84:	f002 f8d4 	bl	800df30 <matherr>
 800bd88:	b1b8      	cbz	r0, 800bdba <coshf+0xa2>
 800bd8a:	9b08      	ldr	r3, [sp, #32]
 800bd8c:	b11b      	cbz	r3, 800bd96 <coshf+0x7e>
 800bd8e:	f7ff f833 	bl	800adf8 <__errno>
 800bd92:	9b08      	ldr	r3, [sp, #32]
 800bd94:	6003      	str	r3, [r0, #0]
 800bd96:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bd9a:	f7fb fdb3 	bl	8007904 <__aeabi_d2f>
 800bd9e:	ee08 0a90 	vmov	s17, r0
 800bda2:	eeb0 0a68 	vmov.f32	s0, s17
 800bda6:	b00a      	add	sp, #40	; 0x28
 800bda8:	ecbd 8b02 	vpop	{d8}
 800bdac:	bd10      	pop	{r4, pc}
 800bdae:	4909      	ldr	r1, [pc, #36]	; (800bdd4 <coshf+0xbc>)
 800bdb0:	2000      	movs	r0, #0
 800bdb2:	2b02      	cmp	r3, #2
 800bdb4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800bdb8:	d1e3      	bne.n	800bd82 <coshf+0x6a>
 800bdba:	f7ff f81d 	bl	800adf8 <__errno>
 800bdbe:	2322      	movs	r3, #34	; 0x22
 800bdc0:	6003      	str	r3, [r0, #0]
 800bdc2:	e7e2      	b.n	800bd8a <coshf+0x72>
 800bdc4:	20000e58 	.word	0x20000e58
 800bdc8:	42b2d4fc 	.word	0x42b2d4fc
 800bdcc:	08073467 	.word	0x08073467
 800bdd0:	47efffff 	.word	0x47efffff
 800bdd4:	7ff00000 	.word	0x7ff00000

0800bdd8 <expf>:
 800bdd8:	b530      	push	{r4, r5, lr}
 800bdda:	ed2d 8b02 	vpush	{d8}
 800bdde:	4d35      	ldr	r5, [pc, #212]	; (800beb4 <expf+0xdc>)
 800bde0:	b08b      	sub	sp, #44	; 0x2c
 800bde2:	eeb0 8a40 	vmov.f32	s16, s0
 800bde6:	f000 fdef 	bl	800c9c8 <__ieee754_expf>
 800bdea:	f995 3000 	ldrsb.w	r3, [r5]
 800bdee:	3301      	adds	r3, #1
 800bdf0:	ee10 4a10 	vmov	r4, s0
 800bdf4:	d030      	beq.n	800be58 <expf+0x80>
 800bdf6:	eeb0 0a48 	vmov.f32	s0, s16
 800bdfa:	f002 f9d1 	bl	800e1a0 <finitef>
 800bdfe:	b358      	cbz	r0, 800be58 <expf+0x80>
 800be00:	eddf 7a2d 	vldr	s15, [pc, #180]	; 800beb8 <expf+0xe0>
 800be04:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800be08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800be0c:	dd35      	ble.n	800be7a <expf+0xa2>
 800be0e:	2303      	movs	r3, #3
 800be10:	9300      	str	r3, [sp, #0]
 800be12:	4b2a      	ldr	r3, [pc, #168]	; (800bebc <expf+0xe4>)
 800be14:	9301      	str	r3, [sp, #4]
 800be16:	ee18 0a10 	vmov	r0, s16
 800be1a:	2300      	movs	r3, #0
 800be1c:	9308      	str	r3, [sp, #32]
 800be1e:	f7fb fb07 	bl	8007430 <__aeabi_f2d>
 800be22:	f995 3000 	ldrsb.w	r3, [r5]
 800be26:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800be2a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800be2e:	b9cb      	cbnz	r3, 800be64 <expf+0x8c>
 800be30:	4b23      	ldr	r3, [pc, #140]	; (800bec0 <expf+0xe8>)
 800be32:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800be36:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800be3a:	4668      	mov	r0, sp
 800be3c:	f002 f878 	bl	800df30 <matherr>
 800be40:	b1b0      	cbz	r0, 800be70 <expf+0x98>
 800be42:	9b08      	ldr	r3, [sp, #32]
 800be44:	b11b      	cbz	r3, 800be4e <expf+0x76>
 800be46:	f7fe ffd7 	bl	800adf8 <__errno>
 800be4a:	9b08      	ldr	r3, [sp, #32]
 800be4c:	6003      	str	r3, [r0, #0]
 800be4e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800be52:	f7fb fd57 	bl	8007904 <__aeabi_d2f>
 800be56:	4604      	mov	r4, r0
 800be58:	ee00 4a10 	vmov	s0, r4
 800be5c:	b00b      	add	sp, #44	; 0x2c
 800be5e:	ecbd 8b02 	vpop	{d8}
 800be62:	bd30      	pop	{r4, r5, pc}
 800be64:	4917      	ldr	r1, [pc, #92]	; (800bec4 <expf+0xec>)
 800be66:	2000      	movs	r0, #0
 800be68:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800be6c:	2b02      	cmp	r3, #2
 800be6e:	d1e4      	bne.n	800be3a <expf+0x62>
 800be70:	f7fe ffc2 	bl	800adf8 <__errno>
 800be74:	2322      	movs	r3, #34	; 0x22
 800be76:	6003      	str	r3, [r0, #0]
 800be78:	e7e3      	b.n	800be42 <expf+0x6a>
 800be7a:	eddf 7a13 	vldr	s15, [pc, #76]	; 800bec8 <expf+0xf0>
 800be7e:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800be82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800be86:	d5e7      	bpl.n	800be58 <expf+0x80>
 800be88:	2304      	movs	r3, #4
 800be8a:	9300      	str	r3, [sp, #0]
 800be8c:	4b0b      	ldr	r3, [pc, #44]	; (800bebc <expf+0xe4>)
 800be8e:	9301      	str	r3, [sp, #4]
 800be90:	ee18 0a10 	vmov	r0, s16
 800be94:	2300      	movs	r3, #0
 800be96:	9308      	str	r3, [sp, #32]
 800be98:	f7fb faca 	bl	8007430 <__aeabi_f2d>
 800be9c:	2300      	movs	r3, #0
 800be9e:	2200      	movs	r2, #0
 800bea0:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800bea4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bea8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800beac:	f995 3000 	ldrsb.w	r3, [r5]
 800beb0:	e7dc      	b.n	800be6c <expf+0x94>
 800beb2:	bf00      	nop
 800beb4:	20000e58 	.word	0x20000e58
 800beb8:	42b17180 	.word	0x42b17180
 800bebc:	0807347a 	.word	0x0807347a
 800bec0:	47efffff 	.word	0x47efffff
 800bec4:	7ff00000 	.word	0x7ff00000
 800bec8:	c2cff1b5 	.word	0xc2cff1b5

0800becc <fmodf>:
 800becc:	b5d0      	push	{r4, r6, r7, lr}
 800bece:	ed2d 8b02 	vpush	{d8}
 800bed2:	b08a      	sub	sp, #40	; 0x28
 800bed4:	eef0 8a40 	vmov.f32	s17, s0
 800bed8:	eeb0 8a60 	vmov.f32	s16, s1
 800bedc:	f000 fe48 	bl	800cb70 <__ieee754_fmodf>
 800bee0:	4b26      	ldr	r3, [pc, #152]	; (800bf7c <fmodf+0xb0>)
 800bee2:	f993 4000 	ldrsb.w	r4, [r3]
 800bee6:	1c63      	adds	r3, r4, #1
 800bee8:	d035      	beq.n	800bf56 <fmodf+0x8a>
 800beea:	eeb4 8a48 	vcmp.f32	s16, s16
 800beee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bef2:	d630      	bvs.n	800bf56 <fmodf+0x8a>
 800bef4:	eef4 8a68 	vcmp.f32	s17, s17
 800bef8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800befc:	d62b      	bvs.n	800bf56 <fmodf+0x8a>
 800befe:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800bf02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf06:	d126      	bne.n	800bf56 <fmodf+0x8a>
 800bf08:	2301      	movs	r3, #1
 800bf0a:	9300      	str	r3, [sp, #0]
 800bf0c:	4b1c      	ldr	r3, [pc, #112]	; (800bf80 <fmodf+0xb4>)
 800bf0e:	9301      	str	r3, [sp, #4]
 800bf10:	ee18 0a90 	vmov	r0, s17
 800bf14:	2300      	movs	r3, #0
 800bf16:	9308      	str	r3, [sp, #32]
 800bf18:	f7fb fa8a 	bl	8007430 <__aeabi_f2d>
 800bf1c:	4606      	mov	r6, r0
 800bf1e:	460f      	mov	r7, r1
 800bf20:	ee18 0a10 	vmov	r0, s16
 800bf24:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800bf28:	f7fb fa82 	bl	8007430 <__aeabi_f2d>
 800bf2c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bf30:	b9ac      	cbnz	r4, 800bf5e <fmodf+0x92>
 800bf32:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800bf36:	4668      	mov	r0, sp
 800bf38:	f001 fffa 	bl	800df30 <matherr>
 800bf3c:	b1c8      	cbz	r0, 800bf72 <fmodf+0xa6>
 800bf3e:	9b08      	ldr	r3, [sp, #32]
 800bf40:	b11b      	cbz	r3, 800bf4a <fmodf+0x7e>
 800bf42:	f7fe ff59 	bl	800adf8 <__errno>
 800bf46:	9b08      	ldr	r3, [sp, #32]
 800bf48:	6003      	str	r3, [r0, #0]
 800bf4a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bf4e:	f7fb fcd9 	bl	8007904 <__aeabi_d2f>
 800bf52:	ee00 0a10 	vmov	s0, r0
 800bf56:	b00a      	add	sp, #40	; 0x28
 800bf58:	ecbd 8b02 	vpop	{d8}
 800bf5c:	bdd0      	pop	{r4, r6, r7, pc}
 800bf5e:	2200      	movs	r2, #0
 800bf60:	2300      	movs	r3, #0
 800bf62:	4610      	mov	r0, r2
 800bf64:	4619      	mov	r1, r3
 800bf66:	f7fb fbe5 	bl	8007734 <__aeabi_ddiv>
 800bf6a:	2c02      	cmp	r4, #2
 800bf6c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800bf70:	d1e1      	bne.n	800bf36 <fmodf+0x6a>
 800bf72:	f7fe ff41 	bl	800adf8 <__errno>
 800bf76:	2321      	movs	r3, #33	; 0x21
 800bf78:	6003      	str	r3, [r0, #0]
 800bf7a:	e7e0      	b.n	800bf3e <fmodf+0x72>
 800bf7c:	20000e58 	.word	0x20000e58
 800bf80:	0807347f 	.word	0x0807347f

0800bf84 <logf>:
 800bf84:	b510      	push	{r4, lr}
 800bf86:	ed2d 8b02 	vpush	{d8}
 800bf8a:	b08a      	sub	sp, #40	; 0x28
 800bf8c:	eeb0 8a40 	vmov.f32	s16, s0
 800bf90:	f000 fe76 	bl	800cc80 <__ieee754_logf>
 800bf94:	4b31      	ldr	r3, [pc, #196]	; (800c05c <logf+0xd8>)
 800bf96:	f993 4000 	ldrsb.w	r4, [r3]
 800bf9a:	1c63      	adds	r3, r4, #1
 800bf9c:	d059      	beq.n	800c052 <logf+0xce>
 800bf9e:	eeb4 8a48 	vcmp.f32	s16, s16
 800bfa2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bfa6:	d654      	bvs.n	800c052 <logf+0xce>
 800bfa8:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800bfac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bfb0:	dc4f      	bgt.n	800c052 <logf+0xce>
 800bfb2:	4b2b      	ldr	r3, [pc, #172]	; (800c060 <logf+0xdc>)
 800bfb4:	9301      	str	r3, [sp, #4]
 800bfb6:	ee18 0a10 	vmov	r0, s16
 800bfba:	2300      	movs	r3, #0
 800bfbc:	9308      	str	r3, [sp, #32]
 800bfbe:	f7fb fa37 	bl	8007430 <__aeabi_f2d>
 800bfc2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bfc6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bfca:	b994      	cbnz	r4, 800bff2 <logf+0x6e>
 800bfcc:	4b25      	ldr	r3, [pc, #148]	; (800c064 <logf+0xe0>)
 800bfce:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800bfd2:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800bfd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bfda:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800bfde:	d025      	beq.n	800c02c <logf+0xa8>
 800bfe0:	2301      	movs	r3, #1
 800bfe2:	2c02      	cmp	r4, #2
 800bfe4:	9300      	str	r3, [sp, #0]
 800bfe6:	d116      	bne.n	800c016 <logf+0x92>
 800bfe8:	f7fe ff06 	bl	800adf8 <__errno>
 800bfec:	2321      	movs	r3, #33	; 0x21
 800bfee:	6003      	str	r3, [r0, #0]
 800bff0:	e016      	b.n	800c020 <logf+0x9c>
 800bff2:	4b1d      	ldr	r3, [pc, #116]	; (800c068 <logf+0xe4>)
 800bff4:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800bff8:	2200      	movs	r2, #0
 800bffa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bffe:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800c002:	d1ed      	bne.n	800bfe0 <logf+0x5c>
 800c004:	2302      	movs	r3, #2
 800c006:	429c      	cmp	r4, r3
 800c008:	9300      	str	r3, [sp, #0]
 800c00a:	d111      	bne.n	800c030 <logf+0xac>
 800c00c:	f7fe fef4 	bl	800adf8 <__errno>
 800c010:	2322      	movs	r3, #34	; 0x22
 800c012:	6003      	str	r3, [r0, #0]
 800c014:	e011      	b.n	800c03a <logf+0xb6>
 800c016:	4668      	mov	r0, sp
 800c018:	f001 ff8a 	bl	800df30 <matherr>
 800c01c:	2800      	cmp	r0, #0
 800c01e:	d0e3      	beq.n	800bfe8 <logf+0x64>
 800c020:	4812      	ldr	r0, [pc, #72]	; (800c06c <logf+0xe8>)
 800c022:	f001 ff89 	bl	800df38 <nan>
 800c026:	ed8d 0b06 	vstr	d0, [sp, #24]
 800c02a:	e006      	b.n	800c03a <logf+0xb6>
 800c02c:	2302      	movs	r3, #2
 800c02e:	9300      	str	r3, [sp, #0]
 800c030:	4668      	mov	r0, sp
 800c032:	f001 ff7d 	bl	800df30 <matherr>
 800c036:	2800      	cmp	r0, #0
 800c038:	d0e8      	beq.n	800c00c <logf+0x88>
 800c03a:	9b08      	ldr	r3, [sp, #32]
 800c03c:	b11b      	cbz	r3, 800c046 <logf+0xc2>
 800c03e:	f7fe fedb 	bl	800adf8 <__errno>
 800c042:	9b08      	ldr	r3, [sp, #32]
 800c044:	6003      	str	r3, [r0, #0]
 800c046:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c04a:	f7fb fc5b 	bl	8007904 <__aeabi_d2f>
 800c04e:	ee00 0a10 	vmov	s0, r0
 800c052:	b00a      	add	sp, #40	; 0x28
 800c054:	ecbd 8b02 	vpop	{d8}
 800c058:	bd10      	pop	{r4, pc}
 800c05a:	bf00      	nop
 800c05c:	20000e58 	.word	0x20000e58
 800c060:	08073485 	.word	0x08073485
 800c064:	c7efffff 	.word	0xc7efffff
 800c068:	fff00000 	.word	0xfff00000
 800c06c:	08073484 	.word	0x08073484

0800c070 <powf>:
 800c070:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 800c074:	ed2d 8b04 	vpush	{d8-d9}
 800c078:	4ca7      	ldr	r4, [pc, #668]	; (800c318 <powf+0x2a8>)
 800c07a:	b08a      	sub	sp, #40	; 0x28
 800c07c:	eef0 8a40 	vmov.f32	s17, s0
 800c080:	eeb0 8a60 	vmov.f32	s16, s1
 800c084:	f000 feea 	bl	800ce5c <__ieee754_powf>
 800c088:	f994 5000 	ldrsb.w	r5, [r4]
 800c08c:	1c6b      	adds	r3, r5, #1
 800c08e:	eeb0 9a40 	vmov.f32	s18, s0
 800c092:	4626      	mov	r6, r4
 800c094:	d05f      	beq.n	800c156 <powf+0xe6>
 800c096:	eeb4 8a48 	vcmp.f32	s16, s16
 800c09a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c09e:	d65a      	bvs.n	800c156 <powf+0xe6>
 800c0a0:	eef4 8a68 	vcmp.f32	s17, s17
 800c0a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c0a8:	d721      	bvc.n	800c0ee <powf+0x7e>
 800c0aa:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800c0ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c0b2:	d150      	bne.n	800c156 <powf+0xe6>
 800c0b4:	2301      	movs	r3, #1
 800c0b6:	9300      	str	r3, [sp, #0]
 800c0b8:	4b98      	ldr	r3, [pc, #608]	; (800c31c <powf+0x2ac>)
 800c0ba:	9301      	str	r3, [sp, #4]
 800c0bc:	ee18 0a90 	vmov	r0, s17
 800c0c0:	2300      	movs	r3, #0
 800c0c2:	9308      	str	r3, [sp, #32]
 800c0c4:	f7fb f9b4 	bl	8007430 <__aeabi_f2d>
 800c0c8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c0cc:	ee18 0a10 	vmov	r0, s16
 800c0d0:	f7fb f9ae 	bl	8007430 <__aeabi_f2d>
 800c0d4:	4b92      	ldr	r3, [pc, #584]	; (800c320 <powf+0x2b0>)
 800c0d6:	2200      	movs	r2, #0
 800c0d8:	2d02      	cmp	r5, #2
 800c0da:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c0de:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800c0e2:	d032      	beq.n	800c14a <powf+0xda>
 800c0e4:	4668      	mov	r0, sp
 800c0e6:	f001 ff23 	bl	800df30 <matherr>
 800c0ea:	bb40      	cbnz	r0, 800c13e <powf+0xce>
 800c0ec:	e065      	b.n	800c1ba <powf+0x14a>
 800c0ee:	eddf 9a8d 	vldr	s19, [pc, #564]	; 800c324 <powf+0x2b4>
 800c0f2:	eef4 8a69 	vcmp.f32	s17, s19
 800c0f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c0fa:	d163      	bne.n	800c1c4 <powf+0x154>
 800c0fc:	eeb4 8a69 	vcmp.f32	s16, s19
 800c100:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c104:	d12e      	bne.n	800c164 <powf+0xf4>
 800c106:	2301      	movs	r3, #1
 800c108:	9300      	str	r3, [sp, #0]
 800c10a:	4b84      	ldr	r3, [pc, #528]	; (800c31c <powf+0x2ac>)
 800c10c:	9301      	str	r3, [sp, #4]
 800c10e:	ee18 0a90 	vmov	r0, s17
 800c112:	2300      	movs	r3, #0
 800c114:	9308      	str	r3, [sp, #32]
 800c116:	f7fb f98b 	bl	8007430 <__aeabi_f2d>
 800c11a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c11e:	ee18 0a10 	vmov	r0, s16
 800c122:	f7fb f985 	bl	8007430 <__aeabi_f2d>
 800c126:	2200      	movs	r2, #0
 800c128:	2300      	movs	r3, #0
 800c12a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c12e:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800c132:	2d00      	cmp	r5, #0
 800c134:	d0d6      	beq.n	800c0e4 <powf+0x74>
 800c136:	4b7a      	ldr	r3, [pc, #488]	; (800c320 <powf+0x2b0>)
 800c138:	2200      	movs	r2, #0
 800c13a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800c13e:	9b08      	ldr	r3, [sp, #32]
 800c140:	b11b      	cbz	r3, 800c14a <powf+0xda>
 800c142:	f7fe fe59 	bl	800adf8 <__errno>
 800c146:	9b08      	ldr	r3, [sp, #32]
 800c148:	6003      	str	r3, [r0, #0]
 800c14a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c14e:	f7fb fbd9 	bl	8007904 <__aeabi_d2f>
 800c152:	ee09 0a10 	vmov	s18, r0
 800c156:	eeb0 0a49 	vmov.f32	s0, s18
 800c15a:	b00a      	add	sp, #40	; 0x28
 800c15c:	ecbd 8b04 	vpop	{d8-d9}
 800c160:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800c164:	eeb0 0a48 	vmov.f32	s0, s16
 800c168:	f002 f81a 	bl	800e1a0 <finitef>
 800c16c:	2800      	cmp	r0, #0
 800c16e:	d0f2      	beq.n	800c156 <powf+0xe6>
 800c170:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800c174:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c178:	d5ed      	bpl.n	800c156 <powf+0xe6>
 800c17a:	2301      	movs	r3, #1
 800c17c:	9300      	str	r3, [sp, #0]
 800c17e:	4b67      	ldr	r3, [pc, #412]	; (800c31c <powf+0x2ac>)
 800c180:	9301      	str	r3, [sp, #4]
 800c182:	ee18 0a90 	vmov	r0, s17
 800c186:	2300      	movs	r3, #0
 800c188:	9308      	str	r3, [sp, #32]
 800c18a:	f7fb f951 	bl	8007430 <__aeabi_f2d>
 800c18e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c192:	ee18 0a10 	vmov	r0, s16
 800c196:	f7fb f94b 	bl	8007430 <__aeabi_f2d>
 800c19a:	f994 3000 	ldrsb.w	r3, [r4]
 800c19e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c1a2:	b923      	cbnz	r3, 800c1ae <powf+0x13e>
 800c1a4:	2200      	movs	r2, #0
 800c1a6:	2300      	movs	r3, #0
 800c1a8:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800c1ac:	e79a      	b.n	800c0e4 <powf+0x74>
 800c1ae:	495e      	ldr	r1, [pc, #376]	; (800c328 <powf+0x2b8>)
 800c1b0:	2000      	movs	r0, #0
 800c1b2:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800c1b6:	2b02      	cmp	r3, #2
 800c1b8:	d194      	bne.n	800c0e4 <powf+0x74>
 800c1ba:	f7fe fe1d 	bl	800adf8 <__errno>
 800c1be:	2321      	movs	r3, #33	; 0x21
 800c1c0:	6003      	str	r3, [r0, #0]
 800c1c2:	e7bc      	b.n	800c13e <powf+0xce>
 800c1c4:	f001 ffec 	bl	800e1a0 <finitef>
 800c1c8:	4605      	mov	r5, r0
 800c1ca:	2800      	cmp	r0, #0
 800c1cc:	d173      	bne.n	800c2b6 <powf+0x246>
 800c1ce:	eeb0 0a68 	vmov.f32	s0, s17
 800c1d2:	f001 ffe5 	bl	800e1a0 <finitef>
 800c1d6:	2800      	cmp	r0, #0
 800c1d8:	d06d      	beq.n	800c2b6 <powf+0x246>
 800c1da:	eeb0 0a48 	vmov.f32	s0, s16
 800c1de:	f001 ffdf 	bl	800e1a0 <finitef>
 800c1e2:	2800      	cmp	r0, #0
 800c1e4:	d067      	beq.n	800c2b6 <powf+0x246>
 800c1e6:	ee18 0a90 	vmov	r0, s17
 800c1ea:	f7fb f921 	bl	8007430 <__aeabi_f2d>
 800c1ee:	4680      	mov	r8, r0
 800c1f0:	ee18 0a10 	vmov	r0, s16
 800c1f4:	4689      	mov	r9, r1
 800c1f6:	f7fb f91b 	bl	8007430 <__aeabi_f2d>
 800c1fa:	eeb4 9a49 	vcmp.f32	s18, s18
 800c1fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c202:	f994 4000 	ldrsb.w	r4, [r4]
 800c206:	4b45      	ldr	r3, [pc, #276]	; (800c31c <powf+0x2ac>)
 800c208:	d713      	bvc.n	800c232 <powf+0x1c2>
 800c20a:	2201      	movs	r2, #1
 800c20c:	e9cd 2300 	strd	r2, r3, [sp]
 800c210:	9508      	str	r5, [sp, #32]
 800c212:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800c216:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c21a:	2c00      	cmp	r4, #0
 800c21c:	d0c2      	beq.n	800c1a4 <powf+0x134>
 800c21e:	eec9 7aa9 	vdiv.f32	s15, s19, s19
 800c222:	ee17 0a90 	vmov	r0, s15
 800c226:	f7fb f903 	bl	8007430 <__aeabi_f2d>
 800c22a:	2c02      	cmp	r4, #2
 800c22c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800c230:	e7c2      	b.n	800c1b8 <powf+0x148>
 800c232:	2203      	movs	r2, #3
 800c234:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800c238:	e9cd 2300 	strd	r2, r3, [sp]
 800c23c:	9508      	str	r5, [sp, #32]
 800c23e:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800c242:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c246:	ee28 8a27 	vmul.f32	s16, s16, s15
 800c24a:	b9fc      	cbnz	r4, 800c28c <powf+0x21c>
 800c24c:	4b37      	ldr	r3, [pc, #220]	; (800c32c <powf+0x2bc>)
 800c24e:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 800c252:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800c256:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c25a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800c25e:	d553      	bpl.n	800c308 <powf+0x298>
 800c260:	eeb0 0a48 	vmov.f32	s0, s16
 800c264:	f001 ffac 	bl	800e1c0 <rintf>
 800c268:	eeb4 0a48 	vcmp.f32	s0, s16
 800c26c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c270:	d004      	beq.n	800c27c <powf+0x20c>
 800c272:	4b2f      	ldr	r3, [pc, #188]	; (800c330 <powf+0x2c0>)
 800c274:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800c278:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800c27c:	f996 3000 	ldrsb.w	r3, [r6]
 800c280:	2b02      	cmp	r3, #2
 800c282:	d141      	bne.n	800c308 <powf+0x298>
 800c284:	f7fe fdb8 	bl	800adf8 <__errno>
 800c288:	2322      	movs	r3, #34	; 0x22
 800c28a:	e799      	b.n	800c1c0 <powf+0x150>
 800c28c:	4b29      	ldr	r3, [pc, #164]	; (800c334 <powf+0x2c4>)
 800c28e:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 800c292:	2200      	movs	r2, #0
 800c294:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c298:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800c29c:	d5ee      	bpl.n	800c27c <powf+0x20c>
 800c29e:	eeb0 0a48 	vmov.f32	s0, s16
 800c2a2:	f001 ff8d 	bl	800e1c0 <rintf>
 800c2a6:	eeb4 0a48 	vcmp.f32	s0, s16
 800c2aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c2ae:	d0e5      	beq.n	800c27c <powf+0x20c>
 800c2b0:	2200      	movs	r2, #0
 800c2b2:	4b1d      	ldr	r3, [pc, #116]	; (800c328 <powf+0x2b8>)
 800c2b4:	e7e0      	b.n	800c278 <powf+0x208>
 800c2b6:	eeb5 9a40 	vcmp.f32	s18, #0.0
 800c2ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c2be:	f47f af4a 	bne.w	800c156 <powf+0xe6>
 800c2c2:	eeb0 0a68 	vmov.f32	s0, s17
 800c2c6:	f001 ff6b 	bl	800e1a0 <finitef>
 800c2ca:	2800      	cmp	r0, #0
 800c2cc:	f43f af43 	beq.w	800c156 <powf+0xe6>
 800c2d0:	eeb0 0a48 	vmov.f32	s0, s16
 800c2d4:	f001 ff64 	bl	800e1a0 <finitef>
 800c2d8:	2800      	cmp	r0, #0
 800c2da:	f43f af3c 	beq.w	800c156 <powf+0xe6>
 800c2de:	2304      	movs	r3, #4
 800c2e0:	9300      	str	r3, [sp, #0]
 800c2e2:	4b0e      	ldr	r3, [pc, #56]	; (800c31c <powf+0x2ac>)
 800c2e4:	9301      	str	r3, [sp, #4]
 800c2e6:	ee18 0a90 	vmov	r0, s17
 800c2ea:	2300      	movs	r3, #0
 800c2ec:	9308      	str	r3, [sp, #32]
 800c2ee:	f7fb f89f 	bl	8007430 <__aeabi_f2d>
 800c2f2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c2f6:	ee18 0a10 	vmov	r0, s16
 800c2fa:	f7fb f899 	bl	8007430 <__aeabi_f2d>
 800c2fe:	2200      	movs	r2, #0
 800c300:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c304:	2300      	movs	r3, #0
 800c306:	e7b7      	b.n	800c278 <powf+0x208>
 800c308:	4668      	mov	r0, sp
 800c30a:	f001 fe11 	bl	800df30 <matherr>
 800c30e:	2800      	cmp	r0, #0
 800c310:	f47f af15 	bne.w	800c13e <powf+0xce>
 800c314:	e7b6      	b.n	800c284 <powf+0x214>
 800c316:	bf00      	nop
 800c318:	20000e58 	.word	0x20000e58
 800c31c:	0807348a 	.word	0x0807348a
 800c320:	3ff00000 	.word	0x3ff00000
 800c324:	00000000 	.word	0x00000000
 800c328:	fff00000 	.word	0xfff00000
 800c32c:	47efffff 	.word	0x47efffff
 800c330:	c7efffff 	.word	0xc7efffff
 800c334:	7ff00000 	.word	0x7ff00000

0800c338 <sinhf>:
 800c338:	b530      	push	{r4, r5, lr}
 800c33a:	ed2d 8b02 	vpush	{d8}
 800c33e:	4c2b      	ldr	r4, [pc, #172]	; (800c3ec <sinhf+0xb4>)
 800c340:	b08b      	sub	sp, #44	; 0x2c
 800c342:	eeb0 8a40 	vmov.f32	s16, s0
 800c346:	f001 f975 	bl	800d634 <__ieee754_sinhf>
 800c34a:	f994 3000 	ldrsb.w	r3, [r4]
 800c34e:	3301      	adds	r3, #1
 800c350:	eef0 8a40 	vmov.f32	s17, s0
 800c354:	d034      	beq.n	800c3c0 <sinhf+0x88>
 800c356:	f001 ff23 	bl	800e1a0 <finitef>
 800c35a:	4605      	mov	r5, r0
 800c35c:	2800      	cmp	r0, #0
 800c35e:	d12f      	bne.n	800c3c0 <sinhf+0x88>
 800c360:	eeb0 0a48 	vmov.f32	s0, s16
 800c364:	f001 ff1c 	bl	800e1a0 <finitef>
 800c368:	b350      	cbz	r0, 800c3c0 <sinhf+0x88>
 800c36a:	2303      	movs	r3, #3
 800c36c:	9300      	str	r3, [sp, #0]
 800c36e:	ee18 0a10 	vmov	r0, s16
 800c372:	4b1f      	ldr	r3, [pc, #124]	; (800c3f0 <sinhf+0xb8>)
 800c374:	9301      	str	r3, [sp, #4]
 800c376:	9508      	str	r5, [sp, #32]
 800c378:	f7fb f85a 	bl	8007430 <__aeabi_f2d>
 800c37c:	f994 3000 	ldrsb.w	r3, [r4]
 800c380:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c384:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c388:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800c38c:	b9f3      	cbnz	r3, 800c3cc <sinhf+0x94>
 800c38e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c392:	bfd4      	ite	le
 800c394:	4b17      	ldrle	r3, [pc, #92]	; (800c3f4 <sinhf+0xbc>)
 800c396:	4b18      	ldrgt	r3, [pc, #96]	; (800c3f8 <sinhf+0xc0>)
 800c398:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800c39c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800c3a0:	4668      	mov	r0, sp
 800c3a2:	f001 fdc5 	bl	800df30 <matherr>
 800c3a6:	b1d8      	cbz	r0, 800c3e0 <sinhf+0xa8>
 800c3a8:	9b08      	ldr	r3, [sp, #32]
 800c3aa:	b11b      	cbz	r3, 800c3b4 <sinhf+0x7c>
 800c3ac:	f7fe fd24 	bl	800adf8 <__errno>
 800c3b0:	9b08      	ldr	r3, [sp, #32]
 800c3b2:	6003      	str	r3, [r0, #0]
 800c3b4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c3b8:	f7fb faa4 	bl	8007904 <__aeabi_d2f>
 800c3bc:	ee08 0a90 	vmov	s17, r0
 800c3c0:	eeb0 0a68 	vmov.f32	s0, s17
 800c3c4:	b00b      	add	sp, #44	; 0x2c
 800c3c6:	ecbd 8b02 	vpop	{d8}
 800c3ca:	bd30      	pop	{r4, r5, pc}
 800c3cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c3d0:	bfd4      	ite	le
 800c3d2:	490a      	ldrle	r1, [pc, #40]	; (800c3fc <sinhf+0xc4>)
 800c3d4:	490a      	ldrgt	r1, [pc, #40]	; (800c400 <sinhf+0xc8>)
 800c3d6:	2000      	movs	r0, #0
 800c3d8:	2b02      	cmp	r3, #2
 800c3da:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800c3de:	d1df      	bne.n	800c3a0 <sinhf+0x68>
 800c3e0:	f7fe fd0a 	bl	800adf8 <__errno>
 800c3e4:	2322      	movs	r3, #34	; 0x22
 800c3e6:	6003      	str	r3, [r0, #0]
 800c3e8:	e7de      	b.n	800c3a8 <sinhf+0x70>
 800c3ea:	bf00      	nop
 800c3ec:	20000e58 	.word	0x20000e58
 800c3f0:	0807348f 	.word	0x0807348f
 800c3f4:	c7efffff 	.word	0xc7efffff
 800c3f8:	47efffff 	.word	0x47efffff
 800c3fc:	fff00000 	.word	0xfff00000
 800c400:	7ff00000 	.word	0x7ff00000

0800c404 <__ieee754_acosf>:
 800c404:	b508      	push	{r3, lr}
 800c406:	ee10 3a10 	vmov	r3, s0
 800c40a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800c40e:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 800c412:	ed2d 8b0c 	vpush	{d8-d13}
 800c416:	d10a      	bne.n	800c42e <__ieee754_acosf+0x2a>
 800c418:	ed9f 0a67 	vldr	s0, [pc, #412]	; 800c5b8 <__ieee754_acosf+0x1b4>
 800c41c:	ed9f 8a67 	vldr	s16, [pc, #412]	; 800c5bc <__ieee754_acosf+0x1b8>
 800c420:	2b00      	cmp	r3, #0
 800c422:	bfd8      	it	le
 800c424:	eeb0 0a48 	vmovle.f32	s0, s16
 800c428:	ecbd 8b0c 	vpop	{d8-d13}
 800c42c:	bd08      	pop	{r3, pc}
 800c42e:	dd04      	ble.n	800c43a <__ieee754_acosf+0x36>
 800c430:	ee30 8a40 	vsub.f32	s16, s0, s0
 800c434:	ee88 0a08 	vdiv.f32	s0, s16, s16
 800c438:	e7f6      	b.n	800c428 <__ieee754_acosf+0x24>
 800c43a:	f1b2 5f7c 	cmp.w	r2, #1056964608	; 0x3f000000
 800c43e:	da3e      	bge.n	800c4be <__ieee754_acosf+0xba>
 800c440:	f1b2 5f0c 	cmp.w	r2, #587202560	; 0x23000000
 800c444:	f340 80b5 	ble.w	800c5b2 <__ieee754_acosf+0x1ae>
 800c448:	ee60 7a00 	vmul.f32	s15, s0, s0
 800c44c:	eddf 6a5c 	vldr	s13, [pc, #368]	; 800c5c0 <__ieee754_acosf+0x1bc>
 800c450:	ed9f 7a5c 	vldr	s14, [pc, #368]	; 800c5c4 <__ieee754_acosf+0x1c0>
 800c454:	ed9f 6a5c 	vldr	s12, [pc, #368]	; 800c5c8 <__ieee754_acosf+0x1c4>
 800c458:	ed9f 8a5c 	vldr	s16, [pc, #368]	; 800c5cc <__ieee754_acosf+0x1c8>
 800c45c:	eea7 7aa6 	vfma.f32	s14, s15, s13
 800c460:	eddf 6a5b 	vldr	s13, [pc, #364]	; 800c5d0 <__ieee754_acosf+0x1cc>
 800c464:	eee7 6a27 	vfma.f32	s13, s14, s15
 800c468:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 800c5d4 <__ieee754_acosf+0x1d0>
 800c46c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800c470:	eddf 6a59 	vldr	s13, [pc, #356]	; 800c5d8 <__ieee754_acosf+0x1d4>
 800c474:	eee7 6a27 	vfma.f32	s13, s14, s15
 800c478:	ed9f 7a58 	vldr	s14, [pc, #352]	; 800c5dc <__ieee754_acosf+0x1d8>
 800c47c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800c480:	eddf 6a57 	vldr	s13, [pc, #348]	; 800c5e0 <__ieee754_acosf+0x1dc>
 800c484:	eea7 6aa6 	vfma.f32	s12, s15, s13
 800c488:	eddf 6a56 	vldr	s13, [pc, #344]	; 800c5e4 <__ieee754_acosf+0x1e0>
 800c48c:	eee6 6a27 	vfma.f32	s13, s12, s15
 800c490:	ed9f 6a55 	vldr	s12, [pc, #340]	; 800c5e8 <__ieee754_acosf+0x1e4>
 800c494:	eea6 6aa7 	vfma.f32	s12, s13, s15
 800c498:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c49c:	eee6 6a27 	vfma.f32	s13, s12, s15
 800c4a0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c4a4:	eef0 7a66 	vmov.f32	s15, s13
 800c4a8:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800c4ac:	eea0 8a66 	vfms.f32	s16, s0, s13
 800c4b0:	ee30 8a48 	vsub.f32	s16, s0, s16
 800c4b4:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 800c5ec <__ieee754_acosf+0x1e8>
 800c4b8:	ee30 0a48 	vsub.f32	s0, s0, s16
 800c4bc:	e7b4      	b.n	800c428 <__ieee754_acosf+0x24>
 800c4be:	2b00      	cmp	r3, #0
 800c4c0:	eddf da3f 	vldr	s27, [pc, #252]	; 800c5c0 <__ieee754_acosf+0x1bc>
 800c4c4:	eddf ca3f 	vldr	s25, [pc, #252]	; 800c5c4 <__ieee754_acosf+0x1c0>
 800c4c8:	ed9f ca41 	vldr	s24, [pc, #260]	; 800c5d0 <__ieee754_acosf+0x1cc>
 800c4cc:	eddf ba41 	vldr	s23, [pc, #260]	; 800c5d4 <__ieee754_acosf+0x1d0>
 800c4d0:	ed9f ba41 	vldr	s22, [pc, #260]	; 800c5d8 <__ieee754_acosf+0x1d4>
 800c4d4:	eddf 8a41 	vldr	s17, [pc, #260]	; 800c5dc <__ieee754_acosf+0x1d8>
 800c4d8:	ed9f da41 	vldr	s26, [pc, #260]	; 800c5e0 <__ieee754_acosf+0x1dc>
 800c4dc:	eddf aa3a 	vldr	s21, [pc, #232]	; 800c5c8 <__ieee754_acosf+0x1c4>
 800c4e0:	ed9f aa40 	vldr	s20, [pc, #256]	; 800c5e4 <__ieee754_acosf+0x1e0>
 800c4e4:	eddf 9a40 	vldr	s19, [pc, #256]	; 800c5e8 <__ieee754_acosf+0x1e4>
 800c4e8:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 800c4ec:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800c4f0:	da28      	bge.n	800c544 <__ieee754_acosf+0x140>
 800c4f2:	ee30 0a09 	vadd.f32	s0, s0, s18
 800c4f6:	ee20 0a27 	vmul.f32	s0, s0, s15
 800c4fa:	eee0 ca2d 	vfma.f32	s25, s0, s27
 800c4fe:	eee0 aa0d 	vfma.f32	s21, s0, s26
 800c502:	eeac ca80 	vfma.f32	s24, s25, s0
 800c506:	eeaa aa80 	vfma.f32	s20, s21, s0
 800c50a:	eeec ba00 	vfma.f32	s23, s24, s0
 800c50e:	eeea 9a00 	vfma.f32	s19, s20, s0
 800c512:	eeab ba80 	vfma.f32	s22, s23, s0
 800c516:	eea9 9a80 	vfma.f32	s18, s19, s0
 800c51a:	eeeb 8a00 	vfma.f32	s17, s22, s0
 800c51e:	ee68 8a80 	vmul.f32	s17, s17, s0
 800c522:	f001 f8f5 	bl	800d710 <__ieee754_sqrtf>
 800c526:	ee88 7a89 	vdiv.f32	s14, s17, s18
 800c52a:	eddf 7a31 	vldr	s15, [pc, #196]	; 800c5f0 <__ieee754_acosf+0x1ec>
 800c52e:	eee0 7a07 	vfma.f32	s15, s0, s14
 800c532:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800c536:	ee77 7a80 	vadd.f32	s15, s15, s0
 800c53a:	ed9f 0a2e 	vldr	s0, [pc, #184]	; 800c5f4 <__ieee754_acosf+0x1f0>
 800c53e:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800c542:	e771      	b.n	800c428 <__ieee754_acosf+0x24>
 800c544:	ee39 8a40 	vsub.f32	s16, s18, s0
 800c548:	ee28 8a27 	vmul.f32	s16, s16, s15
 800c54c:	eeb0 0a48 	vmov.f32	s0, s16
 800c550:	f001 f8de 	bl	800d710 <__ieee754_sqrtf>
 800c554:	eee8 ca2d 	vfma.f32	s25, s16, s27
 800c558:	eee8 aa0d 	vfma.f32	s21, s16, s26
 800c55c:	eeac ca88 	vfma.f32	s24, s25, s16
 800c560:	eeaa aa88 	vfma.f32	s20, s21, s16
 800c564:	eeec ba08 	vfma.f32	s23, s24, s16
 800c568:	ee10 3a10 	vmov	r3, s0
 800c56c:	eeab ba88 	vfma.f32	s22, s23, s16
 800c570:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800c574:	f023 030f 	bic.w	r3, r3, #15
 800c578:	eeea 9a08 	vfma.f32	s19, s20, s16
 800c57c:	ee07 3a90 	vmov	s15, r3
 800c580:	eeeb 8a08 	vfma.f32	s17, s22, s16
 800c584:	eeb0 6a48 	vmov.f32	s12, s16
 800c588:	eea7 6ae7 	vfms.f32	s12, s15, s15
 800c58c:	eea9 9a88 	vfma.f32	s18, s19, s16
 800c590:	ee70 6a27 	vadd.f32	s13, s0, s15
 800c594:	ee68 8a88 	vmul.f32	s17, s17, s16
 800c598:	eeb0 7a40 	vmov.f32	s14, s0
 800c59c:	ee86 0a26 	vdiv.f32	s0, s12, s13
 800c5a0:	eec8 6a89 	vdiv.f32	s13, s17, s18
 800c5a4:	eea7 0a26 	vfma.f32	s0, s14, s13
 800c5a8:	ee30 0a27 	vadd.f32	s0, s0, s15
 800c5ac:	ee30 0a00 	vadd.f32	s0, s0, s0
 800c5b0:	e73a      	b.n	800c428 <__ieee754_acosf+0x24>
 800c5b2:	ed9f 0a11 	vldr	s0, [pc, #68]	; 800c5f8 <__ieee754_acosf+0x1f4>
 800c5b6:	e737      	b.n	800c428 <__ieee754_acosf+0x24>
 800c5b8:	00000000 	.word	0x00000000
 800c5bc:	40490fdb 	.word	0x40490fdb
 800c5c0:	3811ef08 	.word	0x3811ef08
 800c5c4:	3a4f7f04 	.word	0x3a4f7f04
 800c5c8:	bf303361 	.word	0xbf303361
 800c5cc:	33a22168 	.word	0x33a22168
 800c5d0:	bd241146 	.word	0xbd241146
 800c5d4:	3e4e0aa8 	.word	0x3e4e0aa8
 800c5d8:	bea6b090 	.word	0xbea6b090
 800c5dc:	3e2aaaab 	.word	0x3e2aaaab
 800c5e0:	3d9dc62e 	.word	0x3d9dc62e
 800c5e4:	4001572d 	.word	0x4001572d
 800c5e8:	c019d139 	.word	0xc019d139
 800c5ec:	3fc90fda 	.word	0x3fc90fda
 800c5f0:	b3a22168 	.word	0xb3a22168
 800c5f4:	40490fda 	.word	0x40490fda
 800c5f8:	3fc90fdb 	.word	0x3fc90fdb

0800c5fc <__ieee754_acoshf>:
 800c5fc:	b508      	push	{r3, lr}
 800c5fe:	ee10 3a10 	vmov	r3, s0
 800c602:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 800c606:	ed2d 8b04 	vpush	{d8-d9}
 800c60a:	eeb0 8a40 	vmov.f32	s16, s0
 800c60e:	da06      	bge.n	800c61e <__ieee754_acoshf+0x22>
 800c610:	ee30 8a40 	vsub.f32	s16, s0, s0
 800c614:	ee88 0a08 	vdiv.f32	s0, s16, s16
 800c618:	ecbd 8b04 	vpop	{d8-d9}
 800c61c:	bd08      	pop	{r3, pc}
 800c61e:	f1b3 4f9b 	cmp.w	r3, #1300234240	; 0x4d800000
 800c622:	db0c      	blt.n	800c63e <__ieee754_acoshf+0x42>
 800c624:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800c628:	db02      	blt.n	800c630 <__ieee754_acoshf+0x34>
 800c62a:	ee30 0a00 	vadd.f32	s0, s0, s0
 800c62e:	e7f3      	b.n	800c618 <__ieee754_acoshf+0x1c>
 800c630:	f000 fb26 	bl	800cc80 <__ieee754_logf>
 800c634:	ed9f 8a19 	vldr	s16, [pc, #100]	; 800c69c <__ieee754_acoshf+0xa0>
 800c638:	ee30 0a08 	vadd.f32	s0, s0, s16
 800c63c:	e7ec      	b.n	800c618 <__ieee754_acoshf+0x1c>
 800c63e:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 800c642:	d028      	beq.n	800c696 <__ieee754_acoshf+0x9a>
 800c644:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c648:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 800c64c:	eef0 8a00 	vmov.f32	s17, #0	; 0x40000000  2.0
 800c650:	dd11      	ble.n	800c676 <__ieee754_acoshf+0x7a>
 800c652:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 800c656:	eea8 0a08 	vfma.f32	s0, s16, s16
 800c65a:	f001 f859 	bl	800d710 <__ieee754_sqrtf>
 800c65e:	ee70 7a08 	vadd.f32	s15, s0, s16
 800c662:	ee89 0a27 	vdiv.f32	s0, s18, s15
 800c666:	ee98 0a28 	vfnms.f32	s0, s16, s17
 800c66a:	ecbd 8b04 	vpop	{d8-d9}
 800c66e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800c672:	f000 bb05 	b.w	800cc80 <__ieee754_logf>
 800c676:	ee30 8a49 	vsub.f32	s16, s0, s18
 800c67a:	ee28 0a08 	vmul.f32	s0, s16, s16
 800c67e:	eea8 0a28 	vfma.f32	s0, s16, s17
 800c682:	f001 f845 	bl	800d710 <__ieee754_sqrtf>
 800c686:	ee30 0a08 	vadd.f32	s0, s0, s16
 800c68a:	ecbd 8b04 	vpop	{d8-d9}
 800c68e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800c692:	f7fe bfe3 	b.w	800b65c <log1pf>
 800c696:	ed9f 0a02 	vldr	s0, [pc, #8]	; 800c6a0 <__ieee754_acoshf+0xa4>
 800c69a:	e7bd      	b.n	800c618 <__ieee754_acoshf+0x1c>
 800c69c:	3f317218 	.word	0x3f317218
 800c6a0:	00000000 	.word	0x00000000

0800c6a4 <__ieee754_asinf>:
 800c6a4:	b538      	push	{r3, r4, r5, lr}
 800c6a6:	ee10 5a10 	vmov	r5, s0
 800c6aa:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800c6ae:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 800c6b2:	ed2d 8b04 	vpush	{d8-d9}
 800c6b6:	d10c      	bne.n	800c6d2 <__ieee754_asinf+0x2e>
 800c6b8:	eddf 7a5e 	vldr	s15, [pc, #376]	; 800c834 <__ieee754_asinf+0x190>
 800c6bc:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 800c838 <__ieee754_asinf+0x194>
 800c6c0:	ee60 7a27 	vmul.f32	s15, s0, s15
 800c6c4:	eee0 7a07 	vfma.f32	s15, s0, s14
 800c6c8:	eeb0 0a67 	vmov.f32	s0, s15
 800c6cc:	ecbd 8b04 	vpop	{d8-d9}
 800c6d0:	bd38      	pop	{r3, r4, r5, pc}
 800c6d2:	dd04      	ble.n	800c6de <__ieee754_asinf+0x3a>
 800c6d4:	ee70 7a40 	vsub.f32	s15, s0, s0
 800c6d8:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800c6dc:	e7f6      	b.n	800c6cc <__ieee754_asinf+0x28>
 800c6de:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 800c6e2:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 800c6e6:	da0b      	bge.n	800c700 <__ieee754_asinf+0x5c>
 800c6e8:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 800c6ec:	da52      	bge.n	800c794 <__ieee754_asinf+0xf0>
 800c6ee:	eddf 7a53 	vldr	s15, [pc, #332]	; 800c83c <__ieee754_asinf+0x198>
 800c6f2:	ee70 7a27 	vadd.f32	s15, s0, s15
 800c6f6:	eef4 7ae8 	vcmpe.f32	s15, s17
 800c6fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c6fe:	dce5      	bgt.n	800c6cc <__ieee754_asinf+0x28>
 800c700:	f7fe ff62 	bl	800b5c8 <fabsf>
 800c704:	ee38 0ac0 	vsub.f32	s0, s17, s0
 800c708:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 800c70c:	ee20 8a08 	vmul.f32	s16, s0, s16
 800c710:	eddf 7a4b 	vldr	s15, [pc, #300]	; 800c840 <__ieee754_asinf+0x19c>
 800c714:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 800c844 <__ieee754_asinf+0x1a0>
 800c718:	ed9f 9a4b 	vldr	s18, [pc, #300]	; 800c848 <__ieee754_asinf+0x1a4>
 800c71c:	eea8 7a27 	vfma.f32	s14, s16, s15
 800c720:	eddf 7a4a 	vldr	s15, [pc, #296]	; 800c84c <__ieee754_asinf+0x1a8>
 800c724:	eee7 7a08 	vfma.f32	s15, s14, s16
 800c728:	ed9f 7a49 	vldr	s14, [pc, #292]	; 800c850 <__ieee754_asinf+0x1ac>
 800c72c:	eea7 7a88 	vfma.f32	s14, s15, s16
 800c730:	eddf 7a48 	vldr	s15, [pc, #288]	; 800c854 <__ieee754_asinf+0x1b0>
 800c734:	eee7 7a08 	vfma.f32	s15, s14, s16
 800c738:	ed9f 7a47 	vldr	s14, [pc, #284]	; 800c858 <__ieee754_asinf+0x1b4>
 800c73c:	eea7 9a88 	vfma.f32	s18, s15, s16
 800c740:	eddf 7a46 	vldr	s15, [pc, #280]	; 800c85c <__ieee754_asinf+0x1b8>
 800c744:	eee8 7a07 	vfma.f32	s15, s16, s14
 800c748:	ed9f 7a45 	vldr	s14, [pc, #276]	; 800c860 <__ieee754_asinf+0x1bc>
 800c74c:	eea7 7a88 	vfma.f32	s14, s15, s16
 800c750:	eddf 7a44 	vldr	s15, [pc, #272]	; 800c864 <__ieee754_asinf+0x1c0>
 800c754:	eee7 7a08 	vfma.f32	s15, s14, s16
 800c758:	eeb0 0a48 	vmov.f32	s0, s16
 800c75c:	eee7 8a88 	vfma.f32	s17, s15, s16
 800c760:	f000 ffd6 	bl	800d710 <__ieee754_sqrtf>
 800c764:	4b40      	ldr	r3, [pc, #256]	; (800c868 <__ieee754_asinf+0x1c4>)
 800c766:	ee29 9a08 	vmul.f32	s18, s18, s16
 800c76a:	429c      	cmp	r4, r3
 800c76c:	ee89 6a28 	vdiv.f32	s12, s18, s17
 800c770:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800c774:	dd3d      	ble.n	800c7f2 <__ieee754_asinf+0x14e>
 800c776:	eea0 0a06 	vfma.f32	s0, s0, s12
 800c77a:	eddf 7a3c 	vldr	s15, [pc, #240]	; 800c86c <__ieee754_asinf+0x1c8>
 800c77e:	eee0 7a07 	vfma.f32	s15, s0, s14
 800c782:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 800c838 <__ieee754_asinf+0x194>
 800c786:	ee30 0a67 	vsub.f32	s0, s0, s15
 800c78a:	2d00      	cmp	r5, #0
 800c78c:	bfd8      	it	le
 800c78e:	eeb1 0a40 	vnegle.f32	s0, s0
 800c792:	e79b      	b.n	800c6cc <__ieee754_asinf+0x28>
 800c794:	ee60 7a00 	vmul.f32	s15, s0, s0
 800c798:	eddf 6a29 	vldr	s13, [pc, #164]	; 800c840 <__ieee754_asinf+0x19c>
 800c79c:	ed9f 7a29 	vldr	s14, [pc, #164]	; 800c844 <__ieee754_asinf+0x1a0>
 800c7a0:	ed9f 6a2d 	vldr	s12, [pc, #180]	; 800c858 <__ieee754_asinf+0x1b4>
 800c7a4:	eea7 7aa6 	vfma.f32	s14, s15, s13
 800c7a8:	eddf 6a28 	vldr	s13, [pc, #160]	; 800c84c <__ieee754_asinf+0x1a8>
 800c7ac:	eee7 6a27 	vfma.f32	s13, s14, s15
 800c7b0:	ed9f 7a27 	vldr	s14, [pc, #156]	; 800c850 <__ieee754_asinf+0x1ac>
 800c7b4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800c7b8:	eddf 6a26 	vldr	s13, [pc, #152]	; 800c854 <__ieee754_asinf+0x1b0>
 800c7bc:	eee7 6a27 	vfma.f32	s13, s14, s15
 800c7c0:	ed9f 7a21 	vldr	s14, [pc, #132]	; 800c848 <__ieee754_asinf+0x1a4>
 800c7c4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800c7c8:	eddf 6a24 	vldr	s13, [pc, #144]	; 800c85c <__ieee754_asinf+0x1b8>
 800c7cc:	eee7 6a86 	vfma.f32	s13, s15, s12
 800c7d0:	ed9f 6a23 	vldr	s12, [pc, #140]	; 800c860 <__ieee754_asinf+0x1bc>
 800c7d4:	eea6 6aa7 	vfma.f32	s12, s13, s15
 800c7d8:	eddf 6a22 	vldr	s13, [pc, #136]	; 800c864 <__ieee754_asinf+0x1c0>
 800c7dc:	eee6 6a27 	vfma.f32	s13, s12, s15
 800c7e0:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c7e4:	eee6 8aa7 	vfma.f32	s17, s13, s15
 800c7e8:	eec7 7a28 	vdiv.f32	s15, s14, s17
 800c7ec:	eea0 0a27 	vfma.f32	s0, s0, s15
 800c7f0:	e76c      	b.n	800c6cc <__ieee754_asinf+0x28>
 800c7f2:	ee10 3a10 	vmov	r3, s0
 800c7f6:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800c7fa:	f023 030f 	bic.w	r3, r3, #15
 800c7fe:	ee07 3a90 	vmov	s15, r3
 800c802:	eef1 6a67 	vneg.f32	s13, s15
 800c806:	eea6 8aa7 	vfma.f32	s16, s13, s15
 800c80a:	ee70 5a00 	vadd.f32	s11, s0, s0
 800c80e:	ee37 0a80 	vadd.f32	s0, s15, s0
 800c812:	eddf 7a08 	vldr	s15, [pc, #32]	; 800c834 <__ieee754_asinf+0x190>
 800c816:	ee88 5a00 	vdiv.f32	s10, s16, s0
 800c81a:	ed9f 0a15 	vldr	s0, [pc, #84]	; 800c870 <__ieee754_asinf+0x1cc>
 800c81e:	eee5 7a47 	vfms.f32	s15, s10, s14
 800c822:	eed5 7a86 	vfnms.f32	s15, s11, s12
 800c826:	eeb0 6a40 	vmov.f32	s12, s0
 800c82a:	eea6 6a87 	vfma.f32	s12, s13, s14
 800c82e:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800c832:	e7a8      	b.n	800c786 <__ieee754_asinf+0xe2>
 800c834:	b33bbd2e 	.word	0xb33bbd2e
 800c838:	3fc90fdb 	.word	0x3fc90fdb
 800c83c:	7149f2ca 	.word	0x7149f2ca
 800c840:	3811ef08 	.word	0x3811ef08
 800c844:	3a4f7f04 	.word	0x3a4f7f04
 800c848:	3e2aaaab 	.word	0x3e2aaaab
 800c84c:	bd241146 	.word	0xbd241146
 800c850:	3e4e0aa8 	.word	0x3e4e0aa8
 800c854:	bea6b090 	.word	0xbea6b090
 800c858:	3d9dc62e 	.word	0x3d9dc62e
 800c85c:	bf303361 	.word	0xbf303361
 800c860:	4001572d 	.word	0x4001572d
 800c864:	c019d139 	.word	0xc019d139
 800c868:	3f799999 	.word	0x3f799999
 800c86c:	333bbd2e 	.word	0x333bbd2e
 800c870:	3f490fdb 	.word	0x3f490fdb

0800c874 <__ieee754_atanhf>:
 800c874:	b510      	push	{r4, lr}
 800c876:	ee10 4a10 	vmov	r4, s0
 800c87a:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800c87e:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 800c882:	ed2d 8b02 	vpush	{d8}
 800c886:	dd06      	ble.n	800c896 <__ieee754_atanhf+0x22>
 800c888:	ee70 7a40 	vsub.f32	s15, s0, s0
 800c88c:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800c890:	ecbd 8b02 	vpop	{d8}
 800c894:	bd10      	pop	{r4, pc}
 800c896:	d104      	bne.n	800c8a2 <__ieee754_atanhf+0x2e>
 800c898:	eddf 7a17 	vldr	s15, [pc, #92]	; 800c8f8 <__ieee754_atanhf+0x84>
 800c89c:	ee80 0a27 	vdiv.f32	s0, s0, s15
 800c8a0:	e7f6      	b.n	800c890 <__ieee754_atanhf+0x1c>
 800c8a2:	f1b3 5f46 	cmp.w	r3, #830472192	; 0x31800000
 800c8a6:	da08      	bge.n	800c8ba <__ieee754_atanhf+0x46>
 800c8a8:	eddf 7a14 	vldr	s15, [pc, #80]	; 800c8fc <__ieee754_atanhf+0x88>
 800c8ac:	ee70 7a27 	vadd.f32	s15, s0, s15
 800c8b0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800c8b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c8b8:	dcea      	bgt.n	800c890 <__ieee754_atanhf+0x1c>
 800c8ba:	ee07 3a90 	vmov	s15, r3
 800c8be:	ee37 0aa7 	vadd.f32	s0, s15, s15
 800c8c2:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 800c8c6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c8ca:	ee37 7a67 	vsub.f32	s14, s14, s15
 800c8ce:	bfb6      	itet	lt
 800c8d0:	ee60 7a27 	vmullt.f32	s15, s0, s15
 800c8d4:	ee80 0a07 	vdivge.f32	s0, s0, s14
 800c8d8:	eec7 6a87 	vdivlt.f32	s13, s15, s14
 800c8dc:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 800c8e0:	bfb8      	it	lt
 800c8e2:	ee36 0a80 	vaddlt.f32	s0, s13, s0
 800c8e6:	f7fe feb9 	bl	800b65c <log1pf>
 800c8ea:	ee20 0a08 	vmul.f32	s0, s0, s16
 800c8ee:	2c00      	cmp	r4, #0
 800c8f0:	bfb8      	it	lt
 800c8f2:	eeb1 0a40 	vneglt.f32	s0, s0
 800c8f6:	e7cb      	b.n	800c890 <__ieee754_atanhf+0x1c>
 800c8f8:	00000000 	.word	0x00000000
 800c8fc:	7149f2ca 	.word	0x7149f2ca

0800c900 <__ieee754_coshf>:
 800c900:	b510      	push	{r4, lr}
 800c902:	ee10 4a10 	vmov	r4, s0
 800c906:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 800c90a:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800c90e:	ed2d 8b02 	vpush	{d8}
 800c912:	db04      	blt.n	800c91e <__ieee754_coshf+0x1e>
 800c914:	ee20 0a00 	vmul.f32	s0, s0, s0
 800c918:	ecbd 8b02 	vpop	{d8}
 800c91c:	bd10      	pop	{r4, pc}
 800c91e:	4b25      	ldr	r3, [pc, #148]	; (800c9b4 <__ieee754_coshf+0xb4>)
 800c920:	429c      	cmp	r4, r3
 800c922:	dc15      	bgt.n	800c950 <__ieee754_coshf+0x50>
 800c924:	f7fe fe50 	bl	800b5c8 <fabsf>
 800c928:	f001 fb0e 	bl	800df48 <expm1f>
 800c92c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c930:	f1b4 5f10 	cmp.w	r4, #603979776	; 0x24000000
 800c934:	eef0 7a40 	vmov.f32	s15, s0
 800c938:	ee30 0a07 	vadd.f32	s0, s0, s14
 800c93c:	dbec      	blt.n	800c918 <__ieee754_coshf+0x18>
 800c93e:	ee30 0a00 	vadd.f32	s0, s0, s0
 800c942:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800c946:	eec7 6a80 	vdiv.f32	s13, s15, s0
 800c94a:	ee36 0a87 	vadd.f32	s0, s13, s14
 800c94e:	e7e3      	b.n	800c918 <__ieee754_coshf+0x18>
 800c950:	4b19      	ldr	r3, [pc, #100]	; (800c9b8 <__ieee754_coshf+0xb8>)
 800c952:	429c      	cmp	r4, r3
 800c954:	dc0c      	bgt.n	800c970 <__ieee754_coshf+0x70>
 800c956:	f7fe fe37 	bl	800b5c8 <fabsf>
 800c95a:	f000 f835 	bl	800c9c8 <__ieee754_expf>
 800c95e:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800c962:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800c966:	eee0 7a07 	vfma.f32	s15, s0, s14
 800c96a:	eeb0 0a67 	vmov.f32	s0, s15
 800c96e:	e7d3      	b.n	800c918 <__ieee754_coshf+0x18>
 800c970:	4b12      	ldr	r3, [pc, #72]	; (800c9bc <__ieee754_coshf+0xbc>)
 800c972:	429c      	cmp	r4, r3
 800c974:	dc08      	bgt.n	800c988 <__ieee754_coshf+0x88>
 800c976:	f7fe fe27 	bl	800b5c8 <fabsf>
 800c97a:	f000 f825 	bl	800c9c8 <__ieee754_expf>
 800c97e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800c982:	ee20 0a27 	vmul.f32	s0, s0, s15
 800c986:	e7c7      	b.n	800c918 <__ieee754_coshf+0x18>
 800c988:	4b0d      	ldr	r3, [pc, #52]	; (800c9c0 <__ieee754_coshf+0xc0>)
 800c98a:	429c      	cmp	r4, r3
 800c98c:	dc0c      	bgt.n	800c9a8 <__ieee754_coshf+0xa8>
 800c98e:	f7fe fe1b 	bl	800b5c8 <fabsf>
 800c992:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 800c996:	ee20 0a08 	vmul.f32	s0, s0, s16
 800c99a:	f000 f815 	bl	800c9c8 <__ieee754_expf>
 800c99e:	ee20 8a08 	vmul.f32	s16, s0, s16
 800c9a2:	ee28 0a00 	vmul.f32	s0, s16, s0
 800c9a6:	e7b7      	b.n	800c918 <__ieee754_coshf+0x18>
 800c9a8:	ed9f 0a06 	vldr	s0, [pc, #24]	; 800c9c4 <__ieee754_coshf+0xc4>
 800c9ac:	ee20 0a00 	vmul.f32	s0, s0, s0
 800c9b0:	e7b2      	b.n	800c918 <__ieee754_coshf+0x18>
 800c9b2:	bf00      	nop
 800c9b4:	3eb17217 	.word	0x3eb17217
 800c9b8:	41afffff 	.word	0x41afffff
 800c9bc:	42b17217 	.word	0x42b17217
 800c9c0:	42b2d4fc 	.word	0x42b2d4fc
 800c9c4:	7149f2ca 	.word	0x7149f2ca

0800c9c8 <__ieee754_expf>:
 800c9c8:	ee10 2a10 	vmov	r2, s0
 800c9cc:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 800c9d0:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800c9d4:	d902      	bls.n	800c9dc <__ieee754_expf+0x14>
 800c9d6:	ee30 0a00 	vadd.f32	s0, s0, s0
 800c9da:	4770      	bx	lr
 800c9dc:	ea4f 73d2 	mov.w	r3, r2, lsr #31
 800c9e0:	d106      	bne.n	800c9f0 <__ieee754_expf+0x28>
 800c9e2:	eddf 7a51 	vldr	s15, [pc, #324]	; 800cb28 <__ieee754_expf+0x160>
 800c9e6:	2b00      	cmp	r3, #0
 800c9e8:	bf18      	it	ne
 800c9ea:	eeb0 0a67 	vmovne.f32	s0, s15
 800c9ee:	4770      	bx	lr
 800c9f0:	484e      	ldr	r0, [pc, #312]	; (800cb2c <__ieee754_expf+0x164>)
 800c9f2:	4282      	cmp	r2, r0
 800c9f4:	dd04      	ble.n	800ca00 <__ieee754_expf+0x38>
 800c9f6:	ed9f 0a4e 	vldr	s0, [pc, #312]	; 800cb30 <__ieee754_expf+0x168>
 800c9fa:	ee20 0a00 	vmul.f32	s0, s0, s0
 800c9fe:	4770      	bx	lr
 800ca00:	2a00      	cmp	r2, #0
 800ca02:	da03      	bge.n	800ca0c <__ieee754_expf+0x44>
 800ca04:	4a4b      	ldr	r2, [pc, #300]	; (800cb34 <__ieee754_expf+0x16c>)
 800ca06:	4291      	cmp	r1, r2
 800ca08:	f200 808a 	bhi.w	800cb20 <__ieee754_expf+0x158>
 800ca0c:	4a4a      	ldr	r2, [pc, #296]	; (800cb38 <__ieee754_expf+0x170>)
 800ca0e:	4291      	cmp	r1, r2
 800ca10:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800ca14:	d954      	bls.n	800cac0 <__ieee754_expf+0xf8>
 800ca16:	4a49      	ldr	r2, [pc, #292]	; (800cb3c <__ieee754_expf+0x174>)
 800ca18:	4291      	cmp	r1, r2
 800ca1a:	ea4f 0283 	mov.w	r2, r3, lsl #2
 800ca1e:	d836      	bhi.n	800ca8e <__ieee754_expf+0xc6>
 800ca20:	4947      	ldr	r1, [pc, #284]	; (800cb40 <__ieee754_expf+0x178>)
 800ca22:	4411      	add	r1, r2
 800ca24:	ed91 7a00 	vldr	s14, [r1]
 800ca28:	4946      	ldr	r1, [pc, #280]	; (800cb44 <__ieee754_expf+0x17c>)
 800ca2a:	440a      	add	r2, r1
 800ca2c:	edd2 7a00 	vldr	s15, [r2]
 800ca30:	ee30 7a47 	vsub.f32	s14, s0, s14
 800ca34:	f1c3 0201 	rsb	r2, r3, #1
 800ca38:	1ad2      	subs	r2, r2, r3
 800ca3a:	ee37 0a67 	vsub.f32	s0, s14, s15
 800ca3e:	ee60 6a00 	vmul.f32	s13, s0, s0
 800ca42:	eddf 5a41 	vldr	s11, [pc, #260]	; 800cb48 <__ieee754_expf+0x180>
 800ca46:	ed9f 5a41 	vldr	s10, [pc, #260]	; 800cb4c <__ieee754_expf+0x184>
 800ca4a:	eea6 5aa5 	vfma.f32	s10, s13, s11
 800ca4e:	eddf 5a40 	vldr	s11, [pc, #256]	; 800cb50 <__ieee754_expf+0x188>
 800ca52:	eee5 5a26 	vfma.f32	s11, s10, s13
 800ca56:	ed9f 5a3f 	vldr	s10, [pc, #252]	; 800cb54 <__ieee754_expf+0x18c>
 800ca5a:	eea5 5aa6 	vfma.f32	s10, s11, s13
 800ca5e:	eddf 5a3e 	vldr	s11, [pc, #248]	; 800cb58 <__ieee754_expf+0x190>
 800ca62:	eee5 5a26 	vfma.f32	s11, s10, s13
 800ca66:	eeb0 5a40 	vmov.f32	s10, s0
 800ca6a:	eea5 5ae6 	vfms.f32	s10, s11, s13
 800ca6e:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800ca72:	eef0 6a45 	vmov.f32	s13, s10
 800ca76:	ee20 5a05 	vmul.f32	s10, s0, s10
 800ca7a:	bb92      	cbnz	r2, 800cae2 <__ieee754_expf+0x11a>
 800ca7c:	ee76 6ae5 	vsub.f32	s13, s13, s11
 800ca80:	eec5 7a26 	vdiv.f32	s15, s10, s13
 800ca84:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800ca88:	ee36 0a40 	vsub.f32	s0, s12, s0
 800ca8c:	4770      	bx	lr
 800ca8e:	4b33      	ldr	r3, [pc, #204]	; (800cb5c <__ieee754_expf+0x194>)
 800ca90:	ed9f 7a33 	vldr	s14, [pc, #204]	; 800cb60 <__ieee754_expf+0x198>
 800ca94:	4413      	add	r3, r2
 800ca96:	edd3 7a00 	vldr	s15, [r3]
 800ca9a:	eee0 7a07 	vfma.f32	s15, s0, s14
 800ca9e:	ed9f 7a31 	vldr	s14, [pc, #196]	; 800cb64 <__ieee754_expf+0x19c>
 800caa2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800caa6:	ee17 2a90 	vmov	r2, s15
 800caaa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800caae:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800cab2:	eeb0 7a40 	vmov.f32	s14, s0
 800cab6:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 800cb68 <__ieee754_expf+0x1a0>
 800caba:	ee67 7a80 	vmul.f32	s15, s15, s0
 800cabe:	e7bc      	b.n	800ca3a <__ieee754_expf+0x72>
 800cac0:	f1b1 5f46 	cmp.w	r1, #830472192	; 0x31800000
 800cac4:	d20b      	bcs.n	800cade <__ieee754_expf+0x116>
 800cac6:	eddf 6a1a 	vldr	s13, [pc, #104]	; 800cb30 <__ieee754_expf+0x168>
 800caca:	ee70 6a26 	vadd.f32	s13, s0, s13
 800cace:	eef4 6ac6 	vcmpe.f32	s13, s12
 800cad2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cad6:	dd02      	ble.n	800cade <__ieee754_expf+0x116>
 800cad8:	ee30 0a06 	vadd.f32	s0, s0, s12
 800cadc:	4770      	bx	lr
 800cade:	2200      	movs	r2, #0
 800cae0:	e7ad      	b.n	800ca3e <__ieee754_expf+0x76>
 800cae2:	ee75 6ae6 	vsub.f32	s13, s11, s13
 800cae6:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 800caea:	ee85 0a26 	vdiv.f32	s0, s10, s13
 800caee:	bfb8      	it	lt
 800caf0:	3264      	addlt	r2, #100	; 0x64
 800caf2:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800caf6:	ee37 0ac7 	vsub.f32	s0, s15, s14
 800cafa:	ee76 7a40 	vsub.f32	s15, s12, s0
 800cafe:	ee17 3a90 	vmov	r3, s15
 800cb02:	bfab      	itete	ge
 800cb04:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 800cb08:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 800cb0c:	ee00 3a10 	vmovge	s0, r3
 800cb10:	eddf 7a16 	vldrlt	s15, [pc, #88]	; 800cb6c <__ieee754_expf+0x1a4>
 800cb14:	bfbc      	itt	lt
 800cb16:	ee00 3a10 	vmovlt	s0, r3
 800cb1a:	ee20 0a27 	vmullt.f32	s0, s0, s15
 800cb1e:	4770      	bx	lr
 800cb20:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800cb28 <__ieee754_expf+0x160>
 800cb24:	4770      	bx	lr
 800cb26:	bf00      	nop
 800cb28:	00000000 	.word	0x00000000
 800cb2c:	42b17217 	.word	0x42b17217
 800cb30:	7149f2ca 	.word	0x7149f2ca
 800cb34:	42cff1b5 	.word	0x42cff1b5
 800cb38:	3eb17218 	.word	0x3eb17218
 800cb3c:	3f851591 	.word	0x3f851591
 800cb40:	080734a0 	.word	0x080734a0
 800cb44:	080734a8 	.word	0x080734a8
 800cb48:	3331bb4c 	.word	0x3331bb4c
 800cb4c:	b5ddea0e 	.word	0xb5ddea0e
 800cb50:	388ab355 	.word	0x388ab355
 800cb54:	bb360b61 	.word	0xbb360b61
 800cb58:	3e2aaaab 	.word	0x3e2aaaab
 800cb5c:	08073498 	.word	0x08073498
 800cb60:	3fb8aa3b 	.word	0x3fb8aa3b
 800cb64:	3f317180 	.word	0x3f317180
 800cb68:	3717f7d1 	.word	0x3717f7d1
 800cb6c:	0d800000 	.word	0x0d800000

0800cb70 <__ieee754_fmodf>:
 800cb70:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cb72:	ee10 6a90 	vmov	r6, s1
 800cb76:	f036 4500 	bics.w	r5, r6, #2147483648	; 0x80000000
 800cb7a:	ee10 3a10 	vmov	r3, s0
 800cb7e:	d009      	beq.n	800cb94 <__ieee754_fmodf+0x24>
 800cb80:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800cb84:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800cb88:	ee10 7a10 	vmov	r7, s0
 800cb8c:	da02      	bge.n	800cb94 <__ieee754_fmodf+0x24>
 800cb8e:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800cb92:	dd0a      	ble.n	800cbaa <__ieee754_fmodf+0x3a>
 800cb94:	ee07 3a90 	vmov	s15, r3
 800cb98:	ee67 0aa0 	vmul.f32	s1, s15, s1
 800cb9c:	eec0 7aa0 	vdiv.f32	s15, s1, s1
 800cba0:	ee17 3a90 	vmov	r3, s15
 800cba4:	ee00 3a10 	vmov	s0, r3
 800cba8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cbaa:	42a9      	cmp	r1, r5
 800cbac:	dbfa      	blt.n	800cba4 <__ieee754_fmodf+0x34>
 800cbae:	f003 4400 	and.w	r4, r3, #2147483648	; 0x80000000
 800cbb2:	d105      	bne.n	800cbc0 <__ieee754_fmodf+0x50>
 800cbb4:	4a30      	ldr	r2, [pc, #192]	; (800cc78 <__ieee754_fmodf+0x108>)
 800cbb6:	0fe3      	lsrs	r3, r4, #31
 800cbb8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800cbbc:	681b      	ldr	r3, [r3, #0]
 800cbbe:	e7f1      	b.n	800cba4 <__ieee754_fmodf+0x34>
 800cbc0:	4b2e      	ldr	r3, [pc, #184]	; (800cc7c <__ieee754_fmodf+0x10c>)
 800cbc2:	4299      	cmp	r1, r3
 800cbc4:	dc3e      	bgt.n	800cc44 <__ieee754_fmodf+0xd4>
 800cbc6:	020a      	lsls	r2, r1, #8
 800cbc8:	f06f 007d 	mvn.w	r0, #125	; 0x7d
 800cbcc:	2a00      	cmp	r2, #0
 800cbce:	dc36      	bgt.n	800cc3e <__ieee754_fmodf+0xce>
 800cbd0:	429d      	cmp	r5, r3
 800cbd2:	dc3a      	bgt.n	800cc4a <__ieee754_fmodf+0xda>
 800cbd4:	022b      	lsls	r3, r5, #8
 800cbd6:	f06f 027d 	mvn.w	r2, #125	; 0x7d
 800cbda:	005b      	lsls	r3, r3, #1
 800cbdc:	f102 32ff 	add.w	r2, r2, #4294967295
 800cbe0:	d5fb      	bpl.n	800cbda <__ieee754_fmodf+0x6a>
 800cbe2:	f110 0f7e 	cmn.w	r0, #126	; 0x7e
 800cbe6:	bfbb      	ittet	lt
 800cbe8:	f06f 037d 	mvnlt.w	r3, #125	; 0x7d
 800cbec:	1a1b      	sublt	r3, r3, r0
 800cbee:	f3c7 0116 	ubfxge	r1, r7, #0, #23
 800cbf2:	4099      	lsllt	r1, r3
 800cbf4:	bfa8      	it	ge
 800cbf6:	f441 0100 	orrge.w	r1, r1, #8388608	; 0x800000
 800cbfa:	f112 0f7e 	cmn.w	r2, #126	; 0x7e
 800cbfe:	bfb5      	itete	lt
 800cc00:	f06f 037d 	mvnlt.w	r3, #125	; 0x7d
 800cc04:	f3c6 0516 	ubfxge	r5, r6, #0, #23
 800cc08:	1a9b      	sublt	r3, r3, r2
 800cc0a:	f445 0500 	orrge.w	r5, r5, #8388608	; 0x800000
 800cc0e:	bfb8      	it	lt
 800cc10:	409d      	lsllt	r5, r3
 800cc12:	1a80      	subs	r0, r0, r2
 800cc14:	1b4b      	subs	r3, r1, r5
 800cc16:	b9d8      	cbnz	r0, 800cc50 <__ieee754_fmodf+0xe0>
 800cc18:	ea33 0323 	bics.w	r3, r3, r3, asr #32
 800cc1c:	bf28      	it	cs
 800cc1e:	460b      	movcs	r3, r1
 800cc20:	2b00      	cmp	r3, #0
 800cc22:	d0c7      	beq.n	800cbb4 <__ieee754_fmodf+0x44>
 800cc24:	4915      	ldr	r1, [pc, #84]	; (800cc7c <__ieee754_fmodf+0x10c>)
 800cc26:	428b      	cmp	r3, r1
 800cc28:	dd1a      	ble.n	800cc60 <__ieee754_fmodf+0xf0>
 800cc2a:	f112 0f7e 	cmn.w	r2, #126	; 0x7e
 800cc2e:	db1a      	blt.n	800cc66 <__ieee754_fmodf+0xf6>
 800cc30:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800cc34:	4323      	orrs	r3, r4
 800cc36:	327f      	adds	r2, #127	; 0x7f
 800cc38:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800cc3c:	e7b2      	b.n	800cba4 <__ieee754_fmodf+0x34>
 800cc3e:	3801      	subs	r0, #1
 800cc40:	0052      	lsls	r2, r2, #1
 800cc42:	e7c3      	b.n	800cbcc <__ieee754_fmodf+0x5c>
 800cc44:	15c8      	asrs	r0, r1, #23
 800cc46:	387f      	subs	r0, #127	; 0x7f
 800cc48:	e7c2      	b.n	800cbd0 <__ieee754_fmodf+0x60>
 800cc4a:	15ea      	asrs	r2, r5, #23
 800cc4c:	3a7f      	subs	r2, #127	; 0x7f
 800cc4e:	e7c8      	b.n	800cbe2 <__ieee754_fmodf+0x72>
 800cc50:	2b00      	cmp	r3, #0
 800cc52:	da02      	bge.n	800cc5a <__ieee754_fmodf+0xea>
 800cc54:	0049      	lsls	r1, r1, #1
 800cc56:	3801      	subs	r0, #1
 800cc58:	e7dc      	b.n	800cc14 <__ieee754_fmodf+0xa4>
 800cc5a:	d0ab      	beq.n	800cbb4 <__ieee754_fmodf+0x44>
 800cc5c:	0059      	lsls	r1, r3, #1
 800cc5e:	e7fa      	b.n	800cc56 <__ieee754_fmodf+0xe6>
 800cc60:	005b      	lsls	r3, r3, #1
 800cc62:	3a01      	subs	r2, #1
 800cc64:	e7df      	b.n	800cc26 <__ieee754_fmodf+0xb6>
 800cc66:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800cc6a:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800cc6e:	3282      	adds	r2, #130	; 0x82
 800cc70:	4113      	asrs	r3, r2
 800cc72:	4323      	orrs	r3, r4
 800cc74:	e796      	b.n	800cba4 <__ieee754_fmodf+0x34>
 800cc76:	bf00      	nop
 800cc78:	080734b0 	.word	0x080734b0
 800cc7c:	007fffff 	.word	0x007fffff

0800cc80 <__ieee754_logf>:
 800cc80:	ee10 3a10 	vmov	r3, s0
 800cc84:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800cc88:	d106      	bne.n	800cc98 <__ieee754_logf+0x18>
 800cc8a:	ed9f 7a65 	vldr	s14, [pc, #404]	; 800ce20 <__ieee754_logf+0x1a0>
 800cc8e:	eddf 7a65 	vldr	s15, [pc, #404]	; 800ce24 <__ieee754_logf+0x1a4>
 800cc92:	ee87 0a27 	vdiv.f32	s0, s14, s15
 800cc96:	4770      	bx	lr
 800cc98:	2b00      	cmp	r3, #0
 800cc9a:	da02      	bge.n	800cca2 <__ieee754_logf+0x22>
 800cc9c:	ee30 7a40 	vsub.f32	s14, s0, s0
 800cca0:	e7f5      	b.n	800cc8e <__ieee754_logf+0xe>
 800cca2:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800cca6:	db02      	blt.n	800ccae <__ieee754_logf+0x2e>
 800cca8:	ee30 0a00 	vadd.f32	s0, s0, s0
 800ccac:	4770      	bx	lr
 800ccae:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800ccb2:	bfbf      	itttt	lt
 800ccb4:	eddf 7a5c 	vldrlt	s15, [pc, #368]	; 800ce28 <__ieee754_logf+0x1a8>
 800ccb8:	ee60 7a27 	vmullt.f32	s15, s0, s15
 800ccbc:	f06f 0118 	mvnlt.w	r1, #24
 800ccc0:	ee17 3a90 	vmovlt	r3, s15
 800ccc4:	ea4f 52e3 	mov.w	r2, r3, asr #23
 800ccc8:	bfa8      	it	ge
 800ccca:	2100      	movge	r1, #0
 800cccc:	3a7f      	subs	r2, #127	; 0x7f
 800ccce:	440a      	add	r2, r1
 800ccd0:	4956      	ldr	r1, [pc, #344]	; (800ce2c <__ieee754_logf+0x1ac>)
 800ccd2:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800ccd6:	4419      	add	r1, r3
 800ccd8:	f401 0100 	and.w	r1, r1, #8388608	; 0x800000
 800ccdc:	eb02 52d1 	add.w	r2, r2, r1, lsr #23
 800cce0:	f081 517e 	eor.w	r1, r1, #1065353216	; 0x3f800000
 800cce4:	4319      	orrs	r1, r3
 800cce6:	ee07 1a90 	vmov	s15, r1
 800ccea:	f103 010f 	add.w	r1, r3, #15
 800ccee:	f3c1 0116 	ubfx	r1, r1, #0, #23
 800ccf2:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800ccf6:	290f      	cmp	r1, #15
 800ccf8:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800ccfc:	dc31      	bgt.n	800cd62 <__ieee754_logf+0xe2>
 800ccfe:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800cd02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800cd06:	d10f      	bne.n	800cd28 <__ieee754_logf+0xa8>
 800cd08:	2a00      	cmp	r2, #0
 800cd0a:	f000 8085 	beq.w	800ce18 <__ieee754_logf+0x198>
 800cd0e:	ee07 2a90 	vmov	s15, r2
 800cd12:	ed9f 0a47 	vldr	s0, [pc, #284]	; 800ce30 <__ieee754_logf+0x1b0>
 800cd16:	ed9f 7a47 	vldr	s14, [pc, #284]	; 800ce34 <__ieee754_logf+0x1b4>
 800cd1a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cd1e:	ee27 0a80 	vmul.f32	s0, s15, s0
 800cd22:	eea7 0a87 	vfma.f32	s0, s15, s14
 800cd26:	4770      	bx	lr
 800cd28:	eddf 7a43 	vldr	s15, [pc, #268]	; 800ce38 <__ieee754_logf+0x1b8>
 800cd2c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800cd30:	eea0 7a67 	vfms.f32	s14, s0, s15
 800cd34:	ee60 7a00 	vmul.f32	s15, s0, s0
 800cd38:	ee27 7a27 	vmul.f32	s14, s14, s15
 800cd3c:	b912      	cbnz	r2, 800cd44 <__ieee754_logf+0xc4>
 800cd3e:	ee30 0a47 	vsub.f32	s0, s0, s14
 800cd42:	4770      	bx	lr
 800cd44:	ee07 2a90 	vmov	s15, r2
 800cd48:	eddf 6a39 	vldr	s13, [pc, #228]	; 800ce30 <__ieee754_logf+0x1b0>
 800cd4c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cd50:	eea7 7ae6 	vfms.f32	s14, s15, s13
 800cd54:	ee37 0a40 	vsub.f32	s0, s14, s0
 800cd58:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800ce34 <__ieee754_logf+0x1b4>
 800cd5c:	ee97 0a87 	vfnms.f32	s0, s15, s14
 800cd60:	4770      	bx	lr
 800cd62:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 800cd66:	ee70 7a27 	vadd.f32	s15, s0, s15
 800cd6a:	eddf 5a34 	vldr	s11, [pc, #208]	; 800ce3c <__ieee754_logf+0x1bc>
 800cd6e:	eddf 4a34 	vldr	s9, [pc, #208]	; 800ce40 <__ieee754_logf+0x1c0>
 800cd72:	4934      	ldr	r1, [pc, #208]	; (800ce44 <__ieee754_logf+0x1c4>)
 800cd74:	ee80 6a27 	vdiv.f32	s12, s0, s15
 800cd78:	4419      	add	r1, r3
 800cd7a:	f5c3 1357 	rsb	r3, r3, #3522560	; 0x35c000
 800cd7e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800cd82:	430b      	orrs	r3, r1
 800cd84:	2b00      	cmp	r3, #0
 800cd86:	ee07 2a90 	vmov	s15, r2
 800cd8a:	ee26 5a06 	vmul.f32	s10, s12, s12
 800cd8e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800cd92:	ee25 7a05 	vmul.f32	s14, s10, s10
 800cd96:	eddf 7a2c 	vldr	s15, [pc, #176]	; 800ce48 <__ieee754_logf+0x1c8>
 800cd9a:	eee7 7a25 	vfma.f32	s15, s14, s11
 800cd9e:	eddf 5a2b 	vldr	s11, [pc, #172]	; 800ce4c <__ieee754_logf+0x1cc>
 800cda2:	eee7 5a87 	vfma.f32	s11, s15, s14
 800cda6:	eddf 7a2a 	vldr	s15, [pc, #168]	; 800ce50 <__ieee754_logf+0x1d0>
 800cdaa:	eee7 7a24 	vfma.f32	s15, s14, s9
 800cdae:	eddf 4a29 	vldr	s9, [pc, #164]	; 800ce54 <__ieee754_logf+0x1d4>
 800cdb2:	eee7 4a87 	vfma.f32	s9, s15, s14
 800cdb6:	eddf 7a28 	vldr	s15, [pc, #160]	; 800ce58 <__ieee754_logf+0x1d8>
 800cdba:	eee4 7a87 	vfma.f32	s15, s9, s14
 800cdbe:	ee67 7a85 	vmul.f32	s15, s15, s10
 800cdc2:	eee5 7a87 	vfma.f32	s15, s11, s14
 800cdc6:	dd1c      	ble.n	800ce02 <__ieee754_logf+0x182>
 800cdc8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800cdcc:	ee20 7a07 	vmul.f32	s14, s0, s14
 800cdd0:	ee27 7a00 	vmul.f32	s14, s14, s0
 800cdd4:	ee77 7a87 	vadd.f32	s15, s15, s14
 800cdd8:	ee67 7a86 	vmul.f32	s15, s15, s12
 800cddc:	b922      	cbnz	r2, 800cde8 <__ieee754_logf+0x168>
 800cdde:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cde2:	ee30 0a67 	vsub.f32	s0, s0, s15
 800cde6:	4770      	bx	lr
 800cde8:	ed9f 6a11 	vldr	s12, [pc, #68]	; 800ce30 <__ieee754_logf+0x1b0>
 800cdec:	eee6 7a86 	vfma.f32	s15, s13, s12
 800cdf0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cdf4:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800cdf8:	eddf 7a0e 	vldr	s15, [pc, #56]	; 800ce34 <__ieee754_logf+0x1b4>
 800cdfc:	ee96 0aa7 	vfnms.f32	s0, s13, s15
 800ce00:	4770      	bx	lr
 800ce02:	ee70 7a67 	vsub.f32	s15, s0, s15
 800ce06:	ee67 7a86 	vmul.f32	s15, s15, s12
 800ce0a:	2a00      	cmp	r2, #0
 800ce0c:	d0e9      	beq.n	800cde2 <__ieee754_logf+0x162>
 800ce0e:	ed9f 7a08 	vldr	s14, [pc, #32]	; 800ce30 <__ieee754_logf+0x1b0>
 800ce12:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800ce16:	e7ed      	b.n	800cdf4 <__ieee754_logf+0x174>
 800ce18:	ed9f 0a02 	vldr	s0, [pc, #8]	; 800ce24 <__ieee754_logf+0x1a4>
 800ce1c:	4770      	bx	lr
 800ce1e:	bf00      	nop
 800ce20:	cc000000 	.word	0xcc000000
 800ce24:	00000000 	.word	0x00000000
 800ce28:	4c000000 	.word	0x4c000000
 800ce2c:	004afb20 	.word	0x004afb20
 800ce30:	3717f7d1 	.word	0x3717f7d1
 800ce34:	3f317180 	.word	0x3f317180
 800ce38:	3eaaaaab 	.word	0x3eaaaaab
 800ce3c:	3e1cd04f 	.word	0x3e1cd04f
 800ce40:	3e178897 	.word	0x3e178897
 800ce44:	ffcf5c30 	.word	0xffcf5c30
 800ce48:	3e638e29 	.word	0x3e638e29
 800ce4c:	3ecccccd 	.word	0x3ecccccd
 800ce50:	3e3a3325 	.word	0x3e3a3325
 800ce54:	3e924925 	.word	0x3e924925
 800ce58:	3f2aaaab 	.word	0x3f2aaaab

0800ce5c <__ieee754_powf>:
 800ce5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce60:	ee10 5a90 	vmov	r5, s1
 800ce64:	f035 4700 	bics.w	r7, r5, #2147483648	; 0x80000000
 800ce68:	ed2d 8b02 	vpush	{d8}
 800ce6c:	eeb0 8a40 	vmov.f32	s16, s0
 800ce70:	eef0 8a60 	vmov.f32	s17, s1
 800ce74:	f000 8293 	beq.w	800d39e <__ieee754_powf+0x542>
 800ce78:	ee10 8a10 	vmov	r8, s0
 800ce7c:	f028 4400 	bic.w	r4, r8, #2147483648	; 0x80000000
 800ce80:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800ce84:	dc06      	bgt.n	800ce94 <__ieee754_powf+0x38>
 800ce86:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 800ce8a:	dd0a      	ble.n	800cea2 <__ieee754_powf+0x46>
 800ce8c:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 800ce90:	f000 8285 	beq.w	800d39e <__ieee754_powf+0x542>
 800ce94:	ecbd 8b02 	vpop	{d8}
 800ce98:	48d9      	ldr	r0, [pc, #868]	; (800d200 <__ieee754_powf+0x3a4>)
 800ce9a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ce9e:	f001 b989 	b.w	800e1b4 <nanf>
 800cea2:	f1b8 0f00 	cmp.w	r8, #0
 800cea6:	da1d      	bge.n	800cee4 <__ieee754_powf+0x88>
 800cea8:	f1b7 4f97 	cmp.w	r7, #1266679808	; 0x4b800000
 800ceac:	da2c      	bge.n	800cf08 <__ieee754_powf+0xac>
 800ceae:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 800ceb2:	db30      	blt.n	800cf16 <__ieee754_powf+0xba>
 800ceb4:	15fb      	asrs	r3, r7, #23
 800ceb6:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 800ceba:	fa47 f603 	asr.w	r6, r7, r3
 800cebe:	fa06 f303 	lsl.w	r3, r6, r3
 800cec2:	42bb      	cmp	r3, r7
 800cec4:	d127      	bne.n	800cf16 <__ieee754_powf+0xba>
 800cec6:	f006 0601 	and.w	r6, r6, #1
 800ceca:	f1c6 0602 	rsb	r6, r6, #2
 800cece:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 800ced2:	d122      	bne.n	800cf1a <__ieee754_powf+0xbe>
 800ced4:	2d00      	cmp	r5, #0
 800ced6:	f280 8268 	bge.w	800d3aa <__ieee754_powf+0x54e>
 800ceda:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800cede:	ee87 0a88 	vdiv.f32	s0, s15, s16
 800cee2:	e00d      	b.n	800cf00 <__ieee754_powf+0xa4>
 800cee4:	2600      	movs	r6, #0
 800cee6:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 800ceea:	d1f0      	bne.n	800cece <__ieee754_powf+0x72>
 800ceec:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 800cef0:	f000 8255 	beq.w	800d39e <__ieee754_powf+0x542>
 800cef4:	dd0a      	ble.n	800cf0c <__ieee754_powf+0xb0>
 800cef6:	2d00      	cmp	r5, #0
 800cef8:	f280 8254 	bge.w	800d3a4 <__ieee754_powf+0x548>
 800cefc:	ed9f 0ac1 	vldr	s0, [pc, #772]	; 800d204 <__ieee754_powf+0x3a8>
 800cf00:	ecbd 8b02 	vpop	{d8}
 800cf04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cf08:	2602      	movs	r6, #2
 800cf0a:	e7ec      	b.n	800cee6 <__ieee754_powf+0x8a>
 800cf0c:	2d00      	cmp	r5, #0
 800cf0e:	daf5      	bge.n	800cefc <__ieee754_powf+0xa0>
 800cf10:	eeb1 0a68 	vneg.f32	s0, s17
 800cf14:	e7f4      	b.n	800cf00 <__ieee754_powf+0xa4>
 800cf16:	2600      	movs	r6, #0
 800cf18:	e7d9      	b.n	800cece <__ieee754_powf+0x72>
 800cf1a:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 800cf1e:	d102      	bne.n	800cf26 <__ieee754_powf+0xca>
 800cf20:	ee28 0a08 	vmul.f32	s0, s16, s16
 800cf24:	e7ec      	b.n	800cf00 <__ieee754_powf+0xa4>
 800cf26:	f1b5 5f7c 	cmp.w	r5, #1056964608	; 0x3f000000
 800cf2a:	eeb0 0a48 	vmov.f32	s0, s16
 800cf2e:	d108      	bne.n	800cf42 <__ieee754_powf+0xe6>
 800cf30:	f1b8 0f00 	cmp.w	r8, #0
 800cf34:	db05      	blt.n	800cf42 <__ieee754_powf+0xe6>
 800cf36:	ecbd 8b02 	vpop	{d8}
 800cf3a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cf3e:	f000 bbe7 	b.w	800d710 <__ieee754_sqrtf>
 800cf42:	f7fe fb41 	bl	800b5c8 <fabsf>
 800cf46:	b124      	cbz	r4, 800cf52 <__ieee754_powf+0xf6>
 800cf48:	f028 4340 	bic.w	r3, r8, #3221225472	; 0xc0000000
 800cf4c:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 800cf50:	d117      	bne.n	800cf82 <__ieee754_powf+0x126>
 800cf52:	2d00      	cmp	r5, #0
 800cf54:	bfbc      	itt	lt
 800cf56:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 800cf5a:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 800cf5e:	f1b8 0f00 	cmp.w	r8, #0
 800cf62:	dacd      	bge.n	800cf00 <__ieee754_powf+0xa4>
 800cf64:	f1a4 547e 	sub.w	r4, r4, #1065353216	; 0x3f800000
 800cf68:	ea54 0306 	orrs.w	r3, r4, r6
 800cf6c:	d104      	bne.n	800cf78 <__ieee754_powf+0x11c>
 800cf6e:	ee70 7a40 	vsub.f32	s15, s0, s0
 800cf72:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800cf76:	e7c3      	b.n	800cf00 <__ieee754_powf+0xa4>
 800cf78:	2e01      	cmp	r6, #1
 800cf7a:	d1c1      	bne.n	800cf00 <__ieee754_powf+0xa4>
 800cf7c:	eeb1 0a40 	vneg.f32	s0, s0
 800cf80:	e7be      	b.n	800cf00 <__ieee754_powf+0xa4>
 800cf82:	ea4f 70d8 	mov.w	r0, r8, lsr #31
 800cf86:	3801      	subs	r0, #1
 800cf88:	ea56 0300 	orrs.w	r3, r6, r0
 800cf8c:	d104      	bne.n	800cf98 <__ieee754_powf+0x13c>
 800cf8e:	ee38 8a48 	vsub.f32	s16, s16, s16
 800cf92:	ee88 0a08 	vdiv.f32	s0, s16, s16
 800cf96:	e7b3      	b.n	800cf00 <__ieee754_powf+0xa4>
 800cf98:	f1b7 4f9a 	cmp.w	r7, #1291845632	; 0x4d000000
 800cf9c:	dd6d      	ble.n	800d07a <__ieee754_powf+0x21e>
 800cf9e:	4b9a      	ldr	r3, [pc, #616]	; (800d208 <__ieee754_powf+0x3ac>)
 800cfa0:	429c      	cmp	r4, r3
 800cfa2:	dc06      	bgt.n	800cfb2 <__ieee754_powf+0x156>
 800cfa4:	2d00      	cmp	r5, #0
 800cfa6:	daa9      	bge.n	800cefc <__ieee754_powf+0xa0>
 800cfa8:	ed9f 0a98 	vldr	s0, [pc, #608]	; 800d20c <__ieee754_powf+0x3b0>
 800cfac:	ee20 0a00 	vmul.f32	s0, s0, s0
 800cfb0:	e7a6      	b.n	800cf00 <__ieee754_powf+0xa4>
 800cfb2:	4b97      	ldr	r3, [pc, #604]	; (800d210 <__ieee754_powf+0x3b4>)
 800cfb4:	429c      	cmp	r4, r3
 800cfb6:	dd02      	ble.n	800cfbe <__ieee754_powf+0x162>
 800cfb8:	2d00      	cmp	r5, #0
 800cfba:	dcf5      	bgt.n	800cfa8 <__ieee754_powf+0x14c>
 800cfbc:	e79e      	b.n	800cefc <__ieee754_powf+0xa0>
 800cfbe:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800cfc2:	ee30 0a67 	vsub.f32	s0, s0, s15
 800cfc6:	ed9f 7a93 	vldr	s14, [pc, #588]	; 800d214 <__ieee754_powf+0x3b8>
 800cfca:	eef1 6a40 	vneg.f32	s13, s0
 800cfce:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 800cfd2:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800cfd6:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800cfda:	eee7 7a40 	vfms.f32	s15, s14, s0
 800cfde:	ee60 0a00 	vmul.f32	s1, s0, s0
 800cfe2:	ed9f 7a8d 	vldr	s14, [pc, #564]	; 800d218 <__ieee754_powf+0x3bc>
 800cfe6:	ee67 0aa0 	vmul.f32	s1, s15, s1
 800cfea:	eddf 7a8c 	vldr	s15, [pc, #560]	; 800d21c <__ieee754_powf+0x3c0>
 800cfee:	ee67 7ae0 	vnmul.f32	s15, s15, s1
 800cff2:	eee0 7a07 	vfma.f32	s15, s0, s14
 800cff6:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 800d220 <__ieee754_powf+0x3c4>
 800cffa:	eeb0 6a67 	vmov.f32	s12, s15
 800cffe:	eea0 6a07 	vfma.f32	s12, s0, s14
 800d002:	ee16 3a10 	vmov	r3, s12
 800d006:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800d00a:	f023 030f 	bic.w	r3, r3, #15
 800d00e:	ee00 3a90 	vmov	s1, r3
 800d012:	eee6 0a87 	vfma.f32	s1, s13, s14
 800d016:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800d01a:	f425 657f 	bic.w	r5, r5, #4080	; 0xff0
 800d01e:	f025 050f 	bic.w	r5, r5, #15
 800d022:	ee07 5a10 	vmov	s14, r5
 800d026:	ee67 0aa8 	vmul.f32	s1, s15, s17
 800d02a:	ee38 7ac7 	vsub.f32	s14, s17, s14
 800d02e:	ee07 3a90 	vmov	s15, r3
 800d032:	eee7 0a27 	vfma.f32	s1, s14, s15
 800d036:	3e01      	subs	r6, #1
 800d038:	ea56 0200 	orrs.w	r2, r6, r0
 800d03c:	ee07 5a10 	vmov	s14, r5
 800d040:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d044:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 800d048:	ee30 7aa7 	vadd.f32	s14, s1, s15
 800d04c:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 800d050:	ee17 4a10 	vmov	r4, s14
 800d054:	bf08      	it	eq
 800d056:	eeb0 8a40 	vmoveq.f32	s16, s0
 800d05a:	2c00      	cmp	r4, #0
 800d05c:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800d060:	f340 8184 	ble.w	800d36c <__ieee754_powf+0x510>
 800d064:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 800d068:	f340 80fc 	ble.w	800d264 <__ieee754_powf+0x408>
 800d06c:	eddf 7a67 	vldr	s15, [pc, #412]	; 800d20c <__ieee754_powf+0x3b0>
 800d070:	ee28 0a27 	vmul.f32	s0, s16, s15
 800d074:	ee20 0a27 	vmul.f32	s0, s0, s15
 800d078:	e742      	b.n	800cf00 <__ieee754_powf+0xa4>
 800d07a:	f5b4 0f00 	cmp.w	r4, #8388608	; 0x800000
 800d07e:	bfbf      	itttt	lt
 800d080:	eddf 7a68 	vldrlt	s15, [pc, #416]	; 800d224 <__ieee754_powf+0x3c8>
 800d084:	ee60 7a27 	vmullt.f32	s15, s0, s15
 800d088:	f06f 0217 	mvnlt.w	r2, #23
 800d08c:	ee17 4a90 	vmovlt	r4, s15
 800d090:	ea4f 53e4 	mov.w	r3, r4, asr #23
 800d094:	bfa8      	it	ge
 800d096:	2200      	movge	r2, #0
 800d098:	3b7f      	subs	r3, #127	; 0x7f
 800d09a:	4413      	add	r3, r2
 800d09c:	4a62      	ldr	r2, [pc, #392]	; (800d228 <__ieee754_powf+0x3cc>)
 800d09e:	f3c4 0416 	ubfx	r4, r4, #0, #23
 800d0a2:	4294      	cmp	r4, r2
 800d0a4:	f044 517e 	orr.w	r1, r4, #1065353216	; 0x3f800000
 800d0a8:	dd06      	ble.n	800d0b8 <__ieee754_powf+0x25c>
 800d0aa:	4a60      	ldr	r2, [pc, #384]	; (800d22c <__ieee754_powf+0x3d0>)
 800d0ac:	4294      	cmp	r4, r2
 800d0ae:	f340 80a5 	ble.w	800d1fc <__ieee754_powf+0x3a0>
 800d0b2:	3301      	adds	r3, #1
 800d0b4:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 800d0b8:	2400      	movs	r4, #0
 800d0ba:	4a5d      	ldr	r2, [pc, #372]	; (800d230 <__ieee754_powf+0x3d4>)
 800d0bc:	00a7      	lsls	r7, r4, #2
 800d0be:	443a      	add	r2, r7
 800d0c0:	ee07 1a90 	vmov	s15, r1
 800d0c4:	ed92 7a00 	vldr	s14, [r2]
 800d0c8:	4a5a      	ldr	r2, [pc, #360]	; (800d234 <__ieee754_powf+0x3d8>)
 800d0ca:	ee37 6a27 	vadd.f32	s12, s14, s15
 800d0ce:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 800d0d2:	eec5 6a06 	vdiv.f32	s13, s10, s12
 800d0d6:	1049      	asrs	r1, r1, #1
 800d0d8:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 800d0dc:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 800d0e0:	eb01 5144 	add.w	r1, r1, r4, lsl #21
 800d0e4:	ee77 5ac7 	vsub.f32	s11, s15, s14
 800d0e8:	ee06 1a10 	vmov	s12, r1
 800d0ec:	ee65 4aa6 	vmul.f32	s9, s11, s13
 800d0f0:	ee14 ca90 	vmov	ip, s9
 800d0f4:	ea02 0c0c 	and.w	ip, r2, ip
 800d0f8:	ee05 ca10 	vmov	s10, ip
 800d0fc:	eeb1 4a45 	vneg.f32	s8, s10
 800d100:	eee4 5a06 	vfma.f32	s11, s8, s12
 800d104:	ee36 6a47 	vsub.f32	s12, s12, s14
 800d108:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 800d238 <__ieee754_powf+0x3dc>
 800d10c:	ee37 6ac6 	vsub.f32	s12, s15, s12
 800d110:	ee64 7aa4 	vmul.f32	s15, s9, s9
 800d114:	eee4 5a06 	vfma.f32	s11, s8, s12
 800d118:	ee67 3aa7 	vmul.f32	s7, s15, s15
 800d11c:	ee25 6aa6 	vmul.f32	s12, s11, s13
 800d120:	eddf 5a46 	vldr	s11, [pc, #280]	; 800d23c <__ieee754_powf+0x3e0>
 800d124:	eea7 7aa5 	vfma.f32	s14, s15, s11
 800d128:	eddf 5a45 	vldr	s11, [pc, #276]	; 800d240 <__ieee754_powf+0x3e4>
 800d12c:	eee7 5a27 	vfma.f32	s11, s14, s15
 800d130:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800d214 <__ieee754_powf+0x3b8>
 800d134:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800d138:	eddf 5a42 	vldr	s11, [pc, #264]	; 800d244 <__ieee754_powf+0x3e8>
 800d13c:	eee7 5a27 	vfma.f32	s11, s14, s15
 800d140:	ed9f 7a41 	vldr	s14, [pc, #260]	; 800d248 <__ieee754_powf+0x3ec>
 800d144:	ee75 6a24 	vadd.f32	s13, s10, s9
 800d148:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800d14c:	ee66 6a86 	vmul.f32	s13, s13, s12
 800d150:	eef0 5a08 	vmov.f32	s11, #8	; 0x40400000  3.0
 800d154:	eef0 7a65 	vmov.f32	s15, s11
 800d158:	eee3 6a87 	vfma.f32	s13, s7, s14
 800d15c:	eee5 7a05 	vfma.f32	s15, s10, s10
 800d160:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d164:	ee17 1a90 	vmov	r1, s15
 800d168:	4011      	ands	r1, r2
 800d16a:	ee07 1a90 	vmov	s15, r1
 800d16e:	ee37 7ae5 	vsub.f32	s14, s15, s11
 800d172:	eddf 5a36 	vldr	s11, [pc, #216]	; 800d24c <__ieee754_powf+0x3f0>
 800d176:	eea4 7a05 	vfma.f32	s14, s8, s10
 800d17a:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800d17e:	ee27 7a24 	vmul.f32	s14, s14, s9
 800d182:	eea7 7a86 	vfma.f32	s14, s15, s12
 800d186:	eeb0 6a47 	vmov.f32	s12, s14
 800d18a:	eea5 6a27 	vfma.f32	s12, s10, s15
 800d18e:	ee16 1a10 	vmov	r1, s12
 800d192:	4011      	ands	r1, r2
 800d194:	ee06 1a90 	vmov	s13, r1
 800d198:	eee4 6a27 	vfma.f32	s13, s8, s15
 800d19c:	eddf 7a2c 	vldr	s15, [pc, #176]	; 800d250 <__ieee754_powf+0x3f4>
 800d1a0:	ee37 7a66 	vsub.f32	s14, s14, s13
 800d1a4:	ee06 1a10 	vmov	s12, r1
 800d1a8:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d1ac:	eddf 7a29 	vldr	s15, [pc, #164]	; 800d254 <__ieee754_powf+0x3f8>
 800d1b0:	4929      	ldr	r1, [pc, #164]	; (800d258 <__ieee754_powf+0x3fc>)
 800d1b2:	eea6 7a27 	vfma.f32	s14, s12, s15
 800d1b6:	4439      	add	r1, r7
 800d1b8:	edd1 7a00 	vldr	s15, [r1]
 800d1bc:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d1c0:	ee07 3a90 	vmov	s15, r3
 800d1c4:	eef0 0a47 	vmov.f32	s1, s14
 800d1c8:	4b24      	ldr	r3, [pc, #144]	; (800d25c <__ieee754_powf+0x400>)
 800d1ca:	eee6 0a25 	vfma.f32	s1, s12, s11
 800d1ce:	443b      	add	r3, r7
 800d1d0:	ed93 5a00 	vldr	s10, [r3]
 800d1d4:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800d1d8:	ee70 0a85 	vadd.f32	s1, s1, s10
 800d1dc:	ee70 7aa6 	vadd.f32	s15, s1, s13
 800d1e0:	ee17 3a90 	vmov	r3, s15
 800d1e4:	4013      	ands	r3, r2
 800d1e6:	ee07 3a90 	vmov	s15, r3
 800d1ea:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800d1ee:	ee77 7ac5 	vsub.f32	s15, s15, s10
 800d1f2:	eee6 7a65 	vfms.f32	s15, s12, s11
 800d1f6:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d1fa:	e70e      	b.n	800d01a <__ieee754_powf+0x1be>
 800d1fc:	2401      	movs	r4, #1
 800d1fe:	e75c      	b.n	800d0ba <__ieee754_powf+0x25e>
 800d200:	08073484 	.word	0x08073484
 800d204:	00000000 	.word	0x00000000
 800d208:	3f7ffff7 	.word	0x3f7ffff7
 800d20c:	7149f2ca 	.word	0x7149f2ca
 800d210:	3f800007 	.word	0x3f800007
 800d214:	3eaaaaab 	.word	0x3eaaaaab
 800d218:	36eca570 	.word	0x36eca570
 800d21c:	3fb8aa3b 	.word	0x3fb8aa3b
 800d220:	3fb8aa00 	.word	0x3fb8aa00
 800d224:	4b800000 	.word	0x4b800000
 800d228:	001cc471 	.word	0x001cc471
 800d22c:	005db3d6 	.word	0x005db3d6
 800d230:	080734b8 	.word	0x080734b8
 800d234:	fffff000 	.word	0xfffff000
 800d238:	3e6c3255 	.word	0x3e6c3255
 800d23c:	3e53f142 	.word	0x3e53f142
 800d240:	3e8ba305 	.word	0x3e8ba305
 800d244:	3edb6db7 	.word	0x3edb6db7
 800d248:	3f19999a 	.word	0x3f19999a
 800d24c:	3f763800 	.word	0x3f763800
 800d250:	3f76384f 	.word	0x3f76384f
 800d254:	369dc3a0 	.word	0x369dc3a0
 800d258:	080734c8 	.word	0x080734c8
 800d25c:	080734c0 	.word	0x080734c0
 800d260:	3338aa3c 	.word	0x3338aa3c
 800d264:	f040 8092 	bne.w	800d38c <__ieee754_powf+0x530>
 800d268:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 800d260 <__ieee754_powf+0x404>
 800d26c:	ee37 7a67 	vsub.f32	s14, s14, s15
 800d270:	ee70 6aa6 	vadd.f32	s13, s1, s13
 800d274:	eef4 6ac7 	vcmpe.f32	s13, s14
 800d278:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d27c:	f73f aef6 	bgt.w	800d06c <__ieee754_powf+0x210>
 800d280:	15db      	asrs	r3, r3, #23
 800d282:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 800d286:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800d28a:	4103      	asrs	r3, r0
 800d28c:	4423      	add	r3, r4
 800d28e:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800d292:	4947      	ldr	r1, [pc, #284]	; (800d3b0 <__ieee754_powf+0x554>)
 800d294:	3a7f      	subs	r2, #127	; 0x7f
 800d296:	4111      	asrs	r1, r2
 800d298:	ea23 0101 	bic.w	r1, r3, r1
 800d29c:	f3c3 0016 	ubfx	r0, r3, #0, #23
 800d2a0:	ee07 1a10 	vmov	s14, r1
 800d2a4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800d2a8:	f1c2 0217 	rsb	r2, r2, #23
 800d2ac:	4110      	asrs	r0, r2
 800d2ae:	2c00      	cmp	r4, #0
 800d2b0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d2b4:	bfb8      	it	lt
 800d2b6:	4240      	neglt	r0, r0
 800d2b8:	ee37 7aa0 	vadd.f32	s14, s15, s1
 800d2bc:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800d3b4 <__ieee754_powf+0x558>
 800d2c0:	ee17 3a10 	vmov	r3, s14
 800d2c4:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800d2c8:	f023 030f 	bic.w	r3, r3, #15
 800d2cc:	ee07 3a10 	vmov	s14, r3
 800d2d0:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d2d4:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800d2d8:	eddf 7a37 	vldr	s15, [pc, #220]	; 800d3b8 <__ieee754_powf+0x55c>
 800d2dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d2e0:	eee0 7aa6 	vfma.f32	s15, s1, s13
 800d2e4:	eddf 6a35 	vldr	s13, [pc, #212]	; 800d3bc <__ieee754_powf+0x560>
 800d2e8:	eeb0 0a67 	vmov.f32	s0, s15
 800d2ec:	eea7 0a26 	vfma.f32	s0, s14, s13
 800d2f0:	eeb0 6a40 	vmov.f32	s12, s0
 800d2f4:	eea7 6a66 	vfms.f32	s12, s14, s13
 800d2f8:	ee20 7a00 	vmul.f32	s14, s0, s0
 800d2fc:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800d300:	eddf 6a2f 	vldr	s13, [pc, #188]	; 800d3c0 <__ieee754_powf+0x564>
 800d304:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 800d3c4 <__ieee754_powf+0x568>
 800d308:	eea7 6a26 	vfma.f32	s12, s14, s13
 800d30c:	eddf 6a2e 	vldr	s13, [pc, #184]	; 800d3c8 <__ieee754_powf+0x56c>
 800d310:	eee6 6a07 	vfma.f32	s13, s12, s14
 800d314:	ed9f 6a2d 	vldr	s12, [pc, #180]	; 800d3cc <__ieee754_powf+0x570>
 800d318:	eea6 6a87 	vfma.f32	s12, s13, s14
 800d31c:	eddf 6a2c 	vldr	s13, [pc, #176]	; 800d3d0 <__ieee754_powf+0x574>
 800d320:	eee6 6a07 	vfma.f32	s13, s12, s14
 800d324:	eeb0 6a40 	vmov.f32	s12, s0
 800d328:	eea6 6ac7 	vfms.f32	s12, s13, s14
 800d32c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800d330:	eeb0 7a46 	vmov.f32	s14, s12
 800d334:	ee77 6a66 	vsub.f32	s13, s14, s13
 800d338:	ee20 6a06 	vmul.f32	s12, s0, s12
 800d33c:	eee0 7a27 	vfma.f32	s15, s0, s15
 800d340:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800d344:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d348:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800d34c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800d350:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800d354:	ee10 3a10 	vmov	r3, s0
 800d358:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 800d35c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800d360:	da1a      	bge.n	800d398 <__ieee754_powf+0x53c>
 800d362:	f000 ff87 	bl	800e274 <scalbnf>
 800d366:	ee20 0a08 	vmul.f32	s0, s0, s16
 800d36a:	e5c9      	b.n	800cf00 <__ieee754_powf+0xa4>
 800d36c:	4a19      	ldr	r2, [pc, #100]	; (800d3d4 <__ieee754_powf+0x578>)
 800d36e:	4293      	cmp	r3, r2
 800d370:	dd02      	ble.n	800d378 <__ieee754_powf+0x51c>
 800d372:	eddf 7a19 	vldr	s15, [pc, #100]	; 800d3d8 <__ieee754_powf+0x57c>
 800d376:	e67b      	b.n	800d070 <__ieee754_powf+0x214>
 800d378:	d108      	bne.n	800d38c <__ieee754_powf+0x530>
 800d37a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800d37e:	eeb4 7ae0 	vcmpe.f32	s14, s1
 800d382:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d386:	f6ff af7b 	blt.w	800d280 <__ieee754_powf+0x424>
 800d38a:	e7f2      	b.n	800d372 <__ieee754_powf+0x516>
 800d38c:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 800d390:	f73f af76 	bgt.w	800d280 <__ieee754_powf+0x424>
 800d394:	2000      	movs	r0, #0
 800d396:	e78f      	b.n	800d2b8 <__ieee754_powf+0x45c>
 800d398:	ee00 3a10 	vmov	s0, r3
 800d39c:	e7e3      	b.n	800d366 <__ieee754_powf+0x50a>
 800d39e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800d3a2:	e5ad      	b.n	800cf00 <__ieee754_powf+0xa4>
 800d3a4:	eeb0 0a68 	vmov.f32	s0, s17
 800d3a8:	e5aa      	b.n	800cf00 <__ieee754_powf+0xa4>
 800d3aa:	eeb0 0a48 	vmov.f32	s0, s16
 800d3ae:	e5a7      	b.n	800cf00 <__ieee754_powf+0xa4>
 800d3b0:	007fffff 	.word	0x007fffff
 800d3b4:	3f317218 	.word	0x3f317218
 800d3b8:	35bfbe8c 	.word	0x35bfbe8c
 800d3bc:	3f317200 	.word	0x3f317200
 800d3c0:	3331bb4c 	.word	0x3331bb4c
 800d3c4:	b5ddea0e 	.word	0xb5ddea0e
 800d3c8:	388ab355 	.word	0x388ab355
 800d3cc:	bb360b61 	.word	0xbb360b61
 800d3d0:	3e2aaaab 	.word	0x3e2aaaab
 800d3d4:	43160000 	.word	0x43160000
 800d3d8:	0da24260 	.word	0x0da24260

0800d3dc <__ieee754_rem_pio2f>:
 800d3dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d3de:	ee10 6a10 	vmov	r6, s0
 800d3e2:	4b86      	ldr	r3, [pc, #536]	; (800d5fc <__ieee754_rem_pio2f+0x220>)
 800d3e4:	f026 4400 	bic.w	r4, r6, #2147483648	; 0x80000000
 800d3e8:	429c      	cmp	r4, r3
 800d3ea:	b087      	sub	sp, #28
 800d3ec:	4605      	mov	r5, r0
 800d3ee:	dc05      	bgt.n	800d3fc <__ieee754_rem_pio2f+0x20>
 800d3f0:	2300      	movs	r3, #0
 800d3f2:	ed85 0a00 	vstr	s0, [r5]
 800d3f6:	6043      	str	r3, [r0, #4]
 800d3f8:	2000      	movs	r0, #0
 800d3fa:	e020      	b.n	800d43e <__ieee754_rem_pio2f+0x62>
 800d3fc:	4b80      	ldr	r3, [pc, #512]	; (800d600 <__ieee754_rem_pio2f+0x224>)
 800d3fe:	429c      	cmp	r4, r3
 800d400:	dc38      	bgt.n	800d474 <__ieee754_rem_pio2f+0x98>
 800d402:	2e00      	cmp	r6, #0
 800d404:	f024 040f 	bic.w	r4, r4, #15
 800d408:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 800d604 <__ieee754_rem_pio2f+0x228>
 800d40c:	4b7e      	ldr	r3, [pc, #504]	; (800d608 <__ieee754_rem_pio2f+0x22c>)
 800d40e:	dd18      	ble.n	800d442 <__ieee754_rem_pio2f+0x66>
 800d410:	429c      	cmp	r4, r3
 800d412:	ee70 7a47 	vsub.f32	s15, s0, s14
 800d416:	bf09      	itett	eq
 800d418:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 800d60c <__ieee754_rem_pio2f+0x230>
 800d41c:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 800d610 <__ieee754_rem_pio2f+0x234>
 800d420:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 800d424:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 800d614 <__ieee754_rem_pio2f+0x238>
 800d428:	ee77 6ac7 	vsub.f32	s13, s15, s14
 800d42c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800d430:	edc0 6a00 	vstr	s13, [r0]
 800d434:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d438:	edc0 7a01 	vstr	s15, [r0, #4]
 800d43c:	2001      	movs	r0, #1
 800d43e:	b007      	add	sp, #28
 800d440:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d442:	429c      	cmp	r4, r3
 800d444:	ee70 7a07 	vadd.f32	s15, s0, s14
 800d448:	bf09      	itett	eq
 800d44a:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 800d60c <__ieee754_rem_pio2f+0x230>
 800d44e:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 800d610 <__ieee754_rem_pio2f+0x234>
 800d452:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 800d456:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 800d614 <__ieee754_rem_pio2f+0x238>
 800d45a:	ee77 6a87 	vadd.f32	s13, s15, s14
 800d45e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800d462:	edc0 6a00 	vstr	s13, [r0]
 800d466:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d46a:	edc0 7a01 	vstr	s15, [r0, #4]
 800d46e:	f04f 30ff 	mov.w	r0, #4294967295
 800d472:	e7e4      	b.n	800d43e <__ieee754_rem_pio2f+0x62>
 800d474:	4b68      	ldr	r3, [pc, #416]	; (800d618 <__ieee754_rem_pio2f+0x23c>)
 800d476:	429c      	cmp	r4, r3
 800d478:	dc71      	bgt.n	800d55e <__ieee754_rem_pio2f+0x182>
 800d47a:	f7fe f8a5 	bl	800b5c8 <fabsf>
 800d47e:	ed9f 7a67 	vldr	s14, [pc, #412]	; 800d61c <__ieee754_rem_pio2f+0x240>
 800d482:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800d486:	eee0 7a07 	vfma.f32	s15, s0, s14
 800d48a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d48e:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 800d492:	ee17 0a90 	vmov	r0, s15
 800d496:	eddf 7a5b 	vldr	s15, [pc, #364]	; 800d604 <__ieee754_rem_pio2f+0x228>
 800d49a:	eeb1 7a46 	vneg.f32	s14, s12
 800d49e:	eea7 0a27 	vfma.f32	s0, s14, s15
 800d4a2:	281f      	cmp	r0, #31
 800d4a4:	eddf 7a5a 	vldr	s15, [pc, #360]	; 800d610 <__ieee754_rem_pio2f+0x234>
 800d4a8:	ee66 7a27 	vmul.f32	s15, s12, s15
 800d4ac:	ee70 6a67 	vsub.f32	s13, s0, s15
 800d4b0:	ee16 3a90 	vmov	r3, s13
 800d4b4:	dc1c      	bgt.n	800d4f0 <__ieee754_rem_pio2f+0x114>
 800d4b6:	1e47      	subs	r7, r0, #1
 800d4b8:	4959      	ldr	r1, [pc, #356]	; (800d620 <__ieee754_rem_pio2f+0x244>)
 800d4ba:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 800d4be:	f024 02ff 	bic.w	r2, r4, #255	; 0xff
 800d4c2:	428a      	cmp	r2, r1
 800d4c4:	d014      	beq.n	800d4f0 <__ieee754_rem_pio2f+0x114>
 800d4c6:	602b      	str	r3, [r5, #0]
 800d4c8:	ed95 7a00 	vldr	s14, [r5]
 800d4cc:	ee30 0a47 	vsub.f32	s0, s0, s14
 800d4d0:	2e00      	cmp	r6, #0
 800d4d2:	ee30 0a67 	vsub.f32	s0, s0, s15
 800d4d6:	ed85 0a01 	vstr	s0, [r5, #4]
 800d4da:	dab0      	bge.n	800d43e <__ieee754_rem_pio2f+0x62>
 800d4dc:	eeb1 7a47 	vneg.f32	s14, s14
 800d4e0:	eeb1 0a40 	vneg.f32	s0, s0
 800d4e4:	ed85 7a00 	vstr	s14, [r5]
 800d4e8:	ed85 0a01 	vstr	s0, [r5, #4]
 800d4ec:	4240      	negs	r0, r0
 800d4ee:	e7a6      	b.n	800d43e <__ieee754_rem_pio2f+0x62>
 800d4f0:	15e4      	asrs	r4, r4, #23
 800d4f2:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800d4f6:	1aa2      	subs	r2, r4, r2
 800d4f8:	2a08      	cmp	r2, #8
 800d4fa:	dde4      	ble.n	800d4c6 <__ieee754_rem_pio2f+0xea>
 800d4fc:	eddf 7a43 	vldr	s15, [pc, #268]	; 800d60c <__ieee754_rem_pio2f+0x230>
 800d500:	eef0 6a40 	vmov.f32	s13, s0
 800d504:	eee7 6a27 	vfma.f32	s13, s14, s15
 800d508:	ee30 0a66 	vsub.f32	s0, s0, s13
 800d50c:	eea7 0a27 	vfma.f32	s0, s14, s15
 800d510:	eddf 7a40 	vldr	s15, [pc, #256]	; 800d614 <__ieee754_rem_pio2f+0x238>
 800d514:	ee96 0a27 	vfnms.f32	s0, s12, s15
 800d518:	ee76 5ac0 	vsub.f32	s11, s13, s0
 800d51c:	eef0 7a40 	vmov.f32	s15, s0
 800d520:	ee15 3a90 	vmov	r3, s11
 800d524:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800d528:	1aa4      	subs	r4, r4, r2
 800d52a:	2c19      	cmp	r4, #25
 800d52c:	dc04      	bgt.n	800d538 <__ieee754_rem_pio2f+0x15c>
 800d52e:	edc5 5a00 	vstr	s11, [r5]
 800d532:	eeb0 0a66 	vmov.f32	s0, s13
 800d536:	e7c7      	b.n	800d4c8 <__ieee754_rem_pio2f+0xec>
 800d538:	eddf 5a3a 	vldr	s11, [pc, #232]	; 800d624 <__ieee754_rem_pio2f+0x248>
 800d53c:	eeb0 0a66 	vmov.f32	s0, s13
 800d540:	eea7 0a25 	vfma.f32	s0, s14, s11
 800d544:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800d548:	eee7 7a25 	vfma.f32	s15, s14, s11
 800d54c:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800d628 <__ieee754_rem_pio2f+0x24c>
 800d550:	eed6 7a07 	vfnms.f32	s15, s12, s14
 800d554:	ee30 7a67 	vsub.f32	s14, s0, s15
 800d558:	ed85 7a00 	vstr	s14, [r5]
 800d55c:	e7b4      	b.n	800d4c8 <__ieee754_rem_pio2f+0xec>
 800d55e:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800d562:	db06      	blt.n	800d572 <__ieee754_rem_pio2f+0x196>
 800d564:	ee70 7a40 	vsub.f32	s15, s0, s0
 800d568:	edc0 7a01 	vstr	s15, [r0, #4]
 800d56c:	edc0 7a00 	vstr	s15, [r0]
 800d570:	e742      	b.n	800d3f8 <__ieee754_rem_pio2f+0x1c>
 800d572:	15e2      	asrs	r2, r4, #23
 800d574:	3a86      	subs	r2, #134	; 0x86
 800d576:	eba4 53c2 	sub.w	r3, r4, r2, lsl #23
 800d57a:	ee07 3a90 	vmov	s15, r3
 800d57e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800d582:	eddf 6a2a 	vldr	s13, [pc, #168]	; 800d62c <__ieee754_rem_pio2f+0x250>
 800d586:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800d58a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d58e:	ed8d 7a03 	vstr	s14, [sp, #12]
 800d592:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800d596:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800d59a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800d59e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d5a2:	ed8d 7a04 	vstr	s14, [sp, #16]
 800d5a6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800d5aa:	eef5 7a40 	vcmp.f32	s15, #0.0
 800d5ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d5b2:	edcd 7a05 	vstr	s15, [sp, #20]
 800d5b6:	d11e      	bne.n	800d5f6 <__ieee754_rem_pio2f+0x21a>
 800d5b8:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800d5bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d5c0:	bf0c      	ite	eq
 800d5c2:	2301      	moveq	r3, #1
 800d5c4:	2302      	movne	r3, #2
 800d5c6:	491a      	ldr	r1, [pc, #104]	; (800d630 <__ieee754_rem_pio2f+0x254>)
 800d5c8:	9101      	str	r1, [sp, #4]
 800d5ca:	2102      	movs	r1, #2
 800d5cc:	9100      	str	r1, [sp, #0]
 800d5ce:	a803      	add	r0, sp, #12
 800d5d0:	4629      	mov	r1, r5
 800d5d2:	f000 f8ff 	bl	800d7d4 <__kernel_rem_pio2f>
 800d5d6:	2e00      	cmp	r6, #0
 800d5d8:	f6bf af31 	bge.w	800d43e <__ieee754_rem_pio2f+0x62>
 800d5dc:	edd5 7a00 	vldr	s15, [r5]
 800d5e0:	eef1 7a67 	vneg.f32	s15, s15
 800d5e4:	edc5 7a00 	vstr	s15, [r5]
 800d5e8:	edd5 7a01 	vldr	s15, [r5, #4]
 800d5ec:	eef1 7a67 	vneg.f32	s15, s15
 800d5f0:	edc5 7a01 	vstr	s15, [r5, #4]
 800d5f4:	e77a      	b.n	800d4ec <__ieee754_rem_pio2f+0x110>
 800d5f6:	2303      	movs	r3, #3
 800d5f8:	e7e5      	b.n	800d5c6 <__ieee754_rem_pio2f+0x1ea>
 800d5fa:	bf00      	nop
 800d5fc:	3f490fd8 	.word	0x3f490fd8
 800d600:	4016cbe3 	.word	0x4016cbe3
 800d604:	3fc90f80 	.word	0x3fc90f80
 800d608:	3fc90fd0 	.word	0x3fc90fd0
 800d60c:	37354400 	.word	0x37354400
 800d610:	37354443 	.word	0x37354443
 800d614:	2e85a308 	.word	0x2e85a308
 800d618:	43490f80 	.word	0x43490f80
 800d61c:	3f22f984 	.word	0x3f22f984
 800d620:	080734d0 	.word	0x080734d0
 800d624:	2e85a300 	.word	0x2e85a300
 800d628:	248d3132 	.word	0x248d3132
 800d62c:	43800000 	.word	0x43800000
 800d630:	08073550 	.word	0x08073550

0800d634 <__ieee754_sinhf>:
 800d634:	b510      	push	{r4, lr}
 800d636:	ee10 3a10 	vmov	r3, s0
 800d63a:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 800d63e:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800d642:	ed2d 8b02 	vpush	{d8}
 800d646:	eef0 7a40 	vmov.f32	s15, s0
 800d64a:	db06      	blt.n	800d65a <__ieee754_sinhf+0x26>
 800d64c:	ee70 7a00 	vadd.f32	s15, s0, s0
 800d650:	ecbd 8b02 	vpop	{d8}
 800d654:	eeb0 0a67 	vmov.f32	s0, s15
 800d658:	bd10      	pop	{r4, pc}
 800d65a:	2b00      	cmp	r3, #0
 800d65c:	4b28      	ldr	r3, [pc, #160]	; (800d700 <__ieee754_sinhf+0xcc>)
 800d65e:	eef6 8a00 	vmov.f32	s17, #96	; 0x3f000000  0.5
 800d662:	eebe 8a00 	vmov.f32	s16, #224	; 0xbf000000 -0.5
 800d666:	bfa8      	it	ge
 800d668:	eeb0 8a68 	vmovge.f32	s16, s17
 800d66c:	429c      	cmp	r4, r3
 800d66e:	dc2a      	bgt.n	800d6c6 <__ieee754_sinhf+0x92>
 800d670:	f1b4 5f46 	cmp.w	r4, #830472192	; 0x31800000
 800d674:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 800d678:	da08      	bge.n	800d68c <__ieee754_sinhf+0x58>
 800d67a:	ed9f 7a22 	vldr	s14, [pc, #136]	; 800d704 <__ieee754_sinhf+0xd0>
 800d67e:	ee30 7a07 	vadd.f32	s14, s0, s14
 800d682:	eeb4 7ae8 	vcmpe.f32	s14, s17
 800d686:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d68a:	dce1      	bgt.n	800d650 <__ieee754_sinhf+0x1c>
 800d68c:	eeb0 0a67 	vmov.f32	s0, s15
 800d690:	f7fd ff9a 	bl	800b5c8 <fabsf>
 800d694:	f000 fc58 	bl	800df48 <expm1f>
 800d698:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 800d69c:	bfbb      	ittet	lt
 800d69e:	ee20 7a00 	vmullt.f32	s14, s0, s0
 800d6a2:	ee70 8a28 	vaddlt.f32	s17, s0, s17
 800d6a6:	ee70 8a28 	vaddge.f32	s17, s0, s17
 800d6aa:	eec7 7a28 	vdivlt.f32	s15, s14, s17
 800d6ae:	bfad      	iteet	ge
 800d6b0:	eec0 7a28 	vdivge.f32	s15, s0, s17
 800d6b4:	eeb0 7a00 	vmovlt.f32	s14, #0	; 0x40000000  2.0
 800d6b8:	eed0 7a07 	vfnmslt.f32	s15, s0, s14
 800d6bc:	ee77 7a80 	vaddge.f32	s15, s15, s0
 800d6c0:	ee67 7a88 	vmul.f32	s15, s15, s16
 800d6c4:	e7c4      	b.n	800d650 <__ieee754_sinhf+0x1c>
 800d6c6:	4b10      	ldr	r3, [pc, #64]	; (800d708 <__ieee754_sinhf+0xd4>)
 800d6c8:	429c      	cmp	r4, r3
 800d6ca:	dc06      	bgt.n	800d6da <__ieee754_sinhf+0xa6>
 800d6cc:	f7fd ff7c 	bl	800b5c8 <fabsf>
 800d6d0:	f7ff f97a 	bl	800c9c8 <__ieee754_expf>
 800d6d4:	ee60 7a08 	vmul.f32	s15, s0, s16
 800d6d8:	e7ba      	b.n	800d650 <__ieee754_sinhf+0x1c>
 800d6da:	4b0c      	ldr	r3, [pc, #48]	; (800d70c <__ieee754_sinhf+0xd8>)
 800d6dc:	429c      	cmp	r4, r3
 800d6de:	dc0a      	bgt.n	800d6f6 <__ieee754_sinhf+0xc2>
 800d6e0:	f7fd ff72 	bl	800b5c8 <fabsf>
 800d6e4:	ee20 0a28 	vmul.f32	s0, s0, s17
 800d6e8:	f7ff f96e 	bl	800c9c8 <__ieee754_expf>
 800d6ec:	ee68 7a00 	vmul.f32	s15, s16, s0
 800d6f0:	ee67 7a80 	vmul.f32	s15, s15, s0
 800d6f4:	e7ac      	b.n	800d650 <__ieee754_sinhf+0x1c>
 800d6f6:	ed9f 7a03 	vldr	s14, [pc, #12]	; 800d704 <__ieee754_sinhf+0xd0>
 800d6fa:	ee60 7a07 	vmul.f32	s15, s0, s14
 800d6fe:	e7a7      	b.n	800d650 <__ieee754_sinhf+0x1c>
 800d700:	41afffff 	.word	0x41afffff
 800d704:	7cf0bdc2 	.word	0x7cf0bdc2
 800d708:	42b17217 	.word	0x42b17217
 800d70c:	42b2d4fc 	.word	0x42b2d4fc

0800d710 <__ieee754_sqrtf>:
 800d710:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800d714:	4770      	bx	lr
	...

0800d718 <__kernel_cosf>:
 800d718:	ee10 3a10 	vmov	r3, s0
 800d71c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d720:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800d724:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d728:	da05      	bge.n	800d736 <__kernel_cosf+0x1e>
 800d72a:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800d72e:	ee17 2a90 	vmov	r2, s15
 800d732:	2a00      	cmp	r2, #0
 800d734:	d03b      	beq.n	800d7ae <__kernel_cosf+0x96>
 800d736:	ee20 6a00 	vmul.f32	s12, s0, s0
 800d73a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800d73e:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800d7b4 <__kernel_cosf+0x9c>
 800d742:	4a1d      	ldr	r2, [pc, #116]	; (800d7b8 <__kernel_cosf+0xa0>)
 800d744:	ee66 7a07 	vmul.f32	s15, s12, s14
 800d748:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 800d7bc <__kernel_cosf+0xa4>
 800d74c:	eea6 7a25 	vfma.f32	s14, s12, s11
 800d750:	4293      	cmp	r3, r2
 800d752:	eddf 5a1b 	vldr	s11, [pc, #108]	; 800d7c0 <__kernel_cosf+0xa8>
 800d756:	eee7 5a06 	vfma.f32	s11, s14, s12
 800d75a:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 800d7c4 <__kernel_cosf+0xac>
 800d75e:	eea5 7a86 	vfma.f32	s14, s11, s12
 800d762:	eddf 5a19 	vldr	s11, [pc, #100]	; 800d7c8 <__kernel_cosf+0xb0>
 800d766:	eee7 5a06 	vfma.f32	s11, s14, s12
 800d76a:	ed9f 7a18 	vldr	s14, [pc, #96]	; 800d7cc <__kernel_cosf+0xb4>
 800d76e:	eea5 7a86 	vfma.f32	s14, s11, s12
 800d772:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 800d776:	ee27 7a06 	vmul.f32	s14, s14, s12
 800d77a:	eee6 0a07 	vfma.f32	s1, s12, s14
 800d77e:	dc04      	bgt.n	800d78a <__kernel_cosf+0x72>
 800d780:	ee77 0ae0 	vsub.f32	s1, s15, s1
 800d784:	ee36 0ae0 	vsub.f32	s0, s13, s1
 800d788:	4770      	bx	lr
 800d78a:	4a11      	ldr	r2, [pc, #68]	; (800d7d0 <__kernel_cosf+0xb8>)
 800d78c:	4293      	cmp	r3, r2
 800d78e:	bfda      	itte	le
 800d790:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 800d794:	ee07 3a10 	vmovle	s14, r3
 800d798:	eeb5 7a02 	vmovgt.f32	s14, #82	; 0x3e900000  0.2812500
 800d79c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d7a0:	ee36 0ac7 	vsub.f32	s0, s13, s14
 800d7a4:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800d7a8:	ee30 0a67 	vsub.f32	s0, s0, s15
 800d7ac:	4770      	bx	lr
 800d7ae:	eeb0 0a66 	vmov.f32	s0, s13
 800d7b2:	4770      	bx	lr
 800d7b4:	ad47d74e 	.word	0xad47d74e
 800d7b8:	3e999999 	.word	0x3e999999
 800d7bc:	310f74f6 	.word	0x310f74f6
 800d7c0:	b493f27c 	.word	0xb493f27c
 800d7c4:	37d00d01 	.word	0x37d00d01
 800d7c8:	bab60b61 	.word	0xbab60b61
 800d7cc:	3d2aaaab 	.word	0x3d2aaaab
 800d7d0:	3f480000 	.word	0x3f480000

0800d7d4 <__kernel_rem_pio2f>:
 800d7d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d7d8:	ed2d 8b04 	vpush	{d8-d9}
 800d7dc:	b0d7      	sub	sp, #348	; 0x15c
 800d7de:	469b      	mov	fp, r3
 800d7e0:	460e      	mov	r6, r1
 800d7e2:	4bbe      	ldr	r3, [pc, #760]	; (800dadc <__kernel_rem_pio2f+0x308>)
 800d7e4:	9964      	ldr	r1, [sp, #400]	; 0x190
 800d7e6:	9002      	str	r0, [sp, #8]
 800d7e8:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 800d7ec:	9865      	ldr	r0, [sp, #404]	; 0x194
 800d7ee:	ed9f 7abf 	vldr	s14, [pc, #764]	; 800daec <__kernel_rem_pio2f+0x318>
 800d7f2:	1ed1      	subs	r1, r2, #3
 800d7f4:	2308      	movs	r3, #8
 800d7f6:	fb91 f1f3 	sdiv	r1, r1, r3
 800d7fa:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 800d7fe:	f10b 3aff 	add.w	sl, fp, #4294967295
 800d802:	1c4c      	adds	r4, r1, #1
 800d804:	eba2 04c4 	sub.w	r4, r2, r4, lsl #3
 800d808:	eba1 050a 	sub.w	r5, r1, sl
 800d80c:	aa1a      	add	r2, sp, #104	; 0x68
 800d80e:	eb09 070a 	add.w	r7, r9, sl
 800d812:	eb00 0c85 	add.w	ip, r0, r5, lsl #2
 800d816:	4696      	mov	lr, r2
 800d818:	2300      	movs	r3, #0
 800d81a:	42bb      	cmp	r3, r7
 800d81c:	dd0f      	ble.n	800d83e <__kernel_rem_pio2f+0x6a>
 800d81e:	af42      	add	r7, sp, #264	; 0x108
 800d820:	2200      	movs	r2, #0
 800d822:	454a      	cmp	r2, r9
 800d824:	dc27      	bgt.n	800d876 <__kernel_rem_pio2f+0xa2>
 800d826:	f10d 0c68 	add.w	ip, sp, #104	; 0x68
 800d82a:	eb0b 0302 	add.w	r3, fp, r2
 800d82e:	eb0c 0383 	add.w	r3, ip, r3, lsl #2
 800d832:	9d02      	ldr	r5, [sp, #8]
 800d834:	eddf 7aad 	vldr	s15, [pc, #692]	; 800daec <__kernel_rem_pio2f+0x318>
 800d838:	f04f 0c00 	mov.w	ip, #0
 800d83c:	e015      	b.n	800d86a <__kernel_rem_pio2f+0x96>
 800d83e:	42dd      	cmn	r5, r3
 800d840:	bf5d      	ittte	pl
 800d842:	f85c 2023 	ldrpl.w	r2, [ip, r3, lsl #2]
 800d846:	ee07 2a90 	vmovpl	s15, r2
 800d84a:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800d84e:	eef0 7a47 	vmovmi.f32	s15, s14
 800d852:	ecee 7a01 	vstmia	lr!, {s15}
 800d856:	3301      	adds	r3, #1
 800d858:	e7df      	b.n	800d81a <__kernel_rem_pio2f+0x46>
 800d85a:	ecf5 6a01 	vldmia	r5!, {s13}
 800d85e:	ed33 7a01 	vldmdb	r3!, {s14}
 800d862:	eee6 7a87 	vfma.f32	s15, s13, s14
 800d866:	f10c 0c01 	add.w	ip, ip, #1
 800d86a:	45d4      	cmp	ip, sl
 800d86c:	ddf5      	ble.n	800d85a <__kernel_rem_pio2f+0x86>
 800d86e:	ece7 7a01 	vstmia	r7!, {s15}
 800d872:	3201      	adds	r2, #1
 800d874:	e7d5      	b.n	800d822 <__kernel_rem_pio2f+0x4e>
 800d876:	ab06      	add	r3, sp, #24
 800d878:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 800d87c:	9304      	str	r3, [sp, #16]
 800d87e:	eddf 8a9a 	vldr	s17, [pc, #616]	; 800dae8 <__kernel_rem_pio2f+0x314>
 800d882:	ed9f 9a98 	vldr	s18, [pc, #608]	; 800dae4 <__kernel_rem_pio2f+0x310>
 800d886:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 800d88a:	9303      	str	r3, [sp, #12]
 800d88c:	464d      	mov	r5, r9
 800d88e:	ab56      	add	r3, sp, #344	; 0x158
 800d890:	f105 4780 	add.w	r7, r5, #1073741824	; 0x40000000
 800d894:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 800d898:	3f01      	subs	r7, #1
 800d89a:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 800d89e:	00bf      	lsls	r7, r7, #2
 800d8a0:	ab56      	add	r3, sp, #344	; 0x158
 800d8a2:	19da      	adds	r2, r3, r7
 800d8a4:	3a4c      	subs	r2, #76	; 0x4c
 800d8a6:	2300      	movs	r3, #0
 800d8a8:	1ae9      	subs	r1, r5, r3
 800d8aa:	2900      	cmp	r1, #0
 800d8ac:	dc4c      	bgt.n	800d948 <__kernel_rem_pio2f+0x174>
 800d8ae:	4620      	mov	r0, r4
 800d8b0:	f000 fce0 	bl	800e274 <scalbnf>
 800d8b4:	eeb0 8a40 	vmov.f32	s16, s0
 800d8b8:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 800d8bc:	ee28 0a00 	vmul.f32	s0, s16, s0
 800d8c0:	f7fd fe8a 	bl	800b5d8 <floorf>
 800d8c4:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 800d8c8:	eea0 8a67 	vfms.f32	s16, s0, s15
 800d8cc:	2c00      	cmp	r4, #0
 800d8ce:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800d8d2:	edcd 7a01 	vstr	s15, [sp, #4]
 800d8d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d8da:	ee38 8a67 	vsub.f32	s16, s16, s15
 800d8de:	dd48      	ble.n	800d972 <__kernel_rem_pio2f+0x19e>
 800d8e0:	1e69      	subs	r1, r5, #1
 800d8e2:	ab06      	add	r3, sp, #24
 800d8e4:	f1c4 0008 	rsb	r0, r4, #8
 800d8e8:	f853 c021 	ldr.w	ip, [r3, r1, lsl #2]
 800d8ec:	9a01      	ldr	r2, [sp, #4]
 800d8ee:	fa4c f300 	asr.w	r3, ip, r0
 800d8f2:	441a      	add	r2, r3
 800d8f4:	4083      	lsls	r3, r0
 800d8f6:	9201      	str	r2, [sp, #4]
 800d8f8:	ebac 0203 	sub.w	r2, ip, r3
 800d8fc:	ab06      	add	r3, sp, #24
 800d8fe:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 800d902:	f1c4 0307 	rsb	r3, r4, #7
 800d906:	fa42 f803 	asr.w	r8, r2, r3
 800d90a:	f1b8 0f00 	cmp.w	r8, #0
 800d90e:	dd41      	ble.n	800d994 <__kernel_rem_pio2f+0x1c0>
 800d910:	9b01      	ldr	r3, [sp, #4]
 800d912:	2000      	movs	r0, #0
 800d914:	3301      	adds	r3, #1
 800d916:	9301      	str	r3, [sp, #4]
 800d918:	4601      	mov	r1, r0
 800d91a:	4285      	cmp	r5, r0
 800d91c:	dc6d      	bgt.n	800d9fa <__kernel_rem_pio2f+0x226>
 800d91e:	2c00      	cmp	r4, #0
 800d920:	dd04      	ble.n	800d92c <__kernel_rem_pio2f+0x158>
 800d922:	2c01      	cmp	r4, #1
 800d924:	d07e      	beq.n	800da24 <__kernel_rem_pio2f+0x250>
 800d926:	2c02      	cmp	r4, #2
 800d928:	f000 8086 	beq.w	800da38 <__kernel_rem_pio2f+0x264>
 800d92c:	f1b8 0f02 	cmp.w	r8, #2
 800d930:	d130      	bne.n	800d994 <__kernel_rem_pio2f+0x1c0>
 800d932:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800d936:	ee30 8a48 	vsub.f32	s16, s0, s16
 800d93a:	b359      	cbz	r1, 800d994 <__kernel_rem_pio2f+0x1c0>
 800d93c:	4620      	mov	r0, r4
 800d93e:	f000 fc99 	bl	800e274 <scalbnf>
 800d942:	ee38 8a40 	vsub.f32	s16, s16, s0
 800d946:	e025      	b.n	800d994 <__kernel_rem_pio2f+0x1c0>
 800d948:	ee60 7a28 	vmul.f32	s15, s0, s17
 800d94c:	a806      	add	r0, sp, #24
 800d94e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d952:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d956:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800d95a:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800d95e:	ee10 1a10 	vmov	r1, s0
 800d962:	ed32 0a01 	vldmdb	r2!, {s0}
 800d966:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
 800d96a:	ee37 0a80 	vadd.f32	s0, s15, s0
 800d96e:	3301      	adds	r3, #1
 800d970:	e79a      	b.n	800d8a8 <__kernel_rem_pio2f+0xd4>
 800d972:	d106      	bne.n	800d982 <__kernel_rem_pio2f+0x1ae>
 800d974:	1e6b      	subs	r3, r5, #1
 800d976:	aa06      	add	r2, sp, #24
 800d978:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800d97c:	ea4f 2822 	mov.w	r8, r2, asr #8
 800d980:	e7c3      	b.n	800d90a <__kernel_rem_pio2f+0x136>
 800d982:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800d986:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800d98a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d98e:	da31      	bge.n	800d9f4 <__kernel_rem_pio2f+0x220>
 800d990:	f04f 0800 	mov.w	r8, #0
 800d994:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800d998:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d99c:	f040 80a8 	bne.w	800daf0 <__kernel_rem_pio2f+0x31c>
 800d9a0:	1e6b      	subs	r3, r5, #1
 800d9a2:	4618      	mov	r0, r3
 800d9a4:	2200      	movs	r2, #0
 800d9a6:	4548      	cmp	r0, r9
 800d9a8:	da4d      	bge.n	800da46 <__kernel_rem_pio2f+0x272>
 800d9aa:	2a00      	cmp	r2, #0
 800d9ac:	f000 8087 	beq.w	800dabe <__kernel_rem_pio2f+0x2ea>
 800d9b0:	aa06      	add	r2, sp, #24
 800d9b2:	3c08      	subs	r4, #8
 800d9b4:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800d9b8:	2900      	cmp	r1, #0
 800d9ba:	f000 808d 	beq.w	800dad8 <__kernel_rem_pio2f+0x304>
 800d9be:	4620      	mov	r0, r4
 800d9c0:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800d9c4:	9302      	str	r3, [sp, #8]
 800d9c6:	f000 fc55 	bl	800e274 <scalbnf>
 800d9ca:	9b02      	ldr	r3, [sp, #8]
 800d9cc:	ed9f 7a46 	vldr	s14, [pc, #280]	; 800dae8 <__kernel_rem_pio2f+0x314>
 800d9d0:	0099      	lsls	r1, r3, #2
 800d9d2:	aa42      	add	r2, sp, #264	; 0x108
 800d9d4:	1850      	adds	r0, r2, r1
 800d9d6:	1d05      	adds	r5, r0, #4
 800d9d8:	461c      	mov	r4, r3
 800d9da:	2c00      	cmp	r4, #0
 800d9dc:	f280 80b8 	bge.w	800db50 <__kernel_rem_pio2f+0x37c>
 800d9e0:	2500      	movs	r5, #0
 800d9e2:	1b5c      	subs	r4, r3, r5
 800d9e4:	2c00      	cmp	r4, #0
 800d9e6:	f2c0 80d8 	blt.w	800db9a <__kernel_rem_pio2f+0x3c6>
 800d9ea:	4f3d      	ldr	r7, [pc, #244]	; (800dae0 <__kernel_rem_pio2f+0x30c>)
 800d9ec:	eddf 7a3f 	vldr	s15, [pc, #252]	; 800daec <__kernel_rem_pio2f+0x318>
 800d9f0:	2400      	movs	r4, #0
 800d9f2:	e0c6      	b.n	800db82 <__kernel_rem_pio2f+0x3ae>
 800d9f4:	f04f 0802 	mov.w	r8, #2
 800d9f8:	e78a      	b.n	800d910 <__kernel_rem_pio2f+0x13c>
 800d9fa:	ab06      	add	r3, sp, #24
 800d9fc:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800da00:	b949      	cbnz	r1, 800da16 <__kernel_rem_pio2f+0x242>
 800da02:	b12b      	cbz	r3, 800da10 <__kernel_rem_pio2f+0x23c>
 800da04:	aa06      	add	r2, sp, #24
 800da06:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800da0a:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 800da0e:	2301      	movs	r3, #1
 800da10:	3001      	adds	r0, #1
 800da12:	4619      	mov	r1, r3
 800da14:	e781      	b.n	800d91a <__kernel_rem_pio2f+0x146>
 800da16:	aa06      	add	r2, sp, #24
 800da18:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 800da1c:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 800da20:	460b      	mov	r3, r1
 800da22:	e7f5      	b.n	800da10 <__kernel_rem_pio2f+0x23c>
 800da24:	1e68      	subs	r0, r5, #1
 800da26:	ab06      	add	r3, sp, #24
 800da28:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800da2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800da30:	aa06      	add	r2, sp, #24
 800da32:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 800da36:	e779      	b.n	800d92c <__kernel_rem_pio2f+0x158>
 800da38:	1e68      	subs	r0, r5, #1
 800da3a:	ab06      	add	r3, sp, #24
 800da3c:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800da40:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800da44:	e7f4      	b.n	800da30 <__kernel_rem_pio2f+0x25c>
 800da46:	a906      	add	r1, sp, #24
 800da48:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800da4c:	3801      	subs	r0, #1
 800da4e:	430a      	orrs	r2, r1
 800da50:	e7a9      	b.n	800d9a6 <__kernel_rem_pio2f+0x1d2>
 800da52:	f10c 0c01 	add.w	ip, ip, #1
 800da56:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800da5a:	2a00      	cmp	r2, #0
 800da5c:	d0f9      	beq.n	800da52 <__kernel_rem_pio2f+0x27e>
 800da5e:	eb0b 0305 	add.w	r3, fp, r5
 800da62:	aa1a      	add	r2, sp, #104	; 0x68
 800da64:	009b      	lsls	r3, r3, #2
 800da66:	1898      	adds	r0, r3, r2
 800da68:	3004      	adds	r0, #4
 800da6a:	1c69      	adds	r1, r5, #1
 800da6c:	3704      	adds	r7, #4
 800da6e:	2200      	movs	r2, #0
 800da70:	4465      	add	r5, ip
 800da72:	9005      	str	r0, [sp, #20]
 800da74:	428d      	cmp	r5, r1
 800da76:	f6ff af0a 	blt.w	800d88e <__kernel_rem_pio2f+0xba>
 800da7a:	a81a      	add	r0, sp, #104	; 0x68
 800da7c:	eb02 0c03 	add.w	ip, r2, r3
 800da80:	4484      	add	ip, r0
 800da82:	9803      	ldr	r0, [sp, #12]
 800da84:	f8dd e008 	ldr.w	lr, [sp, #8]
 800da88:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 800da8c:	9001      	str	r0, [sp, #4]
 800da8e:	ee07 0a90 	vmov	s15, r0
 800da92:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800da96:	9805      	ldr	r0, [sp, #20]
 800da98:	edcc 7a00 	vstr	s15, [ip]
 800da9c:	eddf 7a13 	vldr	s15, [pc, #76]	; 800daec <__kernel_rem_pio2f+0x318>
 800daa0:	eb00 0802 	add.w	r8, r0, r2
 800daa4:	f04f 0c00 	mov.w	ip, #0
 800daa8:	45d4      	cmp	ip, sl
 800daaa:	dd0c      	ble.n	800dac6 <__kernel_rem_pio2f+0x2f2>
 800daac:	eb02 0c07 	add.w	ip, r2, r7
 800dab0:	a842      	add	r0, sp, #264	; 0x108
 800dab2:	4484      	add	ip, r0
 800dab4:	edcc 7a01 	vstr	s15, [ip, #4]
 800dab8:	3101      	adds	r1, #1
 800daba:	3204      	adds	r2, #4
 800dabc:	e7da      	b.n	800da74 <__kernel_rem_pio2f+0x2a0>
 800dabe:	9b04      	ldr	r3, [sp, #16]
 800dac0:	f04f 0c01 	mov.w	ip, #1
 800dac4:	e7c7      	b.n	800da56 <__kernel_rem_pio2f+0x282>
 800dac6:	ecfe 6a01 	vldmia	lr!, {s13}
 800daca:	ed38 7a01 	vldmdb	r8!, {s14}
 800dace:	f10c 0c01 	add.w	ip, ip, #1
 800dad2:	eee6 7a87 	vfma.f32	s15, s13, s14
 800dad6:	e7e7      	b.n	800daa8 <__kernel_rem_pio2f+0x2d4>
 800dad8:	3b01      	subs	r3, #1
 800dada:	e769      	b.n	800d9b0 <__kernel_rem_pio2f+0x1dc>
 800dadc:	08073894 	.word	0x08073894
 800dae0:	08073868 	.word	0x08073868
 800dae4:	43800000 	.word	0x43800000
 800dae8:	3b800000 	.word	0x3b800000
 800daec:	00000000 	.word	0x00000000
 800daf0:	4260      	negs	r0, r4
 800daf2:	eeb0 0a48 	vmov.f32	s0, s16
 800daf6:	f000 fbbd 	bl	800e274 <scalbnf>
 800dafa:	ed1f 7a06 	vldr	s14, [pc, #-24]	; 800dae4 <__kernel_rem_pio2f+0x310>
 800dafe:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800db02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800db06:	db1a      	blt.n	800db3e <__kernel_rem_pio2f+0x36a>
 800db08:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 800dae8 <__kernel_rem_pio2f+0x314>
 800db0c:	ee60 7a27 	vmul.f32	s15, s0, s15
 800db10:	aa06      	add	r2, sp, #24
 800db12:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800db16:	a906      	add	r1, sp, #24
 800db18:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800db1c:	3408      	adds	r4, #8
 800db1e:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800db22:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800db26:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800db2a:	ee10 3a10 	vmov	r3, s0
 800db2e:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 800db32:	1c6b      	adds	r3, r5, #1
 800db34:	ee17 2a90 	vmov	r2, s15
 800db38:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800db3c:	e73f      	b.n	800d9be <__kernel_rem_pio2f+0x1ea>
 800db3e:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800db42:	aa06      	add	r2, sp, #24
 800db44:	ee10 3a10 	vmov	r3, s0
 800db48:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 800db4c:	462b      	mov	r3, r5
 800db4e:	e736      	b.n	800d9be <__kernel_rem_pio2f+0x1ea>
 800db50:	aa06      	add	r2, sp, #24
 800db52:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 800db56:	9202      	str	r2, [sp, #8]
 800db58:	ee07 2a90 	vmov	s15, r2
 800db5c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800db60:	3c01      	subs	r4, #1
 800db62:	ee67 7a80 	vmul.f32	s15, s15, s0
 800db66:	ee20 0a07 	vmul.f32	s0, s0, s14
 800db6a:	ed65 7a01 	vstmdb	r5!, {s15}
 800db6e:	e734      	b.n	800d9da <__kernel_rem_pio2f+0x206>
 800db70:	eb00 0c84 	add.w	ip, r0, r4, lsl #2
 800db74:	ecf7 6a01 	vldmia	r7!, {s13}
 800db78:	ed9c 7a00 	vldr	s14, [ip]
 800db7c:	eee6 7a87 	vfma.f32	s15, s13, s14
 800db80:	3401      	adds	r4, #1
 800db82:	454c      	cmp	r4, r9
 800db84:	dc01      	bgt.n	800db8a <__kernel_rem_pio2f+0x3b6>
 800db86:	42a5      	cmp	r5, r4
 800db88:	daf2      	bge.n	800db70 <__kernel_rem_pio2f+0x39c>
 800db8a:	aa56      	add	r2, sp, #344	; 0x158
 800db8c:	eb02 0485 	add.w	r4, r2, r5, lsl #2
 800db90:	ed44 7a28 	vstr	s15, [r4, #-160]	; 0xffffff60
 800db94:	3501      	adds	r5, #1
 800db96:	3804      	subs	r0, #4
 800db98:	e723      	b.n	800d9e2 <__kernel_rem_pio2f+0x20e>
 800db9a:	9a64      	ldr	r2, [sp, #400]	; 0x190
 800db9c:	2a03      	cmp	r2, #3
 800db9e:	d84d      	bhi.n	800dc3c <__kernel_rem_pio2f+0x468>
 800dba0:	e8df f002 	tbb	[pc, r2]
 800dba4:	021f1f3e 	.word	0x021f1f3e
 800dba8:	aa56      	add	r2, sp, #344	; 0x158
 800dbaa:	4411      	add	r1, r2
 800dbac:	399c      	subs	r1, #156	; 0x9c
 800dbae:	4608      	mov	r0, r1
 800dbb0:	461c      	mov	r4, r3
 800dbb2:	2c00      	cmp	r4, #0
 800dbb4:	dc5f      	bgt.n	800dc76 <__kernel_rem_pio2f+0x4a2>
 800dbb6:	4608      	mov	r0, r1
 800dbb8:	461c      	mov	r4, r3
 800dbba:	2c01      	cmp	r4, #1
 800dbbc:	dc6b      	bgt.n	800dc96 <__kernel_rem_pio2f+0x4c2>
 800dbbe:	ed5f 7a35 	vldr	s15, [pc, #-212]	; 800daec <__kernel_rem_pio2f+0x318>
 800dbc2:	2b01      	cmp	r3, #1
 800dbc4:	dc77      	bgt.n	800dcb6 <__kernel_rem_pio2f+0x4e2>
 800dbc6:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 800dbca:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 800dbce:	f1b8 0f00 	cmp.w	r8, #0
 800dbd2:	d176      	bne.n	800dcc2 <__kernel_rem_pio2f+0x4ee>
 800dbd4:	edc6 6a00 	vstr	s13, [r6]
 800dbd8:	ed86 7a01 	vstr	s14, [r6, #4]
 800dbdc:	edc6 7a02 	vstr	s15, [r6, #8]
 800dbe0:	e02c      	b.n	800dc3c <__kernel_rem_pio2f+0x468>
 800dbe2:	aa56      	add	r2, sp, #344	; 0x158
 800dbe4:	4411      	add	r1, r2
 800dbe6:	ed1f 7a3f 	vldr	s14, [pc, #-252]	; 800daec <__kernel_rem_pio2f+0x318>
 800dbea:	399c      	subs	r1, #156	; 0x9c
 800dbec:	4618      	mov	r0, r3
 800dbee:	2800      	cmp	r0, #0
 800dbf0:	da32      	bge.n	800dc58 <__kernel_rem_pio2f+0x484>
 800dbf2:	f1b8 0f00 	cmp.w	r8, #0
 800dbf6:	d035      	beq.n	800dc64 <__kernel_rem_pio2f+0x490>
 800dbf8:	eef1 7a47 	vneg.f32	s15, s14
 800dbfc:	edc6 7a00 	vstr	s15, [r6]
 800dc00:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 800dc04:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800dc08:	a82f      	add	r0, sp, #188	; 0xbc
 800dc0a:	2101      	movs	r1, #1
 800dc0c:	428b      	cmp	r3, r1
 800dc0e:	da2c      	bge.n	800dc6a <__kernel_rem_pio2f+0x496>
 800dc10:	f1b8 0f00 	cmp.w	r8, #0
 800dc14:	d001      	beq.n	800dc1a <__kernel_rem_pio2f+0x446>
 800dc16:	eef1 7a67 	vneg.f32	s15, s15
 800dc1a:	edc6 7a01 	vstr	s15, [r6, #4]
 800dc1e:	e00d      	b.n	800dc3c <__kernel_rem_pio2f+0x468>
 800dc20:	aa56      	add	r2, sp, #344	; 0x158
 800dc22:	4411      	add	r1, r2
 800dc24:	ed5f 7a4f 	vldr	s15, [pc, #-316]	; 800daec <__kernel_rem_pio2f+0x318>
 800dc28:	399c      	subs	r1, #156	; 0x9c
 800dc2a:	2b00      	cmp	r3, #0
 800dc2c:	da0e      	bge.n	800dc4c <__kernel_rem_pio2f+0x478>
 800dc2e:	f1b8 0f00 	cmp.w	r8, #0
 800dc32:	d001      	beq.n	800dc38 <__kernel_rem_pio2f+0x464>
 800dc34:	eef1 7a67 	vneg.f32	s15, s15
 800dc38:	edc6 7a00 	vstr	s15, [r6]
 800dc3c:	9b01      	ldr	r3, [sp, #4]
 800dc3e:	f003 0007 	and.w	r0, r3, #7
 800dc42:	b057      	add	sp, #348	; 0x15c
 800dc44:	ecbd 8b04 	vpop	{d8-d9}
 800dc48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc4c:	ed31 7a01 	vldmdb	r1!, {s14}
 800dc50:	3b01      	subs	r3, #1
 800dc52:	ee77 7a87 	vadd.f32	s15, s15, s14
 800dc56:	e7e8      	b.n	800dc2a <__kernel_rem_pio2f+0x456>
 800dc58:	ed71 7a01 	vldmdb	r1!, {s15}
 800dc5c:	3801      	subs	r0, #1
 800dc5e:	ee37 7a27 	vadd.f32	s14, s14, s15
 800dc62:	e7c4      	b.n	800dbee <__kernel_rem_pio2f+0x41a>
 800dc64:	eef0 7a47 	vmov.f32	s15, s14
 800dc68:	e7c8      	b.n	800dbfc <__kernel_rem_pio2f+0x428>
 800dc6a:	ecb0 7a01 	vldmia	r0!, {s14}
 800dc6e:	3101      	adds	r1, #1
 800dc70:	ee77 7a87 	vadd.f32	s15, s15, s14
 800dc74:	e7ca      	b.n	800dc0c <__kernel_rem_pio2f+0x438>
 800dc76:	ed50 7a02 	vldr	s15, [r0, #-8]
 800dc7a:	ed70 6a01 	vldmdb	r0!, {s13}
 800dc7e:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800dc82:	3c01      	subs	r4, #1
 800dc84:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800dc88:	ed00 7a01 	vstr	s14, [r0, #-4]
 800dc8c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dc90:	edc0 7a00 	vstr	s15, [r0]
 800dc94:	e78d      	b.n	800dbb2 <__kernel_rem_pio2f+0x3de>
 800dc96:	ed50 7a02 	vldr	s15, [r0, #-8]
 800dc9a:	ed70 6a01 	vldmdb	r0!, {s13}
 800dc9e:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800dca2:	3c01      	subs	r4, #1
 800dca4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800dca8:	ed00 7a01 	vstr	s14, [r0, #-4]
 800dcac:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dcb0:	edc0 7a00 	vstr	s15, [r0]
 800dcb4:	e781      	b.n	800dbba <__kernel_rem_pio2f+0x3e6>
 800dcb6:	ed31 7a01 	vldmdb	r1!, {s14}
 800dcba:	3b01      	subs	r3, #1
 800dcbc:	ee77 7a87 	vadd.f32	s15, s15, s14
 800dcc0:	e77f      	b.n	800dbc2 <__kernel_rem_pio2f+0x3ee>
 800dcc2:	eef1 6a66 	vneg.f32	s13, s13
 800dcc6:	eeb1 7a47 	vneg.f32	s14, s14
 800dcca:	edc6 6a00 	vstr	s13, [r6]
 800dcce:	ed86 7a01 	vstr	s14, [r6, #4]
 800dcd2:	eef1 7a67 	vneg.f32	s15, s15
 800dcd6:	e781      	b.n	800dbdc <__kernel_rem_pio2f+0x408>

0800dcd8 <__kernel_sinf>:
 800dcd8:	ee10 3a10 	vmov	r3, s0
 800dcdc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800dce0:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800dce4:	da04      	bge.n	800dcf0 <__kernel_sinf+0x18>
 800dce6:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800dcea:	ee17 3a90 	vmov	r3, s15
 800dcee:	b35b      	cbz	r3, 800dd48 <__kernel_sinf+0x70>
 800dcf0:	ee20 7a00 	vmul.f32	s14, s0, s0
 800dcf4:	eddf 7a15 	vldr	s15, [pc, #84]	; 800dd4c <__kernel_sinf+0x74>
 800dcf8:	ed9f 6a15 	vldr	s12, [pc, #84]	; 800dd50 <__kernel_sinf+0x78>
 800dcfc:	eea7 6a27 	vfma.f32	s12, s14, s15
 800dd00:	eddf 7a14 	vldr	s15, [pc, #80]	; 800dd54 <__kernel_sinf+0x7c>
 800dd04:	eee6 7a07 	vfma.f32	s15, s12, s14
 800dd08:	ed9f 6a13 	vldr	s12, [pc, #76]	; 800dd58 <__kernel_sinf+0x80>
 800dd0c:	eea7 6a87 	vfma.f32	s12, s15, s14
 800dd10:	eddf 7a12 	vldr	s15, [pc, #72]	; 800dd5c <__kernel_sinf+0x84>
 800dd14:	ee60 6a07 	vmul.f32	s13, s0, s14
 800dd18:	eee6 7a07 	vfma.f32	s15, s12, s14
 800dd1c:	b930      	cbnz	r0, 800dd2c <__kernel_sinf+0x54>
 800dd1e:	ed9f 6a10 	vldr	s12, [pc, #64]	; 800dd60 <__kernel_sinf+0x88>
 800dd22:	eea7 6a27 	vfma.f32	s12, s14, s15
 800dd26:	eea6 0a26 	vfma.f32	s0, s12, s13
 800dd2a:	4770      	bx	lr
 800dd2c:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800dd30:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800dd34:	eee0 7a86 	vfma.f32	s15, s1, s12
 800dd38:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800dd3c:	eddf 7a09 	vldr	s15, [pc, #36]	; 800dd64 <__kernel_sinf+0x8c>
 800dd40:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800dd44:	ee30 0a60 	vsub.f32	s0, s0, s1
 800dd48:	4770      	bx	lr
 800dd4a:	bf00      	nop
 800dd4c:	2f2ec9d3 	.word	0x2f2ec9d3
 800dd50:	b2d72f34 	.word	0xb2d72f34
 800dd54:	3638ef1b 	.word	0x3638ef1b
 800dd58:	b9500d01 	.word	0xb9500d01
 800dd5c:	3c088889 	.word	0x3c088889
 800dd60:	be2aaaab 	.word	0xbe2aaaab
 800dd64:	3e2aaaab 	.word	0x3e2aaaab

0800dd68 <__kernel_tanf>:
 800dd68:	b508      	push	{r3, lr}
 800dd6a:	ee10 3a10 	vmov	r3, s0
 800dd6e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800dd72:	f1b2 5f46 	cmp.w	r2, #830472192	; 0x31800000
 800dd76:	eef0 7a40 	vmov.f32	s15, s0
 800dd7a:	da17      	bge.n	800ddac <__kernel_tanf+0x44>
 800dd7c:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 800dd80:	ee17 1a10 	vmov	r1, s14
 800dd84:	bb41      	cbnz	r1, 800ddd8 <__kernel_tanf+0x70>
 800dd86:	1c43      	adds	r3, r0, #1
 800dd88:	4313      	orrs	r3, r2
 800dd8a:	d108      	bne.n	800dd9e <__kernel_tanf+0x36>
 800dd8c:	f7fd fc1c 	bl	800b5c8 <fabsf>
 800dd90:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800dd94:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800dd98:	eeb0 0a67 	vmov.f32	s0, s15
 800dd9c:	bd08      	pop	{r3, pc}
 800dd9e:	2801      	cmp	r0, #1
 800dda0:	d0fa      	beq.n	800dd98 <__kernel_tanf+0x30>
 800dda2:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800dda6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800ddaa:	e7f5      	b.n	800dd98 <__kernel_tanf+0x30>
 800ddac:	494e      	ldr	r1, [pc, #312]	; (800dee8 <__kernel_tanf+0x180>)
 800ddae:	428a      	cmp	r2, r1
 800ddb0:	dd12      	ble.n	800ddd8 <__kernel_tanf+0x70>
 800ddb2:	2b00      	cmp	r3, #0
 800ddb4:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 800deec <__kernel_tanf+0x184>
 800ddb8:	bfb8      	it	lt
 800ddba:	eef1 7a40 	vneglt.f32	s15, s0
 800ddbe:	ee77 7a67 	vsub.f32	s15, s14, s15
 800ddc2:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 800def0 <__kernel_tanf+0x188>
 800ddc6:	bfb8      	it	lt
 800ddc8:	eef1 0a60 	vneglt.f32	s1, s1
 800ddcc:	ee77 0a60 	vsub.f32	s1, s14, s1
 800ddd0:	ee70 7aa7 	vadd.f32	s15, s1, s15
 800ddd4:	eddf 0a47 	vldr	s1, [pc, #284]	; 800def4 <__kernel_tanf+0x18c>
 800ddd8:	ed9f 6a47 	vldr	s12, [pc, #284]	; 800def8 <__kernel_tanf+0x190>
 800dddc:	eddf 5a47 	vldr	s11, [pc, #284]	; 800defc <__kernel_tanf+0x194>
 800dde0:	ed9f 5a47 	vldr	s10, [pc, #284]	; 800df00 <__kernel_tanf+0x198>
 800dde4:	4940      	ldr	r1, [pc, #256]	; (800dee8 <__kernel_tanf+0x180>)
 800dde6:	ee67 6aa7 	vmul.f32	s13, s15, s15
 800ddea:	428a      	cmp	r2, r1
 800ddec:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800ddf0:	ee67 4aa6 	vmul.f32	s9, s15, s13
 800ddf4:	eee7 5a06 	vfma.f32	s11, s14, s12
 800ddf8:	ed9f 6a42 	vldr	s12, [pc, #264]	; 800df04 <__kernel_tanf+0x19c>
 800ddfc:	eea5 6a87 	vfma.f32	s12, s11, s14
 800de00:	eddf 5a41 	vldr	s11, [pc, #260]	; 800df08 <__kernel_tanf+0x1a0>
 800de04:	eee6 5a07 	vfma.f32	s11, s12, s14
 800de08:	ed9f 6a40 	vldr	s12, [pc, #256]	; 800df0c <__kernel_tanf+0x1a4>
 800de0c:	eea5 6a87 	vfma.f32	s12, s11, s14
 800de10:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800df10 <__kernel_tanf+0x1a8>
 800de14:	eee6 5a07 	vfma.f32	s11, s12, s14
 800de18:	ed9f 6a3e 	vldr	s12, [pc, #248]	; 800df14 <__kernel_tanf+0x1ac>
 800de1c:	eea7 6a05 	vfma.f32	s12, s14, s10
 800de20:	ed9f 5a3d 	vldr	s10, [pc, #244]	; 800df18 <__kernel_tanf+0x1b0>
 800de24:	eea6 5a07 	vfma.f32	s10, s12, s14
 800de28:	ed9f 6a3c 	vldr	s12, [pc, #240]	; 800df1c <__kernel_tanf+0x1b4>
 800de2c:	eea5 6a07 	vfma.f32	s12, s10, s14
 800de30:	ed9f 5a3b 	vldr	s10, [pc, #236]	; 800df20 <__kernel_tanf+0x1b8>
 800de34:	eea6 5a07 	vfma.f32	s10, s12, s14
 800de38:	ed9f 6a3a 	vldr	s12, [pc, #232]	; 800df24 <__kernel_tanf+0x1bc>
 800de3c:	eea5 6a07 	vfma.f32	s12, s10, s14
 800de40:	eeb0 7a46 	vmov.f32	s14, s12
 800de44:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800de48:	eeb0 6a60 	vmov.f32	s12, s1
 800de4c:	eea7 6a24 	vfma.f32	s12, s14, s9
 800de50:	ed9f 7a35 	vldr	s14, [pc, #212]	; 800df28 <__kernel_tanf+0x1c0>
 800de54:	eee6 0a26 	vfma.f32	s1, s12, s13
 800de58:	eee4 0a87 	vfma.f32	s1, s9, s14
 800de5c:	ee77 6aa0 	vadd.f32	s13, s15, s1
 800de60:	dd1d      	ble.n	800de9e <__kernel_tanf+0x136>
 800de62:	ee07 0a10 	vmov	s14, r0
 800de66:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800de6a:	ee66 5aa6 	vmul.f32	s11, s13, s13
 800de6e:	ee76 6a87 	vadd.f32	s13, s13, s14
 800de72:	179b      	asrs	r3, r3, #30
 800de74:	ee85 6aa6 	vdiv.f32	s12, s11, s13
 800de78:	f003 0302 	and.w	r3, r3, #2
 800de7c:	f1c3 0301 	rsb	r3, r3, #1
 800de80:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800de84:	ee76 0a60 	vsub.f32	s1, s12, s1
 800de88:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800de8c:	eea7 7ae6 	vfms.f32	s14, s15, s13
 800de90:	ee07 3a90 	vmov	s15, r3
 800de94:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800de98:	ee67 7a27 	vmul.f32	s15, s14, s15
 800de9c:	e77c      	b.n	800dd98 <__kernel_tanf+0x30>
 800de9e:	2801      	cmp	r0, #1
 800dea0:	d01f      	beq.n	800dee2 <__kernel_tanf+0x17a>
 800dea2:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800dea6:	eec7 5a26 	vdiv.f32	s11, s14, s13
 800deaa:	4b20      	ldr	r3, [pc, #128]	; (800df2c <__kernel_tanf+0x1c4>)
 800deac:	ee16 2a90 	vmov	r2, s13
 800deb0:	401a      	ands	r2, r3
 800deb2:	ee06 2a10 	vmov	s12, r2
 800deb6:	ee15 2a90 	vmov	r2, s11
 800deba:	4013      	ands	r3, r2
 800debc:	ee07 3a10 	vmov	s14, r3
 800dec0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800dec4:	eee6 6a07 	vfma.f32	s13, s12, s14
 800dec8:	ee76 7a67 	vsub.f32	s15, s12, s15
 800decc:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800ded0:	eef0 7a66 	vmov.f32	s15, s13
 800ded4:	eee7 7a20 	vfma.f32	s15, s14, s1
 800ded8:	eea7 7aa5 	vfma.f32	s14, s15, s11
 800dedc:	eef0 7a47 	vmov.f32	s15, s14
 800dee0:	e75a      	b.n	800dd98 <__kernel_tanf+0x30>
 800dee2:	eef0 7a66 	vmov.f32	s15, s13
 800dee6:	e757      	b.n	800dd98 <__kernel_tanf+0x30>
 800dee8:	3f2ca13f 	.word	0x3f2ca13f
 800deec:	3f490fda 	.word	0x3f490fda
 800def0:	33222168 	.word	0x33222168
 800def4:	00000000 	.word	0x00000000
 800def8:	37d95384 	.word	0x37d95384
 800defc:	3895c07a 	.word	0x3895c07a
 800df00:	b79bae5f 	.word	0xb79bae5f
 800df04:	398137b9 	.word	0x398137b9
 800df08:	3abede48 	.word	0x3abede48
 800df0c:	3c11371f 	.word	0x3c11371f
 800df10:	3d5d0dd1 	.word	0x3d5d0dd1
 800df14:	38a3f445 	.word	0x38a3f445
 800df18:	3a1a26c8 	.word	0x3a1a26c8
 800df1c:	3b6b6916 	.word	0x3b6b6916
 800df20:	3cb327a4 	.word	0x3cb327a4
 800df24:	3e088889 	.word	0x3e088889
 800df28:	3eaaaaab 	.word	0x3eaaaaab
 800df2c:	fffff000 	.word	0xfffff000

0800df30 <matherr>:
 800df30:	2000      	movs	r0, #0
 800df32:	4770      	bx	lr
 800df34:	0000      	movs	r0, r0
	...

0800df38 <nan>:
 800df38:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800df40 <nan+0x8>
 800df3c:	4770      	bx	lr
 800df3e:	bf00      	nop
 800df40:	00000000 	.word	0x00000000
 800df44:	7ff80000 	.word	0x7ff80000

0800df48 <expm1f>:
 800df48:	ee10 2a10 	vmov	r2, s0
 800df4c:	4985      	ldr	r1, [pc, #532]	; (800e164 <expm1f+0x21c>)
 800df4e:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 800df52:	428b      	cmp	r3, r1
 800df54:	d924      	bls.n	800dfa0 <expm1f+0x58>
 800df56:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800df5a:	d902      	bls.n	800df62 <expm1f+0x1a>
 800df5c:	ee30 0a00 	vadd.f32	s0, s0, s0
 800df60:	4770      	bx	lr
 800df62:	d106      	bne.n	800df72 <expm1f+0x2a>
 800df64:	2a00      	cmp	r2, #0
 800df66:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 800df6a:	bfb8      	it	lt
 800df6c:	eeb0 0a67 	vmovlt.f32	s0, s15
 800df70:	4770      	bx	lr
 800df72:	2a00      	cmp	r2, #0
 800df74:	db08      	blt.n	800df88 <expm1f+0x40>
 800df76:	4a7c      	ldr	r2, [pc, #496]	; (800e168 <expm1f+0x220>)
 800df78:	4293      	cmp	r3, r2
 800df7a:	f240 80eb 	bls.w	800e154 <expm1f+0x20c>
 800df7e:	ed9f 0a7b 	vldr	s0, [pc, #492]	; 800e16c <expm1f+0x224>
 800df82:	ee20 0a00 	vmul.f32	s0, s0, s0
 800df86:	4770      	bx	lr
 800df88:	eddf 7a79 	vldr	s15, [pc, #484]	; 800e170 <expm1f+0x228>
 800df8c:	ee70 7a27 	vadd.f32	s15, s0, s15
 800df90:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800df94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800df98:	d554      	bpl.n	800e044 <expm1f+0xfc>
 800df9a:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 800df9e:	4770      	bx	lr
 800dfa0:	4974      	ldr	r1, [pc, #464]	; (800e174 <expm1f+0x22c>)
 800dfa2:	428b      	cmp	r3, r1
 800dfa4:	d96d      	bls.n	800e082 <expm1f+0x13a>
 800dfa6:	4974      	ldr	r1, [pc, #464]	; (800e178 <expm1f+0x230>)
 800dfa8:	428b      	cmp	r3, r1
 800dfaa:	d84b      	bhi.n	800e044 <expm1f+0xfc>
 800dfac:	ed9f 7a73 	vldr	s14, [pc, #460]	; 800e17c <expm1f+0x234>
 800dfb0:	2a00      	cmp	r2, #0
 800dfb2:	bfa7      	ittee	ge
 800dfb4:	ee30 7a47 	vsubge.f32	s14, s0, s14
 800dfb8:	eddf 7a71 	vldrge	s15, [pc, #452]	; 800e180 <expm1f+0x238>
 800dfbc:	eddf 7a71 	vldrlt	s15, [pc, #452]	; 800e184 <expm1f+0x23c>
 800dfc0:	ee30 7a07 	vaddlt.f32	s14, s0, s14
 800dfc4:	bfac      	ite	ge
 800dfc6:	2301      	movge	r3, #1
 800dfc8:	f04f 33ff 	movlt.w	r3, #4294967295
 800dfcc:	ee37 0a67 	vsub.f32	s0, s14, s15
 800dfd0:	ee37 7a40 	vsub.f32	s14, s14, s0
 800dfd4:	ee77 7a67 	vsub.f32	s15, s14, s15
 800dfd8:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 800dfdc:	ee20 5a25 	vmul.f32	s10, s0, s11
 800dfe0:	eddf 6a69 	vldr	s13, [pc, #420]	; 800e188 <expm1f+0x240>
 800dfe4:	ed9f 6a69 	vldr	s12, [pc, #420]	; 800e18c <expm1f+0x244>
 800dfe8:	ee20 7a05 	vmul.f32	s14, s0, s10
 800dfec:	eea7 6a26 	vfma.f32	s12, s14, s13
 800dff0:	eddf 6a67 	vldr	s13, [pc, #412]	; 800e190 <expm1f+0x248>
 800dff4:	eee6 6a07 	vfma.f32	s13, s12, s14
 800dff8:	ed9f 6a66 	vldr	s12, [pc, #408]	; 800e194 <expm1f+0x24c>
 800dffc:	eea6 6a87 	vfma.f32	s12, s13, s14
 800e000:	eddf 6a65 	vldr	s13, [pc, #404]	; 800e198 <expm1f+0x250>
 800e004:	eee6 6a07 	vfma.f32	s13, s12, s14
 800e008:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800e00c:	eef0 4a46 	vmov.f32	s9, s12
 800e010:	eee6 4a87 	vfma.f32	s9, s13, s14
 800e014:	eef0 6a64 	vmov.f32	s13, s9
 800e018:	eef0 4a08 	vmov.f32	s9, #8	; 0x40400000  3.0
 800e01c:	eee5 4a66 	vfms.f32	s9, s10, s13
 800e020:	ee36 5ae4 	vsub.f32	s10, s13, s9
 800e024:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 800e028:	eee0 6a64 	vfms.f32	s13, s0, s9
 800e02c:	eef0 4a66 	vmov.f32	s9, s13
 800e030:	eec5 6a24 	vdiv.f32	s13, s10, s9
 800e034:	ee66 6a87 	vmul.f32	s13, s13, s14
 800e038:	bb8b      	cbnz	r3, 800e09e <expm1f+0x156>
 800e03a:	eef0 7a47 	vmov.f32	s15, s14
 800e03e:	eed0 7a26 	vfnms.f32	s15, s0, s13
 800e042:	e027      	b.n	800e094 <expm1f+0x14c>
 800e044:	eddf 7a55 	vldr	s15, [pc, #340]	; 800e19c <expm1f+0x254>
 800e048:	2a00      	cmp	r2, #0
 800e04a:	ee20 7a27 	vmul.f32	s14, s0, s15
 800e04e:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800e052:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
 800e056:	bfa8      	it	ge
 800e058:	eef0 7a66 	vmovge.f32	s15, s13
 800e05c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e060:	ed9f 7a46 	vldr	s14, [pc, #280]	; 800e17c <expm1f+0x234>
 800e064:	eddf 6a46 	vldr	s13, [pc, #280]	; 800e180 <expm1f+0x238>
 800e068:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e06c:	ee17 3a90 	vmov	r3, s15
 800e070:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e074:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800e078:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800e07c:	eeb0 7a40 	vmov.f32	s14, s0
 800e080:	e7a4      	b.n	800dfcc <expm1f+0x84>
 800e082:	f1b3 5f4c 	cmp.w	r3, #855638016	; 0x33000000
 800e086:	d208      	bcs.n	800e09a <expm1f+0x152>
 800e088:	eddf 7a38 	vldr	s15, [pc, #224]	; 800e16c <expm1f+0x224>
 800e08c:	ee70 7a27 	vadd.f32	s15, s0, s15
 800e090:	ee77 7ae7 	vsub.f32	s15, s15, s15
 800e094:	ee30 0a67 	vsub.f32	s0, s0, s15
 800e098:	4770      	bx	lr
 800e09a:	2300      	movs	r3, #0
 800e09c:	e79c      	b.n	800dfd8 <expm1f+0x90>
 800e09e:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800e0a2:	1c5a      	adds	r2, r3, #1
 800e0a4:	eed6 7a80 	vfnms.f32	s15, s13, s0
 800e0a8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e0ac:	d106      	bne.n	800e0bc <expm1f+0x174>
 800e0ae:	ee70 7a67 	vsub.f32	s15, s0, s15
 800e0b2:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 800e0b6:	eea7 0aa5 	vfma.f32	s0, s15, s11
 800e0ba:	4770      	bx	lr
 800e0bc:	2b01      	cmp	r3, #1
 800e0be:	d118      	bne.n	800e0f2 <expm1f+0x1aa>
 800e0c0:	eebd 7a00 	vmov.f32	s14, #208	; 0xbe800000 -0.250
 800e0c4:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800e0c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e0cc:	bf41      	itttt	mi
 800e0ce:	ee30 0a25 	vaddmi.f32	s0, s0, s11
 800e0d2:	ee37 0ac0 	vsubmi.f32	s0, s15, s0
 800e0d6:	eef8 7a00 	vmovmi.f32	s15, #128	; 0xc0000000 -2.0
 800e0da:	ee20 0a27 	vmulmi.f32	s0, s0, s15
 800e0de:	bf5f      	itttt	pl
 800e0e0:	ee30 0a67 	vsubpl.f32	s0, s0, s15
 800e0e4:	eef0 7a00 	vmovpl.f32	s15, #0	; 0x40000000  2.0
 800e0e8:	eea0 6a27 	vfmapl.f32	s12, s0, s15
 800e0ec:	eeb0 0a46 	vmovpl.f32	s0, s12
 800e0f0:	4770      	bx	lr
 800e0f2:	1c5a      	adds	r2, r3, #1
 800e0f4:	2a39      	cmp	r2, #57	; 0x39
 800e0f6:	ea4f 51c3 	mov.w	r1, r3, lsl #23
 800e0fa:	d90b      	bls.n	800e114 <expm1f+0x1cc>
 800e0fc:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800e100:	ee36 0a40 	vsub.f32	s0, s12, s0
 800e104:	ee10 3a10 	vmov	r3, s0
 800e108:	440b      	add	r3, r1
 800e10a:	ee00 3a10 	vmov	s0, r3
 800e10e:	ee30 0a46 	vsub.f32	s0, s0, s12
 800e112:	4770      	bx	lr
 800e114:	2b16      	cmp	r3, #22
 800e116:	dc11      	bgt.n	800e13c <expm1f+0x1f4>
 800e118:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800e11c:	fa42 f303 	asr.w	r3, r2, r3
 800e120:	f1c3 537e 	rsb	r3, r3, #1065353216	; 0x3f800000
 800e124:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800e128:	ee07 3a90 	vmov	s15, r3
 800e12c:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800e130:	ee10 3a10 	vmov	r3, s0
 800e134:	440b      	add	r3, r1
 800e136:	ee00 3a10 	vmov	s0, r3
 800e13a:	4770      	bx	lr
 800e13c:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 800e140:	05db      	lsls	r3, r3, #23
 800e142:	ee07 3a10 	vmov	s14, r3
 800e146:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e14a:	ee30 0a67 	vsub.f32	s0, s0, s15
 800e14e:	ee30 0a06 	vadd.f32	s0, s0, s12
 800e152:	e7ed      	b.n	800e130 <expm1f+0x1e8>
 800e154:	eddf 7a11 	vldr	s15, [pc, #68]	; 800e19c <expm1f+0x254>
 800e158:	ee20 7a27 	vmul.f32	s14, s0, s15
 800e15c:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800e160:	e77c      	b.n	800e05c <expm1f+0x114>
 800e162:	bf00      	nop
 800e164:	4195b843 	.word	0x4195b843
 800e168:	42b17217 	.word	0x42b17217
 800e16c:	7149f2ca 	.word	0x7149f2ca
 800e170:	0da24260 	.word	0x0da24260
 800e174:	3eb17218 	.word	0x3eb17218
 800e178:	3f851591 	.word	0x3f851591
 800e17c:	3f317180 	.word	0x3f317180
 800e180:	3717f7d1 	.word	0x3717f7d1
 800e184:	b717f7d1 	.word	0xb717f7d1
 800e188:	b457edbb 	.word	0xb457edbb
 800e18c:	36867e54 	.word	0x36867e54
 800e190:	b8a670cd 	.word	0xb8a670cd
 800e194:	3ad00d01 	.word	0x3ad00d01
 800e198:	bd088889 	.word	0xbd088889
 800e19c:	3fb8aa3b 	.word	0x3fb8aa3b

0800e1a0 <finitef>:
 800e1a0:	ee10 3a10 	vmov	r3, s0
 800e1a4:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 800e1a8:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 800e1ac:	bfac      	ite	ge
 800e1ae:	2000      	movge	r0, #0
 800e1b0:	2001      	movlt	r0, #1
 800e1b2:	4770      	bx	lr

0800e1b4 <nanf>:
 800e1b4:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800e1bc <nanf+0x8>
 800e1b8:	4770      	bx	lr
 800e1ba:	bf00      	nop
 800e1bc:	7fc00000 	.word	0x7fc00000

0800e1c0 <rintf>:
 800e1c0:	b513      	push	{r0, r1, r4, lr}
 800e1c2:	ee10 1a10 	vmov	r1, s0
 800e1c6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800e1ca:	0ddc      	lsrs	r4, r3, #23
 800e1cc:	3c7f      	subs	r4, #127	; 0x7f
 800e1ce:	2c16      	cmp	r4, #22
 800e1d0:	dc46      	bgt.n	800e260 <rintf+0xa0>
 800e1d2:	b32b      	cbz	r3, 800e220 <rintf+0x60>
 800e1d4:	2c00      	cmp	r4, #0
 800e1d6:	ee10 2a10 	vmov	r2, s0
 800e1da:	ea4f 70d1 	mov.w	r0, r1, lsr #31
 800e1de:	da21      	bge.n	800e224 <rintf+0x64>
 800e1e0:	f3c1 0316 	ubfx	r3, r1, #0, #23
 800e1e4:	425b      	negs	r3, r3
 800e1e6:	4a21      	ldr	r2, [pc, #132]	; (800e26c <rintf+0xac>)
 800e1e8:	0a5b      	lsrs	r3, r3, #9
 800e1ea:	0d09      	lsrs	r1, r1, #20
 800e1ec:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e1f0:	0509      	lsls	r1, r1, #20
 800e1f2:	430b      	orrs	r3, r1
 800e1f4:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 800e1f8:	ee07 3a90 	vmov	s15, r3
 800e1fc:	edd2 6a00 	vldr	s13, [r2]
 800e200:	ee36 7aa7 	vadd.f32	s14, s13, s15
 800e204:	ed8d 7a01 	vstr	s14, [sp, #4]
 800e208:	eddd 7a01 	vldr	s15, [sp, #4]
 800e20c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800e210:	ee17 3a90 	vmov	r3, s15
 800e214:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e218:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
 800e21c:	ee00 3a10 	vmov	s0, r3
 800e220:	b002      	add	sp, #8
 800e222:	bd10      	pop	{r4, pc}
 800e224:	4b12      	ldr	r3, [pc, #72]	; (800e270 <rintf+0xb0>)
 800e226:	4123      	asrs	r3, r4
 800e228:	4219      	tst	r1, r3
 800e22a:	d0f9      	beq.n	800e220 <rintf+0x60>
 800e22c:	085b      	lsrs	r3, r3, #1
 800e22e:	4219      	tst	r1, r3
 800e230:	d006      	beq.n	800e240 <rintf+0x80>
 800e232:	ea21 0203 	bic.w	r2, r1, r3
 800e236:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800e23a:	fa43 f404 	asr.w	r4, r3, r4
 800e23e:	4322      	orrs	r2, r4
 800e240:	4b0a      	ldr	r3, [pc, #40]	; (800e26c <rintf+0xac>)
 800e242:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800e246:	ed90 7a00 	vldr	s14, [r0]
 800e24a:	ee07 2a90 	vmov	s15, r2
 800e24e:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e252:	edcd 7a01 	vstr	s15, [sp, #4]
 800e256:	ed9d 0a01 	vldr	s0, [sp, #4]
 800e25a:	ee30 0a47 	vsub.f32	s0, s0, s14
 800e25e:	e7df      	b.n	800e220 <rintf+0x60>
 800e260:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800e264:	d3dc      	bcc.n	800e220 <rintf+0x60>
 800e266:	ee30 0a00 	vadd.f32	s0, s0, s0
 800e26a:	e7d9      	b.n	800e220 <rintf+0x60>
 800e26c:	080738a0 	.word	0x080738a0
 800e270:	007fffff 	.word	0x007fffff

0800e274 <scalbnf>:
 800e274:	b508      	push	{r3, lr}
 800e276:	ee10 2a10 	vmov	r2, s0
 800e27a:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 800e27e:	ed2d 8b02 	vpush	{d8}
 800e282:	eef0 0a40 	vmov.f32	s1, s0
 800e286:	d004      	beq.n	800e292 <scalbnf+0x1e>
 800e288:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800e28c:	d306      	bcc.n	800e29c <scalbnf+0x28>
 800e28e:	ee70 0a00 	vadd.f32	s1, s0, s0
 800e292:	ecbd 8b02 	vpop	{d8}
 800e296:	eeb0 0a60 	vmov.f32	s0, s1
 800e29a:	bd08      	pop	{r3, pc}
 800e29c:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800e2a0:	d21c      	bcs.n	800e2dc <scalbnf+0x68>
 800e2a2:	4b1f      	ldr	r3, [pc, #124]	; (800e320 <scalbnf+0xac>)
 800e2a4:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800e324 <scalbnf+0xb0>
 800e2a8:	4298      	cmp	r0, r3
 800e2aa:	ee60 0a27 	vmul.f32	s1, s0, s15
 800e2ae:	db10      	blt.n	800e2d2 <scalbnf+0x5e>
 800e2b0:	ee10 2a90 	vmov	r2, s1
 800e2b4:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 800e2b8:	3b19      	subs	r3, #25
 800e2ba:	4403      	add	r3, r0
 800e2bc:	2bfe      	cmp	r3, #254	; 0xfe
 800e2be:	dd0f      	ble.n	800e2e0 <scalbnf+0x6c>
 800e2c0:	ed9f 8a19 	vldr	s16, [pc, #100]	; 800e328 <scalbnf+0xb4>
 800e2c4:	eeb0 0a48 	vmov.f32	s0, s16
 800e2c8:	f000 f834 	bl	800e334 <copysignf>
 800e2cc:	ee60 0a08 	vmul.f32	s1, s0, s16
 800e2d0:	e7df      	b.n	800e292 <scalbnf+0x1e>
 800e2d2:	eddf 7a16 	vldr	s15, [pc, #88]	; 800e32c <scalbnf+0xb8>
 800e2d6:	ee60 0aa7 	vmul.f32	s1, s1, s15
 800e2da:	e7da      	b.n	800e292 <scalbnf+0x1e>
 800e2dc:	0ddb      	lsrs	r3, r3, #23
 800e2de:	e7ec      	b.n	800e2ba <scalbnf+0x46>
 800e2e0:	2b00      	cmp	r3, #0
 800e2e2:	dd06      	ble.n	800e2f2 <scalbnf+0x7e>
 800e2e4:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 800e2e8:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 800e2ec:	ee00 3a90 	vmov	s1, r3
 800e2f0:	e7cf      	b.n	800e292 <scalbnf+0x1e>
 800e2f2:	f113 0f16 	cmn.w	r3, #22
 800e2f6:	da06      	bge.n	800e306 <scalbnf+0x92>
 800e2f8:	f24c 3350 	movw	r3, #50000	; 0xc350
 800e2fc:	4298      	cmp	r0, r3
 800e2fe:	dcdf      	bgt.n	800e2c0 <scalbnf+0x4c>
 800e300:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 800e32c <scalbnf+0xb8>
 800e304:	e7de      	b.n	800e2c4 <scalbnf+0x50>
 800e306:	3319      	adds	r3, #25
 800e308:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 800e30c:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 800e310:	eddf 7a07 	vldr	s15, [pc, #28]	; 800e330 <scalbnf+0xbc>
 800e314:	ee07 3a10 	vmov	s14, r3
 800e318:	ee67 0a27 	vmul.f32	s1, s14, s15
 800e31c:	e7b9      	b.n	800e292 <scalbnf+0x1e>
 800e31e:	bf00      	nop
 800e320:	ffff3cb0 	.word	0xffff3cb0
 800e324:	4c000000 	.word	0x4c000000
 800e328:	7149f2ca 	.word	0x7149f2ca
 800e32c:	0da24260 	.word	0x0da24260
 800e330:	33000000 	.word	0x33000000

0800e334 <copysignf>:
 800e334:	ee10 3a10 	vmov	r3, s0
 800e338:	ee10 2a90 	vmov	r2, s1
 800e33c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e340:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800e344:	4313      	orrs	r3, r2
 800e346:	ee00 3a10 	vmov	s0, r3
 800e34a:	4770      	bx	lr

0800e34c <_init>:
 800e34c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e34e:	bf00      	nop
 800e350:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e352:	bc08      	pop	{r3}
 800e354:	469e      	mov	lr, r3
 800e356:	4770      	bx	lr

0800e358 <_fini>:
 800e358:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e35a:	bf00      	nop
 800e35c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e35e:	bc08      	pop	{r3}
 800e360:	469e      	mov	lr, r3
 800e362:	4770      	bx	lr
