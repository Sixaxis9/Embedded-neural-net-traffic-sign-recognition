
Keras_Template.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e194  08000188  08000188  00010188  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00065574  0800e31c  0800e31c  0001e31c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08073890  08073890  00090e5c  2**0
                  CONTENTS
  4 .ARM          00000008  08073890  08073890  00083890  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08073898  08073898  00090e5c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08073898  08073898  00083898  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0807389c  0807389c  0008389c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000e5c  20000000  080738a0  00090000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003070  20000e5c  080746fc  00090e5c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20003ecc  080746fc  00093ecc  2**0
                  ALLOC
 11 .ARM.attributes 00000034  00000000  00000000  00090e5c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000c94d  00000000  00000000  00090e90  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00001e6d  00000000  00000000  0009d7dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000a00  00000000  00000000  0009f650  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 000008e8  00000000  00000000  000a0050  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  00026e01  00000000  00000000  000a0938  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   000098be  00000000  00000000  000c7739  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000f2994  00000000  00000000  000d0ff7  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      00006c70  00000000  00000000  001c398b  2**0
                  CONTENTS, READONLY
 20 .iar.rtmodel  0000022a  00000000  00000000  001ca5fb  2**0
                  CONTENTS, READONLY
 21 .iar_vfe_header 00000028  00000000  00000000  001ca828  2**2
                  CONTENTS, READONLY
 22 .debug_frame  00007afc  00000000  00000000  001ca850  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000e5c 	.word	0x20000e5c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	0800e304 	.word	0x0800e304

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000e60 	.word	0x20000e60
 80001c4:	0800e304 	.word	0x0800e304

080001c8 <_ai_platform_get_io_buffers_info>:
 80001c8:	e92d 4ff2 	stmdb	sp!, {r1, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80001cc:	2500      	movs	r5, #0
 80001ce:	46aa      	mov	sl, r5
 80001d0:	b082      	sub	sp, #8
 80001d2:	4607      	mov	r7, r0
 80001d4:	46ab      	mov	fp, r5
 80001d6:	46d0      	mov	r8, sl
 80001d8:	46d1      	mov	r9, sl
 80001da:	e028      	b.n	800022e <_ai_platform_get_io_buffers_info+0x66>
 80001dc:	2000      	movs	r0, #0
 80001de:	e01c      	b.n	800021a <_ai_platform_get_io_buffers_info+0x52>
 80001e0:	f850 400a 	ldr.w	r4, [r0, sl]
 80001e4:	b364      	cbz	r4, 8000240 <_ai_platform_get_io_buffers_info+0x78>
 80001e6:	68b8      	ldr	r0, [r7, #8]
 80001e8:	6841      	ldr	r1, [r0, #4]
 80001ea:	6880      	ldr	r0, [r0, #8]
 80001ec:	4440      	add	r0, r8
 80001ee:	eb01 0609 	add.w	r6, r1, r9
 80001f2:	9000      	str	r0, [sp, #0]
 80001f4:	69a1      	ldr	r1, [r4, #24]
 80001f6:	6808      	ldr	r0, [r1, #0]
 80001f8:	f006 f8ea 	bl	80063d0 <ai_array_to_buffer_fmt>
 80001fc:	6030      	str	r0, [r6, #0]
 80001fe:	2101      	movs	r1, #1
 8000200:	80b1      	strh	r1, [r6, #4]
 8000202:	68e0      	ldr	r0, [r4, #12]
 8000204:	68c1      	ldr	r1, [r0, #12]
 8000206:	80f1      	strh	r1, [r6, #6]
 8000208:	6882      	ldr	r2, [r0, #8]
 800020a:	8132      	strh	r2, [r6, #8]
 800020c:	6840      	ldr	r0, [r0, #4]
 800020e:	60f0      	str	r0, [r6, #12]
 8000210:	69a1      	ldr	r1, [r4, #24]
 8000212:	688a      	ldr	r2, [r1, #8]
 8000214:	6132      	str	r2, [r6, #16]
 8000216:	9800      	ldr	r0, [sp, #0]
 8000218:	b9e0      	cbnz	r0, 8000254 <_ai_platform_get_io_buffers_info+0x8c>
 800021a:	6170      	str	r0, [r6, #20]
 800021c:	1c6d      	adds	r5, r5, #1
 800021e:	f10b 0b01 	add.w	fp, fp, #1
 8000222:	f109 0918 	add.w	r9, r9, #24
 8000226:	f108 0808 	add.w	r8, r8, #8
 800022a:	f10a 0a04 	add.w	sl, sl, #4
 800022e:	2f00      	cmp	r7, #0
 8000230:	bf14      	ite	ne
 8000232:	8838      	ldrhne	r0, [r7, #0]
 8000234:	2000      	moveq	r0, #0
 8000236:	4583      	cmp	fp, r0
 8000238:	d202      	bcs.n	8000240 <_ai_platform_get_io_buffers_info+0x78>
 800023a:	6878      	ldr	r0, [r7, #4]
 800023c:	2800      	cmp	r0, #0
 800023e:	d1cf      	bne.n	80001e0 <_ai_platform_get_io_buffers_info+0x18>
 8000240:	b2a8      	uxth	r0, r5
 8000242:	b118      	cbz	r0, 800024c <_ai_platform_get_io_buffers_info+0x84>
 8000244:	68b9      	ldr	r1, [r7, #8]
 8000246:	9802      	ldr	r0, [sp, #8]
 8000248:	684a      	ldr	r2, [r1, #4]
 800024a:	6002      	str	r2, [r0, #0]
 800024c:	b2a8      	uxth	r0, r5
 800024e:	b003      	add	sp, #12
 8000250:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000254:	9900      	ldr	r1, [sp, #0]
 8000256:	2000      	movs	r0, #0
 8000258:	6008      	str	r0, [r1, #0]
 800025a:	9a00      	ldr	r2, [sp, #0]
 800025c:	6820      	ldr	r0, [r4, #0]
 800025e:	6050      	str	r0, [r2, #4]
 8000260:	2800      	cmp	r0, #0
 8000262:	bf1c      	itt	ne
 8000264:	8840      	ldrhne	r0, [r0, #2]
 8000266:	2800      	cmpne	r0, #0
 8000268:	d0b8      	beq.n	80001dc <_ai_platform_get_io_buffers_info+0x14>
 800026a:	9800      	ldr	r0, [sp, #0]
 800026c:	2101      	movs	r1, #1
 800026e:	6001      	str	r1, [r0, #0]
 8000270:	9800      	ldr	r0, [sp, #0]
 8000272:	e7d2      	b.n	800021a <_ai_platform_get_io_buffers_info+0x52>

08000274 <_platform_network_state_setup>:
 8000274:	b430      	push	{r4, r5}
 8000276:	68d3      	ldr	r3, [r2, #12]
 8000278:	6955      	ldr	r5, [r2, #20]
 800027a:	68dc      	ldr	r4, [r3, #12]
 800027c:	68eb      	ldr	r3, [r5, #12]
 800027e:	435c      	muls	r4, r3
 8000280:	6084      	str	r4, [r0, #8]
 8000282:	888d      	ldrh	r5, [r1, #4]
 8000284:	436c      	muls	r4, r5
 8000286:	60c4      	str	r4, [r0, #12]
 8000288:	6909      	ldr	r1, [r1, #16]
 800028a:	68c3      	ldr	r3, [r0, #12]
 800028c:	6041      	str	r1, [r0, #4]
 800028e:	4419      	add	r1, r3
 8000290:	6001      	str	r1, [r0, #0]
 8000292:	6992      	ldr	r2, [r2, #24]
 8000294:	6814      	ldr	r4, [r2, #0]
 8000296:	00a1      	lsls	r1, r4, #2
 8000298:	d407      	bmi.n	80002aa <_platform_network_state_setup+0x36>
 800029a:	6894      	ldr	r4, [r2, #8]
 800029c:	68d1      	ldr	r1, [r2, #12]
 800029e:	6843      	ldr	r3, [r0, #4]
 80002a0:	1a64      	subs	r4, r4, r1
 80002a2:	1919      	adds	r1, r3, r4
 80002a4:	6091      	str	r1, [r2, #8]
 80002a6:	6840      	ldr	r0, [r0, #4]
 80002a8:	60d0      	str	r0, [r2, #12]
 80002aa:	bc30      	pop	{r4, r5}
 80002ac:	4770      	bx	lr

080002ae <ai_platform_runtime_get_revision>:
 80002ae:	f8df 0814 	ldr.w	r0, [pc, #2068]	; 8000ac4 <.text_18>
 80002b2:	6801      	ldr	r1, [r0, #0]
 80002b4:	0849      	lsrs	r1, r1, #1
 80002b6:	0049      	lsls	r1, r1, #1
 80002b8:	6001      	str	r1, [r0, #0]
 80002ba:	2001      	movs	r0, #1
 80002bc:	f8df 1808 	ldr.w	r1, [pc, #2056]	; 8000ac8 <.text_19>
 80002c0:	6088      	str	r0, [r1, #8]
 80002c2:	6888      	ldr	r0, [r1, #8]
 80002c4:	2800      	cmp	r0, #0
 80002c6:	d1fc      	bne.n	80002c2 <ai_platform_runtime_get_revision+0x14>
 80002c8:	f8df 2800 	ldr.w	r2, [pc, #2048]	; 8000acc <.text_20>
 80002cc:	600a      	str	r2, [r1, #0]
 80002ce:	6808      	ldr	r0, [r1, #0]
 80002d0:	f8df 17fc 	ldr.w	r1, [pc, #2044]	; 8000ad0 <.text_21>
 80002d4:	4288      	cmp	r0, r1
 80002d6:	d000      	beq.n	80002da <ai_platform_runtime_get_revision+0x2c>
 80002d8:	e7fe      	b.n	80002d8 <ai_platform_runtime_get_revision+0x2a>
 80002da:	a0ad      	add	r0, pc, #692	; (adr r0, 8000590 <.text_13>)
 80002dc:	4770      	bx	lr

080002de <ai_platform_runtime_get_version>:
 80002de:	f8df 07e4 	ldr.w	r0, [pc, #2020]	; 8000ac4 <.text_18>
 80002e2:	6801      	ldr	r1, [r0, #0]
 80002e4:	0849      	lsrs	r1, r1, #1
 80002e6:	0049      	lsls	r1, r1, #1
 80002e8:	6001      	str	r1, [r0, #0]
 80002ea:	2001      	movs	r0, #1
 80002ec:	f8df 17d8 	ldr.w	r1, [pc, #2008]	; 8000ac8 <.text_19>
 80002f0:	6088      	str	r0, [r1, #8]
 80002f2:	6888      	ldr	r0, [r1, #8]
 80002f4:	2800      	cmp	r0, #0
 80002f6:	d1fc      	bne.n	80002f2 <ai_platform_runtime_get_version+0x14>
 80002f8:	f8df 27d0 	ldr.w	r2, [pc, #2000]	; 8000acc <.text_20>
 80002fc:	600a      	str	r2, [r1, #0]
 80002fe:	6808      	ldr	r0, [r1, #0]
 8000300:	f8df 17cc 	ldr.w	r1, [pc, #1996]	; 8000ad0 <.text_21>
 8000304:	4288      	cmp	r0, r1
 8000306:	d000      	beq.n	800030a <ai_platform_runtime_get_version+0x2c>
 8000308:	e7fe      	b.n	8000308 <ai_platform_runtime_get_version+0x2a>
 800030a:	f20f 72d0 	addw	r2, pc, #2000	; 0x7d0
 800030e:	6810      	ldr	r0, [r2, #0]
 8000310:	4770      	bx	lr

08000312 <ai_platform_api_get_version>:
 8000312:	f8df 07b0 	ldr.w	r0, [pc, #1968]	; 8000ac4 <.text_18>
 8000316:	6801      	ldr	r1, [r0, #0]
 8000318:	0849      	lsrs	r1, r1, #1
 800031a:	0049      	lsls	r1, r1, #1
 800031c:	6001      	str	r1, [r0, #0]
 800031e:	2001      	movs	r0, #1
 8000320:	f8df 17a4 	ldr.w	r1, [pc, #1956]	; 8000ac8 <.text_19>
 8000324:	6088      	str	r0, [r1, #8]
 8000326:	6888      	ldr	r0, [r1, #8]
 8000328:	2800      	cmp	r0, #0
 800032a:	d1fc      	bne.n	8000326 <ai_platform_api_get_version+0x14>
 800032c:	f8df 279c 	ldr.w	r2, [pc, #1948]	; 8000acc <.text_20>
 8000330:	600a      	str	r2, [r1, #0]
 8000332:	6808      	ldr	r0, [r1, #0]
 8000334:	f8df 1798 	ldr.w	r1, [pc, #1944]	; 8000ad0 <.text_21>
 8000338:	4288      	cmp	r0, r1
 800033a:	d000      	beq.n	800033e <ai_platform_api_get_version+0x2c>
 800033c:	e7fe      	b.n	800033c <ai_platform_api_get_version+0x2a>
 800033e:	f20f 72a0 	addw	r2, pc, #1952	; 0x7a0
 8000342:	6810      	ldr	r0, [r2, #0]
 8000344:	4770      	bx	lr

08000346 <ai_platform_interface_api_get_version>:
 8000346:	f8df 077c 	ldr.w	r0, [pc, #1916]	; 8000ac4 <.text_18>
 800034a:	6801      	ldr	r1, [r0, #0]
 800034c:	0849      	lsrs	r1, r1, #1
 800034e:	0049      	lsls	r1, r1, #1
 8000350:	6001      	str	r1, [r0, #0]
 8000352:	2001      	movs	r0, #1
 8000354:	f8df 1770 	ldr.w	r1, [pc, #1904]	; 8000ac8 <.text_19>
 8000358:	6088      	str	r0, [r1, #8]
 800035a:	6888      	ldr	r0, [r1, #8]
 800035c:	2800      	cmp	r0, #0
 800035e:	d1fc      	bne.n	800035a <ai_platform_interface_api_get_version+0x14>
 8000360:	f8df 2768 	ldr.w	r2, [pc, #1896]	; 8000acc <.text_20>
 8000364:	600a      	str	r2, [r1, #0]
 8000366:	6808      	ldr	r0, [r1, #0]
 8000368:	f8df 1764 	ldr.w	r1, [pc, #1892]	; 8000ad0 <.text_21>
 800036c:	4288      	cmp	r0, r1
 800036e:	d000      	beq.n	8000372 <ai_platform_interface_api_get_version+0x2c>
 8000370:	e7fe      	b.n	8000370 <ai_platform_interface_api_get_version+0x2a>
 8000372:	f20f 7270 	addw	r2, pc, #1904	; 0x770
 8000376:	6810      	ldr	r0, [r2, #0]
 8000378:	4770      	bx	lr

0800037a <ai_platform_context_acquire>:
 800037a:	b120      	cbz	r0, 8000386 <ai_platform_context_acquire+0xc>
 800037c:	6801      	ldr	r1, [r0, #0]
 800037e:	f8df 2754 	ldr.w	r2, [pc, #1876]	; 8000ad4 <.text_22>
 8000382:	4291      	cmp	r1, r2
 8000384:	d000      	beq.n	8000388 <ai_platform_context_acquire+0xe>
 8000386:	2000      	movs	r0, #0
 8000388:	f8df 1738 	ldr.w	r1, [pc, #1848]	; 8000ac4 <.text_18>
 800038c:	680a      	ldr	r2, [r1, #0]
 800038e:	0852      	lsrs	r2, r2, #1
 8000390:	0052      	lsls	r2, r2, #1
 8000392:	600a      	str	r2, [r1, #0]
 8000394:	2101      	movs	r1, #1
 8000396:	f8df 2730 	ldr.w	r2, [pc, #1840]	; 8000ac8 <.text_19>
 800039a:	6091      	str	r1, [r2, #8]
 800039c:	6891      	ldr	r1, [r2, #8]
 800039e:	2900      	cmp	r1, #0
 80003a0:	d1fc      	bne.n	800039c <ai_platform_context_acquire+0x22>
 80003a2:	f8df 3728 	ldr.w	r3, [pc, #1832]	; 8000acc <.text_20>
 80003a6:	6013      	str	r3, [r2, #0]
 80003a8:	6811      	ldr	r1, [r2, #0]
 80003aa:	f8df 2724 	ldr.w	r2, [pc, #1828]	; 8000ad0 <.text_21>
 80003ae:	4291      	cmp	r1, r2
 80003b0:	d000      	beq.n	80003b4 <ai_platform_context_acquire+0x3a>
 80003b2:	e7fe      	b.n	80003b2 <ai_platform_context_acquire+0x38>
 80003b4:	4770      	bx	lr

080003b6 <ai_platform_context_release>:
 80003b6:	f8df 171c 	ldr.w	r1, [pc, #1820]	; 8000ad4 <.text_22>
 80003ba:	6001      	str	r1, [r0, #0]
 80003bc:	4770      	bx	lr

080003be <ai_platform_network_get_error>:
 80003be:	b120      	cbz	r0, 80003ca <ai_platform_network_get_error+0xc>
 80003c0:	6801      	ldr	r1, [r0, #0]
 80003c2:	f8df 2710 	ldr.w	r2, [pc, #1808]	; 8000ad4 <.text_22>
 80003c6:	4291      	cmp	r1, r2
 80003c8:	d000      	beq.n	80003cc <ai_platform_network_get_error+0xe>
 80003ca:	2000      	movs	r0, #0
 80003cc:	f8df 16f4 	ldr.w	r1, [pc, #1780]	; 8000ac4 <.text_18>
 80003d0:	680a      	ldr	r2, [r1, #0]
 80003d2:	0852      	lsrs	r2, r2, #1
 80003d4:	0052      	lsls	r2, r2, #1
 80003d6:	600a      	str	r2, [r1, #0]
 80003d8:	2101      	movs	r1, #1
 80003da:	f8df 26ec 	ldr.w	r2, [pc, #1772]	; 8000ac8 <.text_19>
 80003de:	6091      	str	r1, [r2, #8]
 80003e0:	6891      	ldr	r1, [r2, #8]
 80003e2:	2900      	cmp	r1, #0
 80003e4:	d1fc      	bne.n	80003e0 <ai_platform_network_get_error+0x22>
 80003e6:	f8df 36e4 	ldr.w	r3, [pc, #1764]	; 8000acc <.text_20>
 80003ea:	6013      	str	r3, [r2, #0]
 80003ec:	6811      	ldr	r1, [r2, #0]
 80003ee:	f8df 26e0 	ldr.w	r2, [pc, #1760]	; 8000ad0 <.text_21>
 80003f2:	4291      	cmp	r1, r2
 80003f4:	d000      	beq.n	80003f8 <ai_platform_network_get_error+0x3a>
 80003f6:	e7fe      	b.n	80003f6 <ai_platform_network_get_error+0x38>
 80003f8:	2800      	cmp	r0, #0
 80003fa:	bf1c      	itt	ne
 80003fc:	3010      	addne	r0, #16
 80003fe:	f000 bb83 	bne.w	8000b08 <core_get_error>
 8000402:	f20f 60f4 	addw	r0, pc, #1780	; 0x6f4
 8000406:	6800      	ldr	r0, [r0, #0]
 8000408:	4770      	bx	lr

0800040a <ai_platform_network_set_error>:
 800040a:	2800      	cmp	r0, #0
 800040c:	bf1c      	itt	ne
 800040e:	3010      	addne	r0, #16
 8000410:	f000 bb7f 	bne.w	8000b12 <core_set_error>
 8000414:	4770      	bx	lr

08000416 <ai_platform_api_get_network_report>:
 8000416:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800041a:	ea5f 0900 	movs.w	r9, r0
 800041e:	b081      	sub	sp, #4
 8000420:	460c      	mov	r4, r1
 8000422:	d005      	beq.n	8000430 <ai_platform_api_get_network_report+0x1a>
 8000424:	f8d9 0000 	ldr.w	r0, [r9]
 8000428:	f8df 16a8 	ldr.w	r1, [pc, #1704]	; 8000ad4 <.text_22>
 800042c:	4288      	cmp	r0, r1
 800042e:	d001      	beq.n	8000434 <ai_platform_api_get_network_report+0x1e>
 8000430:	f04f 0900 	mov.w	r9, #0
 8000434:	f8df 568c 	ldr.w	r5, [pc, #1676]	; 8000ac4 <.text_18>
 8000438:	f8df 668c 	ldr.w	r6, [pc, #1676]	; 8000ac8 <.text_19>
 800043c:	6828      	ldr	r0, [r5, #0]
 800043e:	0840      	lsrs	r0, r0, #1
 8000440:	0040      	lsls	r0, r0, #1
 8000442:	6028      	str	r0, [r5, #0]
 8000444:	2101      	movs	r1, #1
 8000446:	60b1      	str	r1, [r6, #8]
 8000448:	68b0      	ldr	r0, [r6, #8]
 800044a:	2800      	cmp	r0, #0
 800044c:	d1fc      	bne.n	8000448 <ai_platform_api_get_network_report+0x32>
 800044e:	f8df 767c 	ldr.w	r7, [pc, #1660]	; 8000acc <.text_20>
 8000452:	f8df 867c 	ldr.w	r8, [pc, #1660]	; 8000ad0 <.text_21>
 8000456:	6037      	str	r7, [r6, #0]
 8000458:	6830      	ldr	r0, [r6, #0]
 800045a:	4540      	cmp	r0, r8
 800045c:	d000      	beq.n	8000460 <ai_platform_api_get_network_report+0x4a>
 800045e:	e7fe      	b.n	800045e <ai_platform_api_get_network_report+0x48>
 8000460:	f1b9 0f00 	cmp.w	r9, #0
 8000464:	bf18      	it	ne
 8000466:	2c00      	cmpne	r4, #0
 8000468:	d034      	beq.n	80004d4 <ai_platform_api_get_network_report+0xbe>
 800046a:	2000      	movs	r0, #0
 800046c:	66e0      	str	r0, [r4, #108]	; 0x6c
 800046e:	f8d9 2050 	ldr.w	r2, [r9, #80]	; 0x50
 8000472:	b152      	cbz	r2, 800048a <ai_platform_api_get_network_report+0x74>
 8000474:	e000      	b.n	8000478 <ai_platform_api_get_network_report+0x62>
 8000476:	4602      	mov	r2, r0
 8000478:	6ee1      	ldr	r1, [r4, #108]	; 0x6c
 800047a:	1c49      	adds	r1, r1, #1
 800047c:	66e1      	str	r1, [r4, #108]	; 0x6c
 800047e:	68d0      	ldr	r0, [r2, #12]
 8000480:	4282      	cmp	r2, r0
 8000482:	bf18      	it	ne
 8000484:	2800      	cmpne	r0, #0
 8000486:	d1f6      	bne.n	8000476 <ai_platform_api_get_network_report+0x60>
 8000488:	b911      	cbnz	r1, 8000490 <ai_platform_api_get_network_report+0x7a>
 800048a:	2218      	movs	r2, #24
 800048c:	2111      	movs	r1, #17
 800048e:	e01d      	b.n	80004cc <ai_platform_api_get_network_report+0xb6>
 8000490:	f8b9 0048 	ldrh.w	r0, [r9, #72]	; 0x48
 8000494:	b108      	cbz	r0, 800049a <ai_platform_api_get_network_report+0x84>
 8000496:	f8d9 004c 	ldr.w	r0, [r9, #76]	; 0x4c
 800049a:	f104 0134 	add.w	r1, r4, #52	; 0x34
 800049e:	f7ff fe93 	bl	80001c8 <_ai_platform_get_io_buffers_info>
 80004a2:	8620      	strh	r0, [r4, #48]	; 0x30
 80004a4:	b910      	cbnz	r0, 80004ac <ai_platform_api_get_network_report+0x96>
 80004a6:	2218      	movs	r2, #24
 80004a8:	2112      	movs	r1, #18
 80004aa:	e00f      	b.n	80004cc <ai_platform_api_get_network_report+0xb6>
 80004ac:	f8b9 0048 	ldrh.w	r0, [r9, #72]	; 0x48
 80004b0:	2802      	cmp	r0, #2
 80004b2:	bfa6      	itte	ge
 80004b4:	f8d9 004c 	ldrge.w	r0, [r9, #76]	; 0x4c
 80004b8:	300c      	addge	r0, #12
 80004ba:	2000      	movlt	r0, #0
 80004bc:	f104 0138 	add.w	r1, r4, #56	; 0x38
 80004c0:	f7ff fe82 	bl	80001c8 <_ai_platform_get_io_buffers_info>
 80004c4:	8660      	strh	r0, [r4, #50]	; 0x32
 80004c6:	b948      	cbnz	r0, 80004dc <ai_platform_api_get_network_report+0xc6>
 80004c8:	2218      	movs	r2, #24
 80004ca:	2113      	movs	r1, #19
 80004cc:	f109 0010 	add.w	r0, r9, #16
 80004d0:	f000 fb1f 	bl	8000b12 <core_set_error>
 80004d4:	2000      	movs	r0, #0
 80004d6:	b001      	add	sp, #4
 80004d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80004dc:	f8d9 0004 	ldr.w	r0, [r9, #4]
 80004e0:	6720      	str	r0, [r4, #112]	; 0x70
 80004e2:	f109 0230 	add.w	r2, r9, #48	; 0x30
 80004e6:	e892 5c09 	ldmia.w	r2, {r0, r3, sl, fp, ip, lr}
 80004ea:	f104 013c 	add.w	r1, r4, #60	; 0x3c
 80004ee:	f109 0918 	add.w	r9, r9, #24
 80004f2:	e881 5c09 	stmia.w	r1, {r0, r3, sl, fp, ip, lr}
 80004f6:	e899 540e 	ldmia.w	r9, {r1, r2, r3, sl, ip, lr}
 80004fa:	f104 0054 	add.w	r0, r4, #84	; 0x54
 80004fe:	e880 540e 	stmia.w	r0, {r1, r2, r3, sl, ip, lr}
 8000502:	6828      	ldr	r0, [r5, #0]
 8000504:	0840      	lsrs	r0, r0, #1
 8000506:	0040      	lsls	r0, r0, #1
 8000508:	6028      	str	r0, [r5, #0]
 800050a:	2301      	movs	r3, #1
 800050c:	60b3      	str	r3, [r6, #8]
 800050e:	68b0      	ldr	r0, [r6, #8]
 8000510:	2800      	cmp	r0, #0
 8000512:	d1fc      	bne.n	800050e <ai_platform_api_get_network_report+0xf8>
 8000514:	6037      	str	r7, [r6, #0]
 8000516:	6831      	ldr	r1, [r6, #0]
 8000518:	4541      	cmp	r1, r8
 800051a:	d000      	beq.n	800051e <ai_platform_api_get_network_report+0x108>
 800051c:	e7fe      	b.n	800051c <ai_platform_api_get_network_report+0x106>
 800051e:	a01c      	add	r0, pc, #112	; (adr r0, 8000590 <.text_13>)
 8000520:	6120      	str	r0, [r4, #16]
 8000522:	6829      	ldr	r1, [r5, #0]
 8000524:	0849      	lsrs	r1, r1, #1
 8000526:	0049      	lsls	r1, r1, #1
 8000528:	6029      	str	r1, [r5, #0]
 800052a:	60b3      	str	r3, [r6, #8]
 800052c:	68b0      	ldr	r0, [r6, #8]
 800052e:	2800      	cmp	r0, #0
 8000530:	d1fc      	bne.n	800052c <ai_platform_api_get_network_report+0x116>
 8000532:	6037      	str	r7, [r6, #0]
 8000534:	6831      	ldr	r1, [r6, #0]
 8000536:	4541      	cmp	r1, r8
 8000538:	d000      	beq.n	800053c <ai_platform_api_get_network_report+0x126>
 800053a:	e7fe      	b.n	800053a <ai_platform_api_get_network_report+0x124>
 800053c:	f20f 509c 	addw	r0, pc, #1436	; 0x59c
 8000540:	6802      	ldr	r2, [r0, #0]
 8000542:	6162      	str	r2, [r4, #20]
 8000544:	6829      	ldr	r1, [r5, #0]
 8000546:	0849      	lsrs	r1, r1, #1
 8000548:	0049      	lsls	r1, r1, #1
 800054a:	6029      	str	r1, [r5, #0]
 800054c:	60b3      	str	r3, [r6, #8]
 800054e:	68b0      	ldr	r0, [r6, #8]
 8000550:	2800      	cmp	r0, #0
 8000552:	d1fc      	bne.n	800054e <ai_platform_api_get_network_report+0x138>
 8000554:	6037      	str	r7, [r6, #0]
 8000556:	6831      	ldr	r1, [r6, #0]
 8000558:	4541      	cmp	r1, r8
 800055a:	d000      	beq.n	800055e <ai_platform_api_get_network_report+0x148>
 800055c:	e7fe      	b.n	800055c <ai_platform_api_get_network_report+0x146>
 800055e:	f20f 5080 	addw	r0, pc, #1408	; 0x580
 8000562:	6802      	ldr	r2, [r0, #0]
 8000564:	6262      	str	r2, [r4, #36]	; 0x24
 8000566:	6829      	ldr	r1, [r5, #0]
 8000568:	0849      	lsrs	r1, r1, #1
 800056a:	0049      	lsls	r1, r1, #1
 800056c:	6029      	str	r1, [r5, #0]
 800056e:	60b3      	str	r3, [r6, #8]
 8000570:	68b0      	ldr	r0, [r6, #8]
 8000572:	2800      	cmp	r0, #0
 8000574:	d1fc      	bne.n	8000570 <ai_platform_api_get_network_report+0x15a>
 8000576:	6037      	str	r7, [r6, #0]
 8000578:	6831      	ldr	r1, [r6, #0]
 800057a:	4541      	cmp	r1, r8
 800057c:	d000      	beq.n	8000580 <ai_platform_api_get_network_report+0x16a>
 800057e:	e7fe      	b.n	800057e <ai_platform_api_get_network_report+0x168>
 8000580:	f20f 5060 	addw	r0, pc, #1376	; 0x560
 8000584:	6802      	ldr	r2, [r0, #0]
 8000586:	62a2      	str	r2, [r4, #40]	; 0x28
 8000588:	2001      	movs	r0, #1
 800058a:	b001      	add	sp, #4
 800058c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08000590 <.text_13>:
 8000590:	00000000 	.word	0x00000000

08000594 <ai_platform_network_create>:
 8000594:	b570      	push	{r4, r5, r6, lr}
 8000596:	9d04      	ldr	r5, [sp, #16]
 8000598:	4604      	mov	r4, r0
 800059a:	9805      	ldr	r0, [sp, #20]
 800059c:	b2db      	uxtb	r3, r3
 800059e:	042d      	lsls	r5, r5, #16
 80005a0:	ea45 6503 	orr.w	r5, r5, r3, lsl #24
 80005a4:	ea45 2500 	orr.w	r5, r5, r0, lsl #8
 80005a8:	f20f 5050 	addw	r0, pc, #1360	; 0x550
 80005ac:	6806      	ldr	r6, [r0, #0]
 80005ae:	f8df 0514 	ldr.w	r0, [pc, #1300]	; 8000ac4 <.text_18>
 80005b2:	6801      	ldr	r1, [r0, #0]
 80005b4:	0849      	lsrs	r1, r1, #1
 80005b6:	0049      	lsls	r1, r1, #1
 80005b8:	6001      	str	r1, [r0, #0]
 80005ba:	2001      	movs	r0, #1
 80005bc:	f8df 1508 	ldr.w	r1, [pc, #1288]	; 8000ac8 <.text_19>
 80005c0:	6088      	str	r0, [r1, #8]
 80005c2:	6888      	ldr	r0, [r1, #8]
 80005c4:	2800      	cmp	r0, #0
 80005c6:	d1fc      	bne.n	80005c2 <ai_platform_network_create+0x2e>
 80005c8:	f8df 3500 	ldr.w	r3, [pc, #1280]	; 8000acc <.text_20>
 80005cc:	600b      	str	r3, [r1, #0]
 80005ce:	6808      	ldr	r0, [r1, #0]
 80005d0:	f8df 14fc 	ldr.w	r1, [pc, #1276]	; 8000ad0 <.text_21>
 80005d4:	4288      	cmp	r0, r1
 80005d6:	d000      	beq.n	80005da <ai_platform_network_create+0x46>
 80005d8:	e7fe      	b.n	80005d8 <ai_platform_network_create+0x44>
 80005da:	b91c      	cbnz	r4, 80005e4 <ai_platform_network_create+0x50>
 80005dc:	f20f 5020 	addw	r0, pc, #1312	; 0x520
 80005e0:	6800      	ldr	r0, [r0, #0]
 80005e2:	bd70      	pop	{r4, r5, r6, pc}
 80005e4:	f8df 14ec 	ldr.w	r1, [pc, #1260]	; 8000ad4 <.text_22>
 80005e8:	6011      	str	r1, [r2, #0]
 80005ea:	6022      	str	r2, [r4, #0]
 80005ec:	f000 fa8a 	bl	8000b04 <core_init>
 80005f0:	b910      	cbnz	r0, 80005f8 <ai_platform_network_create+0x64>
 80005f2:	f20f 40f4 	addw	r0, pc, #1268	; 0x4f4
 80005f6:	e00d      	b.n	8000614 <ai_platform_network_create+0x80>
 80005f8:	f8df 14dc 	ldr.w	r1, [pc, #1244]	; 8000ad8 <.text_23>
 80005fc:	428d      	cmp	r5, r1
 80005fe:	bf28      	it	cs
 8000600:	f20f 40e8 	addwcs	r0, pc, #1256	; 0x4e8
 8000604:	d206      	bcs.n	8000614 <ai_platform_network_create+0x80>
 8000606:	f20f 40e8 	addw	r0, pc, #1256	; 0x4e8
 800060a:	f000 fa97 	bl	8000b3c <ai_check_custom_types>
 800060e:	b920      	cbnz	r0, 800061a <ai_platform_network_create+0x86>
 8000610:	f20f 40e0 	addw	r0, pc, #1248	; 0x4e0
 8000614:	6806      	ldr	r6, [r0, #0]
 8000616:	2100      	movs	r1, #0
 8000618:	6021      	str	r1, [r4, #0]
 800061a:	4630      	mov	r0, r6
 800061c:	bd70      	pop	{r4, r5, r6, pc}

0800061e <ai_platform_network_destroy>:
 800061e:	b130      	cbz	r0, 800062e <ai_platform_network_destroy+0x10>
 8000620:	6801      	ldr	r1, [r0, #0]
 8000622:	f8df 24b0 	ldr.w	r2, [pc, #1200]	; 8000ad4 <.text_22>
 8000626:	4291      	cmp	r1, r2
 8000628:	bf08      	it	eq
 800062a:	4602      	moveq	r2, r0
 800062c:	d000      	beq.n	8000630 <ai_platform_network_destroy+0x12>
 800062e:	2200      	movs	r2, #0
 8000630:	f8df 1490 	ldr.w	r1, [pc, #1168]	; 8000ac4 <.text_18>
 8000634:	680b      	ldr	r3, [r1, #0]
 8000636:	085b      	lsrs	r3, r3, #1
 8000638:	005b      	lsls	r3, r3, #1
 800063a:	600b      	str	r3, [r1, #0]
 800063c:	2101      	movs	r1, #1
 800063e:	f8df 3488 	ldr.w	r3, [pc, #1160]	; 8000ac8 <.text_19>
 8000642:	6099      	str	r1, [r3, #8]
 8000644:	6899      	ldr	r1, [r3, #8]
 8000646:	2900      	cmp	r1, #0
 8000648:	d1fc      	bne.n	8000644 <ai_platform_network_destroy+0x26>
 800064a:	f8df c480 	ldr.w	ip, [pc, #1152]	; 8000acc <.text_20>
 800064e:	f8c3 c000 	str.w	ip, [r3]
 8000652:	6819      	ldr	r1, [r3, #0]
 8000654:	f8df 3478 	ldr.w	r3, [pc, #1144]	; 8000ad0 <.text_21>
 8000658:	4299      	cmp	r1, r3
 800065a:	d000      	beq.n	800065e <ai_platform_network_destroy+0x40>
 800065c:	e7fe      	b.n	800065c <ai_platform_network_destroy+0x3e>
 800065e:	b102      	cbz	r2, 8000662 <ai_platform_network_destroy+0x44>
 8000660:	2000      	movs	r0, #0
 8000662:	4770      	bx	lr

08000664 <ai_platform_network_init>:
 8000664:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000668:	b081      	sub	sp, #4
 800066a:	460a      	mov	r2, r1
 800066c:	b120      	cbz	r0, 8000678 <ai_platform_network_init+0x14>
 800066e:	6801      	ldr	r1, [r0, #0]
 8000670:	f8df 3460 	ldr.w	r3, [pc, #1120]	; 8000ad4 <.text_22>
 8000674:	4299      	cmp	r1, r3
 8000676:	d000      	beq.n	800067a <ai_platform_network_init+0x16>
 8000678:	2000      	movs	r0, #0
 800067a:	f8df 1448 	ldr.w	r1, [pc, #1096]	; 8000ac4 <.text_18>
 800067e:	680b      	ldr	r3, [r1, #0]
 8000680:	085b      	lsrs	r3, r3, #1
 8000682:	005b      	lsls	r3, r3, #1
 8000684:	600b      	str	r3, [r1, #0]
 8000686:	2101      	movs	r1, #1
 8000688:	f8df 343c 	ldr.w	r3, [pc, #1084]	; 8000ac8 <.text_19>
 800068c:	6099      	str	r1, [r3, #8]
 800068e:	6899      	ldr	r1, [r3, #8]
 8000690:	2900      	cmp	r1, #0
 8000692:	d1fc      	bne.n	800068e <ai_platform_network_init+0x2a>
 8000694:	f8df 4434 	ldr.w	r4, [pc, #1076]	; 8000acc <.text_20>
 8000698:	601c      	str	r4, [r3, #0]
 800069a:	6819      	ldr	r1, [r3, #0]
 800069c:	f8df 3430 	ldr.w	r3, [pc, #1072]	; 8000ad0 <.text_21>
 80006a0:	4299      	cmp	r1, r3
 80006a2:	d000      	beq.n	80006a6 <ai_platform_network_init+0x42>
 80006a4:	e7fe      	b.n	80006a4 <ai_platform_network_init+0x40>
 80006a6:	2800      	cmp	r0, #0
 80006a8:	d035      	beq.n	8000716 <ai_platform_network_init+0xb2>
 80006aa:	b90a      	cbnz	r2, 80006b0 <ai_platform_network_init+0x4c>
 80006ac:	2211      	movs	r2, #17
 80006ae:	e012      	b.n	80006d6 <ai_platform_network_init+0x72>
 80006b0:	6913      	ldr	r3, [r2, #16]
 80006b2:	6a91      	ldr	r1, [r2, #40]	; 0x28
 80006b4:	b939      	cbnz	r1, 80006c6 <ai_platform_network_init+0x62>
 80006b6:	8c11      	ldrh	r1, [r2, #32]
 80006b8:	8bd5      	ldrh	r5, [r2, #30]
 80006ba:	6a54      	ldr	r4, [r2, #36]	; 0x24
 80006bc:	4369      	muls	r1, r5
 80006be:	4361      	muls	r1, r4
 80006c0:	bf18      	it	ne
 80006c2:	2213      	movne	r2, #19
 80006c4:	d107      	bne.n	80006d6 <ai_platform_network_init+0x72>
 80006c6:	b973      	cbnz	r3, 80006e6 <ai_platform_network_init+0x82>
 80006c8:	8911      	ldrh	r1, [r2, #8]
 80006ca:	88d4      	ldrh	r4, [r2, #6]
 80006cc:	68d3      	ldr	r3, [r2, #12]
 80006ce:	4361      	muls	r1, r4
 80006d0:	4359      	muls	r1, r3
 80006d2:	d008      	beq.n	80006e6 <ai_platform_network_init+0x82>
 80006d4:	2212      	movs	r2, #18
 80006d6:	2110      	movs	r1, #16
 80006d8:	3010      	adds	r0, #16
 80006da:	f000 fa1a 	bl	8000b12 <core_set_error>
 80006de:	2000      	movs	r0, #0
 80006e0:	b001      	add	sp, #4
 80006e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80006e6:	e8b2 10f8 	ldmia.w	r2!, {r3, r4, r5, r6, r7, ip}
 80006ea:	f100 0118 	add.w	r1, r0, #24
 80006ee:	f100 0e30 	add.w	lr, r0, #48	; 0x30
 80006f2:	e881 10f8 	stmia.w	r1, {r3, r4, r5, r6, r7, ip}
 80006f6:	e892 0f0a 	ldmia.w	r2, {r1, r3, r8, r9, sl, fp}
 80006fa:	e88e 0f0a 	stmia.w	lr, {r1, r3, r8, r9, sl, fp}
 80006fe:	2103      	movs	r1, #3
 8000700:	6d02      	ldr	r2, [r0, #80]	; 0x50
 8000702:	60c1      	str	r1, [r0, #12]
 8000704:	b13a      	cbz	r2, 8000716 <ai_platform_network_init+0xb2>
 8000706:	e000      	b.n	800070a <ai_platform_network_init+0xa6>
 8000708:	460a      	mov	r2, r1
 800070a:	68d1      	ldr	r1, [r2, #12]
 800070c:	6090      	str	r0, [r2, #8]
 800070e:	428a      	cmp	r2, r1
 8000710:	bf18      	it	ne
 8000712:	2900      	cmpne	r1, #0
 8000714:	d1f8      	bne.n	8000708 <ai_platform_network_init+0xa4>
 8000716:	b001      	add	sp, #4
 8000718:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800071c <ai_platform_network_process>:
 800071c:	e92d 4ff4 	stmdb	sp!, {r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000720:	b082      	sub	sp, #8
 8000722:	460a      	mov	r2, r1
 8000724:	b120      	cbz	r0, 8000730 <ai_platform_network_process+0x14>
 8000726:	6801      	ldr	r1, [r0, #0]
 8000728:	f8df 33a8 	ldr.w	r3, [pc, #936]	; 8000ad4 <.text_22>
 800072c:	4299      	cmp	r1, r3
 800072e:	d000      	beq.n	8000732 <ai_platform_network_process+0x16>
 8000730:	2000      	movs	r0, #0
 8000732:	f8df 1390 	ldr.w	r1, [pc, #912]	; 8000ac4 <.text_18>
 8000736:	680b      	ldr	r3, [r1, #0]
 8000738:	085b      	lsrs	r3, r3, #1
 800073a:	005b      	lsls	r3, r3, #1
 800073c:	600b      	str	r3, [r1, #0]
 800073e:	2101      	movs	r1, #1
 8000740:	f8df 3384 	ldr.w	r3, [pc, #900]	; 8000ac8 <.text_19>
 8000744:	6099      	str	r1, [r3, #8]
 8000746:	6899      	ldr	r1, [r3, #8]
 8000748:	2900      	cmp	r1, #0
 800074a:	d1fc      	bne.n	8000746 <ai_platform_network_process+0x2a>
 800074c:	f8df 437c 	ldr.w	r4, [pc, #892]	; 8000acc <.text_20>
 8000750:	601c      	str	r4, [r3, #0]
 8000752:	6819      	ldr	r1, [r3, #0]
 8000754:	f8df 3378 	ldr.w	r3, [pc, #888]	; 8000ad0 <.text_21>
 8000758:	4299      	cmp	r1, r3
 800075a:	d000      	beq.n	800075e <ai_platform_network_process+0x42>
 800075c:	e7fe      	b.n	800075c <ai_platform_network_process+0x40>
 800075e:	2800      	cmp	r0, #0
 8000760:	f000 8113 	beq.w	800098a <ai_platform_network_process+0x26e>
 8000764:	f8b0 1048 	ldrh.w	r1, [r0, #72]	; 0x48
 8000768:	b101      	cbz	r1, 800076c <ai_platform_network_process+0x50>
 800076a:	6cc1      	ldr	r1, [r0, #76]	; 0x4c
 800076c:	2300      	movs	r3, #0
 800076e:	82c3      	strh	r3, [r0, #22]
 8000770:	2400      	movs	r4, #0
 8000772:	7b03      	ldrb	r3, [r0, #12]
 8000774:	8284      	strh	r4, [r0, #20]
 8000776:	f003 0303 	and.w	r3, r3, #3
 800077a:	2b03      	cmp	r3, #3
 800077c:	d002      	beq.n	8000784 <ai_platform_network_process+0x68>
 800077e:	2230      	movs	r2, #48	; 0x30
 8000780:	2111      	movs	r1, #17
 8000782:	e0ff      	b.n	8000984 <ai_platform_network_process+0x268>
 8000784:	2a00      	cmp	r2, #0
 8000786:	bf1e      	ittt	ne
 8000788:	2900      	cmpne	r1, #0
 800078a:	880b      	ldrhne	r3, [r1, #0]
 800078c:	2b00      	cmpne	r3, #0
 800078e:	f000 80f7 	beq.w	8000980 <ai_platform_network_process+0x264>
 8000792:	f8b2 b004 	ldrh.w	fp, [r2, #4]
 8000796:	9100      	str	r1, [sp, #0]
 8000798:	46a0      	mov	r8, r4
 800079a:	46a1      	mov	r9, r4
 800079c:	2600      	movs	r6, #0
 800079e:	1d17      	adds	r7, r2, #4
 80007a0:	4682      	mov	sl, r0
 80007a2:	e014      	b.n	80007ce <ai_platform_network_process+0xb2>
 80007a4:	68f8      	ldr	r0, [r7, #12]
 80007a6:	2800      	cmp	r0, #0
 80007a8:	f000 80e9 	beq.w	800097e <ai_platform_network_process+0x262>
 80007ac:	8838      	ldrh	r0, [r7, #0]
 80007ae:	2800      	cmp	r0, #0
 80007b0:	d052      	beq.n	8000858 <ai_platform_network_process+0x13c>
 80007b2:	4558      	cmp	r0, fp
 80007b4:	bf28      	it	cs
 80007b6:	4683      	movcs	fp, r0
 80007b8:	4622      	mov	r2, r4
 80007ba:	1f39      	subs	r1, r7, #4
 80007bc:	4628      	mov	r0, r5
 80007be:	f7ff fd59 	bl	8000274 <_platform_network_state_setup>
 80007c2:	f108 0801 	add.w	r8, r8, #1
 80007c6:	3718      	adds	r7, #24
 80007c8:	3610      	adds	r6, #16
 80007ca:	f109 0904 	add.w	r9, r9, #4
 80007ce:	9800      	ldr	r0, [sp, #0]
 80007d0:	8801      	ldrh	r1, [r0, #0]
 80007d2:	4588      	cmp	r8, r1
 80007d4:	d24a      	bcs.n	800086c <ai_platform_network_process+0x150>
 80007d6:	6840      	ldr	r0, [r0, #4]
 80007d8:	2800      	cmp	r0, #0
 80007da:	bf1c      	itt	ne
 80007dc:	f850 4009 	ldrne.w	r4, [r0, r9]
 80007e0:	2c00      	cmpne	r4, #0
 80007e2:	d043      	beq.n	800086c <ai_platform_network_process+0x150>
 80007e4:	9800      	ldr	r0, [sp, #0]
 80007e6:	6881      	ldr	r1, [r0, #8]
 80007e8:	680a      	ldr	r2, [r1, #0]
 80007ea:	1995      	adds	r5, r2, r6
 80007ec:	f000 80c7 	beq.w	800097e <ai_platform_network_process+0x262>
 80007f0:	69a0      	ldr	r0, [r4, #24]
 80007f2:	6841      	ldr	r1, [r0, #4]
 80007f4:	887b      	ldrh	r3, [r7, #2]
 80007f6:	88ba      	ldrh	r2, [r7, #4]
 80007f8:	68b8      	ldr	r0, [r7, #8]
 80007fa:	fb03 fc02 	mul.w	ip, r3, r2
 80007fe:	fb00 fc0c 	mul.w	ip, r0, ip
 8000802:	4561      	cmp	r1, ip
 8000804:	d32d      	bcc.n	8000862 <ai_platform_network_process+0x146>
 8000806:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 800080a:	f8dc e00c 	ldr.w	lr, [ip, #12]
 800080e:	459e      	cmp	lr, r3
 8000810:	bf01      	itttt	eq
 8000812:	f8dc 3008 	ldreq.w	r3, [ip, #8]
 8000816:	4293      	cmpeq	r3, r2
 8000818:	f8dc 2004 	ldreq.w	r2, [ip, #4]
 800081c:	4282      	cmpeq	r2, r0
 800081e:	d120      	bne.n	8000862 <ai_platform_network_process+0x146>
 8000820:	69a0      	ldr	r0, [r4, #24]
 8000822:	6800      	ldr	r0, [r0, #0]
 8000824:	f005 feac 	bl	8006580 <ai_array_get_byte_size>
 8000828:	68e1      	ldr	r1, [r4, #12]
 800082a:	68ca      	ldr	r2, [r1, #12]
 800082c:	6961      	ldr	r1, [r4, #20]
 800082e:	68cb      	ldr	r3, [r1, #12]
 8000830:	435a      	muls	r2, r3
 8000832:	4290      	cmp	r0, r2
 8000834:	d315      	bcc.n	8000862 <ai_platform_network_process+0x146>
 8000836:	69a0      	ldr	r0, [r4, #24]
 8000838:	6800      	ldr	r0, [r0, #0]
 800083a:	f005 fdc9 	bl	80063d0 <ai_array_to_buffer_fmt>
 800083e:	f857 1c04 	ldr.w	r1, [r7, #-4]
 8000842:	f020 407e 	bic.w	r0, r0, #4261412864	; 0xfe000000
 8000846:	f021 417e 	bic.w	r1, r1, #4261412864	; 0xfe000000
 800084a:	4288      	cmp	r0, r1
 800084c:	d0aa      	beq.n	80007a4 <ai_platform_network_process+0x88>
 800084e:	2219      	movs	r2, #25
 8000850:	2112      	movs	r1, #18
 8000852:	f10a 0010 	add.w	r0, sl, #16
 8000856:	e096      	b.n	8000986 <ai_platform_network_process+0x26a>
 8000858:	2221      	movs	r2, #33	; 0x21
 800085a:	2112      	movs	r1, #18
 800085c:	f10a 0010 	add.w	r0, sl, #16
 8000860:	e091      	b.n	8000986 <ai_platform_network_process+0x26a>
 8000862:	2218      	movs	r2, #24
 8000864:	2112      	movs	r1, #18
 8000866:	f10a 0010 	add.w	r0, sl, #16
 800086a:	e08c      	b.n	8000986 <ai_platform_network_process+0x26a>
 800086c:	9902      	ldr	r1, [sp, #8]
 800086e:	2900      	cmp	r1, #0
 8000870:	4655      	mov	r5, sl
 8000872:	d075      	beq.n	8000960 <ai_platform_network_process+0x244>
 8000874:	f8b5 0048 	ldrh.w	r0, [r5, #72]	; 0x48
 8000878:	2802      	cmp	r0, #2
 800087a:	db7b      	blt.n	8000974 <ai_platform_network_process+0x258>
 800087c:	6ce8      	ldr	r0, [r5, #76]	; 0x4c
 800087e:	300c      	adds	r0, #12
 8000880:	bf1c      	itt	ne
 8000882:	8802      	ldrhne	r2, [r0, #0]
 8000884:	2a00      	cmpne	r2, #0
 8000886:	d075      	beq.n	8000974 <ai_platform_network_process+0x258>
 8000888:	f04f 0800 	mov.w	r8, #0
 800088c:	46c1      	mov	r9, r8
 800088e:	2600      	movs	r6, #0
 8000890:	1d0f      	adds	r7, r1, #4
 8000892:	9000      	str	r0, [sp, #0]
 8000894:	e013      	b.n	80008be <ai_platform_network_process+0x1a2>
 8000896:	68f8      	ldr	r0, [r7, #12]
 8000898:	2800      	cmp	r0, #0
 800089a:	d059      	beq.n	8000950 <ai_platform_network_process+0x234>
 800089c:	8838      	ldrh	r0, [r7, #0]
 800089e:	2800      	cmp	r0, #0
 80008a0:	d051      	beq.n	8000946 <ai_platform_network_process+0x22a>
 80008a2:	4558      	cmp	r0, fp
 80008a4:	bf28      	it	cs
 80008a6:	4683      	movcs	fp, r0
 80008a8:	4622      	mov	r2, r4
 80008aa:	1f39      	subs	r1, r7, #4
 80008ac:	4628      	mov	r0, r5
 80008ae:	f7ff fce1 	bl	8000274 <_platform_network_state_setup>
 80008b2:	f108 0801 	add.w	r8, r8, #1
 80008b6:	3718      	adds	r7, #24
 80008b8:	3610      	adds	r6, #16
 80008ba:	f109 0904 	add.w	r9, r9, #4
 80008be:	9800      	ldr	r0, [sp, #0]
 80008c0:	8801      	ldrh	r1, [r0, #0]
 80008c2:	4588      	cmp	r8, r1
 80008c4:	d249      	bcs.n	800095a <ai_platform_network_process+0x23e>
 80008c6:	6840      	ldr	r0, [r0, #4]
 80008c8:	2800      	cmp	r0, #0
 80008ca:	bf1c      	itt	ne
 80008cc:	f850 4009 	ldrne.w	r4, [r0, r9]
 80008d0:	2c00      	cmpne	r4, #0
 80008d2:	d042      	beq.n	800095a <ai_platform_network_process+0x23e>
 80008d4:	9800      	ldr	r0, [sp, #0]
 80008d6:	6881      	ldr	r1, [r0, #8]
 80008d8:	680a      	ldr	r2, [r1, #0]
 80008da:	1995      	adds	r5, r2, r6
 80008dc:	d038      	beq.n	8000950 <ai_platform_network_process+0x234>
 80008de:	69a0      	ldr	r0, [r4, #24]
 80008e0:	6841      	ldr	r1, [r0, #4]
 80008e2:	887b      	ldrh	r3, [r7, #2]
 80008e4:	88ba      	ldrh	r2, [r7, #4]
 80008e6:	68b8      	ldr	r0, [r7, #8]
 80008e8:	fb03 fc02 	mul.w	ip, r3, r2
 80008ec:	fb00 fc0c 	mul.w	ip, r0, ip
 80008f0:	4561      	cmp	r1, ip
 80008f2:	d33e      	bcc.n	8000972 <ai_platform_network_process+0x256>
 80008f4:	f8d4 c00c 	ldr.w	ip, [r4, #12]
 80008f8:	f8dc e00c 	ldr.w	lr, [ip, #12]
 80008fc:	459e      	cmp	lr, r3
 80008fe:	bf01      	itttt	eq
 8000900:	f8dc 3008 	ldreq.w	r3, [ip, #8]
 8000904:	4293      	cmpeq	r3, r2
 8000906:	f8dc 2004 	ldreq.w	r2, [ip, #4]
 800090a:	4282      	cmpeq	r2, r0
 800090c:	d131      	bne.n	8000972 <ai_platform_network_process+0x256>
 800090e:	69a0      	ldr	r0, [r4, #24]
 8000910:	6800      	ldr	r0, [r0, #0]
 8000912:	f005 fe35 	bl	8006580 <ai_array_get_byte_size>
 8000916:	68e1      	ldr	r1, [r4, #12]
 8000918:	68ca      	ldr	r2, [r1, #12]
 800091a:	6961      	ldr	r1, [r4, #20]
 800091c:	68cb      	ldr	r3, [r1, #12]
 800091e:	435a      	muls	r2, r3
 8000920:	4290      	cmp	r0, r2
 8000922:	d326      	bcc.n	8000972 <ai_platform_network_process+0x256>
 8000924:	69a0      	ldr	r0, [r4, #24]
 8000926:	6800      	ldr	r0, [r0, #0]
 8000928:	f005 fd52 	bl	80063d0 <ai_array_to_buffer_fmt>
 800092c:	f857 1c04 	ldr.w	r1, [r7, #-4]
 8000930:	f020 407e 	bic.w	r0, r0, #4261412864	; 0xfe000000
 8000934:	f021 417e 	bic.w	r1, r1, #4261412864	; 0xfe000000
 8000938:	4288      	cmp	r0, r1
 800093a:	d0ac      	beq.n	8000896 <ai_platform_network_process+0x17a>
 800093c:	2219      	movs	r2, #25
 800093e:	2113      	movs	r1, #19
 8000940:	f10a 0010 	add.w	r0, sl, #16
 8000944:	e01f      	b.n	8000986 <ai_platform_network_process+0x26a>
 8000946:	2221      	movs	r2, #33	; 0x21
 8000948:	2113      	movs	r1, #19
 800094a:	f10a 0010 	add.w	r0, sl, #16
 800094e:	e01a      	b.n	8000986 <ai_platform_network_process+0x26a>
 8000950:	2217      	movs	r2, #23
 8000952:	2113      	movs	r1, #19
 8000954:	f10a 0010 	add.w	r0, sl, #16
 8000958:	e015      	b.n	8000986 <ai_platform_network_process+0x26a>
 800095a:	4655      	mov	r5, sl
 800095c:	f8a5 b014 	strh.w	fp, [r5, #20]
 8000960:	f8b5 0048 	ldrh.w	r0, [r5, #72]	; 0x48
 8000964:	2800      	cmp	r0, #0
 8000966:	bf14      	ite	ne
 8000968:	f8d5 a04c 	ldrne.w	sl, [r5, #76]	; 0x4c
 800096c:	f04f 0a00 	moveq.w	sl, #0
 8000970:	e00f      	b.n	8000992 <ai_platform_network_process+0x276>
 8000972:	4655      	mov	r5, sl
 8000974:	2218      	movs	r2, #24
 8000976:	2113      	movs	r1, #19
 8000978:	f105 0010 	add.w	r0, r5, #16
 800097c:	e003      	b.n	8000986 <ai_platform_network_process+0x26a>
 800097e:	4650      	mov	r0, sl
 8000980:	2217      	movs	r2, #23
 8000982:	2112      	movs	r1, #18
 8000984:	3010      	adds	r0, #16
 8000986:	f000 f8c4 	bl	8000b12 <core_set_error>
 800098a:	2000      	movs	r0, #0
 800098c:	b003      	add	sp, #12
 800098e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8000992:	2802      	cmp	r0, #2
 8000994:	bfa6      	itte	ge
 8000996:	6ce8      	ldrge	r0, [r5, #76]	; 0x4c
 8000998:	f100 0b0c 	addge.w	fp, r0, #12
 800099c:	f04f 0b00 	movlt.w	fp, #0
 80009a0:	8ae8      	ldrh	r0, [r5, #22]
 80009a2:	8aa9      	ldrh	r1, [r5, #20]
 80009a4:	ebb0 0f01 	cmp.w	r0, r1
 80009a8:	f080 8087 	bcs.w	8000aba <ai_platform_network_process+0x39e>
 80009ac:	f04f 0800 	mov.w	r8, #0
 80009b0:	4654      	mov	r4, sl
 80009b2:	46c1      	mov	r9, r8
 80009b4:	46c2      	mov	sl, r8
 80009b6:	e018      	b.n	80009ea <ai_platform_network_process+0x2ce>
 80009b8:	6882      	ldr	r2, [r0, #8]
 80009ba:	68c3      	ldr	r3, [r0, #12]
 80009bc:	6871      	ldr	r1, [r6, #4]
 80009be:	1ad2      	subs	r2, r2, r3
 80009c0:	4411      	add	r1, r2
 80009c2:	6081      	str	r1, [r0, #8]
 80009c4:	6872      	ldr	r2, [r6, #4]
 80009c6:	60c2      	str	r2, [r0, #12]
 80009c8:	6870      	ldr	r0, [r6, #4]
 80009ca:	68b1      	ldr	r1, [r6, #8]
 80009cc:	4408      	add	r0, r1
 80009ce:	6070      	str	r0, [r6, #4]
 80009d0:	6831      	ldr	r1, [r6, #0]
 80009d2:	4288      	cmp	r0, r1
 80009d4:	d302      	bcc.n	80009dc <ai_platform_network_process+0x2c0>
 80009d6:	68f0      	ldr	r0, [r6, #12]
 80009d8:	4240      	negs	r0, r0
 80009da:	4408      	add	r0, r1
 80009dc:	6070      	str	r0, [r6, #4]
 80009de:	f10a 0a01 	add.w	sl, sl, #1
 80009e2:	f109 0910 	add.w	r9, r9, #16
 80009e6:	f108 0804 	add.w	r8, r8, #4
 80009ea:	2c00      	cmp	r4, #0
 80009ec:	bf14      	ite	ne
 80009ee:	8820      	ldrhne	r0, [r4, #0]
 80009f0:	2000      	moveq	r0, #0
 80009f2:	4582      	cmp	sl, r0
 80009f4:	d212      	bcs.n	8000a1c <ai_platform_network_process+0x300>
 80009f6:	6860      	ldr	r0, [r4, #4]
 80009f8:	b180      	cbz	r0, 8000a1c <ai_platform_network_process+0x300>
 80009fa:	f850 0008 	ldr.w	r0, [r0, r8]
 80009fe:	b168      	cbz	r0, 8000a1c <ai_platform_network_process+0x300>
 8000a00:	68a1      	ldr	r1, [r4, #8]
 8000a02:	6980      	ldr	r0, [r0, #24]
 8000a04:	680a      	ldr	r2, [r1, #0]
 8000a06:	6801      	ldr	r1, [r0, #0]
 8000a08:	eb02 0609 	add.w	r6, r2, r9
 8000a0c:	008a      	lsls	r2, r1, #2
 8000a0e:	d5d3      	bpl.n	80009b8 <ai_platform_network_process+0x29c>
 8000a10:	68b2      	ldr	r2, [r6, #8]
 8000a12:	6871      	ldr	r1, [r6, #4]
 8000a14:	6880      	ldr	r0, [r0, #8]
 8000a16:	f00a f9ca 	bl	800adae <__aeabi_memcpy>
 8000a1a:	e7d5      	b.n	80009c8 <ai_platform_network_process+0x2ac>
 8000a1c:	46a2      	mov	sl, r4
 8000a1e:	4628      	mov	r0, r5
 8000a20:	f000 f936 	bl	8000c90 <ai_layers_forward_all>
 8000a24:	f04f 0800 	mov.w	r8, #0
 8000a28:	465c      	mov	r4, fp
 8000a2a:	46c1      	mov	r9, r8
 8000a2c:	46c3      	mov	fp, r8
 8000a2e:	e017      	b.n	8000a60 <ai_platform_network_process+0x344>
 8000a30:	6871      	ldr	r1, [r6, #4]
 8000a32:	68b2      	ldr	r2, [r6, #8]
 8000a34:	4411      	add	r1, r2
 8000a36:	6071      	str	r1, [r6, #4]
 8000a38:	6832      	ldr	r2, [r6, #0]
 8000a3a:	4291      	cmp	r1, r2
 8000a3c:	d302      	bcc.n	8000a44 <ai_platform_network_process+0x328>
 8000a3e:	68f1      	ldr	r1, [r6, #12]
 8000a40:	4249      	negs	r1, r1
 8000a42:	4411      	add	r1, r2
 8000a44:	6071      	str	r1, [r6, #4]
 8000a46:	6882      	ldr	r2, [r0, #8]
 8000a48:	68c3      	ldr	r3, [r0, #12]
 8000a4a:	1ad2      	subs	r2, r2, r3
 8000a4c:	4411      	add	r1, r2
 8000a4e:	6081      	str	r1, [r0, #8]
 8000a50:	6872      	ldr	r2, [r6, #4]
 8000a52:	60c2      	str	r2, [r0, #12]
 8000a54:	f10b 0b01 	add.w	fp, fp, #1
 8000a58:	f109 0910 	add.w	r9, r9, #16
 8000a5c:	f108 0804 	add.w	r8, r8, #4
 8000a60:	2c00      	cmp	r4, #0
 8000a62:	bf14      	ite	ne
 8000a64:	8820      	ldrhne	r0, [r4, #0]
 8000a66:	2000      	moveq	r0, #0
 8000a68:	4583      	cmp	fp, r0
 8000a6a:	d21d      	bcs.n	8000aa8 <ai_platform_network_process+0x38c>
 8000a6c:	6860      	ldr	r0, [r4, #4]
 8000a6e:	b1d8      	cbz	r0, 8000aa8 <ai_platform_network_process+0x38c>
 8000a70:	f850 0008 	ldr.w	r0, [r0, r8]
 8000a74:	b1c0      	cbz	r0, 8000aa8 <ai_platform_network_process+0x38c>
 8000a76:	68a1      	ldr	r1, [r4, #8]
 8000a78:	6980      	ldr	r0, [r0, #24]
 8000a7a:	680a      	ldr	r2, [r1, #0]
 8000a7c:	6801      	ldr	r1, [r0, #0]
 8000a7e:	eb02 0609 	add.w	r6, r2, r9
 8000a82:	008a      	lsls	r2, r1, #2
 8000a84:	d5d4      	bpl.n	8000a30 <ai_platform_network_process+0x314>
 8000a86:	6881      	ldr	r1, [r0, #8]
 8000a88:	68b2      	ldr	r2, [r6, #8]
 8000a8a:	6870      	ldr	r0, [r6, #4]
 8000a8c:	f00a f98f 	bl	800adae <__aeabi_memcpy>
 8000a90:	6870      	ldr	r0, [r6, #4]
 8000a92:	68b1      	ldr	r1, [r6, #8]
 8000a94:	4408      	add	r0, r1
 8000a96:	6070      	str	r0, [r6, #4]
 8000a98:	6831      	ldr	r1, [r6, #0]
 8000a9a:	4288      	cmp	r0, r1
 8000a9c:	d302      	bcc.n	8000aa4 <ai_platform_network_process+0x388>
 8000a9e:	68f0      	ldr	r0, [r6, #12]
 8000aa0:	4240      	negs	r0, r0
 8000aa2:	4408      	add	r0, r1
 8000aa4:	6070      	str	r0, [r6, #4]
 8000aa6:	e7d5      	b.n	8000a54 <ai_platform_network_process+0x338>
 8000aa8:	8ae8      	ldrh	r0, [r5, #22]
 8000aaa:	8aa9      	ldrh	r1, [r5, #20]
 8000aac:	1c40      	adds	r0, r0, #1
 8000aae:	82e8      	strh	r0, [r5, #22]
 8000ab0:	46a3      	mov	fp, r4
 8000ab2:	b280      	uxth	r0, r0
 8000ab4:	4288      	cmp	r0, r1
 8000ab6:	f4ff af79 	bcc.w	80009ac <ai_platform_network_process+0x290>
 8000aba:	8ae8      	ldrh	r0, [r5, #22]
 8000abc:	b003      	add	sp, #12
 8000abe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08000ac4 <.text_18>:
 8000ac4:	e0002000 	.word	0xe0002000

08000ac8 <.text_19>:
 8000ac8:	40023000 	.word	0x40023000

08000acc <.text_20>:
 8000acc:	f407a5c2 	.word	0xf407a5c2

08000ad0 <.text_21>:
 8000ad0:	b5e8b5cd 	.word	0xb5e8b5cd

08000ad4 <.text_22>:
 8000ad4:	a1c00100 	.word	0xa1c00100

08000ad8 <.text_23>:
 8000ad8:	01030001 	.word	0x01030001

08000adc <.text_24>:
 8000adc:	00000104 	.word	0x00000104

08000ae0 <.text_25>:
 8000ae0:	00000101 	.word	0x00000101

08000ae4 <.text_26>:
 8000ae4:	00000301 	.word	0x00000301

08000ae8 <.text_27>:
 8000ae8:	00001030 	.word	0x00001030

08000aec <.text_28>:
 8000aec:	00001001 	.word	0x00001001

08000af0 <_platform_network_sanity_check{5}::signatures>:
 8000af0:	84048403                                ....

08000af4 <.text_30>:
 8000af4:	00001002 	.word	0x00001002

08000af8 <.text_31>:
 8000af8:	00001010 	.word	0x00001010

08000afc <.text_32>:
 8000afc:	00000000 	.word	0x00000000

08000b00 <.text_33>:
 8000b00:	00001010 	.word	0x00001010

08000b04 <core_init>:
 8000b04:	2001      	movs	r0, #1
 8000b06:	4770      	bx	lr

08000b08 <core_get_error>:
 8000b08:	4601      	mov	r1, r0
 8000b0a:	2200      	movs	r2, #0
 8000b0c:	6808      	ldr	r0, [r1, #0]
 8000b0e:	600a      	str	r2, [r1, #0]
 8000b10:	4770      	bx	lr

08000b12 <core_set_error>:
 8000b12:	7803      	ldrb	r3, [r0, #0]
 8000b14:	ea5f 6c03 	movs.w	ip, r3, lsl #24
 8000b18:	d104      	bne.n	8000b24 <core_set_error+0x12>
 8000b1a:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
 8000b1e:	6001      	str	r1, [r0, #0]
 8000b20:	2001      	movs	r0, #1
 8000b22:	4770      	bx	lr
 8000b24:	2000      	movs	r0, #0
 8000b26:	4770      	bx	lr

08000b28 <ai_layers_forward_layer>:
 8000b28:	b510      	push	{r4, lr}
 8000b2a:	4604      	mov	r4, r0
 8000b2c:	6921      	ldr	r1, [r4, #16]
 8000b2e:	4788      	blx	r1
 8000b30:	68e0      	ldr	r0, [r4, #12]
 8000b32:	42a0      	cmp	r0, r4
 8000b34:	bf08      	it	eq
 8000b36:	2000      	moveq	r0, #0
 8000b38:	bd10      	pop	{r4, pc}
	...

08000b3c <ai_check_custom_types>:
 8000b3c:	b500      	push	{lr}
 8000b3e:	b081      	sub	sp, #4
 8000b40:	b160      	cbz	r0, 8000b5c <ai_check_custom_types+0x20>
 8000b42:	7801      	ldrb	r1, [r0, #0]
 8000b44:	2903      	cmp	r1, #3
 8000b46:	d109      	bne.n	8000b5c <ai_check_custom_types+0x20>
 8000b48:	f05f 0204 	movs.w	r2, #4
 8000b4c:	a18d      	add	r1, pc, #564	; (adr r1, 8000d84 <ai_check_custom_types::ref_signatures>)
 8000b4e:	f00a f95b 	bl	800ae08 <memcmp>
 8000b52:	1e40      	subs	r0, r0, #1
 8000b54:	4180      	sbcs	r0, r0
 8000b56:	0fc0      	lsrs	r0, r0, #31
 8000b58:	b001      	add	sp, #4
 8000b5a:	bd00      	pop	{pc}
 8000b5c:	2000      	movs	r0, #0
 8000b5e:	b001      	add	sp, #4
 8000b60:	bd00      	pop	{pc}
	...

08000b64 <ai_layer_type_name>:
 8000b64:	f242 7211 	movw	r2, #10001	; 0x2711
 8000b68:	1a81      	subs	r1, r0, r2
 8000b6a:	2901      	cmp	r1, #1
 8000b6c:	bf81      	itttt	hi
 8000b6e:	1ec9      	subhi	r1, r1, #3
 8000b70:	290d      	cmphi	r1, #13
 8000b72:	390f      	subhi	r1, #15
 8000b74:	2909      	cmphi	r1, #9
 8000b76:	f200 806b 	bhi.w	8000c50 <ai_layer_type_name+0xec>
 8000b7a:	1a80      	subs	r0, r0, r2
 8000b7c:	d033      	beq.n	8000be6 <ai_layer_type_name+0x82>
 8000b7e:	1e40      	subs	r0, r0, #1
 8000b80:	d033      	beq.n	8000bea <ai_layer_type_name+0x86>
 8000b82:	1e80      	subs	r0, r0, #2
 8000b84:	d033      	beq.n	8000bee <ai_layer_type_name+0x8a>
 8000b86:	1e40      	subs	r0, r0, #1
 8000b88:	d034      	beq.n	8000bf4 <ai_layer_type_name+0x90>
 8000b8a:	1e40      	subs	r0, r0, #1
 8000b8c:	d034      	beq.n	8000bf8 <ai_layer_type_name+0x94>
 8000b8e:	1e40      	subs	r0, r0, #1
 8000b90:	d034      	beq.n	8000bfc <ai_layer_type_name+0x98>
 8000b92:	1e40      	subs	r0, r0, #1
 8000b94:	d034      	beq.n	8000c00 <ai_layer_type_name+0x9c>
 8000b96:	1e40      	subs	r0, r0, #1
 8000b98:	d034      	beq.n	8000c04 <ai_layer_type_name+0xa0>
 8000b9a:	1e40      	subs	r0, r0, #1
 8000b9c:	d034      	beq.n	8000c08 <ai_layer_type_name+0xa4>
 8000b9e:	1e40      	subs	r0, r0, #1
 8000ba0:	d034      	beq.n	8000c0c <ai_layer_type_name+0xa8>
 8000ba2:	1e40      	subs	r0, r0, #1
 8000ba4:	d034      	beq.n	8000c10 <ai_layer_type_name+0xac>
 8000ba6:	1e40      	subs	r0, r0, #1
 8000ba8:	d034      	beq.n	8000c14 <ai_layer_type_name+0xb0>
 8000baa:	1e40      	subs	r0, r0, #1
 8000bac:	d034      	beq.n	8000c18 <ai_layer_type_name+0xb4>
 8000bae:	1e40      	subs	r0, r0, #1
 8000bb0:	d034      	beq.n	8000c1c <ai_layer_type_name+0xb8>
 8000bb2:	1e40      	subs	r0, r0, #1
 8000bb4:	d034      	beq.n	8000c20 <ai_layer_type_name+0xbc>
 8000bb6:	1e40      	subs	r0, r0, #1
 8000bb8:	d034      	beq.n	8000c24 <ai_layer_type_name+0xc0>
 8000bba:	1e80      	subs	r0, r0, #2
 8000bbc:	d034      	beq.n	8000c28 <ai_layer_type_name+0xc4>
 8000bbe:	1e40      	subs	r0, r0, #1
 8000bc0:	d034      	beq.n	8000c2c <ai_layer_type_name+0xc8>
 8000bc2:	1e40      	subs	r0, r0, #1
 8000bc4:	d034      	beq.n	8000c30 <ai_layer_type_name+0xcc>
 8000bc6:	1e40      	subs	r0, r0, #1
 8000bc8:	d034      	beq.n	8000c34 <ai_layer_type_name+0xd0>
 8000bca:	1e40      	subs	r0, r0, #1
 8000bcc:	d034      	beq.n	8000c38 <ai_layer_type_name+0xd4>
 8000bce:	1e40      	subs	r0, r0, #1
 8000bd0:	d034      	beq.n	8000c3c <ai_layer_type_name+0xd8>
 8000bd2:	1e40      	subs	r0, r0, #1
 8000bd4:	d034      	beq.n	8000c40 <ai_layer_type_name+0xdc>
 8000bd6:	1e40      	subs	r0, r0, #1
 8000bd8:	d034      	beq.n	8000c44 <ai_layer_type_name+0xe0>
 8000bda:	1e40      	subs	r0, r0, #1
 8000bdc:	d034      	beq.n	8000c48 <ai_layer_type_name+0xe4>
 8000bde:	1e40      	subs	r0, r0, #1
 8000be0:	d034      	beq.n	8000c4c <ai_layer_type_name+0xe8>
 8000be2:	a01c      	add	r0, pc, #112	; (adr r0, 8000c54 <.text_5>)
 8000be4:	4770      	bx	lr
 8000be6:	a01c      	add	r0, pc, #112	; (adr r0, 8000c58 <.text_6>)
 8000be8:	4770      	bx	lr
 8000bea:	a01c      	add	r0, pc, #112	; (adr r0, 8000c5c <.text_7>)
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop
 8000bf0:	a031      	add	r0, pc, #196	; (adr r0, 8000cb8 <.text_15>)
 8000bf2:	4770      	bx	lr
 8000bf4:	a032      	add	r0, pc, #200	; (adr r0, 8000cc0 <.text_16>)
 8000bf6:	4770      	bx	lr
 8000bf8:	a019      	add	r0, pc, #100	; (adr r0, 8000c60 <.text_8>)
 8000bfa:	4770      	bx	lr
 8000bfc:	a019      	add	r0, pc, #100	; (adr r0, 8000c64 <.text_9>)
 8000bfe:	4770      	bx	lr
 8000c00:	a031      	add	r0, pc, #196	; (adr r0, 8000cc8 <.text_17>)
 8000c02:	4770      	bx	lr
 8000c04:	a018      	add	r0, pc, #96	; (adr r0, 8000c68 <.text_10>)
 8000c06:	4770      	bx	lr
 8000c08:	a031      	add	r0, pc, #196	; (adr r0, 8000cd0 <.text_18>)
 8000c0a:	4770      	bx	lr
 8000c0c:	a032      	add	r0, pc, #200	; (adr r0, 8000cd8 <.text_19>)
 8000c0e:	4770      	bx	lr
 8000c10:	a036      	add	r0, pc, #216	; (adr r0, 8000cec <.text_20>)
 8000c12:	4770      	bx	lr
 8000c14:	a038      	add	r0, pc, #224	; (adr r0, 8000cf8 <.text_21>)
 8000c16:	4770      	bx	lr
 8000c18:	a014      	add	r0, pc, #80	; (adr r0, 8000c6c <.text_11>)
 8000c1a:	4770      	bx	lr
 8000c1c:	a038      	add	r0, pc, #224	; (adr r0, 8000d00 <.text_22>)
 8000c1e:	4770      	bx	lr
 8000c20:	a039      	add	r0, pc, #228	; (adr r0, 8000d08 <.text_23>)
 8000c22:	4770      	bx	lr
 8000c24:	a03b      	add	r0, pc, #236	; (adr r0, 8000d14 <.text_24>)
 8000c26:	4770      	bx	lr
 8000c28:	a03f      	add	r0, pc, #252	; (adr r0, 8000d28 <.text_25>)
 8000c2a:	4770      	bx	lr
 8000c2c:	a040      	add	r0, pc, #256	; (adr r0, 8000d30 <.text_26>)
 8000c2e:	4770      	bx	lr
 8000c30:	a041      	add	r0, pc, #260	; (adr r0, 8000d38 <.text_27>)
 8000c32:	4770      	bx	lr
 8000c34:	a043      	add	r0, pc, #268	; (adr r0, 8000d44 <.text_28>)
 8000c36:	4770      	bx	lr
 8000c38:	a044      	add	r0, pc, #272	; (adr r0, 8000d4c <.text_29>)
 8000c3a:	4770      	bx	lr
 8000c3c:	a045      	add	r0, pc, #276	; (adr r0, 8000d54 <.text_30>)
 8000c3e:	4770      	bx	lr
 8000c40:	a00b      	add	r0, pc, #44	; (adr r0, 8000c70 <.text_12>)
 8000c42:	4770      	bx	lr
 8000c44:	a049      	add	r0, pc, #292	; (adr r0, 8000d6c <.text_31>)
 8000c46:	4770      	bx	lr
 8000c48:	a04a      	add	r0, pc, #296	; (adr r0, 8000d74 <.text_32>)
 8000c4a:	4770      	bx	lr
 8000c4c:	a04b      	add	r0, pc, #300	; (adr r0, 8000d7c <.text_33>)
 8000c4e:	4770      	bx	lr
 8000c50:	a000      	add	r0, pc, #0	; (adr r0, 8000c54 <.text_5>)
 8000c52:	4770      	bx	lr

08000c54 <.text_5>:
 8000c54:	00000000 	.word	0x00000000

08000c58 <.text_6>:
 8000c58:	00444441 	.word	0x00444441

08000c5c <.text_7>:
 8000c5c:	00004e42 	.word	0x00004e42

08000c60 <.text_8>:
 8000c60:	00555247 	.word	0x00555247

08000c64 <.text_9>:
 8000c64:	004e524c 	.word	0x004e524c

08000c68 <.text_10>:
 8000c68:	00004c4e 	.word	0x00004c4e

08000c6c <.text_11>:
 8000c6c:	00004d53 	.word	0x00004d53

08000c70 <.text_12>:
 8000c70:	00444150 	.word	0x00444150

08000c74 <ai_layer_type_is_valid>:
 8000c74:	f242 7111 	movw	r1, #10001	; 0x2711
 8000c78:	1a40      	subs	r0, r0, r1
 8000c7a:	2801      	cmp	r0, #1
 8000c7c:	bf81      	itttt	hi
 8000c7e:	1ec0      	subhi	r0, r0, #3
 8000c80:	280d      	cmphi	r0, #13
 8000c82:	380f      	subhi	r0, #15
 8000c84:	2809      	cmphi	r0, #9
 8000c86:	d801      	bhi.n	8000c8c <ai_layer_type_is_valid+0x18>
 8000c88:	2001      	movs	r0, #1
 8000c8a:	4770      	bx	lr
 8000c8c:	2000      	movs	r0, #0
 8000c8e:	4770      	bx	lr

08000c90 <ai_layers_forward_all>:
 8000c90:	b530      	push	{r4, r5, lr}
 8000c92:	4604      	mov	r4, r0
 8000c94:	b081      	sub	sp, #4
 8000c96:	6d20      	ldr	r0, [r4, #80]	; 0x50
 8000c98:	b158      	cbz	r0, 8000cb2 <ai_layers_forward_all+0x22>
 8000c9a:	6560      	str	r0, [r4, #84]	; 0x54
 8000c9c:	6d65      	ldr	r5, [r4, #84]	; 0x54
 8000c9e:	6929      	ldr	r1, [r5, #16]
 8000ca0:	4628      	mov	r0, r5
 8000ca2:	4788      	blx	r1
 8000ca4:	68e8      	ldr	r0, [r5, #12]
 8000ca6:	42a8      	cmp	r0, r5
 8000ca8:	bf08      	it	eq
 8000caa:	2000      	moveq	r0, #0
 8000cac:	2800      	cmp	r0, #0
 8000cae:	6560      	str	r0, [r4, #84]	; 0x54
 8000cb0:	d1f4      	bne.n	8000c9c <ai_layers_forward_all+0xc>
 8000cb2:	b001      	add	sp, #4
 8000cb4:	bd30      	pop	{r4, r5, pc}
	...

08000cb8 <.text_15>:
 8000cb8:	564e4f43 	.word	0x564e4f43
 8000cbc:	00004432 	.word	0x00004432

08000cc0 <.text_16>:
 8000cc0:	534e4544 	.word	0x534e4544
 8000cc4:	0045      	.short	0x0045
	...

08000cc8 <.text_17>:
 8000cc8:	4d54534c 	.word	0x4d54534c
 8000ccc:	00          	.byte	0x00
 8000ccd:	00          	.byte	0x00
	...

08000cd0 <.text_18>:
 8000cd0:	4d524f4e 	.word	0x4d524f4e
 8000cd4:	00          	.byte	0x00
 8000cd5:	00          	.byte	0x00
	...

08000cd8 <.text_19>:
 8000cd8:	4954504f 	.word	0x4954504f
 8000cdc:	455a494d 	.word	0x455a494d
 8000ce0:	4f435f44 	.word	0x4f435f44
 8000ce4:	4432564e 	.word	0x4432564e
 8000ce8:	00          	.byte	0x00
 8000ce9:	00          	.byte	0x00
	...

08000cec <.text_20>:
 8000cec:	4e415254 	.word	0x4e415254
 8000cf0:	534f5053 	.word	0x534f5053
 8000cf4:	0045      	.short	0x0045
	...

08000cf8 <.text_21>:
 8000cf8:	4c4f4f50 	.word	0x4c4f4f50
 8000cfc:	00          	.byte	0x00
 8000cfd:	00          	.byte	0x00
	...

08000d00 <.text_22>:
 8000d00:	494c5053 	.word	0x494c5053
 8000d04:	0054      	.short	0x0054
	...

08000d08 <.text_23>:
 8000d08:	454d4954 	.word	0x454d4954
 8000d0c:	4c45445f 	.word	0x4c45445f
 8000d10:	00005941 	.word	0x00005941

08000d14 <.text_24>:
 8000d14:	454d4954 	.word	0x454d4954
 8000d18:	5349445f 	.word	0x5349445f
 8000d1c:	42495254 	.word	0x42495254
 8000d20:	44455455 	.word	0x44455455
 8000d24:	00          	.byte	0x00
 8000d25:	00          	.byte	0x00
	...

08000d28 <.text_25>:
 8000d28:	434e4f43 	.word	0x434e4f43
 8000d2c:	00005441 	.word	0x00005441

08000d30 <.text_26>:
 8000d30:	4d4d4547 	.word	0x4d4d4547
 8000d34:	00          	.byte	0x00
 8000d35:	00          	.byte	0x00
	...

08000d38 <.text_27>:
 8000d38:	41535055 	.word	0x41535055
 8000d3c:	454c504d 	.word	0x454c504d
 8000d40:	00          	.byte	0x00
 8000d41:	00          	.byte	0x00
	...

08000d44 <.text_28>:
 8000d44:	57544c45 	.word	0x57544c45
 8000d48:	00455349 	.word	0x00455349

08000d4c <.text_29>:
 8000d4c:	454e4547 	.word	0x454e4547
 8000d50:	00434952 	.word	0x00434952

08000d54 <.text_30>:
 8000d54:	54534e49 	.word	0x54534e49
 8000d58:	45434e41 	.word	0x45434e41
 8000d5c:	4d524f4e 	.word	0x4d524f4e
 8000d60:	5a494c41 	.word	0x5a494c41
 8000d64:	4f495441 	.word	0x4f495441
 8000d68:	004e      	.short	0x004e
	...

08000d6c <.text_31>:
 8000d6c:	43494c53 	.word	0x43494c53
 8000d70:	0045      	.short	0x0045
	...

08000d74 <.text_32>:
 8000d74:	454c4954 	.word	0x454c4954
 8000d78:	00          	.byte	0x00
 8000d79:	00          	.byte	0x00
	...

08000d7c <.text_33>:
 8000d7c:	55444552 	.word	0x55444552
 8000d80:	00004543 	.word	0x00004543

08000d84 <ai_check_custom_types::ref_signatures>:
 8000d84:	84048403                                ....

08000d88 <ai_conv2d_stripe_f32>:
 8000d88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8000d8c:	b098      	sub	sp, #96	; 0x60
 8000d8e:	9825      	ldr	r0, [sp, #148]	; 0x94
 8000d90:	2800      	cmp	r0, #0
 8000d92:	f000 82cb 	beq.w	800132c <ai_conv2d_stripe_f32+0x5a4>
 8000d96:	f9bd 40c0 	ldrsh.w	r4, [sp, #192]	; 0xc0
 8000d9a:	f8dd a0b4 	ldr.w	sl, [sp, #180]	; 0xb4
 8000d9e:	9d2b      	ldr	r5, [sp, #172]	; 0xac
 8000da0:	9f24      	ldr	r7, [sp, #144]	; 0x90
 8000da2:	9e2c      	ldr	r6, [sp, #176]	; 0xb0
 8000da4:	9004      	str	r0, [sp, #16]
 8000da6:	fb07 6a0a 	mla	sl, r7, sl, r6
 8000daa:	982a      	ldr	r0, [sp, #168]	; 0xa8
 8000dac:	f9bd 60c0 	ldrsh.w	r6, [sp, #192]	; 0xc0
 8000db0:	f8cd a014 	str.w	sl, [sp, #20]
 8000db4:	1904      	adds	r4, r0, r4
 8000db6:	1e64      	subs	r4, r4, #1
 8000db8:	9826      	ldr	r0, [sp, #152]	; 0x98
 8000dba:	9100      	str	r1, [sp, #0]
 8000dbc:	fb94 f6f6 	sdiv	r6, r4, r6
 8000dc0:	f9bd 40bc 	ldrsh.w	r4, [sp, #188]	; 0xbc
 8000dc4:	9217      	str	r2, [sp, #92]	; 0x5c
 8000dc6:	4346      	muls	r6, r0
 8000dc8:	9616      	str	r6, [sp, #88]	; 0x58
 8000dca:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8000dce:	9e2a      	ldr	r6, [sp, #168]	; 0xa8
 8000dd0:	9822      	ldr	r0, [sp, #136]	; 0x88
 8000dd2:	9306      	str	r3, [sp, #24]
 8000dd4:	4344      	muls	r4, r0
 8000dd6:	9415      	str	r4, [sp, #84]	; 0x54
 8000dd8:	437e      	muls	r6, r7
 8000dda:	f9bd 40c0 	ldrsh.w	r4, [sp, #192]	; 0xc0
 8000dde:	437c      	muls	r4, r7
 8000de0:	9414      	str	r4, [sp, #80]	; 0x50
 8000de2:	4346      	muls	r6, r0
 8000de4:	f9bd 40c0 	ldrsh.w	r4, [sp, #192]	; 0xc0
 8000de8:	982a      	ldr	r0, [sp, #168]	; 0xa8
 8000dea:	960b      	str	r6, [sp, #44]	; 0x2c
 8000dec:	1a24      	subs	r4, r4, r0
 8000dee:	9413      	str	r4, [sp, #76]	; 0x4c
 8000df0:	4604      	mov	r4, r0
 8000df2:	9826      	ldr	r0, [sp, #152]	; 0x98
 8000df4:	9e26      	ldr	r6, [sp, #152]	; 0x98
 8000df6:	4344      	muls	r4, r0
 8000df8:	9412      	str	r4, [sp, #72]	; 0x48
 8000dfa:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 8000dfc:	4344      	muls	r4, r0
 8000dfe:	9411      	str	r4, [sp, #68]	; 0x44
 8000e00:	f9bd 00c0 	ldrsh.w	r0, [sp, #192]	; 0xc0
 8000e04:	f9bd 40bc 	ldrsh.w	r4, [sp, #188]	; 0xbc
 8000e08:	fb14 f000 	smulbb	r0, r4, r0
 8000e0c:	900a      	str	r0, [sp, #40]	; 0x28
 8000e0e:	9c23      	ldr	r4, [sp, #140]	; 0x8c
 8000e10:	9829      	ldr	r0, [sp, #164]	; 0xa4
 8000e12:	fbb4 f0f0 	udiv	r0, r4, r0
 8000e16:	9010      	str	r0, [sp, #64]	; 0x40
 8000e18:	9c22      	ldr	r4, [sp, #136]	; 0x88
 8000e1a:	9829      	ldr	r0, [sp, #164]	; 0xa4
 8000e1c:	fbb4 f0f0 	udiv	r0, r4, r0
 8000e20:	900f      	str	r0, [sp, #60]	; 0x3c
 8000e22:	9c23      	ldr	r4, [sp, #140]	; 0x8c
 8000e24:	9822      	ldr	r0, [sp, #136]	; 0x88
 8000e26:	fbb4 f0f0 	udiv	r0, r4, r0
 8000e2a:	9c22      	ldr	r4, [sp, #136]	; 0x88
 8000e2c:	900e      	str	r0, [sp, #56]	; 0x38
 8000e2e:	4374      	muls	r4, r6
 8000e30:	940d      	str	r4, [sp, #52]	; 0x34
 8000e32:	9c2a      	ldr	r4, [sp, #168]	; 0xa8
 8000e34:	1b2d      	subs	r5, r5, r4
 8000e36:	950c      	str	r5, [sp, #48]	; 0x30
 8000e38:	9f2c      	ldr	r7, [sp, #176]	; 0xb0
 8000e3a:	9924      	ldr	r1, [sp, #144]	; 0x90
 8000e3c:	982c      	ldr	r0, [sp, #176]	; 0xb0
 8000e3e:	9a2e      	ldr	r2, [sp, #184]	; 0xb8
 8000e40:	427f      	negs	r7, r7
 8000e42:	bfd8      	it	le
 8000e44:	2700      	movle	r7, #0
 8000e46:	1a09      	subs	r1, r1, r0
 8000e48:	4291      	cmp	r1, r2
 8000e4a:	bf3d      	ittte	cc
 8000e4c:	9824      	ldrcc	r0, [sp, #144]	; 0x90
 8000e4e:	9e2c      	ldrcc	r6, [sp, #176]	; 0xb0
 8000e50:	1b86      	subcc	r6, r0, r6
 8000e52:	4616      	movcs	r6, r2
 8000e54:	9a05      	ldr	r2, [sp, #20]
 8000e56:	9922      	ldr	r1, [sp, #136]	; 0x88
 8000e58:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8000e5a:	18ba      	adds	r2, r7, r2
 8000e5c:	434a      	muls	r2, r1
 8000e5e:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8000e62:	9821      	ldr	r0, [sp, #132]	; 0x84
 8000e64:	b900      	cbnz	r0, 8000e68 <ai_conv2d_stripe_f32+0xe0>
 8000e66:	9800      	ldr	r0, [sp, #0]
 8000e68:	9001      	str	r0, [sp, #4]
 8000e6a:	1bf6      	subs	r6, r6, r7
 8000e6c:	9829      	ldr	r0, [sp, #164]	; 0xa4
 8000e6e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8000e70:	2801      	cmp	r0, #1
 8000e72:	bf04      	itt	eq
 8000e74:	980a      	ldreq	r0, [sp, #40]	; 0x28
 8000e76:	2801      	cmpeq	r0, #1
 8000e78:	f040 80a9 	bne.w	8000fce <ai_conv2d_stripe_f32+0x246>
 8000e7c:	9c24      	ldr	r4, [sp, #144]	; 0x90
 8000e7e:	9826      	ldr	r0, [sp, #152]	; 0x98
 8000e80:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8000e82:	1ba4      	subs	r4, r4, r6
 8000e84:	434c      	muls	r4, r1
 8000e86:	1b80      	subs	r0, r0, r6
 8000e88:	4341      	muls	r1, r0
 8000e8a:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8000e8c:	1b40      	subs	r0, r0, r5
 8000e8e:	fb00 fc03 	mul.w	ip, r0, r3
 8000e92:	9811      	ldr	r0, [sp, #68]	; 0x44
 8000e94:	9b06      	ldr	r3, [sp, #24]
 8000e96:	4407      	add	r7, r0
 8000e98:	9822      	ldr	r0, [sp, #136]	; 0x88
 8000e9a:	4347      	muls	r7, r0
 8000e9c:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8000ea0:	4370      	muls	r0, r6
 8000ea2:	9e01      	ldr	r6, [sp, #4]
 8000ea4:	9b00      	ldr	r3, [sp, #0]
 8000ea6:	429e      	cmp	r6, r3
 8000ea8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8000eaa:	eb02 0983 	add.w	r9, r2, r3, lsl #2
 8000eae:	9a23      	ldr	r2, [sp, #140]	; 0x8c
 8000eb0:	bf0c      	ite	eq
 8000eb2:	eddf 0aaf 	vldreq	s1, [pc, #700]	; 8001170 <ai_conv2d_stripe_f32+0x3e8>
 8000eb6:	eef0 0a40 	vmovne.f32	s1, s0
 8000eba:	2a00      	cmp	r2, #0
 8000ebc:	f000 8222 	beq.w	8001304 <ai_conv2d_stripe_f32+0x57c>
 8000ec0:	46b0      	mov	r8, r6
 8000ec2:	462e      	mov	r6, r5
 8000ec4:	4613      	mov	r3, r2
 8000ec6:	f8cd c008 	str.w	ip, [sp, #8]
 8000eca:	461d      	mov	r5, r3
 8000ecc:	f8dd e000 	ldr.w	lr, [sp]
 8000ed0:	9b00      	ldr	r3, [sp, #0]
 8000ed2:	463a      	mov	r2, r7
 8000ed4:	4682      	mov	sl, r0
 8000ed6:	f8cd 9004 	str.w	r9, [sp, #4]
 8000eda:	46c4      	mov	ip, r8
 8000edc:	f02a 0703 	bic.w	r7, sl, #3
 8000ee0:	ed9c 1a00 	vldr	s2, [ip]
 8000ee4:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8000ee8:	2e00      	cmp	r6, #0
 8000eea:	ee21 1a20 	vmul.f32	s2, s2, s1
 8000eee:	dd61      	ble.n	8000fb4 <ai_conv2d_stripe_f32+0x22c>
 8000ef0:	4630      	mov	r0, r6
 8000ef2:	2f00      	cmp	r7, #0
 8000ef4:	f04f 0900 	mov.w	r9, #0
 8000ef8:	f340 801f 	ble.w	8000f3a <ai_conv2d_stripe_f32+0x1b2>
 8000efc:	edd2 4a00 	vldr	s9, [r2]
 8000f00:	ed98 5a00 	vldr	s10, [r8]
 8000f04:	edd2 3a01 	vldr	s7, [r2, #4]
 8000f08:	ed98 4a01 	vldr	s8, [r8, #4]
 8000f0c:	edd2 2a02 	vldr	s5, [r2, #8]
 8000f10:	ed98 3a02 	vldr	s6, [r8, #8]
 8000f14:	edd2 1a03 	vldr	s3, [r2, #12]
 8000f18:	ed98 2a03 	vldr	s4, [r8, #12]
 8000f1c:	ee04 1a85 	vmla.f32	s2, s9, s10
 8000f20:	ee03 1a84 	vmla.f32	s2, s7, s8
 8000f24:	3210      	adds	r2, #16
 8000f26:	f109 0904 	add.w	r9, r9, #4
 8000f2a:	ee02 1a83 	vmla.f32	s2, s5, s6
 8000f2e:	45b9      	cmp	r9, r7
 8000f30:	ee01 1a82 	vmla.f32	s2, s3, s4
 8000f34:	f108 0810 	add.w	r8, r8, #16
 8000f38:	dbe0      	blt.n	8000efc <ai_conv2d_stripe_f32+0x174>
 8000f3a:	45d1      	cmp	r9, sl
 8000f3c:	f280 8034 	bge.w	8000fa8 <ai_conv2d_stripe_f32+0x220>
 8000f40:	f109 0901 	add.w	r9, r9, #1
 8000f44:	edd2 2a00 	vldr	s5, [r2]
 8000f48:	edd8 1a00 	vldr	s3, [r8]
 8000f4c:	1d12      	adds	r2, r2, #4
 8000f4e:	45d1      	cmp	r9, sl
 8000f50:	ee02 1aa1 	vmla.f32	s2, s5, s3
 8000f54:	f108 0804 	add.w	r8, r8, #4
 8000f58:	da26      	bge.n	8000fa8 <ai_conv2d_stripe_f32+0x220>
 8000f5a:	f109 0901 	add.w	r9, r9, #1
 8000f5e:	ed92 3a00 	vldr	s6, [r2]
 8000f62:	ed98 2a00 	vldr	s4, [r8]
 8000f66:	1d12      	adds	r2, r2, #4
 8000f68:	45d1      	cmp	r9, sl
 8000f6a:	ee03 1a02 	vmla.f32	s2, s6, s4
 8000f6e:	f108 0804 	add.w	r8, r8, #4
 8000f72:	da19      	bge.n	8000fa8 <ai_conv2d_stripe_f32+0x220>
 8000f74:	f109 0901 	add.w	r9, r9, #1
 8000f78:	edd2 2a00 	vldr	s5, [r2]
 8000f7c:	edd8 1a00 	vldr	s3, [r8]
 8000f80:	1d12      	adds	r2, r2, #4
 8000f82:	45d1      	cmp	r9, sl
 8000f84:	ee02 1aa1 	vmla.f32	s2, s5, s3
 8000f88:	f108 0804 	add.w	r8, r8, #4
 8000f8c:	da0c      	bge.n	8000fa8 <ai_conv2d_stripe_f32+0x220>
 8000f8e:	f109 0901 	add.w	r9, r9, #1
 8000f92:	ed92 2a00 	vldr	s4, [r2]
 8000f96:	ed98 3a00 	vldr	s6, [r8]
 8000f9a:	1d12      	adds	r2, r2, #4
 8000f9c:	45d1      	cmp	r9, sl
 8000f9e:	ee02 1a03 	vmla.f32	s2, s4, s6
 8000fa2:	f108 0804 	add.w	r8, r8, #4
 8000fa6:	dbcb      	blt.n	8000f40 <ai_conv2d_stripe_f32+0x1b8>
 8000fa8:	1e40      	subs	r0, r0, #1
 8000faa:	eb08 0884 	add.w	r8, r8, r4, lsl #2
 8000fae:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8000fb2:	d19e      	bne.n	8000ef2 <ai_conv2d_stripe_f32+0x16a>
 8000fb4:	9802      	ldr	r0, [sp, #8]
 8000fb6:	ed8e 1a00 	vstr	s2, [lr]
 8000fba:	1e6d      	subs	r5, r5, #1
 8000fbc:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 8000fc0:	f10e 0e04 	add.w	lr, lr, #4
 8000fc4:	f10c 0c04 	add.w	ip, ip, #4
 8000fc8:	d18a      	bne.n	8000ee0 <ai_conv2d_stripe_f32+0x158>
 8000fca:	9300      	str	r3, [sp, #0]
 8000fcc:	e19a      	b.n	8001304 <ai_conv2d_stripe_f32+0x57c>
 8000fce:	9829      	ldr	r0, [sp, #164]	; 0xa4
 8000fd0:	4288      	cmp	r0, r1
 8000fd2:	bf04      	itt	eq
 8000fd4:	980a      	ldreq	r0, [sp, #40]	; 0x28
 8000fd6:	2801      	cmpeq	r0, #1
 8000fd8:	f040 80cc 	bne.w	8001174 <ai_conv2d_stripe_f32+0x3ec>
 8000fdc:	980e      	ldr	r0, [sp, #56]	; 0x38
 8000fde:	9b06      	ldr	r3, [sp, #24]
 8000fe0:	9c00      	ldr	r4, [sp, #0]
 8000fe2:	9002      	str	r0, [sp, #8]
 8000fe4:	9824      	ldr	r0, [sp, #144]	; 0x90
 8000fe6:	1b81      	subs	r1, r0, r6
 8000fe8:	9822      	ldr	r0, [sp, #136]	; 0x88
 8000fea:	fb01 fa00 	mul.w	sl, r1, r0
 8000fee:	9826      	ldr	r0, [sp, #152]	; 0x98
 8000ff0:	9926      	ldr	r1, [sp, #152]	; 0x98
 8000ff2:	eba0 0c06 	sub.w	ip, r0, r6
 8000ff6:	9827      	ldr	r0, [sp, #156]	; 0x9c
 8000ff8:	1b40      	subs	r0, r0, r5
 8000ffa:	4341      	muls	r1, r0
 8000ffc:	9812      	ldr	r0, [sp, #72]	; 0x48
 8000ffe:	183f      	adds	r7, r7, r0
 8001000:	eb03 0087 	add.w	r0, r3, r7, lsl #2
 8001004:	9b01      	ldr	r3, [sp, #4]
 8001006:	42a3      	cmp	r3, r4
 8001008:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800100a:	eb02 0e83 	add.w	lr, r2, r3, lsl #2
 800100e:	bf0c      	ite	eq
 8001010:	eddf 0a57 	vldreq	s1, [pc, #348]	; 8001170 <ai_conv2d_stripe_f32+0x3e8>
 8001014:	eef0 0a40 	vmovne.f32	s1, s0
 8001018:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800101a:	2400      	movs	r4, #0
 800101c:	eb0e 0283 	add.w	r2, lr, r3, lsl #2
 8001020:	4596      	cmp	lr, r2
 8001022:	9203      	str	r2, [sp, #12]
 8001024:	f080 816e 	bcs.w	8001304 <ai_conv2d_stripe_f32+0x57c>
 8001028:	9b00      	ldr	r3, [sp, #0]
 800102a:	9a02      	ldr	r2, [sp, #8]
 800102c:	2a00      	cmp	r2, #0
 800102e:	f000 8097 	beq.w	8001160 <ai_conv2d_stripe_f32+0x3d8>
 8001032:	9a01      	ldr	r2, [sp, #4]
 8001034:	9500      	str	r5, [sp, #0]
 8001036:	eb02 0784 	add.w	r7, r2, r4, lsl #2
 800103a:	eb03 0284 	add.w	r2, r3, r4, lsl #2
 800103e:	f8dd b008 	ldr.w	fp, [sp, #8]
 8001042:	9108      	str	r1, [sp, #32]
 8001044:	f8cd e01c 	str.w	lr, [sp, #28]
 8001048:	4615      	mov	r5, r2
 800104a:	9a00      	ldr	r2, [sp, #0]
 800104c:	ed97 1a00 	vldr	s2, [r7]
 8001050:	9907      	ldr	r1, [sp, #28]
 8001052:	2a00      	cmp	r2, #0
 8001054:	ee21 1a20 	vmul.f32	s2, s2, s1
 8001058:	f340 8072 	ble.w	8001140 <ai_conv2d_stripe_f32+0x3b8>
 800105c:	f026 0e03 	bic.w	lr, r6, #3
 8001060:	f1be 0f00 	cmp.w	lr, #0
 8001064:	f04f 0900 	mov.w	r9, #0
 8001068:	f340 8029 	ble.w	80010be <ai_conv2d_stripe_f32+0x336>
 800106c:	f8dd 8088 	ldr.w	r8, [sp, #136]	; 0x88
 8001070:	edd0 1a00 	vldr	s3, [r0]
 8001074:	ed91 2a00 	vldr	s4, [r1]
 8001078:	eb01 0188 	add.w	r1, r1, r8, lsl #2
 800107c:	ee01 1a82 	vmla.f32	s2, s3, s4
 8001080:	edd0 1a01 	vldr	s3, [r0, #4]
 8001084:	ed91 2a00 	vldr	s4, [r1]
 8001088:	eb01 0188 	add.w	r1, r1, r8, lsl #2
 800108c:	ee01 1a82 	vmla.f32	s2, s3, s4
 8001090:	edd0 1a02 	vldr	s3, [r0, #8]
 8001094:	ed91 2a00 	vldr	s4, [r1]
 8001098:	eb01 0188 	add.w	r1, r1, r8, lsl #2
 800109c:	ee01 1a82 	vmla.f32	s2, s3, s4
 80010a0:	f109 0904 	add.w	r9, r9, #4
 80010a4:	edd0 1a03 	vldr	s3, [r0, #12]
 80010a8:	ed91 2a00 	vldr	s4, [r1]
 80010ac:	3010      	adds	r0, #16
 80010ae:	45f1      	cmp	r9, lr
 80010b0:	ee01 1a82 	vmla.f32	s2, s3, s4
 80010b4:	eb01 0188 	add.w	r1, r1, r8, lsl #2
 80010b8:	dbda      	blt.n	8001070 <ai_conv2d_stripe_f32+0x2e8>
 80010ba:	f8cd 8088 	str.w	r8, [sp, #136]	; 0x88
 80010be:	45b1      	cmp	r9, r6
 80010c0:	f280 8038 	bge.w	8001134 <ai_conv2d_stripe_f32+0x3ac>
 80010c4:	f8dd e088 	ldr.w	lr, [sp, #136]	; 0x88
 80010c8:	f109 0901 	add.w	r9, r9, #1
 80010cc:	edd0 1a00 	vldr	s3, [r0]
 80010d0:	ed91 2a00 	vldr	s4, [r1]
 80010d4:	1d00      	adds	r0, r0, #4
 80010d6:	45b1      	cmp	r9, r6
 80010d8:	ee01 1a82 	vmla.f32	s2, s3, s4
 80010dc:	eb01 018e 	add.w	r1, r1, lr, lsl #2
 80010e0:	da26      	bge.n	8001130 <ai_conv2d_stripe_f32+0x3a8>
 80010e2:	f109 0901 	add.w	r9, r9, #1
 80010e6:	ed90 2a00 	vldr	s4, [r0]
 80010ea:	edd1 1a00 	vldr	s3, [r1]
 80010ee:	1d00      	adds	r0, r0, #4
 80010f0:	45b1      	cmp	r9, r6
 80010f2:	ee02 1a21 	vmla.f32	s2, s4, s3
 80010f6:	eb01 018e 	add.w	r1, r1, lr, lsl #2
 80010fa:	da19      	bge.n	8001130 <ai_conv2d_stripe_f32+0x3a8>
 80010fc:	f109 0901 	add.w	r9, r9, #1
 8001100:	edd0 1a00 	vldr	s3, [r0]
 8001104:	ed91 2a00 	vldr	s4, [r1]
 8001108:	1d00      	adds	r0, r0, #4
 800110a:	45b1      	cmp	r9, r6
 800110c:	ee01 1a82 	vmla.f32	s2, s3, s4
 8001110:	eb01 018e 	add.w	r1, r1, lr, lsl #2
 8001114:	da0c      	bge.n	8001130 <ai_conv2d_stripe_f32+0x3a8>
 8001116:	f109 0901 	add.w	r9, r9, #1
 800111a:	ed90 2a00 	vldr	s4, [r0]
 800111e:	edd1 1a00 	vldr	s3, [r1]
 8001122:	1d00      	adds	r0, r0, #4
 8001124:	45b1      	cmp	r9, r6
 8001126:	ee02 1a21 	vmla.f32	s2, s4, s3
 800112a:	eb01 018e 	add.w	r1, r1, lr, lsl #2
 800112e:	dbcb      	blt.n	80010c8 <ai_conv2d_stripe_f32+0x340>
 8001130:	f8cd e088 	str.w	lr, [sp, #136]	; 0x88
 8001134:	1e52      	subs	r2, r2, #1
 8001136:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800113a:	eb00 008c 	add.w	r0, r0, ip, lsl #2
 800113e:	d18d      	bne.n	800105c <ai_conv2d_stripe_f32+0x2d4>
 8001140:	9908      	ldr	r1, [sp, #32]
 8001142:	ed85 1a00 	vstr	s2, [r5]
 8001146:	1c64      	adds	r4, r4, #1
 8001148:	1d2d      	adds	r5, r5, #4
 800114a:	1d3f      	adds	r7, r7, #4
 800114c:	f1bb 0b01 	subs.w	fp, fp, #1
 8001150:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 8001154:	f47f af79 	bne.w	800104a <ai_conv2d_stripe_f32+0x2c2>
 8001158:	9d00      	ldr	r5, [sp, #0]
 800115a:	9908      	ldr	r1, [sp, #32]
 800115c:	f8dd e01c 	ldr.w	lr, [sp, #28]
 8001160:	9a03      	ldr	r2, [sp, #12]
 8001162:	f10e 0e04 	add.w	lr, lr, #4
 8001166:	4596      	cmp	lr, r2
 8001168:	f4bf af2f 	bcs.w	8000fca <ai_conv2d_stripe_f32+0x242>
 800116c:	e75d      	b.n	800102a <ai_conv2d_stripe_f32+0x2a2>
 800116e:	bf00      	nop
 8001170:	00000000 	.word	0x00000000
 8001174:	f9bd 10bc 	ldrsh.w	r1, [sp, #188]	; 0xbc
 8001178:	f8dd 9050 	ldr.w	r9, [sp, #80]	; 0x50
 800117c:	4608      	mov	r0, r1
 800117e:	1bcb      	subs	r3, r1, r7
 8001180:	fb97 f4f0 	sdiv	r4, r7, r0
 8001184:	fb00 3004 	mla	r0, r0, r4, r3
 8001188:	fb90 faf1 	sdiv	sl, r0, r1
 800118c:	fb01 0a1a 	mls	sl, r1, sl, r0
 8001190:	f9bd 30c0 	ldrsh.w	r3, [sp, #192]	; 0xc0
 8001194:	982a      	ldr	r0, [sp, #168]	; 0xa8
 8001196:	9c13      	ldr	r4, [sp, #76]	; 0x4c
 8001198:	fb90 f0f3 	sdiv	r0, r0, r3
 800119c:	fb03 4000 	mla	r0, r3, r0, r4
 80011a0:	1876      	adds	r6, r6, r1
 80011a2:	fb90 fbf3 	sdiv	fp, r0, r3
 80011a6:	1e76      	subs	r6, r6, #1
 80011a8:	187f      	adds	r7, r7, r1
 80011aa:	fb03 0b1b 	mls	fp, r3, fp, r0
 80011ae:	eba6 060a 	sub.w	r6, r6, sl
 80011b2:	eba5 050b 	sub.w	r5, r5, fp
 80011b6:	1e7f      	subs	r7, r7, #1
 80011b8:	fb96 f0f1 	sdiv	r0, r6, r1
 80011bc:	9e27      	ldr	r6, [sp, #156]	; 0x9c
 80011be:	9c22      	ldr	r4, [sp, #136]	; 0x88
 80011c0:	195d      	adds	r5, r3, r5
 80011c2:	1e6d      	subs	r5, r5, #1
 80011c4:	fb00 9911 	mls	r9, r0, r1, r9
 80011c8:	fb97 f1f1 	sdiv	r1, r7, r1
 80011cc:	fb95 fcf3 	sdiv	ip, r5, r3
 80011d0:	9d10      	ldr	r5, [sp, #64]	; 0x40
 80011d2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80011d4:	9509      	str	r5, [sp, #36]	; 0x24
 80011d6:	eba6 060c 	sub.w	r6, r6, ip
 80011da:	9d26      	ldr	r5, [sp, #152]	; 0x98
 80011dc:	1a2d      	subs	r5, r5, r0
 80011de:	fb05 f803 	mul.w	r8, r5, r3
 80011e2:	9d26      	ldr	r5, [sp, #152]	; 0x98
 80011e4:	435d      	muls	r5, r3
 80011e6:	fb06 fe05 	mul.w	lr, r6, r5
 80011ea:	9d16      	ldr	r5, [sp, #88]	; 0x58
 80011ec:	9e06      	ldr	r6, [sp, #24]
 80011ee:	194d      	adds	r5, r1, r5
 80011f0:	fb04 f909 	mul.w	r9, r4, r9
 80011f4:	435d      	muls	r5, r3
 80011f6:	9c15      	ldr	r4, [sp, #84]	; 0x54
 80011f8:	eb06 0185 	add.w	r1, r6, r5, lsl #2
 80011fc:	9d01      	ldr	r5, [sp, #4]
 80011fe:	9e00      	ldr	r6, [sp, #0]
 8001200:	1ae4      	subs	r4, r4, r3
 8001202:	42b5      	cmp	r5, r6
 8001204:	9d2a      	ldr	r5, [sp, #168]	; 0xa8
 8001206:	9e24      	ldr	r6, [sp, #144]	; 0x90
 8001208:	445d      	add	r5, fp
 800120a:	fb06 aa05 	mla	sl, r6, r5, sl
 800120e:	9d22      	ldr	r5, [sp, #136]	; 0x88
 8001210:	fb0a f505 	mul.w	r5, sl, r5
 8001214:	bf0c      	ite	eq
 8001216:	eddf 0a9e 	vldreq	s1, [pc, #632]	; 8001490 <.text_5>
 800121a:	eef0 0a40 	vmovne.f32	s1, s0
 800121e:	eb02 0785 	add.w	r7, r2, r5, lsl #2
 8001222:	9a29      	ldr	r2, [sp, #164]	; 0xa4
 8001224:	2500      	movs	r5, #0
 8001226:	2a00      	cmp	r2, #0
 8001228:	d06c      	beq.n	8001304 <ai_conv2d_stripe_f32+0x57c>
 800122a:	9202      	str	r2, [sp, #8]
 800122c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800122e:	2a00      	cmp	r2, #0
 8001230:	d062      	beq.n	80012f8 <ai_conv2d_stripe_f32+0x570>
 8001232:	9a01      	ldr	r2, [sp, #4]
 8001234:	eb02 0685 	add.w	r6, r2, r5, lsl #2
 8001238:	9a00      	ldr	r2, [sp, #0]
 800123a:	f8cd c00c 	str.w	ip, [sp, #12]
 800123e:	eb02 0a85 	add.w	sl, r2, r5, lsl #2
 8001242:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8001244:	f8cd e020 	str.w	lr, [sp, #32]
 8001248:	f8cd 701c 	str.w	r7, [sp, #28]
 800124c:	f8dd e00c 	ldr.w	lr, [sp, #12]
 8001250:	ed96 1a00 	vldr	s2, [r6]
 8001254:	9f07      	ldr	r7, [sp, #28]
 8001256:	f1be 0f00 	cmp.w	lr, #0
 800125a:	ee21 1a20 	vmul.f32	s2, s2, s1
 800125e:	dd3b      	ble.n	80012d8 <ai_conv2d_stripe_f32+0x550>
 8001260:	2800      	cmp	r0, #0
 8001262:	dd32      	ble.n	80012ca <ai_conv2d_stripe_f32+0x542>
 8001264:	ea4f 0c00 	mov.w	ip, r0
 8001268:	eb07 0b83 	add.w	fp, r7, r3, lsl #2
 800126c:	455f      	cmp	r7, fp
 800126e:	d227      	bcs.n	80012c0 <ai_conv2d_stripe_f32+0x538>
 8001270:	edd1 2a00 	vldr	s5, [r1]
 8001274:	edd7 1a00 	vldr	s3, [r7]
 8001278:	1d09      	adds	r1, r1, #4
 800127a:	1d3f      	adds	r7, r7, #4
 800127c:	455f      	cmp	r7, fp
 800127e:	ee02 1aa1 	vmla.f32	s2, s5, s3
 8001282:	d21d      	bcs.n	80012c0 <ai_conv2d_stripe_f32+0x538>
 8001284:	ed91 3a00 	vldr	s6, [r1]
 8001288:	ed97 2a00 	vldr	s4, [r7]
 800128c:	1d09      	adds	r1, r1, #4
 800128e:	1d3f      	adds	r7, r7, #4
 8001290:	455f      	cmp	r7, fp
 8001292:	ee03 1a02 	vmla.f32	s2, s6, s4
 8001296:	d213      	bcs.n	80012c0 <ai_conv2d_stripe_f32+0x538>
 8001298:	edd1 2a00 	vldr	s5, [r1]
 800129c:	edd7 1a00 	vldr	s3, [r7]
 80012a0:	1d09      	adds	r1, r1, #4
 80012a2:	1d3f      	adds	r7, r7, #4
 80012a4:	455f      	cmp	r7, fp
 80012a6:	ee02 1aa1 	vmla.f32	s2, s5, s3
 80012aa:	d209      	bcs.n	80012c0 <ai_conv2d_stripe_f32+0x538>
 80012ac:	ed91 2a00 	vldr	s4, [r1]
 80012b0:	ed97 3a00 	vldr	s6, [r7]
 80012b4:	1d09      	adds	r1, r1, #4
 80012b6:	1d3f      	adds	r7, r7, #4
 80012b8:	455f      	cmp	r7, fp
 80012ba:	ee02 1a03 	vmla.f32	s2, s4, s6
 80012be:	d3d7      	bcc.n	8001270 <ai_conv2d_stripe_f32+0x4e8>
 80012c0:	f1bc 0c01 	subs.w	ip, ip, #1
 80012c4:	eb07 0784 	add.w	r7, r7, r4, lsl #2
 80012c8:	d1ce      	bne.n	8001268 <ai_conv2d_stripe_f32+0x4e0>
 80012ca:	f1be 0e01 	subs.w	lr, lr, #1
 80012ce:	eb07 0789 	add.w	r7, r7, r9, lsl #2
 80012d2:	eb01 0188 	add.w	r1, r1, r8, lsl #2
 80012d6:	d1c3      	bne.n	8001260 <ai_conv2d_stripe_f32+0x4d8>
 80012d8:	9f08      	ldr	r7, [sp, #32]
 80012da:	1c6d      	adds	r5, r5, #1
 80012dc:	1d36      	adds	r6, r6, #4
 80012de:	ed8a 1a00 	vstr	s2, [sl]
 80012e2:	1e52      	subs	r2, r2, #1
 80012e4:	eb01 0187 	add.w	r1, r1, r7, lsl #2
 80012e8:	f10a 0a04 	add.w	sl, sl, #4
 80012ec:	d1ae      	bne.n	800124c <ai_conv2d_stripe_f32+0x4c4>
 80012ee:	f8dd c00c 	ldr.w	ip, [sp, #12]
 80012f2:	f8dd e020 	ldr.w	lr, [sp, #32]
 80012f6:	9f07      	ldr	r7, [sp, #28]
 80012f8:	9a02      	ldr	r2, [sp, #8]
 80012fa:	1e52      	subs	r2, r2, #1
 80012fc:	eb07 0783 	add.w	r7, r7, r3, lsl #2
 8001300:	9202      	str	r2, [sp, #8]
 8001302:	d193      	bne.n	800122c <ai_conv2d_stripe_f32+0x4a4>
 8001304:	9800      	ldr	r0, [sp, #0]
 8001306:	9923      	ldr	r1, [sp, #140]	; 0x8c
 8001308:	eb00 0281 	add.w	r2, r0, r1, lsl #2
 800130c:	982c      	ldr	r0, [sp, #176]	; 0xb0
 800130e:	f8bd 10a0 	ldrh.w	r1, [sp, #160]	; 0xa0
 8001312:	9200      	str	r2, [sp, #0]
 8001314:	1841      	adds	r1, r0, r1
 8001316:	912c      	str	r1, [sp, #176]	; 0xb0
 8001318:	9805      	ldr	r0, [sp, #20]
 800131a:	f8bd 10a0 	ldrh.w	r1, [sp, #160]	; 0xa0
 800131e:	1841      	adds	r1, r0, r1
 8001320:	9804      	ldr	r0, [sp, #16]
 8001322:	9105      	str	r1, [sp, #20]
 8001324:	1e40      	subs	r0, r0, #1
 8001326:	9004      	str	r0, [sp, #16]
 8001328:	f47f ad86 	bne.w	8000e38 <ai_conv2d_stripe_f32+0xb0>
 800132c:	b018      	add	sp, #96	; 0x60
 800132e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08001332 <func_dummy>:
 8001332:	4770      	bx	lr

08001334 <ai_dict8_dot_array_f32>:
 8001334:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001338:	b081      	sub	sp, #4
 800133a:	4682      	mov	sl, r0
 800133c:	ed2d 8b02 	vpush	{d8}
 8001340:	4615      	mov	r5, r2
 8001342:	9c0c      	ldr	r4, [sp, #48]	; 0x30
 8001344:	08e0      	lsrs	r0, r4, #3
 8001346:	460f      	mov	r7, r1
 8001348:	461a      	mov	r2, r3
 800134a:	ed9f 0a51 	vldr	s0, [pc, #324]	; 8001490 <.text_5>
 800134e:	d052      	beq.n	80013f6 <ai_dict8_dot_array_f32+0xc2>
 8001350:	4629      	mov	r1, r5
 8001352:	783b      	ldrb	r3, [r7, #0]
 8001354:	787d      	ldrb	r5, [r7, #1]
 8001356:	78be      	ldrb	r6, [r7, #2]
 8001358:	f897 b003 	ldrb.w	fp, [r7, #3]
 800135c:	ed92 8a00 	vldr	s16, [r2]
 8001360:	ed92 7a01 	vldr	s14, [r2, #4]
 8001364:	f817 cf04 	ldrb.w	ip, [r7, #4]!
 8001368:	ed92 6a02 	vldr	s12, [r2, #8]
 800136c:	ed92 5a03 	vldr	s10, [r2, #12]
 8001370:	f897 e001 	ldrb.w	lr, [r7, #1]
 8001374:	f897 8002 	ldrb.w	r8, [r7, #2]
 8001378:	f897 9003 	ldrb.w	r9, [r7, #3]
 800137c:	ed92 4a04 	vldr	s8, [r2, #16]
 8001380:	ed92 3a05 	vldr	s6, [r2, #20]
 8001384:	ed92 2a06 	vldr	s4, [r2, #24]
 8001388:	ed92 1a07 	vldr	s2, [r2, #28]
 800138c:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8001390:	eb01 0585 	add.w	r5, r1, r5, lsl #2
 8001394:	eb01 0686 	add.w	r6, r1, r6, lsl #2
 8001398:	edd3 7a00 	vldr	s15, [r3]
 800139c:	edd5 6a00 	vldr	s13, [r5]
 80013a0:	eb01 0b8b 	add.w	fp, r1, fp, lsl #2
 80013a4:	ee07 0a88 	vmla.f32	s0, s15, s16
 80013a8:	eb01 0c8c 	add.w	ip, r1, ip, lsl #2
 80013ac:	edd6 5a00 	vldr	s11, [r6]
 80013b0:	eddb 4a00 	vldr	s9, [fp]
 80013b4:	eddc 3a00 	vldr	s7, [ip]
 80013b8:	ee06 0a87 	vmla.f32	s0, s13, s14
 80013bc:	eb01 0e8e 	add.w	lr, r1, lr, lsl #2
 80013c0:	ee05 0a86 	vmla.f32	s0, s11, s12
 80013c4:	eb01 0888 	add.w	r8, r1, r8, lsl #2
 80013c8:	ee04 0a85 	vmla.f32	s0, s9, s10
 80013cc:	eb01 0989 	add.w	r9, r1, r9, lsl #2
 80013d0:	edde 2a00 	vldr	s5, [lr]
 80013d4:	edd8 1a00 	vldr	s3, [r8]
 80013d8:	edd9 0a00 	vldr	s1, [r9]
 80013dc:	ee03 0a84 	vmla.f32	s0, s7, s8
 80013e0:	1d3f      	adds	r7, r7, #4
 80013e2:	ee02 0a83 	vmla.f32	s0, s5, s6
 80013e6:	3220      	adds	r2, #32
 80013e8:	ee01 0a82 	vmla.f32	s0, s3, s4
 80013ec:	1e40      	subs	r0, r0, #1
 80013ee:	ee00 0a81 	vmla.f32	s0, s1, s2
 80013f2:	d1ae      	bne.n	8001352 <ai_dict8_dot_array_f32+0x1e>
 80013f4:	460d      	mov	r5, r1
 80013f6:	f014 0007 	ands.w	r0, r4, #7
 80013fa:	d03e      	beq.n	800147a <ai_dict8_dot_array_f32+0x146>
 80013fc:	f010 0103 	ands.w	r1, r0, #3
 8001400:	f000 800d 	beq.w	800141e <ai_dict8_dot_array_f32+0xea>
 8001404:	f817 3b01 	ldrb.w	r3, [r7], #1
 8001408:	ed92 1a00 	vldr	s2, [r2]
 800140c:	eb05 0683 	add.w	r6, r5, r3, lsl #2
 8001410:	1d12      	adds	r2, r2, #4
 8001412:	edd6 0a00 	vldr	s1, [r6]
 8001416:	1e49      	subs	r1, r1, #1
 8001418:	ee00 0a81 	vmla.f32	s0, s1, s2
 800141c:	d1f2      	bne.n	8001404 <ai_dict8_dot_array_f32+0xd0>
 800141e:	0880      	lsrs	r0, r0, #2
 8001420:	f000 802b 	beq.w	800147a <ai_dict8_dot_array_f32+0x146>
 8001424:	f817 3b01 	ldrb.w	r3, [r7], #1
 8001428:	f817 1b01 	ldrb.w	r1, [r7], #1
 800142c:	ed92 1a00 	vldr	s2, [r2]
 8001430:	edd2 0a01 	vldr	s1, [r2, #4]
 8001434:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8001438:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 800143c:	ed93 2a00 	vldr	s4, [r3]
 8001440:	edd1 1a00 	vldr	s3, [r1]
 8001444:	f817 1b01 	ldrb.w	r1, [r7], #1
 8001448:	f817 3b01 	ldrb.w	r3, [r7], #1
 800144c:	ee02 0a01 	vmla.f32	s0, s4, s2
 8001450:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 8001454:	ee01 0aa0 	vmla.f32	s0, s3, s1
 8001458:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800145c:	edd2 0a02 	vldr	s1, [r2, #8]
 8001460:	ed91 2a00 	vldr	s4, [r1]
 8001464:	ed92 1a03 	vldr	s2, [r2, #12]
 8001468:	edd3 1a00 	vldr	s3, [r3]
 800146c:	3210      	adds	r2, #16
 800146e:	ee02 0a20 	vmla.f32	s0, s4, s1
 8001472:	1e40      	subs	r0, r0, #1
 8001474:	ee01 0a81 	vmla.f32	s0, s3, s2
 8001478:	d1d4      	bne.n	8001424 <ai_dict8_dot_array_f32+0xf0>
 800147a:	edda 0a00 	vldr	s1, [sl]
 800147e:	ee30 0a80 	vadd.f32	s0, s1, s0
 8001482:	ed8a 0a00 	vstr	s0, [sl]
 8001486:	ecbd 8b02 	vpop	{d8}
 800148a:	b001      	add	sp, #4
 800148c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08001490 <.text_5>:
 8001490:	00000000 	.word	0x00000000

08001494 <ai_dict4_dot_array_f32>:
 8001494:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8001498:	ed2d 8b02 	vpush	{d8}
 800149c:	4680      	mov	r8, r0
 800149e:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
 80014a2:	ea4f 005c 	mov.w	r0, ip, lsr #1
 80014a6:	461e      	mov	r6, r3
 80014a8:	0040      	lsls	r0, r0, #1
 80014aa:	ea5f 03dc 	movs.w	r3, ip, lsr #3
 80014ae:	460c      	mov	r4, r1
 80014b0:	4615      	mov	r5, r2
 80014b2:	eb06 0e80 	add.w	lr, r6, r0, lsl #2
 80014b6:	ed9f 0a50 	vldr	s0, [pc, #320]	; 80015f8 <.text_7>
 80014ba:	d053      	beq.n	8001564 <ai_dict4_dot_array_f32+0xd0>
 80014bc:	ed96 8a00 	vldr	s16, [r6]
 80014c0:	ed96 7a01 	vldr	s14, [r6, #4]
 80014c4:	ed96 6a02 	vldr	s12, [r6, #8]
 80014c8:	ed96 5a03 	vldr	s10, [r6, #12]
 80014cc:	7820      	ldrb	r0, [r4, #0]
 80014ce:	7861      	ldrb	r1, [r4, #1]
 80014d0:	78a2      	ldrb	r2, [r4, #2]
 80014d2:	78e7      	ldrb	r7, [r4, #3]
 80014d4:	ed96 4a04 	vldr	s8, [r6, #16]
 80014d8:	ed96 3a05 	vldr	s6, [r6, #20]
 80014dc:	ed96 2a06 	vldr	s4, [r6, #24]
 80014e0:	ed96 1a07 	vldr	s2, [r6, #28]
 80014e4:	f007 090f 	and.w	r9, r7, #15
 80014e8:	093f      	lsrs	r7, r7, #4
 80014ea:	eb05 0787 	add.w	r7, r5, r7, lsl #2
 80014ee:	eb05 0a89 	add.w	sl, r5, r9, lsl #2
 80014f2:	edd7 1a00 	vldr	s3, [r7]
 80014f6:	edda 0a00 	vldr	s1, [sl]
 80014fa:	f002 070f 	and.w	r7, r2, #15
 80014fe:	0912      	lsrs	r2, r2, #4
 8001500:	eb05 0282 	add.w	r2, r5, r2, lsl #2
 8001504:	eb05 0787 	add.w	r7, r5, r7, lsl #2
 8001508:	edd2 3a00 	vldr	s7, [r2]
 800150c:	edd7 2a00 	vldr	s5, [r7]
 8001510:	f001 020f 	and.w	r2, r1, #15
 8001514:	0909      	lsrs	r1, r1, #4
 8001516:	eb05 0181 	add.w	r1, r5, r1, lsl #2
 800151a:	eb05 0782 	add.w	r7, r5, r2, lsl #2
 800151e:	edd1 5a00 	vldr	s11, [r1]
 8001522:	edd7 4a00 	vldr	s9, [r7]
 8001526:	f000 010f 	and.w	r1, r0, #15
 800152a:	0900      	lsrs	r0, r0, #4
 800152c:	eb05 0080 	add.w	r0, r5, r0, lsl #2
 8001530:	eb05 0281 	add.w	r2, r5, r1, lsl #2
 8001534:	edd0 7a00 	vldr	s15, [r0]
 8001538:	edd2 6a00 	vldr	s13, [r2]
 800153c:	ee07 0a88 	vmla.f32	s0, s15, s16
 8001540:	ee06 0a87 	vmla.f32	s0, s13, s14
 8001544:	ee05 0a86 	vmla.f32	s0, s11, s12
 8001548:	ee04 0a85 	vmla.f32	s0, s9, s10
 800154c:	ee03 0a84 	vmla.f32	s0, s7, s8
 8001550:	1d24      	adds	r4, r4, #4
 8001552:	ee02 0a83 	vmla.f32	s0, s5, s6
 8001556:	3620      	adds	r6, #32
 8001558:	ee01 0a82 	vmla.f32	s0, s3, s4
 800155c:	1e5b      	subs	r3, r3, #1
 800155e:	ee00 0a81 	vmla.f32	s0, s1, s2
 8001562:	d1ab      	bne.n	80014bc <ai_dict4_dot_array_f32+0x28>
 8001564:	4576      	cmp	r6, lr
 8001566:	d22f      	bcs.n	80015c8 <ai_dict4_dot_array_f32+0x134>
 8001568:	f814 0b01 	ldrb.w	r0, [r4], #1
 800156c:	edd6 1a00 	vldr	s3, [r6]
 8001570:	edd6 0a01 	vldr	s1, [r6, #4]
 8001574:	f000 010f 	and.w	r1, r0, #15
 8001578:	0900      	lsrs	r0, r0, #4
 800157a:	eb05 0080 	add.w	r0, r5, r0, lsl #2
 800157e:	eb05 0281 	add.w	r2, r5, r1, lsl #2
 8001582:	ed90 2a00 	vldr	s4, [r0]
 8001586:	ed92 1a00 	vldr	s2, [r2]
 800158a:	3608      	adds	r6, #8
 800158c:	ee02 0a21 	vmla.f32	s0, s4, s3
 8001590:	4576      	cmp	r6, lr
 8001592:	ee01 0a20 	vmla.f32	s0, s2, s1
 8001596:	d217      	bcs.n	80015c8 <ai_dict4_dot_array_f32+0x134>
 8001598:	f814 0b01 	ldrb.w	r0, [r4], #1
 800159c:	ed96 1a00 	vldr	s2, [r6]
 80015a0:	ed96 2a01 	vldr	s4, [r6, #4]
 80015a4:	f000 010f 	and.w	r1, r0, #15
 80015a8:	0900      	lsrs	r0, r0, #4
 80015aa:	eb05 0080 	add.w	r0, r5, r0, lsl #2
 80015ae:	eb05 0281 	add.w	r2, r5, r1, lsl #2
 80015b2:	edd0 1a00 	vldr	s3, [r0]
 80015b6:	edd2 0a00 	vldr	s1, [r2]
 80015ba:	3608      	adds	r6, #8
 80015bc:	ee01 0a81 	vmla.f32	s0, s3, s2
 80015c0:	4576      	cmp	r6, lr
 80015c2:	ee00 0a82 	vmla.f32	s0, s1, s4
 80015c6:	d3cf      	bcc.n	8001568 <ai_dict4_dot_array_f32+0xd4>
 80015c8:	ea5f 70cc 	movs.w	r0, ip, lsl #31
 80015cc:	d509      	bpl.n	80015e2 <ai_dict4_dot_array_f32+0x14e>
 80015ce:	7821      	ldrb	r1, [r4, #0]
 80015d0:	ed96 1a00 	vldr	s2, [r6]
 80015d4:	0909      	lsrs	r1, r1, #4
 80015d6:	eb05 0081 	add.w	r0, r5, r1, lsl #2
 80015da:	edd0 0a00 	vldr	s1, [r0]
 80015de:	ee00 0a81 	vmla.f32	s0, s1, s2
 80015e2:	edd8 1a00 	vldr	s3, [r8]
 80015e6:	ee31 0a80 	vadd.f32	s0, s3, s0
 80015ea:	ed88 0a00 	vstr	s0, [r8]
 80015ee:	ecbd 8b02 	vpop	{d8}
 80015f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

080015f8 <.text_7>:
 80015f8:	00000000 	.word	0x00000000

080015fc <ai_dict_decompress_f32>:
 80015fc:	b4f0      	push	{r4, r5, r6, r7}
 80015fe:	4604      	mov	r4, r0
 8001600:	9805      	ldr	r0, [sp, #20]
 8001602:	9e04      	ldr	r6, [sp, #16]
 8001604:	2b04      	cmp	r3, #4
 8001606:	eb04 0580 	add.w	r5, r4, r0, lsl #2
 800160a:	d003      	beq.n	8001614 <ai_dict_decompress_f32+0x18>
 800160c:	2b08      	cmp	r3, #8
 800160e:	d03e      	beq.n	800168e <ai_dict_decompress_f32+0x92>
 8001610:	bcf0      	pop	{r4, r5, r6, r7}
 8001612:	4770      	bx	lr
 8001614:	42ac      	cmp	r4, r5
 8001616:	d259      	bcs.n	80016cc <ai_dict_decompress_f32+0xd0>
 8001618:	0870      	lsrs	r0, r6, #1
 800161a:	d02e      	beq.n	800167a <ai_dict_decompress_f32+0x7e>
 800161c:	07c3      	lsls	r3, r0, #31
 800161e:	d50c      	bpl.n	800163a <ai_dict_decompress_f32+0x3e>
 8001620:	780f      	ldrb	r7, [r1, #0]
 8001622:	093f      	lsrs	r7, r7, #4
 8001624:	f852 3027 	ldr.w	r3, [r2, r7, lsl #2]
 8001628:	6023      	str	r3, [r4, #0]
 800162a:	f811 7b01 	ldrb.w	r7, [r1], #1
 800162e:	f007 070f 	and.w	r7, r7, #15
 8001632:	f852 3027 	ldr.w	r3, [r2, r7, lsl #2]
 8001636:	6063      	str	r3, [r4, #4]
 8001638:	3408      	adds	r4, #8
 800163a:	0840      	lsrs	r0, r0, #1
 800163c:	d01d      	beq.n	800167a <ai_dict_decompress_f32+0x7e>
 800163e:	780b      	ldrb	r3, [r1, #0]
 8001640:	091b      	lsrs	r3, r3, #4
 8001642:	f852 7023 	ldr.w	r7, [r2, r3, lsl #2]
 8001646:	6027      	str	r7, [r4, #0]
 8001648:	f811 3b01 	ldrb.w	r3, [r1], #1
 800164c:	f003 030f 	and.w	r3, r3, #15
 8001650:	f852 7023 	ldr.w	r7, [r2, r3, lsl #2]
 8001654:	6067      	str	r7, [r4, #4]
 8001656:	f104 0308 	add.w	r3, r4, #8
 800165a:	780c      	ldrb	r4, [r1, #0]
 800165c:	0924      	lsrs	r4, r4, #4
 800165e:	f852 7024 	ldr.w	r7, [r2, r4, lsl #2]
 8001662:	601f      	str	r7, [r3, #0]
 8001664:	1e40      	subs	r0, r0, #1
 8001666:	f811 4b01 	ldrb.w	r4, [r1], #1
 800166a:	f004 040f 	and.w	r4, r4, #15
 800166e:	f852 7024 	ldr.w	r7, [r2, r4, lsl #2]
 8001672:	605f      	str	r7, [r3, #4]
 8001674:	f103 0408 	add.w	r4, r3, #8
 8001678:	d1e1      	bne.n	800163e <ai_dict_decompress_f32+0x42>
 800167a:	07f0      	lsls	r0, r6, #31
 800167c:	d5ca      	bpl.n	8001614 <ai_dict_decompress_f32+0x18>
 800167e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001682:	091b      	lsrs	r3, r3, #4
 8001684:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8001688:	f844 0b04 	str.w	r0, [r4], #4
 800168c:	e7c2      	b.n	8001614 <ai_dict_decompress_f32+0x18>
 800168e:	42ac      	cmp	r4, r5
 8001690:	d21c      	bcs.n	80016cc <ai_dict_decompress_f32+0xd0>
 8001692:	7808      	ldrb	r0, [r1, #0]
 8001694:	f852 0020 	ldr.w	r0, [r2, r0, lsl #2]
 8001698:	6020      	str	r0, [r4, #0]
 800169a:	1d20      	adds	r0, r4, #4
 800169c:	42a8      	cmp	r0, r5
 800169e:	bf3f      	itttt	cc
 80016a0:	784c      	ldrbcc	r4, [r1, #1]
 80016a2:	f852 3024 	ldrcc.w	r3, [r2, r4, lsl #2]
 80016a6:	f840 3b04 	strcc.w	r3, [r0], #4
 80016aa:	42a8      	cmpcc	r0, r5
 80016ac:	d20e      	bcs.n	80016cc <ai_dict_decompress_f32+0xd0>
 80016ae:	788b      	ldrb	r3, [r1, #2]
 80016b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80016b4:	f840 3b04 	str.w	r3, [r0], #4
 80016b8:	42a8      	cmp	r0, r5
 80016ba:	d207      	bcs.n	80016cc <ai_dict_decompress_f32+0xd0>
 80016bc:	78cc      	ldrb	r4, [r1, #3]
 80016be:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
 80016c2:	1d09      	adds	r1, r1, #4
 80016c4:	1d04      	adds	r4, r0, #4
 80016c6:	42ac      	cmp	r4, r5
 80016c8:	6003      	str	r3, [r0, #0]
 80016ca:	d3e2      	bcc.n	8001692 <ai_dict_decompress_f32+0x96>
 80016cc:	bcf0      	pop	{r4, r5, r6, r7}
 80016ce:	4770      	bx	lr

080016d0 <forward_conv2d>:
 80016d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80016d4:	4605      	mov	r5, r0
 80016d6:	b0a9      	sub	sp, #164	; 0xa4
 80016d8:	696b      	ldr	r3, [r5, #20]
 80016da:	8819      	ldrh	r1, [r3, #0]
 80016dc:	2900      	cmp	r1, #0
 80016de:	bf1a      	itte	ne
 80016e0:	6858      	ldrne	r0, [r3, #4]
 80016e2:	1d00      	addne	r0, r0, #4
 80016e4:	2004      	moveq	r0, #4
 80016e6:	6800      	ldr	r0, [r0, #0]
 80016e8:	2800      	cmp	r0, #0
 80016ea:	bf14      	ite	ne
 80016ec:	6802      	ldrne	r2, [r0, #0]
 80016ee:	2200      	moveq	r2, #0
 80016f0:	2901      	cmp	r1, #1
 80016f2:	bfc6      	itte	gt
 80016f4:	6858      	ldrgt	r0, [r3, #4]
 80016f6:	3010      	addgt	r0, #16
 80016f8:	2004      	movle	r0, #4
 80016fa:	6800      	ldr	r0, [r0, #0]
 80016fc:	2800      	cmp	r0, #0
 80016fe:	bf14      	ite	ne
 8001700:	f8d0 a000 	ldrne.w	sl, [r0]
 8001704:	f04f 0a00 	moveq.w	sl, #0
 8001708:	2902      	cmp	r1, #2
 800170a:	bfc6      	itte	gt
 800170c:	6858      	ldrgt	r0, [r3, #4]
 800170e:	f100 041c 	addgt.w	r4, r0, #28
 8001712:	2404      	movle	r4, #4
 8001714:	6820      	ldr	r0, [r4, #0]
 8001716:	2800      	cmp	r0, #0
 8001718:	bf14      	ite	ne
 800171a:	6806      	ldrne	r6, [r0, #0]
 800171c:	2600      	moveq	r6, #0
 800171e:	2902      	cmp	r1, #2
 8001720:	dd0a      	ble.n	8001738 <forward_conv2d+0x68>
 8001722:	685b      	ldr	r3, [r3, #4]
 8001724:	f113 0118 	adds.w	r1, r3, #24
 8001728:	d006      	beq.n	8001738 <forward_conv2d+0x68>
 800172a:	8b19      	ldrh	r1, [r3, #24]
 800172c:	2901      	cmp	r1, #1
 800172e:	dd03      	ble.n	8001738 <forward_conv2d+0x68>
 8001730:	69d9      	ldr	r1, [r3, #28]
 8001732:	b109      	cbz	r1, 8001738 <forward_conv2d+0x68>
 8001734:	6849      	ldr	r1, [r1, #4]
 8001736:	e000      	b.n	800173a <forward_conv2d+0x6a>
 8001738:	2100      	movs	r1, #0
 800173a:	b100      	cbz	r0, 800173e <forward_conv2d+0x6e>
 800173c:	6880      	ldr	r0, [r0, #8]
 800173e:	68d7      	ldr	r7, [r2, #12]
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	931b      	str	r3, [sp, #108]	; 0x6c
 8001744:	f8da 300c 	ldr.w	r3, [sl, #12]
 8001748:	685c      	ldr	r4, [r3, #4]
 800174a:	9404      	str	r4, [sp, #16]
 800174c:	68dc      	ldr	r4, [r3, #12]
 800174e:	689b      	ldr	r3, [r3, #8]
 8001750:	9314      	str	r3, [sp, #80]	; 0x50
 8001752:	68fb      	ldr	r3, [r7, #12]
 8001754:	931a      	str	r3, [sp, #104]	; 0x68
 8001756:	68bf      	ldr	r7, [r7, #8]
 8001758:	9720      	str	r7, [sp, #128]	; 0x80
 800175a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800175c:	f8ad 3040 	strh.w	r3, [sp, #64]	; 0x40
 8001760:	8d2f      	ldrh	r7, [r5, #40]	; 0x28
 8001762:	971f      	str	r7, [sp, #124]	; 0x7c
 8001764:	6bab      	ldr	r3, [r5, #56]	; 0x38
 8001766:	681f      	ldr	r7, [r3, #0]
 8001768:	f8b3 8004 	ldrh.w	r8, [r3, #4]
 800176c:	6aeb      	ldr	r3, [r5, #44]	; 0x2c
 800176e:	9319      	str	r3, [sp, #100]	; 0x64
 8001770:	6b2b      	ldr	r3, [r5, #48]	; 0x30
 8001772:	9318      	str	r3, [sp, #96]	; 0x60
 8001774:	68f3      	ldr	r3, [r6, #12]
 8001776:	f8d3 e008 	ldr.w	lr, [r3, #8]
 800177a:	f8cd e04c 	str.w	lr, [sp, #76]	; 0x4c
 800177e:	685b      	ldr	r3, [r3, #4]
 8001780:	9312      	str	r3, [sp, #72]	; 0x48
 8001782:	69ab      	ldr	r3, [r5, #24]
 8001784:	931e      	str	r3, [sp, #120]	; 0x78
 8001786:	6992      	ldr	r2, [r2, #24]
 8001788:	6893      	ldr	r3, [r2, #8]
 800178a:	931d      	str	r3, [sp, #116]	; 0x74
 800178c:	69b2      	ldr	r2, [r6, #24]
 800178e:	f8d2 9008 	ldr.w	r9, [r2, #8]
 8001792:	b119      	cbz	r1, 800179c <forward_conv2d+0xcc>
 8001794:	698a      	ldr	r2, [r1, #24]
 8001796:	6893      	ldr	r3, [r2, #8]
 8001798:	9317      	str	r3, [sp, #92]	; 0x5c
 800179a:	e001      	b.n	80017a0 <forward_conv2d+0xd0>
 800179c:	2200      	movs	r2, #0
 800179e:	9217      	str	r2, [sp, #92]	; 0x5c
 80017a0:	f8da 1018 	ldr.w	r1, [sl, #24]
 80017a4:	688a      	ldr	r2, [r1, #8]
 80017a6:	9203      	str	r2, [sp, #12]
 80017a8:	69e9      	ldr	r1, [r5, #28]
 80017aa:	b118      	cbz	r0, 80017b4 <forward_conv2d+0xe4>
 80017ac:	6981      	ldr	r1, [r0, #24]
 80017ae:	688a      	ldr	r2, [r1, #8]
 80017b0:	9215      	str	r2, [sp, #84]	; 0x54
 80017b2:	e005      	b.n	80017c0 <forward_conv2d+0xf0>
 80017b4:	b111      	cbz	r1, 80017bc <forward_conv2d+0xec>
 80017b6:	688a      	ldr	r2, [r1, #8]
 80017b8:	9215      	str	r2, [sp, #84]	; 0x54
 80017ba:	e001      	b.n	80017c0 <forward_conv2d+0xf0>
 80017bc:	2300      	movs	r3, #0
 80017be:	9315      	str	r3, [sp, #84]	; 0x54
 80017c0:	9915      	ldr	r1, [sp, #84]	; 0x54
 80017c2:	9102      	str	r1, [sp, #8]
 80017c4:	b920      	cbnz	r0, 80017d0 <forward_conv2d+0x100>
 80017c6:	2100      	movs	r1, #0
 80017c8:	2201      	movs	r2, #1
 80017ca:	9124      	str	r1, [sp, #144]	; 0x90
 80017cc:	9223      	str	r2, [sp, #140]	; 0x8c
 80017ce:	e008      	b.n	80017e2 <forward_conv2d+0x112>
 80017d0:	6941      	ldr	r1, [r0, #20]
 80017d2:	688a      	ldr	r2, [r1, #8]
 80017d4:	9224      	str	r2, [sp, #144]	; 0x90
 80017d6:	6980      	ldr	r0, [r0, #24]
 80017d8:	6841      	ldr	r1, [r0, #4]
 80017da:	6800      	ldr	r0, [r0, #0]
 80017dc:	f004 fed0 	bl	8006580 <ai_array_get_byte_size>
 80017e0:	9023      	str	r0, [sp, #140]	; 0x8c
 80017e2:	aa18      	add	r2, sp, #96	; 0x60
 80017e4:	6a28      	ldr	r0, [r5, #32]
 80017e6:	2800      	cmp	r0, #0
 80017e8:	bf12      	itee	ne
 80017ea:	9022      	strne	r0, [sp, #136]	; 0x88
 80017ec:	f8df 1d28 	ldreq.w	r1, [pc, #3368]	; 8002518 <.text_15>
 80017f0:	9122      	streq	r1, [sp, #136]	; 0x88
 80017f2:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80017f4:	8813      	ldrh	r3, [r2, #0]
 80017f6:	1e48      	subs	r0, r1, #1
 80017f8:	1e5b      	subs	r3, r3, #1
 80017fa:	aa19      	add	r2, sp, #100	; 0x64
 80017fc:	fb03 1100 	mla	r1, r3, r0, r1
 8001800:	9116      	str	r1, [sp, #88]	; 0x58
 8001802:	9812      	ldr	r0, [sp, #72]	; 0x48
 8001804:	8813      	ldrh	r3, [r2, #0]
 8001806:	1e41      	subs	r1, r0, #1
 8001808:	1e5b      	subs	r3, r3, #1
 800180a:	fb03 0001 	mla	r0, r3, r1, r0
 800180e:	901c      	str	r0, [sp, #112]	; 0x70
 8001810:	2200      	movs	r2, #0
 8001812:	69b6      	ldr	r6, [r6, #24]
 8001814:	6831      	ldr	r1, [r6, #0]
 8001816:	11cb      	asrs	r3, r1, #7
 8001818:	ea4f 5c61 	mov.w	ip, r1, asr #21
 800181c:	1449      	asrs	r1, r1, #17
 800181e:	f001 010f 	and.w	r1, r1, #15
 8001822:	2000      	movs	r0, #0
 8001824:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001828:	f00c 0c03 	and.w	ip, ip, #3
 800182c:	2904      	cmp	r1, #4
 800182e:	4683      	mov	fp, r0
 8001830:	fa23 f30c 	lsr.w	r3, r3, ip
 8001834:	bf14      	ite	ne
 8001836:	2908      	cmpne	r1, #8
 8001838:	68f2      	ldreq	r2, [r6, #12]
 800183a:	b1da      	cbz	r2, 8001874 <forward_conv2d+0x1a4>
 800183c:	6969      	ldr	r1, [r5, #20]
 800183e:	880d      	ldrh	r5, [r1, #0]
 8001840:	2d04      	cmp	r5, #4
 8001842:	bfa6      	itte	ge
 8001844:	6849      	ldrge	r1, [r1, #4]
 8001846:	3128      	addge	r1, #40	; 0x28
 8001848:	2104      	movlt	r1, #4
 800184a:	6809      	ldr	r1, [r1, #0]
 800184c:	2900      	cmp	r1, #0
 800184e:	bf1f      	itttt	ne
 8001850:	6808      	ldrne	r0, [r1, #0]
 8001852:	2800      	cmpne	r0, #0
 8001854:	6981      	ldrne	r1, [r0, #24]
 8001856:	f8d1 b008 	ldrne.w	fp, [r1, #8]
 800185a:	6980      	ldr	r0, [r0, #24]
 800185c:	6841      	ldr	r1, [r0, #4]
 800185e:	981b      	ldr	r0, [sp, #108]	; 0x6c
 8001860:	9101      	str	r1, [sp, #4]
 8001862:	9000      	str	r0, [sp, #0]
 8001864:	4658      	mov	r0, fp
 8001866:	68b1      	ldr	r1, [r6, #8]
 8001868:	f7ff fec8 	bl	80015fc <ai_dict_decompress_f32>
 800186c:	f1bb 0f00 	cmp.w	fp, #0
 8001870:	bf18      	it	ne
 8001872:	46d9      	movne	r9, fp
 8001874:	b2bf      	uxth	r7, r7
 8001876:	427f      	negs	r7, r7
 8001878:	2c00      	cmp	r4, #0
 800187a:	d073      	beq.n	8001964 <forward_conv2d+0x294>
 800187c:	4622      	mov	r2, r4
 800187e:	f1c8 0800 	rsb	r8, r8, #0
 8001882:	9c04      	ldr	r4, [sp, #16]
 8001884:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8001888:	9e02      	ldr	r6, [sp, #8]
 800188a:	f8cd 8098 	str.w	r8, [sp, #152]	; 0x98
 800188e:	f8cd 909c 	str.w	r9, [sp, #156]	; 0x9c
 8001892:	9711      	str	r7, [sp, #68]	; 0x44
 8001894:	9221      	str	r2, [sp, #132]	; 0x84
 8001896:	9826      	ldr	r0, [sp, #152]	; 0x98
 8001898:	991a      	ldr	r1, [sp, #104]	; 0x68
 800189a:	9a11      	ldr	r2, [sp, #68]	; 0x44
 800189c:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800189e:	9025      	str	r0, [sp, #148]	; 0x94
 80018a0:	9811      	ldr	r0, [sp, #68]	; 0x44
 80018a2:	4240      	negs	r0, r0
 80018a4:	bfd8      	it	le
 80018a6:	2000      	movle	r0, #0
 80018a8:	1a89      	subs	r1, r1, r2
 80018aa:	4299      	cmp	r1, r3
 80018ac:	bf3d      	ittte	cc
 80018ae:	9a1a      	ldrcc	r2, [sp, #104]	; 0x68
 80018b0:	9911      	ldrcc	r1, [sp, #68]	; 0x44
 80018b2:	1a51      	subcc	r1, r2, r1
 80018b4:	4619      	movcs	r1, r3
 80018b6:	910a      	str	r1, [sp, #40]	; 0x28
 80018b8:	9009      	str	r0, [sp, #36]	; 0x24
 80018ba:	9402      	str	r4, [sp, #8]
 80018bc:	981e      	ldr	r0, [sp, #120]	; 0x78
 80018be:	f8bd 1040 	ldrh.w	r1, [sp, #64]	; 0x40
 80018c2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80018c4:	9008      	str	r0, [sp, #32]
 80018c6:	9107      	str	r1, [sp, #28]
 80018c8:	b212      	sxth	r2, r2
 80018ca:	9813      	ldr	r0, [sp, #76]	; 0x4c
 80018cc:	9912      	ldr	r1, [sp, #72]	; 0x48
 80018ce:	9b19      	ldr	r3, [sp, #100]	; 0x64
 80018d0:	920f      	str	r2, [sp, #60]	; 0x3c
 80018d2:	9006      	str	r0, [sp, #24]
 80018d4:	9105      	str	r1, [sp, #20]
 80018d6:	b21b      	sxth	r3, r3
 80018d8:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 80018da:	9814      	ldr	r0, [sp, #80]	; 0x50
 80018dc:	9920      	ldr	r1, [sp, #128]	; 0x80
 80018de:	930e      	str	r3, [sp, #56]	; 0x38
 80018e0:	920d      	str	r2, [sp, #52]	; 0x34
 80018e2:	9004      	str	r0, [sp, #16]
 80018e4:	9103      	str	r1, [sp, #12]
 80018e6:	9b11      	ldr	r3, [sp, #68]	; 0x44
 80018e8:	9a25      	ldr	r2, [sp, #148]	; 0x94
 80018ea:	981b      	ldr	r0, [sp, #108]	; 0x6c
 80018ec:	9917      	ldr	r1, [sp, #92]	; 0x5c
 80018ee:	930c      	str	r3, [sp, #48]	; 0x30
 80018f0:	920b      	str	r2, [sp, #44]	; 0x2c
 80018f2:	9001      	str	r0, [sp, #4]
 80018f4:	9100      	str	r1, [sp, #0]
 80018f6:	9b27      	ldr	r3, [sp, #156]	; 0x9c
 80018f8:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 80018fa:	4659      	mov	r1, fp
 80018fc:	2000      	movs	r0, #0
 80018fe:	f7ff fa43 	bl	8000d88 <ai_conv2d_stripe_f32>
 8001902:	9814      	ldr	r0, [sp, #80]	; 0x50
 8001904:	b310      	cbz	r0, 800194c <forward_conv2d+0x27c>
 8001906:	f8cd a000 	str.w	sl, [sp]
 800190a:	9d15      	ldr	r5, [sp, #84]	; 0x54
 800190c:	9f24      	ldr	r7, [sp, #144]	; 0x90
 800190e:	f8dd 808c 	ldr.w	r8, [sp, #140]	; 0x8c
 8001912:	f8dd 9088 	ldr.w	r9, [sp, #136]	; 0x88
 8001916:	4682      	mov	sl, r0
 8001918:	9800      	ldr	r0, [sp, #0]
 800191a:	6981      	ldr	r1, [r0, #24]
 800191c:	f8c1 b008 	str.w	fp, [r1, #8]
 8001920:	462b      	mov	r3, r5
 8001922:	4622      	mov	r2, r4
 8001924:	4608      	mov	r0, r1
 8001926:	47c8      	blx	r9
 8001928:	443d      	add	r5, r7
 800192a:	1ba8      	subs	r0, r5, r6
 800192c:	4540      	cmp	r0, r8
 800192e:	bfa8      	it	ge
 8001930:	4635      	movge	r5, r6
 8001932:	f1ba 0a01 	subs.w	sl, sl, #1
 8001936:	eb0b 0b84 	add.w	fp, fp, r4, lsl #2
 800193a:	d1ed      	bne.n	8001918 <forward_conv2d+0x248>
 800193c:	f8dd a000 	ldr.w	sl, [sp]
 8001940:	9515      	str	r5, [sp, #84]	; 0x54
 8001942:	9724      	str	r7, [sp, #144]	; 0x90
 8001944:	f8cd 808c 	str.w	r8, [sp, #140]	; 0x8c
 8001948:	f8cd 9088 	str.w	r9, [sp, #136]	; 0x88
 800194c:	f8da 0018 	ldr.w	r0, [sl, #24]
 8001950:	68c1      	ldr	r1, [r0, #12]
 8001952:	6081      	str	r1, [r0, #8]
 8001954:	9811      	ldr	r0, [sp, #68]	; 0x44
 8001956:	991f      	ldr	r1, [sp, #124]	; 0x7c
 8001958:	1808      	adds	r0, r1, r0
 800195a:	9011      	str	r0, [sp, #68]	; 0x44
 800195c:	9821      	ldr	r0, [sp, #132]	; 0x84
 800195e:	1e40      	subs	r0, r0, #1
 8001960:	9021      	str	r0, [sp, #132]	; 0x84
 8001962:	d198      	bne.n	8001896 <forward_conv2d+0x1c6>
 8001964:	b029      	add	sp, #164	; 0xa4
 8001966:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0800196c <forward_conv2d_nl_pool>:
 800196c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001970:	4604      	mov	r4, r0
 8001972:	b0b9      	sub	sp, #228	; 0xe4
 8001974:	6963      	ldr	r3, [r4, #20]
 8001976:	8819      	ldrh	r1, [r3, #0]
 8001978:	2900      	cmp	r1, #0
 800197a:	bf1a      	itte	ne
 800197c:	6858      	ldrne	r0, [r3, #4]
 800197e:	1d00      	addne	r0, r0, #4
 8001980:	2004      	moveq	r0, #4
 8001982:	6800      	ldr	r0, [r0, #0]
 8001984:	2800      	cmp	r0, #0
 8001986:	bf14      	ite	ne
 8001988:	6802      	ldrne	r2, [r0, #0]
 800198a:	2200      	moveq	r2, #0
 800198c:	2901      	cmp	r1, #1
 800198e:	bfc6      	itte	gt
 8001990:	6858      	ldrgt	r0, [r3, #4]
 8001992:	3010      	addgt	r0, #16
 8001994:	2004      	movle	r0, #4
 8001996:	6800      	ldr	r0, [r0, #0]
 8001998:	2800      	cmp	r0, #0
 800199a:	bf14      	ite	ne
 800199c:	f8d0 9000 	ldrne.w	r9, [r0]
 80019a0:	f04f 0900 	moveq.w	r9, #0
 80019a4:	2902      	cmp	r1, #2
 80019a6:	bfc6      	itte	gt
 80019a8:	6858      	ldrgt	r0, [r3, #4]
 80019aa:	f100 071c 	addgt.w	r7, r0, #28
 80019ae:	2704      	movle	r7, #4
 80019b0:	6838      	ldr	r0, [r7, #0]
 80019b2:	2800      	cmp	r0, #0
 80019b4:	bf14      	ite	ne
 80019b6:	6806      	ldrne	r6, [r0, #0]
 80019b8:	2600      	moveq	r6, #0
 80019ba:	2902      	cmp	r1, #2
 80019bc:	dd0a      	ble.n	80019d4 <forward_conv2d_nl_pool+0x68>
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	f113 0118 	adds.w	r1, r3, #24
 80019c4:	d006      	beq.n	80019d4 <forward_conv2d_nl_pool+0x68>
 80019c6:	8b19      	ldrh	r1, [r3, #24]
 80019c8:	2901      	cmp	r1, #1
 80019ca:	dd03      	ble.n	80019d4 <forward_conv2d_nl_pool+0x68>
 80019cc:	69d9      	ldr	r1, [r3, #28]
 80019ce:	b109      	cbz	r1, 80019d4 <forward_conv2d_nl_pool+0x68>
 80019d0:	6849      	ldr	r1, [r1, #4]
 80019d2:	e000      	b.n	80019d6 <forward_conv2d_nl_pool+0x6a>
 80019d4:	2100      	movs	r1, #0
 80019d6:	b100      	cbz	r0, 80019da <forward_conv2d_nl_pool+0x6e>
 80019d8:	6880      	ldr	r0, [r0, #8]
 80019da:	68d7      	ldr	r7, [r2, #12]
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	9323      	str	r3, [sp, #140]	; 0x8c
 80019e0:	f8d9 500c 	ldr.w	r5, [r9, #12]
 80019e4:	686b      	ldr	r3, [r5, #4]
 80019e6:	9310      	str	r3, [sp, #64]	; 0x40
 80019e8:	68eb      	ldr	r3, [r5, #12]
 80019ea:	9322      	str	r3, [sp, #136]	; 0x88
 80019ec:	68ab      	ldr	r3, [r5, #8]
 80019ee:	9321      	str	r3, [sp, #132]	; 0x84
 80019f0:	68fb      	ldr	r3, [r7, #12]
 80019f2:	931b      	str	r3, [sp, #108]	; 0x6c
 80019f4:	68bf      	ldr	r7, [r7, #8]
 80019f6:	972d      	str	r7, [sp, #180]	; 0xb4
 80019f8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80019fa:	f8ad 304c 	strh.w	r3, [sp, #76]	; 0x4c
 80019fe:	8d27      	ldrh	r7, [r4, #40]	; 0x28
 8001a00:	9720      	str	r7, [sp, #128]	; 0x80
 8001a02:	6ba3      	ldr	r3, [r4, #56]	; 0x38
 8001a04:	881f      	ldrh	r7, [r3, #0]
 8001a06:	f8b3 8004 	ldrh.w	r8, [r3, #4]
 8001a0a:	689d      	ldr	r5, [r3, #8]
 8001a0c:	69a3      	ldr	r3, [r4, #24]
 8001a0e:	932c      	str	r3, [sp, #176]	; 0xb0
 8001a10:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
 8001a12:	931f      	str	r3, [sp, #124]	; 0x7c
 8001a14:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8001a16:	931e      	str	r3, [sp, #120]	; 0x78
 8001a18:	68f3      	ldr	r3, [r6, #12]
 8001a1a:	f8d3 e004 	ldr.w	lr, [r3, #4]
 8001a1e:	f8cd e068 	str.w	lr, [sp, #104]	; 0x68
 8001a22:	689b      	ldr	r3, [r3, #8]
 8001a24:	9319      	str	r3, [sp, #100]	; 0x64
 8001a26:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8001a28:	932b      	str	r3, [sp, #172]	; 0xac
 8001a2a:	6c63      	ldr	r3, [r4, #68]	; 0x44
 8001a2c:	932a      	str	r3, [sp, #168]	; 0xa8
 8001a2e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
 8001a30:	9311      	str	r3, [sp, #68]	; 0x44
 8001a32:	6d23      	ldr	r3, [r4, #80]	; 0x50
 8001a34:	f8d3 a000 	ldr.w	sl, [r3]
 8001a38:	685b      	ldr	r3, [r3, #4]
 8001a3a:	9329      	str	r3, [sp, #164]	; 0xa4
 8001a3c:	6992      	ldr	r2, [r2, #24]
 8001a3e:	6893      	ldr	r3, [r2, #8]
 8001a40:	9328      	str	r3, [sp, #160]	; 0xa0
 8001a42:	69b2      	ldr	r2, [r6, #24]
 8001a44:	f8d2 b008 	ldr.w	fp, [r2, #8]
 8001a48:	b119      	cbz	r1, 8001a52 <forward_conv2d_nl_pool+0xe6>
 8001a4a:	698a      	ldr	r2, [r1, #24]
 8001a4c:	6893      	ldr	r3, [r2, #8]
 8001a4e:	931d      	str	r3, [sp, #116]	; 0x74
 8001a50:	e001      	b.n	8001a56 <forward_conv2d_nl_pool+0xea>
 8001a52:	2200      	movs	r2, #0
 8001a54:	921d      	str	r2, [sp, #116]	; 0x74
 8001a56:	69e1      	ldr	r1, [r4, #28]
 8001a58:	b118      	cbz	r0, 8001a62 <forward_conv2d_nl_pool+0xf6>
 8001a5a:	6981      	ldr	r1, [r0, #24]
 8001a5c:	688a      	ldr	r2, [r1, #8]
 8001a5e:	921c      	str	r2, [sp, #112]	; 0x70
 8001a60:	e005      	b.n	8001a6e <forward_conv2d_nl_pool+0x102>
 8001a62:	b111      	cbz	r1, 8001a6a <forward_conv2d_nl_pool+0xfe>
 8001a64:	688a      	ldr	r2, [r1, #8]
 8001a66:	921c      	str	r2, [sp, #112]	; 0x70
 8001a68:	e001      	b.n	8001a6e <forward_conv2d_nl_pool+0x102>
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	931c      	str	r3, [sp, #112]	; 0x70
 8001a6e:	991c      	ldr	r1, [sp, #112]	; 0x70
 8001a70:	9102      	str	r1, [sp, #8]
 8001a72:	b920      	cbnz	r0, 8001a7e <forward_conv2d_nl_pool+0x112>
 8001a74:	2100      	movs	r1, #0
 8001a76:	2201      	movs	r2, #1
 8001a78:	9116      	str	r1, [sp, #88]	; 0x58
 8001a7a:	9215      	str	r2, [sp, #84]	; 0x54
 8001a7c:	e008      	b.n	8001a90 <forward_conv2d_nl_pool+0x124>
 8001a7e:	6941      	ldr	r1, [r0, #20]
 8001a80:	688a      	ldr	r2, [r1, #8]
 8001a82:	9216      	str	r2, [sp, #88]	; 0x58
 8001a84:	6980      	ldr	r0, [r0, #24]
 8001a86:	6841      	ldr	r1, [r0, #4]
 8001a88:	6800      	ldr	r0, [r0, #0]
 8001a8a:	f004 fd79 	bl	8006580 <ai_array_get_byte_size>
 8001a8e:	9015      	str	r0, [sp, #84]	; 0x54
 8001a90:	aa1e      	add	r2, sp, #120	; 0x78
 8001a92:	6a20      	ldr	r0, [r4, #32]
 8001a94:	2800      	cmp	r0, #0
 8001a96:	bf12      	itee	ne
 8001a98:	9030      	strne	r0, [sp, #192]	; 0xc0
 8001a9a:	f8df 1a7c 	ldreq.w	r1, [pc, #2684]	; 8002518 <.text_15>
 8001a9e:	9130      	streq	r1, [sp, #192]	; 0xc0
 8001aa0:	6d61      	ldr	r1, [r4, #84]	; 0x54
 8001aa2:	9819      	ldr	r0, [sp, #100]	; 0x64
 8001aa4:	8813      	ldrh	r3, [r2, #0]
 8001aa6:	9127      	str	r1, [sp, #156]	; 0x9c
 8001aa8:	1e5b      	subs	r3, r3, #1
 8001aaa:	1e41      	subs	r1, r0, #1
 8001aac:	aa1f      	add	r2, sp, #124	; 0x7c
 8001aae:	fb03 0001 	mla	r0, r3, r1, r0
 8001ab2:	9018      	str	r0, [sp, #96]	; 0x60
 8001ab4:	991a      	ldr	r1, [sp, #104]	; 0x68
 8001ab6:	8813      	ldrh	r3, [r2, #0]
 8001ab8:	1e48      	subs	r0, r1, #1
 8001aba:	1e5b      	subs	r3, r3, #1
 8001abc:	fb03 1100 	mla	r1, r3, r0, r1
 8001ac0:	9126      	str	r1, [sp, #152]	; 0x98
 8001ac2:	6c21      	ldr	r1, [r4, #64]	; 0x40
 8001ac4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 8001ac6:	9818      	ldr	r0, [sp, #96]	; 0x60
 8001ac8:	9112      	str	r1, [sp, #72]	; 0x48
 8001aca:	1a12      	subs	r2, r2, r0
 8001acc:	18ba      	adds	r2, r7, r2
 8001ace:	9920      	ldr	r1, [sp, #128]	; 0x80
 8001ad0:	fa12 f085 	uxtah	r0, r2, r5
 8001ad4:	fbb0 f1f1 	udiv	r1, r0, r1
 8001ad8:	1c49      	adds	r1, r1, #1
 8001ada:	9114      	str	r1, [sp, #80]	; 0x50
 8001adc:	2000      	movs	r0, #0
 8001ade:	69b6      	ldr	r6, [r6, #24]
 8001ae0:	6831      	ldr	r1, [r6, #0]
 8001ae2:	2500      	movs	r5, #0
 8001ae4:	2200      	movs	r2, #0
 8001ae6:	11cb      	asrs	r3, r1, #7
 8001ae8:	ea4f 5c61 	mov.w	ip, r1, asr #21
 8001aec:	1449      	asrs	r1, r1, #17
 8001aee:	f001 010f 	and.w	r1, r1, #15
 8001af2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8001af6:	f00c 0c03 	and.w	ip, ip, #3
 8001afa:	2904      	cmp	r1, #4
 8001afc:	fa23 f30c 	lsr.w	r3, r3, ip
 8001b00:	bf14      	ite	ne
 8001b02:	2908      	cmpne	r1, #8
 8001b04:	68f2      	ldreq	r2, [r6, #12]
 8001b06:	b1da      	cbz	r2, 8001b40 <forward_conv2d_nl_pool+0x1d4>
 8001b08:	6961      	ldr	r1, [r4, #20]
 8001b0a:	f8b1 c000 	ldrh.w	ip, [r1]
 8001b0e:	f1bc 0f04 	cmp.w	ip, #4
 8001b12:	bfa6      	itte	ge
 8001b14:	6849      	ldrge	r1, [r1, #4]
 8001b16:	3128      	addge	r1, #40	; 0x28
 8001b18:	2104      	movlt	r1, #4
 8001b1a:	6809      	ldr	r1, [r1, #0]
 8001b1c:	2900      	cmp	r1, #0
 8001b1e:	bf1f      	itttt	ne
 8001b20:	6848      	ldrne	r0, [r1, #4]
 8001b22:	2800      	cmpne	r0, #0
 8001b24:	6981      	ldrne	r1, [r0, #24]
 8001b26:	688d      	ldrne	r5, [r1, #8]
 8001b28:	6980      	ldr	r0, [r0, #24]
 8001b2a:	6841      	ldr	r1, [r0, #4]
 8001b2c:	9823      	ldr	r0, [sp, #140]	; 0x8c
 8001b2e:	9101      	str	r1, [sp, #4]
 8001b30:	9000      	str	r0, [sp, #0]
 8001b32:	4628      	mov	r0, r5
 8001b34:	68b1      	ldr	r1, [r6, #8]
 8001b36:	f7ff fd61 	bl	80015fc <ai_dict_decompress_f32>
 8001b3a:	b10d      	cbz	r5, 8001b40 <forward_conv2d_nl_pool+0x1d4>
 8001b3c:	4628      	mov	r0, r5
 8001b3e:	e000      	b.n	8001b42 <forward_conv2d_nl_pool+0x1d6>
 8001b40:	4658      	mov	r0, fp
 8001b42:	6963      	ldr	r3, [r4, #20]
 8001b44:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
 8001b48:	881c      	ldrh	r4, [r3, #0]
 8001b4a:	f8d9 1018 	ldr.w	r1, [r9, #24]
 8001b4e:	2600      	movs	r6, #0
 8001b50:	2c04      	cmp	r4, #4
 8001b52:	bfa6      	itte	ge
 8001b54:	685b      	ldrge	r3, [r3, #4]
 8001b56:	3328      	addge	r3, #40	; 0x28
 8001b58:	2304      	movlt	r3, #4
 8001b5a:	f10d 0e44 	add.w	lr, sp, #68	; 0x44
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	2b00      	cmp	r3, #0
 8001b62:	bf14      	ite	ne
 8001b64:	681d      	ldrne	r5, [r3, #0]
 8001b66:	2500      	moveq	r5, #0
 8001b68:	427f      	negs	r7, r7
 8001b6a:	69ac      	ldr	r4, [r5, #24]
 8001b6c:	68eb      	ldr	r3, [r5, #12]
 8001b6e:	f8d4 b008 	ldr.w	fp, [r4, #8]
 8001b72:	689b      	ldr	r3, [r3, #8]
 8001b74:	9c11      	ldr	r4, [sp, #68]	; 0x44
 8001b76:	435c      	muls	r4, r3
 8001b78:	fb0c f404 	mul.w	r4, ip, r4
 8001b7c:	9437      	str	r4, [sp, #220]	; 0xdc
 8001b7e:	fa0f f28a 	sxth.w	r2, sl
 8001b82:	f9be 4000 	ldrsh.w	r4, [lr]
 8001b86:	f8dd c084 	ldr.w	ip, [sp, #132]	; 0x84
 8001b8a:	9436      	str	r4, [sp, #216]	; 0xd8
 8001b8c:	f10d 0e48 	add.w	lr, sp, #72	; 0x48
 8001b90:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8001b92:	fb0c f404 	mul.w	r4, ip, r4
 8001b96:	9435      	str	r4, [sp, #212]	; 0xd4
 8001b98:	f1c8 0800 	rsb	r8, r8, #0
 8001b9c:	f9be 4000 	ldrsh.w	r4, [lr]
 8001ba0:	9434      	str	r4, [sp, #208]	; 0xd0
 8001ba2:	4691      	mov	r9, r2
 8001ba4:	9c10      	ldr	r4, [sp, #64]	; 0x40
 8001ba6:	f8cd 80c8 	str.w	r8, [sp, #200]	; 0xc8
 8001baa:	435c      	muls	r4, r3
 8001bac:	9433      	str	r4, [sp, #204]	; 0xcc
 8001bae:	9c22      	ldr	r4, [sp, #136]	; 0x88
 8001bb0:	2c00      	cmp	r4, #0
 8001bb2:	f000 812e 	beq.w	8001e12 <forward_conv2d_nl_pool+0x4a6>
 8001bb6:	f8dd a008 	ldr.w	sl, [sp, #8]
 8001bba:	9038      	str	r0, [sp, #224]	; 0xe0
 8001bbc:	9125      	str	r1, [sp, #148]	; 0x94
 8001bbe:	4614      	mov	r4, r2
 8001bc0:	962f      	str	r6, [sp, #188]	; 0xbc
 8001bc2:	962e      	str	r6, [sp, #184]	; 0xb8
 8001bc4:	9324      	str	r3, [sp, #144]	; 0x90
 8001bc6:	9717      	str	r7, [sp, #92]	; 0x5c
 8001bc8:	9814      	ldr	r0, [sp, #80]	; 0x50
 8001bca:	2800      	cmp	r0, #0
 8001bcc:	dd6a      	ble.n	8001ca4 <forward_conv2d_nl_pool+0x338>
 8001bce:	9832      	ldr	r0, [sp, #200]	; 0xc8
 8001bd0:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8001bd2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8001bd4:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8001bd6:	9031      	str	r0, [sp, #196]	; 0xc4
 8001bd8:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8001bda:	4240      	negs	r0, r0
 8001bdc:	bfd8      	it	le
 8001bde:	2000      	movle	r0, #0
 8001be0:	1a89      	subs	r1, r1, r2
 8001be2:	4299      	cmp	r1, r3
 8001be4:	bf3d      	ittte	cc
 8001be6:	9a1b      	ldrcc	r2, [sp, #108]	; 0x6c
 8001be8:	9917      	ldrcc	r1, [sp, #92]	; 0x5c
 8001bea:	1a51      	subcc	r1, r2, r1
 8001bec:	4619      	movcs	r1, r3
 8001bee:	9009      	str	r0, [sp, #36]	; 0x24
 8001bf0:	910a      	str	r1, [sp, #40]	; 0x28
 8001bf2:	982c      	ldr	r0, [sp, #176]	; 0xb0
 8001bf4:	f8bd 104c 	ldrh.w	r1, [sp, #76]	; 0x4c
 8001bf8:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 8001bfa:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 8001bfc:	9008      	str	r0, [sp, #32]
 8001bfe:	9107      	str	r1, [sp, #28]
 8001c00:	b212      	sxth	r2, r2
 8001c02:	9819      	ldr	r0, [sp, #100]	; 0x64
 8001c04:	991a      	ldr	r1, [sp, #104]	; 0x68
 8001c06:	9006      	str	r0, [sp, #24]
 8001c08:	920f      	str	r2, [sp, #60]	; 0x3c
 8001c0a:	9105      	str	r1, [sp, #20]
 8001c0c:	b21b      	sxth	r3, r3
 8001c0e:	9824      	ldr	r0, [sp, #144]	; 0x90
 8001c10:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8001c12:	992d      	ldr	r1, [sp, #180]	; 0xb4
 8001c14:	9004      	str	r0, [sp, #16]
 8001c16:	930e      	str	r3, [sp, #56]	; 0x38
 8001c18:	920d      	str	r2, [sp, #52]	; 0x34
 8001c1a:	9103      	str	r1, [sp, #12]
 8001c1c:	9810      	ldr	r0, [sp, #64]	; 0x40
 8001c1e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8001c20:	9a31      	ldr	r2, [sp, #196]	; 0xc4
 8001c22:	9923      	ldr	r1, [sp, #140]	; 0x8c
 8001c24:	9002      	str	r0, [sp, #8]
 8001c26:	930c      	str	r3, [sp, #48]	; 0x30
 8001c28:	920b      	str	r2, [sp, #44]	; 0x2c
 8001c2a:	9101      	str	r1, [sp, #4]
 8001c2c:	4659      	mov	r1, fp
 8001c2e:	981d      	ldr	r0, [sp, #116]	; 0x74
 8001c30:	9b38      	ldr	r3, [sp, #224]	; 0xe0
 8001c32:	9a28      	ldr	r2, [sp, #160]	; 0xa0
 8001c34:	9000      	str	r0, [sp, #0]
 8001c36:	2000      	movs	r0, #0
 8001c38:	f7ff f8a6 	bl	8000d88 <ai_conv2d_stripe_f32>
 8001c3c:	9824      	ldr	r0, [sp, #144]	; 0x90
 8001c3e:	b350      	cbz	r0, 8001c96 <forward_conv2d_nl_pool+0x32a>
 8001c40:	f8cd a008 	str.w	sl, [sp, #8]
 8001c44:	9e10      	ldr	r6, [sp, #64]	; 0x40
 8001c46:	9f1c      	ldr	r7, [sp, #112]	; 0x70
 8001c48:	f8dd 80c0 	ldr.w	r8, [sp, #192]	; 0xc0
 8001c4c:	4682      	mov	sl, r0
 8001c4e:	69a9      	ldr	r1, [r5, #24]
 8001c50:	463b      	mov	r3, r7
 8001c52:	f8c1 b008 	str.w	fp, [r1, #8]
 8001c56:	4632      	mov	r2, r6
 8001c58:	4608      	mov	r0, r1
 8001c5a:	47c0      	blx	r8
 8001c5c:	9816      	ldr	r0, [sp, #88]	; 0x58
 8001c5e:	9902      	ldr	r1, [sp, #8]
 8001c60:	4407      	add	r7, r0
 8001c62:	9815      	ldr	r0, [sp, #84]	; 0x54
 8001c64:	1a79      	subs	r1, r7, r1
 8001c66:	4281      	cmp	r1, r0
 8001c68:	69a8      	ldr	r0, [r5, #24]
 8001c6a:	6841      	ldr	r1, [r0, #4]
 8001c6c:	68c0      	ldr	r0, [r0, #12]
 8001c6e:	bfa8      	it	ge
 8001c70:	9f02      	ldrge	r7, [sp, #8]
 8001c72:	eb0b 0b86 	add.w	fp, fp, r6, lsl #2
 8001c76:	eb00 0281 	add.w	r2, r0, r1, lsl #2
 8001c7a:	4593      	cmp	fp, r2
 8001c7c:	d302      	bcc.n	8001c84 <forward_conv2d_nl_pool+0x318>
 8001c7e:	0089      	lsls	r1, r1, #2
 8001c80:	4249      	negs	r1, r1
 8001c82:	448b      	add	fp, r1
 8001c84:	f1ba 0a01 	subs.w	sl, sl, #1
 8001c88:	d1e1      	bne.n	8001c4e <forward_conv2d_nl_pool+0x2e2>
 8001c8a:	f8dd a008 	ldr.w	sl, [sp, #8]
 8001c8e:	9610      	str	r6, [sp, #64]	; 0x40
 8001c90:	971c      	str	r7, [sp, #112]	; 0x70
 8001c92:	f8cd 80c0 	str.w	r8, [sp, #192]	; 0xc0
 8001c96:	69a8      	ldr	r0, [r5, #24]
 8001c98:	68c1      	ldr	r1, [r0, #12]
 8001c9a:	6081      	str	r1, [r0, #8]
 8001c9c:	f109 0001 	add.w	r0, r9, #1
 8001ca0:	fa0f f980 	sxth.w	r9, r0
 8001ca4:	9814      	ldr	r0, [sp, #80]	; 0x50
 8001ca6:	1e40      	subs	r0, r0, #1
 8001ca8:	9014      	str	r0, [sp, #80]	; 0x50
 8001caa:	d56b      	bpl.n	8001d84 <forward_conv2d_nl_pool+0x418>
 8001cac:	9833      	ldr	r0, [sp, #204]	; 0xcc
 8001cae:	fb00 f009 	mul.w	r0, r0, r9
 8001cb2:	0080      	lsls	r0, r0, #2
 8001cb4:	4240      	negs	r0, r0
 8001cb6:	eb0b 0200 	add.w	r2, fp, r0
 8001cba:	69a8      	ldr	r0, [r5, #24]
 8001cbc:	68c3      	ldr	r3, [r0, #12]
 8001cbe:	429a      	cmp	r2, r3
 8001cc0:	bf3c      	itt	cc
 8001cc2:	6847      	ldrcc	r7, [r0, #4]
 8001cc4:	eb02 0287 	addcc.w	r2, r2, r7, lsl #2
 8001cc8:	4293      	cmp	r3, r2
 8001cca:	4659      	mov	r1, fp
 8001ccc:	d236      	bcs.n	8001d3c <forward_conv2d_nl_pool+0x3d0>
 8001cce:	9e34      	ldr	r6, [sp, #208]	; 0xd0
 8001cd0:	45b1      	cmp	r9, r6
 8001cd2:	d033      	beq.n	8001d3c <forward_conv2d_nl_pool+0x3d0>
 8001cd4:	6846      	ldr	r6, [r0, #4]
 8001cd6:	eb03 0386 	add.w	r3, r3, r6, lsl #2
 8001cda:	429a      	cmp	r2, r3
 8001cdc:	f080 802e 	bcs.w	8001d3c <forward_conv2d_nl_pool+0x3d0>
 8001ce0:	ed92 0a00 	vldr	s0, [r2]
 8001ce4:	ed8b 0a00 	vstr	s0, [fp]
 8001ce8:	68c3      	ldr	r3, [r0, #12]
 8001cea:	6846      	ldr	r6, [r0, #4]
 8001cec:	1d12      	adds	r2, r2, #4
 8001cee:	eb03 0786 	add.w	r7, r3, r6, lsl #2
 8001cf2:	42ba      	cmp	r2, r7
 8001cf4:	d222      	bcs.n	8001d3c <forward_conv2d_nl_pool+0x3d0>
 8001cf6:	edd2 0a00 	vldr	s1, [r2]
 8001cfa:	edcb 0a01 	vstr	s1, [fp, #4]
 8001cfe:	68c3      	ldr	r3, [r0, #12]
 8001d00:	6846      	ldr	r6, [r0, #4]
 8001d02:	1d12      	adds	r2, r2, #4
 8001d04:	eb03 0786 	add.w	r7, r3, r6, lsl #2
 8001d08:	42ba      	cmp	r2, r7
 8001d0a:	d217      	bcs.n	8001d3c <forward_conv2d_nl_pool+0x3d0>
 8001d0c:	ed92 0a00 	vldr	s0, [r2]
 8001d10:	ed8b 0a02 	vstr	s0, [fp, #8]
 8001d14:	68c3      	ldr	r3, [r0, #12]
 8001d16:	6846      	ldr	r6, [r0, #4]
 8001d18:	1d12      	adds	r2, r2, #4
 8001d1a:	eb03 0786 	add.w	r7, r3, r6, lsl #2
 8001d1e:	42ba      	cmp	r2, r7
 8001d20:	d20c      	bcs.n	8001d3c <forward_conv2d_nl_pool+0x3d0>
 8001d22:	edd2 0a00 	vldr	s1, [r2]
 8001d26:	edcb 0a03 	vstr	s1, [fp, #12]
 8001d2a:	68c3      	ldr	r3, [r0, #12]
 8001d2c:	6846      	ldr	r6, [r0, #4]
 8001d2e:	1d12      	adds	r2, r2, #4
 8001d30:	eb03 0786 	add.w	r7, r3, r6, lsl #2
 8001d34:	42ba      	cmp	r2, r7
 8001d36:	f10b 0b10 	add.w	fp, fp, #16
 8001d3a:	d3d1      	bcc.n	8001ce0 <forward_conv2d_nl_pool+0x374>
 8001d3c:	9a2f      	ldr	r2, [sp, #188]	; 0xbc
 8001d3e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8001d40:	189a      	adds	r2, r3, r2
 8001d42:	eba2 0209 	sub.w	r2, r2, r9
 8001d46:	922f      	str	r2, [sp, #188]	; 0xbc
 8001d48:	9a11      	ldr	r2, [sp, #68]	; 0x44
 8001d4a:	9b37      	ldr	r3, [sp, #220]	; 0xdc
 8001d4c:	444a      	add	r2, r9
 8001d4e:	fa0f f982 	sxth.w	r9, r2
 8001d52:	eb01 0b83 	add.w	fp, r1, r3, lsl #2
 8001d56:	68c1      	ldr	r1, [r0, #12]
 8001d58:	6842      	ldr	r2, [r0, #4]
 8001d5a:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 8001d5e:	459b      	cmp	fp, r3
 8001d60:	460b      	mov	r3, r1
 8001d62:	d30f      	bcc.n	8001d84 <forward_conv2d_nl_pool+0x418>
 8001d64:	6841      	ldr	r1, [r0, #4]
 8001d66:	008a      	lsls	r2, r1, #2
 8001d68:	4252      	negs	r2, r2
 8001d6a:	4493      	add	fp, r2
 8001d6c:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8001d70:	458b      	cmp	fp, r1
 8001d72:	bf24      	itt	cs
 8001d74:	4493      	addcs	fp, r2
 8001d76:	458b      	cmpcs	fp, r1
 8001d78:	bf21      	itttt	cs
 8001d7a:	4493      	addcs	fp, r2
 8001d7c:	458b      	cmpcs	fp, r1
 8001d7e:	4493      	addcs	fp, r2
 8001d80:	458b      	cmpcs	fp, r1
 8001d82:	d2ef      	bcs.n	8001d64 <forward_conv2d_nl_pool+0x3f8>
 8001d84:	9812      	ldr	r0, [sp, #72]	; 0x48
 8001d86:	4581      	cmp	r9, r0
 8001d88:	d339      	bcc.n	8001dfe <forward_conv2d_nl_pool+0x492>
 8001d8a:	9911      	ldr	r1, [sp, #68]	; 0x44
 8001d8c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 8001d8e:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8001d90:	9e27      	ldr	r6, [sp, #156]	; 0x9c
 8001d92:	eba9 0001 	sub.w	r0, r9, r1
 8001d96:	fa0f f980 	sxth.w	r9, r0
 8001d9a:	982e      	ldr	r0, [sp, #184]	; 0xb8
 8001d9c:	1c40      	adds	r0, r0, #1
 8001d9e:	902e      	str	r0, [sp, #184]	; 0xb8
 8001da0:	2101      	movs	r1, #1
 8001da2:	9825      	ldr	r0, [sp, #148]	; 0x94
 8001da4:	9008      	str	r0, [sp, #32]
 8001da6:	9107      	str	r1, [sp, #28]
 8001da8:	b292      	uxth	r2, r2
 8001daa:	9811      	ldr	r0, [sp, #68]	; 0x44
 8001dac:	992a      	ldr	r1, [sp, #168]	; 0xa8
 8001dae:	9206      	str	r2, [sp, #24]
 8001db0:	b280      	uxth	r0, r0
 8001db2:	9005      	str	r0, [sp, #20]
 8001db4:	b289      	uxth	r1, r1
 8001db6:	9829      	ldr	r0, [sp, #164]	; 0xa4
 8001db8:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8001dba:	9104      	str	r1, [sp, #16]
 8001dbc:	b280      	uxth	r0, r0
 8001dbe:	b2a1      	uxth	r1, r4
 8001dc0:	9002      	str	r0, [sp, #8]
 8001dc2:	9103      	str	r1, [sp, #12]
 8001dc4:	b29b      	uxth	r3, r3
 8001dc6:	982b      	ldr	r0, [sp, #172]	; 0xac
 8001dc8:	9912      	ldr	r1, [sp, #72]	; 0x48
 8001dca:	b280      	uxth	r0, r0
 8001dcc:	b289      	uxth	r1, r1
 8001dce:	9000      	str	r0, [sp, #0]
 8001dd0:	9101      	str	r1, [sp, #4]
 8001dd2:	982f      	ldr	r0, [sp, #188]	; 0xbc
 8001dd4:	9924      	ldr	r1, [sp, #144]	; 0x90
 8001dd6:	1a12      	subs	r2, r2, r0
 8001dd8:	69a8      	ldr	r0, [r5, #24]
 8001dda:	b292      	uxth	r2, r2
 8001ddc:	b289      	uxth	r1, r1
 8001dde:	47b0      	blx	r6
 8001de0:	9825      	ldr	r0, [sp, #148]	; 0x94
 8001de2:	6881      	ldr	r1, [r0, #8]
 8001de4:	9835      	ldr	r0, [sp, #212]	; 0xd4
 8001de6:	eb01 0280 	add.w	r2, r1, r0, lsl #2
 8001dea:	9925      	ldr	r1, [sp, #148]	; 0x94
 8001dec:	608a      	str	r2, [r1, #8]
 8001dee:	9836      	ldr	r0, [sp, #216]	; 0xd8
 8001df0:	1a20      	subs	r0, r4, r0
 8001df2:	2800      	cmp	r0, #0
 8001df4:	bfc3      	ittte	gt
 8001df6:	9811      	ldrgt	r0, [sp, #68]	; 0x44
 8001df8:	1a24      	subgt	r4, r4, r0
 8001dfa:	b224      	sxthgt	r4, r4
 8001dfc:	2400      	movle	r4, #0
 8001dfe:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8001e00:	9920      	ldr	r1, [sp, #128]	; 0x80
 8001e02:	1808      	adds	r0, r1, r0
 8001e04:	9017      	str	r0, [sp, #92]	; 0x5c
 8001e06:	9922      	ldr	r1, [sp, #136]	; 0x88
 8001e08:	982e      	ldr	r0, [sp, #184]	; 0xb8
 8001e0a:	4288      	cmp	r0, r1
 8001e0c:	f4ff aedc 	bcc.w	8001bc8 <forward_conv2d_nl_pool+0x25c>
 8001e10:	9925      	ldr	r1, [sp, #148]	; 0x94
 8001e12:	69a8      	ldr	r0, [r5, #24]
 8001e14:	68c2      	ldr	r2, [r0, #12]
 8001e16:	6082      	str	r2, [r0, #8]
 8001e18:	68c8      	ldr	r0, [r1, #12]
 8001e1a:	6088      	str	r0, [r1, #8]
 8001e1c:	b039      	add	sp, #228	; 0xe4
 8001e1e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08001e24 <forward_dense>:
 8001e24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001e28:	b081      	sub	sp, #4
 8001e2a:	ed2d 8b02 	vpush	{d8}
 8001e2e:	b088      	sub	sp, #32
 8001e30:	6944      	ldr	r4, [r0, #20]
 8001e32:	8820      	ldrh	r0, [r4, #0]
 8001e34:	2800      	cmp	r0, #0
 8001e36:	bf1a      	itte	ne
 8001e38:	6861      	ldrne	r1, [r4, #4]
 8001e3a:	1d09      	addne	r1, r1, #4
 8001e3c:	2104      	moveq	r1, #4
 8001e3e:	6809      	ldr	r1, [r1, #0]
 8001e40:	2900      	cmp	r1, #0
 8001e42:	bf14      	ite	ne
 8001e44:	680a      	ldrne	r2, [r1, #0]
 8001e46:	2200      	moveq	r2, #0
 8001e48:	2802      	cmp	r0, #2
 8001e4a:	bfa6      	itte	ge
 8001e4c:	6861      	ldrge	r1, [r4, #4]
 8001e4e:	3110      	addge	r1, #16
 8001e50:	2104      	movlt	r1, #4
 8001e52:	6809      	ldr	r1, [r1, #0]
 8001e54:	2900      	cmp	r1, #0
 8001e56:	bf14      	ite	ne
 8001e58:	680f      	ldrne	r7, [r1, #0]
 8001e5a:	2700      	moveq	r7, #0
 8001e5c:	2802      	cmp	r0, #2
 8001e5e:	bfc6      	itte	gt
 8001e60:	6861      	ldrgt	r1, [r4, #4]
 8001e62:	311c      	addgt	r1, #28
 8001e64:	2104      	movle	r1, #4
 8001e66:	6809      	ldr	r1, [r1, #0]
 8001e68:	2900      	cmp	r1, #0
 8001e6a:	bf14      	ite	ne
 8001e6c:	680b      	ldrne	r3, [r1, #0]
 8001e6e:	2300      	moveq	r3, #0
 8001e70:	2802      	cmp	r0, #2
 8001e72:	dd0b      	ble.n	8001e8c <forward_dense+0x68>
 8001e74:	6861      	ldr	r1, [r4, #4]
 8001e76:	f111 0018 	adds.w	r0, r1, #24
 8001e7a:	d007      	beq.n	8001e8c <forward_dense+0x68>
 8001e7c:	8b08      	ldrh	r0, [r1, #24]
 8001e7e:	2802      	cmp	r0, #2
 8001e80:	db04      	blt.n	8001e8c <forward_dense+0x68>
 8001e82:	69c8      	ldr	r0, [r1, #28]
 8001e84:	b110      	cbz	r0, 8001e8c <forward_dense+0x68>
 8001e86:	f8d0 a004 	ldr.w	sl, [r0, #4]
 8001e8a:	e001      	b.n	8001e90 <forward_dense+0x6c>
 8001e8c:	f04f 0a00 	mov.w	sl, #0
 8001e90:	68d0      	ldr	r0, [r2, #12]
 8001e92:	6844      	ldr	r4, [r0, #4]
 8001e94:	68f8      	ldr	r0, [r7, #12]
 8001e96:	6845      	ldr	r5, [r0, #4]
 8001e98:	6881      	ldr	r1, [r0, #8]
 8001e9a:	68c0      	ldr	r0, [r0, #12]
 8001e9c:	699e      	ldr	r6, [r3, #24]
 8001e9e:	69bf      	ldr	r7, [r7, #24]
 8001ea0:	f8d6 e000 	ldr.w	lr, [r6]
 8001ea4:	6992      	ldr	r2, [r2, #24]
 8001ea6:	68bf      	ldr	r7, [r7, #8]
 8001ea8:	4341      	muls	r1, r0
 8001eaa:	2000      	movs	r0, #0
 8001eac:	ea4f 19ee 	mov.w	r9, lr, asr #7
 8001eb0:	ea4f 586e 	mov.w	r8, lr, asr #21
 8001eb4:	ea4f 4e6e 	mov.w	lr, lr, asr #17
 8001eb8:	f00e 0e0f 	and.w	lr, lr, #15
 8001ebc:	f1be 0f04 	cmp.w	lr, #4
 8001ec0:	bf14      	ite	ne
 8001ec2:	f1be 0f08 	cmpne.w	lr, #8
 8001ec6:	68f0      	ldreq	r0, [r6, #12]
 8001ec8:	f009 097f 	and.w	r9, r9, #127	; 0x7f
 8001ecc:	f008 0803 	and.w	r8, r8, #3
 8001ed0:	695e      	ldr	r6, [r3, #20]
 8001ed2:	6876      	ldr	r6, [r6, #4]
 8001ed4:	fa29 f908 	lsr.w	r9, r9, r8
 8001ed8:	f8d2 8008 	ldr.w	r8, [r2, #8]
 8001edc:	2900      	cmp	r1, #0
 8001ede:	eb07 0285 	add.w	r2, r7, r5, lsl #2
 8001ee2:	f000 80ea 	beq.w	80020ba <forward_dense+0x296>
 8001ee6:	9307      	str	r3, [sp, #28]
 8001ee8:	f8cd a014 	str.w	sl, [sp, #20]
 8001eec:	9506      	str	r5, [sp, #24]
 8001eee:	9201      	str	r2, [sp, #4]
 8001ef0:	9104      	str	r1, [sp, #16]
 8001ef2:	9907      	ldr	r1, [sp, #28]
 8001ef4:	698a      	ldr	r2, [r1, #24]
 8001ef6:	9905      	ldr	r1, [sp, #20]
 8001ef8:	f8d2 b008 	ldr.w	fp, [r2, #8]
 8001efc:	9b01      	ldr	r3, [sp, #4]
 8001efe:	2900      	cmp	r1, #0
 8001f00:	bf1a      	itte	ne
 8001f02:	698a      	ldrne	r2, [r1, #24]
 8001f04:	6892      	ldrne	r2, [r2, #8]
 8001f06:	2200      	moveq	r2, #0
 8001f08:	2800      	cmp	r0, #0
 8001f0a:	f040 80ab 	bne.w	8002064 <forward_dense+0x240>
 8001f0e:	429f      	cmp	r7, r3
 8001f10:	f080 80c7 	bcs.w	80020a2 <forward_dense+0x27e>
 8001f14:	9003      	str	r0, [sp, #12]
 8001f16:	2a00      	cmp	r2, #0
 8001f18:	bf0e      	itee	eq
 8001f1a:	ed9f 0a6b 	vldreq	s0, [pc, #428]	; 80020c8 <.text_12>
 8001f1e:	ed92 0a00 	vldrne	s0, [r2]
 8001f22:	1d12      	addne	r2, r2, #4
 8001f24:	2c04      	cmp	r4, #4
 8001f26:	4620      	mov	r0, r4
 8001f28:	46c6      	mov	lr, r8
 8001f2a:	46dc      	mov	ip, fp
 8001f2c:	eddf 0a66 	vldr	s1, [pc, #408]	; 80020c8 <.text_12>
 8001f30:	d35d      	bcc.n	8001fee <forward_dense+0x1ca>
 8001f32:	08a1      	lsrs	r1, r4, #2
 8001f34:	07cd      	lsls	r5, r1, #31
 8001f36:	d51c      	bpl.n	8001f72 <forward_dense+0x14e>
 8001f38:	ed9c 4a00 	vldr	s8, [ip]
 8001f3c:	edde 4a00 	vldr	s9, [lr]
 8001f40:	ed9c 3a01 	vldr	s6, [ip, #4]
 8001f44:	edde 3a01 	vldr	s7, [lr, #4]
 8001f48:	ed9c 2a02 	vldr	s4, [ip, #8]
 8001f4c:	edde 2a02 	vldr	s5, [lr, #8]
 8001f50:	ed9c 1a03 	vldr	s2, [ip, #12]
 8001f54:	edde 1a03 	vldr	s3, [lr, #12]
 8001f58:	ee44 0a24 	vmla.f32	s1, s8, s9
 8001f5c:	ee43 0a23 	vmla.f32	s1, s6, s7
 8001f60:	ee42 0a22 	vmla.f32	s1, s4, s5
 8001f64:	ee41 0a21 	vmla.f32	s1, s2, s3
 8001f68:	f10e 0e10 	add.w	lr, lr, #16
 8001f6c:	f10c 0c10 	add.w	ip, ip, #16
 8001f70:	1f00      	subs	r0, r0, #4
 8001f72:	0849      	lsrs	r1, r1, #1
 8001f74:	f000 803b 	beq.w	8001fee <forward_dense+0x1ca>
 8001f78:	edde 4a00 	vldr	s9, [lr]
 8001f7c:	edde 3a01 	vldr	s7, [lr, #4]
 8001f80:	edde 2a02 	vldr	s5, [lr, #8]
 8001f84:	edde 1a03 	vldr	s3, [lr, #12]
 8001f88:	ed9c 1a03 	vldr	s2, [ip, #12]
 8001f8c:	ed9c 2a02 	vldr	s4, [ip, #8]
 8001f90:	ed9c 3a01 	vldr	s6, [ip, #4]
 8001f94:	ed9c 4a00 	vldr	s8, [ip]
 8001f98:	ee44 0a24 	vmla.f32	s1, s8, s9
 8001f9c:	ee43 0a23 	vmla.f32	s1, s6, s7
 8001fa0:	ee42 0a22 	vmla.f32	s1, s4, s5
 8001fa4:	ee41 0a21 	vmla.f32	s1, s2, s3
 8001fa8:	f10e 0510 	add.w	r5, lr, #16
 8001fac:	f10c 0c10 	add.w	ip, ip, #16
 8001fb0:	edd5 8a00 	vldr	s17, [r5]
 8001fb4:	ed9c 8a00 	vldr	s16, [ip]
 8001fb8:	ed9c 7a01 	vldr	s14, [ip, #4]
 8001fbc:	edd5 7a01 	vldr	s15, [r5, #4]
 8001fc0:	ed9c 6a02 	vldr	s12, [ip, #8]
 8001fc4:	edd5 6a02 	vldr	s13, [r5, #8]
 8001fc8:	ed9c 5a03 	vldr	s10, [ip, #12]
 8001fcc:	edd5 5a03 	vldr	s11, [r5, #12]
 8001fd0:	ee48 0a28 	vmla.f32	s1, s16, s17
 8001fd4:	ee47 0a27 	vmla.f32	s1, s14, s15
 8001fd8:	3808      	subs	r0, #8
 8001fda:	ee46 0a26 	vmla.f32	s1, s12, s13
 8001fde:	1e49      	subs	r1, r1, #1
 8001fe0:	ee45 0a25 	vmla.f32	s1, s10, s11
 8001fe4:	f105 0e10 	add.w	lr, r5, #16
 8001fe8:	f10c 0c10 	add.w	ip, ip, #16
 8001fec:	d1c4      	bne.n	8001f78 <forward_dense+0x154>
 8001fee:	b378      	cbz	r0, 8002050 <forward_dense+0x22c>
 8001ff0:	f010 0103 	ands.w	r1, r0, #3
 8001ff4:	f000 800c 	beq.w	8002010 <forward_dense+0x1ec>
 8001ff8:	ed9c 1a00 	vldr	s2, [ip]
 8001ffc:	edde 1a00 	vldr	s3, [lr]
 8002000:	1e49      	subs	r1, r1, #1
 8002002:	ee41 0a21 	vmla.f32	s1, s2, s3
 8002006:	f10e 0e04 	add.w	lr, lr, #4
 800200a:	f10c 0c04 	add.w	ip, ip, #4
 800200e:	d1f3      	bne.n	8001ff8 <forward_dense+0x1d4>
 8002010:	0880      	lsrs	r0, r0, #2
 8002012:	d01d      	beq.n	8002050 <forward_dense+0x22c>
 8002014:	ed9c 2a00 	vldr	s4, [ip]
 8002018:	ed9e 1a00 	vldr	s2, [lr]
 800201c:	eddc 1a01 	vldr	s3, [ip, #4]
 8002020:	edde 2a01 	vldr	s5, [lr, #4]
 8002024:	ee42 0a01 	vmla.f32	s1, s4, s2
 8002028:	ee41 0aa2 	vmla.f32	s1, s3, s5
 800202c:	ed9c 2a02 	vldr	s4, [ip, #8]
 8002030:	ed9e 1a02 	vldr	s2, [lr, #8]
 8002034:	eddc 1a03 	vldr	s3, [ip, #12]
 8002038:	edde 2a03 	vldr	s5, [lr, #12]
 800203c:	ee42 0a01 	vmla.f32	s1, s4, s2
 8002040:	1e40      	subs	r0, r0, #1
 8002042:	ee41 0aa2 	vmla.f32	s1, s3, s5
 8002046:	f10e 0e10 	add.w	lr, lr, #16
 800204a:	f10c 0c10 	add.w	ip, ip, #16
 800204e:	d1e1      	bne.n	8002014 <forward_dense+0x1f0>
 8002050:	ee30 0a20 	vadd.f32	s0, s0, s1
 8002054:	ed87 0a00 	vstr	s0, [r7]
 8002058:	1d3f      	adds	r7, r7, #4
 800205a:	429f      	cmp	r7, r3
 800205c:	44b3      	add	fp, r6
 800205e:	f4ff af5a 	bcc.w	8001f16 <forward_dense+0xf2>
 8002062:	e01d      	b.n	80020a0 <forward_dense+0x27c>
 8002064:	429f      	cmp	r7, r3
 8002066:	d21c      	bcs.n	80020a2 <forward_dense+0x27e>
 8002068:	469a      	mov	sl, r3
 800206a:	9003      	str	r0, [sp, #12]
 800206c:	4615      	mov	r5, r2
 800206e:	2d00      	cmp	r5, #0
 8002070:	bf14      	ite	ne
 8002072:	f855 0b04 	ldrne.w	r0, [r5], #4
 8002076:	2000      	moveq	r0, #0
 8002078:	9002      	str	r0, [sp, #8]
 800207a:	f1b9 0f04 	cmp.w	r9, #4
 800207e:	9a03      	ldr	r2, [sp, #12]
 8002080:	9400      	str	r4, [sp, #0]
 8002082:	4643      	mov	r3, r8
 8002084:	4659      	mov	r1, fp
 8002086:	a802      	add	r0, sp, #8
 8002088:	d102      	bne.n	8002090 <forward_dense+0x26c>
 800208a:	f7ff fa03 	bl	8001494 <ai_dict4_dot_array_f32>
 800208e:	e001      	b.n	8002094 <forward_dense+0x270>
 8002090:	f7ff f950 	bl	8001334 <ai_dict8_dot_array_f32>
 8002094:	9802      	ldr	r0, [sp, #8]
 8002096:	f847 0b04 	str.w	r0, [r7], #4
 800209a:	4557      	cmp	r7, sl
 800209c:	44b3      	add	fp, r6
 800209e:	d3e6      	bcc.n	800206e <forward_dense+0x24a>
 80020a0:	9803      	ldr	r0, [sp, #12]
 80020a2:	9901      	ldr	r1, [sp, #4]
 80020a4:	9a06      	ldr	r2, [sp, #24]
 80020a6:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 80020aa:	9904      	ldr	r1, [sp, #16]
 80020ac:	9301      	str	r3, [sp, #4]
 80020ae:	1e49      	subs	r1, r1, #1
 80020b0:	eb08 0884 	add.w	r8, r8, r4, lsl #2
 80020b4:	9104      	str	r1, [sp, #16]
 80020b6:	f47f af1c 	bne.w	8001ef2 <forward_dense+0xce>
 80020ba:	b008      	add	sp, #32
 80020bc:	ecbd 8b02 	vpop	{d8}
 80020c0:	b001      	add	sp, #4
 80020c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080020c8 <.text_12>:
 80020c8:	00000000 	.word	0x00000000

080020cc <forward_gemm>:
 80020cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80020d0:	4604      	mov	r4, r0
 80020d2:	b091      	sub	sp, #68	; 0x44
 80020d4:	6961      	ldr	r1, [r4, #20]
 80020d6:	8808      	ldrh	r0, [r1, #0]
 80020d8:	2800      	cmp	r0, #0
 80020da:	bf1a      	itte	ne
 80020dc:	6848      	ldrne	r0, [r1, #4]
 80020de:	1d02      	addne	r2, r0, #4
 80020e0:	2204      	moveq	r2, #4
 80020e2:	460b      	mov	r3, r1
 80020e4:	6810      	ldr	r0, [r2, #0]
 80020e6:	8819      	ldrh	r1, [r3, #0]
 80020e8:	2800      	cmp	r0, #0
 80020ea:	bf14      	ite	ne
 80020ec:	6805      	ldrne	r5, [r0, #0]
 80020ee:	2500      	moveq	r5, #0
 80020f0:	2900      	cmp	r1, #0
 80020f2:	bf1d      	ittte	ne
 80020f4:	6858      	ldrne	r0, [r3, #4]
 80020f6:	2800      	cmpne	r0, #0
 80020f8:	f8b0 c000 	ldrhne.w	ip, [r0]
 80020fc:	f04f 0c00 	moveq.w	ip, #0
 8002100:	2902      	cmp	r1, #2
 8002102:	bfa6      	itte	ge
 8002104:	6858      	ldrge	r0, [r3, #4]
 8002106:	3010      	addge	r0, #16
 8002108:	2004      	movlt	r0, #4
 800210a:	6800      	ldr	r0, [r0, #0]
 800210c:	2800      	cmp	r0, #0
 800210e:	bf14      	ite	ne
 8002110:	6801      	ldrne	r1, [r0, #0]
 8002112:	2100      	moveq	r1, #0
 8002114:	2600      	movs	r6, #0
 8002116:	f1bc 0f03 	cmp.w	ip, #3
 800211a:	46b2      	mov	sl, r6
 800211c:	d107      	bne.n	800212e <forward_gemm+0x62>
 800211e:	6810      	ldr	r0, [r2, #0]
 8002120:	2800      	cmp	r0, #0
 8002122:	d026      	beq.n	8002172 <forward_gemm+0xa6>
 8002124:	6846      	ldr	r6, [r0, #4]
 8002126:	d024      	beq.n	8002172 <forward_gemm+0xa6>
 8002128:	f8d0 a008 	ldr.w	sl, [r0, #8]
 800212c:	e021      	b.n	8002172 <forward_gemm+0xa6>
 800212e:	f1bc 0f02 	cmp.w	ip, #2
 8002132:	d10d      	bne.n	8002150 <forward_gemm+0x84>
 8002134:	6810      	ldr	r0, [r2, #0]
 8002136:	b100      	cbz	r0, 800213a <forward_gemm+0x6e>
 8002138:	6846      	ldr	r6, [r0, #4]
 800213a:	881a      	ldrh	r2, [r3, #0]
 800213c:	2a02      	cmp	r2, #2
 800213e:	bfc6      	itte	gt
 8002140:	6858      	ldrgt	r0, [r3, #4]
 8002142:	301c      	addgt	r0, #28
 8002144:	2004      	movle	r0, #4
 8002146:	6800      	ldr	r0, [r0, #0]
 8002148:	b198      	cbz	r0, 8002172 <forward_gemm+0xa6>
 800214a:	f8d0 a000 	ldr.w	sl, [r0]
 800214e:	e010      	b.n	8002172 <forward_gemm+0xa6>
 8002150:	f1bc 0f01 	cmp.w	ip, #1
 8002154:	d10d      	bne.n	8002172 <forward_gemm+0xa6>
 8002156:	881a      	ldrh	r2, [r3, #0]
 8002158:	2a02      	cmp	r2, #2
 800215a:	bfc6      	itte	gt
 800215c:	6858      	ldrgt	r0, [r3, #4]
 800215e:	f100 021c 	addgt.w	r2, r0, #28
 8002162:	2204      	movle	r2, #4
 8002164:	6810      	ldr	r0, [r2, #0]
 8002166:	2800      	cmp	r0, #0
 8002168:	d003      	beq.n	8002172 <forward_gemm+0xa6>
 800216a:	6806      	ldr	r6, [r0, #0]
 800216c:	bf18      	it	ne
 800216e:	f8d0 a004 	ldrne.w	sl, [r0, #4]
 8002172:	68c8      	ldr	r0, [r1, #12]
 8002174:	6989      	ldr	r1, [r1, #24]
 8002176:	688b      	ldr	r3, [r1, #8]
 8002178:	6842      	ldr	r2, [r0, #4]
 800217a:	68c1      	ldr	r1, [r0, #12]
 800217c:	b292      	uxth	r2, r2
 800217e:	b289      	uxth	r1, r1
 8002180:	a806      	add	r0, sp, #24
 8002182:	f004 fbc3 	bl	800690c <arm_mat_init_f32>
 8002186:	69a9      	ldr	r1, [r5, #24]
 8002188:	68e8      	ldr	r0, [r5, #12]
 800218a:	688b      	ldr	r3, [r1, #8]
 800218c:	6842      	ldr	r2, [r0, #4]
 800218e:	68c1      	ldr	r1, [r0, #12]
 8002190:	b292      	uxth	r2, r2
 8002192:	b289      	uxth	r1, r1
 8002194:	a804      	add	r0, sp, #16
 8002196:	f004 fbb9 	bl	800690c <arm_mat_init_f32>
 800219a:	69b1      	ldr	r1, [r6, #24]
 800219c:	68f0      	ldr	r0, [r6, #12]
 800219e:	688b      	ldr	r3, [r1, #8]
 80021a0:	6842      	ldr	r2, [r0, #4]
 80021a2:	68c1      	ldr	r1, [r0, #12]
 80021a4:	b292      	uxth	r2, r2
 80021a6:	b289      	uxth	r1, r1
 80021a8:	a802      	add	r0, sp, #8
 80021aa:	f004 fbaf 	bl	800690c <arm_mat_init_f32>
 80021ae:	f8da 1018 	ldr.w	r1, [sl, #24]
 80021b2:	f8da 000c 	ldr.w	r0, [sl, #12]
 80021b6:	688b      	ldr	r3, [r1, #8]
 80021b8:	6842      	ldr	r2, [r0, #4]
 80021ba:	68c1      	ldr	r1, [r0, #12]
 80021bc:	b292      	uxth	r2, r2
 80021be:	b289      	uxth	r1, r1
 80021c0:	4668      	mov	r0, sp
 80021c2:	f004 fba3 	bl	800690c <arm_mat_init_f32>
 80021c6:	f994 5021 	ldrsb.w	r5, [r4, #33]	; 0x21
 80021ca:	f994 0020 	ldrsb.w	r0, [r4, #32]
 80021ce:	9905      	ldr	r1, [sp, #20]
 80021d0:	9a03      	ldr	r2, [sp, #12]
 80021d2:	ed94 0a07 	vldr	s0, [r4, #28]
 80021d6:	edd4 0a06 	vldr	s1, [r4, #24]
 80021da:	910b      	str	r1, [sp, #44]	; 0x2c
 80021dc:	920e      	str	r2, [sp, #56]	; 0x38
 80021de:	920d      	str	r2, [sp, #52]	; 0x34
 80021e0:	2300      	movs	r3, #0
 80021e2:	f8bd e010 	ldrh.w	lr, [sp, #16]
 80021e6:	f8bd 8012 	ldrh.w	r8, [sp, #18]
 80021ea:	9901      	ldr	r1, [sp, #4]
 80021ec:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 80021f0:	f8bd c000 	ldrh.w	ip, [sp]
 80021f4:	9c07      	ldr	r4, [sp, #28]
 80021f6:	f8bd a008 	ldrh.w	sl, [sp, #8]
 80021fa:	f8bd 6018 	ldrh.w	r6, [sp, #24]
 80021fe:	f8bd b01a 	ldrh.w	fp, [sp, #26]
 8002202:	9108      	str	r1, [sp, #32]
 8002204:	0002      	movs	r2, r0
 8002206:	bf0c      	ite	eq
 8002208:	4672      	moveq	r2, lr
 800220a:	4642      	movne	r2, r8
 800220c:	2f01      	cmp	r7, #1
 800220e:	bf0c      	ite	eq
 8002210:	4699      	moveq	r9, r3
 8002212:	f04f 0904 	movne.w	r9, #4
 8002216:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 800221a:	f1bc 0f01 	cmp.w	ip, #1
 800221e:	d104      	bne.n	800222a <forward_gemm+0x15e>
 8002220:	2f01      	cmp	r7, #1
 8002222:	d004      	beq.n	800222e <forward_gemm+0x162>
 8002224:	f1cb 0700 	rsb	r7, fp, #0
 8002228:	e002      	b.n	8002230 <forward_gemm+0x164>
 800222a:	2f01      	cmp	r7, #1
 800222c:	d000      	beq.n	8002230 <forward_gemm+0x164>
 800222e:	2700      	movs	r7, #0
 8002230:	2800      	cmp	r0, #0
 8002232:	bf0c      	ite	eq
 8002234:	46f4      	moveq	ip, lr
 8002236:	46c4      	movne	ip, r8
 8002238:	b23f      	sxth	r7, r7
 800223a:	45b4      	cmp	ip, r6
 800223c:	970c      	str	r7, [sp, #48]	; 0x30
 800223e:	f040 808b 	bne.w	8002358 <forward_gemm+0x28c>
 8002242:	2d00      	cmp	r5, #0
 8002244:	bf0c      	ite	eq
 8002246:	9109      	streq	r1, [sp, #36]	; 0x24
 8002248:	f8cd a024 	strne.w	sl, [sp, #36]	; 0x24
 800224c:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800224e:	455f      	cmp	r7, fp
 8002250:	f040 8082 	bne.w	8002358 <forward_gemm+0x28c>
 8002254:	2800      	cmp	r0, #0
 8002256:	bf0c      	ite	eq
 8002258:	46c4      	moveq	ip, r8
 800225a:	46f4      	movne	ip, lr
 800225c:	2d00      	cmp	r5, #0
 800225e:	bf0c      	ite	eq
 8002260:	4657      	moveq	r7, sl
 8002262:	460f      	movne	r7, r1
 8002264:	45bc      	cmp	ip, r7
 8002266:	d177      	bne.n	8002358 <forward_gemm+0x28c>
 8002268:	9e08      	ldr	r6, [sp, #32]
 800226a:	f8dd c02c 	ldr.w	ip, [sp, #44]	; 0x2c
 800226e:	9410      	str	r4, [sp, #64]	; 0x40
 8002270:	f8ad 3022 	strh.w	r3, [sp, #34]	; 0x22
 8002274:	f8ad 2020 	strh.w	r2, [sp, #32]
 8002278:	9a10      	ldr	r2, [sp, #64]	; 0x40
 800227a:	f8bd 3022 	ldrh.w	r3, [sp, #34]	; 0x22
 800227e:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
 8002282:	eb02 0783 	add.w	r7, r2, r3, lsl #2
 8002286:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8002288:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800228a:	f8dd c034 	ldr.w	ip, [sp, #52]	; 0x34
 800228e:	f8ad e028 	strh.w	lr, [sp, #40]	; 0x28
 8002292:	ea4f 0488 	mov.w	r4, r8, lsl #2
 8002296:	f8cd 803c 	str.w	r8, [sp, #60]	; 0x3c
 800229a:	2800      	cmp	r0, #0
 800229c:	bf0c      	ite	eq
 800229e:	f8dd 803c 	ldreq.w	r8, [sp, #60]	; 0x3c
 80022a2:	f8bd 8028 	ldrhne.w	r8, [sp, #40]	; 0x28
 80022a6:	fa1f fb88 	uxth.w	fp, r8
 80022aa:	f8dd e02c 	ldr.w	lr, [sp, #44]	; 0x2c
 80022ae:	f1bb 0f00 	cmp.w	fp, #0
 80022b2:	ed9f 1a9a 	vldr	s2, [pc, #616]	; 800251c <.text_16>
 80022b6:	d019      	beq.n	80022ec <forward_gemm+0x220>
 80022b8:	2800      	cmp	r0, #0
 80022ba:	bf0c      	ite	eq
 80022bc:	f04f 0b04 	moveq.w	fp, #4
 80022c0:	46a3      	movne	fp, r4
 80022c2:	2d00      	cmp	r5, #0
 80022c4:	f1a8 0801 	sub.w	r8, r8, #1
 80022c8:	edde 1a00 	vldr	s3, [lr]
 80022cc:	ed93 2a00 	vldr	s4, [r3]
 80022d0:	44de      	add	lr, fp
 80022d2:	bf0c      	ite	eq
 80022d4:	ea4f 0b81 	moveq.w	fp, r1, lsl #2
 80022d8:	f04f 0b04 	movne.w	fp, #4
 80022dc:	445b      	add	r3, fp
 80022de:	fa1f fb88 	uxth.w	fp, r8
 80022e2:	f1bb 0f00 	cmp.w	fp, #0
 80022e6:	ee01 1a82 	vmla.f32	s2, s3, s4
 80022ea:	d1e5      	bne.n	80022b8 <forward_gemm+0x1ec>
 80022ec:	ee20 1a81 	vmul.f32	s2, s1, s2
 80022f0:	edd6 1a00 	vldr	s3, [r6]
 80022f4:	ee00 1a21 	vmla.f32	s2, s0, s3
 80022f8:	ed87 1a00 	vstr	s2, [r7]
 80022fc:	1d3f      	adds	r7, r7, #4
 80022fe:	1e52      	subs	r2, r2, #1
 8002300:	b292      	uxth	r2, r2
 8002302:	002b      	movs	r3, r5
 8002304:	bf0e      	itee	eq
 8002306:	1a8b      	subeq	r3, r1, r2
 8002308:	ebaa 0302 	subne.w	r3, sl, r2
 800230c:	434b      	mulne	r3, r1
 800230e:	2a00      	cmp	r2, #0
 8002310:	444e      	add	r6, r9
 8002312:	eb0c 0383 	add.w	r3, ip, r3, lsl #2
 8002316:	d1c0      	bne.n	800229a <forward_gemm+0x1ce>
 8002318:	f8bd 7022 	ldrh.w	r7, [sp, #34]	; 0x22
 800231c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800231e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8002320:	f8bd e028 	ldrh.w	lr, [sp, #40]	; 0x28
 8002324:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
 8002328:	f8cd c034 	str.w	ip, [sp, #52]	; 0x34
 800232c:	19df      	adds	r7, r3, r7
 800232e:	f8ad 7022 	strh.w	r7, [sp, #34]	; 0x22
 8002332:	b100      	cbz	r0, 8002336 <forward_gemm+0x26a>
 8002334:	2404      	movs	r4, #4
 8002336:	eb02 0c04 	add.w	ip, r2, r4
 800233a:	f8bd 4020 	ldrh.w	r4, [sp, #32]
 800233e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8002340:	1e67      	subs	r7, r4, #1
 8002342:	eb06 0682 	add.w	r6, r6, r2, lsl #2
 8002346:	f8ad 7020 	strh.w	r7, [sp, #32]
 800234a:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 800234e:	2a00      	cmp	r2, #0
 8002350:	d192      	bne.n	8002278 <forward_gemm+0x1ac>
 8002352:	b011      	add	sp, #68	; 0x44
 8002354:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002358:	fb0b f606 	mul.w	r6, fp, r6
 800235c:	2e00      	cmp	r6, #0
 800235e:	ddf8      	ble.n	8002352 <forward_gemm+0x286>
 8002360:	f016 0003 	ands.w	r0, r6, #3
 8002364:	d003      	beq.n	800236e <forward_gemm+0x2a2>
 8002366:	1e40      	subs	r0, r0, #1
 8002368:	f844 3b04 	str.w	r3, [r4], #4
 800236c:	d1fb      	bne.n	8002366 <forward_gemm+0x29a>
 800236e:	08b1      	lsrs	r1, r6, #2
 8002370:	d0ef      	beq.n	8002352 <forward_gemm+0x286>
 8002372:	6023      	str	r3, [r4, #0]
 8002374:	6063      	str	r3, [r4, #4]
 8002376:	60a3      	str	r3, [r4, #8]
 8002378:	60e3      	str	r3, [r4, #12]
 800237a:	3410      	adds	r4, #16
 800237c:	1e49      	subs	r1, r1, #1
 800237e:	d1f8      	bne.n	8002372 <forward_gemm+0x2a6>
 8002380:	b011      	add	sp, #68	; 0x44
 8002382:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08002388 <forward_matmul>:
 8002388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800238c:	b08b      	sub	sp, #44	; 0x2c
 800238e:	6944      	ldr	r4, [r0, #20]
 8002390:	8822      	ldrh	r2, [r4, #0]
 8002392:	2a00      	cmp	r2, #0
 8002394:	bf1a      	itte	ne
 8002396:	6860      	ldrne	r0, [r4, #4]
 8002398:	1d03      	addne	r3, r0, #4
 800239a:	2304      	moveq	r3, #4
 800239c:	6819      	ldr	r1, [r3, #0]
 800239e:	2900      	cmp	r1, #0
 80023a0:	bf14      	ite	ne
 80023a2:	6808      	ldrne	r0, [r1, #0]
 80023a4:	2000      	moveq	r0, #0
 80023a6:	2900      	cmp	r1, #0
 80023a8:	bf14      	ite	ne
 80023aa:	f8d1 b004 	ldrne.w	fp, [r1, #4]
 80023ae:	f04f 0b00 	moveq.w	fp, #0
 80023b2:	2a02      	cmp	r2, #2
 80023b4:	bfa6      	itte	ge
 80023b6:	6861      	ldrge	r1, [r4, #4]
 80023b8:	3110      	addge	r1, #16
 80023ba:	2104      	movlt	r1, #4
 80023bc:	6809      	ldr	r1, [r1, #0]
 80023be:	2900      	cmp	r1, #0
 80023c0:	bf14      	ite	ne
 80023c2:	680b      	ldrne	r3, [r1, #0]
 80023c4:	2300      	moveq	r3, #0
 80023c6:	f1bb 0f00 	cmp.w	fp, #0
 80023ca:	d108      	bne.n	80023de <forward_matmul+0x56>
 80023cc:	2a02      	cmp	r2, #2
 80023ce:	bfc6      	itte	gt
 80023d0:	6861      	ldrgt	r1, [r4, #4]
 80023d2:	311c      	addgt	r1, #28
 80023d4:	2104      	movle	r1, #4
 80023d6:	6809      	ldr	r1, [r1, #0]
 80023d8:	b109      	cbz	r1, 80023de <forward_matmul+0x56>
 80023da:	f8d1 b000 	ldr.w	fp, [r1]
 80023de:	68dd      	ldr	r5, [r3, #12]
 80023e0:	68c4      	ldr	r4, [r0, #12]
 80023e2:	f8db 900c 	ldr.w	r9, [fp, #12]
 80023e6:	686e      	ldr	r6, [r5, #4]
 80023e8:	f8d4 e000 	ldr.w	lr, [r4]
 80023ec:	f8d9 2000 	ldr.w	r2, [r9]
 80023f0:	f8d5 a000 	ldr.w	sl, [r5]
 80023f4:	68a1      	ldr	r1, [r4, #8]
 80023f6:	f8d9 8008 	ldr.w	r8, [r9, #8]
 80023fa:	f8d5 c008 	ldr.w	ip, [r5, #8]
 80023fe:	68ef      	ldr	r7, [r5, #12]
 8002400:	9706      	str	r7, [sp, #24]
 8002402:	fb01 f50e 	mul.w	r5, r1, lr
 8002406:	699b      	ldr	r3, [r3, #24]
 8002408:	68e7      	ldr	r7, [r4, #12]
 800240a:	689b      	ldr	r3, [r3, #8]
 800240c:	434f      	muls	r7, r1
 800240e:	fb0e f707 	mul.w	r7, lr, r7
 8002412:	970a      	str	r7, [sp, #40]	; 0x28
 8002414:	f8d9 400c 	ldr.w	r4, [r9, #12]
 8002418:	fb08 f404 	mul.w	r4, r8, r4
 800241c:	4354      	muls	r4, r2
 800241e:	2e00      	cmp	r6, #0
 8002420:	9409      	str	r4, [sp, #36]	; 0x24
 8002422:	fb08 f802 	mul.w	r8, r8, r2
 8002426:	d074      	beq.n	8002512 <forward_matmul+0x18a>
 8002428:	2400      	movs	r4, #0
 800242a:	46a1      	mov	r9, r4
 800242c:	9602      	str	r6, [sp, #8]
 800242e:	9e06      	ldr	r6, [sp, #24]
 8002430:	2e00      	cmp	r6, #0
 8002432:	d064      	beq.n	80024fe <forward_matmul+0x176>
 8002434:	9f06      	ldr	r7, [sp, #24]
 8002436:	9701      	str	r7, [sp, #4]
 8002438:	f8cd c00c 	str.w	ip, [sp, #12]
 800243c:	2600      	movs	r6, #0
 800243e:	9505      	str	r5, [sp, #20]
 8002440:	9d03      	ldr	r5, [sp, #12]
 8002442:	2d00      	cmp	r5, #0
 8002444:	d051      	beq.n	80024ea <forward_matmul+0x162>
 8002446:	9500      	str	r5, [sp, #0]
 8002448:	f8cd a010 	str.w	sl, [sp, #16]
 800244c:	9207      	str	r2, [sp, #28]
 800244e:	f04f 0a00 	mov.w	sl, #0
 8002452:	9a04      	ldr	r2, [sp, #16]
 8002454:	2a00      	cmp	r2, #0
 8002456:	d03f      	beq.n	80024d8 <forward_matmul+0x150>
 8002458:	f04f 0c00 	mov.w	ip, #0
 800245c:	9008      	str	r0, [sp, #32]
 800245e:	9808      	ldr	r0, [sp, #32]
 8002460:	6985      	ldr	r5, [r0, #24]
 8002462:	68a8      	ldr	r0, [r5, #8]
 8002464:	f8db 7018 	ldr.w	r7, [fp, #24]
 8002468:	4420      	add	r0, r4
 800246a:	4430      	add	r0, r6
 800246c:	eb00 050c 	add.w	r5, r0, ip
 8002470:	68b8      	ldr	r0, [r7, #8]
 8002472:	4448      	add	r0, r9
 8002474:	4450      	add	r0, sl
 8002476:	eb00 070c 	add.w	r7, r0, ip
 800247a:	ed9f 0a28 	vldr	s0, [pc, #160]	; 800251c <.text_16>
 800247e:	b319      	cbz	r1, 80024c8 <forward_matmul+0x140>
 8002480:	07c8      	lsls	r0, r1, #31
 8002482:	d509      	bpl.n	8002498 <forward_matmul+0x110>
 8002484:	edd5 0a00 	vldr	s1, [r5]
 8002488:	ed97 1a00 	vldr	s2, [r7]
 800248c:	ee00 0a81 	vmla.f32	s0, s1, s2
 8002490:	eb05 058e 	add.w	r5, r5, lr, lsl #2
 8002494:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 8002498:	0848      	lsrs	r0, r1, #1
 800249a:	d015      	beq.n	80024c8 <forward_matmul+0x140>
 800249c:	edd5 0a00 	vldr	s1, [r5]
 80024a0:	ed97 1a00 	vldr	s2, [r7]
 80024a4:	eb05 058e 	add.w	r5, r5, lr, lsl #2
 80024a8:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 80024ac:	ee00 0a81 	vmla.f32	s0, s1, s2
 80024b0:	edd5 0a00 	vldr	s1, [r5]
 80024b4:	ed97 1a00 	vldr	s2, [r7]
 80024b8:	1e40      	subs	r0, r0, #1
 80024ba:	ee00 0a81 	vmla.f32	s0, s1, s2
 80024be:	eb05 058e 	add.w	r5, r5, lr, lsl #2
 80024c2:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 80024c6:	d1e9      	bne.n	800249c <forward_matmul+0x114>
 80024c8:	ed83 0a00 	vstr	s0, [r3]
 80024cc:	1d1b      	adds	r3, r3, #4
 80024ce:	1e52      	subs	r2, r2, #1
 80024d0:	f10c 0c04 	add.w	ip, ip, #4
 80024d4:	d1c3      	bne.n	800245e <forward_matmul+0xd6>
 80024d6:	9808      	ldr	r0, [sp, #32]
 80024d8:	9d00      	ldr	r5, [sp, #0]
 80024da:	9a07      	ldr	r2, [sp, #28]
 80024dc:	1e6d      	subs	r5, r5, #1
 80024de:	eb0a 0a82 	add.w	sl, sl, r2, lsl #2
 80024e2:	9500      	str	r5, [sp, #0]
 80024e4:	d1b5      	bne.n	8002452 <forward_matmul+0xca>
 80024e6:	f8dd a010 	ldr.w	sl, [sp, #16]
 80024ea:	9f01      	ldr	r7, [sp, #4]
 80024ec:	9d05      	ldr	r5, [sp, #20]
 80024ee:	1e7f      	subs	r7, r7, #1
 80024f0:	eb06 0685 	add.w	r6, r6, r5, lsl #2
 80024f4:	9701      	str	r7, [sp, #4]
 80024f6:	d1a3      	bne.n	8002440 <forward_matmul+0xb8>
 80024f8:	f8dd c00c 	ldr.w	ip, [sp, #12]
 80024fc:	9d05      	ldr	r5, [sp, #20]
 80024fe:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8002500:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8002502:	eb09 0986 	add.w	r9, r9, r6, lsl #2
 8002506:	9e02      	ldr	r6, [sp, #8]
 8002508:	1e76      	subs	r6, r6, #1
 800250a:	eb04 0487 	add.w	r4, r4, r7, lsl #2
 800250e:	9602      	str	r6, [sp, #8]
 8002510:	d18d      	bne.n	800242e <forward_matmul+0xa6>
 8002512:	b00b      	add	sp, #44	; 0x2c
 8002514:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08002518 <.text_15>:
 8002518:	08001333 	.word	0x08001333

0800251c <.text_16>:
 800251c:	00000000 	.word	0x00000000

08002520 <ai_shape_get_size>:
 8002520:	b470      	push	{r4, r5, r6}
 8002522:	4601      	mov	r1, r0
 8002524:	f04f 0201 	mov.w	r2, #1
 8002528:	680b      	ldr	r3, [r1, #0]
 800252a:	0a1b      	lsrs	r3, r3, #8
 800252c:	d01e      	beq.n	800256c <ai_shape_get_size+0x4c>
 800252e:	684c      	ldr	r4, [r1, #4]
 8002530:	eb04 0183 	add.w	r1, r4, r3, lsl #2
 8002534:	4618      	mov	r0, r3
 8002536:	1f0d      	subs	r5, r1, #4
 8002538:	f010 0103 	ands.w	r1, r0, #3
 800253c:	f000 8006 	beq.w	800254c <ai_shape_get_size+0x2c>
 8002540:	f855 6904 	ldr.w	r6, [r5], #-4
 8002544:	1e5b      	subs	r3, r3, #1
 8002546:	4372      	muls	r2, r6
 8002548:	1e49      	subs	r1, r1, #1
 800254a:	d1f9      	bne.n	8002540 <ai_shape_get_size+0x20>
 800254c:	0880      	lsrs	r0, r0, #2
 800254e:	d00d      	beq.n	800256c <ai_shape_get_size+0x4c>
 8002550:	eb04 0183 	add.w	r1, r4, r3, lsl #2
 8002554:	3910      	subs	r1, #16
 8002556:	68cb      	ldr	r3, [r1, #12]
 8002558:	688c      	ldr	r4, [r1, #8]
 800255a:	684d      	ldr	r5, [r1, #4]
 800255c:	f851 6910 	ldr.w	r6, [r1], #-16
 8002560:	4363      	muls	r3, r4
 8002562:	436b      	muls	r3, r5
 8002564:	4373      	muls	r3, r6
 8002566:	435a      	muls	r2, r3
 8002568:	1e40      	subs	r0, r0, #1
 800256a:	d1f4      	bne.n	8002556 <ai_shape_get_size+0x36>
 800256c:	bc70      	pop	{r4, r5, r6}
 800256e:	4610      	mov	r0, r2
 8002570:	4770      	bx	lr
	...

08002574 <nl_func_acos_array_f32>:
 8002574:	b570      	push	{r4, r5, r6, lr}
 8002576:	688c      	ldr	r4, [r1, #8]
 8002578:	6880      	ldr	r0, [r0, #8]
 800257a:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 800257e:	1f0d      	subs	r5, r1, #4
 8002580:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 8002584:	1f0e      	subs	r6, r1, #4
 8002586:	42a5      	cmp	r5, r4
 8002588:	f0c0 800a 	bcc.w	80025a0 <nl_func_acos_array_f32+0x2c>
 800258c:	ed95 0a00 	vldr	s0, [r5]
 8002590:	f009 fa2c 	bl	800b9ec <acosf>
 8002594:	ed86 0a00 	vstr	s0, [r6]
 8002598:	1f2d      	subs	r5, r5, #4
 800259a:	1f36      	subs	r6, r6, #4
 800259c:	42a5      	cmp	r5, r4
 800259e:	d2f5      	bcs.n	800258c <nl_func_acos_array_f32+0x18>
 80025a0:	bd70      	pop	{r4, r5, r6, pc}
	...

080025a4 <forward_acos>:
 80025a4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80025a6:	b081      	sub	sp, #4
 80025a8:	6942      	ldr	r2, [r0, #20]
 80025aa:	8811      	ldrh	r1, [r2, #0]
 80025ac:	2900      	cmp	r1, #0
 80025ae:	bf1a      	itte	ne
 80025b0:	6850      	ldrne	r0, [r2, #4]
 80025b2:	1d00      	addne	r0, r0, #4
 80025b4:	2004      	moveq	r0, #4
 80025b6:	f04f 0501 	mov.w	r5, #1
 80025ba:	6800      	ldr	r0, [r0, #0]
 80025bc:	2800      	cmp	r0, #0
 80025be:	bf14      	ite	ne
 80025c0:	6803      	ldrne	r3, [r0, #0]
 80025c2:	2300      	moveq	r3, #0
 80025c4:	2902      	cmp	r1, #2
 80025c6:	bfa6      	itte	ge
 80025c8:	6850      	ldrge	r0, [r2, #4]
 80025ca:	3010      	addge	r0, #16
 80025cc:	2004      	movlt	r0, #4
 80025ce:	6800      	ldr	r0, [r0, #0]
 80025d0:	2800      	cmp	r0, #0
 80025d2:	bf19      	ittee	ne
 80025d4:	6800      	ldrne	r0, [r0, #0]
 80025d6:	f100 0418 	addne.w	r4, r0, #24
 80025da:	2100      	moveq	r1, #0
 80025dc:	f101 0418 	addeq.w	r4, r1, #24
 80025e0:	f103 0108 	add.w	r1, r3, #8
 80025e4:	680a      	ldr	r2, [r1, #0]
 80025e6:	0a12      	lsrs	r2, r2, #8
 80025e8:	d01e      	beq.n	8002628 <forward_acos+0x84>
 80025ea:	684e      	ldr	r6, [r1, #4]
 80025ec:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 80025f0:	4610      	mov	r0, r2
 80025f2:	1f0f      	subs	r7, r1, #4
 80025f4:	f010 0103 	ands.w	r1, r0, #3
 80025f8:	d006      	beq.n	8002608 <forward_acos+0x64>
 80025fa:	1e52      	subs	r2, r2, #1
 80025fc:	f857 c904 	ldr.w	ip, [r7], #-4
 8002600:	1e49      	subs	r1, r1, #1
 8002602:	fb0c f505 	mul.w	r5, ip, r5
 8002606:	d1f8      	bne.n	80025fa <forward_acos+0x56>
 8002608:	0880      	lsrs	r0, r0, #2
 800260a:	d00d      	beq.n	8002628 <forward_acos+0x84>
 800260c:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8002610:	3910      	subs	r1, #16
 8002612:	68ca      	ldr	r2, [r1, #12]
 8002614:	688e      	ldr	r6, [r1, #8]
 8002616:	684f      	ldr	r7, [r1, #4]
 8002618:	4372      	muls	r2, r6
 800261a:	f851 6910 	ldr.w	r6, [r1], #-16
 800261e:	437a      	muls	r2, r7
 8002620:	4372      	muls	r2, r6
 8002622:	4355      	muls	r5, r2
 8002624:	1e40      	subs	r0, r0, #1
 8002626:	d1f4      	bne.n	8002612 <forward_acos+0x6e>
 8002628:	6998      	ldr	r0, [r3, #24]
 800262a:	6886      	ldr	r6, [r0, #8]
 800262c:	6821      	ldr	r1, [r4, #0]
 800262e:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 8002632:	1f07      	subs	r7, r0, #4
 8002634:	6888      	ldr	r0, [r1, #8]
 8002636:	eb00 0285 	add.w	r2, r0, r5, lsl #2
 800263a:	1f14      	subs	r4, r2, #4
 800263c:	42b7      	cmp	r7, r6
 800263e:	d309      	bcc.n	8002654 <forward_acos+0xb0>
 8002640:	ed97 0a00 	vldr	s0, [r7]
 8002644:	f009 f9d2 	bl	800b9ec <acosf>
 8002648:	ed84 0a00 	vstr	s0, [r4]
 800264c:	1f3f      	subs	r7, r7, #4
 800264e:	1f24      	subs	r4, r4, #4
 8002650:	42b7      	cmp	r7, r6
 8002652:	d2f5      	bcs.n	8002640 <forward_acos+0x9c>
 8002654:	b001      	add	sp, #4
 8002656:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002658 <nl_func_acosh_array_f32>:
 8002658:	b570      	push	{r4, r5, r6, lr}
 800265a:	688c      	ldr	r4, [r1, #8]
 800265c:	6880      	ldr	r0, [r0, #8]
 800265e:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 8002662:	1f0d      	subs	r5, r1, #4
 8002664:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 8002668:	1f0e      	subs	r6, r1, #4
 800266a:	42a5      	cmp	r5, r4
 800266c:	f0c0 800a 	bcc.w	8002684 <nl_func_acosh_array_f32+0x2c>
 8002670:	ed95 0a00 	vldr	s0, [r5]
 8002674:	f009 fa12 	bl	800ba9c <acoshf>
 8002678:	ed86 0a00 	vstr	s0, [r6]
 800267c:	1f2d      	subs	r5, r5, #4
 800267e:	1f36      	subs	r6, r6, #4
 8002680:	42a5      	cmp	r5, r4
 8002682:	d2f5      	bcs.n	8002670 <nl_func_acosh_array_f32+0x18>
 8002684:	bd70      	pop	{r4, r5, r6, pc}
	...

08002688 <forward_acosh>:
 8002688:	b5f0      	push	{r4, r5, r6, r7, lr}
 800268a:	b081      	sub	sp, #4
 800268c:	6942      	ldr	r2, [r0, #20]
 800268e:	8811      	ldrh	r1, [r2, #0]
 8002690:	2900      	cmp	r1, #0
 8002692:	bf1a      	itte	ne
 8002694:	6850      	ldrne	r0, [r2, #4]
 8002696:	1d00      	addne	r0, r0, #4
 8002698:	2004      	moveq	r0, #4
 800269a:	f04f 0501 	mov.w	r5, #1
 800269e:	6800      	ldr	r0, [r0, #0]
 80026a0:	2800      	cmp	r0, #0
 80026a2:	bf14      	ite	ne
 80026a4:	6803      	ldrne	r3, [r0, #0]
 80026a6:	2300      	moveq	r3, #0
 80026a8:	2902      	cmp	r1, #2
 80026aa:	bfa6      	itte	ge
 80026ac:	6850      	ldrge	r0, [r2, #4]
 80026ae:	3010      	addge	r0, #16
 80026b0:	2004      	movlt	r0, #4
 80026b2:	6800      	ldr	r0, [r0, #0]
 80026b4:	2800      	cmp	r0, #0
 80026b6:	bf19      	ittee	ne
 80026b8:	6800      	ldrne	r0, [r0, #0]
 80026ba:	f100 0418 	addne.w	r4, r0, #24
 80026be:	2100      	moveq	r1, #0
 80026c0:	f101 0418 	addeq.w	r4, r1, #24
 80026c4:	f103 0108 	add.w	r1, r3, #8
 80026c8:	680a      	ldr	r2, [r1, #0]
 80026ca:	0a12      	lsrs	r2, r2, #8
 80026cc:	d01e      	beq.n	800270c <forward_acosh+0x84>
 80026ce:	684e      	ldr	r6, [r1, #4]
 80026d0:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 80026d4:	4610      	mov	r0, r2
 80026d6:	1f0f      	subs	r7, r1, #4
 80026d8:	f010 0103 	ands.w	r1, r0, #3
 80026dc:	d006      	beq.n	80026ec <forward_acosh+0x64>
 80026de:	1e52      	subs	r2, r2, #1
 80026e0:	f857 c904 	ldr.w	ip, [r7], #-4
 80026e4:	1e49      	subs	r1, r1, #1
 80026e6:	fb0c f505 	mul.w	r5, ip, r5
 80026ea:	d1f8      	bne.n	80026de <forward_acosh+0x56>
 80026ec:	0880      	lsrs	r0, r0, #2
 80026ee:	d00d      	beq.n	800270c <forward_acosh+0x84>
 80026f0:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 80026f4:	3910      	subs	r1, #16
 80026f6:	68ca      	ldr	r2, [r1, #12]
 80026f8:	688e      	ldr	r6, [r1, #8]
 80026fa:	684f      	ldr	r7, [r1, #4]
 80026fc:	4372      	muls	r2, r6
 80026fe:	f851 6910 	ldr.w	r6, [r1], #-16
 8002702:	437a      	muls	r2, r7
 8002704:	4372      	muls	r2, r6
 8002706:	4355      	muls	r5, r2
 8002708:	1e40      	subs	r0, r0, #1
 800270a:	d1f4      	bne.n	80026f6 <forward_acosh+0x6e>
 800270c:	6998      	ldr	r0, [r3, #24]
 800270e:	6886      	ldr	r6, [r0, #8]
 8002710:	6821      	ldr	r1, [r4, #0]
 8002712:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 8002716:	1f07      	subs	r7, r0, #4
 8002718:	6888      	ldr	r0, [r1, #8]
 800271a:	eb00 0285 	add.w	r2, r0, r5, lsl #2
 800271e:	1f14      	subs	r4, r2, #4
 8002720:	42b7      	cmp	r7, r6
 8002722:	d309      	bcc.n	8002738 <forward_acosh+0xb0>
 8002724:	ed97 0a00 	vldr	s0, [r7]
 8002728:	f009 f9b8 	bl	800ba9c <acoshf>
 800272c:	ed84 0a00 	vstr	s0, [r4]
 8002730:	1f3f      	subs	r7, r7, #4
 8002732:	1f24      	subs	r4, r4, #4
 8002734:	42b7      	cmp	r7, r6
 8002736:	d2f5      	bcs.n	8002724 <forward_acosh+0x9c>
 8002738:	b001      	add	sp, #4
 800273a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800273c <nl_func_asin_array_f32>:
 800273c:	b570      	push	{r4, r5, r6, lr}
 800273e:	688c      	ldr	r4, [r1, #8]
 8002740:	6880      	ldr	r0, [r0, #8]
 8002742:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 8002746:	1f0d      	subs	r5, r1, #4
 8002748:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 800274c:	1f0e      	subs	r6, r1, #4
 800274e:	42a5      	cmp	r5, r4
 8002750:	f0c0 800a 	bcc.w	8002768 <nl_func_asin_array_f32+0x2c>
 8002754:	ed95 0a00 	vldr	s0, [r5]
 8002758:	f009 f9f0 	bl	800bb3c <asinf>
 800275c:	ed86 0a00 	vstr	s0, [r6]
 8002760:	1f2d      	subs	r5, r5, #4
 8002762:	1f36      	subs	r6, r6, #4
 8002764:	42a5      	cmp	r5, r4
 8002766:	d2f5      	bcs.n	8002754 <nl_func_asin_array_f32+0x18>
 8002768:	bd70      	pop	{r4, r5, r6, pc}
	...

0800276c <forward_asin>:
 800276c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800276e:	b081      	sub	sp, #4
 8002770:	6942      	ldr	r2, [r0, #20]
 8002772:	8811      	ldrh	r1, [r2, #0]
 8002774:	2900      	cmp	r1, #0
 8002776:	bf1a      	itte	ne
 8002778:	6850      	ldrne	r0, [r2, #4]
 800277a:	1d00      	addne	r0, r0, #4
 800277c:	2004      	moveq	r0, #4
 800277e:	f04f 0501 	mov.w	r5, #1
 8002782:	6800      	ldr	r0, [r0, #0]
 8002784:	2800      	cmp	r0, #0
 8002786:	bf14      	ite	ne
 8002788:	6803      	ldrne	r3, [r0, #0]
 800278a:	2300      	moveq	r3, #0
 800278c:	2902      	cmp	r1, #2
 800278e:	bfa6      	itte	ge
 8002790:	6850      	ldrge	r0, [r2, #4]
 8002792:	3010      	addge	r0, #16
 8002794:	2004      	movlt	r0, #4
 8002796:	6800      	ldr	r0, [r0, #0]
 8002798:	2800      	cmp	r0, #0
 800279a:	bf19      	ittee	ne
 800279c:	6800      	ldrne	r0, [r0, #0]
 800279e:	f100 0418 	addne.w	r4, r0, #24
 80027a2:	2100      	moveq	r1, #0
 80027a4:	f101 0418 	addeq.w	r4, r1, #24
 80027a8:	f103 0108 	add.w	r1, r3, #8
 80027ac:	680a      	ldr	r2, [r1, #0]
 80027ae:	0a12      	lsrs	r2, r2, #8
 80027b0:	d01e      	beq.n	80027f0 <forward_asin+0x84>
 80027b2:	684e      	ldr	r6, [r1, #4]
 80027b4:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 80027b8:	4610      	mov	r0, r2
 80027ba:	1f0f      	subs	r7, r1, #4
 80027bc:	f010 0103 	ands.w	r1, r0, #3
 80027c0:	d006      	beq.n	80027d0 <forward_asin+0x64>
 80027c2:	1e52      	subs	r2, r2, #1
 80027c4:	f857 c904 	ldr.w	ip, [r7], #-4
 80027c8:	1e49      	subs	r1, r1, #1
 80027ca:	fb0c f505 	mul.w	r5, ip, r5
 80027ce:	d1f8      	bne.n	80027c2 <forward_asin+0x56>
 80027d0:	0880      	lsrs	r0, r0, #2
 80027d2:	d00d      	beq.n	80027f0 <forward_asin+0x84>
 80027d4:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 80027d8:	3910      	subs	r1, #16
 80027da:	68ca      	ldr	r2, [r1, #12]
 80027dc:	688e      	ldr	r6, [r1, #8]
 80027de:	684f      	ldr	r7, [r1, #4]
 80027e0:	4372      	muls	r2, r6
 80027e2:	f851 6910 	ldr.w	r6, [r1], #-16
 80027e6:	437a      	muls	r2, r7
 80027e8:	4372      	muls	r2, r6
 80027ea:	4355      	muls	r5, r2
 80027ec:	1e40      	subs	r0, r0, #1
 80027ee:	d1f4      	bne.n	80027da <forward_asin+0x6e>
 80027f0:	6998      	ldr	r0, [r3, #24]
 80027f2:	6886      	ldr	r6, [r0, #8]
 80027f4:	6821      	ldr	r1, [r4, #0]
 80027f6:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 80027fa:	1f07      	subs	r7, r0, #4
 80027fc:	6888      	ldr	r0, [r1, #8]
 80027fe:	eb00 0285 	add.w	r2, r0, r5, lsl #2
 8002802:	1f14      	subs	r4, r2, #4
 8002804:	42b7      	cmp	r7, r6
 8002806:	d309      	bcc.n	800281c <forward_asin+0xb0>
 8002808:	ed97 0a00 	vldr	s0, [r7]
 800280c:	f009 f996 	bl	800bb3c <asinf>
 8002810:	ed84 0a00 	vstr	s0, [r4]
 8002814:	1f3f      	subs	r7, r7, #4
 8002816:	1f24      	subs	r4, r4, #4
 8002818:	42b7      	cmp	r7, r6
 800281a:	d2f5      	bcs.n	8002808 <forward_asin+0x9c>
 800281c:	b001      	add	sp, #4
 800281e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002820 <nl_func_asinh_array_f32>:
 8002820:	b570      	push	{r4, r5, r6, lr}
 8002822:	688c      	ldr	r4, [r1, #8]
 8002824:	6880      	ldr	r0, [r0, #8]
 8002826:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 800282a:	1f0d      	subs	r5, r1, #4
 800282c:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 8002830:	1f0e      	subs	r6, r1, #4
 8002832:	42a5      	cmp	r5, r4
 8002834:	f0c0 800a 	bcc.w	800284c <nl_func_asinh_array_f32+0x2c>
 8002838:	ed95 0a00 	vldr	s0, [r5]
 800283c:	f008 fb06 	bl	800ae4c <asinhf>
 8002840:	ed86 0a00 	vstr	s0, [r6]
 8002844:	1f2d      	subs	r5, r5, #4
 8002846:	1f36      	subs	r6, r6, #4
 8002848:	42a5      	cmp	r5, r4
 800284a:	d2f5      	bcs.n	8002838 <nl_func_asinh_array_f32+0x18>
 800284c:	bd70      	pop	{r4, r5, r6, pc}
	...

08002850 <forward_asinh>:
 8002850:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002852:	b081      	sub	sp, #4
 8002854:	6942      	ldr	r2, [r0, #20]
 8002856:	8811      	ldrh	r1, [r2, #0]
 8002858:	2900      	cmp	r1, #0
 800285a:	bf1a      	itte	ne
 800285c:	6850      	ldrne	r0, [r2, #4]
 800285e:	1d00      	addne	r0, r0, #4
 8002860:	2004      	moveq	r0, #4
 8002862:	f04f 0501 	mov.w	r5, #1
 8002866:	6800      	ldr	r0, [r0, #0]
 8002868:	2800      	cmp	r0, #0
 800286a:	bf14      	ite	ne
 800286c:	6803      	ldrne	r3, [r0, #0]
 800286e:	2300      	moveq	r3, #0
 8002870:	2902      	cmp	r1, #2
 8002872:	bfa6      	itte	ge
 8002874:	6850      	ldrge	r0, [r2, #4]
 8002876:	3010      	addge	r0, #16
 8002878:	2004      	movlt	r0, #4
 800287a:	6800      	ldr	r0, [r0, #0]
 800287c:	2800      	cmp	r0, #0
 800287e:	bf19      	ittee	ne
 8002880:	6800      	ldrne	r0, [r0, #0]
 8002882:	f100 0418 	addne.w	r4, r0, #24
 8002886:	2100      	moveq	r1, #0
 8002888:	f101 0418 	addeq.w	r4, r1, #24
 800288c:	f103 0108 	add.w	r1, r3, #8
 8002890:	680a      	ldr	r2, [r1, #0]
 8002892:	0a12      	lsrs	r2, r2, #8
 8002894:	d01e      	beq.n	80028d4 <forward_asinh+0x84>
 8002896:	684e      	ldr	r6, [r1, #4]
 8002898:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 800289c:	4610      	mov	r0, r2
 800289e:	1f0f      	subs	r7, r1, #4
 80028a0:	f010 0103 	ands.w	r1, r0, #3
 80028a4:	d006      	beq.n	80028b4 <forward_asinh+0x64>
 80028a6:	1e52      	subs	r2, r2, #1
 80028a8:	f857 c904 	ldr.w	ip, [r7], #-4
 80028ac:	1e49      	subs	r1, r1, #1
 80028ae:	fb0c f505 	mul.w	r5, ip, r5
 80028b2:	d1f8      	bne.n	80028a6 <forward_asinh+0x56>
 80028b4:	0880      	lsrs	r0, r0, #2
 80028b6:	d00d      	beq.n	80028d4 <forward_asinh+0x84>
 80028b8:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 80028bc:	3910      	subs	r1, #16
 80028be:	68ca      	ldr	r2, [r1, #12]
 80028c0:	688e      	ldr	r6, [r1, #8]
 80028c2:	684f      	ldr	r7, [r1, #4]
 80028c4:	4372      	muls	r2, r6
 80028c6:	f851 6910 	ldr.w	r6, [r1], #-16
 80028ca:	437a      	muls	r2, r7
 80028cc:	4372      	muls	r2, r6
 80028ce:	4355      	muls	r5, r2
 80028d0:	1e40      	subs	r0, r0, #1
 80028d2:	d1f4      	bne.n	80028be <forward_asinh+0x6e>
 80028d4:	6998      	ldr	r0, [r3, #24]
 80028d6:	6886      	ldr	r6, [r0, #8]
 80028d8:	6821      	ldr	r1, [r4, #0]
 80028da:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 80028de:	1f07      	subs	r7, r0, #4
 80028e0:	6888      	ldr	r0, [r1, #8]
 80028e2:	eb00 0285 	add.w	r2, r0, r5, lsl #2
 80028e6:	1f14      	subs	r4, r2, #4
 80028e8:	42b7      	cmp	r7, r6
 80028ea:	d309      	bcc.n	8002900 <forward_asinh+0xb0>
 80028ec:	ed97 0a00 	vldr	s0, [r7]
 80028f0:	f008 faac 	bl	800ae4c <asinhf>
 80028f4:	ed84 0a00 	vstr	s0, [r4]
 80028f8:	1f3f      	subs	r7, r7, #4
 80028fa:	1f24      	subs	r4, r4, #4
 80028fc:	42b7      	cmp	r7, r6
 80028fe:	d2f5      	bcs.n	80028ec <forward_asinh+0x9c>
 8002900:	b001      	add	sp, #4
 8002902:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002904 <nl_func_atan_array_f32>:
 8002904:	b570      	push	{r4, r5, r6, lr}
 8002906:	688c      	ldr	r4, [r1, #8]
 8002908:	6880      	ldr	r0, [r0, #8]
 800290a:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 800290e:	1f0d      	subs	r5, r1, #4
 8002910:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 8002914:	1f0e      	subs	r6, r1, #4
 8002916:	42a5      	cmp	r5, r4
 8002918:	f0c0 800a 	bcc.w	8002930 <nl_func_atan_array_f32+0x2c>
 800291c:	ed95 0a00 	vldr	s0, [r5]
 8002920:	f008 fafc 	bl	800af1c <atanf>
 8002924:	ed86 0a00 	vstr	s0, [r6]
 8002928:	1f2d      	subs	r5, r5, #4
 800292a:	1f36      	subs	r6, r6, #4
 800292c:	42a5      	cmp	r5, r4
 800292e:	d2f5      	bcs.n	800291c <nl_func_atan_array_f32+0x18>
 8002930:	bd70      	pop	{r4, r5, r6, pc}
	...

08002934 <forward_atan>:
 8002934:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002936:	b081      	sub	sp, #4
 8002938:	6942      	ldr	r2, [r0, #20]
 800293a:	8811      	ldrh	r1, [r2, #0]
 800293c:	2900      	cmp	r1, #0
 800293e:	bf1a      	itte	ne
 8002940:	6850      	ldrne	r0, [r2, #4]
 8002942:	1d00      	addne	r0, r0, #4
 8002944:	2004      	moveq	r0, #4
 8002946:	f04f 0501 	mov.w	r5, #1
 800294a:	6800      	ldr	r0, [r0, #0]
 800294c:	2800      	cmp	r0, #0
 800294e:	bf14      	ite	ne
 8002950:	6803      	ldrne	r3, [r0, #0]
 8002952:	2300      	moveq	r3, #0
 8002954:	2902      	cmp	r1, #2
 8002956:	bfa6      	itte	ge
 8002958:	6850      	ldrge	r0, [r2, #4]
 800295a:	3010      	addge	r0, #16
 800295c:	2004      	movlt	r0, #4
 800295e:	6800      	ldr	r0, [r0, #0]
 8002960:	2800      	cmp	r0, #0
 8002962:	bf19      	ittee	ne
 8002964:	6800      	ldrne	r0, [r0, #0]
 8002966:	f100 0418 	addne.w	r4, r0, #24
 800296a:	2100      	moveq	r1, #0
 800296c:	f101 0418 	addeq.w	r4, r1, #24
 8002970:	f103 0108 	add.w	r1, r3, #8
 8002974:	680a      	ldr	r2, [r1, #0]
 8002976:	0a12      	lsrs	r2, r2, #8
 8002978:	d01e      	beq.n	80029b8 <forward_atan+0x84>
 800297a:	684e      	ldr	r6, [r1, #4]
 800297c:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8002980:	4610      	mov	r0, r2
 8002982:	1f0f      	subs	r7, r1, #4
 8002984:	f010 0103 	ands.w	r1, r0, #3
 8002988:	d006      	beq.n	8002998 <forward_atan+0x64>
 800298a:	1e52      	subs	r2, r2, #1
 800298c:	f857 c904 	ldr.w	ip, [r7], #-4
 8002990:	1e49      	subs	r1, r1, #1
 8002992:	fb0c f505 	mul.w	r5, ip, r5
 8002996:	d1f8      	bne.n	800298a <forward_atan+0x56>
 8002998:	0880      	lsrs	r0, r0, #2
 800299a:	d00d      	beq.n	80029b8 <forward_atan+0x84>
 800299c:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 80029a0:	3910      	subs	r1, #16
 80029a2:	68ca      	ldr	r2, [r1, #12]
 80029a4:	688e      	ldr	r6, [r1, #8]
 80029a6:	684f      	ldr	r7, [r1, #4]
 80029a8:	4372      	muls	r2, r6
 80029aa:	f851 6910 	ldr.w	r6, [r1], #-16
 80029ae:	437a      	muls	r2, r7
 80029b0:	4372      	muls	r2, r6
 80029b2:	4355      	muls	r5, r2
 80029b4:	1e40      	subs	r0, r0, #1
 80029b6:	d1f4      	bne.n	80029a2 <forward_atan+0x6e>
 80029b8:	6998      	ldr	r0, [r3, #24]
 80029ba:	6886      	ldr	r6, [r0, #8]
 80029bc:	6821      	ldr	r1, [r4, #0]
 80029be:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 80029c2:	1f07      	subs	r7, r0, #4
 80029c4:	6888      	ldr	r0, [r1, #8]
 80029c6:	eb00 0285 	add.w	r2, r0, r5, lsl #2
 80029ca:	1f14      	subs	r4, r2, #4
 80029cc:	42b7      	cmp	r7, r6
 80029ce:	d309      	bcc.n	80029e4 <forward_atan+0xb0>
 80029d0:	ed97 0a00 	vldr	s0, [r7]
 80029d4:	f008 faa2 	bl	800af1c <atanf>
 80029d8:	ed84 0a00 	vstr	s0, [r4]
 80029dc:	1f3f      	subs	r7, r7, #4
 80029de:	1f24      	subs	r4, r4, #4
 80029e0:	42b7      	cmp	r7, r6
 80029e2:	d2f5      	bcs.n	80029d0 <forward_atan+0x9c>
 80029e4:	b001      	add	sp, #4
 80029e6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080029e8 <nl_func_atanh_array_f32>:
 80029e8:	b570      	push	{r4, r5, r6, lr}
 80029ea:	688c      	ldr	r4, [r1, #8]
 80029ec:	6880      	ldr	r0, [r0, #8]
 80029ee:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 80029f2:	1f0d      	subs	r5, r1, #4
 80029f4:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 80029f8:	1f0e      	subs	r6, r1, #4
 80029fa:	42a5      	cmp	r5, r4
 80029fc:	f0c0 800a 	bcc.w	8002a14 <nl_func_atanh_array_f32+0x2c>
 8002a00:	ed95 0a00 	vldr	s0, [r5]
 8002a04:	f009 f8f2 	bl	800bbec <atanhf>
 8002a08:	ed86 0a00 	vstr	s0, [r6]
 8002a0c:	1f2d      	subs	r5, r5, #4
 8002a0e:	1f36      	subs	r6, r6, #4
 8002a10:	42a5      	cmp	r5, r4
 8002a12:	d2f5      	bcs.n	8002a00 <nl_func_atanh_array_f32+0x18>
 8002a14:	bd70      	pop	{r4, r5, r6, pc}
	...

08002a18 <forward_atanh>:
 8002a18:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002a1a:	b081      	sub	sp, #4
 8002a1c:	6942      	ldr	r2, [r0, #20]
 8002a1e:	8811      	ldrh	r1, [r2, #0]
 8002a20:	2900      	cmp	r1, #0
 8002a22:	bf1a      	itte	ne
 8002a24:	6850      	ldrne	r0, [r2, #4]
 8002a26:	1d00      	addne	r0, r0, #4
 8002a28:	2004      	moveq	r0, #4
 8002a2a:	f04f 0501 	mov.w	r5, #1
 8002a2e:	6800      	ldr	r0, [r0, #0]
 8002a30:	2800      	cmp	r0, #0
 8002a32:	bf14      	ite	ne
 8002a34:	6803      	ldrne	r3, [r0, #0]
 8002a36:	2300      	moveq	r3, #0
 8002a38:	2902      	cmp	r1, #2
 8002a3a:	bfa6      	itte	ge
 8002a3c:	6850      	ldrge	r0, [r2, #4]
 8002a3e:	3010      	addge	r0, #16
 8002a40:	2004      	movlt	r0, #4
 8002a42:	6800      	ldr	r0, [r0, #0]
 8002a44:	2800      	cmp	r0, #0
 8002a46:	bf19      	ittee	ne
 8002a48:	6800      	ldrne	r0, [r0, #0]
 8002a4a:	f100 0418 	addne.w	r4, r0, #24
 8002a4e:	2100      	moveq	r1, #0
 8002a50:	f101 0418 	addeq.w	r4, r1, #24
 8002a54:	f103 0108 	add.w	r1, r3, #8
 8002a58:	680a      	ldr	r2, [r1, #0]
 8002a5a:	0a12      	lsrs	r2, r2, #8
 8002a5c:	d01e      	beq.n	8002a9c <forward_atanh+0x84>
 8002a5e:	684e      	ldr	r6, [r1, #4]
 8002a60:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8002a64:	4610      	mov	r0, r2
 8002a66:	1f0f      	subs	r7, r1, #4
 8002a68:	f010 0103 	ands.w	r1, r0, #3
 8002a6c:	d006      	beq.n	8002a7c <forward_atanh+0x64>
 8002a6e:	1e52      	subs	r2, r2, #1
 8002a70:	f857 c904 	ldr.w	ip, [r7], #-4
 8002a74:	1e49      	subs	r1, r1, #1
 8002a76:	fb0c f505 	mul.w	r5, ip, r5
 8002a7a:	d1f8      	bne.n	8002a6e <forward_atanh+0x56>
 8002a7c:	0880      	lsrs	r0, r0, #2
 8002a7e:	d00d      	beq.n	8002a9c <forward_atanh+0x84>
 8002a80:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8002a84:	3910      	subs	r1, #16
 8002a86:	68ca      	ldr	r2, [r1, #12]
 8002a88:	688e      	ldr	r6, [r1, #8]
 8002a8a:	684f      	ldr	r7, [r1, #4]
 8002a8c:	4372      	muls	r2, r6
 8002a8e:	f851 6910 	ldr.w	r6, [r1], #-16
 8002a92:	437a      	muls	r2, r7
 8002a94:	4372      	muls	r2, r6
 8002a96:	4355      	muls	r5, r2
 8002a98:	1e40      	subs	r0, r0, #1
 8002a9a:	d1f4      	bne.n	8002a86 <forward_atanh+0x6e>
 8002a9c:	6998      	ldr	r0, [r3, #24]
 8002a9e:	6886      	ldr	r6, [r0, #8]
 8002aa0:	6821      	ldr	r1, [r4, #0]
 8002aa2:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 8002aa6:	1f07      	subs	r7, r0, #4
 8002aa8:	6888      	ldr	r0, [r1, #8]
 8002aaa:	eb00 0285 	add.w	r2, r0, r5, lsl #2
 8002aae:	1f14      	subs	r4, r2, #4
 8002ab0:	42b7      	cmp	r7, r6
 8002ab2:	d309      	bcc.n	8002ac8 <forward_atanh+0xb0>
 8002ab4:	ed97 0a00 	vldr	s0, [r7]
 8002ab8:	f009 f898 	bl	800bbec <atanhf>
 8002abc:	ed84 0a00 	vstr	s0, [r4]
 8002ac0:	1f3f      	subs	r7, r7, #4
 8002ac2:	1f24      	subs	r4, r4, #4
 8002ac4:	42b7      	cmp	r7, r6
 8002ac6:	d2f5      	bcs.n	8002ab4 <forward_atanh+0x9c>
 8002ac8:	b001      	add	sp, #4
 8002aca:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002acc <nl_func_cos_array_f32>:
 8002acc:	b570      	push	{r4, r5, r6, lr}
 8002ace:	688c      	ldr	r4, [r1, #8]
 8002ad0:	6880      	ldr	r0, [r0, #8]
 8002ad2:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 8002ad6:	1f0d      	subs	r5, r1, #4
 8002ad8:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 8002adc:	1f0e      	subs	r6, r1, #4
 8002ade:	42a5      	cmp	r5, r4
 8002ae0:	f0c0 800a 	bcc.w	8002af8 <nl_func_cos_array_f32+0x2c>
 8002ae4:	ed95 0a00 	vldr	s0, [r5]
 8002ae8:	f008 fb2c 	bl	800b144 <cosf>
 8002aec:	ed86 0a00 	vstr	s0, [r6]
 8002af0:	1f2d      	subs	r5, r5, #4
 8002af2:	1f36      	subs	r6, r6, #4
 8002af4:	42a5      	cmp	r5, r4
 8002af6:	d2f5      	bcs.n	8002ae4 <nl_func_cos_array_f32+0x18>
 8002af8:	bd70      	pop	{r4, r5, r6, pc}
	...

08002afc <forward_cos>:
 8002afc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002afe:	b081      	sub	sp, #4
 8002b00:	6942      	ldr	r2, [r0, #20]
 8002b02:	8811      	ldrh	r1, [r2, #0]
 8002b04:	2900      	cmp	r1, #0
 8002b06:	bf1a      	itte	ne
 8002b08:	6850      	ldrne	r0, [r2, #4]
 8002b0a:	1d00      	addne	r0, r0, #4
 8002b0c:	2004      	moveq	r0, #4
 8002b0e:	f04f 0501 	mov.w	r5, #1
 8002b12:	6800      	ldr	r0, [r0, #0]
 8002b14:	2800      	cmp	r0, #0
 8002b16:	bf14      	ite	ne
 8002b18:	6803      	ldrne	r3, [r0, #0]
 8002b1a:	2300      	moveq	r3, #0
 8002b1c:	2902      	cmp	r1, #2
 8002b1e:	bfa6      	itte	ge
 8002b20:	6850      	ldrge	r0, [r2, #4]
 8002b22:	3010      	addge	r0, #16
 8002b24:	2004      	movlt	r0, #4
 8002b26:	6800      	ldr	r0, [r0, #0]
 8002b28:	2800      	cmp	r0, #0
 8002b2a:	bf19      	ittee	ne
 8002b2c:	6800      	ldrne	r0, [r0, #0]
 8002b2e:	f100 0418 	addne.w	r4, r0, #24
 8002b32:	2100      	moveq	r1, #0
 8002b34:	f101 0418 	addeq.w	r4, r1, #24
 8002b38:	f103 0108 	add.w	r1, r3, #8
 8002b3c:	680a      	ldr	r2, [r1, #0]
 8002b3e:	0a12      	lsrs	r2, r2, #8
 8002b40:	d01e      	beq.n	8002b80 <forward_cos+0x84>
 8002b42:	684e      	ldr	r6, [r1, #4]
 8002b44:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8002b48:	4610      	mov	r0, r2
 8002b4a:	1f0f      	subs	r7, r1, #4
 8002b4c:	f010 0103 	ands.w	r1, r0, #3
 8002b50:	d006      	beq.n	8002b60 <forward_cos+0x64>
 8002b52:	1e52      	subs	r2, r2, #1
 8002b54:	f857 c904 	ldr.w	ip, [r7], #-4
 8002b58:	1e49      	subs	r1, r1, #1
 8002b5a:	fb0c f505 	mul.w	r5, ip, r5
 8002b5e:	d1f8      	bne.n	8002b52 <forward_cos+0x56>
 8002b60:	0880      	lsrs	r0, r0, #2
 8002b62:	d00d      	beq.n	8002b80 <forward_cos+0x84>
 8002b64:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8002b68:	3910      	subs	r1, #16
 8002b6a:	68ca      	ldr	r2, [r1, #12]
 8002b6c:	688e      	ldr	r6, [r1, #8]
 8002b6e:	684f      	ldr	r7, [r1, #4]
 8002b70:	4372      	muls	r2, r6
 8002b72:	f851 6910 	ldr.w	r6, [r1], #-16
 8002b76:	437a      	muls	r2, r7
 8002b78:	4372      	muls	r2, r6
 8002b7a:	4355      	muls	r5, r2
 8002b7c:	1e40      	subs	r0, r0, #1
 8002b7e:	d1f4      	bne.n	8002b6a <forward_cos+0x6e>
 8002b80:	6998      	ldr	r0, [r3, #24]
 8002b82:	6886      	ldr	r6, [r0, #8]
 8002b84:	6821      	ldr	r1, [r4, #0]
 8002b86:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 8002b8a:	1f07      	subs	r7, r0, #4
 8002b8c:	6888      	ldr	r0, [r1, #8]
 8002b8e:	eb00 0285 	add.w	r2, r0, r5, lsl #2
 8002b92:	1f14      	subs	r4, r2, #4
 8002b94:	42b7      	cmp	r7, r6
 8002b96:	d309      	bcc.n	8002bac <forward_cos+0xb0>
 8002b98:	ed97 0a00 	vldr	s0, [r7]
 8002b9c:	f008 fad2 	bl	800b144 <cosf>
 8002ba0:	ed84 0a00 	vstr	s0, [r4]
 8002ba4:	1f3f      	subs	r7, r7, #4
 8002ba6:	1f24      	subs	r4, r4, #4
 8002ba8:	42b7      	cmp	r7, r6
 8002baa:	d2f5      	bcs.n	8002b98 <forward_cos+0x9c>
 8002bac:	b001      	add	sp, #4
 8002bae:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002bb0 <nl_func_cosh_array_f32>:
 8002bb0:	b570      	push	{r4, r5, r6, lr}
 8002bb2:	688c      	ldr	r4, [r1, #8]
 8002bb4:	6880      	ldr	r0, [r0, #8]
 8002bb6:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 8002bba:	1f0d      	subs	r5, r1, #4
 8002bbc:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 8002bc0:	1f0e      	subs	r6, r1, #4
 8002bc2:	42a5      	cmp	r5, r4
 8002bc4:	f0c0 800a 	bcc.w	8002bdc <nl_func_cosh_array_f32+0x2c>
 8002bc8:	ed95 0a00 	vldr	s0, [r5]
 8002bcc:	f009 f882 	bl	800bcd4 <coshf>
 8002bd0:	ed86 0a00 	vstr	s0, [r6]
 8002bd4:	1f2d      	subs	r5, r5, #4
 8002bd6:	1f36      	subs	r6, r6, #4
 8002bd8:	42a5      	cmp	r5, r4
 8002bda:	d2f5      	bcs.n	8002bc8 <nl_func_cosh_array_f32+0x18>
 8002bdc:	bd70      	pop	{r4, r5, r6, pc}
	...

08002be0 <forward_cosh>:
 8002be0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002be2:	b081      	sub	sp, #4
 8002be4:	6942      	ldr	r2, [r0, #20]
 8002be6:	8811      	ldrh	r1, [r2, #0]
 8002be8:	2900      	cmp	r1, #0
 8002bea:	bf1a      	itte	ne
 8002bec:	6850      	ldrne	r0, [r2, #4]
 8002bee:	1d00      	addne	r0, r0, #4
 8002bf0:	2004      	moveq	r0, #4
 8002bf2:	f04f 0501 	mov.w	r5, #1
 8002bf6:	6800      	ldr	r0, [r0, #0]
 8002bf8:	2800      	cmp	r0, #0
 8002bfa:	bf14      	ite	ne
 8002bfc:	6803      	ldrne	r3, [r0, #0]
 8002bfe:	2300      	moveq	r3, #0
 8002c00:	2902      	cmp	r1, #2
 8002c02:	bfa6      	itte	ge
 8002c04:	6850      	ldrge	r0, [r2, #4]
 8002c06:	3010      	addge	r0, #16
 8002c08:	2004      	movlt	r0, #4
 8002c0a:	6800      	ldr	r0, [r0, #0]
 8002c0c:	2800      	cmp	r0, #0
 8002c0e:	bf19      	ittee	ne
 8002c10:	6800      	ldrne	r0, [r0, #0]
 8002c12:	f100 0418 	addne.w	r4, r0, #24
 8002c16:	2100      	moveq	r1, #0
 8002c18:	f101 0418 	addeq.w	r4, r1, #24
 8002c1c:	f103 0108 	add.w	r1, r3, #8
 8002c20:	680a      	ldr	r2, [r1, #0]
 8002c22:	0a12      	lsrs	r2, r2, #8
 8002c24:	d01e      	beq.n	8002c64 <forward_cosh+0x84>
 8002c26:	684e      	ldr	r6, [r1, #4]
 8002c28:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8002c2c:	4610      	mov	r0, r2
 8002c2e:	1f0f      	subs	r7, r1, #4
 8002c30:	f010 0103 	ands.w	r1, r0, #3
 8002c34:	d006      	beq.n	8002c44 <forward_cosh+0x64>
 8002c36:	1e52      	subs	r2, r2, #1
 8002c38:	f857 c904 	ldr.w	ip, [r7], #-4
 8002c3c:	1e49      	subs	r1, r1, #1
 8002c3e:	fb0c f505 	mul.w	r5, ip, r5
 8002c42:	d1f8      	bne.n	8002c36 <forward_cosh+0x56>
 8002c44:	0880      	lsrs	r0, r0, #2
 8002c46:	d00d      	beq.n	8002c64 <forward_cosh+0x84>
 8002c48:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8002c4c:	3910      	subs	r1, #16
 8002c4e:	68ca      	ldr	r2, [r1, #12]
 8002c50:	688e      	ldr	r6, [r1, #8]
 8002c52:	684f      	ldr	r7, [r1, #4]
 8002c54:	4372      	muls	r2, r6
 8002c56:	f851 6910 	ldr.w	r6, [r1], #-16
 8002c5a:	437a      	muls	r2, r7
 8002c5c:	4372      	muls	r2, r6
 8002c5e:	4355      	muls	r5, r2
 8002c60:	1e40      	subs	r0, r0, #1
 8002c62:	d1f4      	bne.n	8002c4e <forward_cosh+0x6e>
 8002c64:	6998      	ldr	r0, [r3, #24]
 8002c66:	6886      	ldr	r6, [r0, #8]
 8002c68:	6821      	ldr	r1, [r4, #0]
 8002c6a:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 8002c6e:	1f07      	subs	r7, r0, #4
 8002c70:	6888      	ldr	r0, [r1, #8]
 8002c72:	eb00 0285 	add.w	r2, r0, r5, lsl #2
 8002c76:	1f14      	subs	r4, r2, #4
 8002c78:	42b7      	cmp	r7, r6
 8002c7a:	d309      	bcc.n	8002c90 <forward_cosh+0xb0>
 8002c7c:	ed97 0a00 	vldr	s0, [r7]
 8002c80:	f009 f828 	bl	800bcd4 <coshf>
 8002c84:	ed84 0a00 	vstr	s0, [r4]
 8002c88:	1f3f      	subs	r7, r7, #4
 8002c8a:	1f24      	subs	r4, r4, #4
 8002c8c:	42b7      	cmp	r7, r6
 8002c8e:	d2f5      	bcs.n	8002c7c <forward_cosh+0x9c>
 8002c90:	b001      	add	sp, #4
 8002c92:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002c94 <nl_func_erf_array_f32>:
 8002c94:	b570      	push	{r4, r5, r6, lr}
 8002c96:	688c      	ldr	r4, [r1, #8]
 8002c98:	6880      	ldr	r0, [r0, #8]
 8002c9a:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 8002c9e:	1f0d      	subs	r5, r1, #4
 8002ca0:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 8002ca4:	1f0e      	subs	r6, r1, #4
 8002ca6:	42a5      	cmp	r5, r4
 8002ca8:	f0c0 800a 	bcc.w	8002cc0 <nl_func_erf_array_f32+0x2c>
 8002cac:	ed95 0a00 	vldr	s0, [r5]
 8002cb0:	f008 fa88 	bl	800b1c4 <erff>
 8002cb4:	ed86 0a00 	vstr	s0, [r6]
 8002cb8:	1f2d      	subs	r5, r5, #4
 8002cba:	1f36      	subs	r6, r6, #4
 8002cbc:	42a5      	cmp	r5, r4
 8002cbe:	d2f5      	bcs.n	8002cac <nl_func_erf_array_f32+0x18>
 8002cc0:	bd70      	pop	{r4, r5, r6, pc}
	...

08002cc4 <forward_erf>:
 8002cc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002cc6:	b081      	sub	sp, #4
 8002cc8:	6942      	ldr	r2, [r0, #20]
 8002cca:	8811      	ldrh	r1, [r2, #0]
 8002ccc:	2900      	cmp	r1, #0
 8002cce:	bf1a      	itte	ne
 8002cd0:	6850      	ldrne	r0, [r2, #4]
 8002cd2:	1d00      	addne	r0, r0, #4
 8002cd4:	2004      	moveq	r0, #4
 8002cd6:	f04f 0501 	mov.w	r5, #1
 8002cda:	6800      	ldr	r0, [r0, #0]
 8002cdc:	2800      	cmp	r0, #0
 8002cde:	bf14      	ite	ne
 8002ce0:	6803      	ldrne	r3, [r0, #0]
 8002ce2:	2300      	moveq	r3, #0
 8002ce4:	2902      	cmp	r1, #2
 8002ce6:	bfa6      	itte	ge
 8002ce8:	6850      	ldrge	r0, [r2, #4]
 8002cea:	3010      	addge	r0, #16
 8002cec:	2004      	movlt	r0, #4
 8002cee:	6800      	ldr	r0, [r0, #0]
 8002cf0:	2800      	cmp	r0, #0
 8002cf2:	bf19      	ittee	ne
 8002cf4:	6800      	ldrne	r0, [r0, #0]
 8002cf6:	f100 0418 	addne.w	r4, r0, #24
 8002cfa:	2100      	moveq	r1, #0
 8002cfc:	f101 0418 	addeq.w	r4, r1, #24
 8002d00:	f103 0108 	add.w	r1, r3, #8
 8002d04:	680a      	ldr	r2, [r1, #0]
 8002d06:	0a12      	lsrs	r2, r2, #8
 8002d08:	d01e      	beq.n	8002d48 <forward_erf+0x84>
 8002d0a:	684e      	ldr	r6, [r1, #4]
 8002d0c:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8002d10:	4610      	mov	r0, r2
 8002d12:	1f0f      	subs	r7, r1, #4
 8002d14:	f010 0103 	ands.w	r1, r0, #3
 8002d18:	d006      	beq.n	8002d28 <forward_erf+0x64>
 8002d1a:	1e52      	subs	r2, r2, #1
 8002d1c:	f857 c904 	ldr.w	ip, [r7], #-4
 8002d20:	1e49      	subs	r1, r1, #1
 8002d22:	fb0c f505 	mul.w	r5, ip, r5
 8002d26:	d1f8      	bne.n	8002d1a <forward_erf+0x56>
 8002d28:	0880      	lsrs	r0, r0, #2
 8002d2a:	d00d      	beq.n	8002d48 <forward_erf+0x84>
 8002d2c:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8002d30:	3910      	subs	r1, #16
 8002d32:	68ca      	ldr	r2, [r1, #12]
 8002d34:	688e      	ldr	r6, [r1, #8]
 8002d36:	684f      	ldr	r7, [r1, #4]
 8002d38:	4372      	muls	r2, r6
 8002d3a:	f851 6910 	ldr.w	r6, [r1], #-16
 8002d3e:	437a      	muls	r2, r7
 8002d40:	4372      	muls	r2, r6
 8002d42:	4355      	muls	r5, r2
 8002d44:	1e40      	subs	r0, r0, #1
 8002d46:	d1f4      	bne.n	8002d32 <forward_erf+0x6e>
 8002d48:	6998      	ldr	r0, [r3, #24]
 8002d4a:	6886      	ldr	r6, [r0, #8]
 8002d4c:	6821      	ldr	r1, [r4, #0]
 8002d4e:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 8002d52:	1f07      	subs	r7, r0, #4
 8002d54:	6888      	ldr	r0, [r1, #8]
 8002d56:	eb00 0285 	add.w	r2, r0, r5, lsl #2
 8002d5a:	1f14      	subs	r4, r2, #4
 8002d5c:	42b7      	cmp	r7, r6
 8002d5e:	d309      	bcc.n	8002d74 <forward_erf+0xb0>
 8002d60:	ed97 0a00 	vldr	s0, [r7]
 8002d64:	f008 fa2e 	bl	800b1c4 <erff>
 8002d68:	ed84 0a00 	vstr	s0, [r4]
 8002d6c:	1f3f      	subs	r7, r7, #4
 8002d6e:	1f24      	subs	r4, r4, #4
 8002d70:	42b7      	cmp	r7, r6
 8002d72:	d2f5      	bcs.n	8002d60 <forward_erf+0x9c>
 8002d74:	b001      	add	sp, #4
 8002d76:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002d78 <nl_func_log_array_f32>:
 8002d78:	b570      	push	{r4, r5, r6, lr}
 8002d7a:	688c      	ldr	r4, [r1, #8]
 8002d7c:	6880      	ldr	r0, [r0, #8]
 8002d7e:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 8002d82:	1f0d      	subs	r5, r1, #4
 8002d84:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 8002d88:	1f0e      	subs	r6, r1, #4
 8002d8a:	42a5      	cmp	r5, r4
 8002d8c:	f0c0 800a 	bcc.w	8002da4 <nl_func_log_array_f32+0x2c>
 8002d90:	ed95 0a00 	vldr	s0, [r5]
 8002d94:	f009 f8d4 	bl	800bf40 <logf>
 8002d98:	ed86 0a00 	vstr	s0, [r6]
 8002d9c:	1f2d      	subs	r5, r5, #4
 8002d9e:	1f36      	subs	r6, r6, #4
 8002da0:	42a5      	cmp	r5, r4
 8002da2:	d2f5      	bcs.n	8002d90 <nl_func_log_array_f32+0x18>
 8002da4:	bd70      	pop	{r4, r5, r6, pc}
	...

08002da8 <forward_log>:
 8002da8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002daa:	b081      	sub	sp, #4
 8002dac:	6942      	ldr	r2, [r0, #20]
 8002dae:	8811      	ldrh	r1, [r2, #0]
 8002db0:	2900      	cmp	r1, #0
 8002db2:	bf1a      	itte	ne
 8002db4:	6850      	ldrne	r0, [r2, #4]
 8002db6:	1d00      	addne	r0, r0, #4
 8002db8:	2004      	moveq	r0, #4
 8002dba:	f04f 0501 	mov.w	r5, #1
 8002dbe:	6800      	ldr	r0, [r0, #0]
 8002dc0:	2800      	cmp	r0, #0
 8002dc2:	bf14      	ite	ne
 8002dc4:	6803      	ldrne	r3, [r0, #0]
 8002dc6:	2300      	moveq	r3, #0
 8002dc8:	2902      	cmp	r1, #2
 8002dca:	bfa6      	itte	ge
 8002dcc:	6850      	ldrge	r0, [r2, #4]
 8002dce:	3010      	addge	r0, #16
 8002dd0:	2004      	movlt	r0, #4
 8002dd2:	6800      	ldr	r0, [r0, #0]
 8002dd4:	2800      	cmp	r0, #0
 8002dd6:	bf19      	ittee	ne
 8002dd8:	6800      	ldrne	r0, [r0, #0]
 8002dda:	f100 0418 	addne.w	r4, r0, #24
 8002dde:	2100      	moveq	r1, #0
 8002de0:	f101 0418 	addeq.w	r4, r1, #24
 8002de4:	f103 0108 	add.w	r1, r3, #8
 8002de8:	680a      	ldr	r2, [r1, #0]
 8002dea:	0a12      	lsrs	r2, r2, #8
 8002dec:	d01e      	beq.n	8002e2c <forward_log+0x84>
 8002dee:	684e      	ldr	r6, [r1, #4]
 8002df0:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8002df4:	4610      	mov	r0, r2
 8002df6:	1f0f      	subs	r7, r1, #4
 8002df8:	f010 0103 	ands.w	r1, r0, #3
 8002dfc:	d006      	beq.n	8002e0c <forward_log+0x64>
 8002dfe:	1e52      	subs	r2, r2, #1
 8002e00:	f857 c904 	ldr.w	ip, [r7], #-4
 8002e04:	1e49      	subs	r1, r1, #1
 8002e06:	fb0c f505 	mul.w	r5, ip, r5
 8002e0a:	d1f8      	bne.n	8002dfe <forward_log+0x56>
 8002e0c:	0880      	lsrs	r0, r0, #2
 8002e0e:	d00d      	beq.n	8002e2c <forward_log+0x84>
 8002e10:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8002e14:	3910      	subs	r1, #16
 8002e16:	68ca      	ldr	r2, [r1, #12]
 8002e18:	688e      	ldr	r6, [r1, #8]
 8002e1a:	684f      	ldr	r7, [r1, #4]
 8002e1c:	4372      	muls	r2, r6
 8002e1e:	f851 6910 	ldr.w	r6, [r1], #-16
 8002e22:	437a      	muls	r2, r7
 8002e24:	4372      	muls	r2, r6
 8002e26:	4355      	muls	r5, r2
 8002e28:	1e40      	subs	r0, r0, #1
 8002e2a:	d1f4      	bne.n	8002e16 <forward_log+0x6e>
 8002e2c:	6998      	ldr	r0, [r3, #24]
 8002e2e:	6886      	ldr	r6, [r0, #8]
 8002e30:	6821      	ldr	r1, [r4, #0]
 8002e32:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 8002e36:	1f07      	subs	r7, r0, #4
 8002e38:	6888      	ldr	r0, [r1, #8]
 8002e3a:	eb00 0285 	add.w	r2, r0, r5, lsl #2
 8002e3e:	1f14      	subs	r4, r2, #4
 8002e40:	42b7      	cmp	r7, r6
 8002e42:	d309      	bcc.n	8002e58 <forward_log+0xb0>
 8002e44:	ed97 0a00 	vldr	s0, [r7]
 8002e48:	f009 f87a 	bl	800bf40 <logf>
 8002e4c:	ed84 0a00 	vstr	s0, [r4]
 8002e50:	1f3f      	subs	r7, r7, #4
 8002e52:	1f24      	subs	r4, r4, #4
 8002e54:	42b7      	cmp	r7, r6
 8002e56:	d2f5      	bcs.n	8002e44 <forward_log+0x9c>
 8002e58:	b001      	add	sp, #4
 8002e5a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002e5c <nl_func_rsqrt_array_f32>:
 8002e5c:	b570      	push	{r4, r5, r6, lr}
 8002e5e:	460c      	mov	r4, r1
 8002e60:	6880      	ldr	r0, [r0, #8]
 8002e62:	68a1      	ldr	r1, [r4, #8]
 8002e64:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 8002e68:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8002e6c:	1f1d      	subs	r5, r3, #4
 8002e6e:	1f16      	subs	r6, r2, #4
 8002e70:	428d      	cmp	r5, r1
 8002e72:	d30e      	bcc.n	8002e92 <nl_func_rsqrt_array_f32+0x36>
 8002e74:	ed95 0a00 	vldr	s0, [r5]
 8002e78:	f003 fcc2 	bl	8006800 <ai_math_sqrt>
 8002e7c:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8002e80:	eec0 0a80 	vdiv.f32	s1, s1, s0
 8002e84:	edc6 0a00 	vstr	s1, [r6]
 8002e88:	1f2d      	subs	r5, r5, #4
 8002e8a:	68a0      	ldr	r0, [r4, #8]
 8002e8c:	1f36      	subs	r6, r6, #4
 8002e8e:	4285      	cmp	r5, r0
 8002e90:	d2f0      	bcs.n	8002e74 <nl_func_rsqrt_array_f32+0x18>
 8002e92:	bd70      	pop	{r4, r5, r6, pc}

08002e94 <forward_rsqrt>:
 8002e94:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002e96:	b081      	sub	sp, #4
 8002e98:	6942      	ldr	r2, [r0, #20]
 8002e9a:	8811      	ldrh	r1, [r2, #0]
 8002e9c:	2900      	cmp	r1, #0
 8002e9e:	bf1a      	itte	ne
 8002ea0:	6850      	ldrne	r0, [r2, #4]
 8002ea2:	1d00      	addne	r0, r0, #4
 8002ea4:	2004      	moveq	r0, #4
 8002ea6:	f04f 0501 	mov.w	r5, #1
 8002eaa:	6800      	ldr	r0, [r0, #0]
 8002eac:	2800      	cmp	r0, #0
 8002eae:	bf14      	ite	ne
 8002eb0:	6803      	ldrne	r3, [r0, #0]
 8002eb2:	2300      	moveq	r3, #0
 8002eb4:	2902      	cmp	r1, #2
 8002eb6:	bfa6      	itte	ge
 8002eb8:	6850      	ldrge	r0, [r2, #4]
 8002eba:	3010      	addge	r0, #16
 8002ebc:	2004      	movlt	r0, #4
 8002ebe:	6800      	ldr	r0, [r0, #0]
 8002ec0:	2800      	cmp	r0, #0
 8002ec2:	bf19      	ittee	ne
 8002ec4:	6800      	ldrne	r0, [r0, #0]
 8002ec6:	f100 0418 	addne.w	r4, r0, #24
 8002eca:	2100      	moveq	r1, #0
 8002ecc:	f101 0418 	addeq.w	r4, r1, #24
 8002ed0:	f103 0108 	add.w	r1, r3, #8
 8002ed4:	680a      	ldr	r2, [r1, #0]
 8002ed6:	0a12      	lsrs	r2, r2, #8
 8002ed8:	d01e      	beq.n	8002f18 <forward_rsqrt+0x84>
 8002eda:	684e      	ldr	r6, [r1, #4]
 8002edc:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8002ee0:	4610      	mov	r0, r2
 8002ee2:	1f0f      	subs	r7, r1, #4
 8002ee4:	f010 0103 	ands.w	r1, r0, #3
 8002ee8:	d006      	beq.n	8002ef8 <forward_rsqrt+0x64>
 8002eea:	1e52      	subs	r2, r2, #1
 8002eec:	f857 c904 	ldr.w	ip, [r7], #-4
 8002ef0:	1e49      	subs	r1, r1, #1
 8002ef2:	fb0c f505 	mul.w	r5, ip, r5
 8002ef6:	d1f8      	bne.n	8002eea <forward_rsqrt+0x56>
 8002ef8:	0880      	lsrs	r0, r0, #2
 8002efa:	d00d      	beq.n	8002f18 <forward_rsqrt+0x84>
 8002efc:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8002f00:	3910      	subs	r1, #16
 8002f02:	68ca      	ldr	r2, [r1, #12]
 8002f04:	688e      	ldr	r6, [r1, #8]
 8002f06:	684f      	ldr	r7, [r1, #4]
 8002f08:	4372      	muls	r2, r6
 8002f0a:	f851 6910 	ldr.w	r6, [r1], #-16
 8002f0e:	437a      	muls	r2, r7
 8002f10:	4372      	muls	r2, r6
 8002f12:	4355      	muls	r5, r2
 8002f14:	1e40      	subs	r0, r0, #1
 8002f16:	d1f4      	bne.n	8002f02 <forward_rsqrt+0x6e>
 8002f18:	699e      	ldr	r6, [r3, #24]
 8002f1a:	68b0      	ldr	r0, [r6, #8]
 8002f1c:	6822      	ldr	r2, [r4, #0]
 8002f1e:	eb00 0185 	add.w	r1, r0, r5, lsl #2
 8002f22:	1f0f      	subs	r7, r1, #4
 8002f24:	6891      	ldr	r1, [r2, #8]
 8002f26:	eb01 0385 	add.w	r3, r1, r5, lsl #2
 8002f2a:	1f1c      	subs	r4, r3, #4
 8002f2c:	4287      	cmp	r7, r0
 8002f2e:	d30e      	bcc.n	8002f4e <forward_rsqrt+0xba>
 8002f30:	ed97 0a00 	vldr	s0, [r7]
 8002f34:	f003 fc64 	bl	8006800 <ai_math_sqrt>
 8002f38:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8002f3c:	eec0 0a80 	vdiv.f32	s1, s1, s0
 8002f40:	edc4 0a00 	vstr	s1, [r4]
 8002f44:	1f3f      	subs	r7, r7, #4
 8002f46:	68b0      	ldr	r0, [r6, #8]
 8002f48:	1f24      	subs	r4, r4, #4
 8002f4a:	4287      	cmp	r7, r0
 8002f4c:	d2f0      	bcs.n	8002f30 <forward_rsqrt+0x9c>
 8002f4e:	b001      	add	sp, #4
 8002f50:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002f54 <nl_func_sin_array_f32>:
 8002f54:	b570      	push	{r4, r5, r6, lr}
 8002f56:	688c      	ldr	r4, [r1, #8]
 8002f58:	6880      	ldr	r0, [r0, #8]
 8002f5a:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 8002f5e:	1f0d      	subs	r5, r1, #4
 8002f60:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 8002f64:	1f0e      	subs	r6, r1, #4
 8002f66:	42a5      	cmp	r5, r4
 8002f68:	f0c0 800a 	bcc.w	8002f80 <nl_func_sin_array_f32+0x2c>
 8002f6c:	ed95 0a00 	vldr	s0, [r5]
 8002f70:	f008 fc80 	bl	800b874 <sinf>
 8002f74:	ed86 0a00 	vstr	s0, [r6]
 8002f78:	1f2d      	subs	r5, r5, #4
 8002f7a:	1f36      	subs	r6, r6, #4
 8002f7c:	42a5      	cmp	r5, r4
 8002f7e:	d2f5      	bcs.n	8002f6c <nl_func_sin_array_f32+0x18>
 8002f80:	bd70      	pop	{r4, r5, r6, pc}
	...

08002f84 <forward_sin>:
 8002f84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002f86:	b081      	sub	sp, #4
 8002f88:	6942      	ldr	r2, [r0, #20]
 8002f8a:	8811      	ldrh	r1, [r2, #0]
 8002f8c:	2900      	cmp	r1, #0
 8002f8e:	bf1a      	itte	ne
 8002f90:	6850      	ldrne	r0, [r2, #4]
 8002f92:	1d00      	addne	r0, r0, #4
 8002f94:	2004      	moveq	r0, #4
 8002f96:	f04f 0501 	mov.w	r5, #1
 8002f9a:	6800      	ldr	r0, [r0, #0]
 8002f9c:	2800      	cmp	r0, #0
 8002f9e:	bf14      	ite	ne
 8002fa0:	6803      	ldrne	r3, [r0, #0]
 8002fa2:	2300      	moveq	r3, #0
 8002fa4:	2902      	cmp	r1, #2
 8002fa6:	bfa6      	itte	ge
 8002fa8:	6850      	ldrge	r0, [r2, #4]
 8002faa:	3010      	addge	r0, #16
 8002fac:	2004      	movlt	r0, #4
 8002fae:	6800      	ldr	r0, [r0, #0]
 8002fb0:	2800      	cmp	r0, #0
 8002fb2:	bf19      	ittee	ne
 8002fb4:	6800      	ldrne	r0, [r0, #0]
 8002fb6:	f100 0418 	addne.w	r4, r0, #24
 8002fba:	2100      	moveq	r1, #0
 8002fbc:	f101 0418 	addeq.w	r4, r1, #24
 8002fc0:	f103 0108 	add.w	r1, r3, #8
 8002fc4:	680a      	ldr	r2, [r1, #0]
 8002fc6:	0a12      	lsrs	r2, r2, #8
 8002fc8:	d01e      	beq.n	8003008 <forward_sin+0x84>
 8002fca:	684e      	ldr	r6, [r1, #4]
 8002fcc:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8002fd0:	4610      	mov	r0, r2
 8002fd2:	1f0f      	subs	r7, r1, #4
 8002fd4:	f010 0103 	ands.w	r1, r0, #3
 8002fd8:	d006      	beq.n	8002fe8 <forward_sin+0x64>
 8002fda:	1e52      	subs	r2, r2, #1
 8002fdc:	f857 c904 	ldr.w	ip, [r7], #-4
 8002fe0:	1e49      	subs	r1, r1, #1
 8002fe2:	fb0c f505 	mul.w	r5, ip, r5
 8002fe6:	d1f8      	bne.n	8002fda <forward_sin+0x56>
 8002fe8:	0880      	lsrs	r0, r0, #2
 8002fea:	d00d      	beq.n	8003008 <forward_sin+0x84>
 8002fec:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8002ff0:	3910      	subs	r1, #16
 8002ff2:	68ca      	ldr	r2, [r1, #12]
 8002ff4:	688e      	ldr	r6, [r1, #8]
 8002ff6:	684f      	ldr	r7, [r1, #4]
 8002ff8:	4372      	muls	r2, r6
 8002ffa:	f851 6910 	ldr.w	r6, [r1], #-16
 8002ffe:	437a      	muls	r2, r7
 8003000:	4372      	muls	r2, r6
 8003002:	4355      	muls	r5, r2
 8003004:	1e40      	subs	r0, r0, #1
 8003006:	d1f4      	bne.n	8002ff2 <forward_sin+0x6e>
 8003008:	6998      	ldr	r0, [r3, #24]
 800300a:	6886      	ldr	r6, [r0, #8]
 800300c:	6821      	ldr	r1, [r4, #0]
 800300e:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 8003012:	1f07      	subs	r7, r0, #4
 8003014:	6888      	ldr	r0, [r1, #8]
 8003016:	eb00 0285 	add.w	r2, r0, r5, lsl #2
 800301a:	1f14      	subs	r4, r2, #4
 800301c:	42b7      	cmp	r7, r6
 800301e:	d309      	bcc.n	8003034 <forward_sin+0xb0>
 8003020:	ed97 0a00 	vldr	s0, [r7]
 8003024:	f008 fc26 	bl	800b874 <sinf>
 8003028:	ed84 0a00 	vstr	s0, [r4]
 800302c:	1f3f      	subs	r7, r7, #4
 800302e:	1f24      	subs	r4, r4, #4
 8003030:	42b7      	cmp	r7, r6
 8003032:	d2f5      	bcs.n	8003020 <forward_sin+0x9c>
 8003034:	b001      	add	sp, #4
 8003036:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003038 <nl_func_sinh_array_f32>:
 8003038:	b570      	push	{r4, r5, r6, lr}
 800303a:	688c      	ldr	r4, [r1, #8]
 800303c:	6880      	ldr	r0, [r0, #8]
 800303e:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 8003042:	1f0d      	subs	r5, r1, #4
 8003044:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 8003048:	1f0e      	subs	r6, r1, #4
 800304a:	42a5      	cmp	r5, r4
 800304c:	f0c0 800a 	bcc.w	8003064 <nl_func_sinh_array_f32+0x2c>
 8003050:	ed95 0a00 	vldr	s0, [r5]
 8003054:	f009 f94e 	bl	800c2f4 <sinhf>
 8003058:	ed86 0a00 	vstr	s0, [r6]
 800305c:	1f2d      	subs	r5, r5, #4
 800305e:	1f36      	subs	r6, r6, #4
 8003060:	42a5      	cmp	r5, r4
 8003062:	d2f5      	bcs.n	8003050 <nl_func_sinh_array_f32+0x18>
 8003064:	bd70      	pop	{r4, r5, r6, pc}
	...

08003068 <forward_sinh>:
 8003068:	b5f0      	push	{r4, r5, r6, r7, lr}
 800306a:	b081      	sub	sp, #4
 800306c:	6942      	ldr	r2, [r0, #20]
 800306e:	8811      	ldrh	r1, [r2, #0]
 8003070:	2900      	cmp	r1, #0
 8003072:	bf1a      	itte	ne
 8003074:	6850      	ldrne	r0, [r2, #4]
 8003076:	1d00      	addne	r0, r0, #4
 8003078:	2004      	moveq	r0, #4
 800307a:	f04f 0501 	mov.w	r5, #1
 800307e:	6800      	ldr	r0, [r0, #0]
 8003080:	2800      	cmp	r0, #0
 8003082:	bf14      	ite	ne
 8003084:	6803      	ldrne	r3, [r0, #0]
 8003086:	2300      	moveq	r3, #0
 8003088:	2902      	cmp	r1, #2
 800308a:	bfa6      	itte	ge
 800308c:	6850      	ldrge	r0, [r2, #4]
 800308e:	3010      	addge	r0, #16
 8003090:	2004      	movlt	r0, #4
 8003092:	6800      	ldr	r0, [r0, #0]
 8003094:	2800      	cmp	r0, #0
 8003096:	bf19      	ittee	ne
 8003098:	6800      	ldrne	r0, [r0, #0]
 800309a:	f100 0418 	addne.w	r4, r0, #24
 800309e:	2100      	moveq	r1, #0
 80030a0:	f101 0418 	addeq.w	r4, r1, #24
 80030a4:	f103 0108 	add.w	r1, r3, #8
 80030a8:	680a      	ldr	r2, [r1, #0]
 80030aa:	0a12      	lsrs	r2, r2, #8
 80030ac:	d01e      	beq.n	80030ec <forward_sinh+0x84>
 80030ae:	684e      	ldr	r6, [r1, #4]
 80030b0:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 80030b4:	4610      	mov	r0, r2
 80030b6:	1f0f      	subs	r7, r1, #4
 80030b8:	f010 0103 	ands.w	r1, r0, #3
 80030bc:	d006      	beq.n	80030cc <forward_sinh+0x64>
 80030be:	1e52      	subs	r2, r2, #1
 80030c0:	f857 c904 	ldr.w	ip, [r7], #-4
 80030c4:	1e49      	subs	r1, r1, #1
 80030c6:	fb0c f505 	mul.w	r5, ip, r5
 80030ca:	d1f8      	bne.n	80030be <forward_sinh+0x56>
 80030cc:	0880      	lsrs	r0, r0, #2
 80030ce:	d00d      	beq.n	80030ec <forward_sinh+0x84>
 80030d0:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 80030d4:	3910      	subs	r1, #16
 80030d6:	68ca      	ldr	r2, [r1, #12]
 80030d8:	688e      	ldr	r6, [r1, #8]
 80030da:	684f      	ldr	r7, [r1, #4]
 80030dc:	4372      	muls	r2, r6
 80030de:	f851 6910 	ldr.w	r6, [r1], #-16
 80030e2:	437a      	muls	r2, r7
 80030e4:	4372      	muls	r2, r6
 80030e6:	4355      	muls	r5, r2
 80030e8:	1e40      	subs	r0, r0, #1
 80030ea:	d1f4      	bne.n	80030d6 <forward_sinh+0x6e>
 80030ec:	6998      	ldr	r0, [r3, #24]
 80030ee:	6886      	ldr	r6, [r0, #8]
 80030f0:	6821      	ldr	r1, [r4, #0]
 80030f2:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 80030f6:	1f07      	subs	r7, r0, #4
 80030f8:	6888      	ldr	r0, [r1, #8]
 80030fa:	eb00 0285 	add.w	r2, r0, r5, lsl #2
 80030fe:	1f14      	subs	r4, r2, #4
 8003100:	42b7      	cmp	r7, r6
 8003102:	d309      	bcc.n	8003118 <forward_sinh+0xb0>
 8003104:	ed97 0a00 	vldr	s0, [r7]
 8003108:	f009 f8f4 	bl	800c2f4 <sinhf>
 800310c:	ed84 0a00 	vstr	s0, [r4]
 8003110:	1f3f      	subs	r7, r7, #4
 8003112:	1f24      	subs	r4, r4, #4
 8003114:	42b7      	cmp	r7, r6
 8003116:	d2f5      	bcs.n	8003104 <forward_sinh+0x9c>
 8003118:	b001      	add	sp, #4
 800311a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800311c <nl_func_tan_array_f32>:
 800311c:	b570      	push	{r4, r5, r6, lr}
 800311e:	688c      	ldr	r4, [r1, #8]
 8003120:	6880      	ldr	r0, [r0, #8]
 8003122:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 8003126:	1f0d      	subs	r5, r1, #4
 8003128:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 800312c:	1f0e      	subs	r6, r1, #4
 800312e:	42a5      	cmp	r5, r4
 8003130:	f0c0 800a 	bcc.w	8003148 <nl_func_tan_array_f32+0x2c>
 8003134:	ed95 0a00 	vldr	s0, [r5]
 8003138:	f008 fbde 	bl	800b8f8 <tanf>
 800313c:	ed86 0a00 	vstr	s0, [r6]
 8003140:	1f2d      	subs	r5, r5, #4
 8003142:	1f36      	subs	r6, r6, #4
 8003144:	42a5      	cmp	r5, r4
 8003146:	d2f5      	bcs.n	8003134 <nl_func_tan_array_f32+0x18>
 8003148:	bd70      	pop	{r4, r5, r6, pc}
	...

0800314c <forward_tan>:
 800314c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800314e:	b081      	sub	sp, #4
 8003150:	6942      	ldr	r2, [r0, #20]
 8003152:	8811      	ldrh	r1, [r2, #0]
 8003154:	2900      	cmp	r1, #0
 8003156:	bf1a      	itte	ne
 8003158:	6850      	ldrne	r0, [r2, #4]
 800315a:	1d00      	addne	r0, r0, #4
 800315c:	2004      	moveq	r0, #4
 800315e:	f04f 0501 	mov.w	r5, #1
 8003162:	6800      	ldr	r0, [r0, #0]
 8003164:	2800      	cmp	r0, #0
 8003166:	bf14      	ite	ne
 8003168:	6803      	ldrne	r3, [r0, #0]
 800316a:	2300      	moveq	r3, #0
 800316c:	2902      	cmp	r1, #2
 800316e:	bfa6      	itte	ge
 8003170:	6850      	ldrge	r0, [r2, #4]
 8003172:	3010      	addge	r0, #16
 8003174:	2004      	movlt	r0, #4
 8003176:	6800      	ldr	r0, [r0, #0]
 8003178:	2800      	cmp	r0, #0
 800317a:	bf19      	ittee	ne
 800317c:	6800      	ldrne	r0, [r0, #0]
 800317e:	f100 0418 	addne.w	r4, r0, #24
 8003182:	2100      	moveq	r1, #0
 8003184:	f101 0418 	addeq.w	r4, r1, #24
 8003188:	f103 0108 	add.w	r1, r3, #8
 800318c:	680a      	ldr	r2, [r1, #0]
 800318e:	0a12      	lsrs	r2, r2, #8
 8003190:	d01e      	beq.n	80031d0 <forward_tan+0x84>
 8003192:	684e      	ldr	r6, [r1, #4]
 8003194:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003198:	4610      	mov	r0, r2
 800319a:	1f0f      	subs	r7, r1, #4
 800319c:	f010 0103 	ands.w	r1, r0, #3
 80031a0:	d006      	beq.n	80031b0 <forward_tan+0x64>
 80031a2:	1e52      	subs	r2, r2, #1
 80031a4:	f857 c904 	ldr.w	ip, [r7], #-4
 80031a8:	1e49      	subs	r1, r1, #1
 80031aa:	fb0c f505 	mul.w	r5, ip, r5
 80031ae:	d1f8      	bne.n	80031a2 <forward_tan+0x56>
 80031b0:	0880      	lsrs	r0, r0, #2
 80031b2:	d00d      	beq.n	80031d0 <forward_tan+0x84>
 80031b4:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 80031b8:	3910      	subs	r1, #16
 80031ba:	68ca      	ldr	r2, [r1, #12]
 80031bc:	688e      	ldr	r6, [r1, #8]
 80031be:	684f      	ldr	r7, [r1, #4]
 80031c0:	4372      	muls	r2, r6
 80031c2:	f851 6910 	ldr.w	r6, [r1], #-16
 80031c6:	437a      	muls	r2, r7
 80031c8:	4372      	muls	r2, r6
 80031ca:	4355      	muls	r5, r2
 80031cc:	1e40      	subs	r0, r0, #1
 80031ce:	d1f4      	bne.n	80031ba <forward_tan+0x6e>
 80031d0:	6998      	ldr	r0, [r3, #24]
 80031d2:	6886      	ldr	r6, [r0, #8]
 80031d4:	6821      	ldr	r1, [r4, #0]
 80031d6:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 80031da:	1f07      	subs	r7, r0, #4
 80031dc:	6888      	ldr	r0, [r1, #8]
 80031de:	eb00 0285 	add.w	r2, r0, r5, lsl #2
 80031e2:	1f14      	subs	r4, r2, #4
 80031e4:	42b7      	cmp	r7, r6
 80031e6:	d309      	bcc.n	80031fc <forward_tan+0xb0>
 80031e8:	ed97 0a00 	vldr	s0, [r7]
 80031ec:	f008 fb84 	bl	800b8f8 <tanf>
 80031f0:	ed84 0a00 	vstr	s0, [r4]
 80031f4:	1f3f      	subs	r7, r7, #4
 80031f6:	1f24      	subs	r4, r4, #4
 80031f8:	42b7      	cmp	r7, r6
 80031fa:	d2f5      	bcs.n	80031e8 <forward_tan+0x9c>
 80031fc:	b001      	add	sp, #4
 80031fe:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003200 <nl_func_abs_array_f32>:
 8003200:	6889      	ldr	r1, [r1, #8]
 8003202:	6880      	ldr	r0, [r0, #8]
 8003204:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 8003208:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 800320c:	1f1b      	subs	r3, r3, #4
 800320e:	1f10      	subs	r0, r2, #4
 8003210:	428b      	cmp	r3, r1
 8003212:	d307      	bcc.n	8003224 <nl_func_abs_array_f32+0x24>
 8003214:	f853 c904 	ldr.w	ip, [r3], #-4
 8003218:	f02c 4200 	bic.w	r2, ip, #2147483648	; 0x80000000
 800321c:	428b      	cmp	r3, r1
 800321e:	f840 2904 	str.w	r2, [r0], #-4
 8003222:	d2f7      	bcs.n	8003214 <nl_func_abs_array_f32+0x14>
 8003224:	4770      	bx	lr
	...

08003228 <forward_abs>:
 8003228:	b4f0      	push	{r4, r5, r6, r7}
 800322a:	6942      	ldr	r2, [r0, #20]
 800322c:	8811      	ldrh	r1, [r2, #0]
 800322e:	2900      	cmp	r1, #0
 8003230:	bf1a      	itte	ne
 8003232:	6850      	ldrne	r0, [r2, #4]
 8003234:	1d00      	addne	r0, r0, #4
 8003236:	2004      	moveq	r0, #4
 8003238:	f04f 0501 	mov.w	r5, #1
 800323c:	6800      	ldr	r0, [r0, #0]
 800323e:	2800      	cmp	r0, #0
 8003240:	bf14      	ite	ne
 8003242:	6803      	ldrne	r3, [r0, #0]
 8003244:	2300      	moveq	r3, #0
 8003246:	2902      	cmp	r1, #2
 8003248:	bfa6      	itte	ge
 800324a:	6850      	ldrge	r0, [r2, #4]
 800324c:	3010      	addge	r0, #16
 800324e:	2004      	movlt	r0, #4
 8003250:	6800      	ldr	r0, [r0, #0]
 8003252:	2800      	cmp	r0, #0
 8003254:	bf19      	ittee	ne
 8003256:	6800      	ldrne	r0, [r0, #0]
 8003258:	f100 0418 	addne.w	r4, r0, #24
 800325c:	2100      	moveq	r1, #0
 800325e:	f101 0418 	addeq.w	r4, r1, #24
 8003262:	f103 0108 	add.w	r1, r3, #8
 8003266:	680a      	ldr	r2, [r1, #0]
 8003268:	0a12      	lsrs	r2, r2, #8
 800326a:	d01e      	beq.n	80032aa <forward_abs+0x82>
 800326c:	684e      	ldr	r6, [r1, #4]
 800326e:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003272:	4610      	mov	r0, r2
 8003274:	1f0f      	subs	r7, r1, #4
 8003276:	f010 0103 	ands.w	r1, r0, #3
 800327a:	d006      	beq.n	800328a <forward_abs+0x62>
 800327c:	1e52      	subs	r2, r2, #1
 800327e:	f857 c904 	ldr.w	ip, [r7], #-4
 8003282:	1e49      	subs	r1, r1, #1
 8003284:	fb0c f505 	mul.w	r5, ip, r5
 8003288:	d1f8      	bne.n	800327c <forward_abs+0x54>
 800328a:	0880      	lsrs	r0, r0, #2
 800328c:	d00d      	beq.n	80032aa <forward_abs+0x82>
 800328e:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003292:	3910      	subs	r1, #16
 8003294:	68ca      	ldr	r2, [r1, #12]
 8003296:	688e      	ldr	r6, [r1, #8]
 8003298:	684f      	ldr	r7, [r1, #4]
 800329a:	4372      	muls	r2, r6
 800329c:	f851 6910 	ldr.w	r6, [r1], #-16
 80032a0:	437a      	muls	r2, r7
 80032a2:	4372      	muls	r2, r6
 80032a4:	4355      	muls	r5, r2
 80032a6:	1e40      	subs	r0, r0, #1
 80032a8:	d1f4      	bne.n	8003294 <forward_abs+0x6c>
 80032aa:	6998      	ldr	r0, [r3, #24]
 80032ac:	6822      	ldr	r2, [r4, #0]
 80032ae:	6880      	ldr	r0, [r0, #8]
 80032b0:	6893      	ldr	r3, [r2, #8]
 80032b2:	eb00 0185 	add.w	r1, r0, r5, lsl #2
 80032b6:	eb03 0485 	add.w	r4, r3, r5, lsl #2
 80032ba:	1f09      	subs	r1, r1, #4
 80032bc:	1f22      	subs	r2, r4, #4
 80032be:	4281      	cmp	r1, r0
 80032c0:	f0c0 8008 	bcc.w	80032d4 <forward_abs+0xac>
 80032c4:	f851 3904 	ldr.w	r3, [r1], #-4
 80032c8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80032cc:	4281      	cmp	r1, r0
 80032ce:	f842 3904 	str.w	r3, [r2], #-4
 80032d2:	d2f7      	bcs.n	80032c4 <forward_abs+0x9c>
 80032d4:	bcf0      	pop	{r4, r5, r6, r7}
 80032d6:	4770      	bx	lr

080032d8 <nl_func_ceil_array_f32>:
 80032d8:	b570      	push	{r4, r5, r6, lr}
 80032da:	688c      	ldr	r4, [r1, #8]
 80032dc:	6880      	ldr	r0, [r0, #8]
 80032de:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 80032e2:	1f0d      	subs	r5, r1, #4
 80032e4:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 80032e8:	1f0e      	subs	r6, r1, #4
 80032ea:	42a5      	cmp	r5, r4
 80032ec:	f0c0 800a 	bcc.w	8003304 <nl_func_ceil_array_f32+0x2c>
 80032f0:	ed95 0a00 	vldr	s0, [r5]
 80032f4:	f007 fee6 	bl	800b0c4 <ceilf>
 80032f8:	ed86 0a00 	vstr	s0, [r6]
 80032fc:	1f2d      	subs	r5, r5, #4
 80032fe:	1f36      	subs	r6, r6, #4
 8003300:	42a5      	cmp	r5, r4
 8003302:	d2f5      	bcs.n	80032f0 <nl_func_ceil_array_f32+0x18>
 8003304:	bd70      	pop	{r4, r5, r6, pc}
	...

08003308 <forward_ceil>:
 8003308:	b5f0      	push	{r4, r5, r6, r7, lr}
 800330a:	b081      	sub	sp, #4
 800330c:	6942      	ldr	r2, [r0, #20]
 800330e:	8811      	ldrh	r1, [r2, #0]
 8003310:	2900      	cmp	r1, #0
 8003312:	bf1a      	itte	ne
 8003314:	6850      	ldrne	r0, [r2, #4]
 8003316:	1d00      	addne	r0, r0, #4
 8003318:	2004      	moveq	r0, #4
 800331a:	f04f 0501 	mov.w	r5, #1
 800331e:	6800      	ldr	r0, [r0, #0]
 8003320:	2800      	cmp	r0, #0
 8003322:	bf14      	ite	ne
 8003324:	6803      	ldrne	r3, [r0, #0]
 8003326:	2300      	moveq	r3, #0
 8003328:	2902      	cmp	r1, #2
 800332a:	bfa6      	itte	ge
 800332c:	6850      	ldrge	r0, [r2, #4]
 800332e:	3010      	addge	r0, #16
 8003330:	2004      	movlt	r0, #4
 8003332:	6800      	ldr	r0, [r0, #0]
 8003334:	2800      	cmp	r0, #0
 8003336:	bf19      	ittee	ne
 8003338:	6800      	ldrne	r0, [r0, #0]
 800333a:	f100 0418 	addne.w	r4, r0, #24
 800333e:	2100      	moveq	r1, #0
 8003340:	f101 0418 	addeq.w	r4, r1, #24
 8003344:	f103 0108 	add.w	r1, r3, #8
 8003348:	680a      	ldr	r2, [r1, #0]
 800334a:	0a12      	lsrs	r2, r2, #8
 800334c:	d01e      	beq.n	800338c <forward_ceil+0x84>
 800334e:	684e      	ldr	r6, [r1, #4]
 8003350:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003354:	4610      	mov	r0, r2
 8003356:	1f0f      	subs	r7, r1, #4
 8003358:	f010 0103 	ands.w	r1, r0, #3
 800335c:	d006      	beq.n	800336c <forward_ceil+0x64>
 800335e:	1e52      	subs	r2, r2, #1
 8003360:	f857 c904 	ldr.w	ip, [r7], #-4
 8003364:	1e49      	subs	r1, r1, #1
 8003366:	fb0c f505 	mul.w	r5, ip, r5
 800336a:	d1f8      	bne.n	800335e <forward_ceil+0x56>
 800336c:	0880      	lsrs	r0, r0, #2
 800336e:	d00d      	beq.n	800338c <forward_ceil+0x84>
 8003370:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003374:	3910      	subs	r1, #16
 8003376:	68ca      	ldr	r2, [r1, #12]
 8003378:	688e      	ldr	r6, [r1, #8]
 800337a:	684f      	ldr	r7, [r1, #4]
 800337c:	4372      	muls	r2, r6
 800337e:	f851 6910 	ldr.w	r6, [r1], #-16
 8003382:	437a      	muls	r2, r7
 8003384:	4372      	muls	r2, r6
 8003386:	4355      	muls	r5, r2
 8003388:	1e40      	subs	r0, r0, #1
 800338a:	d1f4      	bne.n	8003376 <forward_ceil+0x6e>
 800338c:	6998      	ldr	r0, [r3, #24]
 800338e:	6886      	ldr	r6, [r0, #8]
 8003390:	6821      	ldr	r1, [r4, #0]
 8003392:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 8003396:	1f07      	subs	r7, r0, #4
 8003398:	6888      	ldr	r0, [r1, #8]
 800339a:	eb00 0285 	add.w	r2, r0, r5, lsl #2
 800339e:	1f14      	subs	r4, r2, #4
 80033a0:	42b7      	cmp	r7, r6
 80033a2:	d309      	bcc.n	80033b8 <forward_ceil+0xb0>
 80033a4:	ed97 0a00 	vldr	s0, [r7]
 80033a8:	f007 fe8c 	bl	800b0c4 <ceilf>
 80033ac:	ed84 0a00 	vstr	s0, [r4]
 80033b0:	1f3f      	subs	r7, r7, #4
 80033b2:	1f24      	subs	r4, r4, #4
 80033b4:	42b7      	cmp	r7, r6
 80033b6:	d2f5      	bcs.n	80033a4 <forward_ceil+0x9c>
 80033b8:	b001      	add	sp, #4
 80033ba:	bdf0      	pop	{r4, r5, r6, r7, pc}

080033bc <nl_func_floor_array_f32>:
 80033bc:	b570      	push	{r4, r5, r6, lr}
 80033be:	688c      	ldr	r4, [r1, #8]
 80033c0:	6880      	ldr	r0, [r0, #8]
 80033c2:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 80033c6:	1f0d      	subs	r5, r1, #4
 80033c8:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 80033cc:	1f0e      	subs	r6, r1, #4
 80033ce:	42a5      	cmp	r5, r4
 80033d0:	f0c0 800a 	bcc.w	80033e8 <nl_func_floor_array_f32+0x2c>
 80033d4:	ed95 0a00 	vldr	s0, [r5]
 80033d8:	f008 f8dc 	bl	800b594 <floorf>
 80033dc:	ed86 0a00 	vstr	s0, [r6]
 80033e0:	1f2d      	subs	r5, r5, #4
 80033e2:	1f36      	subs	r6, r6, #4
 80033e4:	42a5      	cmp	r5, r4
 80033e6:	d2f5      	bcs.n	80033d4 <nl_func_floor_array_f32+0x18>
 80033e8:	bd70      	pop	{r4, r5, r6, pc}
	...

080033ec <forward_floor>:
 80033ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80033ee:	b081      	sub	sp, #4
 80033f0:	6942      	ldr	r2, [r0, #20]
 80033f2:	8811      	ldrh	r1, [r2, #0]
 80033f4:	2900      	cmp	r1, #0
 80033f6:	bf1a      	itte	ne
 80033f8:	6850      	ldrne	r0, [r2, #4]
 80033fa:	1d00      	addne	r0, r0, #4
 80033fc:	2004      	moveq	r0, #4
 80033fe:	f04f 0501 	mov.w	r5, #1
 8003402:	6800      	ldr	r0, [r0, #0]
 8003404:	2800      	cmp	r0, #0
 8003406:	bf14      	ite	ne
 8003408:	6803      	ldrne	r3, [r0, #0]
 800340a:	2300      	moveq	r3, #0
 800340c:	2902      	cmp	r1, #2
 800340e:	bfa6      	itte	ge
 8003410:	6850      	ldrge	r0, [r2, #4]
 8003412:	3010      	addge	r0, #16
 8003414:	2004      	movlt	r0, #4
 8003416:	6800      	ldr	r0, [r0, #0]
 8003418:	2800      	cmp	r0, #0
 800341a:	bf19      	ittee	ne
 800341c:	6800      	ldrne	r0, [r0, #0]
 800341e:	f100 0418 	addne.w	r4, r0, #24
 8003422:	2100      	moveq	r1, #0
 8003424:	f101 0418 	addeq.w	r4, r1, #24
 8003428:	f103 0108 	add.w	r1, r3, #8
 800342c:	680a      	ldr	r2, [r1, #0]
 800342e:	0a12      	lsrs	r2, r2, #8
 8003430:	d01e      	beq.n	8003470 <forward_floor+0x84>
 8003432:	684e      	ldr	r6, [r1, #4]
 8003434:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003438:	4610      	mov	r0, r2
 800343a:	1f0f      	subs	r7, r1, #4
 800343c:	f010 0103 	ands.w	r1, r0, #3
 8003440:	d006      	beq.n	8003450 <forward_floor+0x64>
 8003442:	1e52      	subs	r2, r2, #1
 8003444:	f857 c904 	ldr.w	ip, [r7], #-4
 8003448:	1e49      	subs	r1, r1, #1
 800344a:	fb0c f505 	mul.w	r5, ip, r5
 800344e:	d1f8      	bne.n	8003442 <forward_floor+0x56>
 8003450:	0880      	lsrs	r0, r0, #2
 8003452:	d00d      	beq.n	8003470 <forward_floor+0x84>
 8003454:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003458:	3910      	subs	r1, #16
 800345a:	68ca      	ldr	r2, [r1, #12]
 800345c:	688e      	ldr	r6, [r1, #8]
 800345e:	684f      	ldr	r7, [r1, #4]
 8003460:	4372      	muls	r2, r6
 8003462:	f851 6910 	ldr.w	r6, [r1], #-16
 8003466:	437a      	muls	r2, r7
 8003468:	4372      	muls	r2, r6
 800346a:	4355      	muls	r5, r2
 800346c:	1e40      	subs	r0, r0, #1
 800346e:	d1f4      	bne.n	800345a <forward_floor+0x6e>
 8003470:	6998      	ldr	r0, [r3, #24]
 8003472:	6886      	ldr	r6, [r0, #8]
 8003474:	6821      	ldr	r1, [r4, #0]
 8003476:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 800347a:	1f07      	subs	r7, r0, #4
 800347c:	6888      	ldr	r0, [r1, #8]
 800347e:	eb00 0285 	add.w	r2, r0, r5, lsl #2
 8003482:	1f14      	subs	r4, r2, #4
 8003484:	42b7      	cmp	r7, r6
 8003486:	d309      	bcc.n	800349c <forward_floor+0xb0>
 8003488:	ed97 0a00 	vldr	s0, [r7]
 800348c:	f008 f882 	bl	800b594 <floorf>
 8003490:	ed84 0a00 	vstr	s0, [r4]
 8003494:	1f3f      	subs	r7, r7, #4
 8003496:	1f24      	subs	r4, r4, #4
 8003498:	42b7      	cmp	r7, r6
 800349a:	d2f5      	bcs.n	8003488 <forward_floor+0x9c>
 800349c:	b001      	add	sp, #4
 800349e:	bdf0      	pop	{r4, r5, r6, r7, pc}

080034a0 <nl_func_round_array_f32>:
 80034a0:	b570      	push	{r4, r5, r6, lr}
 80034a2:	688c      	ldr	r4, [r1, #8]
 80034a4:	6880      	ldr	r0, [r0, #8]
 80034a6:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 80034aa:	1f0d      	subs	r5, r1, #4
 80034ac:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 80034b0:	1f0e      	subs	r6, r1, #4
 80034b2:	42a5      	cmp	r5, r4
 80034b4:	f0c0 800a 	bcc.w	80034cc <nl_func_round_array_f32+0x2c>
 80034b8:	ed95 0a00 	vldr	s0, [r5]
 80034bc:	f008 f9b4 	bl	800b828 <roundf>
 80034c0:	ed86 0a00 	vstr	s0, [r6]
 80034c4:	1f2d      	subs	r5, r5, #4
 80034c6:	1f36      	subs	r6, r6, #4
 80034c8:	42a5      	cmp	r5, r4
 80034ca:	d2f5      	bcs.n	80034b8 <nl_func_round_array_f32+0x18>
 80034cc:	bd70      	pop	{r4, r5, r6, pc}
	...

080034d0 <forward_round>:
 80034d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034d2:	b081      	sub	sp, #4
 80034d4:	6942      	ldr	r2, [r0, #20]
 80034d6:	8811      	ldrh	r1, [r2, #0]
 80034d8:	2900      	cmp	r1, #0
 80034da:	bf1a      	itte	ne
 80034dc:	6850      	ldrne	r0, [r2, #4]
 80034de:	1d00      	addne	r0, r0, #4
 80034e0:	2004      	moveq	r0, #4
 80034e2:	f04f 0501 	mov.w	r5, #1
 80034e6:	6800      	ldr	r0, [r0, #0]
 80034e8:	2800      	cmp	r0, #0
 80034ea:	bf14      	ite	ne
 80034ec:	6803      	ldrne	r3, [r0, #0]
 80034ee:	2300      	moveq	r3, #0
 80034f0:	2902      	cmp	r1, #2
 80034f2:	bfa6      	itte	ge
 80034f4:	6850      	ldrge	r0, [r2, #4]
 80034f6:	3010      	addge	r0, #16
 80034f8:	2004      	movlt	r0, #4
 80034fa:	6800      	ldr	r0, [r0, #0]
 80034fc:	2800      	cmp	r0, #0
 80034fe:	bf19      	ittee	ne
 8003500:	6800      	ldrne	r0, [r0, #0]
 8003502:	f100 0418 	addne.w	r4, r0, #24
 8003506:	2100      	moveq	r1, #0
 8003508:	f101 0418 	addeq.w	r4, r1, #24
 800350c:	f103 0108 	add.w	r1, r3, #8
 8003510:	680a      	ldr	r2, [r1, #0]
 8003512:	0a12      	lsrs	r2, r2, #8
 8003514:	d01e      	beq.n	8003554 <forward_round+0x84>
 8003516:	684e      	ldr	r6, [r1, #4]
 8003518:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 800351c:	4610      	mov	r0, r2
 800351e:	1f0f      	subs	r7, r1, #4
 8003520:	f010 0103 	ands.w	r1, r0, #3
 8003524:	d006      	beq.n	8003534 <forward_round+0x64>
 8003526:	1e52      	subs	r2, r2, #1
 8003528:	f857 c904 	ldr.w	ip, [r7], #-4
 800352c:	1e49      	subs	r1, r1, #1
 800352e:	fb0c f505 	mul.w	r5, ip, r5
 8003532:	d1f8      	bne.n	8003526 <forward_round+0x56>
 8003534:	0880      	lsrs	r0, r0, #2
 8003536:	d00d      	beq.n	8003554 <forward_round+0x84>
 8003538:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 800353c:	3910      	subs	r1, #16
 800353e:	68ca      	ldr	r2, [r1, #12]
 8003540:	688e      	ldr	r6, [r1, #8]
 8003542:	684f      	ldr	r7, [r1, #4]
 8003544:	4372      	muls	r2, r6
 8003546:	f851 6910 	ldr.w	r6, [r1], #-16
 800354a:	437a      	muls	r2, r7
 800354c:	4372      	muls	r2, r6
 800354e:	4355      	muls	r5, r2
 8003550:	1e40      	subs	r0, r0, #1
 8003552:	d1f4      	bne.n	800353e <forward_round+0x6e>
 8003554:	6998      	ldr	r0, [r3, #24]
 8003556:	6886      	ldr	r6, [r0, #8]
 8003558:	6821      	ldr	r1, [r4, #0]
 800355a:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 800355e:	1f07      	subs	r7, r0, #4
 8003560:	6888      	ldr	r0, [r1, #8]
 8003562:	eb00 0285 	add.w	r2, r0, r5, lsl #2
 8003566:	1f14      	subs	r4, r2, #4
 8003568:	42b7      	cmp	r7, r6
 800356a:	d309      	bcc.n	8003580 <forward_round+0xb0>
 800356c:	ed97 0a00 	vldr	s0, [r7]
 8003570:	f008 f95a 	bl	800b828 <roundf>
 8003574:	ed84 0a00 	vstr	s0, [r4]
 8003578:	1f3f      	subs	r7, r7, #4
 800357a:	1f24      	subs	r4, r4, #4
 800357c:	42b7      	cmp	r7, r6
 800357e:	d2f5      	bcs.n	800356c <forward_round+0x9c>
 8003580:	b001      	add	sp, #4
 8003582:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003584 <nl_func_neg_array_f32>:
 8003584:	6889      	ldr	r1, [r1, #8]
 8003586:	6880      	ldr	r0, [r0, #8]
 8003588:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 800358c:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8003590:	1f1b      	subs	r3, r3, #4
 8003592:	1f12      	subs	r2, r2, #4
 8003594:	428b      	cmp	r3, r1
 8003596:	d32b      	bcc.n	80035f0 <nl_func_neg_array_f32+0x6c>
 8003598:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 800359c:	edd3 0a00 	vldr	s1, [r3]
 80035a0:	1f18      	subs	r0, r3, #4
 80035a2:	ee60 0a80 	vmul.f32	s1, s1, s0
 80035a6:	4288      	cmp	r0, r1
 80035a8:	edc2 0a00 	vstr	s1, [r2]
 80035ac:	d320      	bcc.n	80035f0 <nl_func_neg_array_f32+0x6c>
 80035ae:	ed90 1a00 	vldr	s2, [r0]
 80035b2:	1f13      	subs	r3, r2, #4
 80035b4:	1f00      	subs	r0, r0, #4
 80035b6:	ee21 1a00 	vmul.f32	s2, s2, s0
 80035ba:	4288      	cmp	r0, r1
 80035bc:	ed83 1a00 	vstr	s2, [r3]
 80035c0:	d316      	bcc.n	80035f0 <nl_func_neg_array_f32+0x6c>
 80035c2:	edd0 0a00 	vldr	s1, [r0]
 80035c6:	f1a2 0308 	sub.w	r3, r2, #8
 80035ca:	1f00      	subs	r0, r0, #4
 80035cc:	ee60 0a80 	vmul.f32	s1, s1, s0
 80035d0:	4288      	cmp	r0, r1
 80035d2:	edc3 0a00 	vstr	s1, [r3]
 80035d6:	d30b      	bcc.n	80035f0 <nl_func_neg_array_f32+0x6c>
 80035d8:	ed90 1a00 	vldr	s2, [r0]
 80035dc:	f1a2 030c 	sub.w	r3, r2, #12
 80035e0:	ee61 0a00 	vmul.f32	s1, s2, s0
 80035e4:	edc3 0a00 	vstr	s1, [r3]
 80035e8:	1f03      	subs	r3, r0, #4
 80035ea:	3a10      	subs	r2, #16
 80035ec:	428b      	cmp	r3, r1
 80035ee:	d2d5      	bcs.n	800359c <nl_func_neg_array_f32+0x18>
 80035f0:	4770      	bx	lr
	...

080035f4 <forward_neg>:
 80035f4:	b4f0      	push	{r4, r5, r6, r7}
 80035f6:	6942      	ldr	r2, [r0, #20]
 80035f8:	8811      	ldrh	r1, [r2, #0]
 80035fa:	2900      	cmp	r1, #0
 80035fc:	bf1a      	itte	ne
 80035fe:	6850      	ldrne	r0, [r2, #4]
 8003600:	1d00      	addne	r0, r0, #4
 8003602:	2004      	moveq	r0, #4
 8003604:	f04f 0501 	mov.w	r5, #1
 8003608:	6800      	ldr	r0, [r0, #0]
 800360a:	2800      	cmp	r0, #0
 800360c:	bf14      	ite	ne
 800360e:	6803      	ldrne	r3, [r0, #0]
 8003610:	2300      	moveq	r3, #0
 8003612:	2902      	cmp	r1, #2
 8003614:	bfa6      	itte	ge
 8003616:	6850      	ldrge	r0, [r2, #4]
 8003618:	3010      	addge	r0, #16
 800361a:	2004      	movlt	r0, #4
 800361c:	6800      	ldr	r0, [r0, #0]
 800361e:	2800      	cmp	r0, #0
 8003620:	bf19      	ittee	ne
 8003622:	6800      	ldrne	r0, [r0, #0]
 8003624:	f100 0418 	addne.w	r4, r0, #24
 8003628:	2100      	moveq	r1, #0
 800362a:	f101 0418 	addeq.w	r4, r1, #24
 800362e:	f103 0108 	add.w	r1, r3, #8
 8003632:	680a      	ldr	r2, [r1, #0]
 8003634:	0a12      	lsrs	r2, r2, #8
 8003636:	d01e      	beq.n	8003676 <forward_neg+0x82>
 8003638:	684e      	ldr	r6, [r1, #4]
 800363a:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 800363e:	4610      	mov	r0, r2
 8003640:	1f0f      	subs	r7, r1, #4
 8003642:	f010 0103 	ands.w	r1, r0, #3
 8003646:	d006      	beq.n	8003656 <forward_neg+0x62>
 8003648:	1e52      	subs	r2, r2, #1
 800364a:	f857 c904 	ldr.w	ip, [r7], #-4
 800364e:	1e49      	subs	r1, r1, #1
 8003650:	fb0c f505 	mul.w	r5, ip, r5
 8003654:	d1f8      	bne.n	8003648 <forward_neg+0x54>
 8003656:	0880      	lsrs	r0, r0, #2
 8003658:	d00d      	beq.n	8003676 <forward_neg+0x82>
 800365a:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 800365e:	3910      	subs	r1, #16
 8003660:	68ca      	ldr	r2, [r1, #12]
 8003662:	688e      	ldr	r6, [r1, #8]
 8003664:	684f      	ldr	r7, [r1, #4]
 8003666:	4372      	muls	r2, r6
 8003668:	f851 6910 	ldr.w	r6, [r1], #-16
 800366c:	437a      	muls	r2, r7
 800366e:	4372      	muls	r2, r6
 8003670:	4355      	muls	r5, r2
 8003672:	1e40      	subs	r0, r0, #1
 8003674:	d1f4      	bne.n	8003660 <forward_neg+0x6c>
 8003676:	6998      	ldr	r0, [r3, #24]
 8003678:	6822      	ldr	r2, [r4, #0]
 800367a:	6880      	ldr	r0, [r0, #8]
 800367c:	6893      	ldr	r3, [r2, #8]
 800367e:	eb00 0185 	add.w	r1, r0, r5, lsl #2
 8003682:	eb03 0485 	add.w	r4, r3, r5, lsl #2
 8003686:	1f09      	subs	r1, r1, #4
 8003688:	1f22      	subs	r2, r4, #4
 800368a:	4281      	cmp	r1, r0
 800368c:	f0c0 802c 	bcc.w	80036e8 <forward_neg+0xf4>
 8003690:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 8003694:	edd1 0a00 	vldr	s1, [r1]
 8003698:	1f09      	subs	r1, r1, #4
 800369a:	ee60 0a80 	vmul.f32	s1, s1, s0
 800369e:	4281      	cmp	r1, r0
 80036a0:	edc2 0a00 	vstr	s1, [r2]
 80036a4:	d320      	bcc.n	80036e8 <forward_neg+0xf4>
 80036a6:	ed91 1a00 	vldr	s2, [r1]
 80036aa:	1f13      	subs	r3, r2, #4
 80036ac:	1f09      	subs	r1, r1, #4
 80036ae:	ee21 1a00 	vmul.f32	s2, s2, s0
 80036b2:	4281      	cmp	r1, r0
 80036b4:	ed83 1a00 	vstr	s2, [r3]
 80036b8:	d316      	bcc.n	80036e8 <forward_neg+0xf4>
 80036ba:	edd1 0a00 	vldr	s1, [r1]
 80036be:	f1a2 0308 	sub.w	r3, r2, #8
 80036c2:	1f09      	subs	r1, r1, #4
 80036c4:	ee60 0a80 	vmul.f32	s1, s1, s0
 80036c8:	4281      	cmp	r1, r0
 80036ca:	edc3 0a00 	vstr	s1, [r3]
 80036ce:	d30b      	bcc.n	80036e8 <forward_neg+0xf4>
 80036d0:	ed91 1a00 	vldr	s2, [r1]
 80036d4:	f1a2 030c 	sub.w	r3, r2, #12
 80036d8:	1f09      	subs	r1, r1, #4
 80036da:	3a10      	subs	r2, #16
 80036dc:	ee61 0a00 	vmul.f32	s1, s2, s0
 80036e0:	4281      	cmp	r1, r0
 80036e2:	edc3 0a00 	vstr	s1, [r3]
 80036e6:	d2d5      	bcs.n	8003694 <forward_neg+0xa0>
 80036e8:	bcf0      	pop	{r4, r5, r6, r7}
 80036ea:	4770      	bx	lr

080036ec <nl_func_reciprocal_array_f32>:
 80036ec:	6889      	ldr	r1, [r1, #8]
 80036ee:	6880      	ldr	r0, [r0, #8]
 80036f0:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 80036f4:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80036f8:	1f1b      	subs	r3, r3, #4
 80036fa:	1f12      	subs	r2, r2, #4
 80036fc:	428b      	cmp	r3, r1
 80036fe:	d331      	bcc.n	8003764 <nl_func_reciprocal_array_f32+0x78>
 8003700:	ed93 0a00 	vldr	s0, [r3]
 8003704:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8003708:	1f18      	subs	r0, r3, #4
 800370a:	ee80 0a80 	vdiv.f32	s0, s1, s0
 800370e:	4288      	cmp	r0, r1
 8003710:	ed82 0a00 	vstr	s0, [r2]
 8003714:	d326      	bcc.n	8003764 <nl_func_reciprocal_array_f32+0x78>
 8003716:	edd0 0a00 	vldr	s1, [r0]
 800371a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800371e:	1f13      	subs	r3, r2, #4
 8003720:	1f00      	subs	r0, r0, #4
 8003722:	ee80 0a20 	vdiv.f32	s0, s0, s1
 8003726:	4288      	cmp	r0, r1
 8003728:	ed83 0a00 	vstr	s0, [r3]
 800372c:	d31a      	bcc.n	8003764 <nl_func_reciprocal_array_f32+0x78>
 800372e:	ed90 0a00 	vldr	s0, [r0]
 8003732:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8003736:	f1a2 0308 	sub.w	r3, r2, #8
 800373a:	1f00      	subs	r0, r0, #4
 800373c:	ee80 0a80 	vdiv.f32	s0, s1, s0
 8003740:	4288      	cmp	r0, r1
 8003742:	ed83 0a00 	vstr	s0, [r3]
 8003746:	d30d      	bcc.n	8003764 <nl_func_reciprocal_array_f32+0x78>
 8003748:	edd0 0a00 	vldr	s1, [r0]
 800374c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8003750:	f1a2 030c 	sub.w	r3, r2, #12
 8003754:	ee80 0a20 	vdiv.f32	s0, s0, s1
 8003758:	ed83 0a00 	vstr	s0, [r3]
 800375c:	1f03      	subs	r3, r0, #4
 800375e:	3a10      	subs	r2, #16
 8003760:	428b      	cmp	r3, r1
 8003762:	d2cd      	bcs.n	8003700 <nl_func_reciprocal_array_f32+0x14>
 8003764:	4770      	bx	lr
	...

08003768 <forward_reciprocal>:
 8003768:	b4f0      	push	{r4, r5, r6, r7}
 800376a:	6942      	ldr	r2, [r0, #20]
 800376c:	8811      	ldrh	r1, [r2, #0]
 800376e:	2900      	cmp	r1, #0
 8003770:	bf1a      	itte	ne
 8003772:	6850      	ldrne	r0, [r2, #4]
 8003774:	1d00      	addne	r0, r0, #4
 8003776:	2004      	moveq	r0, #4
 8003778:	f04f 0501 	mov.w	r5, #1
 800377c:	6800      	ldr	r0, [r0, #0]
 800377e:	2800      	cmp	r0, #0
 8003780:	bf14      	ite	ne
 8003782:	6803      	ldrne	r3, [r0, #0]
 8003784:	2300      	moveq	r3, #0
 8003786:	2902      	cmp	r1, #2
 8003788:	bfa6      	itte	ge
 800378a:	6850      	ldrge	r0, [r2, #4]
 800378c:	3010      	addge	r0, #16
 800378e:	2004      	movlt	r0, #4
 8003790:	6800      	ldr	r0, [r0, #0]
 8003792:	2800      	cmp	r0, #0
 8003794:	bf19      	ittee	ne
 8003796:	6800      	ldrne	r0, [r0, #0]
 8003798:	f100 0418 	addne.w	r4, r0, #24
 800379c:	2100      	moveq	r1, #0
 800379e:	f101 0418 	addeq.w	r4, r1, #24
 80037a2:	f103 0108 	add.w	r1, r3, #8
 80037a6:	680a      	ldr	r2, [r1, #0]
 80037a8:	0a12      	lsrs	r2, r2, #8
 80037aa:	d01e      	beq.n	80037ea <forward_reciprocal+0x82>
 80037ac:	684e      	ldr	r6, [r1, #4]
 80037ae:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 80037b2:	4610      	mov	r0, r2
 80037b4:	1f0f      	subs	r7, r1, #4
 80037b6:	f010 0103 	ands.w	r1, r0, #3
 80037ba:	d006      	beq.n	80037ca <forward_reciprocal+0x62>
 80037bc:	1e52      	subs	r2, r2, #1
 80037be:	f857 c904 	ldr.w	ip, [r7], #-4
 80037c2:	1e49      	subs	r1, r1, #1
 80037c4:	fb0c f505 	mul.w	r5, ip, r5
 80037c8:	d1f8      	bne.n	80037bc <forward_reciprocal+0x54>
 80037ca:	0880      	lsrs	r0, r0, #2
 80037cc:	d00d      	beq.n	80037ea <forward_reciprocal+0x82>
 80037ce:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 80037d2:	3910      	subs	r1, #16
 80037d4:	68ca      	ldr	r2, [r1, #12]
 80037d6:	688e      	ldr	r6, [r1, #8]
 80037d8:	684f      	ldr	r7, [r1, #4]
 80037da:	4372      	muls	r2, r6
 80037dc:	f851 6910 	ldr.w	r6, [r1], #-16
 80037e0:	437a      	muls	r2, r7
 80037e2:	4372      	muls	r2, r6
 80037e4:	4355      	muls	r5, r2
 80037e6:	1e40      	subs	r0, r0, #1
 80037e8:	d1f4      	bne.n	80037d4 <forward_reciprocal+0x6c>
 80037ea:	6998      	ldr	r0, [r3, #24]
 80037ec:	6822      	ldr	r2, [r4, #0]
 80037ee:	6880      	ldr	r0, [r0, #8]
 80037f0:	6893      	ldr	r3, [r2, #8]
 80037f2:	eb00 0185 	add.w	r1, r0, r5, lsl #2
 80037f6:	eb03 0485 	add.w	r4, r3, r5, lsl #2
 80037fa:	1f09      	subs	r1, r1, #4
 80037fc:	1f22      	subs	r2, r4, #4
 80037fe:	4281      	cmp	r1, r0
 8003800:	f0c0 8032 	bcc.w	8003868 <forward_reciprocal+0x100>
 8003804:	ed91 0a00 	vldr	s0, [r1]
 8003808:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 800380c:	1f09      	subs	r1, r1, #4
 800380e:	ee80 0a80 	vdiv.f32	s0, s1, s0
 8003812:	4281      	cmp	r1, r0
 8003814:	ed82 0a00 	vstr	s0, [r2]
 8003818:	d326      	bcc.n	8003868 <forward_reciprocal+0x100>
 800381a:	edd1 0a00 	vldr	s1, [r1]
 800381e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8003822:	1f13      	subs	r3, r2, #4
 8003824:	1f09      	subs	r1, r1, #4
 8003826:	ee80 0a20 	vdiv.f32	s0, s0, s1
 800382a:	4281      	cmp	r1, r0
 800382c:	ed83 0a00 	vstr	s0, [r3]
 8003830:	d31a      	bcc.n	8003868 <forward_reciprocal+0x100>
 8003832:	ed91 0a00 	vldr	s0, [r1]
 8003836:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 800383a:	f1a2 0308 	sub.w	r3, r2, #8
 800383e:	1f09      	subs	r1, r1, #4
 8003840:	ee80 0a80 	vdiv.f32	s0, s1, s0
 8003844:	4281      	cmp	r1, r0
 8003846:	ed83 0a00 	vstr	s0, [r3]
 800384a:	d30d      	bcc.n	8003868 <forward_reciprocal+0x100>
 800384c:	edd1 0a00 	vldr	s1, [r1]
 8003850:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8003854:	f1a2 030c 	sub.w	r3, r2, #12
 8003858:	1f09      	subs	r1, r1, #4
 800385a:	3a10      	subs	r2, #16
 800385c:	ee80 0a20 	vdiv.f32	s0, s0, s1
 8003860:	4281      	cmp	r1, r0
 8003862:	ed83 0a00 	vstr	s0, [r3]
 8003866:	d2cd      	bcs.n	8003804 <forward_reciprocal+0x9c>
 8003868:	bcf0      	pop	{r4, r5, r6, r7}
 800386a:	4770      	bx	lr

0800386c <nl_func_exp_array_f32>:
 800386c:	b570      	push	{r4, r5, r6, lr}
 800386e:	688c      	ldr	r4, [r1, #8]
 8003870:	6880      	ldr	r0, [r0, #8]
 8003872:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 8003876:	1f0d      	subs	r5, r1, #4
 8003878:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 800387c:	1f0e      	subs	r6, r1, #4
 800387e:	42a5      	cmp	r5, r4
 8003880:	f0c0 800a 	bcc.w	8003898 <nl_func_exp_array_f32+0x2c>
 8003884:	ed95 0a00 	vldr	s0, [r5]
 8003888:	f008 fa84 	bl	800bd94 <expf>
 800388c:	ed86 0a00 	vstr	s0, [r6]
 8003890:	1f2d      	subs	r5, r5, #4
 8003892:	1f36      	subs	r6, r6, #4
 8003894:	42a5      	cmp	r5, r4
 8003896:	d2f5      	bcs.n	8003884 <nl_func_exp_array_f32+0x18>
 8003898:	bd70      	pop	{r4, r5, r6, pc}
	...

0800389c <forward_exp>:
 800389c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800389e:	b081      	sub	sp, #4
 80038a0:	6942      	ldr	r2, [r0, #20]
 80038a2:	8811      	ldrh	r1, [r2, #0]
 80038a4:	2900      	cmp	r1, #0
 80038a6:	bf1a      	itte	ne
 80038a8:	6850      	ldrne	r0, [r2, #4]
 80038aa:	1d00      	addne	r0, r0, #4
 80038ac:	2004      	moveq	r0, #4
 80038ae:	f04f 0501 	mov.w	r5, #1
 80038b2:	6800      	ldr	r0, [r0, #0]
 80038b4:	2800      	cmp	r0, #0
 80038b6:	bf14      	ite	ne
 80038b8:	6803      	ldrne	r3, [r0, #0]
 80038ba:	2300      	moveq	r3, #0
 80038bc:	2902      	cmp	r1, #2
 80038be:	bfa6      	itte	ge
 80038c0:	6850      	ldrge	r0, [r2, #4]
 80038c2:	3010      	addge	r0, #16
 80038c4:	2004      	movlt	r0, #4
 80038c6:	6800      	ldr	r0, [r0, #0]
 80038c8:	2800      	cmp	r0, #0
 80038ca:	bf19      	ittee	ne
 80038cc:	6800      	ldrne	r0, [r0, #0]
 80038ce:	f100 0418 	addne.w	r4, r0, #24
 80038d2:	2100      	moveq	r1, #0
 80038d4:	f101 0418 	addeq.w	r4, r1, #24
 80038d8:	f103 0108 	add.w	r1, r3, #8
 80038dc:	680a      	ldr	r2, [r1, #0]
 80038de:	0a12      	lsrs	r2, r2, #8
 80038e0:	d01e      	beq.n	8003920 <forward_exp+0x84>
 80038e2:	684e      	ldr	r6, [r1, #4]
 80038e4:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 80038e8:	4610      	mov	r0, r2
 80038ea:	1f0f      	subs	r7, r1, #4
 80038ec:	f010 0103 	ands.w	r1, r0, #3
 80038f0:	d006      	beq.n	8003900 <forward_exp+0x64>
 80038f2:	1e52      	subs	r2, r2, #1
 80038f4:	f857 c904 	ldr.w	ip, [r7], #-4
 80038f8:	1e49      	subs	r1, r1, #1
 80038fa:	fb0c f505 	mul.w	r5, ip, r5
 80038fe:	d1f8      	bne.n	80038f2 <forward_exp+0x56>
 8003900:	0880      	lsrs	r0, r0, #2
 8003902:	d00d      	beq.n	8003920 <forward_exp+0x84>
 8003904:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003908:	3910      	subs	r1, #16
 800390a:	68ca      	ldr	r2, [r1, #12]
 800390c:	688e      	ldr	r6, [r1, #8]
 800390e:	684f      	ldr	r7, [r1, #4]
 8003910:	4372      	muls	r2, r6
 8003912:	f851 6910 	ldr.w	r6, [r1], #-16
 8003916:	437a      	muls	r2, r7
 8003918:	4372      	muls	r2, r6
 800391a:	4355      	muls	r5, r2
 800391c:	1e40      	subs	r0, r0, #1
 800391e:	d1f4      	bne.n	800390a <forward_exp+0x6e>
 8003920:	6998      	ldr	r0, [r3, #24]
 8003922:	6886      	ldr	r6, [r0, #8]
 8003924:	6821      	ldr	r1, [r4, #0]
 8003926:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 800392a:	1f07      	subs	r7, r0, #4
 800392c:	6888      	ldr	r0, [r1, #8]
 800392e:	eb00 0285 	add.w	r2, r0, r5, lsl #2
 8003932:	1f14      	subs	r4, r2, #4
 8003934:	42b7      	cmp	r7, r6
 8003936:	d309      	bcc.n	800394c <forward_exp+0xb0>
 8003938:	ed97 0a00 	vldr	s0, [r7]
 800393c:	f008 fa2a 	bl	800bd94 <expf>
 8003940:	ed84 0a00 	vstr	s0, [r4]
 8003944:	1f3f      	subs	r7, r7, #4
 8003946:	1f24      	subs	r4, r4, #4
 8003948:	42b7      	cmp	r7, r6
 800394a:	d2f5      	bcs.n	8003938 <forward_exp+0x9c>
 800394c:	b001      	add	sp, #4
 800394e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003950 <nl_func_sigmoid_array_f32>:
 8003950:	b570      	push	{r4, r5, r6, lr}
 8003952:	688c      	ldr	r4, [r1, #8]
 8003954:	6880      	ldr	r0, [r0, #8]
 8003956:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 800395a:	1f0d      	subs	r5, r1, #4
 800395c:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 8003960:	1f0e      	subs	r6, r1, #4
 8003962:	42a5      	cmp	r5, r4
 8003964:	f0c0 8014 	bcc.w	8003990 <nl_func_sigmoid_array_f32+0x40>
 8003968:	ed95 0a00 	vldr	s0, [r5]
 800396c:	eeb1 0a40 	vneg.f32	s0, s0
 8003970:	f008 fa10 	bl	800bd94 <expf>
 8003974:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8003978:	ee70 0a20 	vadd.f32	s1, s0, s1
 800397c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8003980:	ee80 0a20 	vdiv.f32	s0, s0, s1
 8003984:	ed86 0a00 	vstr	s0, [r6]
 8003988:	1f2d      	subs	r5, r5, #4
 800398a:	1f36      	subs	r6, r6, #4
 800398c:	42a5      	cmp	r5, r4
 800398e:	d2eb      	bcs.n	8003968 <nl_func_sigmoid_array_f32+0x18>
 8003990:	bd70      	pop	{r4, r5, r6, pc}
	...

08003994 <forward_sigmoid>:
 8003994:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003996:	b081      	sub	sp, #4
 8003998:	6942      	ldr	r2, [r0, #20]
 800399a:	8811      	ldrh	r1, [r2, #0]
 800399c:	2900      	cmp	r1, #0
 800399e:	bf1a      	itte	ne
 80039a0:	6850      	ldrne	r0, [r2, #4]
 80039a2:	1d00      	addne	r0, r0, #4
 80039a4:	2004      	moveq	r0, #4
 80039a6:	f04f 0501 	mov.w	r5, #1
 80039aa:	6800      	ldr	r0, [r0, #0]
 80039ac:	2800      	cmp	r0, #0
 80039ae:	bf14      	ite	ne
 80039b0:	6803      	ldrne	r3, [r0, #0]
 80039b2:	2300      	moveq	r3, #0
 80039b4:	2902      	cmp	r1, #2
 80039b6:	bfa6      	itte	ge
 80039b8:	6850      	ldrge	r0, [r2, #4]
 80039ba:	3010      	addge	r0, #16
 80039bc:	2004      	movlt	r0, #4
 80039be:	6800      	ldr	r0, [r0, #0]
 80039c0:	2800      	cmp	r0, #0
 80039c2:	bf19      	ittee	ne
 80039c4:	6800      	ldrne	r0, [r0, #0]
 80039c6:	f100 0418 	addne.w	r4, r0, #24
 80039ca:	2100      	moveq	r1, #0
 80039cc:	f101 0418 	addeq.w	r4, r1, #24
 80039d0:	f103 0108 	add.w	r1, r3, #8
 80039d4:	680a      	ldr	r2, [r1, #0]
 80039d6:	0a12      	lsrs	r2, r2, #8
 80039d8:	d01e      	beq.n	8003a18 <forward_sigmoid+0x84>
 80039da:	684e      	ldr	r6, [r1, #4]
 80039dc:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 80039e0:	4610      	mov	r0, r2
 80039e2:	1f0f      	subs	r7, r1, #4
 80039e4:	f010 0103 	ands.w	r1, r0, #3
 80039e8:	d006      	beq.n	80039f8 <forward_sigmoid+0x64>
 80039ea:	1e52      	subs	r2, r2, #1
 80039ec:	f857 c904 	ldr.w	ip, [r7], #-4
 80039f0:	1e49      	subs	r1, r1, #1
 80039f2:	fb0c f505 	mul.w	r5, ip, r5
 80039f6:	d1f8      	bne.n	80039ea <forward_sigmoid+0x56>
 80039f8:	0880      	lsrs	r0, r0, #2
 80039fa:	d00d      	beq.n	8003a18 <forward_sigmoid+0x84>
 80039fc:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003a00:	3910      	subs	r1, #16
 8003a02:	68ca      	ldr	r2, [r1, #12]
 8003a04:	688e      	ldr	r6, [r1, #8]
 8003a06:	684f      	ldr	r7, [r1, #4]
 8003a08:	4372      	muls	r2, r6
 8003a0a:	f851 6910 	ldr.w	r6, [r1], #-16
 8003a0e:	437a      	muls	r2, r7
 8003a10:	4372      	muls	r2, r6
 8003a12:	4355      	muls	r5, r2
 8003a14:	1e40      	subs	r0, r0, #1
 8003a16:	d1f4      	bne.n	8003a02 <forward_sigmoid+0x6e>
 8003a18:	6998      	ldr	r0, [r3, #24]
 8003a1a:	6886      	ldr	r6, [r0, #8]
 8003a1c:	6821      	ldr	r1, [r4, #0]
 8003a1e:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 8003a22:	1f07      	subs	r7, r0, #4
 8003a24:	6888      	ldr	r0, [r1, #8]
 8003a26:	eb00 0285 	add.w	r2, r0, r5, lsl #2
 8003a2a:	1f14      	subs	r4, r2, #4
 8003a2c:	42b7      	cmp	r7, r6
 8003a2e:	d313      	bcc.n	8003a58 <forward_sigmoid+0xc4>
 8003a30:	ed97 0a00 	vldr	s0, [r7]
 8003a34:	eeb1 0a40 	vneg.f32	s0, s0
 8003a38:	f008 f9ac 	bl	800bd94 <expf>
 8003a3c:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8003a40:	ee70 0a20 	vadd.f32	s1, s0, s1
 8003a44:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8003a48:	ee80 0a20 	vdiv.f32	s0, s0, s1
 8003a4c:	ed84 0a00 	vstr	s0, [r4]
 8003a50:	1f3f      	subs	r7, r7, #4
 8003a52:	1f24      	subs	r4, r4, #4
 8003a54:	42b7      	cmp	r7, r6
 8003a56:	d2eb      	bcs.n	8003a30 <forward_sigmoid+0x9c>
 8003a58:	b001      	add	sp, #4
 8003a5a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003a5c <nl_func_sign_array_f32>:
 8003a5c:	6889      	ldr	r1, [r1, #8]
 8003a5e:	6880      	ldr	r0, [r0, #8]
 8003a60:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 8003a64:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8003a68:	1f1b      	subs	r3, r3, #4
 8003a6a:	1f10      	subs	r0, r2, #4
 8003a6c:	428b      	cmp	r3, r1
 8003a6e:	d314      	bcc.n	8003a9a <nl_func_sign_array_f32+0x3e>
 8003a70:	f04f 32ff 	mov.w	r2, #4294967295
 8003a74:	ed93 0a00 	vldr	s0, [r3]
 8003a78:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8003a7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a80:	bfcc      	ite	gt
 8003a82:	ed9f 0a39 	vldrgt	s0, [pc, #228]	; 8003b68 <.text_49>
 8003a86:	ee00 2a10 	vmovle	s0, r2
 8003a8a:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8003a8e:	ed80 0a00 	vstr	s0, [r0]
 8003a92:	1f1b      	subs	r3, r3, #4
 8003a94:	1f00      	subs	r0, r0, #4
 8003a96:	428b      	cmp	r3, r1
 8003a98:	d2ec      	bcs.n	8003a74 <nl_func_sign_array_f32+0x18>
 8003a9a:	4770      	bx	lr

08003a9c <forward_sign>:
 8003a9c:	b4f0      	push	{r4, r5, r6, r7}
 8003a9e:	6942      	ldr	r2, [r0, #20]
 8003aa0:	8811      	ldrh	r1, [r2, #0]
 8003aa2:	2900      	cmp	r1, #0
 8003aa4:	bf1a      	itte	ne
 8003aa6:	6850      	ldrne	r0, [r2, #4]
 8003aa8:	1d00      	addne	r0, r0, #4
 8003aaa:	2004      	moveq	r0, #4
 8003aac:	f04f 0501 	mov.w	r5, #1
 8003ab0:	6800      	ldr	r0, [r0, #0]
 8003ab2:	2800      	cmp	r0, #0
 8003ab4:	bf14      	ite	ne
 8003ab6:	6803      	ldrne	r3, [r0, #0]
 8003ab8:	2300      	moveq	r3, #0
 8003aba:	2901      	cmp	r1, #1
 8003abc:	bfc6      	itte	gt
 8003abe:	6850      	ldrgt	r0, [r2, #4]
 8003ac0:	3010      	addgt	r0, #16
 8003ac2:	2004      	movle	r0, #4
 8003ac4:	6800      	ldr	r0, [r0, #0]
 8003ac6:	2800      	cmp	r0, #0
 8003ac8:	bf19      	ittee	ne
 8003aca:	6800      	ldrne	r0, [r0, #0]
 8003acc:	f100 0418 	addne.w	r4, r0, #24
 8003ad0:	2100      	moveq	r1, #0
 8003ad2:	f101 0418 	addeq.w	r4, r1, #24
 8003ad6:	f103 0108 	add.w	r1, r3, #8
 8003ada:	680a      	ldr	r2, [r1, #0]
 8003adc:	0a12      	lsrs	r2, r2, #8
 8003ade:	d01e      	beq.n	8003b1e <forward_sign+0x82>
 8003ae0:	684e      	ldr	r6, [r1, #4]
 8003ae2:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003ae6:	4610      	mov	r0, r2
 8003ae8:	1f0f      	subs	r7, r1, #4
 8003aea:	f010 0103 	ands.w	r1, r0, #3
 8003aee:	d006      	beq.n	8003afe <forward_sign+0x62>
 8003af0:	1e52      	subs	r2, r2, #1
 8003af2:	f857 c904 	ldr.w	ip, [r7], #-4
 8003af6:	1e49      	subs	r1, r1, #1
 8003af8:	fb0c f505 	mul.w	r5, ip, r5
 8003afc:	d1f8      	bne.n	8003af0 <forward_sign+0x54>
 8003afe:	0880      	lsrs	r0, r0, #2
 8003b00:	d00d      	beq.n	8003b1e <forward_sign+0x82>
 8003b02:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003b06:	3910      	subs	r1, #16
 8003b08:	68ca      	ldr	r2, [r1, #12]
 8003b0a:	688e      	ldr	r6, [r1, #8]
 8003b0c:	684f      	ldr	r7, [r1, #4]
 8003b0e:	4372      	muls	r2, r6
 8003b10:	f851 6910 	ldr.w	r6, [r1], #-16
 8003b14:	437a      	muls	r2, r7
 8003b16:	4372      	muls	r2, r6
 8003b18:	4355      	muls	r5, r2
 8003b1a:	1e40      	subs	r0, r0, #1
 8003b1c:	d1f4      	bne.n	8003b08 <forward_sign+0x6c>
 8003b1e:	6998      	ldr	r0, [r3, #24]
 8003b20:	6822      	ldr	r2, [r4, #0]
 8003b22:	6880      	ldr	r0, [r0, #8]
 8003b24:	6893      	ldr	r3, [r2, #8]
 8003b26:	eb00 0185 	add.w	r1, r0, r5, lsl #2
 8003b2a:	eb03 0485 	add.w	r4, r3, r5, lsl #2
 8003b2e:	1f09      	subs	r1, r1, #4
 8003b30:	1f22      	subs	r2, r4, #4
 8003b32:	4281      	cmp	r1, r0
 8003b34:	f0c0 8015 	bcc.w	8003b62 <forward_sign+0xc6>
 8003b38:	f04f 33ff 	mov.w	r3, #4294967295
 8003b3c:	ed91 0a00 	vldr	s0, [r1]
 8003b40:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8003b44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b48:	bfcc      	ite	gt
 8003b4a:	ed9f 0a07 	vldrgt	s0, [pc, #28]	; 8003b68 <.text_49>
 8003b4e:	ee00 3a10 	vmovle	s0, r3
 8003b52:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8003b56:	ed82 0a00 	vstr	s0, [r2]
 8003b5a:	1f09      	subs	r1, r1, #4
 8003b5c:	1f12      	subs	r2, r2, #4
 8003b5e:	4281      	cmp	r1, r0
 8003b60:	d2ec      	bcs.n	8003b3c <forward_sign+0xa0>
 8003b62:	bcf0      	pop	{r4, r5, r6, r7}
 8003b64:	4770      	bx	lr
	...

08003b68 <.text_49>:
 8003b68:	00000001 	.word	0x00000001

08003b6c <nl_func_sqrt_array_f32>:
 8003b6c:	b570      	push	{r4, r5, r6, lr}
 8003b6e:	460c      	mov	r4, r1
 8003b70:	6880      	ldr	r0, [r0, #8]
 8003b72:	68a1      	ldr	r1, [r4, #8]
 8003b74:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 8003b78:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8003b7c:	1f1d      	subs	r5, r3, #4
 8003b7e:	1f16      	subs	r6, r2, #4
 8003b80:	428d      	cmp	r5, r1
 8003b82:	d30a      	bcc.n	8003b9a <nl_func_sqrt_array_f32+0x2e>
 8003b84:	ed95 0a00 	vldr	s0, [r5]
 8003b88:	f002 fe3a 	bl	8006800 <ai_math_sqrt>
 8003b8c:	ed86 0a00 	vstr	s0, [r6]
 8003b90:	1f2d      	subs	r5, r5, #4
 8003b92:	68a0      	ldr	r0, [r4, #8]
 8003b94:	1f36      	subs	r6, r6, #4
 8003b96:	4285      	cmp	r5, r0
 8003b98:	d2f4      	bcs.n	8003b84 <nl_func_sqrt_array_f32+0x18>
 8003b9a:	bd70      	pop	{r4, r5, r6, pc}

08003b9c <forward_sqrt>:
 8003b9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003b9e:	b081      	sub	sp, #4
 8003ba0:	6942      	ldr	r2, [r0, #20]
 8003ba2:	8811      	ldrh	r1, [r2, #0]
 8003ba4:	2900      	cmp	r1, #0
 8003ba6:	bf1a      	itte	ne
 8003ba8:	6850      	ldrne	r0, [r2, #4]
 8003baa:	1d00      	addne	r0, r0, #4
 8003bac:	2004      	moveq	r0, #4
 8003bae:	f04f 0501 	mov.w	r5, #1
 8003bb2:	6800      	ldr	r0, [r0, #0]
 8003bb4:	2800      	cmp	r0, #0
 8003bb6:	bf14      	ite	ne
 8003bb8:	6803      	ldrne	r3, [r0, #0]
 8003bba:	2300      	moveq	r3, #0
 8003bbc:	2902      	cmp	r1, #2
 8003bbe:	bfa6      	itte	ge
 8003bc0:	6850      	ldrge	r0, [r2, #4]
 8003bc2:	3010      	addge	r0, #16
 8003bc4:	2004      	movlt	r0, #4
 8003bc6:	6800      	ldr	r0, [r0, #0]
 8003bc8:	2800      	cmp	r0, #0
 8003bca:	bf19      	ittee	ne
 8003bcc:	6800      	ldrne	r0, [r0, #0]
 8003bce:	f100 0418 	addne.w	r4, r0, #24
 8003bd2:	2100      	moveq	r1, #0
 8003bd4:	f101 0418 	addeq.w	r4, r1, #24
 8003bd8:	f103 0108 	add.w	r1, r3, #8
 8003bdc:	680a      	ldr	r2, [r1, #0]
 8003bde:	0a12      	lsrs	r2, r2, #8
 8003be0:	d01e      	beq.n	8003c20 <forward_sqrt+0x84>
 8003be2:	684e      	ldr	r6, [r1, #4]
 8003be4:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003be8:	4610      	mov	r0, r2
 8003bea:	1f0f      	subs	r7, r1, #4
 8003bec:	f010 0103 	ands.w	r1, r0, #3
 8003bf0:	d006      	beq.n	8003c00 <forward_sqrt+0x64>
 8003bf2:	1e52      	subs	r2, r2, #1
 8003bf4:	f857 c904 	ldr.w	ip, [r7], #-4
 8003bf8:	1e49      	subs	r1, r1, #1
 8003bfa:	fb0c f505 	mul.w	r5, ip, r5
 8003bfe:	d1f8      	bne.n	8003bf2 <forward_sqrt+0x56>
 8003c00:	0880      	lsrs	r0, r0, #2
 8003c02:	d00d      	beq.n	8003c20 <forward_sqrt+0x84>
 8003c04:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003c08:	3910      	subs	r1, #16
 8003c0a:	68ca      	ldr	r2, [r1, #12]
 8003c0c:	688e      	ldr	r6, [r1, #8]
 8003c0e:	684f      	ldr	r7, [r1, #4]
 8003c10:	4372      	muls	r2, r6
 8003c12:	f851 6910 	ldr.w	r6, [r1], #-16
 8003c16:	437a      	muls	r2, r7
 8003c18:	4372      	muls	r2, r6
 8003c1a:	4355      	muls	r5, r2
 8003c1c:	1e40      	subs	r0, r0, #1
 8003c1e:	d1f4      	bne.n	8003c0a <forward_sqrt+0x6e>
 8003c20:	699e      	ldr	r6, [r3, #24]
 8003c22:	68b0      	ldr	r0, [r6, #8]
 8003c24:	6822      	ldr	r2, [r4, #0]
 8003c26:	eb00 0185 	add.w	r1, r0, r5, lsl #2
 8003c2a:	1f0f      	subs	r7, r1, #4
 8003c2c:	6891      	ldr	r1, [r2, #8]
 8003c2e:	eb01 0385 	add.w	r3, r1, r5, lsl #2
 8003c32:	1f1c      	subs	r4, r3, #4
 8003c34:	4287      	cmp	r7, r0
 8003c36:	d30a      	bcc.n	8003c4e <forward_sqrt+0xb2>
 8003c38:	ed97 0a00 	vldr	s0, [r7]
 8003c3c:	f002 fde0 	bl	8006800 <ai_math_sqrt>
 8003c40:	ed84 0a00 	vstr	s0, [r4]
 8003c44:	1f3f      	subs	r7, r7, #4
 8003c46:	68b0      	ldr	r0, [r6, #8]
 8003c48:	1f24      	subs	r4, r4, #4
 8003c4a:	4287      	cmp	r7, r0
 8003c4c:	d2f4      	bcs.n	8003c38 <forward_sqrt+0x9c>
 8003c4e:	b001      	add	sp, #4
 8003c50:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08003c54 <nl_func_soft_plus_array_f32>:
 8003c54:	b570      	push	{r4, r5, r6, lr}
 8003c56:	688c      	ldr	r4, [r1, #8]
 8003c58:	6880      	ldr	r0, [r0, #8]
 8003c5a:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 8003c5e:	1f0d      	subs	r5, r1, #4
 8003c60:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 8003c64:	1f0e      	subs	r6, r1, #4
 8003c66:	42a5      	cmp	r5, r4
 8003c68:	f0c0 8010 	bcc.w	8003c8c <nl_func_soft_plus_array_f32+0x38>
 8003c6c:	ed95 0a00 	vldr	s0, [r5]
 8003c70:	f008 f890 	bl	800bd94 <expf>
 8003c74:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8003c78:	ee30 0a20 	vadd.f32	s0, s0, s1
 8003c7c:	f008 f960 	bl	800bf40 <logf>
 8003c80:	ed86 0a00 	vstr	s0, [r6]
 8003c84:	1f2d      	subs	r5, r5, #4
 8003c86:	1f36      	subs	r6, r6, #4
 8003c88:	42a5      	cmp	r5, r4
 8003c8a:	d2ef      	bcs.n	8003c6c <nl_func_soft_plus_array_f32+0x18>
 8003c8c:	bd70      	pop	{r4, r5, r6, pc}
	...

08003c90 <forward_soft_plus>:
 8003c90:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003c92:	b081      	sub	sp, #4
 8003c94:	6942      	ldr	r2, [r0, #20]
 8003c96:	8811      	ldrh	r1, [r2, #0]
 8003c98:	2900      	cmp	r1, #0
 8003c9a:	bf1a      	itte	ne
 8003c9c:	6850      	ldrne	r0, [r2, #4]
 8003c9e:	1d00      	addne	r0, r0, #4
 8003ca0:	2004      	moveq	r0, #4
 8003ca2:	f04f 0501 	mov.w	r5, #1
 8003ca6:	6800      	ldr	r0, [r0, #0]
 8003ca8:	2800      	cmp	r0, #0
 8003caa:	bf14      	ite	ne
 8003cac:	6803      	ldrne	r3, [r0, #0]
 8003cae:	2300      	moveq	r3, #0
 8003cb0:	2902      	cmp	r1, #2
 8003cb2:	bfa6      	itte	ge
 8003cb4:	6850      	ldrge	r0, [r2, #4]
 8003cb6:	3010      	addge	r0, #16
 8003cb8:	2004      	movlt	r0, #4
 8003cba:	6800      	ldr	r0, [r0, #0]
 8003cbc:	2800      	cmp	r0, #0
 8003cbe:	bf19      	ittee	ne
 8003cc0:	6800      	ldrne	r0, [r0, #0]
 8003cc2:	f100 0418 	addne.w	r4, r0, #24
 8003cc6:	2100      	moveq	r1, #0
 8003cc8:	f101 0418 	addeq.w	r4, r1, #24
 8003ccc:	f103 0108 	add.w	r1, r3, #8
 8003cd0:	680a      	ldr	r2, [r1, #0]
 8003cd2:	0a12      	lsrs	r2, r2, #8
 8003cd4:	d01e      	beq.n	8003d14 <forward_soft_plus+0x84>
 8003cd6:	684e      	ldr	r6, [r1, #4]
 8003cd8:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003cdc:	4610      	mov	r0, r2
 8003cde:	1f0f      	subs	r7, r1, #4
 8003ce0:	f010 0103 	ands.w	r1, r0, #3
 8003ce4:	d006      	beq.n	8003cf4 <forward_soft_plus+0x64>
 8003ce6:	1e52      	subs	r2, r2, #1
 8003ce8:	f857 c904 	ldr.w	ip, [r7], #-4
 8003cec:	1e49      	subs	r1, r1, #1
 8003cee:	fb0c f505 	mul.w	r5, ip, r5
 8003cf2:	d1f8      	bne.n	8003ce6 <forward_soft_plus+0x56>
 8003cf4:	0880      	lsrs	r0, r0, #2
 8003cf6:	d00d      	beq.n	8003d14 <forward_soft_plus+0x84>
 8003cf8:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003cfc:	3910      	subs	r1, #16
 8003cfe:	68ca      	ldr	r2, [r1, #12]
 8003d00:	688e      	ldr	r6, [r1, #8]
 8003d02:	684f      	ldr	r7, [r1, #4]
 8003d04:	4372      	muls	r2, r6
 8003d06:	f851 6910 	ldr.w	r6, [r1], #-16
 8003d0a:	437a      	muls	r2, r7
 8003d0c:	4372      	muls	r2, r6
 8003d0e:	4355      	muls	r5, r2
 8003d10:	1e40      	subs	r0, r0, #1
 8003d12:	d1f4      	bne.n	8003cfe <forward_soft_plus+0x6e>
 8003d14:	6998      	ldr	r0, [r3, #24]
 8003d16:	6886      	ldr	r6, [r0, #8]
 8003d18:	6821      	ldr	r1, [r4, #0]
 8003d1a:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 8003d1e:	1f07      	subs	r7, r0, #4
 8003d20:	6888      	ldr	r0, [r1, #8]
 8003d22:	eb00 0285 	add.w	r2, r0, r5, lsl #2
 8003d26:	1f14      	subs	r4, r2, #4
 8003d28:	42b7      	cmp	r7, r6
 8003d2a:	d30f      	bcc.n	8003d4c <forward_soft_plus+0xbc>
 8003d2c:	ed97 0a00 	vldr	s0, [r7]
 8003d30:	f008 f830 	bl	800bd94 <expf>
 8003d34:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8003d38:	ee30 0a20 	vadd.f32	s0, s0, s1
 8003d3c:	f008 f900 	bl	800bf40 <logf>
 8003d40:	ed84 0a00 	vstr	s0, [r4]
 8003d44:	1f3f      	subs	r7, r7, #4
 8003d46:	1f24      	subs	r4, r4, #4
 8003d48:	42b7      	cmp	r7, r6
 8003d4a:	d2ef      	bcs.n	8003d2c <forward_soft_plus+0x9c>
 8003d4c:	b001      	add	sp, #4
 8003d4e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003d50 <nl_func_soft_sign_array_f32>:
 8003d50:	6889      	ldr	r1, [r1, #8]
 8003d52:	6880      	ldr	r0, [r0, #8]
 8003d54:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 8003d58:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8003d5c:	1f1b      	subs	r3, r3, #4
 8003d5e:	1f10      	subs	r0, r2, #4
 8003d60:	428b      	cmp	r3, r1
 8003d62:	d30f      	bcc.n	8003d84 <nl_func_soft_sign_array_f32+0x34>
 8003d64:	ed93 0a00 	vldr	s0, [r3]
 8003d68:	eef0 0ac0 	vabs.f32	s1, s0
 8003d6c:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8003d70:	ee70 0a81 	vadd.f32	s1, s1, s2
 8003d74:	ee80 0a20 	vdiv.f32	s0, s0, s1
 8003d78:	ed80 0a00 	vstr	s0, [r0]
 8003d7c:	1f1b      	subs	r3, r3, #4
 8003d7e:	1f00      	subs	r0, r0, #4
 8003d80:	428b      	cmp	r3, r1
 8003d82:	d2ef      	bcs.n	8003d64 <nl_func_soft_sign_array_f32+0x14>
 8003d84:	4770      	bx	lr
	...

08003d88 <forward_soft_sign>:
 8003d88:	b4f0      	push	{r4, r5, r6, r7}
 8003d8a:	6942      	ldr	r2, [r0, #20]
 8003d8c:	8811      	ldrh	r1, [r2, #0]
 8003d8e:	2900      	cmp	r1, #0
 8003d90:	bf1a      	itte	ne
 8003d92:	6850      	ldrne	r0, [r2, #4]
 8003d94:	1d00      	addne	r0, r0, #4
 8003d96:	2004      	moveq	r0, #4
 8003d98:	f04f 0501 	mov.w	r5, #1
 8003d9c:	6800      	ldr	r0, [r0, #0]
 8003d9e:	2800      	cmp	r0, #0
 8003da0:	bf14      	ite	ne
 8003da2:	6803      	ldrne	r3, [r0, #0]
 8003da4:	2300      	moveq	r3, #0
 8003da6:	2902      	cmp	r1, #2
 8003da8:	bfa6      	itte	ge
 8003daa:	6850      	ldrge	r0, [r2, #4]
 8003dac:	3010      	addge	r0, #16
 8003dae:	2004      	movlt	r0, #4
 8003db0:	6800      	ldr	r0, [r0, #0]
 8003db2:	2800      	cmp	r0, #0
 8003db4:	bf19      	ittee	ne
 8003db6:	6800      	ldrne	r0, [r0, #0]
 8003db8:	f100 0418 	addne.w	r4, r0, #24
 8003dbc:	2100      	moveq	r1, #0
 8003dbe:	f101 0418 	addeq.w	r4, r1, #24
 8003dc2:	f103 0108 	add.w	r1, r3, #8
 8003dc6:	680a      	ldr	r2, [r1, #0]
 8003dc8:	0a12      	lsrs	r2, r2, #8
 8003dca:	d01e      	beq.n	8003e0a <forward_soft_sign+0x82>
 8003dcc:	684e      	ldr	r6, [r1, #4]
 8003dce:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003dd2:	4610      	mov	r0, r2
 8003dd4:	1f0f      	subs	r7, r1, #4
 8003dd6:	f010 0103 	ands.w	r1, r0, #3
 8003dda:	d006      	beq.n	8003dea <forward_soft_sign+0x62>
 8003ddc:	1e52      	subs	r2, r2, #1
 8003dde:	f857 c904 	ldr.w	ip, [r7], #-4
 8003de2:	1e49      	subs	r1, r1, #1
 8003de4:	fb0c f505 	mul.w	r5, ip, r5
 8003de8:	d1f8      	bne.n	8003ddc <forward_soft_sign+0x54>
 8003dea:	0880      	lsrs	r0, r0, #2
 8003dec:	d00d      	beq.n	8003e0a <forward_soft_sign+0x82>
 8003dee:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003df2:	3910      	subs	r1, #16
 8003df4:	68ca      	ldr	r2, [r1, #12]
 8003df6:	688e      	ldr	r6, [r1, #8]
 8003df8:	684f      	ldr	r7, [r1, #4]
 8003dfa:	4372      	muls	r2, r6
 8003dfc:	f851 6910 	ldr.w	r6, [r1], #-16
 8003e00:	437a      	muls	r2, r7
 8003e02:	4372      	muls	r2, r6
 8003e04:	4355      	muls	r5, r2
 8003e06:	1e40      	subs	r0, r0, #1
 8003e08:	d1f4      	bne.n	8003df4 <forward_soft_sign+0x6c>
 8003e0a:	6998      	ldr	r0, [r3, #24]
 8003e0c:	6822      	ldr	r2, [r4, #0]
 8003e0e:	6880      	ldr	r0, [r0, #8]
 8003e10:	6893      	ldr	r3, [r2, #8]
 8003e12:	eb00 0185 	add.w	r1, r0, r5, lsl #2
 8003e16:	eb03 0485 	add.w	r4, r3, r5, lsl #2
 8003e1a:	1f09      	subs	r1, r1, #4
 8003e1c:	1f22      	subs	r2, r4, #4
 8003e1e:	4281      	cmp	r1, r0
 8003e20:	f0c0 8010 	bcc.w	8003e44 <forward_soft_sign+0xbc>
 8003e24:	ed91 0a00 	vldr	s0, [r1]
 8003e28:	eef0 0ac0 	vabs.f32	s1, s0
 8003e2c:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8003e30:	ee70 0a81 	vadd.f32	s1, s1, s2
 8003e34:	ee80 0a20 	vdiv.f32	s0, s0, s1
 8003e38:	ed82 0a00 	vstr	s0, [r2]
 8003e3c:	1f09      	subs	r1, r1, #4
 8003e3e:	1f12      	subs	r2, r2, #4
 8003e40:	4281      	cmp	r1, r0
 8003e42:	d2ef      	bcs.n	8003e24 <forward_soft_sign+0x9c>
 8003e44:	bcf0      	pop	{r4, r5, r6, r7}
 8003e46:	4770      	bx	lr

08003e48 <nl_func_tanh_array_f32>:
 8003e48:	b570      	push	{r4, r5, r6, lr}
 8003e4a:	688c      	ldr	r4, [r1, #8]
 8003e4c:	6880      	ldr	r0, [r0, #8]
 8003e4e:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 8003e52:	1f0d      	subs	r5, r1, #4
 8003e54:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 8003e58:	1f0e      	subs	r6, r1, #4
 8003e5a:	42a5      	cmp	r5, r4
 8003e5c:	f0c0 800a 	bcc.w	8003e74 <nl_func_tanh_array_f32+0x2c>
 8003e60:	ed95 0a00 	vldr	s0, [r5]
 8003e64:	f007 fd70 	bl	800b948 <tanhf>
 8003e68:	ed86 0a00 	vstr	s0, [r6]
 8003e6c:	1f2d      	subs	r5, r5, #4
 8003e6e:	1f36      	subs	r6, r6, #4
 8003e70:	42a5      	cmp	r5, r4
 8003e72:	d2f5      	bcs.n	8003e60 <nl_func_tanh_array_f32+0x18>
 8003e74:	bd70      	pop	{r4, r5, r6, pc}
	...

08003e78 <forward_tanh>:
 8003e78:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003e7a:	b081      	sub	sp, #4
 8003e7c:	6942      	ldr	r2, [r0, #20]
 8003e7e:	8811      	ldrh	r1, [r2, #0]
 8003e80:	2900      	cmp	r1, #0
 8003e82:	bf1a      	itte	ne
 8003e84:	6850      	ldrne	r0, [r2, #4]
 8003e86:	1d00      	addne	r0, r0, #4
 8003e88:	2004      	moveq	r0, #4
 8003e8a:	f04f 0501 	mov.w	r5, #1
 8003e8e:	6800      	ldr	r0, [r0, #0]
 8003e90:	2800      	cmp	r0, #0
 8003e92:	bf14      	ite	ne
 8003e94:	6803      	ldrne	r3, [r0, #0]
 8003e96:	2300      	moveq	r3, #0
 8003e98:	2902      	cmp	r1, #2
 8003e9a:	bfa6      	itte	ge
 8003e9c:	6850      	ldrge	r0, [r2, #4]
 8003e9e:	3010      	addge	r0, #16
 8003ea0:	2004      	movlt	r0, #4
 8003ea2:	6800      	ldr	r0, [r0, #0]
 8003ea4:	2800      	cmp	r0, #0
 8003ea6:	bf19      	ittee	ne
 8003ea8:	6800      	ldrne	r0, [r0, #0]
 8003eaa:	f100 0418 	addne.w	r4, r0, #24
 8003eae:	2100      	moveq	r1, #0
 8003eb0:	f101 0418 	addeq.w	r4, r1, #24
 8003eb4:	f103 0108 	add.w	r1, r3, #8
 8003eb8:	680a      	ldr	r2, [r1, #0]
 8003eba:	0a12      	lsrs	r2, r2, #8
 8003ebc:	d01e      	beq.n	8003efc <forward_tanh+0x84>
 8003ebe:	684e      	ldr	r6, [r1, #4]
 8003ec0:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003ec4:	4610      	mov	r0, r2
 8003ec6:	1f0f      	subs	r7, r1, #4
 8003ec8:	f010 0103 	ands.w	r1, r0, #3
 8003ecc:	d006      	beq.n	8003edc <forward_tanh+0x64>
 8003ece:	1e52      	subs	r2, r2, #1
 8003ed0:	f857 c904 	ldr.w	ip, [r7], #-4
 8003ed4:	1e49      	subs	r1, r1, #1
 8003ed6:	fb0c f505 	mul.w	r5, ip, r5
 8003eda:	d1f8      	bne.n	8003ece <forward_tanh+0x56>
 8003edc:	0880      	lsrs	r0, r0, #2
 8003ede:	d00d      	beq.n	8003efc <forward_tanh+0x84>
 8003ee0:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 8003ee4:	3910      	subs	r1, #16
 8003ee6:	68ca      	ldr	r2, [r1, #12]
 8003ee8:	688e      	ldr	r6, [r1, #8]
 8003eea:	684f      	ldr	r7, [r1, #4]
 8003eec:	4372      	muls	r2, r6
 8003eee:	f851 6910 	ldr.w	r6, [r1], #-16
 8003ef2:	437a      	muls	r2, r7
 8003ef4:	4372      	muls	r2, r6
 8003ef6:	4355      	muls	r5, r2
 8003ef8:	1e40      	subs	r0, r0, #1
 8003efa:	d1f4      	bne.n	8003ee6 <forward_tanh+0x6e>
 8003efc:	6998      	ldr	r0, [r3, #24]
 8003efe:	6886      	ldr	r6, [r0, #8]
 8003f00:	6821      	ldr	r1, [r4, #0]
 8003f02:	eb06 0085 	add.w	r0, r6, r5, lsl #2
 8003f06:	1f07      	subs	r7, r0, #4
 8003f08:	6888      	ldr	r0, [r1, #8]
 8003f0a:	eb00 0285 	add.w	r2, r0, r5, lsl #2
 8003f0e:	1f14      	subs	r4, r2, #4
 8003f10:	42b7      	cmp	r7, r6
 8003f12:	d309      	bcc.n	8003f28 <forward_tanh+0xb0>
 8003f14:	ed97 0a00 	vldr	s0, [r7]
 8003f18:	f007 fd16 	bl	800b948 <tanhf>
 8003f1c:	ed84 0a00 	vstr	s0, [r4]
 8003f20:	1f3f      	subs	r7, r7, #4
 8003f22:	1f24      	subs	r4, r4, #4
 8003f24:	42b7      	cmp	r7, r6
 8003f26:	d2f5      	bcs.n	8003f14 <forward_tanh+0x9c>
 8003f28:	b001      	add	sp, #4
 8003f2a:	bdf0      	pop	{r4, r5, r6, r7, pc}

08003f2c <nl_func_relu_array_f32>:
 8003f2c:	6889      	ldr	r1, [r1, #8]
 8003f2e:	6880      	ldr	r0, [r0, #8]
 8003f30:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 8003f34:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8003f38:	1f1b      	subs	r3, r3, #4
 8003f3a:	1f10      	subs	r0, r2, #4
 8003f3c:	428b      	cmp	r3, r1
 8003f3e:	d30e      	bcc.n	8003f5e <nl_func_relu_array_f32+0x32>
 8003f40:	ed93 0a00 	vldr	s0, [r3]
 8003f44:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8003f48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f4c:	bf48      	it	mi
 8003f4e:	ed9f 0a7b 	vldrmi	s0, [pc, #492]	; 800413c <.text_62>
 8003f52:	ed80 0a00 	vstr	s0, [r0]
 8003f56:	1f1b      	subs	r3, r3, #4
 8003f58:	1f00      	subs	r0, r0, #4
 8003f5a:	428b      	cmp	r3, r1
 8003f5c:	d2f0      	bcs.n	8003f40 <nl_func_relu_array_f32+0x14>
 8003f5e:	4770      	bx	lr

08003f60 <nl_func_sm_channel_f32>:
 8003f60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003f64:	ed2d 8b02 	vpush	{d8}
 8003f68:	688f      	ldr	r7, [r1, #8]
 8003f6a:	6886      	ldr	r6, [r0, #8]
 8003f6c:	ed97 8a00 	vldr	s16, [r7]
 8003f70:	4614      	mov	r4, r2
 8003f72:	2c02      	cmp	r4, #2
 8003f74:	eddf 8a71 	vldr	s17, [pc, #452]	; 800413c <.text_62>
 8003f78:	d33d      	bcc.n	8003ff6 <nl_func_sm_channel_f32+0x96>
 8003f7a:	1e61      	subs	r1, r4, #1
 8003f7c:	1d3a      	adds	r2, r7, #4
 8003f7e:	f011 0003 	ands.w	r0, r1, #3
 8003f82:	d00c      	beq.n	8003f9e <nl_func_sm_channel_f32+0x3e>
 8003f84:	ed92 0a00 	vldr	s0, [r2]
 8003f88:	eeb4 0a48 	vcmp.f32	s0, s16
 8003f8c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f90:	bf58      	it	pl
 8003f92:	eeb0 8a40 	vmovpl.f32	s16, s0
 8003f96:	1e40      	subs	r0, r0, #1
 8003f98:	f102 0204 	add.w	r2, r2, #4
 8003f9c:	d1f2      	bne.n	8003f84 <nl_func_sm_channel_f32+0x24>
 8003f9e:	0889      	lsrs	r1, r1, #2
 8003fa0:	f000 802b 	beq.w	8003ffa <nl_func_sm_channel_f32+0x9a>
 8003fa4:	ed92 0a00 	vldr	s0, [r2]
 8003fa8:	eeb4 0a48 	vcmp.f32	s0, s16
 8003fac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fb0:	bf58      	it	pl
 8003fb2:	eeb0 8a40 	vmovpl.f32	s16, s0
 8003fb6:	ed92 0a01 	vldr	s0, [r2, #4]
 8003fba:	eeb4 0a48 	vcmp.f32	s0, s16
 8003fbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fc2:	bf58      	it	pl
 8003fc4:	eeb0 8a40 	vmovpl.f32	s16, s0
 8003fc8:	ed92 0a02 	vldr	s0, [r2, #8]
 8003fcc:	eeb4 0a48 	vcmp.f32	s0, s16
 8003fd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fd4:	bf58      	it	pl
 8003fd6:	eeb0 8a40 	vmovpl.f32	s16, s0
 8003fda:	ed92 0a03 	vldr	s0, [r2, #12]
 8003fde:	eeb4 0a48 	vcmp.f32	s0, s16
 8003fe2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003fe6:	bf58      	it	pl
 8003fe8:	eeb0 8a40 	vmovpl.f32	s16, s0
 8003fec:	1e49      	subs	r1, r1, #1
 8003fee:	f102 0210 	add.w	r2, r2, #16
 8003ff2:	d1d7      	bne.n	8003fa4 <nl_func_sm_channel_f32+0x44>
 8003ff4:	e001      	b.n	8003ffa <nl_func_sm_channel_f32+0x9a>
 8003ff6:	2c00      	cmp	r4, #0
 8003ff8:	d040      	beq.n	800407c <nl_func_sm_channel_f32+0x11c>
 8003ffa:	46b0      	mov	r8, r6
 8003ffc:	ea4f 0504 	mov.w	r5, r4
 8004000:	ed97 0a00 	vldr	s0, [r7]
 8004004:	ee30 0a48 	vsub.f32	s0, s0, s16
 8004008:	f007 fec4 	bl	800bd94 <expf>
 800400c:	1d3f      	adds	r7, r7, #4
 800400e:	ed88 0a00 	vstr	s0, [r8]
 8004012:	1e6d      	subs	r5, r5, #1
 8004014:	ee78 8a80 	vadd.f32	s17, s17, s0
 8004018:	f108 0804 	add.w	r8, r8, #4
 800401c:	d1f0      	bne.n	8004000 <nl_func_sm_channel_f32+0xa0>
 800401e:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8004022:	f014 0003 	ands.w	r0, r4, #3
 8004026:	ee80 0a28 	vdiv.f32	s0, s0, s17
 800402a:	d009      	beq.n	8004040 <nl_func_sm_channel_f32+0xe0>
 800402c:	edd6 0a00 	vldr	s1, [r6]
 8004030:	ee60 0a80 	vmul.f32	s1, s1, s0
 8004034:	edc6 0a00 	vstr	s1, [r6]
 8004038:	1e40      	subs	r0, r0, #1
 800403a:	f106 0604 	add.w	r6, r6, #4
 800403e:	d1f5      	bne.n	800402c <nl_func_sm_channel_f32+0xcc>
 8004040:	08a4      	lsrs	r4, r4, #2
 8004042:	d01b      	beq.n	800407c <nl_func_sm_channel_f32+0x11c>
 8004044:	edd6 0a00 	vldr	s1, [r6]
 8004048:	ee60 0a80 	vmul.f32	s1, s1, s0
 800404c:	edc6 0a00 	vstr	s1, [r6]
 8004050:	1e64      	subs	r4, r4, #1
 8004052:	ed96 1a01 	vldr	s2, [r6, #4]
 8004056:	edd6 0a02 	vldr	s1, [r6, #8]
 800405a:	ee21 1a00 	vmul.f32	s2, s2, s0
 800405e:	ed86 1a01 	vstr	s2, [r6, #4]
 8004062:	ee60 0a80 	vmul.f32	s1, s1, s0
 8004066:	ed96 1a03 	vldr	s2, [r6, #12]
 800406a:	edc6 0a02 	vstr	s1, [r6, #8]
 800406e:	ee21 1a00 	vmul.f32	s2, s2, s0
 8004072:	ed86 1a03 	vstr	s2, [r6, #12]
 8004076:	f106 0610 	add.w	r6, r6, #16
 800407a:	d1e3      	bne.n	8004044 <nl_func_sm_channel_f32+0xe4>
 800407c:	ecbd 8b02 	vpop	{d8}
 8004080:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08004084 <nl_func_sm_array_f32>:
 8004084:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004088:	460d      	mov	r5, r1
 800408a:	4604      	mov	r4, r0
 800408c:	9f08      	ldr	r7, [sp, #32]
 800408e:	68a8      	ldr	r0, [r5, #8]
 8004090:	9e09      	ldr	r6, [sp, #36]	; 0x24
 8004092:	00bf      	lsls	r7, r7, #2
 8004094:	427f      	negs	r7, r7
 8004096:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 800409a:	68a0      	ldr	r0, [r4, #8]
 800409c:	eb01 0a07 	add.w	sl, r1, r7
 80040a0:	00b6      	lsls	r6, r6, #2
 80040a2:	4276      	negs	r6, r6
 80040a4:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 80040a8:	68ea      	ldr	r2, [r5, #12]
 80040aa:	4592      	cmp	sl, r2
 80040ac:	eb01 0906 	add.w	r9, r1, r6
 80040b0:	d30f      	bcc.n	80040d2 <nl_func_sm_array_f32+0x4e>
 80040b2:	4698      	mov	r8, r3
 80040b4:	f8c5 a008 	str.w	sl, [r5, #8]
 80040b8:	f8c4 9008 	str.w	r9, [r4, #8]
 80040bc:	2300      	movs	r3, #0
 80040be:	4642      	mov	r2, r8
 80040c0:	4629      	mov	r1, r5
 80040c2:	4620      	mov	r0, r4
 80040c4:	f7ff ff4c 	bl	8003f60 <nl_func_sm_channel_f32>
 80040c8:	68e8      	ldr	r0, [r5, #12]
 80040ca:	44ba      	add	sl, r7
 80040cc:	4582      	cmp	sl, r0
 80040ce:	44b1      	add	r9, r6
 80040d0:	d2f0      	bcs.n	80040b4 <nl_func_sm_array_f32+0x30>
 80040d2:	68e9      	ldr	r1, [r5, #12]
 80040d4:	60a9      	str	r1, [r5, #8]
 80040d6:	68e0      	ldr	r0, [r4, #12]
 80040d8:	60a0      	str	r0, [r4, #8]
 80040da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

080040e0 <nl_func_hard_sigmoid_array_f32>:
 80040e0:	6889      	ldr	r1, [r1, #8]
 80040e2:	6880      	ldr	r0, [r0, #8]
 80040e4:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 80040e8:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 80040ec:	1f1b      	subs	r3, r3, #4
 80040ee:	1f10      	subs	r0, r2, #4
 80040f0:	428b      	cmp	r3, r1
 80040f2:	d321      	bcc.n	8004138 <nl_func_hard_sigmoid_array_f32+0x58>
 80040f4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80040f8:	eddf 0ab8 	vldr	s1, [pc, #736]	; 80043dc <.text_68>
 80040fc:	edd3 1a00 	vldr	s3, [r3]
 8004100:	ed9f 2ab7 	vldr	s4, [pc, #732]	; 80043e0 <.text_69>
 8004104:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
 8004108:	ee01 1a82 	vmla.f32	s2, s3, s4
 800410c:	eeb4 1a60 	vcmp.f32	s2, s1
 8004110:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004114:	da08      	bge.n	8004128 <nl_func_hard_sigmoid_array_f32+0x48>
 8004116:	eeb5 1a40 	vcmp.f32	s2, #0.0
 800411a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800411e:	d505      	bpl.n	800412c <nl_func_hard_sigmoid_array_f32+0x4c>
 8004120:	ed9f 1a06 	vldr	s2, [pc, #24]	; 800413c <.text_62>
 8004124:	e002      	b.n	800412c <nl_func_hard_sigmoid_array_f32+0x4c>
 8004126:	bf00      	nop
 8004128:	eeb0 1a40 	vmov.f32	s2, s0
 800412c:	ed80 1a00 	vstr	s2, [r0]
 8004130:	1f1b      	subs	r3, r3, #4
 8004132:	1f00      	subs	r0, r0, #4
 8004134:	428b      	cmp	r3, r1
 8004136:	d2e1      	bcs.n	80040fc <nl_func_hard_sigmoid_array_f32+0x1c>
 8004138:	4770      	bx	lr
	...

0800413c <.text_62>:
 800413c:	00000000 	.word	0x00000000

08004140 <nl_func_clip_array_f32>:
 8004140:	6889      	ldr	r1, [r1, #8]
 8004142:	6880      	ldr	r0, [r0, #8]
 8004144:	ed93 0a00 	vldr	s0, [r3]
 8004148:	edd3 0a01 	vldr	s1, [r3, #4]
 800414c:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 8004150:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8004154:	1f1b      	subs	r3, r3, #4
 8004156:	1f10      	subs	r0, r2, #4
 8004158:	428b      	cmp	r3, r1
 800415a:	d315      	bcc.n	8004188 <nl_func_clip_array_f32+0x48>
 800415c:	ed93 1a00 	vldr	s2, [r3]
 8004160:	eeb4 0a41 	vcmp.f32	s0, s2
 8004164:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004168:	bf58      	it	pl
 800416a:	eeb0 1a40 	vmovpl.f32	s2, s0
 800416e:	eeb4 1a60 	vcmp.f32	s2, s1
 8004172:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004176:	bf58      	it	pl
 8004178:	eeb0 1a60 	vmovpl.f32	s2, s1
 800417c:	ed80 1a00 	vstr	s2, [r0]
 8004180:	1f1b      	subs	r3, r3, #4
 8004182:	1f00      	subs	r0, r0, #4
 8004184:	428b      	cmp	r3, r1
 8004186:	d2e9      	bcs.n	800415c <nl_func_clip_array_f32+0x1c>
 8004188:	4770      	bx	lr
	...

0800418c <nl_func_hardmax_array_f32>:
 800418c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004190:	6852      	ldr	r2, [r2, #4]
 8004192:	6855      	ldr	r5, [r2, #4]
 8004194:	68d4      	ldr	r4, [r2, #12]
 8004196:	688e      	ldr	r6, [r1, #8]
 8004198:	f8d0 8008 	ldr.w	r8, [r0, #8]
 800419c:	436c      	muls	r4, r5
 800419e:	00a1      	lsls	r1, r4, #2
 80041a0:	4640      	mov	r0, r8
 80041a2:	f006 fe01 	bl	800ada8 <__aeabi_memclr>
 80041a6:	2200      	movs	r2, #0
 80041a8:	2c00      	cmp	r4, #0
 80041aa:	4633      	mov	r3, r6
 80041ac:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80041b0:	f000 805b 	beq.w	800426a <nl_func_hardmax_array_f32+0xde>
 80041b4:	f102 0c01 	add.w	ip, r2, #1
 80041b8:	eb05 0e02 	add.w	lr, r5, r2
 80041bc:	45f4      	cmp	ip, lr
 80041be:	edd3 0a00 	vldr	s1, [r3]
 80041c2:	d249      	bcs.n	8004258 <nl_func_hardmax_array_f32+0xcc>
 80041c4:	1e69      	subs	r1, r5, #1
 80041c6:	f011 0003 	ands.w	r0, r1, #3
 80041ca:	eb06 078c 	add.w	r7, r6, ip, lsl #2
 80041ce:	d00f      	beq.n	80041f0 <nl_func_hardmax_array_f32+0x64>
 80041d0:	ed97 1a00 	vldr	s2, [r7]
 80041d4:	eef4 0a41 	vcmp.f32	s1, s2
 80041d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80041dc:	bf44      	itt	mi
 80041de:	eef0 0a41 	vmovmi.f32	s1, s2
 80041e2:	4662      	movmi	r2, ip
 80041e4:	1e40      	subs	r0, r0, #1
 80041e6:	f10c 0c01 	add.w	ip, ip, #1
 80041ea:	f107 0704 	add.w	r7, r7, #4
 80041ee:	d1ef      	bne.n	80041d0 <nl_func_hardmax_array_f32+0x44>
 80041f0:	0889      	lsrs	r1, r1, #2
 80041f2:	d031      	beq.n	8004258 <nl_func_hardmax_array_f32+0xcc>
 80041f4:	ed97 1a00 	vldr	s2, [r7]
 80041f8:	eef4 0a41 	vcmp.f32	s1, s2
 80041fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004200:	bf44      	itt	mi
 8004202:	eef0 0a41 	vmovmi.f32	s1, s2
 8004206:	4662      	movmi	r2, ip
 8004208:	ed97 1a01 	vldr	s2, [r7, #4]
 800420c:	eef4 0a41 	vcmp.f32	s1, s2
 8004210:	f10c 0001 	add.w	r0, ip, #1
 8004214:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004218:	bf44      	itt	mi
 800421a:	eef0 0a41 	vmovmi.f32	s1, s2
 800421e:	4602      	movmi	r2, r0
 8004220:	ed97 1a02 	vldr	s2, [r7, #8]
 8004224:	1c40      	adds	r0, r0, #1
 8004226:	eef4 0a41 	vcmp.f32	s1, s2
 800422a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800422e:	bf44      	itt	mi
 8004230:	eef0 0a41 	vmovmi.f32	s1, s2
 8004234:	4602      	movmi	r2, r0
 8004236:	ed97 1a03 	vldr	s2, [r7, #12]
 800423a:	1c40      	adds	r0, r0, #1
 800423c:	eef4 0a41 	vcmp.f32	s1, s2
 8004240:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004244:	bf44      	itt	mi
 8004246:	eef0 0a41 	vmovmi.f32	s1, s2
 800424a:	4602      	movmi	r2, r0
 800424c:	1e49      	subs	r1, r1, #1
 800424e:	f100 0c01 	add.w	ip, r0, #1
 8004252:	f107 0710 	add.w	r7, r7, #16
 8004256:	d1cd      	bne.n	80041f4 <nl_func_hardmax_array_f32+0x68>
 8004258:	eb08 0082 	add.w	r0, r8, r2, lsl #2
 800425c:	4672      	mov	r2, lr
 800425e:	42a2      	cmp	r2, r4
 8004260:	ed80 0a00 	vstr	s0, [r0]
 8004264:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 8004268:	d3a4      	bcc.n	80041b4 <nl_func_hardmax_array_f32+0x28>
 800426a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08004270 <nl_func_relu_generic_array_f32>:
 8004270:	6880      	ldr	r0, [r0, #8]
 8004272:	ed93 0a00 	vldr	s0, [r3]
 8004276:	edd3 0a01 	vldr	s1, [r3, #4]
 800427a:	ed93 1a02 	vldr	s2, [r3, #8]
 800427e:	6889      	ldr	r1, [r1, #8]
 8004280:	1f03      	subs	r3, r0, #4
 8004282:	eb03 0082 	add.w	r0, r3, r2, lsl #2
 8004286:	eeb5 1a40 	vcmp.f32	s2, #0.0
 800428a:	1f0b      	subs	r3, r1, #4
 800428c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004290:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8004294:	d52a      	bpl.n	80042ec <nl_func_relu_generic_array_f32+0x7c>
 8004296:	eef5 0a40 	vcmp.f32	s1, #0.0
 800429a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800429e:	d013      	beq.n	80042c8 <nl_func_relu_generic_array_f32+0x58>
 80042a0:	428a      	cmp	r2, r1
 80042a2:	d310      	bcc.n	80042c6 <nl_func_relu_generic_array_f32+0x56>
 80042a4:	ed92 1a00 	vldr	s2, [r2]
 80042a8:	eeb4 1a40 	vcmp.f32	s2, s0
 80042ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042b0:	bf44      	itt	mi
 80042b2:	ee31 1a40 	vsubmi.f32	s2, s2, s0
 80042b6:	ee21 1a20 	vmulmi.f32	s2, s2, s1
 80042ba:	ed80 1a00 	vstr	s2, [r0]
 80042be:	1f12      	subs	r2, r2, #4
 80042c0:	1f00      	subs	r0, r0, #4
 80042c2:	428a      	cmp	r2, r1
 80042c4:	d2ee      	bcs.n	80042a4 <nl_func_relu_generic_array_f32+0x34>
 80042c6:	4770      	bx	lr
 80042c8:	428a      	cmp	r2, r1
 80042ca:	d3fc      	bcc.n	80042c6 <nl_func_relu_generic_array_f32+0x56>
 80042cc:	edd2 0a00 	vldr	s1, [r2]
 80042d0:	eef4 0a40 	vcmp.f32	s1, s0
 80042d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042d8:	bf48      	it	mi
 80042da:	eddf 0aa7 	vldrmi	s1, [pc, #668]	; 8004578 <.text_73>
 80042de:	edc0 0a00 	vstr	s1, [r0]
 80042e2:	1f12      	subs	r2, r2, #4
 80042e4:	1f00      	subs	r0, r0, #4
 80042e6:	428a      	cmp	r2, r1
 80042e8:	d2f0      	bcs.n	80042cc <nl_func_relu_generic_array_f32+0x5c>
 80042ea:	4770      	bx	lr
 80042ec:	428a      	cmp	r2, r1
 80042ee:	d3ea      	bcc.n	80042c6 <nl_func_relu_generic_array_f32+0x56>
 80042f0:	edd2 1a00 	vldr	s3, [r2]
 80042f4:	eef4 1a41 	vcmp.f32	s3, s2
 80042f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042fc:	d50a      	bpl.n	8004314 <nl_func_relu_generic_array_f32+0xa4>
 80042fe:	eef4 1a40 	vcmp.f32	s3, s0
 8004302:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004306:	d507      	bpl.n	8004318 <nl_func_relu_generic_array_f32+0xa8>
 8004308:	ee71 1ac0 	vsub.f32	s3, s3, s0
 800430c:	ee61 1aa0 	vmul.f32	s3, s3, s1
 8004310:	e002      	b.n	8004318 <nl_func_relu_generic_array_f32+0xa8>
 8004312:	bf00      	nop
 8004314:	eef0 1a41 	vmov.f32	s3, s2
 8004318:	edc0 1a00 	vstr	s3, [r0]
 800431c:	1f12      	subs	r2, r2, #4
 800431e:	1f00      	subs	r0, r0, #4
 8004320:	428a      	cmp	r2, r1
 8004322:	d2e5      	bcs.n	80042f0 <nl_func_relu_generic_array_f32+0x80>
 8004324:	4770      	bx	lr
	...

08004328 <nl_func_relu_thresholded_array_f32>:
 8004328:	6889      	ldr	r1, [r1, #8]
 800432a:	6880      	ldr	r0, [r0, #8]
 800432c:	ed93 0a00 	vldr	s0, [r3]
 8004330:	eb01 0382 	add.w	r3, r1, r2, lsl #2
 8004334:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8004338:	1f1b      	subs	r3, r3, #4
 800433a:	1f10      	subs	r0, r2, #4
 800433c:	428b      	cmp	r3, r1
 800433e:	d30e      	bcc.n	800435e <nl_func_relu_thresholded_array_f32+0x36>
 8004340:	edd3 0a00 	vldr	s1, [r3]
 8004344:	eef4 0a40 	vcmp.f32	s1, s0
 8004348:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800434c:	bf48      	it	mi
 800434e:	eddf 0a8a 	vldrmi	s1, [pc, #552]	; 8004578 <.text_73>
 8004352:	edc0 0a00 	vstr	s1, [r0]
 8004356:	1f1b      	subs	r3, r3, #4
 8004358:	1f00      	subs	r0, r0, #4
 800435a:	428b      	cmp	r3, r1
 800435c:	d2f0      	bcs.n	8004340 <nl_func_relu_thresholded_array_f32+0x18>
 800435e:	4770      	bx	lr

08004360 <nl_func_elu_array_f32>:
 8004360:	b570      	push	{r4, r5, r6, lr}
 8004362:	ed2d 8b04 	vpush	{d8-d9}
 8004366:	688c      	ldr	r4, [r1, #8]
 8004368:	6880      	ldr	r0, [r0, #8]
 800436a:	ed93 8a00 	vldr	s16, [r3]
 800436e:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 8004372:	1f0d      	subs	r5, r1, #4
 8004374:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 8004378:	1f0e      	subs	r6, r1, #4
 800437a:	42a5      	cmp	r5, r4
 800437c:	f0c0 802a 	bcc.w	80043d4 <nl_func_elu_array_f32+0x74>
 8004380:	edd5 8a00 	vldr	s17, [r5]
 8004384:	eef5 8a40 	vcmp.f32	s17, #0.0
 8004388:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800438c:	bf4c      	ite	mi
 800438e:	ed9f 9a7a 	vldrmi	s18, [pc, #488]	; 8004578 <.text_73>
 8004392:	eeb0 9a68 	vmovpl.f32	s18, s17
 8004396:	eeb0 0a68 	vmov.f32	s0, s17
 800439a:	f007 fcfb 	bl	800bd94 <expf>
 800439e:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 80043a2:	ee30 0a20 	vadd.f32	s0, s0, s1
 80043a6:	ee20 0a08 	vmul.f32	s0, s0, s16
 80043aa:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80043ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043b2:	dc09      	bgt.n	80043c8 <nl_func_elu_array_f32+0x68>
 80043b4:	eeb0 0a68 	vmov.f32	s0, s17
 80043b8:	f007 fcec 	bl	800bd94 <expf>
 80043bc:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 80043c0:	ee30 0a20 	vadd.f32	s0, s0, s1
 80043c4:	ee00 9a08 	vmla.f32	s18, s0, s16
 80043c8:	ed86 9a00 	vstr	s18, [r6]
 80043cc:	1f2d      	subs	r5, r5, #4
 80043ce:	1f36      	subs	r6, r6, #4
 80043d0:	42a5      	cmp	r5, r4
 80043d2:	d2d5      	bcs.n	8004380 <nl_func_elu_array_f32+0x20>
 80043d4:	ecbd 8b04 	vpop	{d8-d9}
 80043d8:	bd70      	pop	{r4, r5, r6, pc}
	...

080043dc <.text_68>:
 80043dc:	3f800001 	.word	0x3f800001

080043e0 <.text_69>:
 80043e0:	3e4ccccd 	.word	0x3e4ccccd

080043e4 <nl_func_selu_array_f32>:
 80043e4:	b570      	push	{r4, r5, r6, lr}
 80043e6:	ed2d 8b04 	vpush	{d8-d9}
 80043ea:	688c      	ldr	r4, [r1, #8]
 80043ec:	6880      	ldr	r0, [r0, #8]
 80043ee:	ed93 8a00 	vldr	s16, [r3]
 80043f2:	edd3 8a01 	vldr	s17, [r3, #4]
 80043f6:	eb04 0182 	add.w	r1, r4, r2, lsl #2
 80043fa:	1f0d      	subs	r5, r1, #4
 80043fc:	eb00 0182 	add.w	r1, r0, r2, lsl #2
 8004400:	1f0e      	subs	r6, r1, #4
 8004402:	42a5      	cmp	r5, r4
 8004404:	f0c0 802c 	bcc.w	8004460 <nl_func_selu_array_f32+0x7c>
 8004408:	ed95 9a00 	vldr	s18, [r5]
 800440c:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8004410:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004414:	bf4c      	ite	mi
 8004416:	eddf 9a58 	vldrmi	s19, [pc, #352]	; 8004578 <.text_73>
 800441a:	eef0 9a49 	vmovpl.f32	s19, s18
 800441e:	eeb0 0a49 	vmov.f32	s0, s18
 8004422:	f007 fcb7 	bl	800bd94 <expf>
 8004426:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 800442a:	ee30 0a20 	vadd.f32	s0, s0, s1
 800442e:	ee20 0a08 	vmul.f32	s0, s0, s16
 8004432:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8004436:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800443a:	dc09      	bgt.n	8004450 <nl_func_selu_array_f32+0x6c>
 800443c:	eeb0 0a49 	vmov.f32	s0, s18
 8004440:	f007 fca8 	bl	800bd94 <expf>
 8004444:	eeff 0a00 	vmov.f32	s1, #240	; 0xbf800000 -1.0
 8004448:	ee30 0a20 	vadd.f32	s0, s0, s1
 800444c:	ee40 9a08 	vmla.f32	s19, s0, s16
 8004450:	ee28 0aa9 	vmul.f32	s0, s17, s19
 8004454:	ed86 0a00 	vstr	s0, [r6]
 8004458:	1f2d      	subs	r5, r5, #4
 800445a:	1f36      	subs	r6, r6, #4
 800445c:	42a5      	cmp	r5, r4
 800445e:	d2d3      	bcs.n	8004408 <nl_func_selu_array_f32+0x24>
 8004460:	ecbd 8b04 	vpop	{d8-d9}
 8004464:	bd70      	pop	{r4, r5, r6, pc}
	...

08004468 <nl_func_prelu_array_f32>:
 8004468:	6889      	ldr	r1, [r1, #8]
 800446a:	6880      	ldr	r0, [r0, #8]
 800446c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8004470:	eb01 0c82 	add.w	ip, r1, r2, lsl #2
 8004474:	eb00 0282 	add.w	r2, r0, r2, lsl #2
 8004478:	1f1b      	subs	r3, r3, #4
 800447a:	f1ac 0c04 	sub.w	ip, ip, #4
 800447e:	1f10      	subs	r0, r2, #4
 8004480:	458c      	cmp	ip, r1
 8004482:	d320      	bcc.n	80044c6 <nl_func_prelu_array_f32+0x5e>
 8004484:	ed9c 0a00 	vldr	s0, [ip]
 8004488:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800448c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004490:	bf4c      	ite	mi
 8004492:	eddf 0a39 	vldrmi	s1, [pc, #228]	; 8004578 <.text_73>
 8004496:	eef0 0a40 	vmovpl.f32	s1, s0
 800449a:	461a      	mov	r2, r3
 800449c:	eeb1 0a40 	vneg.f32	s0, s0
 80044a0:	1f13      	subs	r3, r2, #4
 80044a2:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80044a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044aa:	bf48      	it	mi
 80044ac:	ed9f 0a32 	vldrmi	s0, [pc, #200]	; 8004578 <.text_73>
 80044b0:	ed92 1a00 	vldr	s2, [r2]
 80044b4:	ee41 0a40 	vmls.f32	s1, s2, s0
 80044b8:	edc0 0a00 	vstr	s1, [r0]
 80044bc:	f1ac 0c04 	sub.w	ip, ip, #4
 80044c0:	1f00      	subs	r0, r0, #4
 80044c2:	458c      	cmp	ip, r1
 80044c4:	d2de      	bcs.n	8004484 <nl_func_prelu_array_f32+0x1c>
 80044c6:	4770      	bx	lr

080044c8 <forward_relu>:
 80044c8:	b570      	push	{r4, r5, r6, lr}
 80044ca:	4604      	mov	r4, r0
 80044cc:	6962      	ldr	r2, [r4, #20]
 80044ce:	8811      	ldrh	r1, [r2, #0]
 80044d0:	2900      	cmp	r1, #0
 80044d2:	bf1a      	itte	ne
 80044d4:	6850      	ldrne	r0, [r2, #4]
 80044d6:	1d00      	addne	r0, r0, #4
 80044d8:	2004      	moveq	r0, #4
 80044da:	6800      	ldr	r0, [r0, #0]
 80044dc:	2800      	cmp	r0, #0
 80044de:	bf14      	ite	ne
 80044e0:	6805      	ldrne	r5, [r0, #0]
 80044e2:	2500      	moveq	r5, #0
 80044e4:	2902      	cmp	r1, #2
 80044e6:	bfa6      	itte	ge
 80044e8:	6850      	ldrge	r0, [r2, #4]
 80044ea:	3010      	addge	r0, #16
 80044ec:	2004      	movlt	r0, #4
 80044ee:	6800      	ldr	r0, [r0, #0]
 80044f0:	2800      	cmp	r0, #0
 80044f2:	bf19      	ittee	ne
 80044f4:	6800      	ldrne	r0, [r0, #0]
 80044f6:	f100 0618 	addne.w	r6, r0, #24
 80044fa:	2100      	moveq	r1, #0
 80044fc:	f101 0618 	addeq.w	r6, r1, #24
 8004500:	69a0      	ldr	r0, [r4, #24]
 8004502:	b9f8      	cbnz	r0, 8004544 <forward_relu+0x7c>
 8004504:	f105 0008 	add.w	r0, r5, #8
 8004508:	f7fe f80a 	bl	8002520 <ai_shape_get_size>
 800450c:	69a9      	ldr	r1, [r5, #24]
 800450e:	6833      	ldr	r3, [r6, #0]
 8004510:	6889      	ldr	r1, [r1, #8]
 8004512:	689c      	ldr	r4, [r3, #8]
 8004514:	eb01 0280 	add.w	r2, r1, r0, lsl #2
 8004518:	eb04 0080 	add.w	r0, r4, r0, lsl #2
 800451c:	1f12      	subs	r2, r2, #4
 800451e:	1f00      	subs	r0, r0, #4
 8004520:	428a      	cmp	r2, r1
 8004522:	d328      	bcc.n	8004576 <forward_relu+0xae>
 8004524:	ed92 0a00 	vldr	s0, [r2]
 8004528:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800452c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004530:	bf48      	it	mi
 8004532:	ed9f 0a11 	vldrmi	s0, [pc, #68]	; 8004578 <.text_73>
 8004536:	ed80 0a00 	vstr	s0, [r0]
 800453a:	1f12      	subs	r2, r2, #4
 800453c:	1f00      	subs	r0, r0, #4
 800453e:	428a      	cmp	r2, r1
 8004540:	d2f0      	bcs.n	8004524 <forward_relu+0x5c>
 8004542:	bd70      	pop	{r4, r5, r6, pc}
 8004544:	6840      	ldr	r0, [r0, #4]
 8004546:	2801      	cmp	r0, #1
 8004548:	f105 0008 	add.w	r0, r5, #8
 800454c:	d109      	bne.n	8004562 <forward_relu+0x9a>
 800454e:	f7fd ffe7 	bl	8002520 <ai_shape_get_size>
 8004552:	4602      	mov	r2, r0
 8004554:	69a0      	ldr	r0, [r4, #24]
 8004556:	6883      	ldr	r3, [r0, #8]
 8004558:	69a9      	ldr	r1, [r5, #24]
 800455a:	6830      	ldr	r0, [r6, #0]
 800455c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004560:	e6e2      	b.n	8004328 <nl_func_relu_thresholded_array_f32>
 8004562:	f7fd ffdd 	bl	8002520 <ai_shape_get_size>
 8004566:	69a1      	ldr	r1, [r4, #24]
 8004568:	688b      	ldr	r3, [r1, #8]
 800456a:	69a9      	ldr	r1, [r5, #24]
 800456c:	4602      	mov	r2, r0
 800456e:	6830      	ldr	r0, [r6, #0]
 8004570:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004574:	e67c      	b.n	8004270 <nl_func_relu_generic_array_f32>
 8004576:	bd70      	pop	{r4, r5, r6, pc}

08004578 <.text_73>:
 8004578:	00000000 	.word	0x00000000

0800457c <forward_relu_thresholded>:
 800457c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800457e:	4602      	mov	r2, r0
 8004580:	f04f 0601 	mov.w	r6, #1
 8004584:	6953      	ldr	r3, [r2, #20]
 8004586:	8819      	ldrh	r1, [r3, #0]
 8004588:	2900      	cmp	r1, #0
 800458a:	bf1a      	itte	ne
 800458c:	6858      	ldrne	r0, [r3, #4]
 800458e:	1d00      	addne	r0, r0, #4
 8004590:	2004      	moveq	r0, #4
 8004592:	6800      	ldr	r0, [r0, #0]
 8004594:	2800      	cmp	r0, #0
 8004596:	bf14      	ite	ne
 8004598:	6804      	ldrne	r4, [r0, #0]
 800459a:	2400      	moveq	r4, #0
 800459c:	2902      	cmp	r1, #2
 800459e:	bfa6      	itte	ge
 80045a0:	6858      	ldrge	r0, [r3, #4]
 80045a2:	3010      	addge	r0, #16
 80045a4:	2004      	movlt	r0, #4
 80045a6:	6800      	ldr	r0, [r0, #0]
 80045a8:	2800      	cmp	r0, #0
 80045aa:	bf19      	ittee	ne
 80045ac:	6800      	ldrne	r0, [r0, #0]
 80045ae:	f100 0518 	addne.w	r5, r0, #24
 80045b2:	2100      	moveq	r1, #0
 80045b4:	f101 0518 	addeq.w	r5, r1, #24
 80045b8:	f104 0108 	add.w	r1, r4, #8
 80045bc:	680b      	ldr	r3, [r1, #0]
 80045be:	0a1b      	lsrs	r3, r3, #8
 80045c0:	d01f      	beq.n	8004602 <forward_relu_thresholded+0x86>
 80045c2:	684f      	ldr	r7, [r1, #4]
 80045c4:	eb07 0183 	add.w	r1, r7, r3, lsl #2
 80045c8:	4618      	mov	r0, r3
 80045ca:	f1a1 0c04 	sub.w	ip, r1, #4
 80045ce:	f010 0103 	ands.w	r1, r0, #3
 80045d2:	d006      	beq.n	80045e2 <forward_relu_thresholded+0x66>
 80045d4:	1e5b      	subs	r3, r3, #1
 80045d6:	f85c e904 	ldr.w	lr, [ip], #-4
 80045da:	1e49      	subs	r1, r1, #1
 80045dc:	fb0e f606 	mul.w	r6, lr, r6
 80045e0:	d1f8      	bne.n	80045d4 <forward_relu_thresholded+0x58>
 80045e2:	0880      	lsrs	r0, r0, #2
 80045e4:	d00d      	beq.n	8004602 <forward_relu_thresholded+0x86>
 80045e6:	eb07 0183 	add.w	r1, r7, r3, lsl #2
 80045ea:	3910      	subs	r1, #16
 80045ec:	68cb      	ldr	r3, [r1, #12]
 80045ee:	688f      	ldr	r7, [r1, #8]
 80045f0:	437b      	muls	r3, r7
 80045f2:	684f      	ldr	r7, [r1, #4]
 80045f4:	437b      	muls	r3, r7
 80045f6:	f851 7910 	ldr.w	r7, [r1], #-16
 80045fa:	437b      	muls	r3, r7
 80045fc:	435e      	muls	r6, r3
 80045fe:	1e40      	subs	r0, r0, #1
 8004600:	d1f4      	bne.n	80045ec <forward_relu_thresholded+0x70>
 8004602:	6990      	ldr	r0, [r2, #24]
 8004604:	6881      	ldr	r1, [r0, #8]
 8004606:	69a0      	ldr	r0, [r4, #24]
 8004608:	682a      	ldr	r2, [r5, #0]
 800460a:	6880      	ldr	r0, [r0, #8]
 800460c:	6893      	ldr	r3, [r2, #8]
 800460e:	ed91 0a00 	vldr	s0, [r1]
 8004612:	eb00 0186 	add.w	r1, r0, r6, lsl #2
 8004616:	eb03 0486 	add.w	r4, r3, r6, lsl #2
 800461a:	1f09      	subs	r1, r1, #4
 800461c:	1f22      	subs	r2, r4, #4
 800461e:	4281      	cmp	r1, r0
 8004620:	f0c0 800f 	bcc.w	8004642 <forward_relu_thresholded+0xc6>
 8004624:	edd1 0a00 	vldr	s1, [r1]
 8004628:	eef4 0a40 	vcmp.f32	s1, s0
 800462c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004630:	bf48      	it	mi
 8004632:	eddf 0ac2 	vldrmi	s1, [pc, #776]	; 800493c <.text_80>
 8004636:	edc2 0a00 	vstr	s1, [r2]
 800463a:	1f09      	subs	r1, r1, #4
 800463c:	1f12      	subs	r2, r2, #4
 800463e:	4281      	cmp	r1, r0
 8004640:	d2f0      	bcs.n	8004624 <forward_relu_thresholded+0xa8>
 8004642:	bdf0      	pop	{r4, r5, r6, r7, pc}

08004644 <forward_elu>:
 8004644:	b570      	push	{r4, r5, r6, lr}
 8004646:	4604      	mov	r4, r0
 8004648:	6962      	ldr	r2, [r4, #20]
 800464a:	8811      	ldrh	r1, [r2, #0]
 800464c:	2900      	cmp	r1, #0
 800464e:	bf1a      	itte	ne
 8004650:	6850      	ldrne	r0, [r2, #4]
 8004652:	1d00      	addne	r0, r0, #4
 8004654:	2004      	moveq	r0, #4
 8004656:	6800      	ldr	r0, [r0, #0]
 8004658:	2800      	cmp	r0, #0
 800465a:	bf14      	ite	ne
 800465c:	6805      	ldrne	r5, [r0, #0]
 800465e:	2500      	moveq	r5, #0
 8004660:	2902      	cmp	r1, #2
 8004662:	bfa6      	itte	ge
 8004664:	6850      	ldrge	r0, [r2, #4]
 8004666:	3010      	addge	r0, #16
 8004668:	2004      	movlt	r0, #4
 800466a:	6800      	ldr	r0, [r0, #0]
 800466c:	2800      	cmp	r0, #0
 800466e:	bf19      	ittee	ne
 8004670:	6800      	ldrne	r0, [r0, #0]
 8004672:	f100 0618 	addne.w	r6, r0, #24
 8004676:	2100      	moveq	r1, #0
 8004678:	f101 0618 	addeq.w	r6, r1, #24
 800467c:	f105 0008 	add.w	r0, r5, #8
 8004680:	f7fd ff4e 	bl	8002520 <ai_shape_get_size>
 8004684:	4602      	mov	r2, r0
 8004686:	69a0      	ldr	r0, [r4, #24]
 8004688:	6883      	ldr	r3, [r0, #8]
 800468a:	69a9      	ldr	r1, [r5, #24]
 800468c:	6830      	ldr	r0, [r6, #0]
 800468e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004692:	e665      	b.n	8004360 <nl_func_elu_array_f32>

08004694 <forward_selu>:
 8004694:	b570      	push	{r4, r5, r6, lr}
 8004696:	4604      	mov	r4, r0
 8004698:	6962      	ldr	r2, [r4, #20]
 800469a:	8811      	ldrh	r1, [r2, #0]
 800469c:	2900      	cmp	r1, #0
 800469e:	bf1a      	itte	ne
 80046a0:	6850      	ldrne	r0, [r2, #4]
 80046a2:	1d00      	addne	r0, r0, #4
 80046a4:	2004      	moveq	r0, #4
 80046a6:	6800      	ldr	r0, [r0, #0]
 80046a8:	2800      	cmp	r0, #0
 80046aa:	bf14      	ite	ne
 80046ac:	6805      	ldrne	r5, [r0, #0]
 80046ae:	2500      	moveq	r5, #0
 80046b0:	2902      	cmp	r1, #2
 80046b2:	bfa6      	itte	ge
 80046b4:	6850      	ldrge	r0, [r2, #4]
 80046b6:	3010      	addge	r0, #16
 80046b8:	2004      	movlt	r0, #4
 80046ba:	6800      	ldr	r0, [r0, #0]
 80046bc:	2800      	cmp	r0, #0
 80046be:	bf19      	ittee	ne
 80046c0:	6800      	ldrne	r0, [r0, #0]
 80046c2:	f100 0618 	addne.w	r6, r0, #24
 80046c6:	2100      	moveq	r1, #0
 80046c8:	f101 0618 	addeq.w	r6, r1, #24
 80046cc:	f105 0008 	add.w	r0, r5, #8
 80046d0:	f7fd ff26 	bl	8002520 <ai_shape_get_size>
 80046d4:	4602      	mov	r2, r0
 80046d6:	69a0      	ldr	r0, [r4, #24]
 80046d8:	6883      	ldr	r3, [r0, #8]
 80046da:	69a9      	ldr	r1, [r5, #24]
 80046dc:	6830      	ldr	r0, [r6, #0]
 80046de:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80046e2:	e67f      	b.n	80043e4 <nl_func_selu_array_f32>

080046e4 <forward_prelu>:
 80046e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80046e8:	b083      	sub	sp, #12
 80046ea:	6942      	ldr	r2, [r0, #20]
 80046ec:	8810      	ldrh	r0, [r2, #0]
 80046ee:	2800      	cmp	r0, #0
 80046f0:	bf1a      	itte	ne
 80046f2:	6851      	ldrne	r1, [r2, #4]
 80046f4:	1d09      	addne	r1, r1, #4
 80046f6:	2104      	moveq	r1, #4
 80046f8:	6809      	ldr	r1, [r1, #0]
 80046fa:	2900      	cmp	r1, #0
 80046fc:	bf19      	ittee	ne
 80046fe:	6809      	ldrne	r1, [r1, #0]
 8004700:	f101 0518 	addne.w	r5, r1, #24
 8004704:	2300      	moveq	r3, #0
 8004706:	f103 0518 	addeq.w	r5, r3, #24
 800470a:	2801      	cmp	r0, #1
 800470c:	bfc6      	itte	gt
 800470e:	6851      	ldrgt	r1, [r2, #4]
 8004710:	3110      	addgt	r1, #16
 8004712:	2104      	movle	r1, #4
 8004714:	6809      	ldr	r1, [r1, #0]
 8004716:	2900      	cmp	r1, #0
 8004718:	bf19      	ittee	ne
 800471a:	6809      	ldrne	r1, [r1, #0]
 800471c:	f101 0618 	addne.w	r6, r1, #24
 8004720:	2300      	moveq	r3, #0
 8004722:	f103 0618 	addeq.w	r6, r3, #24
 8004726:	2802      	cmp	r0, #2
 8004728:	bfc6      	itte	gt
 800472a:	6850      	ldrgt	r0, [r2, #4]
 800472c:	301c      	addgt	r0, #28
 800472e:	2004      	movle	r0, #4
 8004730:	6800      	ldr	r0, [r0, #0]
 8004732:	2800      	cmp	r0, #0
 8004734:	bf14      	ite	ne
 8004736:	6804      	ldrne	r4, [r0, #0]
 8004738:	2400      	moveq	r4, #0
 800473a:	69a0      	ldr	r0, [r4, #24]
 800473c:	6887      	ldr	r7, [r0, #8]
 800473e:	b12c      	cbz	r4, 800474c <forward_prelu+0x68>
 8004740:	6841      	ldr	r1, [r0, #4]
 8004742:	6800      	ldr	r0, [r0, #0]
 8004744:	f001 ff1c 	bl	8006580 <ai_array_get_byte_size>
 8004748:	4680      	mov	r8, r0
 800474a:	e001      	b.n	8004750 <forward_prelu+0x6c>
 800474c:	f04f 0801 	mov.w	r8, #1
 8004750:	6828      	ldr	r0, [r5, #0]
 8004752:	6841      	ldr	r1, [r0, #4]
 8004754:	6800      	ldr	r0, [r0, #0]
 8004756:	f001 ff13 	bl	8006580 <ai_array_get_byte_size>
 800475a:	4601      	mov	r1, r0
 800475c:	6828      	ldr	r0, [r5, #0]
 800475e:	6832      	ldr	r2, [r6, #0]
 8004760:	6880      	ldr	r0, [r0, #8]
 8004762:	f8d2 9008 	ldr.w	r9, [r2, #8]
 8004766:	4401      	add	r1, r0
 8004768:	f104 0308 	add.w	r3, r4, #8
 800476c:	4288      	cmp	r0, r1
 800476e:	9300      	str	r3, [sp, #0]
 8004770:	d241      	bcs.n	80047f6 <forward_prelu+0x112>
 8004772:	9702      	str	r7, [sp, #8]
 8004774:	9101      	str	r1, [sp, #4]
 8004776:	4607      	mov	r7, r0
 8004778:	6829      	ldr	r1, [r5, #0]
 800477a:	608f      	str	r7, [r1, #8]
 800477c:	f04f 0201 	mov.w	r2, #1
 8004780:	6834      	ldr	r4, [r6, #0]
 8004782:	f8c4 9008 	str.w	r9, [r4, #8]
 8004786:	9b00      	ldr	r3, [sp, #0]
 8004788:	6818      	ldr	r0, [r3, #0]
 800478a:	0a00      	lsrs	r0, r0, #8
 800478c:	d02a      	beq.n	80047e4 <forward_prelu+0x100>
 800478e:	f8d3 e004 	ldr.w	lr, [r3, #4]
 8004792:	eb0e 0380 	add.w	r3, lr, r0, lsl #2
 8004796:	4684      	mov	ip, r0
 8004798:	f1a3 0a04 	sub.w	sl, r3, #4
 800479c:	f01c 0303 	ands.w	r3, ip, #3
 80047a0:	d006      	beq.n	80047b0 <forward_prelu+0xcc>
 80047a2:	1e40      	subs	r0, r0, #1
 80047a4:	f85a b904 	ldr.w	fp, [sl], #-4
 80047a8:	1e5b      	subs	r3, r3, #1
 80047aa:	fb0b f202 	mul.w	r2, fp, r2
 80047ae:	d1f8      	bne.n	80047a2 <forward_prelu+0xbe>
 80047b0:	ea5f 0c9c 	movs.w	ip, ip, lsr #2
 80047b4:	4663      	mov	r3, ip
 80047b6:	d015      	beq.n	80047e4 <forward_prelu+0x100>
 80047b8:	eb0e 0080 	add.w	r0, lr, r0, lsl #2
 80047bc:	f1b0 0010 	subs.w	r0, r0, #16
 80047c0:	f8d0 c00c 	ldr.w	ip, [r0, #12]
 80047c4:	f8d0 e008 	ldr.w	lr, [r0, #8]
 80047c8:	f8d0 a004 	ldr.w	sl, [r0, #4]
 80047cc:	f850 b910 	ldr.w	fp, [r0], #-16
 80047d0:	fb0e fc0c 	mul.w	ip, lr, ip
 80047d4:	fb0a fc0c 	mul.w	ip, sl, ip
 80047d8:	fb0b fc0c 	mul.w	ip, fp, ip
 80047dc:	1e5b      	subs	r3, r3, #1
 80047de:	fb0c f202 	mul.w	r2, ip, r2
 80047e2:	d1ed      	bne.n	80047c0 <forward_prelu+0xdc>
 80047e4:	9b02      	ldr	r3, [sp, #8]
 80047e6:	4620      	mov	r0, r4
 80047e8:	f7ff fe3e 	bl	8004468 <nl_func_prelu_array_f32>
 80047ec:	9801      	ldr	r0, [sp, #4]
 80047ee:	4447      	add	r7, r8
 80047f0:	4287      	cmp	r7, r0
 80047f2:	44c1      	add	r9, r8
 80047f4:	d3c0      	bcc.n	8004778 <forward_prelu+0x94>
 80047f6:	6828      	ldr	r0, [r5, #0]
 80047f8:	68c1      	ldr	r1, [r0, #12]
 80047fa:	6081      	str	r1, [r0, #8]
 80047fc:	6830      	ldr	r0, [r6, #0]
 80047fe:	68c1      	ldr	r1, [r0, #12]
 8004800:	6081      	str	r1, [r0, #8]
 8004802:	b003      	add	sp, #12
 8004804:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08004808 <forward_clip>:
 8004808:	b570      	push	{r4, r5, r6, lr}
 800480a:	4604      	mov	r4, r0
 800480c:	6962      	ldr	r2, [r4, #20]
 800480e:	8811      	ldrh	r1, [r2, #0]
 8004810:	2900      	cmp	r1, #0
 8004812:	bf1a      	itte	ne
 8004814:	6850      	ldrne	r0, [r2, #4]
 8004816:	1d00      	addne	r0, r0, #4
 8004818:	2004      	moveq	r0, #4
 800481a:	6800      	ldr	r0, [r0, #0]
 800481c:	2800      	cmp	r0, #0
 800481e:	bf14      	ite	ne
 8004820:	6805      	ldrne	r5, [r0, #0]
 8004822:	2500      	moveq	r5, #0
 8004824:	2902      	cmp	r1, #2
 8004826:	bfa6      	itte	ge
 8004828:	6850      	ldrge	r0, [r2, #4]
 800482a:	3010      	addge	r0, #16
 800482c:	2004      	movlt	r0, #4
 800482e:	6800      	ldr	r0, [r0, #0]
 8004830:	2800      	cmp	r0, #0
 8004832:	bf19      	ittee	ne
 8004834:	6800      	ldrne	r0, [r0, #0]
 8004836:	f100 0618 	addne.w	r6, r0, #24
 800483a:	2100      	moveq	r1, #0
 800483c:	f101 0618 	addeq.w	r6, r1, #24
 8004840:	f105 0008 	add.w	r0, r5, #8
 8004844:	f7fd fe6c 	bl	8002520 <ai_shape_get_size>
 8004848:	4602      	mov	r2, r0
 800484a:	69a0      	ldr	r0, [r4, #24]
 800484c:	6883      	ldr	r3, [r0, #8]
 800484e:	69a9      	ldr	r1, [r5, #24]
 8004850:	6830      	ldr	r0, [r6, #0]
 8004852:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8004856:	e473      	b.n	8004140 <nl_func_clip_array_f32>

08004858 <forward_hard_sigmoid>:
 8004858:	b4f0      	push	{r4, r5, r6, r7}
 800485a:	6942      	ldr	r2, [r0, #20]
 800485c:	8811      	ldrh	r1, [r2, #0]
 800485e:	2900      	cmp	r1, #0
 8004860:	bf1a      	itte	ne
 8004862:	6850      	ldrne	r0, [r2, #4]
 8004864:	1d00      	addne	r0, r0, #4
 8004866:	2004      	moveq	r0, #4
 8004868:	f04f 0501 	mov.w	r5, #1
 800486c:	6800      	ldr	r0, [r0, #0]
 800486e:	2800      	cmp	r0, #0
 8004870:	bf14      	ite	ne
 8004872:	6803      	ldrne	r3, [r0, #0]
 8004874:	2300      	moveq	r3, #0
 8004876:	2902      	cmp	r1, #2
 8004878:	bfa6      	itte	ge
 800487a:	6850      	ldrge	r0, [r2, #4]
 800487c:	3010      	addge	r0, #16
 800487e:	2004      	movlt	r0, #4
 8004880:	6800      	ldr	r0, [r0, #0]
 8004882:	2800      	cmp	r0, #0
 8004884:	bf19      	ittee	ne
 8004886:	6800      	ldrne	r0, [r0, #0]
 8004888:	f100 0418 	addne.w	r4, r0, #24
 800488c:	2100      	moveq	r1, #0
 800488e:	f101 0418 	addeq.w	r4, r1, #24
 8004892:	f103 0108 	add.w	r1, r3, #8
 8004896:	680a      	ldr	r2, [r1, #0]
 8004898:	0a12      	lsrs	r2, r2, #8
 800489a:	d01e      	beq.n	80048da <forward_hard_sigmoid+0x82>
 800489c:	684e      	ldr	r6, [r1, #4]
 800489e:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 80048a2:	4610      	mov	r0, r2
 80048a4:	1f0f      	subs	r7, r1, #4
 80048a6:	f010 0103 	ands.w	r1, r0, #3
 80048aa:	d006      	beq.n	80048ba <forward_hard_sigmoid+0x62>
 80048ac:	1e52      	subs	r2, r2, #1
 80048ae:	f857 c904 	ldr.w	ip, [r7], #-4
 80048b2:	1e49      	subs	r1, r1, #1
 80048b4:	fb0c f505 	mul.w	r5, ip, r5
 80048b8:	d1f8      	bne.n	80048ac <forward_hard_sigmoid+0x54>
 80048ba:	0880      	lsrs	r0, r0, #2
 80048bc:	d00d      	beq.n	80048da <forward_hard_sigmoid+0x82>
 80048be:	eb06 0182 	add.w	r1, r6, r2, lsl #2
 80048c2:	3910      	subs	r1, #16
 80048c4:	68ca      	ldr	r2, [r1, #12]
 80048c6:	688e      	ldr	r6, [r1, #8]
 80048c8:	684f      	ldr	r7, [r1, #4]
 80048ca:	4372      	muls	r2, r6
 80048cc:	f851 6910 	ldr.w	r6, [r1], #-16
 80048d0:	437a      	muls	r2, r7
 80048d2:	4372      	muls	r2, r6
 80048d4:	4355      	muls	r5, r2
 80048d6:	1e40      	subs	r0, r0, #1
 80048d8:	d1f4      	bne.n	80048c4 <forward_hard_sigmoid+0x6c>
 80048da:	6998      	ldr	r0, [r3, #24]
 80048dc:	6822      	ldr	r2, [r4, #0]
 80048de:	6880      	ldr	r0, [r0, #8]
 80048e0:	6893      	ldr	r3, [r2, #8]
 80048e2:	eb00 0185 	add.w	r1, r0, r5, lsl #2
 80048e6:	eb03 0485 	add.w	r4, r3, r5, lsl #2
 80048ea:	1f09      	subs	r1, r1, #4
 80048ec:	1f22      	subs	r2, r4, #4
 80048ee:	4281      	cmp	r1, r0
 80048f0:	f0c0 8022 	bcc.w	8004938 <forward_hard_sigmoid+0xe0>
 80048f4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80048f8:	eddf 0a11 	vldr	s1, [pc, #68]	; 8004940 <.text_81>
 80048fc:	edd1 1a00 	vldr	s3, [r1]
 8004900:	ed9f 2a10 	vldr	s4, [pc, #64]	; 8004944 <.text_82>
 8004904:	eeb6 1a00 	vmov.f32	s2, #96	; 0x3f000000  0.5
 8004908:	ee01 1a82 	vmla.f32	s2, s3, s4
 800490c:	eeb4 1a60 	vcmp.f32	s2, s1
 8004910:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004914:	da08      	bge.n	8004928 <forward_hard_sigmoid+0xd0>
 8004916:	eeb5 1a40 	vcmp.f32	s2, #0.0
 800491a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800491e:	d505      	bpl.n	800492c <forward_hard_sigmoid+0xd4>
 8004920:	ed9f 1a06 	vldr	s2, [pc, #24]	; 800493c <.text_80>
 8004924:	e002      	b.n	800492c <forward_hard_sigmoid+0xd4>
 8004926:	bf00      	nop
 8004928:	eeb0 1a40 	vmov.f32	s2, s0
 800492c:	ed82 1a00 	vstr	s2, [r2]
 8004930:	1f09      	subs	r1, r1, #4
 8004932:	1f12      	subs	r2, r2, #4
 8004934:	4281      	cmp	r1, r0
 8004936:	d2e1      	bcs.n	80048fc <forward_hard_sigmoid+0xa4>
 8004938:	bcf0      	pop	{r4, r5, r6, r7}
 800493a:	4770      	bx	lr

0800493c <.text_80>:
 800493c:	00000000 	.word	0x00000000

08004940 <.text_81>:
 8004940:	3f800001 	.word	0x3f800001

08004944 <.text_82>:
 8004944:	3e4ccccd 	.word	0x3e4ccccd

08004948 <forward_sm>:
 8004948:	b5f0      	push	{r4, r5, r6, r7, lr}
 800494a:	b083      	sub	sp, #12
 800494c:	6942      	ldr	r2, [r0, #20]
 800494e:	8811      	ldrh	r1, [r2, #0]
 8004950:	2900      	cmp	r1, #0
 8004952:	bf1a      	itte	ne
 8004954:	6850      	ldrne	r0, [r2, #4]
 8004956:	1d00      	addne	r0, r0, #4
 8004958:	2004      	moveq	r0, #4
 800495a:	6800      	ldr	r0, [r0, #0]
 800495c:	2800      	cmp	r0, #0
 800495e:	bf14      	ite	ne
 8004960:	6804      	ldrne	r4, [r0, #0]
 8004962:	2400      	moveq	r4, #0
 8004964:	2902      	cmp	r1, #2
 8004966:	bfa6      	itte	ge
 8004968:	6850      	ldrge	r0, [r2, #4]
 800496a:	3010      	addge	r0, #16
 800496c:	2004      	movlt	r0, #4
 800496e:	6800      	ldr	r0, [r0, #0]
 8004970:	2800      	cmp	r0, #0
 8004972:	bf14      	ite	ne
 8004974:	6805      	ldrne	r5, [r0, #0]
 8004976:	2500      	moveq	r5, #0
 8004978:	68e0      	ldr	r0, [r4, #12]
 800497a:	68e9      	ldr	r1, [r5, #12]
 800497c:	6846      	ldr	r6, [r0, #4]
 800497e:	684f      	ldr	r7, [r1, #4]
 8004980:	f104 0008 	add.w	r0, r4, #8
 8004984:	f7fd fdcc 	bl	8002520 <ai_shape_get_size>
 8004988:	4602      	mov	r2, r0
 800498a:	9701      	str	r7, [sp, #4]
 800498c:	9600      	str	r6, [sp, #0]
 800498e:	69a1      	ldr	r1, [r4, #24]
 8004990:	69a8      	ldr	r0, [r5, #24]
 8004992:	4633      	mov	r3, r6
 8004994:	f7ff fb76 	bl	8004084 <nl_func_sm_array_f32>
 8004998:	b003      	add	sp, #12
 800499a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800499c <forward_hardmax>:
 800499c:	b430      	push	{r4, r5}
 800499e:	6943      	ldr	r3, [r0, #20]
 80049a0:	881a      	ldrh	r2, [r3, #0]
 80049a2:	6980      	ldr	r0, [r0, #24]
 80049a4:	2a00      	cmp	r2, #0
 80049a6:	bf1a      	itte	ne
 80049a8:	6859      	ldrne	r1, [r3, #4]
 80049aa:	1d09      	addne	r1, r1, #4
 80049ac:	2104      	moveq	r1, #4
 80049ae:	6809      	ldr	r1, [r1, #0]
 80049b0:	2900      	cmp	r1, #0
 80049b2:	bf14      	ite	ne
 80049b4:	680c      	ldrne	r4, [r1, #0]
 80049b6:	2400      	moveq	r4, #0
 80049b8:	2a02      	cmp	r2, #2
 80049ba:	bfa6      	itte	ge
 80049bc:	6859      	ldrge	r1, [r3, #4]
 80049be:	3110      	addge	r1, #16
 80049c0:	2104      	movlt	r1, #4
 80049c2:	6809      	ldr	r1, [r1, #0]
 80049c4:	6883      	ldr	r3, [r0, #8]
 80049c6:	2900      	cmp	r1, #0
 80049c8:	bf19      	ittee	ne
 80049ca:	6809      	ldrne	r1, [r1, #0]
 80049cc:	f101 0518 	addne.w	r5, r1, #24
 80049d0:	2200      	moveq	r2, #0
 80049d2:	f102 0518 	addeq.w	r5, r2, #24
 80049d6:	69a1      	ldr	r1, [r4, #24]
 80049d8:	6828      	ldr	r0, [r5, #0]
 80049da:	f104 0208 	add.w	r2, r4, #8
 80049de:	bc30      	pop	{r4, r5}
 80049e0:	f7ff bbd4 	b.w	800418c <nl_func_hardmax_array_f32>

080049e4 <ai_shape_get_size>:
 80049e4:	b470      	push	{r4, r5, r6}
 80049e6:	4601      	mov	r1, r0
 80049e8:	f04f 0201 	mov.w	r2, #1
 80049ec:	680b      	ldr	r3, [r1, #0]
 80049ee:	0a1b      	lsrs	r3, r3, #8
 80049f0:	d01e      	beq.n	8004a30 <ai_shape_get_size+0x4c>
 80049f2:	684c      	ldr	r4, [r1, #4]
 80049f4:	eb04 0183 	add.w	r1, r4, r3, lsl #2
 80049f8:	4618      	mov	r0, r3
 80049fa:	1f0d      	subs	r5, r1, #4
 80049fc:	f010 0103 	ands.w	r1, r0, #3
 8004a00:	f000 8006 	beq.w	8004a10 <ai_shape_get_size+0x2c>
 8004a04:	f855 6904 	ldr.w	r6, [r5], #-4
 8004a08:	1e5b      	subs	r3, r3, #1
 8004a0a:	4372      	muls	r2, r6
 8004a0c:	1e49      	subs	r1, r1, #1
 8004a0e:	d1f9      	bne.n	8004a04 <ai_shape_get_size+0x20>
 8004a10:	0880      	lsrs	r0, r0, #2
 8004a12:	d00d      	beq.n	8004a30 <ai_shape_get_size+0x4c>
 8004a14:	eb04 0183 	add.w	r1, r4, r3, lsl #2
 8004a18:	3910      	subs	r1, #16
 8004a1a:	68cb      	ldr	r3, [r1, #12]
 8004a1c:	688c      	ldr	r4, [r1, #8]
 8004a1e:	684d      	ldr	r5, [r1, #4]
 8004a20:	f851 6910 	ldr.w	r6, [r1], #-16
 8004a24:	4363      	muls	r3, r4
 8004a26:	436b      	muls	r3, r5
 8004a28:	4373      	muls	r3, r6
 8004a2a:	435a      	muls	r2, r3
 8004a2c:	1e40      	subs	r0, r0, #1
 8004a2e:	d1f4      	bne.n	8004a1a <ai_shape_get_size+0x36>
 8004a30:	bc70      	pop	{r4, r5, r6}
 8004a32:	4610      	mov	r0, r2
 8004a34:	4770      	bx	lr
	...

08004a38 <func_lrn_channel_f32>:
 8004a38:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004a3c:	461f      	mov	r7, r3
 8004a3e:	4604      	mov	r4, r0
 8004a40:	b081      	sub	sp, #4
 8004a42:	4616      	mov	r6, r2
 8004a44:	ed2d 8b04 	vpush	{d8-d9}
 8004a48:	460d      	mov	r5, r1
 8004a4a:	00b1      	lsls	r1, r6, #2
 8004a4c:	f006 f9ac 	bl	800ada8 <__aeabi_memclr>
 8004a50:	2e00      	cmp	r6, #0
 8004a52:	eef0 8a40 	vmov.f32	s17, s0
 8004a56:	eeb0 9a60 	vmov.f32	s18, s1
 8004a5a:	eeb0 8a41 	vmov.f32	s16, s2
 8004a5e:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8004a62:	dd50      	ble.n	8004b06 <func_lrn_channel_f32+0xce>
 8004a64:	f107 0e01 	add.w	lr, r7, #1
 8004a68:	427f      	negs	r7, r7
 8004a6a:	46a9      	mov	r9, r5
 8004a6c:	4630      	mov	r0, r6
 8004a6e:	46b4      	mov	ip, r6
 8004a70:	463b      	mov	r3, r7
 8004a72:	4671      	mov	r1, lr
 8004a74:	45e6      	cmp	lr, ip
 8004a76:	bfc8      	it	gt
 8004a78:	4661      	movgt	r1, ip
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	bfcc      	ite	gt
 8004a7e:	461a      	movgt	r2, r3
 8004a80:	2200      	movle	r2, #0
 8004a82:	ed99 0a00 	vldr	s0, [r9]
 8004a86:	428a      	cmp	r2, r1
 8004a88:	ee20 0a00 	vmul.f32	s0, s0, s0
 8004a8c:	f280 8034 	bge.w	8004af8 <func_lrn_channel_f32+0xc0>
 8004a90:	eb04 0782 	add.w	r7, r4, r2, lsl #2
 8004a94:	eb04 0682 	add.w	r6, r4, r2, lsl #2
 8004a98:	edd7 0a00 	vldr	s1, [r7]
 8004a9c:	1c52      	adds	r2, r2, #1
 8004a9e:	ee70 0a80 	vadd.f32	s1, s1, s0
 8004aa2:	428a      	cmp	r2, r1
 8004aa4:	edc6 0a00 	vstr	s1, [r6]
 8004aa8:	da26      	bge.n	8004af8 <func_lrn_channel_f32+0xc0>
 8004aaa:	eb04 0782 	add.w	r7, r4, r2, lsl #2
 8004aae:	eb04 0682 	add.w	r6, r4, r2, lsl #2
 8004ab2:	ed97 1a00 	vldr	s2, [r7]
 8004ab6:	1c52      	adds	r2, r2, #1
 8004ab8:	ee71 0a00 	vadd.f32	s1, s2, s0
 8004abc:	428a      	cmp	r2, r1
 8004abe:	edc6 0a00 	vstr	s1, [r6]
 8004ac2:	da19      	bge.n	8004af8 <func_lrn_channel_f32+0xc0>
 8004ac4:	eb04 0782 	add.w	r7, r4, r2, lsl #2
 8004ac8:	eb04 0682 	add.w	r6, r4, r2, lsl #2
 8004acc:	edd7 0a00 	vldr	s1, [r7]
 8004ad0:	1c52      	adds	r2, r2, #1
 8004ad2:	ee70 0a80 	vadd.f32	s1, s1, s0
 8004ad6:	428a      	cmp	r2, r1
 8004ad8:	edc6 0a00 	vstr	s1, [r6]
 8004adc:	da0c      	bge.n	8004af8 <func_lrn_channel_f32+0xc0>
 8004ade:	eb04 0782 	add.w	r7, r4, r2, lsl #2
 8004ae2:	eb04 0682 	add.w	r6, r4, r2, lsl #2
 8004ae6:	ed97 1a00 	vldr	s2, [r7]
 8004aea:	1c52      	adds	r2, r2, #1
 8004aec:	ee71 0a00 	vadd.f32	s1, s2, s0
 8004af0:	428a      	cmp	r2, r1
 8004af2:	edc6 0a00 	vstr	s1, [r6]
 8004af6:	dbcb      	blt.n	8004a90 <func_lrn_channel_f32+0x58>
 8004af8:	1c5b      	adds	r3, r3, #1
 8004afa:	1e40      	subs	r0, r0, #1
 8004afc:	f109 0904 	add.w	r9, r9, #4
 8004b00:	f10e 0e01 	add.w	lr, lr, #1
 8004b04:	d1b5      	bne.n	8004a72 <func_lrn_channel_f32+0x3a>
 8004b06:	4545      	cmp	r5, r8
 8004b08:	f080 8014 	bcs.w	8004b34 <func_lrn_channel_f32+0xfc>
 8004b0c:	ed94 1a00 	vldr	s2, [r4]
 8004b10:	eeb0 0a68 	vmov.f32	s0, s17
 8004b14:	eef1 0a48 	vneg.f32	s1, s16
 8004b18:	ee09 0a01 	vmla.f32	s0, s18, s2
 8004b1c:	f007 fa86 	bl	800c02c <powf>
 8004b20:	edd5 0a00 	vldr	s1, [r5]
 8004b24:	ee60 0a80 	vmul.f32	s1, s1, s0
 8004b28:	edc4 0a00 	vstr	s1, [r4]
 8004b2c:	1d2d      	adds	r5, r5, #4
 8004b2e:	1d24      	adds	r4, r4, #4
 8004b30:	4545      	cmp	r5, r8
 8004b32:	d3eb      	bcc.n	8004b0c <func_lrn_channel_f32+0xd4>
 8004b34:	ecbd 8b04 	vpop	{d8-d9}
 8004b38:	b001      	add	sp, #4
 8004b3a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

08004b40 <func_norm_array_f32>:
 8004b40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b44:	b081      	sub	sp, #4
 8004b46:	4614      	mov	r4, r2
 8004b48:	ed2d 8b04 	vpush	{d8-d9}
 8004b4c:	b084      	sub	sp, #16
 8004b4e:	eeb0 8a40 	vmov.f32	s16, s0
 8004b52:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004b54:	2a00      	cmp	r2, #0
 8004b56:	eef0 8a60 	vmov.f32	s17, s1
 8004b5a:	fb03 f804 	mul.w	r8, r3, r4
 8004b5e:	d06a      	beq.n	8004c36 <func_norm_array_f32+0xf6>
 8004b60:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 8004b64:	ee80 9a08 	vdiv.f32	s18, s0, s16
 8004b68:	9102      	str	r1, [sp, #8]
 8004b6a:	9001      	str	r0, [sp, #4]
 8004b6c:	9200      	str	r2, [sp, #0]
 8004b6e:	2600      	movs	r6, #0
 8004b70:	2c00      	cmp	r4, #0
 8004b72:	d054      	beq.n	8004c1e <func_norm_array_f32+0xde>
 8004b74:	9d02      	ldr	r5, [sp, #8]
 8004b76:	9f01      	ldr	r7, [sp, #4]
 8004b78:	46a9      	mov	r9, r5
 8004b7a:	eb09 0a88 	add.w	sl, r9, r8, lsl #2
 8004b7e:	46cb      	mov	fp, r9
 8004b80:	45d3      	cmp	fp, sl
 8004b82:	9703      	str	r7, [sp, #12]
 8004b84:	eddf 9a67 	vldr	s19, [pc, #412]	; 8004d24 <.text_6>
 8004b88:	f080 8016 	bcs.w	8004bb8 <func_norm_array_f32+0x78>
 8004b8c:	ed99 0a00 	vldr	s0, [r9]
 8004b90:	eef0 0a48 	vmov.f32	s1, s16
 8004b94:	eeb0 0ac0 	vabs.f32	s0, s0
 8004b98:	f007 fa48 	bl	800c02c <powf>
 8004b9c:	eb09 0984 	add.w	r9, r9, r4, lsl #2
 8004ba0:	45d1      	cmp	r9, sl
 8004ba2:	ee79 9a80 	vadd.f32	s19, s19, s0
 8004ba6:	d3f1      	bcc.n	8004b8c <func_norm_array_f32+0x4c>
 8004ba8:	eef5 9a40 	vcmp.f32	s19, #0.0
 8004bac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004bb0:	bf18      	it	ne
 8004bb2:	ee88 0aa9 	vdivne.f32	s0, s17, s19
 8004bb6:	d101      	bne.n	8004bbc <func_norm_array_f32+0x7c>
 8004bb8:	eeb0 0a68 	vmov.f32	s0, s17
 8004bbc:	eef0 0a49 	vmov.f32	s1, s18
 8004bc0:	f007 fa34 	bl	800c02c <powf>
 8004bc4:	45d3      	cmp	fp, sl
 8004bc6:	4628      	mov	r0, r5
 8004bc8:	d224      	bcs.n	8004c14 <func_norm_array_f32+0xd4>
 8004bca:	9903      	ldr	r1, [sp, #12]
 8004bcc:	edd0 0a00 	vldr	s1, [r0]
 8004bd0:	ee60 0a80 	vmul.f32	s1, s1, s0
 8004bd4:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 8004bd8:	edc1 0a00 	vstr	s1, [r1]
 8004bdc:	4550      	cmp	r0, sl
 8004bde:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8004be2:	d217      	bcs.n	8004c14 <func_norm_array_f32+0xd4>
 8004be4:	edd0 0a00 	vldr	s1, [r0]
 8004be8:	ee60 0a80 	vmul.f32	s1, s1, s0
 8004bec:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 8004bf0:	edc1 0a00 	vstr	s1, [r1]
 8004bf4:	4550      	cmp	r0, sl
 8004bf6:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8004bfa:	d20b      	bcs.n	8004c14 <func_norm_array_f32+0xd4>
 8004bfc:	edd0 0a00 	vldr	s1, [r0]
 8004c00:	ee60 0a80 	vmul.f32	s1, s1, s0
 8004c04:	eb00 0084 	add.w	r0, r0, r4, lsl #2
 8004c08:	edc1 0a00 	vstr	s1, [r1]
 8004c0c:	4550      	cmp	r0, sl
 8004c0e:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8004c12:	d3db      	bcc.n	8004bcc <func_norm_array_f32+0x8c>
 8004c14:	1c76      	adds	r6, r6, #1
 8004c16:	1d3f      	adds	r7, r7, #4
 8004c18:	1d2d      	adds	r5, r5, #4
 8004c1a:	42a6      	cmp	r6, r4
 8004c1c:	d3ac      	bcc.n	8004b78 <func_norm_array_f32+0x38>
 8004c1e:	9801      	ldr	r0, [sp, #4]
 8004c20:	eb00 0188 	add.w	r1, r0, r8, lsl #2
 8004c24:	9101      	str	r1, [sp, #4]
 8004c26:	9802      	ldr	r0, [sp, #8]
 8004c28:	eb00 0188 	add.w	r1, r0, r8, lsl #2
 8004c2c:	9800      	ldr	r0, [sp, #0]
 8004c2e:	9102      	str	r1, [sp, #8]
 8004c30:	1e40      	subs	r0, r0, #1
 8004c32:	9000      	str	r0, [sp, #0]
 8004c34:	d19b      	bne.n	8004b6e <func_norm_array_f32+0x2e>
 8004c36:	b004      	add	sp, #16
 8004c38:	ecbd 8b04 	vpop	{d8-d9}
 8004c3c:	b001      	add	sp, #4
 8004c3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08004c44 <func_norm_l2_fast_array_f32>:
 8004c44:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8004c48:	b081      	sub	sp, #4
 8004c4a:	4616      	mov	r6, r2
 8004c4c:	ed2d 8b02 	vpush	{d8}
 8004c50:	460d      	mov	r5, r1
 8004c52:	00b7      	lsls	r7, r6, #2
 8004c54:	4604      	mov	r4, r0
 8004c56:	eeb0 8a40 	vmov.f32	s16, s0
 8004c5a:	eb05 0883 	add.w	r8, r5, r3, lsl #2
 8004c5e:	427f      	negs	r7, r7
 8004c60:	4545      	cmp	r5, r8
 8004c62:	d25a      	bcs.n	8004d1a <func_norm_l2_fast_array_f32+0xd6>
 8004c64:	eb05 0986 	add.w	r9, r5, r6, lsl #2
 8004c68:	454d      	cmp	r5, r9
 8004c6a:	ed9f 0a2e 	vldr	s0, [pc, #184]	; 8004d24 <.text_6>
 8004c6e:	d223      	bcs.n	8004cb8 <func_norm_l2_fast_array_f32+0x74>
 8004c70:	edd5 0a00 	vldr	s1, [r5]
 8004c74:	1d2d      	adds	r5, r5, #4
 8004c76:	ee00 0aa0 	vmla.f32	s0, s1, s1
 8004c7a:	454d      	cmp	r5, r9
 8004c7c:	bf3f      	itttt	cc
 8004c7e:	ed95 1a00 	vldrcc	s2, [r5]
 8004c82:	ee01 0a01 	vmlacc.f32	s0, s2, s2
 8004c86:	1d2d      	addcc	r5, r5, #4
 8004c88:	454d      	cmpcc	r5, r9
 8004c8a:	d20d      	bcs.n	8004ca8 <func_norm_l2_fast_array_f32+0x64>
 8004c8c:	edd5 0a00 	vldr	s1, [r5]
 8004c90:	1d2d      	adds	r5, r5, #4
 8004c92:	ee00 0aa0 	vmla.f32	s0, s1, s1
 8004c96:	454d      	cmp	r5, r9
 8004c98:	bf3f      	itttt	cc
 8004c9a:	ed95 1a00 	vldrcc	s2, [r5]
 8004c9e:	ee01 0a01 	vmlacc.f32	s0, s2, s2
 8004ca2:	1d2d      	addcc	r5, r5, #4
 8004ca4:	454d      	cmpcc	r5, r9
 8004ca6:	d3e3      	bcc.n	8004c70 <func_norm_l2_fast_array_f32+0x2c>
 8004ca8:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8004cac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004cb0:	bf18      	it	ne
 8004cb2:	ee88 0a00 	vdivne.f32	s0, s16, s0
 8004cb6:	d101      	bne.n	8004cbc <func_norm_l2_fast_array_f32+0x78>
 8004cb8:	eeb0 0a48 	vmov.f32	s0, s16
 8004cbc:	f001 fda0 	bl	8006800 <ai_math_sqrt>
 8004cc0:	19ed      	adds	r5, r5, r7
 8004cc2:	454d      	cmp	r5, r9
 8004cc4:	f4bf afcc 	bcs.w	8004c60 <func_norm_l2_fast_array_f32+0x1c>
 8004cc8:	edd5 0a00 	vldr	s1, [r5]
 8004ccc:	ee60 0a80 	vmul.f32	s1, s1, s0
 8004cd0:	edc4 0a00 	vstr	s1, [r4]
 8004cd4:	1d2d      	adds	r5, r5, #4
 8004cd6:	1d24      	adds	r4, r4, #4
 8004cd8:	454d      	cmp	r5, r9
 8004cda:	d2c1      	bcs.n	8004c60 <func_norm_l2_fast_array_f32+0x1c>
 8004cdc:	ed95 1a00 	vldr	s2, [r5]
 8004ce0:	ee61 0a00 	vmul.f32	s1, s2, s0
 8004ce4:	edc4 0a00 	vstr	s1, [r4]
 8004ce8:	1d2d      	adds	r5, r5, #4
 8004cea:	1d24      	adds	r4, r4, #4
 8004cec:	454d      	cmp	r5, r9
 8004cee:	d2b7      	bcs.n	8004c60 <func_norm_l2_fast_array_f32+0x1c>
 8004cf0:	edd5 0a00 	vldr	s1, [r5]
 8004cf4:	ee60 0a80 	vmul.f32	s1, s1, s0
 8004cf8:	edc4 0a00 	vstr	s1, [r4]
 8004cfc:	1d2d      	adds	r5, r5, #4
 8004cfe:	1d24      	adds	r4, r4, #4
 8004d00:	454d      	cmp	r5, r9
 8004d02:	d2ad      	bcs.n	8004c60 <func_norm_l2_fast_array_f32+0x1c>
 8004d04:	ed95 1a00 	vldr	s2, [r5]
 8004d08:	ee61 0a00 	vmul.f32	s1, s2, s0
 8004d0c:	edc4 0a00 	vstr	s1, [r4]
 8004d10:	1d2d      	adds	r5, r5, #4
 8004d12:	1d24      	adds	r4, r4, #4
 8004d14:	454d      	cmp	r5, r9
 8004d16:	d3d7      	bcc.n	8004cc8 <func_norm_l2_fast_array_f32+0x84>
 8004d18:	e7a2      	b.n	8004c60 <func_norm_l2_fast_array_f32+0x1c>
 8004d1a:	ecbd 8b02 	vpop	{d8}
 8004d1e:	b001      	add	sp, #4
 8004d20:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08004d24 <.text_6>:
 8004d24:	00000000 	.word	0x00000000

08004d28 <func_lrn_array_f32>:
 8004d28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004d2c:	460d      	mov	r5, r1
 8004d2e:	eb05 0882 	add.w	r8, r5, r2, lsl #2
 8004d32:	ed2d 8b04 	vpush	{d8-d9}
 8004d36:	4545      	cmp	r5, r8
 8004d38:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 8004d3a:	4604      	mov	r4, r0
 8004d3c:	461e      	mov	r6, r3
 8004d3e:	eeb0 8a40 	vmov.f32	s16, s0
 8004d42:	eef0 8a60 	vmov.f32	s17, s1
 8004d46:	eeb0 9a41 	vmov.f32	s18, s2
 8004d4a:	d211      	bcs.n	8004d70 <func_lrn_array_f32+0x48>
 8004d4c:	eeb0 1a49 	vmov.f32	s2, s18
 8004d50:	eef0 0a68 	vmov.f32	s1, s17
 8004d54:	eeb0 0a48 	vmov.f32	s0, s16
 8004d58:	463b      	mov	r3, r7
 8004d5a:	4632      	mov	r2, r6
 8004d5c:	4629      	mov	r1, r5
 8004d5e:	4620      	mov	r0, r4
 8004d60:	f7ff fe6a 	bl	8004a38 <func_lrn_channel_f32>
 8004d64:	eb05 0586 	add.w	r5, r5, r6, lsl #2
 8004d68:	4545      	cmp	r5, r8
 8004d6a:	eb04 0486 	add.w	r4, r4, r6, lsl #2
 8004d6e:	d3ed      	bcc.n	8004d4c <func_lrn_array_f32+0x24>
 8004d70:	ecbd 8b04 	vpop	{d8-d9}
 8004d74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08004d78 <forward_bn>:
 8004d78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d7c:	6942      	ldr	r2, [r0, #20]
 8004d7e:	8810      	ldrh	r0, [r2, #0]
 8004d80:	2800      	cmp	r0, #0
 8004d82:	bf1a      	itte	ne
 8004d84:	6851      	ldrne	r1, [r2, #4]
 8004d86:	1d09      	addne	r1, r1, #4
 8004d88:	2104      	moveq	r1, #4
 8004d8a:	6809      	ldr	r1, [r1, #0]
 8004d8c:	2900      	cmp	r1, #0
 8004d8e:	bf14      	ite	ne
 8004d90:	680c      	ldrne	r4, [r1, #0]
 8004d92:	2400      	moveq	r4, #0
 8004d94:	2802      	cmp	r0, #2
 8004d96:	bfa6      	itte	ge
 8004d98:	6851      	ldrge	r1, [r2, #4]
 8004d9a:	3110      	addge	r1, #16
 8004d9c:	2104      	movlt	r1, #4
 8004d9e:	6809      	ldr	r1, [r1, #0]
 8004da0:	2900      	cmp	r1, #0
 8004da2:	bf19      	ittee	ne
 8004da4:	6809      	ldrne	r1, [r1, #0]
 8004da6:	f101 0818 	addne.w	r8, r1, #24
 8004daa:	2300      	moveq	r3, #0
 8004dac:	f103 0818 	addeq.w	r8, r3, #24
 8004db0:	2803      	cmp	r0, #3
 8004db2:	bfa6      	itte	ge
 8004db4:	6851      	ldrge	r1, [r2, #4]
 8004db6:	311c      	addge	r1, #28
 8004db8:	2104      	movlt	r1, #4
 8004dba:	6809      	ldr	r1, [r1, #0]
 8004dbc:	2900      	cmp	r1, #0
 8004dbe:	bf19      	ittee	ne
 8004dc0:	6809      	ldrne	r1, [r1, #0]
 8004dc2:	f101 0718 	addne.w	r7, r1, #24
 8004dc6:	2300      	moveq	r3, #0
 8004dc8:	f103 0718 	addeq.w	r7, r3, #24
 8004dcc:	2803      	cmp	r0, #3
 8004dce:	db0a      	blt.n	8004de6 <forward_bn+0x6e>
 8004dd0:	6851      	ldr	r1, [r2, #4]
 8004dd2:	f111 0018 	adds.w	r0, r1, #24
 8004dd6:	d006      	beq.n	8004de6 <forward_bn+0x6e>
 8004dd8:	8b08      	ldrh	r0, [r1, #24]
 8004dda:	2802      	cmp	r0, #2
 8004ddc:	db03      	blt.n	8004de6 <forward_bn+0x6e>
 8004dde:	69c8      	ldr	r0, [r1, #28]
 8004de0:	b108      	cbz	r0, 8004de6 <forward_bn+0x6e>
 8004de2:	6846      	ldr	r6, [r0, #4]
 8004de4:	e000      	b.n	8004de8 <forward_bn+0x70>
 8004de6:	2600      	movs	r6, #0
 8004de8:	f104 0208 	add.w	r2, r4, #8
 8004dec:	f04f 0101 	mov.w	r1, #1
 8004df0:	6813      	ldr	r3, [r2, #0]
 8004df2:	0a1b      	lsrs	r3, r3, #8
 8004df4:	d020      	beq.n	8004e38 <forward_bn+0xc0>
 8004df6:	f8d2 c004 	ldr.w	ip, [r2, #4]
 8004dfa:	eb0c 0283 	add.w	r2, ip, r3, lsl #2
 8004dfe:	4618      	mov	r0, r3
 8004e00:	f1a2 0e04 	sub.w	lr, r2, #4
 8004e04:	f010 0203 	ands.w	r2, r0, #3
 8004e08:	f000 8006 	beq.w	8004e18 <forward_bn+0xa0>
 8004e0c:	f85e 5904 	ldr.w	r5, [lr], #-4
 8004e10:	1e5b      	subs	r3, r3, #1
 8004e12:	4369      	muls	r1, r5
 8004e14:	1e52      	subs	r2, r2, #1
 8004e16:	d1f9      	bne.n	8004e0c <forward_bn+0x94>
 8004e18:	0880      	lsrs	r0, r0, #2
 8004e1a:	d00d      	beq.n	8004e38 <forward_bn+0xc0>
 8004e1c:	eb0c 0283 	add.w	r2, ip, r3, lsl #2
 8004e20:	3a10      	subs	r2, #16
 8004e22:	68d3      	ldr	r3, [r2, #12]
 8004e24:	6895      	ldr	r5, [r2, #8]
 8004e26:	436b      	muls	r3, r5
 8004e28:	6855      	ldr	r5, [r2, #4]
 8004e2a:	436b      	muls	r3, r5
 8004e2c:	f852 5910 	ldr.w	r5, [r2], #-16
 8004e30:	436b      	muls	r3, r5
 8004e32:	4359      	muls	r1, r3
 8004e34:	1e40      	subs	r0, r0, #1
 8004e36:	d1f4      	bne.n	8004e22 <forward_bn+0xaa>
 8004e38:	68e0      	ldr	r0, [r4, #12]
 8004e3a:	6842      	ldr	r2, [r0, #4]
 8004e3c:	69a0      	ldr	r0, [r4, #24]
 8004e3e:	6883      	ldr	r3, [r0, #8]
 8004e40:	f8d8 4000 	ldr.w	r4, [r8]
 8004e44:	6838      	ldr	r0, [r7, #0]
 8004e46:	68a4      	ldr	r4, [r4, #8]
 8004e48:	6887      	ldr	r7, [r0, #8]
 8004e4a:	2e00      	cmp	r6, #0
 8004e4c:	d06c      	beq.n	8004f28 <forward_bn+0x1b0>
 8004e4e:	69b0      	ldr	r0, [r6, #24]
 8004e50:	6886      	ldr	r6, [r0, #8]
 8004e52:	46b8      	mov	r8, r7
 8004e54:	2700      	movs	r7, #0
 8004e56:	2900      	cmp	r1, #0
 8004e58:	f000 8064 	beq.w	8004f24 <forward_bn+0x1ac>
 8004e5c:	eb02 0c07 	add.w	ip, r2, r7
 8004e60:	4567      	cmp	r7, ip
 8004e62:	46be      	mov	lr, r7
 8004e64:	d25b      	bcs.n	8004f1e <forward_bn+0x1a6>
 8004e66:	f012 0003 	ands.w	r0, r2, #3
 8004e6a:	eb04 058e 	add.w	r5, r4, lr, lsl #2
 8004e6e:	eb03 098e 	add.w	r9, r3, lr, lsl #2
 8004e72:	46c2      	mov	sl, r8
 8004e74:	46b3      	mov	fp, r6
 8004e76:	d015      	beq.n	8004ea4 <forward_bn+0x12c>
 8004e78:	ed99 0a00 	vldr	s0, [r9]
 8004e7c:	edda 0a00 	vldr	s1, [sl]
 8004e80:	ed9b 1a00 	vldr	s2, [fp]
 8004e84:	ee00 1a20 	vmla.f32	s2, s0, s1
 8004e88:	ed85 1a00 	vstr	s2, [r5]
 8004e8c:	1e40      	subs	r0, r0, #1
 8004e8e:	1d2d      	adds	r5, r5, #4
 8004e90:	2800      	cmp	r0, #0
 8004e92:	f10e 0e01 	add.w	lr, lr, #1
 8004e96:	f10b 0b04 	add.w	fp, fp, #4
 8004e9a:	f10a 0a04 	add.w	sl, sl, #4
 8004e9e:	f109 0904 	add.w	r9, r9, #4
 8004ea2:	d1e9      	bne.n	8004e78 <forward_bn+0x100>
 8004ea4:	0890      	lsrs	r0, r2, #2
 8004ea6:	d03a      	beq.n	8004f1e <forward_bn+0x1a6>
 8004ea8:	ebae 0707 	sub.w	r7, lr, r7
 8004eac:	eb03 058e 	add.w	r5, r3, lr, lsl #2
 8004eb0:	eb08 0987 	add.w	r9, r8, r7, lsl #2
 8004eb4:	eb06 0787 	add.w	r7, r6, r7, lsl #2
 8004eb8:	eb04 0e8e 	add.w	lr, r4, lr, lsl #2
 8004ebc:	ed95 2a00 	vldr	s4, [r5]
 8004ec0:	ed99 1a00 	vldr	s2, [r9]
 8004ec4:	ed97 0a00 	vldr	s0, [r7]
 8004ec8:	ee02 0a01 	vmla.f32	s0, s4, s2
 8004ecc:	ed8e 0a00 	vstr	s0, [lr]
 8004ed0:	edd5 2a01 	vldr	s5, [r5, #4]
 8004ed4:	edd9 1a01 	vldr	s3, [r9, #4]
 8004ed8:	edd7 0a01 	vldr	s1, [r7, #4]
 8004edc:	ee42 0aa1 	vmla.f32	s1, s5, s3
 8004ee0:	edce 0a01 	vstr	s1, [lr, #4]
 8004ee4:	ed95 2a02 	vldr	s4, [r5, #8]
 8004ee8:	ed99 1a02 	vldr	s2, [r9, #8]
 8004eec:	ed97 0a02 	vldr	s0, [r7, #8]
 8004ef0:	ee02 0a01 	vmla.f32	s0, s4, s2
 8004ef4:	ed8e 0a02 	vstr	s0, [lr, #8]
 8004ef8:	edd5 1a03 	vldr	s3, [r5, #12]
 8004efc:	edd9 0a03 	vldr	s1, [r9, #12]
 8004f00:	edd7 2a03 	vldr	s5, [r7, #12]
 8004f04:	ee41 2aa0 	vmla.f32	s5, s3, s1
 8004f08:	1e40      	subs	r0, r0, #1
 8004f0a:	3710      	adds	r7, #16
 8004f0c:	3510      	adds	r5, #16
 8004f0e:	edce 2a03 	vstr	s5, [lr, #12]
 8004f12:	2800      	cmp	r0, #0
 8004f14:	f10e 0e10 	add.w	lr, lr, #16
 8004f18:	f109 0910 	add.w	r9, r9, #16
 8004f1c:	d1ce      	bne.n	8004ebc <forward_bn+0x144>
 8004f1e:	4667      	mov	r7, ip
 8004f20:	428f      	cmp	r7, r1
 8004f22:	d39b      	bcc.n	8004e5c <forward_bn+0xe4>
 8004f24:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f28:	2900      	cmp	r1, #0
 8004f2a:	f04f 0c00 	mov.w	ip, #0
 8004f2e:	d0f9      	beq.n	8004f24 <forward_bn+0x1ac>
 8004f30:	4616      	mov	r6, r2
 8004f32:	4698      	mov	r8, r3
 8004f34:	eb06 020c 	add.w	r2, r6, ip
 8004f38:	4594      	cmp	ip, r2
 8004f3a:	4663      	mov	r3, ip
 8004f3c:	d24c      	bcs.n	8004fd8 <forward_bn+0x260>
 8004f3e:	f016 0003 	ands.w	r0, r6, #3
 8004f42:	eb04 0e83 	add.w	lr, r4, r3, lsl #2
 8004f46:	eb08 0583 	add.w	r5, r8, r3, lsl #2
 8004f4a:	46b9      	mov	r9, r7
 8004f4c:	f000 8011 	beq.w	8004f72 <forward_bn+0x1fa>
 8004f50:	ed95 0a00 	vldr	s0, [r5]
 8004f54:	edd9 0a00 	vldr	s1, [r9]
 8004f58:	ee60 0a20 	vmul.f32	s1, s0, s1
 8004f5c:	1c5b      	adds	r3, r3, #1
 8004f5e:	1e40      	subs	r0, r0, #1
 8004f60:	1d2d      	adds	r5, r5, #4
 8004f62:	edce 0a00 	vstr	s1, [lr]
 8004f66:	2800      	cmp	r0, #0
 8004f68:	f109 0904 	add.w	r9, r9, #4
 8004f6c:	f10e 0e04 	add.w	lr, lr, #4
 8004f70:	d1ee      	bne.n	8004f50 <forward_bn+0x1d8>
 8004f72:	08b0      	lsrs	r0, r6, #2
 8004f74:	f000 8030 	beq.w	8004fd8 <forward_bn+0x260>
 8004f78:	eb08 0e83 	add.w	lr, r8, r3, lsl #2
 8004f7c:	eba3 050c 	sub.w	r5, r3, ip
 8004f80:	eb07 0c85 	add.w	ip, r7, r5, lsl #2
 8004f84:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004f88:	ed9e 1a00 	vldr	s2, [lr]
 8004f8c:	ed9c 0a00 	vldr	s0, [ip]
 8004f90:	ee21 0a00 	vmul.f32	s0, s2, s0
 8004f94:	ed83 0a00 	vstr	s0, [r3]
 8004f98:	edde 1a01 	vldr	s3, [lr, #4]
 8004f9c:	eddc 0a01 	vldr	s1, [ip, #4]
 8004fa0:	ee21 0aa0 	vmul.f32	s0, s3, s1
 8004fa4:	ed83 0a01 	vstr	s0, [r3, #4]
 8004fa8:	ed9e 1a02 	vldr	s2, [lr, #8]
 8004fac:	ed9c 0a02 	vldr	s0, [ip, #8]
 8004fb0:	ee21 0a00 	vmul.f32	s0, s2, s0
 8004fb4:	ed83 0a02 	vstr	s0, [r3, #8]
 8004fb8:	edde 0a03 	vldr	s1, [lr, #12]
 8004fbc:	eddc 1a03 	vldr	s3, [ip, #12]
 8004fc0:	ee20 0aa1 	vmul.f32	s0, s1, s3
 8004fc4:	ed83 0a03 	vstr	s0, [r3, #12]
 8004fc8:	1e40      	subs	r0, r0, #1
 8004fca:	3310      	adds	r3, #16
 8004fcc:	2800      	cmp	r0, #0
 8004fce:	f10c 0c10 	add.w	ip, ip, #16
 8004fd2:	f10e 0e10 	add.w	lr, lr, #16
 8004fd6:	d1d7      	bne.n	8004f88 <forward_bn+0x210>
 8004fd8:	4694      	mov	ip, r2
 8004fda:	458c      	cmp	ip, r1
 8004fdc:	d3aa      	bcc.n	8004f34 <forward_bn+0x1bc>
 8004fde:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08004fe2 <forward_lrn>:
 8004fe2:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004fe4:	4604      	mov	r4, r0
 8004fe6:	b081      	sub	sp, #4
 8004fe8:	6962      	ldr	r2, [r4, #20]
 8004fea:	8811      	ldrh	r1, [r2, #0]
 8004fec:	2900      	cmp	r1, #0
 8004fee:	bf1a      	itte	ne
 8004ff0:	6850      	ldrne	r0, [r2, #4]
 8004ff2:	1d00      	addne	r0, r0, #4
 8004ff4:	2004      	moveq	r0, #4
 8004ff6:	6800      	ldr	r0, [r0, #0]
 8004ff8:	2800      	cmp	r0, #0
 8004ffa:	bf14      	ite	ne
 8004ffc:	6805      	ldrne	r5, [r0, #0]
 8004ffe:	2500      	moveq	r5, #0
 8005000:	2902      	cmp	r1, #2
 8005002:	bfa6      	itte	ge
 8005004:	6850      	ldrge	r0, [r2, #4]
 8005006:	3010      	addge	r0, #16
 8005008:	2004      	movlt	r0, #4
 800500a:	6800      	ldr	r0, [r0, #0]
 800500c:	2800      	cmp	r0, #0
 800500e:	bf19      	ittee	ne
 8005010:	6800      	ldrne	r0, [r0, #0]
 8005012:	f100 0618 	addne.w	r6, r0, #24
 8005016:	2100      	moveq	r1, #0
 8005018:	f101 0618 	addeq.w	r6, r1, #24
 800501c:	68e9      	ldr	r1, [r5, #12]
 800501e:	684f      	ldr	r7, [r1, #4]
 8005020:	f105 0008 	add.w	r0, r5, #8
 8005024:	f7ff fcde 	bl	80049e4 <ai_shape_get_size>
 8005028:	4602      	mov	r2, r0
 800502a:	69a0      	ldr	r0, [r4, #24]
 800502c:	0840      	lsrs	r0, r0, #1
 800502e:	9000      	str	r0, [sp, #0]
 8005030:	463b      	mov	r3, r7
 8005032:	69a8      	ldr	r0, [r5, #24]
 8005034:	ed94 1a09 	vldr	s2, [r4, #36]	; 0x24
 8005038:	edd4 0a08 	vldr	s1, [r4, #32]
 800503c:	ed94 0a07 	vldr	s0, [r4, #28]
 8005040:	6834      	ldr	r4, [r6, #0]
 8005042:	6881      	ldr	r1, [r0, #8]
 8005044:	68a0      	ldr	r0, [r4, #8]
 8005046:	f7ff fe6f 	bl	8004d28 <func_lrn_array_f32>
 800504a:	b001      	add	sp, #4
 800504c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800504e <forward_norm>:
 800504e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005052:	4604      	mov	r4, r0
 8005054:	b082      	sub	sp, #8
 8005056:	6962      	ldr	r2, [r4, #20]
 8005058:	8811      	ldrh	r1, [r2, #0]
 800505a:	2900      	cmp	r1, #0
 800505c:	bf1a      	itte	ne
 800505e:	6850      	ldrne	r0, [r2, #4]
 8005060:	1d00      	addne	r0, r0, #4
 8005062:	2004      	moveq	r0, #4
 8005064:	6800      	ldr	r0, [r0, #0]
 8005066:	2800      	cmp	r0, #0
 8005068:	bf14      	ite	ne
 800506a:	6805      	ldrne	r5, [r0, #0]
 800506c:	2500      	moveq	r5, #0
 800506e:	2902      	cmp	r1, #2
 8005070:	bfa6      	itte	ge
 8005072:	6850      	ldrge	r0, [r2, #4]
 8005074:	3010      	addge	r0, #16
 8005076:	2004      	movlt	r0, #4
 8005078:	6800      	ldr	r0, [r0, #0]
 800507a:	2800      	cmp	r0, #0
 800507c:	bf19      	ittee	ne
 800507e:	6800      	ldrne	r0, [r0, #0]
 8005080:	f100 0618 	addne.w	r6, r0, #24
 8005084:	2100      	moveq	r1, #0
 8005086:	f101 0618 	addeq.w	r6, r1, #24
 800508a:	68e9      	ldr	r1, [r5, #12]
 800508c:	7e20      	ldrb	r0, [r4, #24]
 800508e:	f851 8020 	ldr.w	r8, [r1, r0, lsl #2]
 8005092:	6969      	ldr	r1, [r5, #20]
 8005094:	f851 2020 	ldr.w	r2, [r1, r0, lsl #2]
 8005098:	6809      	ldr	r1, [r1, #0]
 800509a:	fb92 f7f1 	sdiv	r7, r2, r1
 800509e:	f105 0008 	add.w	r0, r5, #8
 80050a2:	f7ff fc9f 	bl	80049e4 <ai_shape_get_size>
 80050a6:	4603      	mov	r3, r0
 80050a8:	fb07 f008 	mul.w	r0, r7, r8
 80050ac:	fbb3 f1f0 	udiv	r1, r3, r0
 80050b0:	f894 0020 	ldrb.w	r0, [r4, #32]
 80050b4:	2800      	cmp	r0, #0
 80050b6:	bf1a      	itte	ne
 80050b8:	ee00 8a10 	vmovne	s0, r8
 80050bc:	eef8 0a40 	vcvtne.f32.u32	s1, s0
 80050c0:	eef7 0a00 	vmoveq.f32	s1, #112	; 0x3f800000  1.0
 80050c4:	ed94 0a07 	vldr	s0, [r4, #28]
 80050c8:	eeb0 1a00 	vmov.f32	s2, #0	; 0x40000000  2.0
 80050cc:	eeb4 0a41 	vcmp.f32	s0, s2
 80050d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80050d4:	bf08      	it	eq
 80050d6:	2f01      	cmpeq	r7, #1
 80050d8:	d10a      	bne.n	80050f0 <forward_norm+0xa2>
 80050da:	69a8      	ldr	r0, [r5, #24]
 80050dc:	6834      	ldr	r4, [r6, #0]
 80050de:	6881      	ldr	r1, [r0, #8]
 80050e0:	68a0      	ldr	r0, [r4, #8]
 80050e2:	4642      	mov	r2, r8
 80050e4:	b002      	add	sp, #8
 80050e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80050ea:	eeb0 0a60 	vmov.f32	s0, s1
 80050ee:	e5a9      	b.n	8004c44 <func_norm_l2_fast_array_f32>
 80050f0:	9100      	str	r1, [sp, #0]
 80050f2:	4643      	mov	r3, r8
 80050f4:	69a8      	ldr	r0, [r5, #24]
 80050f6:	6834      	ldr	r4, [r6, #0]
 80050f8:	6881      	ldr	r1, [r0, #8]
 80050fa:	68a0      	ldr	r0, [r4, #8]
 80050fc:	463a      	mov	r2, r7
 80050fe:	f7ff fd1f 	bl	8004b40 <func_norm_array_f32>
 8005102:	b002      	add	sp, #8
 8005104:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08005108 <pool_func_mp_array_f32>:
 8005108:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800510c:	4688      	mov	r8, r1
 800510e:	b08b      	sub	sp, #44	; 0x2c
 8005110:	f8d0 b008 	ldr.w	fp, [r0, #8]
 8005114:	991b      	ldr	r1, [sp, #108]	; 0x6c
 8005116:	f9bd e064 	ldrsh.w	lr, [sp, #100]	; 0x64
 800511a:	9f17      	ldr	r7, [sp, #92]	; 0x5c
 800511c:	9c15      	ldr	r4, [sp, #84]	; 0x54
 800511e:	1e48      	subs	r0, r1, #1
 8005120:	fb10 fe0e 	smulbb	lr, r0, lr
 8005124:	4615      	mov	r5, r2
 8005126:	ebae 0e07 	sub.w	lr, lr, r7
 800512a:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800512c:	f8bd 0058 	ldrh.w	r0, [sp, #88]	; 0x58
 8005130:	6892      	ldr	r2, [r2, #8]
 8005132:	44a6      	add	lr, r4
 8005134:	f1ae 0601 	sub.w	r6, lr, #1
 8005138:	469c      	mov	ip, r3
 800513a:	1b76      	subs	r6, r6, r5
 800513c:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800513e:	4338      	orrs	r0, r7
 8005140:	f040 80dd 	bne.w	80052fe <pool_func_mp_array_f32+0x1f6>
 8005144:	f9bd 0068 	ldrsh.w	r0, [sp, #104]	; 0x68
 8005148:	f1a0 0901 	sub.w	r9, r0, #1
 800514c:	f9bd 0058 	ldrsh.w	r0, [sp, #88]	; 0x58
 8005150:	fb19 f903 	smulbb	r9, r9, r3
 8005154:	eba9 0900 	sub.w	r9, r9, r0
 8005158:	f9bd 0050 	ldrsh.w	r0, [sp, #80]	; 0x50
 800515c:	4448      	add	r0, r9
 800515e:	1e40      	subs	r0, r0, #1
 8005160:	eba0 0008 	sub.w	r0, r0, r8
 8005164:	b200      	sxth	r0, r0
 8005166:	2800      	cmp	r0, #0
 8005168:	bf44      	itt	mi
 800516a:	b236      	sxthmi	r6, r6
 800516c:	2e00      	cmpmi	r6, #0
 800516e:	f140 80c6 	bpl.w	80052fe <pool_func_mp_array_f32+0x1f6>
 8005172:	2000      	movs	r0, #0
 8005174:	000d      	movs	r5, r1
 8005176:	9008      	str	r0, [sp, #32]
 8005178:	f000 8178 	beq.w	800546c <pool_func_mp_array_f32+0x364>
 800517c:	b224      	sxth	r4, r4
 800517e:	f8ad 4006 	strh.w	r4, [sp, #6]
 8005182:	9002      	str	r0, [sp, #8]
 8005184:	9007      	str	r0, [sp, #28]
 8005186:	9106      	str	r1, [sp, #24]
 8005188:	ea4f 040c 	mov.w	r4, ip
 800518c:	ed9f 0ab9 	vldr	s0, [pc, #740]	; 8005474 <.text_3>
 8005190:	f8bd 0068 	ldrh.w	r0, [sp, #104]	; 0x68
 8005194:	f9bd 7006 	ldrsh.w	r7, [sp, #6]
 8005198:	2800      	cmp	r0, #0
 800519a:	f000 8096 	beq.w	80052ca <pool_func_mp_array_f32+0x1c2>
 800519e:	9907      	ldr	r1, [sp, #28]
 80051a0:	9808      	ldr	r0, [sp, #32]
 80051a2:	f9bd 6050 	ldrsh.w	r6, [sp, #80]	; 0x50
 80051a6:	f8bd 5068 	ldrh.w	r5, [sp, #104]	; 0x68
 80051aa:	9103      	str	r1, [sp, #12]
 80051ac:	f04f 0a00 	mov.w	sl, #0
 80051b0:	f8bd 1064 	ldrh.w	r1, [sp, #100]	; 0x64
 80051b4:	f8ad c002 	strh.w	ip, [sp, #2]
 80051b8:	4348      	muls	r0, r1
 80051ba:	b200      	sxth	r0, r0
 80051bc:	900a      	str	r0, [sp, #40]	; 0x28
 80051be:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
 80051c2:	9204      	str	r2, [sp, #16]
 80051c4:	f8ad 6000 	strh.w	r6, [sp]
 80051c8:	f8cd 5014 	str.w	r5, [sp, #20]
 80051cc:	f8ad 8004 	strh.w	r8, [sp, #4]
 80051d0:	f8bd 0002 	ldrh.w	r0, [sp, #2]
 80051d4:	f9bd e000 	ldrsh.w	lr, [sp]
 80051d8:	2100      	movs	r1, #0
 80051da:	2800      	cmp	r0, #0
 80051dc:	d05d      	beq.n	800529a <pool_func_mp_array_f32+0x192>
 80051de:	9a03      	ldr	r2, [sp, #12]
 80051e0:	9804      	ldr	r0, [sp, #16]
 80051e2:	4362      	muls	r2, r4
 80051e4:	ab02      	add	r3, sp, #8
 80051e6:	eb00 0c82 	add.w	ip, r0, r2, lsl #2
 80051ea:	5e58      	ldrsh	r0, [r3, r1]
 80051ec:	9009      	str	r0, [sp, #36]	; 0x24
 80051ee:	fa0f f58a 	sxth.w	r5, sl
 80051f2:	f8bd 8004 	ldrh.w	r8, [sp, #4]
 80051f6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80051f8:	42b8      	cmp	r0, r7
 80051fa:	eef0 0a40 	vmov.f32	s1, s0
 80051fe:	da45      	bge.n	800528c <pool_func_mp_array_f32+0x184>
 8005200:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005202:	fb08 f900 	mul.w	r9, r8, r0
 8005206:	1aba      	subs	r2, r7, r2
 8005208:	4658      	mov	r0, fp
 800520a:	4575      	cmp	r5, lr
 800520c:	462e      	mov	r6, r5
 800520e:	da39      	bge.n	8005284 <pool_func_mp_array_f32+0x17c>
 8005210:	ebae 0305 	sub.w	r3, lr, r5
 8005214:	ea5f 7bc3 	movs.w	fp, r3, lsl #31
 8005218:	d50f      	bpl.n	800523a <pool_func_mp_array_f32+0x132>
 800521a:	eb09 0b06 	add.w	fp, r9, r6
 800521e:	fb0b 1b04 	mla	fp, fp, r4, r1
 8005222:	eb00 0b8b 	add.w	fp, r0, fp, lsl #2
 8005226:	ed9b 1a00 	vldr	s2, [fp]
 800522a:	eeb4 1a60 	vcmp.f32	s2, s1
 800522e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005232:	bf58      	it	pl
 8005234:	eef0 0a41 	vmovpl.f32	s1, s2
 8005238:	1c76      	adds	r6, r6, #1
 800523a:	085b      	lsrs	r3, r3, #1
 800523c:	f000 8022 	beq.w	8005284 <pool_func_mp_array_f32+0x17c>
 8005240:	eb09 0b06 	add.w	fp, r9, r6
 8005244:	fb0b 1b04 	mla	fp, fp, r4, r1
 8005248:	eb00 0b8b 	add.w	fp, r0, fp, lsl #2
 800524c:	ed9b 1a00 	vldr	s2, [fp]
 8005250:	eeb4 1a60 	vcmp.f32	s2, s1
 8005254:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005258:	bf58      	it	pl
 800525a:	eef0 0a41 	vmovpl.f32	s1, s2
 800525e:	1c76      	adds	r6, r6, #1
 8005260:	eb09 0b06 	add.w	fp, r9, r6
 8005264:	fb0b 1b04 	mla	fp, fp, r4, r1
 8005268:	eb00 0b8b 	add.w	fp, r0, fp, lsl #2
 800526c:	ed9b 1a00 	vldr	s2, [fp]
 8005270:	eeb4 1a60 	vcmp.f32	s2, s1
 8005274:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005278:	bf58      	it	pl
 800527a:	eef0 0a41 	vmovpl.f32	s1, s2
 800527e:	1c76      	adds	r6, r6, #1
 8005280:	1e5b      	subs	r3, r3, #1
 8005282:	d1dd      	bne.n	8005240 <pool_func_mp_array_f32+0x138>
 8005284:	1e52      	subs	r2, r2, #1
 8005286:	44c1      	add	r9, r8
 8005288:	d1bf      	bne.n	800520a <pool_func_mp_array_f32+0x102>
 800528a:	4683      	mov	fp, r0
 800528c:	1c49      	adds	r1, r1, #1
 800528e:	edcc 0a00 	vstr	s1, [ip]
 8005292:	42a1      	cmp	r1, r4
 8005294:	f10c 0c04 	add.w	ip, ip, #4
 8005298:	dbad      	blt.n	80051f6 <pool_func_mp_array_f32+0xee>
 800529a:	9803      	ldr	r0, [sp, #12]
 800529c:	f8bd 1000 	ldrh.w	r1, [sp]
 80052a0:	1c40      	adds	r0, r0, #1
 80052a2:	9003      	str	r0, [sp, #12]
 80052a4:	f8bd 0060 	ldrh.w	r0, [sp, #96]	; 0x60
 80052a8:	4482      	add	sl, r0
 80052aa:	f9bd 0060 	ldrsh.w	r0, [sp, #96]	; 0x60
 80052ae:	1841      	adds	r1, r0, r1
 80052b0:	f8ad 1000 	strh.w	r1, [sp]
 80052b4:	9905      	ldr	r1, [sp, #20]
 80052b6:	1e49      	subs	r1, r1, #1
 80052b8:	9105      	str	r1, [sp, #20]
 80052ba:	d189      	bne.n	80051d0 <pool_func_mp_array_f32+0xc8>
 80052bc:	f8bd c002 	ldrh.w	ip, [sp, #2]
 80052c0:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
 80052c4:	9a04      	ldr	r2, [sp, #16]
 80052c6:	f8bd 8004 	ldrh.w	r8, [sp, #4]
 80052ca:	9908      	ldr	r1, [sp, #32]
 80052cc:	f8bd 5068 	ldrh.w	r5, [sp, #104]	; 0x68
 80052d0:	f8bd 7006 	ldrh.w	r7, [sp, #6]
 80052d4:	1c49      	adds	r1, r1, #1
 80052d6:	9108      	str	r1, [sp, #32]
 80052d8:	9907      	ldr	r1, [sp, #28]
 80052da:	194d      	adds	r5, r1, r5
 80052dc:	9507      	str	r5, [sp, #28]
 80052de:	9902      	ldr	r1, [sp, #8]
 80052e0:	f8bd 5064 	ldrh.w	r5, [sp, #100]	; 0x64
 80052e4:	194d      	adds	r5, r1, r5
 80052e6:	9502      	str	r5, [sp, #8]
 80052e8:	f9bd 1064 	ldrsh.w	r1, [sp, #100]	; 0x64
 80052ec:	9d06      	ldr	r5, [sp, #24]
 80052ee:	19cf      	adds	r7, r1, r7
 80052f0:	1e6d      	subs	r5, r5, #1
 80052f2:	f8ad 7006 	strh.w	r7, [sp, #6]
 80052f6:	9506      	str	r5, [sp, #24]
 80052f8:	f000 80b8 	beq.w	800546c <pool_func_mp_array_f32+0x364>
 80052fc:	e748      	b.n	8005190 <pool_func_mp_array_f32+0x88>
 80052fe:	0008      	movs	r0, r1
 8005300:	f000 80b4 	beq.w	800546c <pool_func_mp_array_f32+0x364>
 8005304:	427f      	negs	r7, r7
 8005306:	19e4      	adds	r4, r4, r7
 8005308:	f8ad 7000 	strh.w	r7, [sp]
 800530c:	f8ad 400a 	strh.w	r4, [sp, #10]
 8005310:	2000      	movs	r0, #0
 8005312:	9008      	str	r0, [sp, #32]
 8005314:	f8cd 101c 	str.w	r1, [sp, #28]
 8005318:	ed9f 0a56 	vldr	s0, [pc, #344]	; 8005474 <.text_3>
 800531c:	f8bd 0068 	ldrh.w	r0, [sp, #104]	; 0x68
 8005320:	f9bd a00a 	ldrsh.w	sl, [sp, #10]
 8005324:	2800      	cmp	r0, #0
 8005326:	f000 8089 	beq.w	800543c <pool_func_mp_array_f32+0x334>
 800532a:	f9bd e058 	ldrsh.w	lr, [sp, #88]	; 0x58
 800532e:	f9bd 7050 	ldrsh.w	r7, [sp, #80]	; 0x50
 8005332:	9908      	ldr	r1, [sp, #32]
 8005334:	f8bd 4068 	ldrh.w	r4, [sp, #104]	; 0x68
 8005338:	9103      	str	r1, [sp, #12]
 800533a:	f1ce 0e00 	rsb	lr, lr, #0
 800533e:	4477      	add	r7, lr
 8005340:	f8ad c002 	strh.w	ip, [sp, #2]
 8005344:	f8ad 3060 	strh.w	r3, [sp, #96]	; 0x60
 8005348:	9204      	str	r2, [sp, #16]
 800534a:	f8ad e006 	strh.w	lr, [sp, #6]
 800534e:	f8ad 7008 	strh.w	r7, [sp, #8]
 8005352:	9406      	str	r4, [sp, #24]
 8005354:	f8ad 8004 	strh.w	r8, [sp, #4]
 8005358:	f8bd 1002 	ldrh.w	r1, [sp, #2]
 800535c:	f9bd 0008 	ldrsh.w	r0, [sp, #8]
 8005360:	2600      	movs	r6, #0
 8005362:	2900      	cmp	r1, #0
 8005364:	d04e      	beq.n	8005404 <pool_func_mp_array_f32+0x2fc>
 8005366:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800536a:	9b03      	ldr	r3, [sp, #12]
 800536c:	9904      	ldr	r1, [sp, #16]
 800536e:	f9bd 4006 	ldrsh.w	r4, [sp, #6]
 8005372:	435a      	muls	r2, r3
 8005374:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8005378:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 800537c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8005380:	f8cd 1014 	str.w	r1, [sp, #20]
 8005384:	f9bd 1000 	ldrsh.w	r1, [sp]
 8005388:	4551      	cmp	r1, sl
 800538a:	eef0 0a40 	vmov.f32	s1, s0
 800538e:	da2a      	bge.n	80053e6 <pool_func_mp_array_f32+0x2de>
 8005390:	fb03 f901 	mul.w	r9, r3, r1
 8005394:	f8ad 5002 	strh.w	r5, [sp, #2]
 8005398:	4284      	cmp	r4, r0
 800539a:	4625      	mov	r5, r4
 800539c:	da1d      	bge.n	80053da <pool_func_mp_array_f32+0x2d2>
 800539e:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 80053a2:	46de      	mov	lr, fp
 80053a4:	2900      	cmp	r1, #0
 80053a6:	bf58      	it	pl
 80053a8:	2d00      	cmppl	r5, #0
 80053aa:	d412      	bmi.n	80053d2 <pool_func_mp_array_f32+0x2ca>
 80053ac:	42b9      	cmp	r1, r7
 80053ae:	bfb8      	it	lt
 80053b0:	429d      	cmplt	r5, r3
 80053b2:	da0e      	bge.n	80053d2 <pool_func_mp_array_f32+0x2ca>
 80053b4:	eb09 0b05 	add.w	fp, r9, r5
 80053b8:	fb0b 6b02 	mla	fp, fp, r2, r6
 80053bc:	eb0e 0b8b 	add.w	fp, lr, fp, lsl #2
 80053c0:	ed9b 1a00 	vldr	s2, [fp]
 80053c4:	eeb4 1a60 	vcmp.f32	s2, s1
 80053c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053cc:	bf58      	it	pl
 80053ce:	eef0 0a41 	vmovpl.f32	s1, s2
 80053d2:	1c6d      	adds	r5, r5, #1
 80053d4:	4285      	cmp	r5, r0
 80053d6:	dbe5      	blt.n	80053a4 <pool_func_mp_array_f32+0x29c>
 80053d8:	46f3      	mov	fp, lr
 80053da:	1c49      	adds	r1, r1, #1
 80053dc:	4551      	cmp	r1, sl
 80053de:	4499      	add	r9, r3
 80053e0:	dbda      	blt.n	8005398 <pool_func_mp_array_f32+0x290>
 80053e2:	f8bd 5002 	ldrh.w	r5, [sp, #2]
 80053e6:	1c76      	adds	r6, r6, #1
 80053e8:	9905      	ldr	r1, [sp, #20]
 80053ea:	edc1 0a00 	vstr	s1, [r1]
 80053ee:	9905      	ldr	r1, [sp, #20]
 80053f0:	1d0f      	adds	r7, r1, #4
 80053f2:	4296      	cmp	r6, r2
 80053f4:	9705      	str	r7, [sp, #20]
 80053f6:	dbc5      	blt.n	8005384 <pool_func_mp_array_f32+0x27c>
 80053f8:	f8ad 2002 	strh.w	r2, [sp, #2]
 80053fc:	f8ad 4006 	strh.w	r4, [sp, #6]
 8005400:	f8ad 3004 	strh.w	r3, [sp, #4]
 8005404:	9803      	ldr	r0, [sp, #12]
 8005406:	f9bd 1060 	ldrsh.w	r1, [sp, #96]	; 0x60
 800540a:	1c40      	adds	r0, r0, #1
 800540c:	9003      	str	r0, [sp, #12]
 800540e:	f8bd 0008 	ldrh.w	r0, [sp, #8]
 8005412:	1808      	adds	r0, r1, r0
 8005414:	f8ad 0008 	strh.w	r0, [sp, #8]
 8005418:	f9bd 1060 	ldrsh.w	r1, [sp, #96]	; 0x60
 800541c:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8005420:	1808      	adds	r0, r1, r0
 8005422:	f8ad 0006 	strh.w	r0, [sp, #6]
 8005426:	9806      	ldr	r0, [sp, #24]
 8005428:	1e40      	subs	r0, r0, #1
 800542a:	9006      	str	r0, [sp, #24]
 800542c:	d194      	bne.n	8005358 <pool_func_mp_array_f32+0x250>
 800542e:	f8bd c002 	ldrh.w	ip, [sp, #2]
 8005432:	f8bd 3060 	ldrh.w	r3, [sp, #96]	; 0x60
 8005436:	9a04      	ldr	r2, [sp, #16]
 8005438:	f8bd 8004 	ldrh.w	r8, [sp, #4]
 800543c:	9908      	ldr	r1, [sp, #32]
 800543e:	f8bd 4068 	ldrh.w	r4, [sp, #104]	; 0x68
 8005442:	f8bd 700a 	ldrh.w	r7, [sp, #10]
 8005446:	190c      	adds	r4, r1, r4
 8005448:	9408      	str	r4, [sp, #32]
 800544a:	f8bd 4000 	ldrh.w	r4, [sp]
 800544e:	f9bd 1064 	ldrsh.w	r1, [sp, #100]	; 0x64
 8005452:	19cf      	adds	r7, r1, r7
 8005454:	f9bd 1064 	ldrsh.w	r1, [sp, #100]	; 0x64
 8005458:	f8ad 700a 	strh.w	r7, [sp, #10]
 800545c:	190c      	adds	r4, r1, r4
 800545e:	f8ad 4000 	strh.w	r4, [sp]
 8005462:	9c07      	ldr	r4, [sp, #28]
 8005464:	1e64      	subs	r4, r4, #1
 8005466:	9407      	str	r4, [sp, #28]
 8005468:	f47f af58 	bne.w	800531c <pool_func_mp_array_f32+0x214>
 800546c:	b00b      	add	sp, #44	; 0x2c
 800546e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08005474 <.text_3>:
 8005474:	cf000000 	.word	0xcf000000

08005478 <pool_func_ap_array_f32>:
 8005478:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800547c:	468b      	mov	fp, r1
 800547e:	b08c      	sub	sp, #48	; 0x30
 8005480:	4699      	mov	r9, r3
 8005482:	991c      	ldr	r1, [sp, #112]	; 0x70
 8005484:	f9bd c068 	ldrsh.w	ip, [sp, #104]	; 0x68
 8005488:	9b18      	ldr	r3, [sp, #96]	; 0x60
 800548a:	4692      	mov	sl, r2
 800548c:	1e4f      	subs	r7, r1, #1
 800548e:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8005490:	9d1d      	ldr	r5, [sp, #116]	; 0x74
 8005492:	f8dd 8064 	ldr.w	r8, [sp, #100]	; 0x64
 8005496:	6880      	ldr	r0, [r0, #8]
 8005498:	68ad      	ldr	r5, [r5, #8]
 800549a:	fb17 fc0c 	smulbb	ip, r7, ip
 800549e:	ebac 0c03 	sub.w	ip, ip, r3
 80054a2:	f8bd 705c 	ldrh.w	r7, [sp, #92]	; 0x5c
 80054a6:	4494      	add	ip, r2
 80054a8:	f1ac 0401 	sub.w	r4, ip, #1
 80054ac:	431f      	orrs	r7, r3
 80054ae:	eba4 060a 	sub.w	r6, r4, sl
 80054b2:	f040 80dc 	bne.w	800566e <pool_func_ap_array_f32+0x1f6>
 80054b6:	f9bd 706c 	ldrsh.w	r7, [sp, #108]	; 0x6c
 80054ba:	1e7c      	subs	r4, r7, #1
 80054bc:	f9bd 705c 	ldrsh.w	r7, [sp, #92]	; 0x5c
 80054c0:	fb14 f408 	smulbb	r4, r4, r8
 80054c4:	1be4      	subs	r4, r4, r7
 80054c6:	f9bd 7054 	ldrsh.w	r7, [sp, #84]	; 0x54
 80054ca:	193c      	adds	r4, r7, r4
 80054cc:	1e64      	subs	r4, r4, #1
 80054ce:	eba4 040b 	sub.w	r4, r4, fp
 80054d2:	b224      	sxth	r4, r4
 80054d4:	2c00      	cmp	r4, #0
 80054d6:	bf44      	itt	mi
 80054d8:	b234      	sxthmi	r4, r6
 80054da:	2c00      	cmpmi	r4, #0
 80054dc:	f140 80c7 	bpl.w	800566e <pool_func_ap_array_f32+0x1f6>
 80054e0:	2400      	movs	r4, #0
 80054e2:	000b      	movs	r3, r1
 80054e4:	9409      	str	r4, [sp, #36]	; 0x24
 80054e6:	f000 81af 	beq.w	8005848 <pool_func_ap_array_f32+0x3d0>
 80054ea:	b212      	sxth	r2, r2
 80054ec:	f8ad 2004 	strh.w	r2, [sp, #4]
 80054f0:	9408      	str	r4, [sp, #32]
 80054f2:	9407      	str	r4, [sp, #28]
 80054f4:	f8cd 1018 	str.w	r1, [sp, #24]
 80054f8:	f8bd 106c 	ldrh.w	r1, [sp, #108]	; 0x6c
 80054fc:	f9bd e004 	ldrsh.w	lr, [sp, #4]
 8005500:	2900      	cmp	r1, #0
 8005502:	f000 809a 	beq.w	800563a <pool_func_ap_array_f32+0x1c2>
 8005506:	9907      	ldr	r1, [sp, #28]
 8005508:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800550a:	f9bd 4054 	ldrsh.w	r4, [sp, #84]	; 0x54
 800550e:	f8bd 306c 	ldrh.w	r3, [sp, #108]	; 0x6c
 8005512:	9102      	str	r1, [sp, #8]
 8005514:	2700      	movs	r7, #0
 8005516:	f8bd 1068 	ldrh.w	r1, [sp, #104]	; 0x68
 800551a:	434a      	muls	r2, r1
 800551c:	b212      	sxth	r2, r2
 800551e:	ae08      	add	r6, sp, #32
 8005520:	920b      	str	r2, [sp, #44]	; 0x2c
 8005522:	46ca      	mov	sl, r9
 8005524:	5ff1      	ldrsh	r1, [r6, r7]
 8005526:	910a      	str	r1, [sp, #40]	; 0x28
 8005528:	f8ad 9002 	strh.w	r9, [sp, #2]
 800552c:	f8ad 8064 	strh.w	r8, [sp, #100]	; 0x64
 8005530:	9505      	str	r5, [sp, #20]
 8005532:	f8ad 4000 	strh.w	r4, [sp]
 8005536:	9303      	str	r3, [sp, #12]
 8005538:	f8bd 1002 	ldrh.w	r1, [sp, #2]
 800553c:	f9bd c000 	ldrsh.w	ip, [sp]
 8005540:	2200      	movs	r2, #0
 8005542:	2900      	cmp	r1, #0
 8005544:	d063      	beq.n	800560e <pool_func_ap_array_f32+0x196>
 8005546:	9d02      	ldr	r5, [sp, #8]
 8005548:	9905      	ldr	r1, [sp, #20]
 800554a:	f8cd e010 	str.w	lr, [sp, #16]
 800554e:	fb05 f50a 	mul.w	r5, r5, sl
 8005552:	eb01 0585 	add.w	r5, r1, r5, lsl #2
 8005556:	f8ad b006 	strh.w	fp, [sp, #6]
 800555a:	990a      	ldr	r1, [sp, #40]	; 0x28
 800555c:	9b04      	ldr	r3, [sp, #16]
 800555e:	4299      	cmp	r1, r3
 8005560:	ed9f 0abb 	vldr	s0, [pc, #748]	; 8005850 <.text_5>
 8005564:	eddf 0aba 	vldr	s1, [pc, #744]	; 8005850 <.text_5>
 8005568:	da43      	bge.n	80055f2 <pool_func_ap_array_f32+0x17a>
 800556a:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
 800556c:	f8bd b006 	ldrh.w	fp, [sp, #6]
 8005570:	eba3 0804 	sub.w	r8, r3, r4
 8005574:	fb01 f10b 	mul.w	r1, r1, fp
 8005578:	4603      	mov	r3, r0
 800557a:	ee10 ea90 	vmov	lr, s1
 800557e:	b23c      	sxth	r4, r7
 8005580:	4564      	cmp	r4, ip
 8005582:	46b9      	mov	r9, r7
 8005584:	da2e      	bge.n	80055e4 <pool_func_ap_array_f32+0x16c>
 8005586:	ebac 0004 	sub.w	r0, ip, r4
 800558a:	44e6      	add	lr, ip
 800558c:	07c6      	lsls	r6, r0, #31
 800558e:	ebae 0e04 	sub.w	lr, lr, r4
 8005592:	d50a      	bpl.n	80055aa <pool_func_ap_array_f32+0x132>
 8005594:	190c      	adds	r4, r1, r4
 8005596:	fb04 240a 	mla	r4, r4, sl, r2
 800559a:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800559e:	f109 0901 	add.w	r9, r9, #1
 80055a2:	edd4 0a00 	vldr	s1, [r4]
 80055a6:	ee30 0a20 	vadd.f32	s0, s0, s1
 80055aa:	0840      	lsrs	r0, r0, #1
 80055ac:	f000 801a 	beq.w	80055e4 <pool_func_ap_array_f32+0x16c>
 80055b0:	fa01 f489 	sxtah	r4, r1, r9
 80055b4:	f109 0901 	add.w	r9, r9, #1
 80055b8:	fb04 240a 	mla	r4, r4, sl, r2
 80055bc:	fa01 f689 	sxtah	r6, r1, r9
 80055c0:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 80055c4:	fb06 260a 	mla	r6, r6, sl, r2
 80055c8:	edd4 0a00 	vldr	s1, [r4]
 80055cc:	eb03 0486 	add.w	r4, r3, r6, lsl #2
 80055d0:	ee30 0a20 	vadd.f32	s0, s0, s1
 80055d4:	ed94 1a00 	vldr	s2, [r4]
 80055d8:	1e40      	subs	r0, r0, #1
 80055da:	ee30 0a01 	vadd.f32	s0, s0, s2
 80055de:	f109 0901 	add.w	r9, r9, #1
 80055e2:	d1e5      	bne.n	80055b0 <pool_func_ap_array_f32+0x138>
 80055e4:	f1b8 0801 	subs.w	r8, r8, #1
 80055e8:	4459      	add	r1, fp
 80055ea:	d1c8      	bne.n	800557e <pool_func_ap_array_f32+0x106>
 80055ec:	4618      	mov	r0, r3
 80055ee:	ee00 ea90 	vmov	s1, lr
 80055f2:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 80055f6:	ee80 0a20 	vdiv.f32	s0, s0, s1
 80055fa:	ed85 0a00 	vstr	s0, [r5]
 80055fe:	1c52      	adds	r2, r2, #1
 8005600:	1d2d      	adds	r5, r5, #4
 8005602:	4552      	cmp	r2, sl
 8005604:	dba9      	blt.n	800555a <pool_func_ap_array_f32+0xe2>
 8005606:	f8dd e010 	ldr.w	lr, [sp, #16]
 800560a:	f8bd b006 	ldrh.w	fp, [sp, #6]
 800560e:	9902      	ldr	r1, [sp, #8]
 8005610:	f9bd 2064 	ldrsh.w	r2, [sp, #100]	; 0x64
 8005614:	1c49      	adds	r1, r1, #1
 8005616:	9102      	str	r1, [sp, #8]
 8005618:	f8bd 1000 	ldrh.w	r1, [sp]
 800561c:	1851      	adds	r1, r2, r1
 800561e:	f8ad 1000 	strh.w	r1, [sp]
 8005622:	f9bd 1064 	ldrsh.w	r1, [sp, #100]	; 0x64
 8005626:	9a03      	ldr	r2, [sp, #12]
 8005628:	19cf      	adds	r7, r1, r7
 800562a:	1e52      	subs	r2, r2, #1
 800562c:	9203      	str	r2, [sp, #12]
 800562e:	d183      	bne.n	8005538 <pool_func_ap_array_f32+0xc0>
 8005630:	f8bd 9002 	ldrh.w	r9, [sp, #2]
 8005634:	f8bd 8064 	ldrh.w	r8, [sp, #100]	; 0x64
 8005638:	9d05      	ldr	r5, [sp, #20]
 800563a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800563c:	f8bd 206c 	ldrh.w	r2, [sp, #108]	; 0x6c
 8005640:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8005644:	1c49      	adds	r1, r1, #1
 8005646:	9109      	str	r1, [sp, #36]	; 0x24
 8005648:	9907      	ldr	r1, [sp, #28]
 800564a:	188a      	adds	r2, r1, r2
 800564c:	9207      	str	r2, [sp, #28]
 800564e:	9908      	ldr	r1, [sp, #32]
 8005650:	f8bd 2068 	ldrh.w	r2, [sp, #104]	; 0x68
 8005654:	188a      	adds	r2, r1, r2
 8005656:	9208      	str	r2, [sp, #32]
 8005658:	f9bd 1068 	ldrsh.w	r1, [sp, #104]	; 0x68
 800565c:	9a06      	ldr	r2, [sp, #24]
 800565e:	18cb      	adds	r3, r1, r3
 8005660:	1e52      	subs	r2, r2, #1
 8005662:	f8ad 3004 	strh.w	r3, [sp, #4]
 8005666:	9206      	str	r2, [sp, #24]
 8005668:	f000 80ee 	beq.w	8005848 <pool_func_ap_array_f32+0x3d0>
 800566c:	e744      	b.n	80054f8 <pool_func_ap_array_f32+0x80>
 800566e:	000f      	movs	r7, r1
 8005670:	f000 80ea 	beq.w	8005848 <pool_func_ap_array_f32+0x3d0>
 8005674:	425b      	negs	r3, r3
 8005676:	18d2      	adds	r2, r2, r3
 8005678:	2700      	movs	r7, #0
 800567a:	f8ad 3000 	strh.w	r3, [sp]
 800567e:	f8ad 200a 	strh.w	r2, [sp, #10]
 8005682:	9709      	str	r7, [sp, #36]	; 0x24
 8005684:	f8cd 1020 	str.w	r1, [sp, #32]
 8005688:	f8bd 106c 	ldrh.w	r1, [sp, #108]	; 0x6c
 800568c:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 8005690:	2900      	cmp	r1, #0
 8005692:	f000 80c1 	beq.w	8005818 <pool_func_ap_array_f32+0x3a0>
 8005696:	f9bd 605c 	ldrsh.w	r6, [sp, #92]	; 0x5c
 800569a:	f9bd 4054 	ldrsh.w	r4, [sp, #84]	; 0x54
 800569e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80056a0:	f8bd 106c 	ldrh.w	r1, [sp, #108]	; 0x6c
 80056a4:	9204      	str	r2, [sp, #16]
 80056a6:	4276      	negs	r6, r6
 80056a8:	19a4      	adds	r4, r4, r6
 80056aa:	f8ad 9002 	strh.w	r9, [sp, #2]
 80056ae:	f8ad 8064 	strh.w	r8, [sp, #100]	; 0x64
 80056b2:	9505      	str	r5, [sp, #20]
 80056b4:	f8ad 6004 	strh.w	r6, [sp, #4]
 80056b8:	f8ad 4008 	strh.w	r4, [sp, #8]
 80056bc:	f8cd 101c 	str.w	r1, [sp, #28]
 80056c0:	f8ad b006 	strh.w	fp, [sp, #6]
 80056c4:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 80056c8:	f9bd 8008 	ldrsh.w	r8, [sp, #8]
 80056cc:	2100      	movs	r1, #0
 80056ce:	2a00      	cmp	r2, #0
 80056d0:	f000 8085 	beq.w	80057de <pool_func_ap_array_f32+0x366>
 80056d4:	f8bd 5002 	ldrh.w	r5, [sp, #2]
 80056d8:	9c04      	ldr	r4, [sp, #16]
 80056da:	9a05      	ldr	r2, [sp, #20]
 80056dc:	f8bd 9006 	ldrh.w	r9, [sp, #6]
 80056e0:	f8ad a00c 	strh.w	sl, [sp, #12]
 80056e4:	4365      	muls	r5, r4
 80056e6:	eb02 0585 	add.w	r5, r2, r5, lsl #2
 80056ea:	9506      	str	r5, [sp, #24]
 80056ec:	f9bd 5000 	ldrsh.w	r5, [sp]
 80056f0:	f8bd a002 	ldrh.w	sl, [sp, #2]
 80056f4:	429d      	cmp	r5, r3
 80056f6:	ed9f 0a56 	vldr	s0, [pc, #344]	; 8005850 <.text_5>
 80056fa:	eddf 0a55 	vldr	s1, [pc, #340]	; 8005850 <.text_5>
 80056fe:	da5d      	bge.n	80057bc <pool_func_ap_array_f32+0x344>
 8005700:	930a      	str	r3, [sp, #40]	; 0x28
 8005702:	fb09 fe05 	mul.w	lr, r9, r5
 8005706:	462b      	mov	r3, r5
 8005708:	f9bd 5004 	ldrsh.w	r5, [sp, #4]
 800570c:	f8bd b00c 	ldrh.w	fp, [sp, #12]
 8005710:	ee10 2a90 	vmov	r2, s1
 8005714:	4545      	cmp	r5, r8
 8005716:	462f      	mov	r7, r5
 8005718:	da44      	bge.n	80057a4 <pool_func_ap_array_f32+0x32c>
 800571a:	eba8 0405 	sub.w	r4, r8, r5
 800571e:	07e6      	lsls	r6, r4, #31
 8005720:	d513      	bpl.n	800574a <pool_func_ap_array_f32+0x2d2>
 8005722:	2b00      	cmp	r3, #0
 8005724:	bf58      	it	pl
 8005726:	2f00      	cmppl	r7, #0
 8005728:	d40e      	bmi.n	8005748 <pool_func_ap_array_f32+0x2d0>
 800572a:	455b      	cmp	r3, fp
 800572c:	bfb8      	it	lt
 800572e:	454f      	cmplt	r7, r9
 8005730:	da0a      	bge.n	8005748 <pool_func_ap_array_f32+0x2d0>
 8005732:	eb0e 0607 	add.w	r6, lr, r7
 8005736:	fb06 160a 	mla	r6, r6, sl, r1
 800573a:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 800573e:	1c52      	adds	r2, r2, #1
 8005740:	edd6 0a00 	vldr	s1, [r6]
 8005744:	ee30 0a20 	vadd.f32	s0, s0, s1
 8005748:	1c7f      	adds	r7, r7, #1
 800574a:	0864      	lsrs	r4, r4, #1
 800574c:	d02a      	beq.n	80057a4 <pool_func_ap_array_f32+0x32c>
 800574e:	2b00      	cmp	r3, #0
 8005750:	d405      	bmi.n	800575e <pool_func_ap_array_f32+0x2e6>
 8005752:	2f00      	cmp	r7, #0
 8005754:	bf48      	it	mi
 8005756:	1c7e      	addmi	r6, r7, #1
 8005758:	d410      	bmi.n	800577c <pool_func_ap_array_f32+0x304>
 800575a:	455b      	cmp	r3, fp
 800575c:	db01      	blt.n	8005762 <pool_func_ap_array_f32+0x2ea>
 800575e:	1c7e      	adds	r6, r7, #1
 8005760:	e01d      	b.n	800579e <pool_func_ap_array_f32+0x326>
 8005762:	1c7e      	adds	r6, r7, #1
 8005764:	454f      	cmp	r7, r9
 8005766:	da09      	bge.n	800577c <pool_func_ap_array_f32+0x304>
 8005768:	4477      	add	r7, lr
 800576a:	fb07 170a 	mla	r7, r7, sl, r1
 800576e:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 8005772:	1c52      	adds	r2, r2, #1
 8005774:	edd7 0a00 	vldr	s1, [r7]
 8005778:	ee30 0a20 	vadd.f32	s0, s0, s1
 800577c:	2e00      	cmp	r6, #0
 800577e:	d40e      	bmi.n	800579e <pool_func_ap_array_f32+0x326>
 8005780:	455b      	cmp	r3, fp
 8005782:	bfb8      	it	lt
 8005784:	454e      	cmplt	r6, r9
 8005786:	da0a      	bge.n	800579e <pool_func_ap_array_f32+0x326>
 8005788:	eb0e 0706 	add.w	r7, lr, r6
 800578c:	fb07 170a 	mla	r7, r7, sl, r1
 8005790:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 8005794:	1c52      	adds	r2, r2, #1
 8005796:	edd7 0a00 	vldr	s1, [r7]
 800579a:	ee30 0a20 	vadd.f32	s0, s0, s1
 800579e:	1c77      	adds	r7, r6, #1
 80057a0:	1e64      	subs	r4, r4, #1
 80057a2:	d1d4      	bne.n	800574e <pool_func_ap_array_f32+0x2d6>
 80057a4:	9f0a      	ldr	r7, [sp, #40]	; 0x28
 80057a6:	1c5b      	adds	r3, r3, #1
 80057a8:	42bb      	cmp	r3, r7
 80057aa:	44ce      	add	lr, r9
 80057ac:	dbb2      	blt.n	8005714 <pool_func_ap_array_f32+0x29c>
 80057ae:	463b      	mov	r3, r7
 80057b0:	ee00 2a90 	vmov	s1, r2
 80057b4:	f8ad 5004 	strh.w	r5, [sp, #4]
 80057b8:	f8ad b00c 	strh.w	fp, [sp, #12]
 80057bc:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 80057c0:	9d06      	ldr	r5, [sp, #24]
 80057c2:	ee80 0a20 	vdiv.f32	s0, s0, s1
 80057c6:	ed85 0a00 	vstr	s0, [r5]
 80057ca:	1c49      	adds	r1, r1, #1
 80057cc:	9a06      	ldr	r2, [sp, #24]
 80057ce:	1d15      	adds	r5, r2, #4
 80057d0:	4551      	cmp	r1, sl
 80057d2:	9506      	str	r5, [sp, #24]
 80057d4:	db8a      	blt.n	80056ec <pool_func_ap_array_f32+0x274>
 80057d6:	f8ad 9006 	strh.w	r9, [sp, #6]
 80057da:	f8bd a00c 	ldrh.w	sl, [sp, #12]
 80057de:	9904      	ldr	r1, [sp, #16]
 80057e0:	f9bd 2064 	ldrsh.w	r2, [sp, #100]	; 0x64
 80057e4:	1c49      	adds	r1, r1, #1
 80057e6:	9104      	str	r1, [sp, #16]
 80057e8:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 80057ec:	1851      	adds	r1, r2, r1
 80057ee:	f8ad 1008 	strh.w	r1, [sp, #8]
 80057f2:	f9bd 2064 	ldrsh.w	r2, [sp, #100]	; 0x64
 80057f6:	f8bd 1004 	ldrh.w	r1, [sp, #4]
 80057fa:	1851      	adds	r1, r2, r1
 80057fc:	f8ad 1004 	strh.w	r1, [sp, #4]
 8005800:	9907      	ldr	r1, [sp, #28]
 8005802:	1e49      	subs	r1, r1, #1
 8005804:	9107      	str	r1, [sp, #28]
 8005806:	f47f af5d 	bne.w	80056c4 <pool_func_ap_array_f32+0x24c>
 800580a:	f8bd 9002 	ldrh.w	r9, [sp, #2]
 800580e:	f8bd 8064 	ldrh.w	r8, [sp, #100]	; 0x64
 8005812:	9d05      	ldr	r5, [sp, #20]
 8005814:	f8bd b006 	ldrh.w	fp, [sp, #6]
 8005818:	9909      	ldr	r1, [sp, #36]	; 0x24
 800581a:	f8bd 206c 	ldrh.w	r2, [sp, #108]	; 0x6c
 800581e:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8005822:	188a      	adds	r2, r1, r2
 8005824:	9209      	str	r2, [sp, #36]	; 0x24
 8005826:	f8bd 2000 	ldrh.w	r2, [sp]
 800582a:	f9bd 1068 	ldrsh.w	r1, [sp, #104]	; 0x68
 800582e:	18cb      	adds	r3, r1, r3
 8005830:	f9bd 1068 	ldrsh.w	r1, [sp, #104]	; 0x68
 8005834:	f8ad 300a 	strh.w	r3, [sp, #10]
 8005838:	188a      	adds	r2, r1, r2
 800583a:	f8ad 2000 	strh.w	r2, [sp]
 800583e:	9a08      	ldr	r2, [sp, #32]
 8005840:	1e52      	subs	r2, r2, #1
 8005842:	9208      	str	r2, [sp, #32]
 8005844:	f47f af20 	bne.w	8005688 <pool_func_ap_array_f32+0x210>
 8005848:	b00c      	add	sp, #48	; 0x30
 800584a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08005850 <.text_5>:
 8005850:	00000000 	.word	0x00000000

08005854 <pool_func_mp_kernel_array_f32>:
 8005854:	b470      	push	{r4, r5, r6}
 8005856:	eb01 0482 	add.w	r4, r1, r2, lsl #2
 800585a:	42a1      	cmp	r1, r4
 800585c:	d257      	bcs.n	800590e <pool_func_mp_kernel_array_f32+0xba>
 800585e:	2b00      	cmp	r3, #0
 8005860:	d051      	beq.n	8005906 <pool_func_mp_kernel_array_f32+0xb2>
 8005862:	f013 0203 	ands.w	r2, r3, #3
 8005866:	460d      	mov	r5, r1
 8005868:	4606      	mov	r6, r0
 800586a:	d011      	beq.n	8005890 <pool_func_mp_kernel_array_f32+0x3c>
 800586c:	ed96 0a00 	vldr	s0, [r6]
 8005870:	edd5 0a00 	vldr	s1, [r5]
 8005874:	eef4 0a40 	vcmp.f32	s1, s0
 8005878:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800587c:	bf58      	it	pl
 800587e:	eeb0 0a60 	vmovpl.f32	s0, s1
 8005882:	ed86 0a00 	vstr	s0, [r6]
 8005886:	1e52      	subs	r2, r2, #1
 8005888:	1d36      	adds	r6, r6, #4
 800588a:	1d2d      	adds	r5, r5, #4
 800588c:	2a00      	cmp	r2, #0
 800588e:	d1ed      	bne.n	800586c <pool_func_mp_kernel_array_f32+0x18>
 8005890:	089a      	lsrs	r2, r3, #2
 8005892:	d038      	beq.n	8005906 <pool_func_mp_kernel_array_f32+0xb2>
 8005894:	edd5 0a00 	vldr	s1, [r5]
 8005898:	edd6 1a00 	vldr	s3, [r6]
 800589c:	eef4 0a61 	vcmp.f32	s1, s3
 80058a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80058a4:	bf48      	it	mi
 80058a6:	eef0 0a61 	vmovmi.f32	s1, s3
 80058aa:	edc6 0a00 	vstr	s1, [r6]
 80058ae:	edd5 0a01 	vldr	s1, [r5, #4]
 80058b2:	edd6 1a01 	vldr	s3, [r6, #4]
 80058b6:	ed96 0a02 	vldr	s0, [r6, #8]
 80058ba:	eef4 0a61 	vcmp.f32	s1, s3
 80058be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80058c2:	bf48      	it	mi
 80058c4:	eef0 0a61 	vmovmi.f32	s1, s3
 80058c8:	edc6 0a01 	vstr	s1, [r6, #4]
 80058cc:	ed95 1a02 	vldr	s2, [r5, #8]
 80058d0:	edd6 1a03 	vldr	s3, [r6, #12]
 80058d4:	eeb4 1a40 	vcmp.f32	s2, s0
 80058d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80058dc:	bf48      	it	mi
 80058de:	eeb0 1a40 	vmovmi.f32	s2, s0
 80058e2:	ed86 1a02 	vstr	s2, [r6, #8]
 80058e6:	edd5 0a03 	vldr	s1, [r5, #12]
 80058ea:	eef4 0a61 	vcmp.f32	s1, s3
 80058ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80058f2:	bf58      	it	pl
 80058f4:	eef0 1a60 	vmovpl.f32	s3, s1
 80058f8:	edc6 1a03 	vstr	s3, [r6, #12]
 80058fc:	1e52      	subs	r2, r2, #1
 80058fe:	3610      	adds	r6, #16
 8005900:	3510      	adds	r5, #16
 8005902:	2a00      	cmp	r2, #0
 8005904:	d1c6      	bne.n	8005894 <pool_func_mp_kernel_array_f32+0x40>
 8005906:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 800590a:	42a1      	cmp	r1, r4
 800590c:	d3a7      	bcc.n	800585e <pool_func_mp_kernel_array_f32+0xa>
 800590e:	bc70      	pop	{r4, r5, r6}
 8005910:	4770      	bx	lr
	...

08005914 <pool_func_ap_kernel_array_f32>:
 8005914:	b4f0      	push	{r4, r5, r6, r7}
 8005916:	eb01 0582 	add.w	r5, r1, r2, lsl #2
 800591a:	9c05      	ldr	r4, [sp, #20]
 800591c:	42a9      	cmp	r1, r5
 800591e:	d251      	bcs.n	80059c4 <pool_func_ap_kernel_array_f32+0xb0>
 8005920:	2b00      	cmp	r3, #0
 8005922:	d04a      	beq.n	80059ba <pool_func_ap_kernel_array_f32+0xa6>
 8005924:	f013 0203 	ands.w	r2, r3, #3
 8005928:	460e      	mov	r6, r1
 800592a:	4607      	mov	r7, r0
 800592c:	f000 800f 	beq.w	800594e <pool_func_ap_kernel_array_f32+0x3a>
 8005930:	ed96 0a00 	vldr	s0, [r6]
 8005934:	2c01      	cmp	r4, #1
 8005936:	bf1c      	itt	ne
 8005938:	edd7 0a00 	vldrne	s1, [r7]
 800593c:	ee30 0a80 	vaddne.f32	s0, s1, s0
 8005940:	ed87 0a00 	vstr	s0, [r7]
 8005944:	1e52      	subs	r2, r2, #1
 8005946:	1d3f      	adds	r7, r7, #4
 8005948:	1d36      	adds	r6, r6, #4
 800594a:	2a00      	cmp	r2, #0
 800594c:	d1f0      	bne.n	8005930 <pool_func_ap_kernel_array_f32+0x1c>
 800594e:	089a      	lsrs	r2, r3, #2
 8005950:	d033      	beq.n	80059ba <pool_func_ap_kernel_array_f32+0xa6>
 8005952:	2c01      	cmp	r4, #1
 8005954:	edd6 1a00 	vldr	s3, [r6]
 8005958:	d10c      	bne.n	8005974 <pool_func_ap_kernel_array_f32+0x60>
 800595a:	edc7 1a00 	vstr	s3, [r7]
 800595e:	ed96 0a01 	vldr	s0, [r6, #4]
 8005962:	ed87 0a01 	vstr	s0, [r7, #4]
 8005966:	edd6 1a02 	vldr	s3, [r6, #8]
 800596a:	edc7 1a02 	vstr	s3, [r7, #8]
 800596e:	edd6 1a03 	vldr	s3, [r6, #12]
 8005972:	e01b      	b.n	80059ac <pool_func_ap_kernel_array_f32+0x98>
 8005974:	edd7 0a00 	vldr	s1, [r7]
 8005978:	ee30 0aa1 	vadd.f32	s0, s1, s3
 800597c:	ed87 0a00 	vstr	s0, [r7]
 8005980:	ed97 1a01 	vldr	s2, [r7, #4]
 8005984:	ed96 0a01 	vldr	s0, [r6, #4]
 8005988:	edd7 1a02 	vldr	s3, [r7, #8]
 800598c:	ee31 0a00 	vadd.f32	s0, s2, s0
 8005990:	ed87 0a01 	vstr	s0, [r7, #4]
 8005994:	edd6 0a02 	vldr	s1, [r6, #8]
 8005998:	ee31 0aa0 	vadd.f32	s0, s3, s1
 800599c:	ed87 0a02 	vstr	s0, [r7, #8]
 80059a0:	ed97 0a03 	vldr	s0, [r7, #12]
 80059a4:	ed96 1a03 	vldr	s2, [r6, #12]
 80059a8:	ee70 1a01 	vadd.f32	s3, s0, s2
 80059ac:	edc7 1a03 	vstr	s3, [r7, #12]
 80059b0:	1e52      	subs	r2, r2, #1
 80059b2:	3710      	adds	r7, #16
 80059b4:	3610      	adds	r6, #16
 80059b6:	2a00      	cmp	r2, #0
 80059b8:	d1cb      	bne.n	8005952 <pool_func_ap_kernel_array_f32+0x3e>
 80059ba:	2400      	movs	r4, #0
 80059bc:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 80059c0:	42a9      	cmp	r1, r5
 80059c2:	d3ad      	bcc.n	8005920 <pool_func_ap_kernel_array_f32+0xc>
 80059c4:	9904      	ldr	r1, [sp, #16]
 80059c6:	b399      	cbz	r1, 8005a30 <pool_func_ap_kernel_array_f32+0x11c>
 80059c8:	ee00 1a10 	vmov	s0, r1
 80059cc:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 80059d0:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 80059d4:	ee80 0a80 	vdiv.f32	s0, s1, s0
 80059d8:	b353      	cbz	r3, 8005a30 <pool_func_ap_kernel_array_f32+0x11c>
 80059da:	f013 0103 	ands.w	r1, r3, #3
 80059de:	d009      	beq.n	80059f4 <pool_func_ap_kernel_array_f32+0xe0>
 80059e0:	edd0 0a00 	vldr	s1, [r0]
 80059e4:	ee60 0a80 	vmul.f32	s1, s1, s0
 80059e8:	edc0 0a00 	vstr	s1, [r0]
 80059ec:	1e49      	subs	r1, r1, #1
 80059ee:	f100 0004 	add.w	r0, r0, #4
 80059f2:	d1f5      	bne.n	80059e0 <pool_func_ap_kernel_array_f32+0xcc>
 80059f4:	089b      	lsrs	r3, r3, #2
 80059f6:	d01b      	beq.n	8005a30 <pool_func_ap_kernel_array_f32+0x11c>
 80059f8:	edd0 0a00 	vldr	s1, [r0]
 80059fc:	ee60 0a80 	vmul.f32	s1, s1, s0
 8005a00:	edc0 0a00 	vstr	s1, [r0]
 8005a04:	1e5b      	subs	r3, r3, #1
 8005a06:	ed90 1a01 	vldr	s2, [r0, #4]
 8005a0a:	edd0 0a02 	vldr	s1, [r0, #8]
 8005a0e:	ee21 1a00 	vmul.f32	s2, s2, s0
 8005a12:	ed80 1a01 	vstr	s2, [r0, #4]
 8005a16:	ee60 0a80 	vmul.f32	s1, s1, s0
 8005a1a:	ed90 1a03 	vldr	s2, [r0, #12]
 8005a1e:	edc0 0a02 	vstr	s1, [r0, #8]
 8005a22:	ee21 1a00 	vmul.f32	s2, s2, s0
 8005a26:	ed80 1a03 	vstr	s2, [r0, #12]
 8005a2a:	f100 0010 	add.w	r0, r0, #16
 8005a2e:	d1e3      	bne.n	80059f8 <pool_func_ap_kernel_array_f32+0xe4>
 8005a30:	bcf0      	pop	{r4, r5, r6, r7}
 8005a32:	4770      	bx	lr

08005a34 <forward_mp>:
 8005a34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a38:	4604      	mov	r4, r0
 8005a3a:	b08e      	sub	sp, #56	; 0x38
 8005a3c:	6962      	ldr	r2, [r4, #20]
 8005a3e:	8811      	ldrh	r1, [r2, #0]
 8005a40:	2900      	cmp	r1, #0
 8005a42:	bf1a      	itte	ne
 8005a44:	6850      	ldrne	r0, [r2, #4]
 8005a46:	1d00      	addne	r0, r0, #4
 8005a48:	2004      	moveq	r0, #4
 8005a4a:	6800      	ldr	r0, [r0, #0]
 8005a4c:	2800      	cmp	r0, #0
 8005a4e:	bf14      	ite	ne
 8005a50:	6805      	ldrne	r5, [r0, #0]
 8005a52:	2500      	moveq	r5, #0
 8005a54:	2901      	cmp	r1, #1
 8005a56:	bfc6      	itte	gt
 8005a58:	6850      	ldrgt	r0, [r2, #4]
 8005a5a:	3010      	addgt	r0, #16
 8005a5c:	2004      	movle	r0, #4
 8005a5e:	6800      	ldr	r0, [r0, #0]
 8005a60:	68ea      	ldr	r2, [r5, #12]
 8005a62:	2800      	cmp	r0, #0
 8005a64:	bf14      	ite	ne
 8005a66:	6807      	ldrne	r7, [r0, #0]
 8005a68:	2700      	moveq	r7, #0
 8005a6a:	68f9      	ldr	r1, [r7, #12]
 8005a6c:	68d0      	ldr	r0, [r2, #12]
 8005a6e:	68cb      	ldr	r3, [r1, #12]
 8005a70:	9009      	str	r0, [sp, #36]	; 0x24
 8005a72:	6889      	ldr	r1, [r1, #8]
 8005a74:	9108      	str	r1, [sp, #32]
 8005a76:	f8d2 8008 	ldr.w	r8, [r2, #8]
 8005a7a:	6851      	ldr	r1, [r2, #4]
 8005a7c:	69a2      	ldr	r2, [r4, #24]
 8005a7e:	69e0      	ldr	r0, [r4, #28]
 8005a80:	9007      	str	r0, [sp, #28]
 8005a82:	6a66      	ldr	r6, [r4, #36]	; 0x24
 8005a84:	6a20      	ldr	r0, [r4, #32]
 8005a86:	960d      	str	r6, [sp, #52]	; 0x34
 8005a88:	f8d4 c02c 	ldr.w	ip, [r4, #44]	; 0x2c
 8005a8c:	69ac      	ldr	r4, [r5, #24]
 8005a8e:	69bd      	ldr	r5, [r7, #24]
 8005a90:	f8dc 7000 	ldr.w	r7, [ip]
 8005a94:	f8dc 6004 	ldr.w	r6, [ip, #4]
 8005a98:	68a4      	ldr	r4, [r4, #8]
 8005a9a:	f8d5 e008 	ldr.w	lr, [r5, #8]
 8005a9e:	427f      	negs	r7, r7
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	9700      	str	r7, [sp, #0]
 8005aa4:	f000 80d9 	beq.w	8005c5a <forward_mp+0x226>
 8005aa8:	9301      	str	r3, [sp, #4]
 8005aaa:	4276      	negs	r6, r6
 8005aac:	960c      	str	r6, [sp, #48]	; 0x30
 8005aae:	fb01 f508 	mul.w	r5, r1, r8
 8005ab2:	950b      	str	r5, [sp, #44]	; 0x2c
 8005ab4:	9d00      	ldr	r5, [sp, #0]
 8005ab6:	9b00      	ldr	r3, [sp, #0]
 8005ab8:	9f00      	ldr	r7, [sp, #0]
 8005aba:	426d      	negs	r5, r5
 8005abc:	9d09      	ldr	r5, [sp, #36]	; 0x24
 8005abe:	bfcc      	ite	gt
 8005ac0:	2600      	movgt	r6, #0
 8005ac2:	9e00      	ldrle	r6, [sp, #0]
 8005ac4:	1aeb      	subs	r3, r5, r3
 8005ac6:	9d07      	ldr	r5, [sp, #28]
 8005ac8:	42ab      	cmp	r3, r5
 8005aca:	bf88      	it	hi
 8005acc:	462b      	movhi	r3, r5
 8005ace:	19df      	adds	r7, r3, r7
 8005ad0:	9b08      	ldr	r3, [sp, #32]
 8005ad2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	f000 80b7 	beq.w	8005c48 <forward_mp+0x214>
 8005ada:	fb08 fa06 	mul.w	sl, r8, r6
 8005ade:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
 8005ae2:	f8cd 800c 	str.w	r8, [sp, #12]
 8005ae6:	9202      	str	r2, [sp, #8]
 8005ae8:	9006      	str	r0, [sp, #24]
 8005aea:	9605      	str	r6, [sp, #20]
 8005aec:	9704      	str	r7, [sp, #16]
 8005aee:	4268      	negs	r0, r5
 8005af0:	9f03      	ldr	r7, [sp, #12]
 8005af2:	9a02      	ldr	r2, [sp, #8]
 8005af4:	f8dd 802c 	ldr.w	r8, [sp, #44]	; 0x2c
 8005af8:	bfcc      	ite	gt
 8005afa:	2000      	movgt	r0, #0
 8005afc:	4628      	movle	r0, r5
 8005afe:	1b7f      	subs	r7, r7, r5
 8005b00:	4297      	cmp	r7, r2
 8005b02:	bf88      	it	hi
 8005b04:	4617      	movhi	r7, r2
 8005b06:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005b08:	197f      	adds	r7, r7, r5
 8005b0a:	1a3f      	subs	r7, r7, r0
 8005b0c:	1880      	adds	r0, r0, r2
 8005b0e:	4348      	muls	r0, r1
 8005b10:	434f      	muls	r7, r1
 8005b12:	eb04 0c80 	add.w	ip, r4, r0, lsl #2
 8005b16:	b311      	cbz	r1, 8005b5e <forward_mp+0x12a>
 8005b18:	f011 0003 	ands.w	r0, r1, #3
 8005b1c:	4672      	mov	r2, lr
 8005b1e:	4666      	mov	r6, ip
 8005b20:	f000 8006 	beq.w	8005b30 <forward_mp+0xfc>
 8005b24:	f856 9b04 	ldr.w	r9, [r6], #4
 8005b28:	f842 9b04 	str.w	r9, [r2], #4
 8005b2c:	1e40      	subs	r0, r0, #1
 8005b2e:	d1f9      	bne.n	8005b24 <forward_mp+0xf0>
 8005b30:	0888      	lsrs	r0, r1, #2
 8005b32:	d014      	beq.n	8005b5e <forward_mp+0x12a>
 8005b34:	ed96 0a00 	vldr	s0, [r6]
 8005b38:	ed82 0a00 	vstr	s0, [r2]
 8005b3c:	1e40      	subs	r0, r0, #1
 8005b3e:	edd6 0a01 	vldr	s1, [r6, #4]
 8005b42:	edc2 0a01 	vstr	s1, [r2, #4]
 8005b46:	ed96 0a02 	vldr	s0, [r6, #8]
 8005b4a:	ed82 0a02 	vstr	s0, [r2, #8]
 8005b4e:	edd6 0a03 	vldr	s1, [r6, #12]
 8005b52:	edc2 0a03 	vstr	s1, [r2, #12]
 8005b56:	3210      	adds	r2, #16
 8005b58:	3610      	adds	r6, #16
 8005b5a:	2800      	cmp	r0, #0
 8005b5c:	d1ea      	bne.n	8005b34 <forward_mp+0x100>
 8005b5e:	9805      	ldr	r0, [sp, #20]
 8005b60:	9a04      	ldr	r2, [sp, #16]
 8005b62:	4290      	cmp	r0, r2
 8005b64:	da66      	bge.n	8005c34 <forward_mp+0x200>
 8005b66:	4610      	mov	r0, r2
 8005b68:	9a05      	ldr	r2, [sp, #20]
 8005b6a:	1a82      	subs	r2, r0, r2
 8005b6c:	46e2      	mov	sl, ip
 8005b6e:	eb0a 0b87 	add.w	fp, sl, r7, lsl #2
 8005b72:	45da      	cmp	sl, fp
 8005b74:	d25a      	bcs.n	8005c2c <forward_mp+0x1f8>
 8005b76:	2900      	cmp	r1, #0
 8005b78:	d054      	beq.n	8005c24 <forward_mp+0x1f0>
 8005b7a:	f011 0003 	ands.w	r0, r1, #3
 8005b7e:	4656      	mov	r6, sl
 8005b80:	46f1      	mov	r9, lr
 8005b82:	d012      	beq.n	8005baa <forward_mp+0x176>
 8005b84:	ed99 0a00 	vldr	s0, [r9]
 8005b88:	edd6 0a00 	vldr	s1, [r6]
 8005b8c:	eef4 0a40 	vcmp.f32	s1, s0
 8005b90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b94:	bf58      	it	pl
 8005b96:	eeb0 0a60 	vmovpl.f32	s0, s1
 8005b9a:	1e40      	subs	r0, r0, #1
 8005b9c:	1d36      	adds	r6, r6, #4
 8005b9e:	ed89 0a00 	vstr	s0, [r9]
 8005ba2:	2800      	cmp	r0, #0
 8005ba4:	f109 0904 	add.w	r9, r9, #4
 8005ba8:	d1ec      	bne.n	8005b84 <forward_mp+0x150>
 8005baa:	0888      	lsrs	r0, r1, #2
 8005bac:	f000 803a 	beq.w	8005c24 <forward_mp+0x1f0>
 8005bb0:	edd6 0a00 	vldr	s1, [r6]
 8005bb4:	edd9 1a00 	vldr	s3, [r9]
 8005bb8:	eef4 0a61 	vcmp.f32	s1, s3
 8005bbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005bc0:	bf48      	it	mi
 8005bc2:	eef0 0a61 	vmovmi.f32	s1, s3
 8005bc6:	edc9 0a00 	vstr	s1, [r9]
 8005bca:	edd6 0a01 	vldr	s1, [r6, #4]
 8005bce:	edd9 1a01 	vldr	s3, [r9, #4]
 8005bd2:	ed99 0a02 	vldr	s0, [r9, #8]
 8005bd6:	eef4 0a61 	vcmp.f32	s1, s3
 8005bda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005bde:	bf48      	it	mi
 8005be0:	eef0 0a61 	vmovmi.f32	s1, s3
 8005be4:	edc9 0a01 	vstr	s1, [r9, #4]
 8005be8:	ed96 1a02 	vldr	s2, [r6, #8]
 8005bec:	edd9 1a03 	vldr	s3, [r9, #12]
 8005bf0:	eeb4 1a40 	vcmp.f32	s2, s0
 8005bf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005bf8:	bf48      	it	mi
 8005bfa:	eeb0 1a40 	vmovmi.f32	s2, s0
 8005bfe:	ed89 1a02 	vstr	s2, [r9, #8]
 8005c02:	edd6 0a03 	vldr	s1, [r6, #12]
 8005c06:	eef4 0a61 	vcmp.f32	s1, s3
 8005c0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005c0e:	bf58      	it	pl
 8005c10:	eef0 1a60 	vmovpl.f32	s3, s1
 8005c14:	1e40      	subs	r0, r0, #1
 8005c16:	3610      	adds	r6, #16
 8005c18:	edc9 1a03 	vstr	s3, [r9, #12]
 8005c1c:	2800      	cmp	r0, #0
 8005c1e:	f109 0910 	add.w	r9, r9, #16
 8005c22:	d1c5      	bne.n	8005bb0 <forward_mp+0x17c>
 8005c24:	eb0a 0a81 	add.w	sl, sl, r1, lsl #2
 8005c28:	45da      	cmp	sl, fp
 8005c2a:	d3a4      	bcc.n	8005b76 <forward_mp+0x142>
 8005c2c:	1e52      	subs	r2, r2, #1
 8005c2e:	eb0c 0c88 	add.w	ip, ip, r8, lsl #2
 8005c32:	d19b      	bne.n	8005b6c <forward_mp+0x138>
 8005c34:	9806      	ldr	r0, [sp, #24]
 8005c36:	1945      	adds	r5, r0, r5
 8005c38:	1e5b      	subs	r3, r3, #1
 8005c3a:	eb0e 0e81 	add.w	lr, lr, r1, lsl #2
 8005c3e:	f47f af56 	bne.w	8005aee <forward_mp+0xba>
 8005c42:	f8dd 800c 	ldr.w	r8, [sp, #12]
 8005c46:	9a02      	ldr	r2, [sp, #8]
 8005c48:	9d00      	ldr	r5, [sp, #0]
 8005c4a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005c4c:	195d      	adds	r5, r3, r5
 8005c4e:	9500      	str	r5, [sp, #0]
 8005c50:	9d01      	ldr	r5, [sp, #4]
 8005c52:	1e6d      	subs	r5, r5, #1
 8005c54:	9501      	str	r5, [sp, #4]
 8005c56:	f47f af2d 	bne.w	8005ab4 <forward_mp+0x80>
 8005c5a:	b00e      	add	sp, #56	; 0x38
 8005c5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005c60 <forward_ap>:
 8005c60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c64:	4607      	mov	r7, r0
 8005c66:	b097      	sub	sp, #92	; 0x5c
 8005c68:	697a      	ldr	r2, [r7, #20]
 8005c6a:	8811      	ldrh	r1, [r2, #0]
 8005c6c:	2900      	cmp	r1, #0
 8005c6e:	bf1a      	itte	ne
 8005c70:	6850      	ldrne	r0, [r2, #4]
 8005c72:	1d00      	addne	r0, r0, #4
 8005c74:	2004      	moveq	r0, #4
 8005c76:	6800      	ldr	r0, [r0, #0]
 8005c78:	2800      	cmp	r0, #0
 8005c7a:	bf14      	ite	ne
 8005c7c:	6804      	ldrne	r4, [r0, #0]
 8005c7e:	2400      	moveq	r4, #0
 8005c80:	2901      	cmp	r1, #1
 8005c82:	bfc6      	itte	gt
 8005c84:	6850      	ldrgt	r0, [r2, #4]
 8005c86:	3010      	addgt	r0, #16
 8005c88:	2004      	movle	r0, #4
 8005c8a:	6800      	ldr	r0, [r0, #0]
 8005c8c:	68e3      	ldr	r3, [r4, #12]
 8005c8e:	68dd      	ldr	r5, [r3, #12]
 8005c90:	2800      	cmp	r0, #0
 8005c92:	bf14      	ite	ne
 8005c94:	6806      	ldrne	r6, [r0, #0]
 8005c96:	2600      	moveq	r6, #0
 8005c98:	68f2      	ldr	r2, [r6, #12]
 8005c9a:	68d0      	ldr	r0, [r2, #12]
 8005c9c:	950d      	str	r5, [sp, #52]	; 0x34
 8005c9e:	6892      	ldr	r2, [r2, #8]
 8005ca0:	920c      	str	r2, [sp, #48]	; 0x30
 8005ca2:	f8d3 c008 	ldr.w	ip, [r3, #8]
 8005ca6:	6859      	ldr	r1, [r3, #4]
 8005ca8:	69bb      	ldr	r3, [r7, #24]
 8005caa:	69fd      	ldr	r5, [r7, #28]
 8005cac:	9505      	str	r5, [sp, #20]
 8005cae:	f8d7 8020 	ldr.w	r8, [r7, #32]
 8005cb2:	6a7d      	ldr	r5, [r7, #36]	; 0x24
 8005cb4:	9516      	str	r5, [sp, #88]	; 0x58
 8005cb6:	69a4      	ldr	r4, [r4, #24]
 8005cb8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005cba:	68a5      	ldr	r5, [r4, #8]
 8005cbc:	f8d2 9004 	ldr.w	r9, [r2, #4]
 8005cc0:	69b4      	ldr	r4, [r6, #24]
 8005cc2:	6812      	ldr	r2, [r2, #0]
 8005cc4:	f8d4 e008 	ldr.w	lr, [r4, #8]
 8005cc8:	4252      	negs	r2, r2
 8005cca:	2800      	cmp	r0, #0
 8005ccc:	9201      	str	r2, [sp, #4]
 8005cce:	f000 811c 	beq.w	8005f0a <forward_ap+0x2aa>
 8005cd2:	9c05      	ldr	r4, [sp, #20]
 8005cd4:	f1c9 0900 	rsb	r9, r9, #0
 8005cd8:	435c      	muls	r4, r3
 8005cda:	fb01 f20c 	mul.w	r2, r1, ip
 8005cde:	9004      	str	r0, [sp, #16]
 8005ce0:	f8cd 9054 	str.w	r9, [sp, #84]	; 0x54
 8005ce4:	9414      	str	r4, [sp, #80]	; 0x50
 8005ce6:	9213      	str	r2, [sp, #76]	; 0x4c
 8005ce8:	9a01      	ldr	r2, [sp, #4]
 8005cea:	9801      	ldr	r0, [sp, #4]
 8005cec:	9c01      	ldr	r4, [sp, #4]
 8005cee:	4252      	negs	r2, r2
 8005cf0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8005cf2:	bfcc      	ite	gt
 8005cf4:	2600      	movgt	r6, #0
 8005cf6:	9e01      	ldrle	r6, [sp, #4]
 8005cf8:	1a10      	subs	r0, r2, r0
 8005cfa:	9a05      	ldr	r2, [sp, #20]
 8005cfc:	4290      	cmp	r0, r2
 8005cfe:	bf88      	it	hi
 8005d00:	4610      	movhi	r0, r2
 8005d02:	1904      	adds	r4, r0, r4
 8005d04:	9815      	ldr	r0, [sp, #84]	; 0x54
 8005d06:	9000      	str	r0, [sp, #0]
 8005d08:	980c      	ldr	r0, [sp, #48]	; 0x30
 8005d0a:	2800      	cmp	r0, #0
 8005d0c:	f000 80f4 	beq.w	8005ef8 <forward_ap+0x298>
 8005d10:	fb0c f006 	mul.w	r0, ip, r6
 8005d14:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005d16:	9012      	str	r0, [sp, #72]	; 0x48
 8005d18:	9202      	str	r2, [sp, #8]
 8005d1a:	1b30      	subs	r0, r6, r4
 8005d1c:	9011      	str	r0, [sp, #68]	; 0x44
 8005d1e:	970e      	str	r7, [sp, #56]	; 0x38
 8005d20:	f8cd c01c 	str.w	ip, [sp, #28]
 8005d24:	9306      	str	r3, [sp, #24]
 8005d26:	f8cd 802c 	str.w	r8, [sp, #44]	; 0x2c
 8005d2a:	950a      	str	r5, [sp, #40]	; 0x28
 8005d2c:	9609      	str	r6, [sp, #36]	; 0x24
 8005d2e:	9408      	str	r4, [sp, #32]
 8005d30:	9800      	ldr	r0, [sp, #0]
 8005d32:	9a07      	ldr	r2, [sp, #28]
 8005d34:	f8dd a000 	ldr.w	sl, [sp]
 8005d38:	4240      	negs	r0, r0
 8005d3a:	9800      	ldr	r0, [sp, #0]
 8005d3c:	bfcc      	ite	gt
 8005d3e:	f04f 0900 	movgt.w	r9, #0
 8005d42:	f8dd 9000 	ldrle.w	r9, [sp]
 8005d46:	1a10      	subs	r0, r2, r0
 8005d48:	9a06      	ldr	r2, [sp, #24]
 8005d4a:	4290      	cmp	r0, r2
 8005d4c:	bf88      	it	hi
 8005d4e:	4610      	movhi	r0, r2
 8005d50:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8005d52:	9203      	str	r2, [sp, #12]
 8005d54:	4482      	add	sl, r0
 8005d56:	9811      	ldr	r0, [sp, #68]	; 0x44
 8005d58:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8005d5a:	eba9 030a 	sub.w	r3, r9, sl
 8005d5e:	4343      	muls	r3, r0
 8005d60:	980a      	ldr	r0, [sp, #40]	; 0x28
 8005d62:	444a      	add	r2, r9
 8005d64:	434a      	muls	r2, r1
 8005d66:	eb00 0582 	add.w	r5, r0, r2, lsl #2
 8005d6a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8005d6c:	f892 0030 	ldrb.w	r0, [r2, #48]	; 0x30
 8005d70:	9a08      	ldr	r2, [sp, #32]
 8005d72:	ebaa 0409 	sub.w	r4, sl, r9
 8005d76:	434c      	muls	r4, r1
 8005d78:	2800      	cmp	r0, #0
 8005d7a:	bf14      	ite	ne
 8005d7c:	9e14      	ldrne	r6, [sp, #80]	; 0x50
 8005d7e:	461e      	moveq	r6, r3
 8005d80:	9809      	ldr	r0, [sp, #36]	; 0x24
 8005d82:	2701      	movs	r7, #1
 8005d84:	4290      	cmp	r0, r2
 8005d86:	f04f 0800 	mov.w	r8, #0
 8005d8a:	f280 80a4 	bge.w	8005ed6 <forward_ap+0x276>
 8005d8e:	1a12      	subs	r2, r2, r0
 8005d90:	ebaa 0009 	sub.w	r0, sl, r9
 8005d94:	900f      	str	r0, [sp, #60]	; 0x3c
 8005d96:	9310      	str	r3, [sp, #64]	; 0x40
 8005d98:	980f      	ldr	r0, [sp, #60]	; 0x3c
 8005d9a:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8005d9c:	4480      	add	r8, r0
 8005d9e:	4543      	cmp	r3, r8
 8005da0:	46a9      	mov	r9, r5
 8005da2:	bf0c      	ite	eq
 8005da4:	4633      	moveq	r3, r6
 8005da6:	2300      	movne	r3, #0
 8005da8:	eb09 0c84 	add.w	ip, r9, r4, lsl #2
 8005dac:	45e1      	cmp	r9, ip
 8005dae:	d254      	bcs.n	8005e5a <forward_ap+0x1fa>
 8005db0:	2900      	cmp	r1, #0
 8005db2:	d04d      	beq.n	8005e50 <forward_ap+0x1f0>
 8005db4:	f011 0003 	ands.w	r0, r1, #3
 8005db8:	46ca      	mov	sl, r9
 8005dba:	46f3      	mov	fp, lr
 8005dbc:	f000 8010 	beq.w	8005de0 <forward_ap+0x180>
 8005dc0:	ed9a 0a00 	vldr	s0, [sl]
 8005dc4:	2f01      	cmp	r7, #1
 8005dc6:	bf1c      	itt	ne
 8005dc8:	eddb 0a00 	vldrne	s1, [fp]
 8005dcc:	ee30 0a80 	vaddne.f32	s0, s1, s0
 8005dd0:	ed8b 0a00 	vstr	s0, [fp]
 8005dd4:	1e40      	subs	r0, r0, #1
 8005dd6:	f10b 0b04 	add.w	fp, fp, #4
 8005dda:	f10a 0a04 	add.w	sl, sl, #4
 8005dde:	d1ef      	bne.n	8005dc0 <forward_ap+0x160>
 8005de0:	0888      	lsrs	r0, r1, #2
 8005de2:	d035      	beq.n	8005e50 <forward_ap+0x1f0>
 8005de4:	2f01      	cmp	r7, #1
 8005de6:	edda 1a00 	vldr	s3, [sl]
 8005dea:	d10d      	bne.n	8005e08 <forward_ap+0x1a8>
 8005dec:	edcb 1a00 	vstr	s3, [fp]
 8005df0:	ed9a 0a01 	vldr	s0, [sl, #4]
 8005df4:	ed8b 0a01 	vstr	s0, [fp, #4]
 8005df8:	edda 1a02 	vldr	s3, [sl, #8]
 8005dfc:	edcb 1a02 	vstr	s3, [fp, #8]
 8005e00:	edda 1a03 	vldr	s3, [sl, #12]
 8005e04:	e01c      	b.n	8005e40 <forward_ap+0x1e0>
 8005e06:	bf00      	nop
 8005e08:	eddb 0a00 	vldr	s1, [fp]
 8005e0c:	ee30 0aa1 	vadd.f32	s0, s1, s3
 8005e10:	ed8b 0a00 	vstr	s0, [fp]
 8005e14:	ed9b 1a01 	vldr	s2, [fp, #4]
 8005e18:	ed9a 0a01 	vldr	s0, [sl, #4]
 8005e1c:	eddb 1a02 	vldr	s3, [fp, #8]
 8005e20:	ee31 0a00 	vadd.f32	s0, s2, s0
 8005e24:	ed8b 0a01 	vstr	s0, [fp, #4]
 8005e28:	edda 0a02 	vldr	s1, [sl, #8]
 8005e2c:	ee31 0aa0 	vadd.f32	s0, s3, s1
 8005e30:	ed8b 0a02 	vstr	s0, [fp, #8]
 8005e34:	ed9b 0a03 	vldr	s0, [fp, #12]
 8005e38:	ed9a 1a03 	vldr	s2, [sl, #12]
 8005e3c:	ee70 1a01 	vadd.f32	s3, s0, s2
 8005e40:	edcb 1a03 	vstr	s3, [fp, #12]
 8005e44:	1e40      	subs	r0, r0, #1
 8005e46:	f10b 0b10 	add.w	fp, fp, #16
 8005e4a:	f10a 0a10 	add.w	sl, sl, #16
 8005e4e:	d1c9      	bne.n	8005de4 <forward_ap+0x184>
 8005e50:	2700      	movs	r7, #0
 8005e52:	eb09 0981 	add.w	r9, r9, r1, lsl #2
 8005e56:	45e1      	cmp	r9, ip
 8005e58:	d3aa      	bcc.n	8005db0 <forward_ap+0x150>
 8005e5a:	b3ab      	cbz	r3, 8005ec8 <forward_ap+0x268>
 8005e5c:	ee00 3a10 	vmov	s0, r3
 8005e60:	eeb8 0a40 	vcvt.f32.u32	s0, s0
 8005e64:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8005e68:	ee80 0a80 	vdiv.f32	s0, s1, s0
 8005e6c:	b361      	cbz	r1, 8005ec8 <forward_ap+0x268>
 8005e6e:	f011 0003 	ands.w	r0, r1, #3
 8005e72:	4673      	mov	r3, lr
 8005e74:	f000 800a 	beq.w	8005e8c <forward_ap+0x22c>
 8005e78:	edd3 0a00 	vldr	s1, [r3]
 8005e7c:	ee60 0a80 	vmul.f32	s1, s1, s0
 8005e80:	edc3 0a00 	vstr	s1, [r3]
 8005e84:	1e40      	subs	r0, r0, #1
 8005e86:	f103 0304 	add.w	r3, r3, #4
 8005e8a:	d1f5      	bne.n	8005e78 <forward_ap+0x218>
 8005e8c:	0888      	lsrs	r0, r1, #2
 8005e8e:	d01b      	beq.n	8005ec8 <forward_ap+0x268>
 8005e90:	edd3 0a00 	vldr	s1, [r3]
 8005e94:	ee60 0a80 	vmul.f32	s1, s1, s0
 8005e98:	edc3 0a00 	vstr	s1, [r3]
 8005e9c:	1e40      	subs	r0, r0, #1
 8005e9e:	ed93 1a01 	vldr	s2, [r3, #4]
 8005ea2:	edd3 0a02 	vldr	s1, [r3, #8]
 8005ea6:	ee21 1a00 	vmul.f32	s2, s2, s0
 8005eaa:	ed83 1a01 	vstr	s2, [r3, #4]
 8005eae:	ee60 0a80 	vmul.f32	s1, s1, s0
 8005eb2:	ed93 1a03 	vldr	s2, [r3, #12]
 8005eb6:	edc3 0a02 	vstr	s1, [r3, #8]
 8005eba:	ee21 1a00 	vmul.f32	s2, s2, s0
 8005ebe:	ed83 1a03 	vstr	s2, [r3, #12]
 8005ec2:	f103 0310 	add.w	r3, r3, #16
 8005ec6:	d1e3      	bne.n	8005e90 <forward_ap+0x230>
 8005ec8:	9803      	ldr	r0, [sp, #12]
 8005eca:	2700      	movs	r7, #0
 8005ecc:	1e52      	subs	r2, r2, #1
 8005ece:	eb05 0580 	add.w	r5, r5, r0, lsl #2
 8005ed2:	f47f af61 	bne.w	8005d98 <forward_ap+0x138>
 8005ed6:	9800      	ldr	r0, [sp, #0]
 8005ed8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005eda:	1810      	adds	r0, r2, r0
 8005edc:	9000      	str	r0, [sp, #0]
 8005ede:	eb0e 0e81 	add.w	lr, lr, r1, lsl #2
 8005ee2:	9802      	ldr	r0, [sp, #8]
 8005ee4:	1e40      	subs	r0, r0, #1
 8005ee6:	9002      	str	r0, [sp, #8]
 8005ee8:	f47f af22 	bne.w	8005d30 <forward_ap+0xd0>
 8005eec:	9f0e      	ldr	r7, [sp, #56]	; 0x38
 8005eee:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8005ef2:	9b06      	ldr	r3, [sp, #24]
 8005ef4:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8005ef6:	4690      	mov	r8, r2
 8005ef8:	9c01      	ldr	r4, [sp, #4]
 8005efa:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8005efc:	1914      	adds	r4, r2, r4
 8005efe:	9401      	str	r4, [sp, #4]
 8005f00:	9c04      	ldr	r4, [sp, #16]
 8005f02:	1e64      	subs	r4, r4, #1
 8005f04:	9404      	str	r4, [sp, #16]
 8005f06:	f47f aeef 	bne.w	8005ce8 <forward_ap+0x88>
 8005f0a:	b017      	add	sp, #92	; 0x5c
 8005f0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08005f10 <ai_array_fmt_name>:
 8005f10:	f020 407e 	bic.w	r0, r0, #4261412864	; 0xfe000000
 8005f14:	f1b0 0140 	subs.w	r1, r0, #64	; 0x40
 8005f18:	d062      	beq.n	8005fe0 <ai_array_fmt_name+0xd0>
 8005f1a:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8005f1e:	1a89      	subs	r1, r1, r2
 8005f20:	f000 8094 	beq.w	800604c <ai_array_fmt_name+0x13c>
 8005f24:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005f28:	1a89      	subs	r1, r1, r2
 8005f2a:	d071      	beq.n	8006010 <ai_array_fmt_name+0x100>
 8005f2c:	1a89      	subs	r1, r1, r2
 8005f2e:	d063      	beq.n	8005ff8 <ai_array_fmt_name+0xe8>
 8005f30:	1fc9      	subs	r1, r1, #7
 8005f32:	f000 808e 	beq.w	8006052 <ai_array_fmt_name+0x142>
 8005f36:	f240 32f9 	movw	r2, #1017	; 0x3f9
 8005f3a:	1a89      	subs	r1, r1, r2
 8005f3c:	d05f      	beq.n	8005ffe <ai_array_fmt_name+0xee>
 8005f3e:	390f      	subs	r1, #15
 8005f40:	f000 808a 	beq.w	8006058 <ai_array_fmt_name+0x148>
 8005f44:	f240 72f1 	movw	r2, #2033	; 0x7f1
 8005f48:	1a89      	subs	r1, r1, r2
 8005f4a:	d05b      	beq.n	8006004 <ai_array_fmt_name+0xf4>
 8005f4c:	391f      	subs	r1, #31
 8005f4e:	f000 8086 	beq.w	800605e <ai_array_fmt_name+0x14e>
 8005f52:	f640 72e1 	movw	r2, #4065	; 0xfe1
 8005f56:	1a89      	subs	r1, r1, r2
 8005f58:	d057      	beq.n	800600a <ai_array_fmt_name+0xfa>
 8005f5a:	f8df 25d4 	ldr.w	r2, [pc, #1492]	; 8006530 <.text_15>
 8005f5e:	1a89      	subs	r1, r1, r2
 8005f60:	f000 808f 	beq.w	8006082 <ai_array_fmt_name+0x172>
 8005f64:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 8005f68:	1a89      	subs	r1, r1, r2
 8005f6a:	f000 8087 	beq.w	800607c <ai_array_fmt_name+0x16c>
 8005f6e:	f8df 25c4 	ldr.w	r2, [pc, #1476]	; 8006534 <.text_16>
 8005f72:	1a89      	subs	r1, r1, r2
 8005f74:	d05e      	beq.n	8006034 <ai_array_fmt_name+0x124>
 8005f76:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005f7a:	1a89      	subs	r1, r1, r2
 8005f7c:	d057      	beq.n	800602e <ai_array_fmt_name+0x11e>
 8005f7e:	1a89      	subs	r1, r1, r2
 8005f80:	d049      	beq.n	8006016 <ai_array_fmt_name+0x106>
 8005f82:	1fc9      	subs	r1, r1, #7
 8005f84:	d059      	beq.n	800603a <ai_array_fmt_name+0x12a>
 8005f86:	f240 32f9 	movw	r2, #1017	; 0x3f9
 8005f8a:	1a89      	subs	r1, r1, r2
 8005f8c:	d046      	beq.n	800601c <ai_array_fmt_name+0x10c>
 8005f8e:	390f      	subs	r1, #15
 8005f90:	d056      	beq.n	8006040 <ai_array_fmt_name+0x130>
 8005f92:	f240 72f1 	movw	r2, #2033	; 0x7f1
 8005f96:	1a89      	subs	r1, r1, r2
 8005f98:	d043      	beq.n	8006022 <ai_array_fmt_name+0x112>
 8005f9a:	391f      	subs	r1, #31
 8005f9c:	d053      	beq.n	8006046 <ai_array_fmt_name+0x136>
 8005f9e:	f640 72e1 	movw	r2, #4065	; 0xfe1
 8005fa2:	1a89      	subs	r1, r1, r2
 8005fa4:	d040      	beq.n	8006028 <ai_array_fmt_name+0x118>
 8005fa6:	f8df 2588 	ldr.w	r2, [pc, #1416]	; 8006530 <.text_15>
 8005faa:	1a89      	subs	r1, r1, r2
 8005fac:	d063      	beq.n	8006076 <ai_array_fmt_name+0x166>
 8005fae:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 8005fb2:	1a89      	subs	r1, r1, r2
 8005fb4:	d05c      	beq.n	8006070 <ai_array_fmt_name+0x160>
 8005fb6:	f8df 2580 	ldr.w	r2, [pc, #1408]	; 8006538 <.text_17>
 8005fba:	1a89      	subs	r1, r1, r2
 8005fbc:	d019      	beq.n	8005ff2 <ai_array_fmt_name+0xe2>
 8005fbe:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8005fc2:	1a89      	subs	r1, r1, r2
 8005fc4:	d00f      	beq.n	8005fe6 <ai_array_fmt_name+0xd6>
 8005fc6:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8005fca:	1a89      	subs	r1, r1, r2
 8005fcc:	d00e      	beq.n	8005fec <ai_array_fmt_name+0xdc>
 8005fce:	f8df 256c 	ldr.w	r2, [pc, #1388]	; 800653c <.text_18>
 8005fd2:	1a89      	subs	r1, r1, r2
 8005fd4:	d049      	beq.n	800606a <ai_array_fmt_name+0x15a>
 8005fd6:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 8005fda:	1a89      	subs	r1, r1, r2
 8005fdc:	d042      	beq.n	8006064 <ai_array_fmt_name+0x154>
 8005fde:	e053      	b.n	8006088 <ai_array_fmt_name+0x178>
 8005fe0:	f20f 6074 	addw	r0, pc, #1652	; 0x674
 8005fe4:	4770      	bx	lr
 8005fe6:	f20f 607c 	addw	r0, pc, #1660	; 0x67c
 8005fea:	4770      	bx	lr
 8005fec:	f20f 6080 	addw	r0, pc, #1664	; 0x680
 8005ff0:	4770      	bx	lr
 8005ff2:	f20f 6088 	addw	r0, pc, #1672	; 0x688
 8005ff6:	4770      	bx	lr
 8005ff8:	f20f 608c 	addw	r0, pc, #1676	; 0x68c
 8005ffc:	4770      	bx	lr
 8005ffe:	f20f 6090 	addw	r0, pc, #1680	; 0x690
 8006002:	4770      	bx	lr
 8006004:	f20f 6090 	addw	r0, pc, #1680	; 0x690
 8006008:	4770      	bx	lr
 800600a:	f20f 6094 	addw	r0, pc, #1684	; 0x694
 800600e:	4770      	bx	lr
 8006010:	f20f 6094 	addw	r0, pc, #1684	; 0x694
 8006014:	4770      	bx	lr
 8006016:	f20f 6098 	addw	r0, pc, #1688	; 0x698
 800601a:	4770      	bx	lr
 800601c:	f20f 6098 	addw	r0, pc, #1688	; 0x698
 8006020:	4770      	bx	lr
 8006022:	f20f 609c 	addw	r0, pc, #1692	; 0x69c
 8006026:	4770      	bx	lr
 8006028:	f20f 609c 	addw	r0, pc, #1692	; 0x69c
 800602c:	4770      	bx	lr
 800602e:	f20f 60a0 	addw	r0, pc, #1696	; 0x6a0
 8006032:	4770      	bx	lr
 8006034:	f20f 60a0 	addw	r0, pc, #1696	; 0x6a0
 8006038:	4770      	bx	lr
 800603a:	f20f 60a4 	addw	r0, pc, #1700	; 0x6a4
 800603e:	4770      	bx	lr
 8006040:	f20f 60a4 	addw	r0, pc, #1700	; 0x6a4
 8006044:	4770      	bx	lr
 8006046:	f20f 60a8 	addw	r0, pc, #1704	; 0x6a8
 800604a:	4770      	bx	lr
 800604c:	f20f 60a8 	addw	r0, pc, #1704	; 0x6a8
 8006050:	4770      	bx	lr
 8006052:	f20f 60ac 	addw	r0, pc, #1708	; 0x6ac
 8006056:	4770      	bx	lr
 8006058:	f20f 60ac 	addw	r0, pc, #1708	; 0x6ac
 800605c:	4770      	bx	lr
 800605e:	f20f 60b4 	addw	r0, pc, #1716	; 0x6b4
 8006062:	4770      	bx	lr
 8006064:	f20f 60b8 	addw	r0, pc, #1720	; 0x6b8
 8006068:	4770      	bx	lr
 800606a:	f20f 60c4 	addw	r0, pc, #1732	; 0x6c4
 800606e:	4770      	bx	lr
 8006070:	f20f 60cc 	addw	r0, pc, #1740	; 0x6cc
 8006074:	4770      	bx	lr
 8006076:	f20f 60d8 	addw	r0, pc, #1752	; 0x6d8
 800607a:	4770      	bx	lr
 800607c:	f20f 60e0 	addw	r0, pc, #1760	; 0x6e0
 8006080:	4770      	bx	lr
 8006082:	f20f 60ec 	addw	r0, pc, #1772	; 0x6ec
 8006086:	4770      	bx	lr
 8006088:	f36f 000d 	bfc	r0, #0, #14
 800608c:	f040 0040 	orr.w	r0, r0, #64	; 0x40
 8006090:	2840      	cmp	r0, #64	; 0x40
 8006092:	d009      	beq.n	80060a8 <ai_array_fmt_name+0x198>
 8006094:	f8df 14a8 	ldr.w	r1, [pc, #1192]	; 8006540 <.text_19>
 8006098:	4288      	cmp	r0, r1
 800609a:	d00b      	beq.n	80060b4 <ai_array_fmt_name+0x1a4>
 800609c:	f8df 14a4 	ldr.w	r1, [pc, #1188]	; 8006544 <.text_20>
 80060a0:	4288      	cmp	r0, r1
 80060a2:	d004      	beq.n	80060ae <ai_array_fmt_name+0x19e>
 80060a4:	a07a      	add	r0, pc, #488	; (adr r0, 8006290 <.text_8>)
 80060a6:	4770      	bx	lr
 80060a8:	f20f 60d4 	addw	r0, pc, #1748	; 0x6d4
 80060ac:	4770      	bx	lr
 80060ae:	f20f 60e8 	addw	r0, pc, #1768	; 0x6e8
 80060b2:	4770      	bx	lr
 80060b4:	f20f 60f4 	addw	r0, pc, #1780	; 0x6f4
 80060b8:	4770      	bx	lr

080060ba <ai_array_fmt_exported>:
 80060ba:	f020 407e 	bic.w	r0, r0, #4261412864	; 0xfe000000
 80060be:	f1b0 0140 	subs.w	r1, r0, #64	; 0x40
 80060c2:	d068      	beq.n	8006196 <ai_array_fmt_exported+0xdc>
 80060c4:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80060c8:	1a89      	subs	r1, r1, r2
 80060ca:	d064      	beq.n	8006196 <ai_array_fmt_exported+0xdc>
 80060cc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80060d0:	1a89      	subs	r1, r1, r2
 80060d2:	d062      	beq.n	800619a <ai_array_fmt_exported+0xe0>
 80060d4:	1a89      	subs	r1, r1, r2
 80060d6:	d05e      	beq.n	8006196 <ai_array_fmt_exported+0xdc>
 80060d8:	1fc9      	subs	r1, r1, #7
 80060da:	d05c      	beq.n	8006196 <ai_array_fmt_exported+0xdc>
 80060dc:	f240 32f9 	movw	r2, #1017	; 0x3f9
 80060e0:	1a89      	subs	r1, r1, r2
 80060e2:	d058      	beq.n	8006196 <ai_array_fmt_exported+0xdc>
 80060e4:	390f      	subs	r1, #15
 80060e6:	d056      	beq.n	8006196 <ai_array_fmt_exported+0xdc>
 80060e8:	f240 72f1 	movw	r2, #2033	; 0x7f1
 80060ec:	1a89      	subs	r1, r1, r2
 80060ee:	d054      	beq.n	800619a <ai_array_fmt_exported+0xe0>
 80060f0:	391f      	subs	r1, #31
 80060f2:	d052      	beq.n	800619a <ai_array_fmt_exported+0xe0>
 80060f4:	f640 72e1 	movw	r2, #4065	; 0xfe1
 80060f8:	1a89      	subs	r1, r1, r2
 80060fa:	d04e      	beq.n	800619a <ai_array_fmt_exported+0xe0>
 80060fc:	f8df 2430 	ldr.w	r2, [pc, #1072]	; 8006530 <.text_15>
 8006100:	1a89      	subs	r1, r1, r2
 8006102:	d04a      	beq.n	800619a <ai_array_fmt_exported+0xe0>
 8006104:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 8006108:	1a89      	subs	r1, r1, r2
 800610a:	d046      	beq.n	800619a <ai_array_fmt_exported+0xe0>
 800610c:	f8df 2424 	ldr.w	r2, [pc, #1060]	; 8006534 <.text_16>
 8006110:	1a89      	subs	r1, r1, r2
 8006112:	d040      	beq.n	8006196 <ai_array_fmt_exported+0xdc>
 8006114:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006118:	1a89      	subs	r1, r1, r2
 800611a:	d03e      	beq.n	800619a <ai_array_fmt_exported+0xe0>
 800611c:	1a89      	subs	r1, r1, r2
 800611e:	d03a      	beq.n	8006196 <ai_array_fmt_exported+0xdc>
 8006120:	1fc9      	subs	r1, r1, #7
 8006122:	d038      	beq.n	8006196 <ai_array_fmt_exported+0xdc>
 8006124:	f240 32f9 	movw	r2, #1017	; 0x3f9
 8006128:	1a89      	subs	r1, r1, r2
 800612a:	d034      	beq.n	8006196 <ai_array_fmt_exported+0xdc>
 800612c:	390f      	subs	r1, #15
 800612e:	d032      	beq.n	8006196 <ai_array_fmt_exported+0xdc>
 8006130:	f240 72f1 	movw	r2, #2033	; 0x7f1
 8006134:	1a89      	subs	r1, r1, r2
 8006136:	d030      	beq.n	800619a <ai_array_fmt_exported+0xe0>
 8006138:	391f      	subs	r1, #31
 800613a:	d02e      	beq.n	800619a <ai_array_fmt_exported+0xe0>
 800613c:	f640 72e1 	movw	r2, #4065	; 0xfe1
 8006140:	1a89      	subs	r1, r1, r2
 8006142:	d02a      	beq.n	800619a <ai_array_fmt_exported+0xe0>
 8006144:	f8df 23e8 	ldr.w	r2, [pc, #1000]	; 8006530 <.text_15>
 8006148:	1a89      	subs	r1, r1, r2
 800614a:	d026      	beq.n	800619a <ai_array_fmt_exported+0xe0>
 800614c:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 8006150:	1a89      	subs	r1, r1, r2
 8006152:	d022      	beq.n	800619a <ai_array_fmt_exported+0xe0>
 8006154:	f8df 23e0 	ldr.w	r2, [pc, #992]	; 8006538 <.text_17>
 8006158:	1a89      	subs	r1, r1, r2
 800615a:	d01e      	beq.n	800619a <ai_array_fmt_exported+0xe0>
 800615c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006160:	1a89      	subs	r1, r1, r2
 8006162:	d018      	beq.n	8006196 <ai_array_fmt_exported+0xdc>
 8006164:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8006168:	1a89      	subs	r1, r1, r2
 800616a:	d016      	beq.n	800619a <ai_array_fmt_exported+0xe0>
 800616c:	f8df 23cc 	ldr.w	r2, [pc, #972]	; 800653c <.text_18>
 8006170:	1a89      	subs	r1, r1, r2
 8006172:	d012      	beq.n	800619a <ai_array_fmt_exported+0xe0>
 8006174:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 8006178:	1a89      	subs	r1, r1, r2
 800617a:	d00e      	beq.n	800619a <ai_array_fmt_exported+0xe0>
 800617c:	f36f 000d 	bfc	r0, #0, #14
 8006180:	f040 0040 	orr.w	r0, r0, #64	; 0x40
 8006184:	2840      	cmp	r0, #64	; 0x40
 8006186:	bf1f      	itttt	ne
 8006188:	f8df 33b4 	ldrne.w	r3, [pc, #948]	; 8006540 <.text_19>
 800618c:	4298      	cmpne	r0, r3
 800618e:	f8df 33b4 	ldrne.w	r3, [pc, #948]	; 8006544 <.text_20>
 8006192:	4298      	cmpne	r0, r3
 8006194:	d101      	bne.n	800619a <ai_array_fmt_exported+0xe0>
 8006196:	2001      	movs	r0, #1
 8006198:	4770      	bx	lr
 800619a:	2000      	movs	r0, #0
 800619c:	4770      	bx	lr

0800619e <ai_array_fmt_valid>:
 800619e:	f020 407e 	bic.w	r0, r0, #4261412864	; 0xfe000000
 80061a2:	f1b0 0140 	subs.w	r1, r0, #64	; 0x40
 80061a6:	d069      	beq.n	800627c <ai_array_fmt_valid+0xde>
 80061a8:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80061ac:	1a89      	subs	r1, r1, r2
 80061ae:	d065      	beq.n	800627c <ai_array_fmt_valid+0xde>
 80061b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80061b4:	1a89      	subs	r1, r1, r2
 80061b6:	d061      	beq.n	800627c <ai_array_fmt_valid+0xde>
 80061b8:	1a89      	subs	r1, r1, r2
 80061ba:	d05f      	beq.n	800627c <ai_array_fmt_valid+0xde>
 80061bc:	1fc9      	subs	r1, r1, #7
 80061be:	d05d      	beq.n	800627c <ai_array_fmt_valid+0xde>
 80061c0:	f240 32f9 	movw	r2, #1017	; 0x3f9
 80061c4:	1a89      	subs	r1, r1, r2
 80061c6:	d059      	beq.n	800627c <ai_array_fmt_valid+0xde>
 80061c8:	390f      	subs	r1, #15
 80061ca:	d057      	beq.n	800627c <ai_array_fmt_valid+0xde>
 80061cc:	f240 72f1 	movw	r2, #2033	; 0x7f1
 80061d0:	1a89      	subs	r1, r1, r2
 80061d2:	d053      	beq.n	800627c <ai_array_fmt_valid+0xde>
 80061d4:	391f      	subs	r1, #31
 80061d6:	d051      	beq.n	800627c <ai_array_fmt_valid+0xde>
 80061d8:	f640 72e1 	movw	r2, #4065	; 0xfe1
 80061dc:	1a89      	subs	r1, r1, r2
 80061de:	d04d      	beq.n	800627c <ai_array_fmt_valid+0xde>
 80061e0:	f8df 234c 	ldr.w	r2, [pc, #844]	; 8006530 <.text_15>
 80061e4:	1a89      	subs	r1, r1, r2
 80061e6:	d049      	beq.n	800627c <ai_array_fmt_valid+0xde>
 80061e8:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 80061ec:	1a89      	subs	r1, r1, r2
 80061ee:	d045      	beq.n	800627c <ai_array_fmt_valid+0xde>
 80061f0:	f8df 2340 	ldr.w	r2, [pc, #832]	; 8006534 <.text_16>
 80061f4:	1a89      	subs	r1, r1, r2
 80061f6:	d041      	beq.n	800627c <ai_array_fmt_valid+0xde>
 80061f8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80061fc:	1a89      	subs	r1, r1, r2
 80061fe:	d03d      	beq.n	800627c <ai_array_fmt_valid+0xde>
 8006200:	1a89      	subs	r1, r1, r2
 8006202:	d03b      	beq.n	800627c <ai_array_fmt_valid+0xde>
 8006204:	1fc9      	subs	r1, r1, #7
 8006206:	d039      	beq.n	800627c <ai_array_fmt_valid+0xde>
 8006208:	f240 32f9 	movw	r2, #1017	; 0x3f9
 800620c:	1a89      	subs	r1, r1, r2
 800620e:	d035      	beq.n	800627c <ai_array_fmt_valid+0xde>
 8006210:	390f      	subs	r1, #15
 8006212:	d033      	beq.n	800627c <ai_array_fmt_valid+0xde>
 8006214:	f240 72f1 	movw	r2, #2033	; 0x7f1
 8006218:	1a89      	subs	r1, r1, r2
 800621a:	d02f      	beq.n	800627c <ai_array_fmt_valid+0xde>
 800621c:	391f      	subs	r1, #31
 800621e:	d02d      	beq.n	800627c <ai_array_fmt_valid+0xde>
 8006220:	f640 72e1 	movw	r2, #4065	; 0xfe1
 8006224:	1a89      	subs	r1, r1, r2
 8006226:	d029      	beq.n	800627c <ai_array_fmt_valid+0xde>
 8006228:	f8df 2304 	ldr.w	r2, [pc, #772]	; 8006530 <.text_15>
 800622c:	1a89      	subs	r1, r1, r2
 800622e:	d025      	beq.n	800627c <ai_array_fmt_valid+0xde>
 8006230:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 8006234:	1a89      	subs	r1, r1, r2
 8006236:	d021      	beq.n	800627c <ai_array_fmt_valid+0xde>
 8006238:	f8df 22fc 	ldr.w	r2, [pc, #764]	; 8006538 <.text_17>
 800623c:	1a89      	subs	r1, r1, r2
 800623e:	d01d      	beq.n	800627c <ai_array_fmt_valid+0xde>
 8006240:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006244:	1a89      	subs	r1, r1, r2
 8006246:	d019      	beq.n	800627c <ai_array_fmt_valid+0xde>
 8006248:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 800624c:	1a89      	subs	r1, r1, r2
 800624e:	d015      	beq.n	800627c <ai_array_fmt_valid+0xde>
 8006250:	f8df 22e8 	ldr.w	r2, [pc, #744]	; 800653c <.text_18>
 8006254:	1a89      	subs	r1, r1, r2
 8006256:	d011      	beq.n	800627c <ai_array_fmt_valid+0xde>
 8006258:	f44f 12c0 	mov.w	r2, #1572864	; 0x180000
 800625c:	1a89      	subs	r1, r1, r2
 800625e:	bf1e      	ittt	ne
 8006260:	f36f 000d 	bfcne	r0, #0, #14
 8006264:	f040 0040 	orrne.w	r0, r0, #64	; 0x40
 8006268:	2840      	cmpne	r0, #64	; 0x40
 800626a:	d007      	beq.n	800627c <ai_array_fmt_valid+0xde>
 800626c:	f8df 32d0 	ldr.w	r3, [pc, #720]	; 8006540 <.text_19>
 8006270:	4298      	cmp	r0, r3
 8006272:	bf1c      	itt	ne
 8006274:	f8df 32cc 	ldrne.w	r3, [pc, #716]	; 8006544 <.text_20>
 8006278:	4298      	cmpne	r0, r3
 800627a:	d101      	bne.n	8006280 <ai_array_fmt_valid+0xe2>
 800627c:	2001      	movs	r0, #1
 800627e:	4770      	bx	lr
 8006280:	2000      	movs	r0, #0
 8006282:	4770      	bx	lr

08006284 <ai_array_fmt_get_formats>:
 8006284:	f8df 12c0 	ldr.w	r1, [pc, #704]	; 8006548 <.text_21>
 8006288:	6001      	str	r1, [r0, #0]
 800628a:	201c      	movs	r0, #28
 800628c:	4770      	bx	lr
	...

08006290 <.text_8>:
 8006290:	00000000 	.word	0x00000000

08006294 <ai_buffer_fmt_name>:
 8006294:	f020 407e 	bic.w	r0, r0, #4261412864	; 0xfe000000
 8006298:	f1b0 0140 	subs.w	r1, r0, #64	; 0x40
 800629c:	d022      	beq.n	80062e4 <ai_buffer_fmt_name+0x50>
 800629e:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 80062a2:	1a89      	subs	r1, r1, r2
 80062a4:	d039      	beq.n	800631a <ai_buffer_fmt_name+0x86>
 80062a6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80062aa:	1a89      	subs	r1, r1, r2
 80062ac:	d020      	beq.n	80062f0 <ai_buffer_fmt_name+0x5c>
 80062ae:	1fc9      	subs	r1, r1, #7
 80062b0:	d036      	beq.n	8006320 <ai_buffer_fmt_name+0x8c>
 80062b2:	f240 32f9 	movw	r2, #1017	; 0x3f9
 80062b6:	1a89      	subs	r1, r1, r2
 80062b8:	d01d      	beq.n	80062f6 <ai_buffer_fmt_name+0x62>
 80062ba:	390f      	subs	r1, #15
 80062bc:	d033      	beq.n	8006326 <ai_buffer_fmt_name+0x92>
 80062be:	4aa3      	ldr	r2, [pc, #652]	; (800654c <.text_22>)
 80062c0:	1a89      	subs	r1, r1, r2
 80062c2:	d021      	beq.n	8006308 <ai_buffer_fmt_name+0x74>
 80062c4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80062c8:	1a89      	subs	r1, r1, r2
 80062ca:	d017      	beq.n	80062fc <ai_buffer_fmt_name+0x68>
 80062cc:	1fc9      	subs	r1, r1, #7
 80062ce:	d01e      	beq.n	800630e <ai_buffer_fmt_name+0x7a>
 80062d0:	f240 32f9 	movw	r2, #1017	; 0x3f9
 80062d4:	1a89      	subs	r1, r1, r2
 80062d6:	d014      	beq.n	8006302 <ai_buffer_fmt_name+0x6e>
 80062d8:	390f      	subs	r1, #15
 80062da:	d01b      	beq.n	8006314 <ai_buffer_fmt_name+0x80>
 80062dc:	4a9c      	ldr	r2, [pc, #624]	; (8006550 <.text_23>)
 80062de:	1a89      	subs	r1, r1, r2
 80062e0:	d003      	beq.n	80062ea <ai_buffer_fmt_name+0x56>
 80062e2:	e023      	b.n	800632c <ai_buffer_fmt_name+0x98>
 80062e4:	f20f 3070 	addw	r0, pc, #880	; 0x370
 80062e8:	4770      	bx	lr
 80062ea:	f20f 3078 	addw	r0, pc, #888	; 0x378
 80062ee:	4770      	bx	lr
 80062f0:	f20f 3094 	addw	r0, pc, #916	; 0x394
 80062f4:	4770      	bx	lr
 80062f6:	f20f 3098 	addw	r0, pc, #920	; 0x398
 80062fa:	4770      	bx	lr
 80062fc:	f20f 30b0 	addw	r0, pc, #944	; 0x3b0
 8006300:	4770      	bx	lr
 8006302:	f20f 30b4 	addw	r0, pc, #948	; 0x3b4
 8006306:	4770      	bx	lr
 8006308:	f20f 30cc 	addw	r0, pc, #972	; 0x3cc
 800630c:	4770      	bx	lr
 800630e:	f20f 30d0 	addw	r0, pc, #976	; 0x3d0
 8006312:	4770      	bx	lr
 8006314:	f20f 30d0 	addw	r0, pc, #976	; 0x3d0
 8006318:	4770      	bx	lr
 800631a:	f20f 30dc 	addw	r0, pc, #988	; 0x3dc
 800631e:	4770      	bx	lr
 8006320:	f20f 30dc 	addw	r0, pc, #988	; 0x3dc
 8006324:	4770      	bx	lr
 8006326:	f20f 30e0 	addw	r0, pc, #992	; 0x3e0
 800632a:	4770      	bx	lr
 800632c:	0b80      	lsrs	r0, r0, #14
 800632e:	0380      	lsls	r0, r0, #14
 8006330:	f040 0040 	orr.w	r0, r0, #64	; 0x40
 8006334:	2840      	cmp	r0, #64	; 0x40
 8006336:	d007      	beq.n	8006348 <ai_buffer_fmt_name+0xb4>
 8006338:	4981      	ldr	r1, [pc, #516]	; (8006540 <.text_19>)
 800633a:	4288      	cmp	r0, r1
 800633c:	d00a      	beq.n	8006354 <ai_buffer_fmt_name+0xc0>
 800633e:	4981      	ldr	r1, [pc, #516]	; (8006544 <.text_20>)
 8006340:	4288      	cmp	r0, r1
 8006342:	d004      	beq.n	800634e <ai_buffer_fmt_name+0xba>
 8006344:	a079      	add	r0, pc, #484	; (adr r0, 800652c <.text_14>)
 8006346:	4770      	bx	lr
 8006348:	f20f 4074 	addw	r0, pc, #1140	; 0x474
 800634c:	4770      	bx	lr
 800634e:	f20f 4088 	addw	r0, pc, #1160	; 0x488
 8006352:	4770      	bx	lr
 8006354:	f20f 4094 	addw	r0, pc, #1172	; 0x494
 8006358:	4770      	bx	lr

0800635a <ai_buffer_fmt_valid>:
 800635a:	f020 407e 	bic.w	r0, r0, #4261412864	; 0xfe000000
 800635e:	f1b0 0140 	subs.w	r1, r0, #64	; 0x40
 8006362:	d02d      	beq.n	80063c0 <ai_buffer_fmt_valid+0x66>
 8006364:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8006368:	1a89      	subs	r1, r1, r2
 800636a:	d029      	beq.n	80063c0 <ai_buffer_fmt_valid+0x66>
 800636c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006370:	1a89      	subs	r1, r1, r2
 8006372:	d025      	beq.n	80063c0 <ai_buffer_fmt_valid+0x66>
 8006374:	1fc9      	subs	r1, r1, #7
 8006376:	d023      	beq.n	80063c0 <ai_buffer_fmt_valid+0x66>
 8006378:	f240 32f9 	movw	r2, #1017	; 0x3f9
 800637c:	1a89      	subs	r1, r1, r2
 800637e:	d01f      	beq.n	80063c0 <ai_buffer_fmt_valid+0x66>
 8006380:	390f      	subs	r1, #15
 8006382:	d01d      	beq.n	80063c0 <ai_buffer_fmt_valid+0x66>
 8006384:	4a71      	ldr	r2, [pc, #452]	; (800654c <.text_22>)
 8006386:	1a89      	subs	r1, r1, r2
 8006388:	d01a      	beq.n	80063c0 <ai_buffer_fmt_valid+0x66>
 800638a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800638e:	1a89      	subs	r1, r1, r2
 8006390:	d016      	beq.n	80063c0 <ai_buffer_fmt_valid+0x66>
 8006392:	1fc9      	subs	r1, r1, #7
 8006394:	d014      	beq.n	80063c0 <ai_buffer_fmt_valid+0x66>
 8006396:	f240 32f9 	movw	r2, #1017	; 0x3f9
 800639a:	1a89      	subs	r1, r1, r2
 800639c:	d010      	beq.n	80063c0 <ai_buffer_fmt_valid+0x66>
 800639e:	390f      	subs	r1, #15
 80063a0:	d00e      	beq.n	80063c0 <ai_buffer_fmt_valid+0x66>
 80063a2:	4a6b      	ldr	r2, [pc, #428]	; (8006550 <.text_23>)
 80063a4:	1a89      	subs	r1, r1, r2
 80063a6:	bf1f      	itttt	ne
 80063a8:	0b80      	lsrne	r0, r0, #14
 80063aa:	0380      	lslne	r0, r0, #14
 80063ac:	f040 0040 	orrne.w	r0, r0, #64	; 0x40
 80063b0:	2840      	cmpne	r0, #64	; 0x40
 80063b2:	d005      	beq.n	80063c0 <ai_buffer_fmt_valid+0x66>
 80063b4:	4b62      	ldr	r3, [pc, #392]	; (8006540 <.text_19>)
 80063b6:	4298      	cmp	r0, r3
 80063b8:	bf1c      	itt	ne
 80063ba:	4b62      	ldrne	r3, [pc, #392]	; (8006544 <.text_20>)
 80063bc:	4298      	cmpne	r0, r3
 80063be:	d101      	bne.n	80063c4 <ai_buffer_fmt_valid+0x6a>
 80063c0:	2001      	movs	r0, #1
 80063c2:	4770      	bx	lr
 80063c4:	2000      	movs	r0, #0
 80063c6:	4770      	bx	lr

080063c8 <ai_buffer_fmt_get_formats>:
 80063c8:	4962      	ldr	r1, [pc, #392]	; (8006554 <.text_24>)
 80063ca:	6001      	str	r1, [r0, #0]
 80063cc:	200c      	movs	r0, #12
 80063ce:	4770      	bx	lr

080063d0 <ai_array_to_buffer_fmt>:
 80063d0:	4601      	mov	r1, r0
 80063d2:	2040      	movs	r0, #64	; 0x40
 80063d4:	f3c1 4243 	ubfx	r2, r1, #17, #4
 80063d8:	2a02      	cmp	r2, #2
 80063da:	d104      	bne.n	80063e6 <ai_array_to_buffer_fmt+0x16>
 80063dc:	485e      	ldr	r0, [pc, #376]	; (8006558 <.text_25>)
 80063de:	4008      	ands	r0, r1
 80063e0:	f440 2080 	orr.w	r0, r0, #262144	; 0x40000
 80063e4:	e037      	b.n	8006456 <ai_array_to_buffer_fmt+0x86>
 80063e6:	f021 427e 	bic.w	r2, r1, #4261412864	; 0xfe000000
 80063ea:	4b55      	ldr	r3, [pc, #340]	; (8006540 <.text_19>)
 80063ec:	1ad2      	subs	r2, r2, r3
 80063ee:	d02d      	beq.n	800644c <ai_array_to_buffer_fmt+0x7c>
 80063f0:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80063f4:	1ad2      	subs	r2, r2, r3
 80063f6:	d01b      	beq.n	8006430 <ai_array_to_buffer_fmt+0x60>
 80063f8:	1fd2      	subs	r2, r2, #7
 80063fa:	d029      	beq.n	8006450 <ai_array_to_buffer_fmt+0x80>
 80063fc:	f240 33f9 	movw	r3, #1017	; 0x3f9
 8006400:	1ad2      	subs	r2, r2, r3
 8006402:	d017      	beq.n	8006434 <ai_array_to_buffer_fmt+0x64>
 8006404:	3a0f      	subs	r2, #15
 8006406:	d025      	beq.n	8006454 <ai_array_to_buffer_fmt+0x84>
 8006408:	4b50      	ldr	r3, [pc, #320]	; (800654c <.text_22>)
 800640a:	1ad2      	subs	r2, r2, r3
 800640c:	d018      	beq.n	8006440 <ai_array_to_buffer_fmt+0x70>
 800640e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006412:	1ad2      	subs	r2, r2, r3
 8006414:	d010      	beq.n	8006438 <ai_array_to_buffer_fmt+0x68>
 8006416:	1fd2      	subs	r2, r2, #7
 8006418:	d014      	beq.n	8006444 <ai_array_to_buffer_fmt+0x74>
 800641a:	f240 33f9 	movw	r3, #1017	; 0x3f9
 800641e:	1ad2      	subs	r2, r2, r3
 8006420:	d00c      	beq.n	800643c <ai_array_to_buffer_fmt+0x6c>
 8006422:	3a0f      	subs	r2, #15
 8006424:	d010      	beq.n	8006448 <ai_array_to_buffer_fmt+0x78>
 8006426:	4b4a      	ldr	r3, [pc, #296]	; (8006550 <.text_23>)
 8006428:	1ad2      	subs	r2, r2, r3
 800642a:	d114      	bne.n	8006456 <ai_array_to_buffer_fmt+0x86>
 800642c:	484b      	ldr	r0, [pc, #300]	; (800655c <.text_26>)
 800642e:	e012      	b.n	8006456 <ai_array_to_buffer_fmt+0x86>
 8006430:	484b      	ldr	r0, [pc, #300]	; (8006560 <.text_27>)
 8006432:	e010      	b.n	8006456 <ai_array_to_buffer_fmt+0x86>
 8006434:	484b      	ldr	r0, [pc, #300]	; (8006564 <.text_28>)
 8006436:	e00e      	b.n	8006456 <ai_array_to_buffer_fmt+0x86>
 8006438:	484b      	ldr	r0, [pc, #300]	; (8006568 <.text_29>)
 800643a:	e00c      	b.n	8006456 <ai_array_to_buffer_fmt+0x86>
 800643c:	484b      	ldr	r0, [pc, #300]	; (800656c <.text_30>)
 800643e:	e00a      	b.n	8006456 <ai_array_to_buffer_fmt+0x86>
 8006440:	4840      	ldr	r0, [pc, #256]	; (8006544 <.text_20>)
 8006442:	e008      	b.n	8006456 <ai_array_to_buffer_fmt+0x86>
 8006444:	484a      	ldr	r0, [pc, #296]	; (8006570 <.text_31>)
 8006446:	e006      	b.n	8006456 <ai_array_to_buffer_fmt+0x86>
 8006448:	484a      	ldr	r0, [pc, #296]	; (8006574 <.text_32>)
 800644a:	e004      	b.n	8006456 <ai_array_to_buffer_fmt+0x86>
 800644c:	4618      	mov	r0, r3
 800644e:	e002      	b.n	8006456 <ai_array_to_buffer_fmt+0x86>
 8006450:	4849      	ldr	r0, [pc, #292]	; (8006578 <.text_33>)
 8006452:	e000      	b.n	8006456 <ai_array_to_buffer_fmt+0x86>
 8006454:	4849      	ldr	r0, [pc, #292]	; (800657c <.text_34>)
 8006456:	004a      	lsls	r2, r1, #1
 8006458:	bf4c      	ite	mi
 800645a:	f04f 4280 	movmi.w	r2, #1073741824	; 0x40000000
 800645e:	2200      	movpl	r2, #0
 8006460:	4310      	orrs	r0, r2
 8006462:	008a      	lsls	r2, r1, #2
 8006464:	bf4c      	ite	mi
 8006466:	f04f 5200 	movmi.w	r2, #536870912	; 0x20000000
 800646a:	2200      	movpl	r2, #0
 800646c:	4310      	orrs	r0, r2
 800646e:	0109      	lsls	r1, r1, #4
 8006470:	bf4c      	ite	mi
 8006472:	f04f 6100 	movmi.w	r1, #134217728	; 0x8000000
 8006476:	2100      	movpl	r1, #0
 8006478:	4308      	orrs	r0, r1
 800647a:	4770      	bx	lr

0800647c <ai_buffer_to_array_fmt>:
 800647c:	4602      	mov	r2, r0
 800647e:	f022 407e 	bic.w	r0, r2, #4261412864	; 0xfe000000
 8006482:	3840      	subs	r0, #64	; 0x40
 8006484:	d022      	beq.n	80064cc <ai_buffer_to_array_fmt+0x50>
 8006486:	f44f 2180 	mov.w	r1, #262144	; 0x40000
 800648a:	1a40      	subs	r0, r0, r1
 800648c:	d030      	beq.n	80064f0 <ai_buffer_to_array_fmt+0x74>
 800648e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006492:	1a40      	subs	r0, r0, r1
 8006494:	d01e      	beq.n	80064d4 <ai_buffer_to_array_fmt+0x58>
 8006496:	1fc0      	subs	r0, r0, #7
 8006498:	d02c      	beq.n	80064f4 <ai_buffer_to_array_fmt+0x78>
 800649a:	f240 31f9 	movw	r1, #1017	; 0x3f9
 800649e:	1a40      	subs	r0, r0, r1
 80064a0:	d01a      	beq.n	80064d8 <ai_buffer_to_array_fmt+0x5c>
 80064a2:	380f      	subs	r0, #15
 80064a4:	d028      	beq.n	80064f8 <ai_buffer_to_array_fmt+0x7c>
 80064a6:	4929      	ldr	r1, [pc, #164]	; (800654c <.text_22>)
 80064a8:	1a40      	subs	r0, r0, r1
 80064aa:	d01b      	beq.n	80064e4 <ai_buffer_to_array_fmt+0x68>
 80064ac:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80064b0:	1a40      	subs	r0, r0, r1
 80064b2:	d013      	beq.n	80064dc <ai_buffer_to_array_fmt+0x60>
 80064b4:	1fc0      	subs	r0, r0, #7
 80064b6:	d017      	beq.n	80064e8 <ai_buffer_to_array_fmt+0x6c>
 80064b8:	f240 31f9 	movw	r1, #1017	; 0x3f9
 80064bc:	1a40      	subs	r0, r0, r1
 80064be:	d00f      	beq.n	80064e0 <ai_buffer_to_array_fmt+0x64>
 80064c0:	380f      	subs	r0, #15
 80064c2:	d013      	beq.n	80064ec <ai_buffer_to_array_fmt+0x70>
 80064c4:	4922      	ldr	r1, [pc, #136]	; (8006550 <.text_23>)
 80064c6:	1a40      	subs	r0, r0, r1
 80064c8:	d002      	beq.n	80064d0 <ai_buffer_to_array_fmt+0x54>
 80064ca:	e017      	b.n	80064fc <ai_buffer_to_array_fmt+0x80>
 80064cc:	2040      	movs	r0, #64	; 0x40
 80064ce:	e01f      	b.n	8006510 <ai_buffer_to_array_fmt+0x94>
 80064d0:	4822      	ldr	r0, [pc, #136]	; (800655c <.text_26>)
 80064d2:	e01d      	b.n	8006510 <ai_buffer_to_array_fmt+0x94>
 80064d4:	4822      	ldr	r0, [pc, #136]	; (8006560 <.text_27>)
 80064d6:	e01b      	b.n	8006510 <ai_buffer_to_array_fmt+0x94>
 80064d8:	4822      	ldr	r0, [pc, #136]	; (8006564 <.text_28>)
 80064da:	e019      	b.n	8006510 <ai_buffer_to_array_fmt+0x94>
 80064dc:	4822      	ldr	r0, [pc, #136]	; (8006568 <.text_29>)
 80064de:	e017      	b.n	8006510 <ai_buffer_to_array_fmt+0x94>
 80064e0:	4822      	ldr	r0, [pc, #136]	; (800656c <.text_30>)
 80064e2:	e015      	b.n	8006510 <ai_buffer_to_array_fmt+0x94>
 80064e4:	4817      	ldr	r0, [pc, #92]	; (8006544 <.text_20>)
 80064e6:	e013      	b.n	8006510 <ai_buffer_to_array_fmt+0x94>
 80064e8:	4821      	ldr	r0, [pc, #132]	; (8006570 <.text_31>)
 80064ea:	e011      	b.n	8006510 <ai_buffer_to_array_fmt+0x94>
 80064ec:	4821      	ldr	r0, [pc, #132]	; (8006574 <.text_32>)
 80064ee:	e00f      	b.n	8006510 <ai_buffer_to_array_fmt+0x94>
 80064f0:	4813      	ldr	r0, [pc, #76]	; (8006540 <.text_19>)
 80064f2:	e00d      	b.n	8006510 <ai_buffer_to_array_fmt+0x94>
 80064f4:	4820      	ldr	r0, [pc, #128]	; (8006578 <.text_33>)
 80064f6:	e00b      	b.n	8006510 <ai_buffer_to_array_fmt+0x94>
 80064f8:	4820      	ldr	r0, [pc, #128]	; (800657c <.text_34>)
 80064fa:	e009      	b.n	8006510 <ai_buffer_to_array_fmt+0x94>
 80064fc:	f3c2 51c0 	ubfx	r1, r2, #23, #1
 8006500:	f3c2 000d 	ubfx	r0, r2, #0, #14
 8006504:	2900      	cmp	r1, #0
 8006506:	bf14      	ite	ne
 8006508:	f440 0004 	orrne.w	r0, r0, #8650752	; 0x840000
 800650c:	f440 2080 	orreq.w	r0, r0, #262144	; 0x40000
 8006510:	0051      	lsls	r1, r2, #1
 8006512:	bf48      	it	mi
 8006514:	f040 4080 	orrmi.w	r0, r0, #1073741824	; 0x40000000
 8006518:	0091      	lsls	r1, r2, #2
 800651a:	bf48      	it	mi
 800651c:	f040 5000 	orrmi.w	r0, r0, #536870912	; 0x20000000
 8006520:	0111      	lsls	r1, r2, #4
 8006522:	bf48      	it	mi
 8006524:	f040 6000 	orrmi.w	r0, r0, #134217728	; 0x8000000
 8006528:	4770      	bx	lr
	...

0800652c <.text_14>:
 800652c:	00000000 	.word	0x00000000

08006530 <.text_15>:
 8006530:	002be80f 	.word	0x002be80f

08006534 <.text_16>:
 8006534:	003bf7f1 	.word	0x003bf7f1

08006538 <.text_17>:
 8006538:	00b9fff1 	.word	0x00b9fff1

0800653c <.text_18>:
 800653c:	004df000 	.word	0x004df000

08006540 <.text_19>:
 8006540:	00040040 	.word	0x00040040

08006544 <.text_20>:
 8006544:	00840040 	.word	0x00840040

08006548 <.text_21>:
 8006548:	0800e31c 	.word	0x0800e31c

0800654c <.text_22>:
 800654c:	007ff7f1 	.word	0x007ff7f1

08006550 <.text_23>:
 8006550:	00fe07f1 	.word	0x00fe07f1

08006554 <.text_24>:
 8006554:	0800e38c 	.word	0x0800e38c

08006558 <.text_25>:
 8006558:	00803fff 	.word	0x00803fff

0800655c <.text_26>:
 800655c:	01821040 	.word	0x01821040

08006560 <.text_27>:
 8006560:	00040440 	.word	0x00040440

08006564 <.text_28>:
 8006564:	00040840 	.word	0x00040840

08006568 <.text_29>:
 8006568:	00840440 	.word	0x00840440

0800656c <.text_30>:
 800656c:	00840840 	.word	0x00840840

08006570 <.text_31>:
 8006570:	00840447 	.word	0x00840447

08006574 <.text_32>:
 8006574:	0084084f 	.word	0x0084084f

08006578 <.text_33>:
 8006578:	00040447 	.word	0x00040447

0800657c <.text_34>:
 800657c:	0004084f 	.word	0x0004084f

08006580 <ai_array_get_byte_size>:
 8006580:	b909      	cbnz	r1, 8006586 <ai_array_get_byte_size+0x6>
 8006582:	2000      	movs	r0, #0
 8006584:	4770      	bx	lr
 8006586:	11c2      	asrs	r2, r0, #7
 8006588:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800658c:	f3c0 3382 	ubfx	r3, r0, #14, #3
 8006590:	189b      	adds	r3, r3, r2
 8006592:	4359      	muls	r1, r3
 8006594:	1dc9      	adds	r1, r1, #7
 8006596:	08c9      	lsrs	r1, r1, #3
 8006598:	1543      	asrs	r3, r0, #21
 800659a:	00c9      	lsls	r1, r1, #3
 800659c:	f003 0303 	and.w	r3, r3, #3
 80065a0:	ea4f 4c60 	mov.w	ip, r0, asr #17
 80065a4:	40d9      	lsrs	r1, r3
 80065a6:	f00c 0c0f 	and.w	ip, ip, #15
 80065aa:	f1bc 0f04 	cmp.w	ip, #4
 80065ae:	d00a      	beq.n	80065c6 <ai_array_get_byte_size+0x46>
 80065b0:	f1bc 0f08 	cmp.w	ip, #8
 80065b4:	bf02      	ittt	eq
 80065b6:	f3c0 3082 	ubfxeq	r0, r0, #14, #3
 80065ba:	1882      	addeq	r2, r0, r2
 80065bc:	eb01 2102 	addeq.w	r1, r1, r2, lsl #8
 80065c0:	1dc9      	adds	r1, r1, #7
 80065c2:	08c8      	lsrs	r0, r1, #3
 80065c4:	4770      	bx	lr
 80065c6:	f3c0 3082 	ubfx	r0, r0, #14, #3
 80065ca:	1882      	adds	r2, r0, r2
 80065cc:	eb01 1102 	add.w	r1, r1, r2, lsl #4
 80065d0:	1dc9      	adds	r1, r1, #7
 80065d2:	08c8      	lsrs	r0, r1, #3
 80065d4:	4770      	bx	lr

080065d6 <ai_array_get_data_byte_size>:
 80065d6:	b909      	cbnz	r1, 80065dc <ai_array_get_data_byte_size+0x6>
 80065d8:	2000      	movs	r0, #0
 80065da:	4770      	bx	lr
 80065dc:	11c2      	asrs	r2, r0, #7
 80065de:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80065e2:	f3c0 3382 	ubfx	r3, r0, #14, #3
 80065e6:	189a      	adds	r2, r3, r2
 80065e8:	4351      	muls	r1, r2
 80065ea:	1dc9      	adds	r1, r1, #7
 80065ec:	08c9      	lsrs	r1, r1, #3
 80065ee:	1540      	asrs	r0, r0, #21
 80065f0:	00c9      	lsls	r1, r1, #3
 80065f2:	f000 0003 	and.w	r0, r0, #3
 80065f6:	40c1      	lsrs	r1, r0
 80065f8:	1dc9      	adds	r1, r1, #7
 80065fa:	08c8      	lsrs	r0, r1, #3
 80065fc:	4770      	bx	lr

080065fe <ai_array_get_elems_from_size>:
 80065fe:	b909      	cbnz	r1, 8006604 <ai_array_get_elems_from_size+0x6>
 8006600:	2000      	movs	r0, #0
 8006602:	4770      	bx	lr
 8006604:	1442      	asrs	r2, r0, #17
 8006606:	00c9      	lsls	r1, r1, #3
 8006608:	f002 020f 	and.w	r2, r2, #15
 800660c:	2a04      	cmp	r2, #4
 800660e:	d002      	beq.n	8006616 <ai_array_get_elems_from_size+0x18>
 8006610:	2a08      	cmp	r2, #8
 8006612:	d009      	beq.n	8006628 <ai_array_get_elems_from_size+0x2a>
 8006614:	e010      	b.n	8006638 <ai_array_get_elems_from_size+0x3a>
 8006616:	11c3      	asrs	r3, r0, #7
 8006618:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800661c:	f3c0 3282 	ubfx	r2, r0, #14, #3
 8006620:	18d2      	adds	r2, r2, r3
 8006622:	eba1 1102 	sub.w	r1, r1, r2, lsl #4
 8006626:	e007      	b.n	8006638 <ai_array_get_elems_from_size+0x3a>
 8006628:	11c2      	asrs	r2, r0, #7
 800662a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800662e:	f3c0 3382 	ubfx	r3, r0, #14, #3
 8006632:	189a      	adds	r2, r3, r2
 8006634:	eba1 2102 	sub.w	r1, r1, r2, lsl #8
 8006638:	1542      	asrs	r2, r0, #21
 800663a:	f002 0203 	and.w	r2, r2, #3
 800663e:	4091      	lsls	r1, r2
 8006640:	1dc9      	adds	r1, r1, #7
 8006642:	11c2      	asrs	r2, r0, #7
 8006644:	08c9      	lsrs	r1, r1, #3
 8006646:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800664a:	f3c0 3082 	ubfx	r0, r0, #14, #3
 800664e:	00c9      	lsls	r1, r1, #3
 8006650:	1880      	adds	r0, r0, r2
 8006652:	fbb1 f0f0 	udiv	r0, r1, r0
 8006656:	4770      	bx	lr

08006658 <.text_38>:
 8006658:	5f544d46 	.word	0x5f544d46
 800665c:	454e4f4e 	.word	0x454e4f4e
 8006660:	00          	.byte	0x00
 8006661:	00          	.byte	0x00
	...

08006664 <.text_39>:
 8006664:	5f544d46 	.word	0x5f544d46
 8006668:	414f4c46 	.word	0x414f4c46
 800666c:	0054      	.short	0x0054
	...

08006670 <.text_40>:
 8006670:	5f544d46 	.word	0x5f544d46
 8006674:	414f4c46 	.word	0x414f4c46
 8006678:	00343654 	.word	0x00343654

0800667c <.text_41>:
 800667c:	5f544d46 	.word	0x5f544d46
 8006680:	414f4c46 	.word	0x414f4c46
 8006684:	00363154 	.word	0x00363154

08006688 <.text_42>:
 8006688:	5f544d46 	.word	0x5f544d46
 800668c:	00003855 	.word	0x00003855

08006690 <.text_43>:
 8006690:	5f544d46 	.word	0x5f544d46
 8006694:	00363155 	.word	0x00363155

08006698 <.text_44>:
 8006698:	5f544d46 	.word	0x5f544d46
 800669c:	00323355 	.word	0x00323355

080066a0 <.text_45>:
 80066a0:	5f544d46 	.word	0x5f544d46
 80066a4:	00343655 	.word	0x00343655

080066a8 <.text_46>:
 80066a8:	5f544d46 	.word	0x5f544d46
 80066ac:	00003455 	.word	0x00003455

080066b0 <.text_47>:
 80066b0:	5f544d46 	.word	0x5f544d46
 80066b4:	00003853 	.word	0x00003853

080066b8 <.text_48>:
 80066b8:	5f544d46 	.word	0x5f544d46
 80066bc:	00363153 	.word	0x00363153

080066c0 <.text_49>:
 80066c0:	5f544d46 	.word	0x5f544d46
 80066c4:	00323353 	.word	0x00323353

080066c8 <.text_50>:
 80066c8:	5f544d46 	.word	0x5f544d46
 80066cc:	00343653 	.word	0x00343653

080066d0 <.text_51>:
 80066d0:	5f544d46 	.word	0x5f544d46
 80066d4:	00003453 	.word	0x00003453

080066d8 <.text_52>:
 80066d8:	5f544d46 	.word	0x5f544d46
 80066dc:	0051      	.short	0x0051
	...

080066e0 <.text_53>:
 80066e0:	5f544d46 	.word	0x5f544d46
 80066e4:	00003751 	.word	0x00003751

080066e8 <.text_54>:
 80066e8:	5f544d46 	.word	0x5f544d46
 80066ec:	00353151 	.word	0x00353151

080066f0 <.text_55>:
 80066f0:	5f544d46 	.word	0x5f544d46
 80066f4:	00313351 	.word	0x00313351

080066f8 <.text_56>:
 80066f8:	5f544d46 	.word	0x5f544d46
 80066fc:	00005155 	.word	0x00005155

08006700 <.text_57>:
 8006700:	5f544d46 	.word	0x5f544d46
 8006704:	00375155 	.word	0x00375155

08006708 <.text_58>:
 8006708:	5f544d46 	.word	0x5f544d46
 800670c:	35315155 	.word	0x35315155
 8006710:	00          	.byte	0x00
 8006711:	00          	.byte	0x00
	...

08006714 <.text_59>:
 8006714:	5f544d46 	.word	0x5f544d46
 8006718:	31335155 	.word	0x31335155
 800671c:	00          	.byte	0x00
 800671d:	00          	.byte	0x00
	...

08006720 <.text_60>:
 8006720:	5f544d46 	.word	0x5f544d46
 8006724:	3454554c 	.word	0x3454554c
 8006728:	4f4c465f 	.word	0x4f4c465f
 800672c:	00005441 	.word	0x00005441

08006730 <.text_61>:
 8006730:	5f544d46 	.word	0x5f544d46
 8006734:	3854554c 	.word	0x3854554c
 8006738:	4f4c465f 	.word	0x4f4c465f
 800673c:	00005441 	.word	0x00005441

08006740 <.text_62>:
 8006740:	5f544d46 	.word	0x5f544d46
 8006744:	3454554c 	.word	0x3454554c
 8006748:	3531515f 	.word	0x3531515f
 800674c:	00          	.byte	0x00
 800674d:	00          	.byte	0x00
	...

08006750 <.text_63>:
 8006750:	5f544d46 	.word	0x5f544d46
 8006754:	3854554c 	.word	0x3854554c
 8006758:	3531515f 	.word	0x3531515f
 800675c:	00          	.byte	0x00
 800675d:	00          	.byte	0x00
	...

08006760 <.text_64>:
 8006760:	5f544d46 	.word	0x5f544d46
 8006764:	3454554c 	.word	0x3454554c
 8006768:	3151555f 	.word	0x3151555f
 800676c:	0035      	.short	0x0035
	...

08006770 <.text_65>:
 8006770:	5f544d46 	.word	0x5f544d46
 8006774:	3854554c 	.word	0x3854554c
 8006778:	3151555f 	.word	0x3151555f
 800677c:	0035      	.short	0x0035
	...

08006780 <.text_66>:
 8006780:	415f4941 	.word	0x415f4941
 8006784:	59415252 	.word	0x59415252
 8006788:	524f465f 	.word	0x524f465f
 800678c:	5f54414d 	.word	0x5f54414d
 8006790:	454e4f4e 	.word	0x454e4f4e
 8006794:	00          	.byte	0x00
 8006795:	00          	.byte	0x00
	...

08006798 <.text_67>:
 8006798:	415f4941 	.word	0x415f4941
 800679c:	59415252 	.word	0x59415252
 80067a0:	524f465f 	.word	0x524f465f
 80067a4:	5f54414d 	.word	0x5f54414d
 80067a8:	0051      	.short	0x0051
	...

080067ac <.text_68>:
 80067ac:	415f4941 	.word	0x415f4941
 80067b0:	59415252 	.word	0x59415252
 80067b4:	524f465f 	.word	0x524f465f
 80067b8:	5f54414d 	.word	0x5f54414d
 80067bc:	00005155 	.word	0x00005155

080067c0 <.text_69>:
 80067c0:	425f4941 	.word	0x425f4941
 80067c4:	45464655 	.word	0x45464655
 80067c8:	4f465f52 	.word	0x4f465f52
 80067cc:	54414d52 	.word	0x54414d52
 80067d0:	4e4f4e5f 	.word	0x4e4f4e5f
 80067d4:	0045      	.short	0x0045
	...

080067d8 <.text_70>:
 80067d8:	425f4941 	.word	0x425f4941
 80067dc:	45464655 	.word	0x45464655
 80067e0:	4f465f52 	.word	0x4f465f52
 80067e4:	54414d52 	.word	0x54414d52
 80067e8:	0000515f 	.word	0x0000515f

080067ec <.text_71>:
 80067ec:	425f4941 	.word	0x425f4941
 80067f0:	45464655 	.word	0x45464655
 80067f4:	4f465f52 	.word	0x4f465f52
 80067f8:	54414d52 	.word	0x54414d52
 80067fc:	0051555f 	.word	0x0051555f

08006800 <ai_math_sqrt>:
 8006800:	eef0 0a40 	vmov.f32	s1, s0
 8006804:	eef5 0a40 	vcmp.f32	s1, #0.0
 8006808:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800680c:	ed9f 0a29 	vldr	s0, [pc, #164]	; 80068b4 <.text_12>
 8006810:	db01      	blt.n	8006816 <ai_math_sqrt+0x16>
 8006812:	eeb1 0ae0 	vsqrt.f32	s0, s1
 8006816:	4770      	bx	lr

08006818 <ai_math_exp>:
 8006818:	f005 babc 	b.w	800bd94 <expf>

0800681c <ai_math_pow>:
 800681c:	f005 bc06 	b.w	800c02c <powf>

08006820 <ai_math_tanh>:
 8006820:	f005 b892 	b.w	800b948 <tanhf>

08006824 <ai_math_cosh>:
 8006824:	f005 ba56 	b.w	800bcd4 <coshf>

08006828 <ai_math_relu>:
 8006828:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800682c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006830:	bf48      	it	mi
 8006832:	ed9f 0a20 	vldrmi	s0, [pc, #128]	; 80068b4 <.text_12>
 8006836:	4770      	bx	lr

08006838 <ai_math_prelu>:
 8006838:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800683c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006840:	bf48      	it	mi
 8006842:	ee20 0a20 	vmulmi.f32	s0, s0, s1
 8006846:	4770      	bx	lr

08006848 <ai_math_sigmoid>:
 8006848:	b500      	push	{lr}
 800684a:	b081      	sub	sp, #4
 800684c:	eeb1 0a40 	vneg.f32	s0, s0
 8006850:	f005 faa0 	bl	800bd94 <expf>
 8006854:	eef7 0a00 	vmov.f32	s1, #112	; 0x3f800000  1.0
 8006858:	ee30 0a20 	vadd.f32	s0, s0, s1
 800685c:	eeb7 1a00 	vmov.f32	s2, #112	; 0x3f800000  1.0
 8006860:	ee81 0a00 	vdiv.f32	s0, s2, s0
 8006864:	b001      	add	sp, #4
 8006866:	bd00      	pop	{pc}

08006868 <ai_math_hard_sigmoid>:
 8006868:	eef0 0a40 	vmov.f32	s1, s0
 800686c:	ed9f 1a12 	vldr	s2, [pc, #72]	; 80068b8 <.text_13>
 8006870:	eeb6 0a00 	vmov.f32	s0, #96	; 0x3f000000  0.5
 8006874:	ee00 0a81 	vmla.f32	s0, s1, s2
 8006878:	eddf 0a10 	vldr	s1, [pc, #64]	; 80068bc <.text_14>
 800687c:	eeb4 0a60 	vcmp.f32	s0, s1
 8006880:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006884:	da07      	bge.n	8006896 <ai_math_hard_sigmoid+0x2e>
 8006886:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800688a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800688e:	d504      	bpl.n	800689a <ai_math_hard_sigmoid+0x32>
 8006890:	ed9f 0a08 	vldr	s0, [pc, #32]	; 80068b4 <.text_12>
 8006894:	4770      	bx	lr
 8006896:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800689a:	4770      	bx	lr

0800689c <ai_math_sign>:
 800689c:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80068a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80068a4:	bfcc      	ite	gt
 80068a6:	ed9f 0a06 	vldrgt	s0, [pc, #24]	; 80068c0 <.text_15>
 80068aa:	ed9f 0a06 	vldrle	s0, [pc, #24]	; 80068c4 <.text_16>
 80068ae:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 80068b2:	4770      	bx	lr

080068b4 <.text_12>:
 80068b4:	00000000 	.word	0x00000000

080068b8 <.text_13>:
 80068b8:	3e4ccccd 	.word	0x3e4ccccd

080068bc <.text_14>:
 80068bc:	3f800001 	.word	0x3f800001

080068c0 <.text_15>:
 80068c0:	00000001 	.word	0x00000001

080068c4 <.text_16>:
 80068c4:	ffffffff 	.word	0xffffffff

080068c8 <ai_div>:
 80068c8:	ee80 0a20 	vdiv.f32	s0, s0, s1
 80068cc:	4770      	bx	lr

080068ce <ai_floor_div>:
 80068ce:	ee80 0a20 	vdiv.f32	s0, s0, s1
 80068d2:	f004 be5f 	b.w	800b594 <floorf>

080068d6 <ai_floor_mod>:
 80068d6:	f005 bad7 	b.w	800be88 <fmodf>

080068da <ai_max>:
 80068da:	eef4 0a40 	vcmp.f32	s1, s0
 80068de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80068e2:	bf58      	it	pl
 80068e4:	eeb0 0a60 	vmovpl.f32	s0, s1
 80068e8:	4770      	bx	lr

080068ea <ai_min>:
 80068ea:	eeb4 0a60 	vcmp.f32	s0, s1
 80068ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80068f2:	bf58      	it	pl
 80068f4:	eeb0 0a60 	vmovpl.f32	s0, s1
 80068f8:	4770      	bx	lr

080068fa <ai_mul>:
 80068fa:	ee20 0a20 	vmul.f32	s0, s0, s1
 80068fe:	4770      	bx	lr

08006900 <ai_sub>:
 8006900:	ee30 0a60 	vsub.f32	s0, s0, s1
 8006904:	4770      	bx	lr

08006906 <ai_sum>:
 8006906:	ee30 0a20 	vadd.f32	s0, s0, s1
 800690a:	4770      	bx	lr

0800690c <arm_mat_init_f32>:
 800690c:	8001      	strh	r1, [r0, #0]
 800690e:	8042      	strh	r2, [r0, #2]
 8006910:	6043      	str	r3, [r0, #4]
 8006912:	4770      	bx	lr

08006914 <__aeabi_memset>:
 8006914:	b470      	push	{r4, r5, r6}
 8006916:	0784      	lsls	r4, r0, #30
 8006918:	d046      	beq.n	80069a8 <__aeabi_memset+0x94>
 800691a:	1e4c      	subs	r4, r1, #1
 800691c:	2900      	cmp	r1, #0
 800691e:	d041      	beq.n	80069a4 <__aeabi_memset+0x90>
 8006920:	b2d5      	uxtb	r5, r2
 8006922:	4603      	mov	r3, r0
 8006924:	e002      	b.n	800692c <__aeabi_memset+0x18>
 8006926:	1e61      	subs	r1, r4, #1
 8006928:	b3e4      	cbz	r4, 80069a4 <__aeabi_memset+0x90>
 800692a:	460c      	mov	r4, r1
 800692c:	f803 5b01 	strb.w	r5, [r3], #1
 8006930:	0799      	lsls	r1, r3, #30
 8006932:	d1f8      	bne.n	8006926 <__aeabi_memset+0x12>
 8006934:	2c03      	cmp	r4, #3
 8006936:	d92e      	bls.n	8006996 <__aeabi_memset+0x82>
 8006938:	b2d5      	uxtb	r5, r2
 800693a:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
 800693e:	2c0f      	cmp	r4, #15
 8006940:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
 8006944:	d919      	bls.n	800697a <__aeabi_memset+0x66>
 8006946:	4626      	mov	r6, r4
 8006948:	f103 0110 	add.w	r1, r3, #16
 800694c:	3e10      	subs	r6, #16
 800694e:	2e0f      	cmp	r6, #15
 8006950:	f841 5c10 	str.w	r5, [r1, #-16]
 8006954:	f841 5c0c 	str.w	r5, [r1, #-12]
 8006958:	f841 5c08 	str.w	r5, [r1, #-8]
 800695c:	f841 5c04 	str.w	r5, [r1, #-4]
 8006960:	f101 0110 	add.w	r1, r1, #16
 8006964:	d8f2      	bhi.n	800694c <__aeabi_memset+0x38>
 8006966:	f1a4 0110 	sub.w	r1, r4, #16
 800696a:	f021 010f 	bic.w	r1, r1, #15
 800696e:	f004 040f 	and.w	r4, r4, #15
 8006972:	3110      	adds	r1, #16
 8006974:	2c03      	cmp	r4, #3
 8006976:	440b      	add	r3, r1
 8006978:	d90d      	bls.n	8006996 <__aeabi_memset+0x82>
 800697a:	461e      	mov	r6, r3
 800697c:	4621      	mov	r1, r4
 800697e:	3904      	subs	r1, #4
 8006980:	2903      	cmp	r1, #3
 8006982:	f846 5b04 	str.w	r5, [r6], #4
 8006986:	d8fa      	bhi.n	800697e <__aeabi_memset+0x6a>
 8006988:	1f21      	subs	r1, r4, #4
 800698a:	f021 0103 	bic.w	r1, r1, #3
 800698e:	3104      	adds	r1, #4
 8006990:	440b      	add	r3, r1
 8006992:	f004 0403 	and.w	r4, r4, #3
 8006996:	b12c      	cbz	r4, 80069a4 <__aeabi_memset+0x90>
 8006998:	b2d2      	uxtb	r2, r2
 800699a:	441c      	add	r4, r3
 800699c:	f803 2b01 	strb.w	r2, [r3], #1
 80069a0:	42a3      	cmp	r3, r4
 80069a2:	d1fb      	bne.n	800699c <__aeabi_memset+0x88>
 80069a4:	bc70      	pop	{r4, r5, r6}
 80069a6:	4770      	bx	lr
 80069a8:	460c      	mov	r4, r1
 80069aa:	4603      	mov	r3, r0
 80069ac:	e7c2      	b.n	8006934 <__aeabi_memset+0x20>
	...

080069b0 <__aeabi_drsub>:
 80069b0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80069b4:	e002      	b.n	80069bc <__adddf3>
 80069b6:	bf00      	nop

080069b8 <__aeabi_dsub>:
 80069b8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080069bc <__adddf3>:
 80069bc:	b530      	push	{r4, r5, lr}
 80069be:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80069c2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80069c6:	ea94 0f05 	teq	r4, r5
 80069ca:	bf08      	it	eq
 80069cc:	ea90 0f02 	teqeq	r0, r2
 80069d0:	bf1f      	itttt	ne
 80069d2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80069d6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80069da:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80069de:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80069e2:	f000 80e2 	beq.w	8006baa <__adddf3+0x1ee>
 80069e6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80069ea:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80069ee:	bfb8      	it	lt
 80069f0:	426d      	neglt	r5, r5
 80069f2:	dd0c      	ble.n	8006a0e <__adddf3+0x52>
 80069f4:	442c      	add	r4, r5
 80069f6:	ea80 0202 	eor.w	r2, r0, r2
 80069fa:	ea81 0303 	eor.w	r3, r1, r3
 80069fe:	ea82 0000 	eor.w	r0, r2, r0
 8006a02:	ea83 0101 	eor.w	r1, r3, r1
 8006a06:	ea80 0202 	eor.w	r2, r0, r2
 8006a0a:	ea81 0303 	eor.w	r3, r1, r3
 8006a0e:	2d36      	cmp	r5, #54	; 0x36
 8006a10:	bf88      	it	hi
 8006a12:	bd30      	pophi	{r4, r5, pc}
 8006a14:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8006a18:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8006a1c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8006a20:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8006a24:	d002      	beq.n	8006a2c <__adddf3+0x70>
 8006a26:	4240      	negs	r0, r0
 8006a28:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8006a2c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8006a30:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8006a34:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8006a38:	d002      	beq.n	8006a40 <__adddf3+0x84>
 8006a3a:	4252      	negs	r2, r2
 8006a3c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8006a40:	ea94 0f05 	teq	r4, r5
 8006a44:	f000 80a7 	beq.w	8006b96 <__adddf3+0x1da>
 8006a48:	f1a4 0401 	sub.w	r4, r4, #1
 8006a4c:	f1d5 0e20 	rsbs	lr, r5, #32
 8006a50:	db0d      	blt.n	8006a6e <__adddf3+0xb2>
 8006a52:	fa02 fc0e 	lsl.w	ip, r2, lr
 8006a56:	fa22 f205 	lsr.w	r2, r2, r5
 8006a5a:	1880      	adds	r0, r0, r2
 8006a5c:	f141 0100 	adc.w	r1, r1, #0
 8006a60:	fa03 f20e 	lsl.w	r2, r3, lr
 8006a64:	1880      	adds	r0, r0, r2
 8006a66:	fa43 f305 	asr.w	r3, r3, r5
 8006a6a:	4159      	adcs	r1, r3
 8006a6c:	e00e      	b.n	8006a8c <__adddf3+0xd0>
 8006a6e:	f1a5 0520 	sub.w	r5, r5, #32
 8006a72:	f10e 0e20 	add.w	lr, lr, #32
 8006a76:	2a01      	cmp	r2, #1
 8006a78:	fa03 fc0e 	lsl.w	ip, r3, lr
 8006a7c:	bf28      	it	cs
 8006a7e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8006a82:	fa43 f305 	asr.w	r3, r3, r5
 8006a86:	18c0      	adds	r0, r0, r3
 8006a88:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8006a8c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8006a90:	d507      	bpl.n	8006aa2 <__adddf3+0xe6>
 8006a92:	f04f 0e00 	mov.w	lr, #0
 8006a96:	f1dc 0c00 	rsbs	ip, ip, #0
 8006a9a:	eb7e 0000 	sbcs.w	r0, lr, r0
 8006a9e:	eb6e 0101 	sbc.w	r1, lr, r1
 8006aa2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8006aa6:	d31b      	bcc.n	8006ae0 <__adddf3+0x124>
 8006aa8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8006aac:	d30c      	bcc.n	8006ac8 <__adddf3+0x10c>
 8006aae:	0849      	lsrs	r1, r1, #1
 8006ab0:	ea5f 0030 	movs.w	r0, r0, rrx
 8006ab4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8006ab8:	f104 0401 	add.w	r4, r4, #1
 8006abc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8006ac0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8006ac4:	f080 809a 	bcs.w	8006bfc <__adddf3+0x240>
 8006ac8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8006acc:	bf08      	it	eq
 8006ace:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8006ad2:	f150 0000 	adcs.w	r0, r0, #0
 8006ad6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8006ada:	ea41 0105 	orr.w	r1, r1, r5
 8006ade:	bd30      	pop	{r4, r5, pc}
 8006ae0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8006ae4:	4140      	adcs	r0, r0
 8006ae6:	eb41 0101 	adc.w	r1, r1, r1
 8006aea:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8006aee:	f1a4 0401 	sub.w	r4, r4, #1
 8006af2:	d1e9      	bne.n	8006ac8 <__adddf3+0x10c>
 8006af4:	f091 0f00 	teq	r1, #0
 8006af8:	bf04      	itt	eq
 8006afa:	4601      	moveq	r1, r0
 8006afc:	2000      	moveq	r0, #0
 8006afe:	fab1 f381 	clz	r3, r1
 8006b02:	bf08      	it	eq
 8006b04:	3320      	addeq	r3, #32
 8006b06:	f1a3 030b 	sub.w	r3, r3, #11
 8006b0a:	f1b3 0220 	subs.w	r2, r3, #32
 8006b0e:	da0c      	bge.n	8006b2a <__adddf3+0x16e>
 8006b10:	320c      	adds	r2, #12
 8006b12:	dd08      	ble.n	8006b26 <__adddf3+0x16a>
 8006b14:	f102 0c14 	add.w	ip, r2, #20
 8006b18:	f1c2 020c 	rsb	r2, r2, #12
 8006b1c:	fa01 f00c 	lsl.w	r0, r1, ip
 8006b20:	fa21 f102 	lsr.w	r1, r1, r2
 8006b24:	e00c      	b.n	8006b40 <__adddf3+0x184>
 8006b26:	f102 0214 	add.w	r2, r2, #20
 8006b2a:	bfd8      	it	le
 8006b2c:	f1c2 0c20 	rsble	ip, r2, #32
 8006b30:	fa01 f102 	lsl.w	r1, r1, r2
 8006b34:	fa20 fc0c 	lsr.w	ip, r0, ip
 8006b38:	bfdc      	itt	le
 8006b3a:	ea41 010c 	orrle.w	r1, r1, ip
 8006b3e:	4090      	lslle	r0, r2
 8006b40:	1ae4      	subs	r4, r4, r3
 8006b42:	bfa2      	ittt	ge
 8006b44:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8006b48:	4329      	orrge	r1, r5
 8006b4a:	bd30      	popge	{r4, r5, pc}
 8006b4c:	ea6f 0404 	mvn.w	r4, r4
 8006b50:	3c1f      	subs	r4, #31
 8006b52:	da1c      	bge.n	8006b8e <__adddf3+0x1d2>
 8006b54:	340c      	adds	r4, #12
 8006b56:	dc0e      	bgt.n	8006b76 <__adddf3+0x1ba>
 8006b58:	f104 0414 	add.w	r4, r4, #20
 8006b5c:	f1c4 0220 	rsb	r2, r4, #32
 8006b60:	fa20 f004 	lsr.w	r0, r0, r4
 8006b64:	fa01 f302 	lsl.w	r3, r1, r2
 8006b68:	ea40 0003 	orr.w	r0, r0, r3
 8006b6c:	fa21 f304 	lsr.w	r3, r1, r4
 8006b70:	ea45 0103 	orr.w	r1, r5, r3
 8006b74:	bd30      	pop	{r4, r5, pc}
 8006b76:	f1c4 040c 	rsb	r4, r4, #12
 8006b7a:	f1c4 0220 	rsb	r2, r4, #32
 8006b7e:	fa20 f002 	lsr.w	r0, r0, r2
 8006b82:	fa01 f304 	lsl.w	r3, r1, r4
 8006b86:	ea40 0003 	orr.w	r0, r0, r3
 8006b8a:	4629      	mov	r1, r5
 8006b8c:	bd30      	pop	{r4, r5, pc}
 8006b8e:	fa21 f004 	lsr.w	r0, r1, r4
 8006b92:	4629      	mov	r1, r5
 8006b94:	bd30      	pop	{r4, r5, pc}
 8006b96:	f094 0f00 	teq	r4, #0
 8006b9a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8006b9e:	bf06      	itte	eq
 8006ba0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8006ba4:	3401      	addeq	r4, #1
 8006ba6:	3d01      	subne	r5, #1
 8006ba8:	e74e      	b.n	8006a48 <__adddf3+0x8c>
 8006baa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8006bae:	bf18      	it	ne
 8006bb0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8006bb4:	d029      	beq.n	8006c0a <__adddf3+0x24e>
 8006bb6:	ea94 0f05 	teq	r4, r5
 8006bba:	bf08      	it	eq
 8006bbc:	ea90 0f02 	teqeq	r0, r2
 8006bc0:	d005      	beq.n	8006bce <__adddf3+0x212>
 8006bc2:	ea54 0c00 	orrs.w	ip, r4, r0
 8006bc6:	bf04      	itt	eq
 8006bc8:	4619      	moveq	r1, r3
 8006bca:	4610      	moveq	r0, r2
 8006bcc:	bd30      	pop	{r4, r5, pc}
 8006bce:	ea91 0f03 	teq	r1, r3
 8006bd2:	bf1e      	ittt	ne
 8006bd4:	2100      	movne	r1, #0
 8006bd6:	2000      	movne	r0, #0
 8006bd8:	bd30      	popne	{r4, r5, pc}
 8006bda:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8006bde:	d105      	bne.n	8006bec <__adddf3+0x230>
 8006be0:	0040      	lsls	r0, r0, #1
 8006be2:	4149      	adcs	r1, r1
 8006be4:	bf28      	it	cs
 8006be6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8006bea:	bd30      	pop	{r4, r5, pc}
 8006bec:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8006bf0:	bf3c      	itt	cc
 8006bf2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8006bf6:	bd30      	popcc	{r4, r5, pc}
 8006bf8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8006bfc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8006c00:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006c04:	f04f 0000 	mov.w	r0, #0
 8006c08:	bd30      	pop	{r4, r5, pc}
 8006c0a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8006c0e:	bf1a      	itte	ne
 8006c10:	4619      	movne	r1, r3
 8006c12:	4610      	movne	r0, r2
 8006c14:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8006c18:	bf1c      	itt	ne
 8006c1a:	460b      	movne	r3, r1
 8006c1c:	4602      	movne	r2, r0
 8006c1e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8006c22:	bf06      	itte	eq
 8006c24:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8006c28:	ea91 0f03 	teqeq	r1, r3
 8006c2c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8006c30:	bd30      	pop	{r4, r5, pc}
 8006c32:	bf00      	nop

08006c34 <__aeabi_ui2d>:
 8006c34:	f090 0f00 	teq	r0, #0
 8006c38:	bf04      	itt	eq
 8006c3a:	2100      	moveq	r1, #0
 8006c3c:	4770      	bxeq	lr
 8006c3e:	b530      	push	{r4, r5, lr}
 8006c40:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8006c44:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8006c48:	f04f 0500 	mov.w	r5, #0
 8006c4c:	f04f 0100 	mov.w	r1, #0
 8006c50:	e750      	b.n	8006af4 <__adddf3+0x138>
 8006c52:	bf00      	nop

08006c54 <__aeabi_i2d>:
 8006c54:	f090 0f00 	teq	r0, #0
 8006c58:	bf04      	itt	eq
 8006c5a:	2100      	moveq	r1, #0
 8006c5c:	4770      	bxeq	lr
 8006c5e:	b530      	push	{r4, r5, lr}
 8006c60:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8006c64:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8006c68:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8006c6c:	bf48      	it	mi
 8006c6e:	4240      	negmi	r0, r0
 8006c70:	f04f 0100 	mov.w	r1, #0
 8006c74:	e73e      	b.n	8006af4 <__adddf3+0x138>
 8006c76:	bf00      	nop

08006c78 <__aeabi_f2d>:
 8006c78:	0042      	lsls	r2, r0, #1
 8006c7a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8006c7e:	ea4f 0131 	mov.w	r1, r1, rrx
 8006c82:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8006c86:	bf1f      	itttt	ne
 8006c88:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8006c8c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8006c90:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8006c94:	4770      	bxne	lr
 8006c96:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8006c9a:	bf08      	it	eq
 8006c9c:	4770      	bxeq	lr
 8006c9e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8006ca2:	bf04      	itt	eq
 8006ca4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8006ca8:	4770      	bxeq	lr
 8006caa:	b530      	push	{r4, r5, lr}
 8006cac:	f44f 7460 	mov.w	r4, #896	; 0x380
 8006cb0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8006cb4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8006cb8:	e71c      	b.n	8006af4 <__adddf3+0x138>
 8006cba:	bf00      	nop

08006cbc <__aeabi_ul2d>:
 8006cbc:	ea50 0201 	orrs.w	r2, r0, r1
 8006cc0:	bf08      	it	eq
 8006cc2:	4770      	bxeq	lr
 8006cc4:	b530      	push	{r4, r5, lr}
 8006cc6:	f04f 0500 	mov.w	r5, #0
 8006cca:	e00a      	b.n	8006ce2 <__aeabi_l2d+0x16>

08006ccc <__aeabi_l2d>:
 8006ccc:	ea50 0201 	orrs.w	r2, r0, r1
 8006cd0:	bf08      	it	eq
 8006cd2:	4770      	bxeq	lr
 8006cd4:	b530      	push	{r4, r5, lr}
 8006cd6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8006cda:	d502      	bpl.n	8006ce2 <__aeabi_l2d+0x16>
 8006cdc:	4240      	negs	r0, r0
 8006cde:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8006ce2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8006ce6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8006cea:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8006cee:	f43f aed8 	beq.w	8006aa2 <__adddf3+0xe6>
 8006cf2:	f04f 0203 	mov.w	r2, #3
 8006cf6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8006cfa:	bf18      	it	ne
 8006cfc:	3203      	addne	r2, #3
 8006cfe:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8006d02:	bf18      	it	ne
 8006d04:	3203      	addne	r2, #3
 8006d06:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8006d0a:	f1c2 0320 	rsb	r3, r2, #32
 8006d0e:	fa00 fc03 	lsl.w	ip, r0, r3
 8006d12:	fa20 f002 	lsr.w	r0, r0, r2
 8006d16:	fa01 fe03 	lsl.w	lr, r1, r3
 8006d1a:	ea40 000e 	orr.w	r0, r0, lr
 8006d1e:	fa21 f102 	lsr.w	r1, r1, r2
 8006d22:	4414      	add	r4, r2
 8006d24:	e6bd      	b.n	8006aa2 <__adddf3+0xe6>
 8006d26:	bf00      	nop

08006d28 <__aeabi_dmul>:
 8006d28:	b570      	push	{r4, r5, r6, lr}
 8006d2a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8006d2e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8006d32:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8006d36:	bf1d      	ittte	ne
 8006d38:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8006d3c:	ea94 0f0c 	teqne	r4, ip
 8006d40:	ea95 0f0c 	teqne	r5, ip
 8006d44:	f000 f8de 	bleq	8006f04 <__aeabi_dmul+0x1dc>
 8006d48:	442c      	add	r4, r5
 8006d4a:	ea81 0603 	eor.w	r6, r1, r3
 8006d4e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8006d52:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8006d56:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8006d5a:	bf18      	it	ne
 8006d5c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8006d60:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8006d64:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006d68:	d038      	beq.n	8006ddc <__aeabi_dmul+0xb4>
 8006d6a:	fba0 ce02 	umull	ip, lr, r0, r2
 8006d6e:	f04f 0500 	mov.w	r5, #0
 8006d72:	fbe1 e502 	umlal	lr, r5, r1, r2
 8006d76:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8006d7a:	fbe0 e503 	umlal	lr, r5, r0, r3
 8006d7e:	f04f 0600 	mov.w	r6, #0
 8006d82:	fbe1 5603 	umlal	r5, r6, r1, r3
 8006d86:	f09c 0f00 	teq	ip, #0
 8006d8a:	bf18      	it	ne
 8006d8c:	f04e 0e01 	orrne.w	lr, lr, #1
 8006d90:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8006d94:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8006d98:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8006d9c:	d204      	bcs.n	8006da8 <__aeabi_dmul+0x80>
 8006d9e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8006da2:	416d      	adcs	r5, r5
 8006da4:	eb46 0606 	adc.w	r6, r6, r6
 8006da8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8006dac:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8006db0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8006db4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8006db8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8006dbc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8006dc0:	bf88      	it	hi
 8006dc2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8006dc6:	d81e      	bhi.n	8006e06 <__aeabi_dmul+0xde>
 8006dc8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8006dcc:	bf08      	it	eq
 8006dce:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8006dd2:	f150 0000 	adcs.w	r0, r0, #0
 8006dd6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8006dda:	bd70      	pop	{r4, r5, r6, pc}
 8006ddc:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8006de0:	ea46 0101 	orr.w	r1, r6, r1
 8006de4:	ea40 0002 	orr.w	r0, r0, r2
 8006de8:	ea81 0103 	eor.w	r1, r1, r3
 8006dec:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8006df0:	bfc2      	ittt	gt
 8006df2:	ebd4 050c 	rsbsgt	r5, r4, ip
 8006df6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8006dfa:	bd70      	popgt	{r4, r5, r6, pc}
 8006dfc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8006e00:	f04f 0e00 	mov.w	lr, #0
 8006e04:	3c01      	subs	r4, #1
 8006e06:	f300 80ab 	bgt.w	8006f60 <__aeabi_dmul+0x238>
 8006e0a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8006e0e:	bfde      	ittt	le
 8006e10:	2000      	movle	r0, #0
 8006e12:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8006e16:	bd70      	pople	{r4, r5, r6, pc}
 8006e18:	f1c4 0400 	rsb	r4, r4, #0
 8006e1c:	3c20      	subs	r4, #32
 8006e1e:	da35      	bge.n	8006e8c <__aeabi_dmul+0x164>
 8006e20:	340c      	adds	r4, #12
 8006e22:	dc1b      	bgt.n	8006e5c <__aeabi_dmul+0x134>
 8006e24:	f104 0414 	add.w	r4, r4, #20
 8006e28:	f1c4 0520 	rsb	r5, r4, #32
 8006e2c:	fa00 f305 	lsl.w	r3, r0, r5
 8006e30:	fa20 f004 	lsr.w	r0, r0, r4
 8006e34:	fa01 f205 	lsl.w	r2, r1, r5
 8006e38:	ea40 0002 	orr.w	r0, r0, r2
 8006e3c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8006e40:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8006e44:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8006e48:	fa21 f604 	lsr.w	r6, r1, r4
 8006e4c:	eb42 0106 	adc.w	r1, r2, r6
 8006e50:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8006e54:	bf08      	it	eq
 8006e56:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8006e5a:	bd70      	pop	{r4, r5, r6, pc}
 8006e5c:	f1c4 040c 	rsb	r4, r4, #12
 8006e60:	f1c4 0520 	rsb	r5, r4, #32
 8006e64:	fa00 f304 	lsl.w	r3, r0, r4
 8006e68:	fa20 f005 	lsr.w	r0, r0, r5
 8006e6c:	fa01 f204 	lsl.w	r2, r1, r4
 8006e70:	ea40 0002 	orr.w	r0, r0, r2
 8006e74:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8006e78:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8006e7c:	f141 0100 	adc.w	r1, r1, #0
 8006e80:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8006e84:	bf08      	it	eq
 8006e86:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8006e8a:	bd70      	pop	{r4, r5, r6, pc}
 8006e8c:	f1c4 0520 	rsb	r5, r4, #32
 8006e90:	fa00 f205 	lsl.w	r2, r0, r5
 8006e94:	ea4e 0e02 	orr.w	lr, lr, r2
 8006e98:	fa20 f304 	lsr.w	r3, r0, r4
 8006e9c:	fa01 f205 	lsl.w	r2, r1, r5
 8006ea0:	ea43 0302 	orr.w	r3, r3, r2
 8006ea4:	fa21 f004 	lsr.w	r0, r1, r4
 8006ea8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8006eac:	fa21 f204 	lsr.w	r2, r1, r4
 8006eb0:	ea20 0002 	bic.w	r0, r0, r2
 8006eb4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8006eb8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8006ebc:	bf08      	it	eq
 8006ebe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8006ec2:	bd70      	pop	{r4, r5, r6, pc}
 8006ec4:	f094 0f00 	teq	r4, #0
 8006ec8:	d10f      	bne.n	8006eea <__aeabi_dmul+0x1c2>
 8006eca:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8006ece:	0040      	lsls	r0, r0, #1
 8006ed0:	eb41 0101 	adc.w	r1, r1, r1
 8006ed4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8006ed8:	bf08      	it	eq
 8006eda:	3c01      	subeq	r4, #1
 8006edc:	d0f7      	beq.n	8006ece <__aeabi_dmul+0x1a6>
 8006ede:	ea41 0106 	orr.w	r1, r1, r6
 8006ee2:	f095 0f00 	teq	r5, #0
 8006ee6:	bf18      	it	ne
 8006ee8:	4770      	bxne	lr
 8006eea:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8006eee:	0052      	lsls	r2, r2, #1
 8006ef0:	eb43 0303 	adc.w	r3, r3, r3
 8006ef4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8006ef8:	bf08      	it	eq
 8006efa:	3d01      	subeq	r5, #1
 8006efc:	d0f7      	beq.n	8006eee <__aeabi_dmul+0x1c6>
 8006efe:	ea43 0306 	orr.w	r3, r3, r6
 8006f02:	4770      	bx	lr
 8006f04:	ea94 0f0c 	teq	r4, ip
 8006f08:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8006f0c:	bf18      	it	ne
 8006f0e:	ea95 0f0c 	teqne	r5, ip
 8006f12:	d00c      	beq.n	8006f2e <__aeabi_dmul+0x206>
 8006f14:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8006f18:	bf18      	it	ne
 8006f1a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8006f1e:	d1d1      	bne.n	8006ec4 <__aeabi_dmul+0x19c>
 8006f20:	ea81 0103 	eor.w	r1, r1, r3
 8006f24:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8006f28:	f04f 0000 	mov.w	r0, #0
 8006f2c:	bd70      	pop	{r4, r5, r6, pc}
 8006f2e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8006f32:	bf06      	itte	eq
 8006f34:	4610      	moveq	r0, r2
 8006f36:	4619      	moveq	r1, r3
 8006f38:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8006f3c:	d019      	beq.n	8006f72 <__aeabi_dmul+0x24a>
 8006f3e:	ea94 0f0c 	teq	r4, ip
 8006f42:	d102      	bne.n	8006f4a <__aeabi_dmul+0x222>
 8006f44:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8006f48:	d113      	bne.n	8006f72 <__aeabi_dmul+0x24a>
 8006f4a:	ea95 0f0c 	teq	r5, ip
 8006f4e:	d105      	bne.n	8006f5c <__aeabi_dmul+0x234>
 8006f50:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8006f54:	bf1c      	itt	ne
 8006f56:	4610      	movne	r0, r2
 8006f58:	4619      	movne	r1, r3
 8006f5a:	d10a      	bne.n	8006f72 <__aeabi_dmul+0x24a>
 8006f5c:	ea81 0103 	eor.w	r1, r1, r3
 8006f60:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8006f64:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8006f68:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8006f6c:	f04f 0000 	mov.w	r0, #0
 8006f70:	bd70      	pop	{r4, r5, r6, pc}
 8006f72:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8006f76:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8006f7a:	bd70      	pop	{r4, r5, r6, pc}

08006f7c <__aeabi_ddiv>:
 8006f7c:	b570      	push	{r4, r5, r6, lr}
 8006f7e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8006f82:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8006f86:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8006f8a:	bf1d      	ittte	ne
 8006f8c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8006f90:	ea94 0f0c 	teqne	r4, ip
 8006f94:	ea95 0f0c 	teqne	r5, ip
 8006f98:	f000 f8a7 	bleq	80070ea <__aeabi_ddiv+0x16e>
 8006f9c:	eba4 0405 	sub.w	r4, r4, r5
 8006fa0:	ea81 0e03 	eor.w	lr, r1, r3
 8006fa4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8006fa8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8006fac:	f000 8088 	beq.w	80070c0 <__aeabi_ddiv+0x144>
 8006fb0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8006fb4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8006fb8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8006fbc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8006fc0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8006fc4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8006fc8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8006fcc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8006fd0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8006fd4:	429d      	cmp	r5, r3
 8006fd6:	bf08      	it	eq
 8006fd8:	4296      	cmpeq	r6, r2
 8006fda:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8006fde:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8006fe2:	d202      	bcs.n	8006fea <__aeabi_ddiv+0x6e>
 8006fe4:	085b      	lsrs	r3, r3, #1
 8006fe6:	ea4f 0232 	mov.w	r2, r2, rrx
 8006fea:	1ab6      	subs	r6, r6, r2
 8006fec:	eb65 0503 	sbc.w	r5, r5, r3
 8006ff0:	085b      	lsrs	r3, r3, #1
 8006ff2:	ea4f 0232 	mov.w	r2, r2, rrx
 8006ff6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8006ffa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8006ffe:	ebb6 0e02 	subs.w	lr, r6, r2
 8007002:	eb75 0e03 	sbcs.w	lr, r5, r3
 8007006:	bf22      	ittt	cs
 8007008:	1ab6      	subcs	r6, r6, r2
 800700a:	4675      	movcs	r5, lr
 800700c:	ea40 000c 	orrcs.w	r0, r0, ip
 8007010:	085b      	lsrs	r3, r3, #1
 8007012:	ea4f 0232 	mov.w	r2, r2, rrx
 8007016:	ebb6 0e02 	subs.w	lr, r6, r2
 800701a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800701e:	bf22      	ittt	cs
 8007020:	1ab6      	subcs	r6, r6, r2
 8007022:	4675      	movcs	r5, lr
 8007024:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8007028:	085b      	lsrs	r3, r3, #1
 800702a:	ea4f 0232 	mov.w	r2, r2, rrx
 800702e:	ebb6 0e02 	subs.w	lr, r6, r2
 8007032:	eb75 0e03 	sbcs.w	lr, r5, r3
 8007036:	bf22      	ittt	cs
 8007038:	1ab6      	subcs	r6, r6, r2
 800703a:	4675      	movcs	r5, lr
 800703c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8007040:	085b      	lsrs	r3, r3, #1
 8007042:	ea4f 0232 	mov.w	r2, r2, rrx
 8007046:	ebb6 0e02 	subs.w	lr, r6, r2
 800704a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800704e:	bf22      	ittt	cs
 8007050:	1ab6      	subcs	r6, r6, r2
 8007052:	4675      	movcs	r5, lr
 8007054:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8007058:	ea55 0e06 	orrs.w	lr, r5, r6
 800705c:	d018      	beq.n	8007090 <__aeabi_ddiv+0x114>
 800705e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8007062:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8007066:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800706a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800706e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8007072:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8007076:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800707a:	d1c0      	bne.n	8006ffe <__aeabi_ddiv+0x82>
 800707c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8007080:	d10b      	bne.n	800709a <__aeabi_ddiv+0x11e>
 8007082:	ea41 0100 	orr.w	r1, r1, r0
 8007086:	f04f 0000 	mov.w	r0, #0
 800708a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800708e:	e7b6      	b.n	8006ffe <__aeabi_ddiv+0x82>
 8007090:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8007094:	bf04      	itt	eq
 8007096:	4301      	orreq	r1, r0
 8007098:	2000      	moveq	r0, #0
 800709a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800709e:	bf88      	it	hi
 80070a0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80070a4:	f63f aeaf 	bhi.w	8006e06 <__aeabi_dmul+0xde>
 80070a8:	ebb5 0c03 	subs.w	ip, r5, r3
 80070ac:	bf04      	itt	eq
 80070ae:	ebb6 0c02 	subseq.w	ip, r6, r2
 80070b2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80070b6:	f150 0000 	adcs.w	r0, r0, #0
 80070ba:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80070be:	bd70      	pop	{r4, r5, r6, pc}
 80070c0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80070c4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80070c8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80070cc:	bfc2      	ittt	gt
 80070ce:	ebd4 050c 	rsbsgt	r5, r4, ip
 80070d2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80070d6:	bd70      	popgt	{r4, r5, r6, pc}
 80070d8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80070dc:	f04f 0e00 	mov.w	lr, #0
 80070e0:	3c01      	subs	r4, #1
 80070e2:	e690      	b.n	8006e06 <__aeabi_dmul+0xde>
 80070e4:	ea45 0e06 	orr.w	lr, r5, r6
 80070e8:	e68d      	b.n	8006e06 <__aeabi_dmul+0xde>
 80070ea:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80070ee:	ea94 0f0c 	teq	r4, ip
 80070f2:	bf08      	it	eq
 80070f4:	ea95 0f0c 	teqeq	r5, ip
 80070f8:	f43f af3b 	beq.w	8006f72 <__aeabi_dmul+0x24a>
 80070fc:	ea94 0f0c 	teq	r4, ip
 8007100:	d10a      	bne.n	8007118 <__aeabi_ddiv+0x19c>
 8007102:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8007106:	f47f af34 	bne.w	8006f72 <__aeabi_dmul+0x24a>
 800710a:	ea95 0f0c 	teq	r5, ip
 800710e:	f47f af25 	bne.w	8006f5c <__aeabi_dmul+0x234>
 8007112:	4610      	mov	r0, r2
 8007114:	4619      	mov	r1, r3
 8007116:	e72c      	b.n	8006f72 <__aeabi_dmul+0x24a>
 8007118:	ea95 0f0c 	teq	r5, ip
 800711c:	d106      	bne.n	800712c <__aeabi_ddiv+0x1b0>
 800711e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8007122:	f43f aefd 	beq.w	8006f20 <__aeabi_dmul+0x1f8>
 8007126:	4610      	mov	r0, r2
 8007128:	4619      	mov	r1, r3
 800712a:	e722      	b.n	8006f72 <__aeabi_dmul+0x24a>
 800712c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8007130:	bf18      	it	ne
 8007132:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8007136:	f47f aec5 	bne.w	8006ec4 <__aeabi_dmul+0x19c>
 800713a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800713e:	f47f af0d 	bne.w	8006f5c <__aeabi_dmul+0x234>
 8007142:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8007146:	f47f aeeb 	bne.w	8006f20 <__aeabi_dmul+0x1f8>
 800714a:	e712      	b.n	8006f72 <__aeabi_dmul+0x24a>

0800714c <__aeabi_d2f>:
 800714c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8007150:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8007154:	bf24      	itt	cs
 8007156:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 800715a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800715e:	d90d      	bls.n	800717c <__aeabi_d2f+0x30>
 8007160:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8007164:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8007168:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800716c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8007170:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8007174:	bf08      	it	eq
 8007176:	f020 0001 	biceq.w	r0, r0, #1
 800717a:	4770      	bx	lr
 800717c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8007180:	d121      	bne.n	80071c6 <__aeabi_d2f+0x7a>
 8007182:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8007186:	bfbc      	itt	lt
 8007188:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 800718c:	4770      	bxlt	lr
 800718e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8007192:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8007196:	f1c2 0218 	rsb	r2, r2, #24
 800719a:	f1c2 0c20 	rsb	ip, r2, #32
 800719e:	fa10 f30c 	lsls.w	r3, r0, ip
 80071a2:	fa20 f002 	lsr.w	r0, r0, r2
 80071a6:	bf18      	it	ne
 80071a8:	f040 0001 	orrne.w	r0, r0, #1
 80071ac:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80071b0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 80071b4:	fa03 fc0c 	lsl.w	ip, r3, ip
 80071b8:	ea40 000c 	orr.w	r0, r0, ip
 80071bc:	fa23 f302 	lsr.w	r3, r3, r2
 80071c0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80071c4:	e7cc      	b.n	8007160 <__aeabi_d2f+0x14>
 80071c6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 80071ca:	d107      	bne.n	80071dc <__aeabi_d2f+0x90>
 80071cc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 80071d0:	bf1e      	ittt	ne
 80071d2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 80071d6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 80071da:	4770      	bxne	lr
 80071dc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 80071e0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80071e4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80071e8:	4770      	bx	lr
 80071ea:	bf00      	nop

080071ec <__aeabi_uldivmod>:
 80071ec:	b953      	cbnz	r3, 8007204 <__aeabi_uldivmod+0x18>
 80071ee:	b94a      	cbnz	r2, 8007204 <__aeabi_uldivmod+0x18>
 80071f0:	2900      	cmp	r1, #0
 80071f2:	bf08      	it	eq
 80071f4:	2800      	cmpeq	r0, #0
 80071f6:	bf1c      	itt	ne
 80071f8:	f04f 31ff 	movne.w	r1, #4294967295
 80071fc:	f04f 30ff 	movne.w	r0, #4294967295
 8007200:	f000 b972 	b.w	80074e8 <__aeabi_idiv0>
 8007204:	f1ad 0c08 	sub.w	ip, sp, #8
 8007208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800720c:	f000 f806 	bl	800721c <__udivmoddi4>
 8007210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8007214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8007218:	b004      	add	sp, #16
 800721a:	4770      	bx	lr

0800721c <__udivmoddi4>:
 800721c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007220:	9e08      	ldr	r6, [sp, #32]
 8007222:	4604      	mov	r4, r0
 8007224:	4688      	mov	r8, r1
 8007226:	2b00      	cmp	r3, #0
 8007228:	d14b      	bne.n	80072c2 <__udivmoddi4+0xa6>
 800722a:	428a      	cmp	r2, r1
 800722c:	4615      	mov	r5, r2
 800722e:	d967      	bls.n	8007300 <__udivmoddi4+0xe4>
 8007230:	fab2 f282 	clz	r2, r2
 8007234:	b14a      	cbz	r2, 800724a <__udivmoddi4+0x2e>
 8007236:	f1c2 0720 	rsb	r7, r2, #32
 800723a:	fa01 f302 	lsl.w	r3, r1, r2
 800723e:	fa20 f707 	lsr.w	r7, r0, r7
 8007242:	4095      	lsls	r5, r2
 8007244:	ea47 0803 	orr.w	r8, r7, r3
 8007248:	4094      	lsls	r4, r2
 800724a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 800724e:	0c23      	lsrs	r3, r4, #16
 8007250:	fbb8 f7fe 	udiv	r7, r8, lr
 8007254:	fa1f fc85 	uxth.w	ip, r5
 8007258:	fb0e 8817 	mls	r8, lr, r7, r8
 800725c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8007260:	fb07 f10c 	mul.w	r1, r7, ip
 8007264:	4299      	cmp	r1, r3
 8007266:	d909      	bls.n	800727c <__udivmoddi4+0x60>
 8007268:	18eb      	adds	r3, r5, r3
 800726a:	f107 30ff 	add.w	r0, r7, #4294967295
 800726e:	f080 811b 	bcs.w	80074a8 <__udivmoddi4+0x28c>
 8007272:	4299      	cmp	r1, r3
 8007274:	f240 8118 	bls.w	80074a8 <__udivmoddi4+0x28c>
 8007278:	3f02      	subs	r7, #2
 800727a:	442b      	add	r3, r5
 800727c:	1a5b      	subs	r3, r3, r1
 800727e:	b2a4      	uxth	r4, r4
 8007280:	fbb3 f0fe 	udiv	r0, r3, lr
 8007284:	fb0e 3310 	mls	r3, lr, r0, r3
 8007288:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800728c:	fb00 fc0c 	mul.w	ip, r0, ip
 8007290:	45a4      	cmp	ip, r4
 8007292:	d909      	bls.n	80072a8 <__udivmoddi4+0x8c>
 8007294:	192c      	adds	r4, r5, r4
 8007296:	f100 33ff 	add.w	r3, r0, #4294967295
 800729a:	f080 8107 	bcs.w	80074ac <__udivmoddi4+0x290>
 800729e:	45a4      	cmp	ip, r4
 80072a0:	f240 8104 	bls.w	80074ac <__udivmoddi4+0x290>
 80072a4:	3802      	subs	r0, #2
 80072a6:	442c      	add	r4, r5
 80072a8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 80072ac:	eba4 040c 	sub.w	r4, r4, ip
 80072b0:	2700      	movs	r7, #0
 80072b2:	b11e      	cbz	r6, 80072bc <__udivmoddi4+0xa0>
 80072b4:	40d4      	lsrs	r4, r2
 80072b6:	2300      	movs	r3, #0
 80072b8:	e9c6 4300 	strd	r4, r3, [r6]
 80072bc:	4639      	mov	r1, r7
 80072be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072c2:	428b      	cmp	r3, r1
 80072c4:	d909      	bls.n	80072da <__udivmoddi4+0xbe>
 80072c6:	2e00      	cmp	r6, #0
 80072c8:	f000 80eb 	beq.w	80074a2 <__udivmoddi4+0x286>
 80072cc:	2700      	movs	r7, #0
 80072ce:	e9c6 0100 	strd	r0, r1, [r6]
 80072d2:	4638      	mov	r0, r7
 80072d4:	4639      	mov	r1, r7
 80072d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80072da:	fab3 f783 	clz	r7, r3
 80072de:	2f00      	cmp	r7, #0
 80072e0:	d147      	bne.n	8007372 <__udivmoddi4+0x156>
 80072e2:	428b      	cmp	r3, r1
 80072e4:	d302      	bcc.n	80072ec <__udivmoddi4+0xd0>
 80072e6:	4282      	cmp	r2, r0
 80072e8:	f200 80fa 	bhi.w	80074e0 <__udivmoddi4+0x2c4>
 80072ec:	1a84      	subs	r4, r0, r2
 80072ee:	eb61 0303 	sbc.w	r3, r1, r3
 80072f2:	2001      	movs	r0, #1
 80072f4:	4698      	mov	r8, r3
 80072f6:	2e00      	cmp	r6, #0
 80072f8:	d0e0      	beq.n	80072bc <__udivmoddi4+0xa0>
 80072fa:	e9c6 4800 	strd	r4, r8, [r6]
 80072fe:	e7dd      	b.n	80072bc <__udivmoddi4+0xa0>
 8007300:	b902      	cbnz	r2, 8007304 <__udivmoddi4+0xe8>
 8007302:	deff      	udf	#255	; 0xff
 8007304:	fab2 f282 	clz	r2, r2
 8007308:	2a00      	cmp	r2, #0
 800730a:	f040 808f 	bne.w	800742c <__udivmoddi4+0x210>
 800730e:	1b49      	subs	r1, r1, r5
 8007310:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8007314:	fa1f f885 	uxth.w	r8, r5
 8007318:	2701      	movs	r7, #1
 800731a:	fbb1 fcfe 	udiv	ip, r1, lr
 800731e:	0c23      	lsrs	r3, r4, #16
 8007320:	fb0e 111c 	mls	r1, lr, ip, r1
 8007324:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8007328:	fb08 f10c 	mul.w	r1, r8, ip
 800732c:	4299      	cmp	r1, r3
 800732e:	d907      	bls.n	8007340 <__udivmoddi4+0x124>
 8007330:	18eb      	adds	r3, r5, r3
 8007332:	f10c 30ff 	add.w	r0, ip, #4294967295
 8007336:	d202      	bcs.n	800733e <__udivmoddi4+0x122>
 8007338:	4299      	cmp	r1, r3
 800733a:	f200 80cd 	bhi.w	80074d8 <__udivmoddi4+0x2bc>
 800733e:	4684      	mov	ip, r0
 8007340:	1a59      	subs	r1, r3, r1
 8007342:	b2a3      	uxth	r3, r4
 8007344:	fbb1 f0fe 	udiv	r0, r1, lr
 8007348:	fb0e 1410 	mls	r4, lr, r0, r1
 800734c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8007350:	fb08 f800 	mul.w	r8, r8, r0
 8007354:	45a0      	cmp	r8, r4
 8007356:	d907      	bls.n	8007368 <__udivmoddi4+0x14c>
 8007358:	192c      	adds	r4, r5, r4
 800735a:	f100 33ff 	add.w	r3, r0, #4294967295
 800735e:	d202      	bcs.n	8007366 <__udivmoddi4+0x14a>
 8007360:	45a0      	cmp	r8, r4
 8007362:	f200 80b6 	bhi.w	80074d2 <__udivmoddi4+0x2b6>
 8007366:	4618      	mov	r0, r3
 8007368:	eba4 0408 	sub.w	r4, r4, r8
 800736c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8007370:	e79f      	b.n	80072b2 <__udivmoddi4+0x96>
 8007372:	f1c7 0c20 	rsb	ip, r7, #32
 8007376:	40bb      	lsls	r3, r7
 8007378:	fa22 fe0c 	lsr.w	lr, r2, ip
 800737c:	ea4e 0e03 	orr.w	lr, lr, r3
 8007380:	fa01 f407 	lsl.w	r4, r1, r7
 8007384:	fa20 f50c 	lsr.w	r5, r0, ip
 8007388:	fa21 f30c 	lsr.w	r3, r1, ip
 800738c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8007390:	4325      	orrs	r5, r4
 8007392:	fbb3 f9f8 	udiv	r9, r3, r8
 8007396:	0c2c      	lsrs	r4, r5, #16
 8007398:	fb08 3319 	mls	r3, r8, r9, r3
 800739c:	fa1f fa8e 	uxth.w	sl, lr
 80073a0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 80073a4:	fb09 f40a 	mul.w	r4, r9, sl
 80073a8:	429c      	cmp	r4, r3
 80073aa:	fa02 f207 	lsl.w	r2, r2, r7
 80073ae:	fa00 f107 	lsl.w	r1, r0, r7
 80073b2:	d90b      	bls.n	80073cc <__udivmoddi4+0x1b0>
 80073b4:	eb1e 0303 	adds.w	r3, lr, r3
 80073b8:	f109 30ff 	add.w	r0, r9, #4294967295
 80073bc:	f080 8087 	bcs.w	80074ce <__udivmoddi4+0x2b2>
 80073c0:	429c      	cmp	r4, r3
 80073c2:	f240 8084 	bls.w	80074ce <__udivmoddi4+0x2b2>
 80073c6:	f1a9 0902 	sub.w	r9, r9, #2
 80073ca:	4473      	add	r3, lr
 80073cc:	1b1b      	subs	r3, r3, r4
 80073ce:	b2ad      	uxth	r5, r5
 80073d0:	fbb3 f0f8 	udiv	r0, r3, r8
 80073d4:	fb08 3310 	mls	r3, r8, r0, r3
 80073d8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80073dc:	fb00 fa0a 	mul.w	sl, r0, sl
 80073e0:	45a2      	cmp	sl, r4
 80073e2:	d908      	bls.n	80073f6 <__udivmoddi4+0x1da>
 80073e4:	eb1e 0404 	adds.w	r4, lr, r4
 80073e8:	f100 33ff 	add.w	r3, r0, #4294967295
 80073ec:	d26b      	bcs.n	80074c6 <__udivmoddi4+0x2aa>
 80073ee:	45a2      	cmp	sl, r4
 80073f0:	d969      	bls.n	80074c6 <__udivmoddi4+0x2aa>
 80073f2:	3802      	subs	r0, #2
 80073f4:	4474      	add	r4, lr
 80073f6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80073fa:	fba0 8902 	umull	r8, r9, r0, r2
 80073fe:	eba4 040a 	sub.w	r4, r4, sl
 8007402:	454c      	cmp	r4, r9
 8007404:	46c2      	mov	sl, r8
 8007406:	464b      	mov	r3, r9
 8007408:	d354      	bcc.n	80074b4 <__udivmoddi4+0x298>
 800740a:	d051      	beq.n	80074b0 <__udivmoddi4+0x294>
 800740c:	2e00      	cmp	r6, #0
 800740e:	d069      	beq.n	80074e4 <__udivmoddi4+0x2c8>
 8007410:	ebb1 050a 	subs.w	r5, r1, sl
 8007414:	eb64 0403 	sbc.w	r4, r4, r3
 8007418:	fa04 fc0c 	lsl.w	ip, r4, ip
 800741c:	40fd      	lsrs	r5, r7
 800741e:	40fc      	lsrs	r4, r7
 8007420:	ea4c 0505 	orr.w	r5, ip, r5
 8007424:	e9c6 5400 	strd	r5, r4, [r6]
 8007428:	2700      	movs	r7, #0
 800742a:	e747      	b.n	80072bc <__udivmoddi4+0xa0>
 800742c:	f1c2 0320 	rsb	r3, r2, #32
 8007430:	fa20 f703 	lsr.w	r7, r0, r3
 8007434:	4095      	lsls	r5, r2
 8007436:	fa01 f002 	lsl.w	r0, r1, r2
 800743a:	fa21 f303 	lsr.w	r3, r1, r3
 800743e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8007442:	4338      	orrs	r0, r7
 8007444:	0c01      	lsrs	r1, r0, #16
 8007446:	fbb3 f7fe 	udiv	r7, r3, lr
 800744a:	fa1f f885 	uxth.w	r8, r5
 800744e:	fb0e 3317 	mls	r3, lr, r7, r3
 8007452:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8007456:	fb07 f308 	mul.w	r3, r7, r8
 800745a:	428b      	cmp	r3, r1
 800745c:	fa04 f402 	lsl.w	r4, r4, r2
 8007460:	d907      	bls.n	8007472 <__udivmoddi4+0x256>
 8007462:	1869      	adds	r1, r5, r1
 8007464:	f107 3cff 	add.w	ip, r7, #4294967295
 8007468:	d22f      	bcs.n	80074ca <__udivmoddi4+0x2ae>
 800746a:	428b      	cmp	r3, r1
 800746c:	d92d      	bls.n	80074ca <__udivmoddi4+0x2ae>
 800746e:	3f02      	subs	r7, #2
 8007470:	4429      	add	r1, r5
 8007472:	1acb      	subs	r3, r1, r3
 8007474:	b281      	uxth	r1, r0
 8007476:	fbb3 f0fe 	udiv	r0, r3, lr
 800747a:	fb0e 3310 	mls	r3, lr, r0, r3
 800747e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8007482:	fb00 f308 	mul.w	r3, r0, r8
 8007486:	428b      	cmp	r3, r1
 8007488:	d907      	bls.n	800749a <__udivmoddi4+0x27e>
 800748a:	1869      	adds	r1, r5, r1
 800748c:	f100 3cff 	add.w	ip, r0, #4294967295
 8007490:	d217      	bcs.n	80074c2 <__udivmoddi4+0x2a6>
 8007492:	428b      	cmp	r3, r1
 8007494:	d915      	bls.n	80074c2 <__udivmoddi4+0x2a6>
 8007496:	3802      	subs	r0, #2
 8007498:	4429      	add	r1, r5
 800749a:	1ac9      	subs	r1, r1, r3
 800749c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 80074a0:	e73b      	b.n	800731a <__udivmoddi4+0xfe>
 80074a2:	4637      	mov	r7, r6
 80074a4:	4630      	mov	r0, r6
 80074a6:	e709      	b.n	80072bc <__udivmoddi4+0xa0>
 80074a8:	4607      	mov	r7, r0
 80074aa:	e6e7      	b.n	800727c <__udivmoddi4+0x60>
 80074ac:	4618      	mov	r0, r3
 80074ae:	e6fb      	b.n	80072a8 <__udivmoddi4+0x8c>
 80074b0:	4541      	cmp	r1, r8
 80074b2:	d2ab      	bcs.n	800740c <__udivmoddi4+0x1f0>
 80074b4:	ebb8 0a02 	subs.w	sl, r8, r2
 80074b8:	eb69 020e 	sbc.w	r2, r9, lr
 80074bc:	3801      	subs	r0, #1
 80074be:	4613      	mov	r3, r2
 80074c0:	e7a4      	b.n	800740c <__udivmoddi4+0x1f0>
 80074c2:	4660      	mov	r0, ip
 80074c4:	e7e9      	b.n	800749a <__udivmoddi4+0x27e>
 80074c6:	4618      	mov	r0, r3
 80074c8:	e795      	b.n	80073f6 <__udivmoddi4+0x1da>
 80074ca:	4667      	mov	r7, ip
 80074cc:	e7d1      	b.n	8007472 <__udivmoddi4+0x256>
 80074ce:	4681      	mov	r9, r0
 80074d0:	e77c      	b.n	80073cc <__udivmoddi4+0x1b0>
 80074d2:	3802      	subs	r0, #2
 80074d4:	442c      	add	r4, r5
 80074d6:	e747      	b.n	8007368 <__udivmoddi4+0x14c>
 80074d8:	f1ac 0c02 	sub.w	ip, ip, #2
 80074dc:	442b      	add	r3, r5
 80074de:	e72f      	b.n	8007340 <__udivmoddi4+0x124>
 80074e0:	4638      	mov	r0, r7
 80074e2:	e708      	b.n	80072f6 <__udivmoddi4+0xda>
 80074e4:	4637      	mov	r7, r6
 80074e6:	e6e9      	b.n	80072bc <__udivmoddi4+0xa0>

080074e8 <__aeabi_idiv0>:
 80074e8:	4770      	bx	lr
 80074ea:	bf00      	nop

080074ec <ResetTimer>:
#include "CycleCounter.h"

void ResetTimer(){
 80074ec:	b480      	push	{r7}
 80074ee:	af00      	add	r7, sp, #0
	DWT_CYCCNT   = (unsigned int *)0xE0001004; //address of the register
 80074f0:	4b0e      	ldr	r3, [pc, #56]	; (800752c <ResetTimer+0x40>)
 80074f2:	4a0f      	ldr	r2, [pc, #60]	; (8007530 <ResetTimer+0x44>)
 80074f4:	601a      	str	r2, [r3, #0]
	DWT_CONTROL  = (unsigned int *)0xE0001000; //address of the register
 80074f6:	4b0f      	ldr	r3, [pc, #60]	; (8007534 <ResetTimer+0x48>)
 80074f8:	4a0f      	ldr	r2, [pc, #60]	; (8007538 <ResetTimer+0x4c>)
 80074fa:	601a      	str	r2, [r3, #0]
	SCB_DEMCR    = (unsigned int *)0xE000EDFC; //address of the register
 80074fc:	4b0f      	ldr	r3, [pc, #60]	; (800753c <ResetTimer+0x50>)
 80074fe:	4a10      	ldr	r2, [pc, #64]	; (8007540 <ResetTimer+0x54>)
 8007500:	601a      	str	r2, [r3, #0]
	*SCB_DEMCR   = *SCB_DEMCR | 0x01000000;
 8007502:	4b0e      	ldr	r3, [pc, #56]	; (800753c <ResetTimer+0x50>)
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	681a      	ldr	r2, [r3, #0]
 8007508:	4b0c      	ldr	r3, [pc, #48]	; (800753c <ResetTimer+0x50>)
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	f042 7280 	orr.w	r2, r2, #16777216	; 0x1000000
 8007510:	601a      	str	r2, [r3, #0]
	*DWT_CYCCNT  = 0; // reset the counter
 8007512:	4b06      	ldr	r3, [pc, #24]	; (800752c <ResetTimer+0x40>)
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	2200      	movs	r2, #0
 8007518:	601a      	str	r2, [r3, #0]
	*DWT_CONTROL = 0; 
 800751a:	4b06      	ldr	r3, [pc, #24]	; (8007534 <ResetTimer+0x48>)
 800751c:	681b      	ldr	r3, [r3, #0]
 800751e:	2200      	movs	r2, #0
 8007520:	601a      	str	r2, [r3, #0]
}
 8007522:	bf00      	nop
 8007524:	46bd      	mov	sp, r7
 8007526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800752a:	4770      	bx	lr
 800752c:	20000e78 	.word	0x20000e78
 8007530:	e0001004 	.word	0xe0001004
 8007534:	20000e7c 	.word	0x20000e7c
 8007538:	e0001000 	.word	0xe0001000
 800753c:	20000e80 	.word	0x20000e80
 8007540:	e000edfc 	.word	0xe000edfc

08007544 <StartTimer>:

void StartTimer(){
 8007544:	b480      	push	{r7}
 8007546:	af00      	add	r7, sp, #0
	*DWT_CONTROL = *DWT_CONTROL | 1 ; // enable the counter
 8007548:	4b06      	ldr	r3, [pc, #24]	; (8007564 <StartTimer+0x20>)
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	681a      	ldr	r2, [r3, #0]
 800754e:	4b05      	ldr	r3, [pc, #20]	; (8007564 <StartTimer+0x20>)
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	f042 0201 	orr.w	r2, r2, #1
 8007556:	601a      	str	r2, [r3, #0]
}
 8007558:	bf00      	nop
 800755a:	46bd      	mov	sp, r7
 800755c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007560:	4770      	bx	lr
 8007562:	bf00      	nop
 8007564:	20000e7c 	.word	0x20000e7c

08007568 <StopTimer>:

void StopTimer(){
 8007568:	b480      	push	{r7}
 800756a:	af00      	add	r7, sp, #0
	*DWT_CONTROL = *DWT_CONTROL & 0 ; // disable the counter    
 800756c:	4b05      	ldr	r3, [pc, #20]	; (8007584 <StopTimer+0x1c>)
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	4b04      	ldr	r3, [pc, #16]	; (8007584 <StopTimer+0x1c>)
 8007574:	681b      	ldr	r3, [r3, #0]
 8007576:	2200      	movs	r2, #0
 8007578:	601a      	str	r2, [r3, #0]
}
 800757a:	bf00      	nop
 800757c:	46bd      	mov	sp, r7
 800757e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007582:	4770      	bx	lr
 8007584:	20000e7c 	.word	0x20000e7c

08007588 <getCycles>:

unsigned int getCycles(){
 8007588:	b480      	push	{r7}
 800758a:	af00      	add	r7, sp, #0
	return *DWT_CYCCNT;
 800758c:	4b03      	ldr	r3, [pc, #12]	; (800759c <getCycles+0x14>)
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	681b      	ldr	r3, [r3, #0]
}
 8007592:	4618      	mov	r0, r3
 8007594:	46bd      	mov	sp, r7
 8007596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800759a:	4770      	bx	lr
 800759c:	20000e78 	.word	0x20000e78

080075a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80075a0:	b580      	push	{r7, lr}
 80075a2:	f5ad 5d15 	sub.w	sp, sp, #9536	; 0x2540
 80075a6:	b08e      	sub	sp, #56	; 0x38
 80075a8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80075aa:	f000 fb66 	bl	8007c7a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80075ae:	f000 f967 	bl	8007880 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80075b2:	f000 fa2d 	bl	8007a10 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 80075b6:	f000 f9fb 	bl	80079b0 <MX_USART1_UART_Init>
  MX_CRC_Init();
 80075ba:	f000 f9d7 	bl	800796c <MX_CRC_Init>
  MX_X_CUBE_AI_Init();
 80075be:	f003 f963 	bl	800a888 <MX_X_CUBE_AI_Init>
  /* USER CODE BEGIN 2 */
  //char buffer[50] = {};
  //sprintf(buffer, "Starting the App\n");
  //HAL_UART_Transmit(&huart1, buffer, strlen(buffer), 1000);
  uint8_t x_data[BUFFER_SIZE] = {};
 80075c2:	f507 5305 	add.w	r3, r7, #8512	; 0x2140
 80075c6:	f103 0328 	add.w	r3, r3, #40	; 0x28
 80075ca:	4618      	mov	r0, r3
 80075cc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80075d0:	461a      	mov	r2, r3
 80075d2:	2100      	movs	r1, #0
 80075d4:	f003 fc32 	bl	800ae3c <memset>
  float output_arr[43] = {};
 80075d8:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 80075dc:	f103 033c 	add.w	r3, r3, #60	; 0x3c
 80075e0:	4618      	mov	r0, r3
 80075e2:	23ac      	movs	r3, #172	; 0xac
 80075e4:	461a      	mov	r2, r3
 80075e6:	2100      	movs	r1, #0
 80075e8:	f003 fc28 	bl	800ae3c <memset>
  int array_pos = 0;
 80075ec:	2300      	movs	r3, #0
 80075ee:	f507 5215 	add.w	r2, r7, #9536	; 0x2540
 80075f2:	f102 0234 	add.w	r2, r2, #52	; 0x34
 80075f6:	6013      	str	r3, [r2, #0]
  uint8_t byte_received = 0;
 80075f8:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 80075fc:	f103 033b 	add.w	r3, r3, #59	; 0x3b
 8007600:	2200      	movs	r2, #0
 8007602:	701a      	strb	r2, [r3, #0]
  {
    /* USER CODE END WHILE */

  //MX_X_CUBE_AI_Process();
    /* USER CODE BEGIN 3 */
	  int uart_status = HAL_UART_Receive(&huart1, &byte_received, sizeof(uint8_t), 100);
 8007604:	f507 5102 	add.w	r1, r7, #8320	; 0x2080
 8007608:	f101 013b 	add.w	r1, r1, #59	; 0x3b
 800760c:	2364      	movs	r3, #100	; 0x64
 800760e:	2201      	movs	r2, #1
 8007610:	4899      	ldr	r0, [pc, #612]	; (8007878 <main+0x2d8>)
 8007612:	f002 fafa 	bl	8009c0a <HAL_UART_Receive>
 8007616:	4603      	mov	r3, r0
 8007618:	f507 5215 	add.w	r2, r7, #9536	; 0x2540
 800761c:	f102 0228 	add.w	r2, r2, #40	; 0x28
 8007620:	6013      	str	r3, [r2, #0]
	  if (uart_status == HAL_OK)
 8007622:	f507 5315 	add.w	r3, r7, #9536	; 0x2540
 8007626:	f103 0328 	add.w	r3, r3, #40	; 0x28
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	2b00      	cmp	r3, #0
 800762e:	d11b      	bne.n	8007668 <main+0xc8>
	  {
	  	x_data[array_pos] = byte_received;
 8007630:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8007634:	f103 033b 	add.w	r3, r3, #59	; 0x3b
 8007638:	7819      	ldrb	r1, [r3, #0]
 800763a:	f507 5205 	add.w	r2, r7, #8512	; 0x2140
 800763e:	f102 0228 	add.w	r2, r2, #40	; 0x28
 8007642:	f507 5315 	add.w	r3, r7, #9536	; 0x2540
 8007646:	f103 0334 	add.w	r3, r3, #52	; 0x34
 800764a:	681b      	ldr	r3, [r3, #0]
 800764c:	4413      	add	r3, r2
 800764e:	460a      	mov	r2, r1
 8007650:	701a      	strb	r2, [r3, #0]
	  	array_pos++;
 8007652:	f507 5315 	add.w	r3, r7, #9536	; 0x2540
 8007656:	f103 0334 	add.w	r3, r3, #52	; 0x34
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	3301      	adds	r3, #1
 800765e:	f507 5215 	add.w	r2, r7, #9536	; 0x2540
 8007662:	f102 0234 	add.w	r2, r2, #52	; 0x34
 8007666:	6013      	str	r3, [r2, #0]
	  }
	  if (array_pos == BUFFER_SIZE)
 8007668:	f507 5315 	add.w	r3, r7, #9536	; 0x2540
 800766c:	f103 0334 	add.w	r3, r3, #52	; 0x34
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8007676:	d1c5      	bne.n	8007604 <main+0x64>
	  {
	  	//HAL_Delay(500);
	  	//HAL_UART_Transmit(&huart1, x_data, BUFFER_SIZE*sizeof(uint8_t), 2000);
	  	array_pos = 0;
 8007678:	2300      	movs	r3, #0
 800767a:	f507 5215 	add.w	r2, r7, #9536	; 0x2540
 800767e:	f102 0234 	add.w	r2, r2, #52	; 0x34
 8007682:	6013      	str	r3, [r2, #0]

	  	// instantiate float array
	  	float fArray[BUFFER_SIZE];

	  	// step through each element of integer array, and copy into float array as float
	  	for (int i = 0; i < BUFFER_SIZE; i++)
 8007684:	2300      	movs	r3, #0
 8007686:	f507 5215 	add.w	r2, r7, #9536	; 0x2540
 800768a:	f102 0230 	add.w	r2, r2, #48	; 0x30
 800768e:	6013      	str	r3, [r2, #0]
 8007690:	e029      	b.n	80076e6 <main+0x146>
	  	{
	  		fArray[i] = ((float)x_data[i]) / 255;
 8007692:	f507 5205 	add.w	r2, r7, #8512	; 0x2140
 8007696:	f102 0228 	add.w	r2, r2, #40	; 0x28
 800769a:	f507 5315 	add.w	r3, r7, #9536	; 0x2540
 800769e:	f103 0330 	add.w	r3, r3, #48	; 0x30
 80076a2:	681b      	ldr	r3, [r3, #0]
 80076a4:	4413      	add	r3, r2
 80076a6:	781b      	ldrb	r3, [r3, #0]
 80076a8:	ee07 3a90 	vmov	s15, r3
 80076ac:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80076b0:	eddf 6a72 	vldr	s13, [pc, #456]	; 800787c <main+0x2dc>
 80076b4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80076b8:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 80076bc:	3b08      	subs	r3, #8
 80076be:	f507 5215 	add.w	r2, r7, #9536	; 0x2540
 80076c2:	f102 0230 	add.w	r2, r2, #48	; 0x30
 80076c6:	6812      	ldr	r2, [r2, #0]
 80076c8:	0092      	lsls	r2, r2, #2
 80076ca:	4413      	add	r3, r2
 80076cc:	edc3 7a00 	vstr	s15, [r3]
	  	for (int i = 0; i < BUFFER_SIZE; i++)
 80076d0:	f507 5315 	add.w	r3, r7, #9536	; 0x2540
 80076d4:	f103 0330 	add.w	r3, r3, #48	; 0x30
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	3301      	adds	r3, #1
 80076dc:	f507 5215 	add.w	r2, r7, #9536	; 0x2540
 80076e0:	f102 0230 	add.w	r2, r2, #48	; 0x30
 80076e4:	6013      	str	r3, [r2, #0]
 80076e6:	f507 5315 	add.w	r3, r7, #9536	; 0x2540
 80076ea:	f103 0330 	add.w	r3, r3, #48	; 0x30
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80076f4:	dbcd      	blt.n	8007692 <main+0xf2>
	  	}

	  	ai_i8 x_data_ai[4 * BUFFER_SIZE] = {};
 80076f6:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 80076fa:	f103 0318 	add.w	r3, r3, #24
 80076fe:	3b08      	subs	r3, #8
 8007700:	4618      	mov	r0, r3
 8007702:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007706:	461a      	mov	r2, r3
 8007708:	2100      	movs	r1, #0
 800770a:	f003 fb97 	bl	800ae3c <memset>
	  	ai_i8 y_data_ai[4 * 43] = {};
 800770e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8007712:	3b34      	subs	r3, #52	; 0x34
 8007714:	4618      	mov	r0, r3
 8007716:	23ac      	movs	r3, #172	; 0xac
 8007718:	461a      	mov	r2, r3
 800771a:	2100      	movs	r1, #0
 800771c:	f003 fb8e 	bl	800ae3c <memset>
	  	uint8_t best_output = 0;
 8007720:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8007724:	f103 033a 	add.w	r3, r3, #58	; 0x3a
 8007728:	2200      	movs	r2, #0
 800772a:	701a      	strb	r2, [r3, #0]
	  	float accuracy = 0;
 800772c:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8007730:	f103 0334 	add.w	r3, r3, #52	; 0x34
 8007734:	f04f 0200 	mov.w	r2, #0
 8007738:	601a      	str	r2, [r3, #0]
	  	memcpy(x_data_ai, fArray, 4 * BUFFER_SIZE);
 800773a:	f507 5285 	add.w	r2, r7, #4256	; 0x10a0
 800773e:	f102 0218 	add.w	r2, r2, #24
 8007742:	3a08      	subs	r2, #8
 8007744:	f107 03b8 	add.w	r3, r7, #184	; 0xb8
 8007748:	3b08      	subs	r3, #8
 800774a:	4610      	mov	r0, r2
 800774c:	4619      	mov	r1, r3
 800774e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007752:	461a      	mov	r2, r3
 8007754:	f003 fb67 	bl	800ae26 <memcpy>

	  	ResetTimer();
 8007758:	f7ff fec8 	bl	80074ec <ResetTimer>
	  	StartTimer();
 800775c:	f7ff fef2 	bl	8007544 <StartTimer>
	  	aiRun(x_data_ai, y_data_ai);
 8007760:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8007764:	3a34      	subs	r2, #52	; 0x34
 8007766:	f507 5385 	add.w	r3, r7, #4256	; 0x10a0
 800776a:	f103 0318 	add.w	r3, r3, #24
 800776e:	3b08      	subs	r3, #8
 8007770:	4611      	mov	r1, r2
 8007772:	4618      	mov	r0, r3
 8007774:	f003 f848 	bl	800a808 <aiRun>
	  	StopTimer();
 8007778:	f7ff fef6 	bl	8007568 <StopTimer>
	  	uint32_t cycles_count = getCycles();
 800777c:	f7ff ff04 	bl	8007588 <getCycles>
 8007780:	4603      	mov	r3, r0
 8007782:	461a      	mov	r2, r3
 8007784:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8007788:	f103 0330 	add.w	r3, r3, #48	; 0x30
 800778c:	601a      	str	r2, [r3, #0]
	  	memcpy(output_arr, y_data_ai, sizeof(float) * 43);
 800778e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8007792:	3b34      	subs	r3, #52	; 0x34
 8007794:	f507 5002 	add.w	r0, r7, #8320	; 0x2080
 8007798:	f100 003c 	add.w	r0, r0, #60	; 0x3c
 800779c:	22ac      	movs	r2, #172	; 0xac
 800779e:	4619      	mov	r1, r3
 80077a0:	f003 fb41 	bl	800ae26 <memcpy>
	  	for (int i = 0; i < 43; i++)
 80077a4:	2300      	movs	r3, #0
 80077a6:	f507 5215 	add.w	r2, r7, #9536	; 0x2540
 80077aa:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 80077ae:	6013      	str	r3, [r2, #0]
 80077b0:	e03e      	b.n	8007830 <main+0x290>
	  	{
	  		if (accuracy < output_arr[i])
 80077b2:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 80077b6:	f102 023c 	add.w	r2, r2, #60	; 0x3c
 80077ba:	f507 5315 	add.w	r3, r7, #9536	; 0x2540
 80077be:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	009b      	lsls	r3, r3, #2
 80077c6:	4413      	add	r3, r2
 80077c8:	ed93 7a00 	vldr	s14, [r3]
 80077cc:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 80077d0:	f103 0334 	add.w	r3, r3, #52	; 0x34
 80077d4:	edd3 7a00 	vldr	s15, [r3]
 80077d8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80077dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80077e0:	dd1b      	ble.n	800781a <main+0x27a>
	  		{
	  			accuracy = output_arr[i];
 80077e2:	f507 5202 	add.w	r2, r7, #8320	; 0x2080
 80077e6:	f102 023c 	add.w	r2, r2, #60	; 0x3c
 80077ea:	f507 5315 	add.w	r3, r7, #9536	; 0x2540
 80077ee:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	009b      	lsls	r3, r3, #2
 80077f6:	4413      	add	r3, r2
 80077f8:	681a      	ldr	r2, [r3, #0]
 80077fa:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 80077fe:	f103 0334 	add.w	r3, r3, #52	; 0x34
 8007802:	601a      	str	r2, [r3, #0]
	  			best_output = i;
 8007804:	f507 5315 	add.w	r3, r7, #9536	; 0x2540
 8007808:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	b2da      	uxtb	r2, r3
 8007810:	f507 5302 	add.w	r3, r7, #8320	; 0x2080
 8007814:	f103 033a 	add.w	r3, r3, #58	; 0x3a
 8007818:	701a      	strb	r2, [r3, #0]
	  	for (int i = 0; i < 43; i++)
 800781a:	f507 5315 	add.w	r3, r7, #9536	; 0x2540
 800781e:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	3301      	adds	r3, #1
 8007826:	f507 5215 	add.w	r2, r7, #9536	; 0x2540
 800782a:	f102 022c 	add.w	r2, r2, #44	; 0x2c
 800782e:	6013      	str	r3, [r2, #0]
 8007830:	f507 5315 	add.w	r3, r7, #9536	; 0x2540
 8007834:	f103 032c 	add.w	r3, r3, #44	; 0x2c
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	2b2a      	cmp	r3, #42	; 0x2a
 800783c:	ddb9      	ble.n	80077b2 <main+0x212>
	  		}
	  	}
	  	HAL_UART_Transmit(&huart1, &best_output, 1, 200);
 800783e:	f507 5102 	add.w	r1, r7, #8320	; 0x2080
 8007842:	f101 013a 	add.w	r1, r1, #58	; 0x3a
 8007846:	23c8      	movs	r3, #200	; 0xc8
 8007848:	2201      	movs	r2, #1
 800784a:	480b      	ldr	r0, [pc, #44]	; (8007878 <main+0x2d8>)
 800784c:	f002 f94a 	bl	8009ae4 <HAL_UART_Transmit>
	  	HAL_UART_Transmit(&huart1, &accuracy, sizeof(float), 200);
 8007850:	f507 5102 	add.w	r1, r7, #8320	; 0x2080
 8007854:	f101 0134 	add.w	r1, r1, #52	; 0x34
 8007858:	23c8      	movs	r3, #200	; 0xc8
 800785a:	2204      	movs	r2, #4
 800785c:	4806      	ldr	r0, [pc, #24]	; (8007878 <main+0x2d8>)
 800785e:	f002 f941 	bl	8009ae4 <HAL_UART_Transmit>
	  	HAL_UART_Transmit(&huart1, &cycles_count, sizeof(uint32_t), 200);
 8007862:	f507 5102 	add.w	r1, r7, #8320	; 0x2080
 8007866:	f101 0130 	add.w	r1, r1, #48	; 0x30
 800786a:	23c8      	movs	r3, #200	; 0xc8
 800786c:	2204      	movs	r2, #4
 800786e:	4802      	ldr	r0, [pc, #8]	; (8007878 <main+0x2d8>)
 8007870:	f002 f938 	bl	8009ae4 <HAL_UART_Transmit>
  {
 8007874:	e6c6      	b.n	8007604 <main+0x64>
 8007876:	bf00      	nop
 8007878:	20003e48 	.word	0x20003e48
 800787c:	437f0000 	.word	0x437f0000

08007880 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8007880:	b580      	push	{r7, lr}
 8007882:	b0b8      	sub	sp, #224	; 0xe0
 8007884:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8007886:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800788a:	2244      	movs	r2, #68	; 0x44
 800788c:	2100      	movs	r1, #0
 800788e:	4618      	mov	r0, r3
 8007890:	f003 fad4 	bl	800ae3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007894:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8007898:	2200      	movs	r2, #0
 800789a:	601a      	str	r2, [r3, #0]
 800789c:	605a      	str	r2, [r3, #4]
 800789e:	609a      	str	r2, [r3, #8]
 80078a0:	60da      	str	r2, [r3, #12]
 80078a2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80078a4:	463b      	mov	r3, r7
 80078a6:	2288      	movs	r2, #136	; 0x88
 80078a8:	2100      	movs	r1, #0
 80078aa:	4618      	mov	r0, r3
 80078ac:	f003 fac6 	bl	800ae3c <memset>

  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80078b0:	2302      	movs	r3, #2
 80078b2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80078b6:	f44f 7380 	mov.w	r3, #256	; 0x100
 80078ba:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80078be:	2310      	movs	r3, #16
 80078c0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80078c4:	2302      	movs	r3, #2
 80078c6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80078ca:	2302      	movs	r3, #2
 80078cc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLM = 1;
 80078d0:	2301      	movs	r3, #1
 80078d2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  RCC_OscInitStruct.PLL.PLLN = 10;
 80078d6:	230a      	movs	r3, #10
 80078d8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 80078dc:	2307      	movs	r3, #7
 80078de:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80078e2:	2302      	movs	r3, #2
 80078e4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80078e8:	2302      	movs	r3, #2
 80078ea:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80078ee:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80078f2:	4618      	mov	r0, r3
 80078f4:	f000 fe0e 	bl	8008514 <HAL_RCC_OscConfig>
 80078f8:	4603      	mov	r3, r0
 80078fa:	2b00      	cmp	r3, #0
 80078fc:	d001      	beq.n	8007902 <SystemClock_Config+0x82>
  {
    Error_Handler();
 80078fe:	f000 f89f 	bl	8007a40 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007902:	230f      	movs	r3, #15
 8007904:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8007908:	2303      	movs	r3, #3
 800790a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800790e:	2300      	movs	r3, #0
 8007910:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8007914:	2300      	movs	r3, #0
 8007916:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800791a:	2300      	movs	r3, #0
 800791c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8007920:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8007924:	2104      	movs	r1, #4
 8007926:	4618      	mov	r0, r3
 8007928:	f001 f9da 	bl	8008ce0 <HAL_RCC_ClockConfig>
 800792c:	4603      	mov	r3, r0
 800792e:	2b00      	cmp	r3, #0
 8007930:	d001      	beq.n	8007936 <SystemClock_Config+0xb6>
  {
    Error_Handler();
 8007932:	f000 f885 	bl	8007a40 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8007936:	2301      	movs	r3, #1
 8007938:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800793a:	2300      	movs	r3, #0
 800793c:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800793e:	463b      	mov	r3, r7
 8007940:	4618      	mov	r0, r3
 8007942:	f001 fbd1 	bl	80090e8 <HAL_RCCEx_PeriphCLKConfig>
 8007946:	4603      	mov	r3, r0
 8007948:	2b00      	cmp	r3, #0
 800794a:	d001      	beq.n	8007950 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 800794c:	f000 f878 	bl	8007a40 <Error_Handler>
  }
  /** Configure the main internal regulator output voltage 
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 8007950:	f44f 7000 	mov.w	r0, #512	; 0x200
 8007954:	f000 fd88 	bl	8008468 <HAL_PWREx_ControlVoltageScaling>
 8007958:	4603      	mov	r3, r0
 800795a:	2b00      	cmp	r3, #0
 800795c:	d001      	beq.n	8007962 <SystemClock_Config+0xe2>
  {
    Error_Handler();
 800795e:	f000 f86f 	bl	8007a40 <Error_Handler>
  }
}
 8007962:	bf00      	nop
 8007964:	37e0      	adds	r7, #224	; 0xe0
 8007966:	46bd      	mov	sp, r7
 8007968:	bd80      	pop	{r7, pc}
	...

0800796c <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 800796c:	b580      	push	{r7, lr}
 800796e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8007970:	4b0d      	ldr	r3, [pc, #52]	; (80079a8 <MX_CRC_Init+0x3c>)
 8007972:	4a0e      	ldr	r2, [pc, #56]	; (80079ac <MX_CRC_Init+0x40>)
 8007974:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8007976:	4b0c      	ldr	r3, [pc, #48]	; (80079a8 <MX_CRC_Init+0x3c>)
 8007978:	2200      	movs	r2, #0
 800797a:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 800797c:	4b0a      	ldr	r3, [pc, #40]	; (80079a8 <MX_CRC_Init+0x3c>)
 800797e:	2200      	movs	r2, #0
 8007980:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8007982:	4b09      	ldr	r3, [pc, #36]	; (80079a8 <MX_CRC_Init+0x3c>)
 8007984:	2200      	movs	r2, #0
 8007986:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8007988:	4b07      	ldr	r3, [pc, #28]	; (80079a8 <MX_CRC_Init+0x3c>)
 800798a:	2200      	movs	r2, #0
 800798c:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 800798e:	4b06      	ldr	r3, [pc, #24]	; (80079a8 <MX_CRC_Init+0x3c>)
 8007990:	2201      	movs	r2, #1
 8007992:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8007994:	4804      	ldr	r0, [pc, #16]	; (80079a8 <MX_CRC_Init+0x3c>)
 8007996:	f000 fac7 	bl	8007f28 <HAL_CRC_Init>
 800799a:	4603      	mov	r3, r0
 800799c:	2b00      	cmp	r3, #0
 800799e:	d001      	beq.n	80079a4 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 80079a0:	f000 f84e 	bl	8007a40 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 80079a4:	bf00      	nop
 80079a6:	bd80      	pop	{r7, pc}
 80079a8:	20003e24 	.word	0x20003e24
 80079ac:	40023000 	.word	0x40023000

080079b0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80079b0:	b580      	push	{r7, lr}
 80079b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80079b4:	4b14      	ldr	r3, [pc, #80]	; (8007a08 <MX_USART1_UART_Init+0x58>)
 80079b6:	4a15      	ldr	r2, [pc, #84]	; (8007a0c <MX_USART1_UART_Init+0x5c>)
 80079b8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80079ba:	4b13      	ldr	r3, [pc, #76]	; (8007a08 <MX_USART1_UART_Init+0x58>)
 80079bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80079c0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80079c2:	4b11      	ldr	r3, [pc, #68]	; (8007a08 <MX_USART1_UART_Init+0x58>)
 80079c4:	2200      	movs	r2, #0
 80079c6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80079c8:	4b0f      	ldr	r3, [pc, #60]	; (8007a08 <MX_USART1_UART_Init+0x58>)
 80079ca:	2200      	movs	r2, #0
 80079cc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80079ce:	4b0e      	ldr	r3, [pc, #56]	; (8007a08 <MX_USART1_UART_Init+0x58>)
 80079d0:	2200      	movs	r2, #0
 80079d2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80079d4:	4b0c      	ldr	r3, [pc, #48]	; (8007a08 <MX_USART1_UART_Init+0x58>)
 80079d6:	220c      	movs	r2, #12
 80079d8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80079da:	4b0b      	ldr	r3, [pc, #44]	; (8007a08 <MX_USART1_UART_Init+0x58>)
 80079dc:	2200      	movs	r2, #0
 80079de:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80079e0:	4b09      	ldr	r3, [pc, #36]	; (8007a08 <MX_USART1_UART_Init+0x58>)
 80079e2:	2200      	movs	r2, #0
 80079e4:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80079e6:	4b08      	ldr	r3, [pc, #32]	; (8007a08 <MX_USART1_UART_Init+0x58>)
 80079e8:	2200      	movs	r2, #0
 80079ea:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80079ec:	4b06      	ldr	r3, [pc, #24]	; (8007a08 <MX_USART1_UART_Init+0x58>)
 80079ee:	2200      	movs	r2, #0
 80079f0:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80079f2:	4805      	ldr	r0, [pc, #20]	; (8007a08 <MX_USART1_UART_Init+0x58>)
 80079f4:	f002 f828 	bl	8009a48 <HAL_UART_Init>
 80079f8:	4603      	mov	r3, r0
 80079fa:	2b00      	cmp	r3, #0
 80079fc:	d001      	beq.n	8007a02 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80079fe:	f000 f81f 	bl	8007a40 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8007a02:	bf00      	nop
 8007a04:	bd80      	pop	{r7, pc}
 8007a06:	bf00      	nop
 8007a08:	20003e48 	.word	0x20003e48
 8007a0c:	40013800 	.word	0x40013800

08007a10 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8007a10:	b480      	push	{r7}
 8007a12:	b083      	sub	sp, #12
 8007a14:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8007a16:	4b09      	ldr	r3, [pc, #36]	; (8007a3c <MX_GPIO_Init+0x2c>)
 8007a18:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a1a:	4a08      	ldr	r2, [pc, #32]	; (8007a3c <MX_GPIO_Init+0x2c>)
 8007a1c:	f043 0302 	orr.w	r3, r3, #2
 8007a20:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007a22:	4b06      	ldr	r3, [pc, #24]	; (8007a3c <MX_GPIO_Init+0x2c>)
 8007a24:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007a26:	f003 0302 	and.w	r3, r3, #2
 8007a2a:	607b      	str	r3, [r7, #4]
 8007a2c:	687b      	ldr	r3, [r7, #4]

}
 8007a2e:	bf00      	nop
 8007a30:	370c      	adds	r7, #12
 8007a32:	46bd      	mov	sp, r7
 8007a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a38:	4770      	bx	lr
 8007a3a:	bf00      	nop
 8007a3c:	40021000 	.word	0x40021000

08007a40 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8007a40:	b480      	push	{r7}
 8007a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8007a44:	bf00      	nop
 8007a46:	46bd      	mov	sp, r7
 8007a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a4c:	4770      	bx	lr
	...

08007a50 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007a50:	b480      	push	{r7}
 8007a52:	b083      	sub	sp, #12
 8007a54:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007a56:	4b0f      	ldr	r3, [pc, #60]	; (8007a94 <HAL_MspInit+0x44>)
 8007a58:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007a5a:	4a0e      	ldr	r2, [pc, #56]	; (8007a94 <HAL_MspInit+0x44>)
 8007a5c:	f043 0301 	orr.w	r3, r3, #1
 8007a60:	6613      	str	r3, [r2, #96]	; 0x60
 8007a62:	4b0c      	ldr	r3, [pc, #48]	; (8007a94 <HAL_MspInit+0x44>)
 8007a64:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007a66:	f003 0301 	and.w	r3, r3, #1
 8007a6a:	607b      	str	r3, [r7, #4]
 8007a6c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8007a6e:	4b09      	ldr	r3, [pc, #36]	; (8007a94 <HAL_MspInit+0x44>)
 8007a70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a72:	4a08      	ldr	r2, [pc, #32]	; (8007a94 <HAL_MspInit+0x44>)
 8007a74:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007a78:	6593      	str	r3, [r2, #88]	; 0x58
 8007a7a:	4b06      	ldr	r3, [pc, #24]	; (8007a94 <HAL_MspInit+0x44>)
 8007a7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007a82:	603b      	str	r3, [r7, #0]
 8007a84:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8007a86:	bf00      	nop
 8007a88:	370c      	adds	r7, #12
 8007a8a:	46bd      	mov	sp, r7
 8007a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a90:	4770      	bx	lr
 8007a92:	bf00      	nop
 8007a94:	40021000 	.word	0x40021000

08007a98 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8007a98:	b480      	push	{r7}
 8007a9a:	b085      	sub	sp, #20
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	4a0a      	ldr	r2, [pc, #40]	; (8007ad0 <HAL_CRC_MspInit+0x38>)
 8007aa6:	4293      	cmp	r3, r2
 8007aa8:	d10b      	bne.n	8007ac2 <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8007aaa:	4b0a      	ldr	r3, [pc, #40]	; (8007ad4 <HAL_CRC_MspInit+0x3c>)
 8007aac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007aae:	4a09      	ldr	r2, [pc, #36]	; (8007ad4 <HAL_CRC_MspInit+0x3c>)
 8007ab0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8007ab4:	6493      	str	r3, [r2, #72]	; 0x48
 8007ab6:	4b07      	ldr	r3, [pc, #28]	; (8007ad4 <HAL_CRC_MspInit+0x3c>)
 8007ab8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007aba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8007abe:	60fb      	str	r3, [r7, #12]
 8007ac0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 8007ac2:	bf00      	nop
 8007ac4:	3714      	adds	r7, #20
 8007ac6:	46bd      	mov	sp, r7
 8007ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007acc:	4770      	bx	lr
 8007ace:	bf00      	nop
 8007ad0:	40023000 	.word	0x40023000
 8007ad4:	40021000 	.word	0x40021000

08007ad8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8007ad8:	b580      	push	{r7, lr}
 8007ada:	b08a      	sub	sp, #40	; 0x28
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007ae0:	f107 0314 	add.w	r3, r7, #20
 8007ae4:	2200      	movs	r2, #0
 8007ae6:	601a      	str	r2, [r3, #0]
 8007ae8:	605a      	str	r2, [r3, #4]
 8007aea:	609a      	str	r2, [r3, #8]
 8007aec:	60da      	str	r2, [r3, #12]
 8007aee:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	4a17      	ldr	r2, [pc, #92]	; (8007b54 <HAL_UART_MspInit+0x7c>)
 8007af6:	4293      	cmp	r3, r2
 8007af8:	d127      	bne.n	8007b4a <HAL_UART_MspInit+0x72>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8007afa:	4b17      	ldr	r3, [pc, #92]	; (8007b58 <HAL_UART_MspInit+0x80>)
 8007afc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007afe:	4a16      	ldr	r2, [pc, #88]	; (8007b58 <HAL_UART_MspInit+0x80>)
 8007b00:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007b04:	6613      	str	r3, [r2, #96]	; 0x60
 8007b06:	4b14      	ldr	r3, [pc, #80]	; (8007b58 <HAL_UART_MspInit+0x80>)
 8007b08:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8007b0a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007b0e:	613b      	str	r3, [r7, #16]
 8007b10:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8007b12:	4b11      	ldr	r3, [pc, #68]	; (8007b58 <HAL_UART_MspInit+0x80>)
 8007b14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b16:	4a10      	ldr	r2, [pc, #64]	; (8007b58 <HAL_UART_MspInit+0x80>)
 8007b18:	f043 0302 	orr.w	r3, r3, #2
 8007b1c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8007b1e:	4b0e      	ldr	r3, [pc, #56]	; (8007b58 <HAL_UART_MspInit+0x80>)
 8007b20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b22:	f003 0302 	and.w	r3, r3, #2
 8007b26:	60fb      	str	r3, [r7, #12]
 8007b28:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration    
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8007b2a:	23c0      	movs	r3, #192	; 0xc0
 8007b2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007b2e:	2302      	movs	r3, #2
 8007b30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007b32:	2300      	movs	r3, #0
 8007b34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007b36:	2303      	movs	r3, #3
 8007b38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8007b3a:	2307      	movs	r3, #7
 8007b3c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007b3e:	f107 0314 	add.w	r3, r7, #20
 8007b42:	4619      	mov	r1, r3
 8007b44:	4805      	ldr	r0, [pc, #20]	; (8007b5c <HAL_UART_MspInit+0x84>)
 8007b46:	f000 fad9 	bl	80080fc <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8007b4a:	bf00      	nop
 8007b4c:	3728      	adds	r7, #40	; 0x28
 8007b4e:	46bd      	mov	sp, r7
 8007b50:	bd80      	pop	{r7, pc}
 8007b52:	bf00      	nop
 8007b54:	40013800 	.word	0x40013800
 8007b58:	40021000 	.word	0x40021000
 8007b5c:	48000400 	.word	0x48000400

08007b60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007b60:	b480      	push	{r7}
 8007b62:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8007b64:	bf00      	nop
 8007b66:	46bd      	mov	sp, r7
 8007b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b6c:	4770      	bx	lr

08007b6e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007b6e:	b480      	push	{r7}
 8007b70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007b72:	e7fe      	b.n	8007b72 <HardFault_Handler+0x4>

08007b74 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007b74:	b480      	push	{r7}
 8007b76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007b78:	e7fe      	b.n	8007b78 <MemManage_Handler+0x4>

08007b7a <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8007b7a:	b480      	push	{r7}
 8007b7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007b7e:	e7fe      	b.n	8007b7e <BusFault_Handler+0x4>

08007b80 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007b80:	b480      	push	{r7}
 8007b82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007b84:	e7fe      	b.n	8007b84 <UsageFault_Handler+0x4>

08007b86 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8007b86:	b480      	push	{r7}
 8007b88:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8007b8a:	bf00      	nop
 8007b8c:	46bd      	mov	sp, r7
 8007b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b92:	4770      	bx	lr

08007b94 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8007b94:	b480      	push	{r7}
 8007b96:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007b98:	bf00      	nop
 8007b9a:	46bd      	mov	sp, r7
 8007b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba0:	4770      	bx	lr

08007ba2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8007ba2:	b480      	push	{r7}
 8007ba4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8007ba6:	bf00      	nop
 8007ba8:	46bd      	mov	sp, r7
 8007baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bae:	4770      	bx	lr

08007bb0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8007bb0:	b580      	push	{r7, lr}
 8007bb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8007bb4:	f000 f8b4 	bl	8007d20 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8007bb8:	bf00      	nop
 8007bba:	bd80      	pop	{r7, pc}

08007bbc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8007bbc:	b480      	push	{r7}
 8007bbe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8007bc0:	4b17      	ldr	r3, [pc, #92]	; (8007c20 <SystemInit+0x64>)
 8007bc2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007bc6:	4a16      	ldr	r2, [pc, #88]	; (8007c20 <SystemInit+0x64>)
 8007bc8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007bcc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set MSION bit */
  RCC->CR |= RCC_CR_MSION;
 8007bd0:	4b14      	ldr	r3, [pc, #80]	; (8007c24 <SystemInit+0x68>)
 8007bd2:	681b      	ldr	r3, [r3, #0]
 8007bd4:	4a13      	ldr	r2, [pc, #76]	; (8007c24 <SystemInit+0x68>)
 8007bd6:	f043 0301 	orr.w	r3, r3, #1
 8007bda:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000U;
 8007bdc:	4b11      	ldr	r3, [pc, #68]	; (8007c24 <SystemInit+0x68>)
 8007bde:	2200      	movs	r2, #0
 8007be0:	609a      	str	r2, [r3, #8]

  /* Reset HSEON, CSSON , HSION, and PLLON bits */
  RCC->CR &= 0xEAF6FFFFU;
 8007be2:	4b10      	ldr	r3, [pc, #64]	; (8007c24 <SystemInit+0x68>)
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	4a0f      	ldr	r2, [pc, #60]	; (8007c24 <SystemInit+0x68>)
 8007be8:	f023 53a8 	bic.w	r3, r3, #352321536	; 0x15000000
 8007bec:	f423 2310 	bic.w	r3, r3, #589824	; 0x90000
 8007bf0:	6013      	str	r3, [r2, #0]

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00001000U;
 8007bf2:	4b0c      	ldr	r3, [pc, #48]	; (8007c24 <SystemInit+0x68>)
 8007bf4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8007bf8:	60da      	str	r2, [r3, #12]

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8007bfa:	4b0a      	ldr	r3, [pc, #40]	; (8007c24 <SystemInit+0x68>)
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	4a09      	ldr	r2, [pc, #36]	; (8007c24 <SystemInit+0x68>)
 8007c00:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007c04:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000U;
 8007c06:	4b07      	ldr	r3, [pc, #28]	; (8007c24 <SystemInit+0x68>)
 8007c08:	2200      	movs	r2, #0
 8007c0a:	619a      	str	r2, [r3, #24]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8007c0c:	4b04      	ldr	r3, [pc, #16]	; (8007c20 <SystemInit+0x64>)
 8007c0e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8007c12:	609a      	str	r2, [r3, #8]
#endif
}
 8007c14:	bf00      	nop
 8007c16:	46bd      	mov	sp, r7
 8007c18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1c:	4770      	bx	lr
 8007c1e:	bf00      	nop
 8007c20:	e000ed00 	.word	0xe000ed00
 8007c24:	40021000 	.word	0x40021000

08007c28 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 8007c28:	f8df d034 	ldr.w	sp, [pc, #52]	; 8007c60 <LoopForever+0x2>

/* Copy the data segment initializers from flash to SRAM */
  movs	r1, #0
 8007c2c:	2100      	movs	r1, #0
  b	LoopCopyDataInit
 8007c2e:	e003      	b.n	8007c38 <LoopCopyDataInit>

08007c30 <CopyDataInit>:

CopyDataInit:
	ldr	r3, =_sidata
 8007c30:	4b0c      	ldr	r3, [pc, #48]	; (8007c64 <LoopForever+0x6>)
	ldr	r3, [r3, r1]
 8007c32:	585b      	ldr	r3, [r3, r1]
	str	r3, [r0, r1]
 8007c34:	5043      	str	r3, [r0, r1]
	adds	r1, r1, #4
 8007c36:	3104      	adds	r1, #4

08007c38 <LoopCopyDataInit>:

LoopCopyDataInit:
	ldr	r0, =_sdata
 8007c38:	480b      	ldr	r0, [pc, #44]	; (8007c68 <LoopForever+0xa>)
	ldr	r3, =_edata
 8007c3a:	4b0c      	ldr	r3, [pc, #48]	; (8007c6c <LoopForever+0xe>)
	adds	r2, r0, r1
 8007c3c:	1842      	adds	r2, r0, r1
	cmp	r2, r3
 8007c3e:	429a      	cmp	r2, r3
	bcc	CopyDataInit
 8007c40:	d3f6      	bcc.n	8007c30 <CopyDataInit>
	ldr	r2, =_sbss
 8007c42:	4a0b      	ldr	r2, [pc, #44]	; (8007c70 <LoopForever+0x12>)
	b	LoopFillZerobss
 8007c44:	e002      	b.n	8007c4c <LoopFillZerobss>

08007c46 <FillZerobss>:
/* Zero fill the bss segment. */
FillZerobss:
	movs	r3, #0
 8007c46:	2300      	movs	r3, #0
	str	r3, [r2], #4
 8007c48:	f842 3b04 	str.w	r3, [r2], #4

08007c4c <LoopFillZerobss>:

LoopFillZerobss:
	ldr	r3, = _ebss
 8007c4c:	4b09      	ldr	r3, [pc, #36]	; (8007c74 <LoopForever+0x16>)
	cmp	r2, r3
 8007c4e:	429a      	cmp	r2, r3
	bcc	FillZerobss
 8007c50:	d3f9      	bcc.n	8007c46 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8007c52:	f7ff ffb3 	bl	8007bbc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8007c56:	f003 f8b3 	bl	800adc0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8007c5a:	f7ff fca1 	bl	80075a0 <main>

08007c5e <LoopForever>:

LoopForever:
    b LoopForever
 8007c5e:	e7fe      	b.n	8007c5e <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 8007c60:	20018000 	.word	0x20018000
	ldr	r3, =_sidata
 8007c64:	080738a0 	.word	0x080738a0
	ldr	r0, =_sdata
 8007c68:	20000000 	.word	0x20000000
	ldr	r3, =_edata
 8007c6c:	20000e5c 	.word	0x20000e5c
	ldr	r2, =_sbss
 8007c70:	20000e5c 	.word	0x20000e5c
	ldr	r3, = _ebss
 8007c74:	20003ecc 	.word	0x20003ecc

08007c78 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8007c78:	e7fe      	b.n	8007c78 <ADC1_2_IRQHandler>

08007c7a <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007c7a:	b580      	push	{r7, lr}
 8007c7c:	b082      	sub	sp, #8
 8007c7e:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8007c80:	2300      	movs	r3, #0
 8007c82:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007c84:	2003      	movs	r0, #3
 8007c86:	f000 f91b 	bl	8007ec0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8007c8a:	2000      	movs	r0, #0
 8007c8c:	f000 f80e 	bl	8007cac <HAL_InitTick>
 8007c90:	4603      	mov	r3, r0
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d002      	beq.n	8007c9c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8007c96:	2301      	movs	r3, #1
 8007c98:	71fb      	strb	r3, [r7, #7]
 8007c9a:	e001      	b.n	8007ca0 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8007c9c:	f7ff fed8 	bl	8007a50 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8007ca0:	79fb      	ldrb	r3, [r7, #7]
}
 8007ca2:	4618      	mov	r0, r3
 8007ca4:	3708      	adds	r7, #8
 8007ca6:	46bd      	mov	sp, r7
 8007ca8:	bd80      	pop	{r7, pc}
	...

08007cac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007cac:	b580      	push	{r7, lr}
 8007cae:	b084      	sub	sp, #16
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8007cb4:	2300      	movs	r3, #0
 8007cb6:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 8007cb8:	4b16      	ldr	r3, [pc, #88]	; (8007d14 <HAL_InitTick+0x68>)
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d022      	beq.n	8007d06 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 8007cc0:	4b15      	ldr	r3, [pc, #84]	; (8007d18 <HAL_InitTick+0x6c>)
 8007cc2:	681a      	ldr	r2, [r3, #0]
 8007cc4:	4b13      	ldr	r3, [pc, #76]	; (8007d14 <HAL_InitTick+0x68>)
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 8007ccc:	fbb1 f3f3 	udiv	r3, r1, r3
 8007cd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8007cd4:	4618      	mov	r0, r3
 8007cd6:	f000 f91a 	bl	8007f0e <HAL_SYSTICK_Config>
 8007cda:	4603      	mov	r3, r0
 8007cdc:	2b00      	cmp	r3, #0
 8007cde:	d10f      	bne.n	8007d00 <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	2b0f      	cmp	r3, #15
 8007ce4:	d809      	bhi.n	8007cfa <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8007ce6:	2200      	movs	r2, #0
 8007ce8:	6879      	ldr	r1, [r7, #4]
 8007cea:	f04f 30ff 	mov.w	r0, #4294967295
 8007cee:	f000 f8f2 	bl	8007ed6 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8007cf2:	4a0a      	ldr	r2, [pc, #40]	; (8007d1c <HAL_InitTick+0x70>)
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	6013      	str	r3, [r2, #0]
 8007cf8:	e007      	b.n	8007d0a <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8007cfa:	2301      	movs	r3, #1
 8007cfc:	73fb      	strb	r3, [r7, #15]
 8007cfe:	e004      	b.n	8007d0a <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 8007d00:	2301      	movs	r3, #1
 8007d02:	73fb      	strb	r3, [r7, #15]
 8007d04:	e001      	b.n	8007d0a <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8007d06:	2301      	movs	r3, #1
 8007d08:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8007d0a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d0c:	4618      	mov	r0, r3
 8007d0e:	3710      	adds	r7, #16
 8007d10:	46bd      	mov	sp, r7
 8007d12:	bd80      	pop	{r7, pc}
 8007d14:	20000008 	.word	0x20000008
 8007d18:	20000000 	.word	0x20000000
 8007d1c:	20000004 	.word	0x20000004

08007d20 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007d20:	b480      	push	{r7}
 8007d22:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8007d24:	4b05      	ldr	r3, [pc, #20]	; (8007d3c <HAL_IncTick+0x1c>)
 8007d26:	681a      	ldr	r2, [r3, #0]
 8007d28:	4b05      	ldr	r3, [pc, #20]	; (8007d40 <HAL_IncTick+0x20>)
 8007d2a:	681b      	ldr	r3, [r3, #0]
 8007d2c:	4413      	add	r3, r2
 8007d2e:	4a03      	ldr	r2, [pc, #12]	; (8007d3c <HAL_IncTick+0x1c>)
 8007d30:	6013      	str	r3, [r2, #0]
}
 8007d32:	bf00      	nop
 8007d34:	46bd      	mov	sp, r7
 8007d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d3a:	4770      	bx	lr
 8007d3c:	20003ec8 	.word	0x20003ec8
 8007d40:	20000008 	.word	0x20000008

08007d44 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007d44:	b480      	push	{r7}
 8007d46:	af00      	add	r7, sp, #0
  return uwTick;
 8007d48:	4b03      	ldr	r3, [pc, #12]	; (8007d58 <HAL_GetTick+0x14>)
 8007d4a:	681b      	ldr	r3, [r3, #0]
}
 8007d4c:	4618      	mov	r0, r3
 8007d4e:	46bd      	mov	sp, r7
 8007d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d54:	4770      	bx	lr
 8007d56:	bf00      	nop
 8007d58:	20003ec8 	.word	0x20003ec8

08007d5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007d5c:	b480      	push	{r7}
 8007d5e:	b085      	sub	sp, #20
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	f003 0307 	and.w	r3, r3, #7
 8007d6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007d6c:	4b0c      	ldr	r3, [pc, #48]	; (8007da0 <__NVIC_SetPriorityGrouping+0x44>)
 8007d6e:	68db      	ldr	r3, [r3, #12]
 8007d70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007d72:	68ba      	ldr	r2, [r7, #8]
 8007d74:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007d78:	4013      	ands	r3, r2
 8007d7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007d80:	68bb      	ldr	r3, [r7, #8]
 8007d82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007d84:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007d88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007d8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007d8e:	4a04      	ldr	r2, [pc, #16]	; (8007da0 <__NVIC_SetPriorityGrouping+0x44>)
 8007d90:	68bb      	ldr	r3, [r7, #8]
 8007d92:	60d3      	str	r3, [r2, #12]
}
 8007d94:	bf00      	nop
 8007d96:	3714      	adds	r7, #20
 8007d98:	46bd      	mov	sp, r7
 8007d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9e:	4770      	bx	lr
 8007da0:	e000ed00 	.word	0xe000ed00

08007da4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007da4:	b480      	push	{r7}
 8007da6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007da8:	4b04      	ldr	r3, [pc, #16]	; (8007dbc <__NVIC_GetPriorityGrouping+0x18>)
 8007daa:	68db      	ldr	r3, [r3, #12]
 8007dac:	0a1b      	lsrs	r3, r3, #8
 8007dae:	f003 0307 	and.w	r3, r3, #7
}
 8007db2:	4618      	mov	r0, r3
 8007db4:	46bd      	mov	sp, r7
 8007db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dba:	4770      	bx	lr
 8007dbc:	e000ed00 	.word	0xe000ed00

08007dc0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007dc0:	b480      	push	{r7}
 8007dc2:	b083      	sub	sp, #12
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	4603      	mov	r3, r0
 8007dc8:	6039      	str	r1, [r7, #0]
 8007dca:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007dcc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007dd0:	2b00      	cmp	r3, #0
 8007dd2:	db0a      	blt.n	8007dea <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007dd4:	683b      	ldr	r3, [r7, #0]
 8007dd6:	b2da      	uxtb	r2, r3
 8007dd8:	490c      	ldr	r1, [pc, #48]	; (8007e0c <__NVIC_SetPriority+0x4c>)
 8007dda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007dde:	0112      	lsls	r2, r2, #4
 8007de0:	b2d2      	uxtb	r2, r2
 8007de2:	440b      	add	r3, r1
 8007de4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8007de8:	e00a      	b.n	8007e00 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007dea:	683b      	ldr	r3, [r7, #0]
 8007dec:	b2da      	uxtb	r2, r3
 8007dee:	4908      	ldr	r1, [pc, #32]	; (8007e10 <__NVIC_SetPriority+0x50>)
 8007df0:	79fb      	ldrb	r3, [r7, #7]
 8007df2:	f003 030f 	and.w	r3, r3, #15
 8007df6:	3b04      	subs	r3, #4
 8007df8:	0112      	lsls	r2, r2, #4
 8007dfa:	b2d2      	uxtb	r2, r2
 8007dfc:	440b      	add	r3, r1
 8007dfe:	761a      	strb	r2, [r3, #24]
}
 8007e00:	bf00      	nop
 8007e02:	370c      	adds	r7, #12
 8007e04:	46bd      	mov	sp, r7
 8007e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e0a:	4770      	bx	lr
 8007e0c:	e000e100 	.word	0xe000e100
 8007e10:	e000ed00 	.word	0xe000ed00

08007e14 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007e14:	b480      	push	{r7}
 8007e16:	b089      	sub	sp, #36	; 0x24
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	60f8      	str	r0, [r7, #12]
 8007e1c:	60b9      	str	r1, [r7, #8]
 8007e1e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	f003 0307 	and.w	r3, r3, #7
 8007e26:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007e28:	69fb      	ldr	r3, [r7, #28]
 8007e2a:	f1c3 0307 	rsb	r3, r3, #7
 8007e2e:	2b04      	cmp	r3, #4
 8007e30:	bf28      	it	cs
 8007e32:	2304      	movcs	r3, #4
 8007e34:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007e36:	69fb      	ldr	r3, [r7, #28]
 8007e38:	3304      	adds	r3, #4
 8007e3a:	2b06      	cmp	r3, #6
 8007e3c:	d902      	bls.n	8007e44 <NVIC_EncodePriority+0x30>
 8007e3e:	69fb      	ldr	r3, [r7, #28]
 8007e40:	3b03      	subs	r3, #3
 8007e42:	e000      	b.n	8007e46 <NVIC_EncodePriority+0x32>
 8007e44:	2300      	movs	r3, #0
 8007e46:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007e48:	f04f 32ff 	mov.w	r2, #4294967295
 8007e4c:	69bb      	ldr	r3, [r7, #24]
 8007e4e:	fa02 f303 	lsl.w	r3, r2, r3
 8007e52:	43da      	mvns	r2, r3
 8007e54:	68bb      	ldr	r3, [r7, #8]
 8007e56:	401a      	ands	r2, r3
 8007e58:	697b      	ldr	r3, [r7, #20]
 8007e5a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007e5c:	f04f 31ff 	mov.w	r1, #4294967295
 8007e60:	697b      	ldr	r3, [r7, #20]
 8007e62:	fa01 f303 	lsl.w	r3, r1, r3
 8007e66:	43d9      	mvns	r1, r3
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007e6c:	4313      	orrs	r3, r2
         );
}
 8007e6e:	4618      	mov	r0, r3
 8007e70:	3724      	adds	r7, #36	; 0x24
 8007e72:	46bd      	mov	sp, r7
 8007e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e78:	4770      	bx	lr
	...

08007e7c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8007e7c:	b580      	push	{r7, lr}
 8007e7e:	b082      	sub	sp, #8
 8007e80:	af00      	add	r7, sp, #0
 8007e82:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	3b01      	subs	r3, #1
 8007e88:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007e8c:	d301      	bcc.n	8007e92 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8007e8e:	2301      	movs	r3, #1
 8007e90:	e00f      	b.n	8007eb2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8007e92:	4a0a      	ldr	r2, [pc, #40]	; (8007ebc <SysTick_Config+0x40>)
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	3b01      	subs	r3, #1
 8007e98:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8007e9a:	210f      	movs	r1, #15
 8007e9c:	f04f 30ff 	mov.w	r0, #4294967295
 8007ea0:	f7ff ff8e 	bl	8007dc0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8007ea4:	4b05      	ldr	r3, [pc, #20]	; (8007ebc <SysTick_Config+0x40>)
 8007ea6:	2200      	movs	r2, #0
 8007ea8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8007eaa:	4b04      	ldr	r3, [pc, #16]	; (8007ebc <SysTick_Config+0x40>)
 8007eac:	2207      	movs	r2, #7
 8007eae:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8007eb0:	2300      	movs	r3, #0
}
 8007eb2:	4618      	mov	r0, r3
 8007eb4:	3708      	adds	r7, #8
 8007eb6:	46bd      	mov	sp, r7
 8007eb8:	bd80      	pop	{r7, pc}
 8007eba:	bf00      	nop
 8007ebc:	e000e010 	.word	0xe000e010

08007ec0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007ec0:	b580      	push	{r7, lr}
 8007ec2:	b082      	sub	sp, #8
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007ec8:	6878      	ldr	r0, [r7, #4]
 8007eca:	f7ff ff47 	bl	8007d5c <__NVIC_SetPriorityGrouping>
}
 8007ece:	bf00      	nop
 8007ed0:	3708      	adds	r7, #8
 8007ed2:	46bd      	mov	sp, r7
 8007ed4:	bd80      	pop	{r7, pc}

08007ed6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007ed6:	b580      	push	{r7, lr}
 8007ed8:	b086      	sub	sp, #24
 8007eda:	af00      	add	r7, sp, #0
 8007edc:	4603      	mov	r3, r0
 8007ede:	60b9      	str	r1, [r7, #8]
 8007ee0:	607a      	str	r2, [r7, #4]
 8007ee2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8007ee4:	2300      	movs	r3, #0
 8007ee6:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8007ee8:	f7ff ff5c 	bl	8007da4 <__NVIC_GetPriorityGrouping>
 8007eec:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007eee:	687a      	ldr	r2, [r7, #4]
 8007ef0:	68b9      	ldr	r1, [r7, #8]
 8007ef2:	6978      	ldr	r0, [r7, #20]
 8007ef4:	f7ff ff8e 	bl	8007e14 <NVIC_EncodePriority>
 8007ef8:	4602      	mov	r2, r0
 8007efa:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007efe:	4611      	mov	r1, r2
 8007f00:	4618      	mov	r0, r3
 8007f02:	f7ff ff5d 	bl	8007dc0 <__NVIC_SetPriority>
}
 8007f06:	bf00      	nop
 8007f08:	3718      	adds	r7, #24
 8007f0a:	46bd      	mov	sp, r7
 8007f0c:	bd80      	pop	{r7, pc}

08007f0e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007f0e:	b580      	push	{r7, lr}
 8007f10:	b082      	sub	sp, #8
 8007f12:	af00      	add	r7, sp, #0
 8007f14:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007f16:	6878      	ldr	r0, [r7, #4]
 8007f18:	f7ff ffb0 	bl	8007e7c <SysTick_Config>
 8007f1c:	4603      	mov	r3, r0
}
 8007f1e:	4618      	mov	r0, r3
 8007f20:	3708      	adds	r7, #8
 8007f22:	46bd      	mov	sp, r7
 8007f24:	bd80      	pop	{r7, pc}
	...

08007f28 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8007f28:	b580      	push	{r7, lr}
 8007f2a:	b082      	sub	sp, #8
 8007f2c:	af00      	add	r7, sp, #0
 8007f2e:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	2b00      	cmp	r3, #0
 8007f34:	d101      	bne.n	8007f3a <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 8007f36:	2301      	movs	r3, #1
 8007f38:	e054      	b.n	8007fe4 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	7f5b      	ldrb	r3, [r3, #29]
 8007f3e:	b2db      	uxtb	r3, r3
 8007f40:	2b00      	cmp	r3, #0
 8007f42:	d105      	bne.n	8007f50 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	2200      	movs	r2, #0
 8007f48:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 8007f4a:	6878      	ldr	r0, [r7, #4]
 8007f4c:	f7ff fda4 	bl	8007a98 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	2202      	movs	r2, #2
 8007f54:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	791b      	ldrb	r3, [r3, #4]
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d10c      	bne.n	8007f78 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	4a22      	ldr	r2, [pc, #136]	; (8007fec <HAL_CRC_Init+0xc4>)
 8007f64:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	689a      	ldr	r2, [r3, #8]
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	f022 0218 	bic.w	r2, r2, #24
 8007f74:	609a      	str	r2, [r3, #8]
 8007f76:	e00c      	b.n	8007f92 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	6899      	ldr	r1, [r3, #8]
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	68db      	ldr	r3, [r3, #12]
 8007f80:	461a      	mov	r2, r3
 8007f82:	6878      	ldr	r0, [r7, #4]
 8007f84:	f000 f834 	bl	8007ff0 <HAL_CRCEx_Polynomial_Set>
 8007f88:	4603      	mov	r3, r0
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d001      	beq.n	8007f92 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8007f8e:	2301      	movs	r3, #1
 8007f90:	e028      	b.n	8007fe4 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8007f92:	687b      	ldr	r3, [r7, #4]
 8007f94:	795b      	ldrb	r3, [r3, #5]
 8007f96:	2b00      	cmp	r3, #0
 8007f98:	d105      	bne.n	8007fa6 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	f04f 32ff 	mov.w	r2, #4294967295
 8007fa2:	611a      	str	r2, [r3, #16]
 8007fa4:	e004      	b.n	8007fb0 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	687a      	ldr	r2, [r7, #4]
 8007fac:	6912      	ldr	r2, [r2, #16]
 8007fae:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	681b      	ldr	r3, [r3, #0]
 8007fb4:	689b      	ldr	r3, [r3, #8]
 8007fb6:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	695a      	ldr	r2, [r3, #20]
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	430a      	orrs	r2, r1
 8007fc4:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	689b      	ldr	r3, [r3, #8]
 8007fcc:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8007fd0:	687b      	ldr	r3, [r7, #4]
 8007fd2:	699a      	ldr	r2, [r3, #24]
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	430a      	orrs	r2, r1
 8007fda:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	2201      	movs	r2, #1
 8007fe0:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8007fe2:	2300      	movs	r3, #0
}
 8007fe4:	4618      	mov	r0, r3
 8007fe6:	3708      	adds	r7, #8
 8007fe8:	46bd      	mov	sp, r7
 8007fea:	bd80      	pop	{r7, pc}
 8007fec:	04c11db7 	.word	0x04c11db7

08007ff0 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8007ff0:	b480      	push	{r7}
 8007ff2:	b087      	sub	sp, #28
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	60f8      	str	r0, [r7, #12]
 8007ff8:	60b9      	str	r1, [r7, #8]
 8007ffa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007ffc:	2300      	movs	r3, #0
 8007ffe:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8008000:	231f      	movs	r3, #31
 8008002:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8008004:	bf00      	nop
 8008006:	693b      	ldr	r3, [r7, #16]
 8008008:	1e5a      	subs	r2, r3, #1
 800800a:	613a      	str	r2, [r7, #16]
 800800c:	2b00      	cmp	r3, #0
 800800e:	d009      	beq.n	8008024 <HAL_CRCEx_Polynomial_Set+0x34>
 8008010:	693b      	ldr	r3, [r7, #16]
 8008012:	f003 031f 	and.w	r3, r3, #31
 8008016:	68ba      	ldr	r2, [r7, #8]
 8008018:	fa22 f303 	lsr.w	r3, r2, r3
 800801c:	f003 0301 	and.w	r3, r3, #1
 8008020:	2b00      	cmp	r3, #0
 8008022:	d0f0      	beq.n	8008006 <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	2b18      	cmp	r3, #24
 8008028:	d846      	bhi.n	80080b8 <HAL_CRCEx_Polynomial_Set+0xc8>
 800802a:	a201      	add	r2, pc, #4	; (adr r2, 8008030 <HAL_CRCEx_Polynomial_Set+0x40>)
 800802c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008030:	080080bf 	.word	0x080080bf
 8008034:	080080b9 	.word	0x080080b9
 8008038:	080080b9 	.word	0x080080b9
 800803c:	080080b9 	.word	0x080080b9
 8008040:	080080b9 	.word	0x080080b9
 8008044:	080080b9 	.word	0x080080b9
 8008048:	080080b9 	.word	0x080080b9
 800804c:	080080b9 	.word	0x080080b9
 8008050:	080080ad 	.word	0x080080ad
 8008054:	080080b9 	.word	0x080080b9
 8008058:	080080b9 	.word	0x080080b9
 800805c:	080080b9 	.word	0x080080b9
 8008060:	080080b9 	.word	0x080080b9
 8008064:	080080b9 	.word	0x080080b9
 8008068:	080080b9 	.word	0x080080b9
 800806c:	080080b9 	.word	0x080080b9
 8008070:	080080a1 	.word	0x080080a1
 8008074:	080080b9 	.word	0x080080b9
 8008078:	080080b9 	.word	0x080080b9
 800807c:	080080b9 	.word	0x080080b9
 8008080:	080080b9 	.word	0x080080b9
 8008084:	080080b9 	.word	0x080080b9
 8008088:	080080b9 	.word	0x080080b9
 800808c:	080080b9 	.word	0x080080b9
 8008090:	08008095 	.word	0x08008095
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8008094:	693b      	ldr	r3, [r7, #16]
 8008096:	2b06      	cmp	r3, #6
 8008098:	d913      	bls.n	80080c2 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 800809a:	2301      	movs	r3, #1
 800809c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 800809e:	e010      	b.n	80080c2 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 80080a0:	693b      	ldr	r3, [r7, #16]
 80080a2:	2b07      	cmp	r3, #7
 80080a4:	d90f      	bls.n	80080c6 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 80080a6:	2301      	movs	r3, #1
 80080a8:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80080aa:	e00c      	b.n	80080c6 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 80080ac:	693b      	ldr	r3, [r7, #16]
 80080ae:	2b0f      	cmp	r3, #15
 80080b0:	d90b      	bls.n	80080ca <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 80080b2:	2301      	movs	r3, #1
 80080b4:	75fb      	strb	r3, [r7, #23]
      }
      break;
 80080b6:	e008      	b.n	80080ca <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 80080b8:	2301      	movs	r3, #1
 80080ba:	75fb      	strb	r3, [r7, #23]
      break;
 80080bc:	e006      	b.n	80080cc <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80080be:	bf00      	nop
 80080c0:	e004      	b.n	80080cc <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80080c2:	bf00      	nop
 80080c4:	e002      	b.n	80080cc <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80080c6:	bf00      	nop
 80080c8:	e000      	b.n	80080cc <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 80080ca:	bf00      	nop
  }
  if (status == HAL_OK)
 80080cc:	7dfb      	ldrb	r3, [r7, #23]
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d10d      	bne.n	80080ee <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	68ba      	ldr	r2, [r7, #8]
 80080d8:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80080da:	68fb      	ldr	r3, [r7, #12]
 80080dc:	681b      	ldr	r3, [r3, #0]
 80080de:	689b      	ldr	r3, [r3, #8]
 80080e0:	f023 0118 	bic.w	r1, r3, #24
 80080e4:	68fb      	ldr	r3, [r7, #12]
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	687a      	ldr	r2, [r7, #4]
 80080ea:	430a      	orrs	r2, r1
 80080ec:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 80080ee:	7dfb      	ldrb	r3, [r7, #23]
}
 80080f0:	4618      	mov	r0, r3
 80080f2:	371c      	adds	r7, #28
 80080f4:	46bd      	mov	sp, r7
 80080f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080fa:	4770      	bx	lr

080080fc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80080fc:	b480      	push	{r7}
 80080fe:	b087      	sub	sp, #28
 8008100:	af00      	add	r7, sp, #0
 8008102:	6078      	str	r0, [r7, #4]
 8008104:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8008106:	2300      	movs	r3, #0
 8008108:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800810a:	e17f      	b.n	800840c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800810c:	683b      	ldr	r3, [r7, #0]
 800810e:	681a      	ldr	r2, [r3, #0]
 8008110:	2101      	movs	r1, #1
 8008112:	697b      	ldr	r3, [r7, #20]
 8008114:	fa01 f303 	lsl.w	r3, r1, r3
 8008118:	4013      	ands	r3, r2
 800811a:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	2b00      	cmp	r3, #0
 8008120:	f000 8171 	beq.w	8008406 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8008124:	683b      	ldr	r3, [r7, #0]
 8008126:	685b      	ldr	r3, [r3, #4]
 8008128:	2b01      	cmp	r3, #1
 800812a:	d00b      	beq.n	8008144 <HAL_GPIO_Init+0x48>
 800812c:	683b      	ldr	r3, [r7, #0]
 800812e:	685b      	ldr	r3, [r3, #4]
 8008130:	2b02      	cmp	r3, #2
 8008132:	d007      	beq.n	8008144 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008134:	683b      	ldr	r3, [r7, #0]
 8008136:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8008138:	2b11      	cmp	r3, #17
 800813a:	d003      	beq.n	8008144 <HAL_GPIO_Init+0x48>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800813c:	683b      	ldr	r3, [r7, #0]
 800813e:	685b      	ldr	r3, [r3, #4]
 8008140:	2b12      	cmp	r3, #18
 8008142:	d130      	bne.n	80081a6 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	689b      	ldr	r3, [r3, #8]
 8008148:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 800814a:	697b      	ldr	r3, [r7, #20]
 800814c:	005b      	lsls	r3, r3, #1
 800814e:	2203      	movs	r2, #3
 8008150:	fa02 f303 	lsl.w	r3, r2, r3
 8008154:	43db      	mvns	r3, r3
 8008156:	693a      	ldr	r2, [r7, #16]
 8008158:	4013      	ands	r3, r2
 800815a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 800815c:	683b      	ldr	r3, [r7, #0]
 800815e:	68da      	ldr	r2, [r3, #12]
 8008160:	697b      	ldr	r3, [r7, #20]
 8008162:	005b      	lsls	r3, r3, #1
 8008164:	fa02 f303 	lsl.w	r3, r2, r3
 8008168:	693a      	ldr	r2, [r7, #16]
 800816a:	4313      	orrs	r3, r2
 800816c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	693a      	ldr	r2, [r7, #16]
 8008172:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	685b      	ldr	r3, [r3, #4]
 8008178:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800817a:	2201      	movs	r2, #1
 800817c:	697b      	ldr	r3, [r7, #20]
 800817e:	fa02 f303 	lsl.w	r3, r2, r3
 8008182:	43db      	mvns	r3, r3
 8008184:	693a      	ldr	r2, [r7, #16]
 8008186:	4013      	ands	r3, r2
 8008188:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4u) << position);
 800818a:	683b      	ldr	r3, [r7, #0]
 800818c:	685b      	ldr	r3, [r3, #4]
 800818e:	091b      	lsrs	r3, r3, #4
 8008190:	f003 0201 	and.w	r2, r3, #1
 8008194:	697b      	ldr	r3, [r7, #20]
 8008196:	fa02 f303 	lsl.w	r3, r2, r3
 800819a:	693a      	ldr	r2, [r7, #16]
 800819c:	4313      	orrs	r3, r2
 800819e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	693a      	ldr	r2, [r7, #16]
 80081a4:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 80081a6:	683b      	ldr	r3, [r7, #0]
 80081a8:	685b      	ldr	r3, [r3, #4]
 80081aa:	f003 0303 	and.w	r3, r3, #3
 80081ae:	2b03      	cmp	r3, #3
 80081b0:	d118      	bne.n	80081e4 <HAL_GPIO_Init+0xe8>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081b6:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 80081b8:	2201      	movs	r2, #1
 80081ba:	697b      	ldr	r3, [r7, #20]
 80081bc:	fa02 f303 	lsl.w	r3, r2, r3
 80081c0:	43db      	mvns	r3, r3
 80081c2:	693a      	ldr	r2, [r7, #16]
 80081c4:	4013      	ands	r3, r2
 80081c6:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & ANALOG_MODE) >> 3) << position);
 80081c8:	683b      	ldr	r3, [r7, #0]
 80081ca:	685b      	ldr	r3, [r3, #4]
 80081cc:	08db      	lsrs	r3, r3, #3
 80081ce:	f003 0201 	and.w	r2, r3, #1
 80081d2:	697b      	ldr	r3, [r7, #20]
 80081d4:	fa02 f303 	lsl.w	r3, r2, r3
 80081d8:	693a      	ldr	r2, [r7, #16]
 80081da:	4313      	orrs	r3, r2
 80081dc:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	693a      	ldr	r2, [r7, #16]
 80081e2:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	68db      	ldr	r3, [r3, #12]
 80081e8:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80081ea:	697b      	ldr	r3, [r7, #20]
 80081ec:	005b      	lsls	r3, r3, #1
 80081ee:	2203      	movs	r2, #3
 80081f0:	fa02 f303 	lsl.w	r3, r2, r3
 80081f4:	43db      	mvns	r3, r3
 80081f6:	693a      	ldr	r2, [r7, #16]
 80081f8:	4013      	ands	r3, r2
 80081fa:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Pull) << (position * 2u));
 80081fc:	683b      	ldr	r3, [r7, #0]
 80081fe:	689a      	ldr	r2, [r3, #8]
 8008200:	697b      	ldr	r3, [r7, #20]
 8008202:	005b      	lsls	r3, r3, #1
 8008204:	fa02 f303 	lsl.w	r3, r2, r3
 8008208:	693a      	ldr	r2, [r7, #16]
 800820a:	4313      	orrs	r3, r2
 800820c:	613b      	str	r3, [r7, #16]
      GPIOx->PUPDR = temp;
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	693a      	ldr	r2, [r7, #16]
 8008212:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008214:	683b      	ldr	r3, [r7, #0]
 8008216:	685b      	ldr	r3, [r3, #4]
 8008218:	2b02      	cmp	r3, #2
 800821a:	d003      	beq.n	8008224 <HAL_GPIO_Init+0x128>
 800821c:	683b      	ldr	r3, [r7, #0]
 800821e:	685b      	ldr	r3, [r3, #4]
 8008220:	2b12      	cmp	r3, #18
 8008222:	d123      	bne.n	800826c <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8008224:	697b      	ldr	r3, [r7, #20]
 8008226:	08da      	lsrs	r2, r3, #3
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	3208      	adds	r2, #8
 800822c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008230:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8008232:	697b      	ldr	r3, [r7, #20]
 8008234:	f003 0307 	and.w	r3, r3, #7
 8008238:	009b      	lsls	r3, r3, #2
 800823a:	220f      	movs	r2, #15
 800823c:	fa02 f303 	lsl.w	r3, r2, r3
 8008240:	43db      	mvns	r3, r3
 8008242:	693a      	ldr	r2, [r7, #16]
 8008244:	4013      	ands	r3, r2
 8008246:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8008248:	683b      	ldr	r3, [r7, #0]
 800824a:	691a      	ldr	r2, [r3, #16]
 800824c:	697b      	ldr	r3, [r7, #20]
 800824e:	f003 0307 	and.w	r3, r3, #7
 8008252:	009b      	lsls	r3, r3, #2
 8008254:	fa02 f303 	lsl.w	r3, r2, r3
 8008258:	693a      	ldr	r2, [r7, #16]
 800825a:	4313      	orrs	r3, r2
 800825c:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 800825e:	697b      	ldr	r3, [r7, #20]
 8008260:	08da      	lsrs	r2, r3, #3
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	3208      	adds	r2, #8
 8008266:	6939      	ldr	r1, [r7, #16]
 8008268:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8008272:	697b      	ldr	r3, [r7, #20]
 8008274:	005b      	lsls	r3, r3, #1
 8008276:	2203      	movs	r2, #3
 8008278:	fa02 f303 	lsl.w	r3, r2, r3
 800827c:	43db      	mvns	r3, r3
 800827e:	693a      	ldr	r2, [r7, #16]
 8008280:	4013      	ands	r3, r2
 8008282:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8008284:	683b      	ldr	r3, [r7, #0]
 8008286:	685b      	ldr	r3, [r3, #4]
 8008288:	f003 0203 	and.w	r2, r3, #3
 800828c:	697b      	ldr	r3, [r7, #20]
 800828e:	005b      	lsls	r3, r3, #1
 8008290:	fa02 f303 	lsl.w	r3, r2, r3
 8008294:	693a      	ldr	r2, [r7, #16]
 8008296:	4313      	orrs	r3, r2
 8008298:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	693a      	ldr	r2, [r7, #16]
 800829e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80082a0:	683b      	ldr	r3, [r7, #0]
 80082a2:	685b      	ldr	r3, [r3, #4]
 80082a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80082a8:	2b00      	cmp	r3, #0
 80082aa:	f000 80ac 	beq.w	8008406 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80082ae:	4b5e      	ldr	r3, [pc, #376]	; (8008428 <HAL_GPIO_Init+0x32c>)
 80082b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80082b2:	4a5d      	ldr	r2, [pc, #372]	; (8008428 <HAL_GPIO_Init+0x32c>)
 80082b4:	f043 0301 	orr.w	r3, r3, #1
 80082b8:	6613      	str	r3, [r2, #96]	; 0x60
 80082ba:	4b5b      	ldr	r3, [pc, #364]	; (8008428 <HAL_GPIO_Init+0x32c>)
 80082bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80082be:	f003 0301 	and.w	r3, r3, #1
 80082c2:	60bb      	str	r3, [r7, #8]
 80082c4:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 80082c6:	4a59      	ldr	r2, [pc, #356]	; (800842c <HAL_GPIO_Init+0x330>)
 80082c8:	697b      	ldr	r3, [r7, #20]
 80082ca:	089b      	lsrs	r3, r3, #2
 80082cc:	3302      	adds	r3, #2
 80082ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80082d2:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 80082d4:	697b      	ldr	r3, [r7, #20]
 80082d6:	f003 0303 	and.w	r3, r3, #3
 80082da:	009b      	lsls	r3, r3, #2
 80082dc:	220f      	movs	r2, #15
 80082de:	fa02 f303 	lsl.w	r3, r2, r3
 80082e2:	43db      	mvns	r3, r3
 80082e4:	693a      	ldr	r2, [r7, #16]
 80082e6:	4013      	ands	r3, r2
 80082e8:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 80082f0:	d025      	beq.n	800833e <HAL_GPIO_Init+0x242>
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	4a4e      	ldr	r2, [pc, #312]	; (8008430 <HAL_GPIO_Init+0x334>)
 80082f6:	4293      	cmp	r3, r2
 80082f8:	d01f      	beq.n	800833a <HAL_GPIO_Init+0x23e>
 80082fa:	687b      	ldr	r3, [r7, #4]
 80082fc:	4a4d      	ldr	r2, [pc, #308]	; (8008434 <HAL_GPIO_Init+0x338>)
 80082fe:	4293      	cmp	r3, r2
 8008300:	d019      	beq.n	8008336 <HAL_GPIO_Init+0x23a>
 8008302:	687b      	ldr	r3, [r7, #4]
 8008304:	4a4c      	ldr	r2, [pc, #304]	; (8008438 <HAL_GPIO_Init+0x33c>)
 8008306:	4293      	cmp	r3, r2
 8008308:	d013      	beq.n	8008332 <HAL_GPIO_Init+0x236>
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	4a4b      	ldr	r2, [pc, #300]	; (800843c <HAL_GPIO_Init+0x340>)
 800830e:	4293      	cmp	r3, r2
 8008310:	d00d      	beq.n	800832e <HAL_GPIO_Init+0x232>
 8008312:	687b      	ldr	r3, [r7, #4]
 8008314:	4a4a      	ldr	r2, [pc, #296]	; (8008440 <HAL_GPIO_Init+0x344>)
 8008316:	4293      	cmp	r3, r2
 8008318:	d007      	beq.n	800832a <HAL_GPIO_Init+0x22e>
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	4a49      	ldr	r2, [pc, #292]	; (8008444 <HAL_GPIO_Init+0x348>)
 800831e:	4293      	cmp	r3, r2
 8008320:	d101      	bne.n	8008326 <HAL_GPIO_Init+0x22a>
 8008322:	2306      	movs	r3, #6
 8008324:	e00c      	b.n	8008340 <HAL_GPIO_Init+0x244>
 8008326:	2307      	movs	r3, #7
 8008328:	e00a      	b.n	8008340 <HAL_GPIO_Init+0x244>
 800832a:	2305      	movs	r3, #5
 800832c:	e008      	b.n	8008340 <HAL_GPIO_Init+0x244>
 800832e:	2304      	movs	r3, #4
 8008330:	e006      	b.n	8008340 <HAL_GPIO_Init+0x244>
 8008332:	2303      	movs	r3, #3
 8008334:	e004      	b.n	8008340 <HAL_GPIO_Init+0x244>
 8008336:	2302      	movs	r3, #2
 8008338:	e002      	b.n	8008340 <HAL_GPIO_Init+0x244>
 800833a:	2301      	movs	r3, #1
 800833c:	e000      	b.n	8008340 <HAL_GPIO_Init+0x244>
 800833e:	2300      	movs	r3, #0
 8008340:	697a      	ldr	r2, [r7, #20]
 8008342:	f002 0203 	and.w	r2, r2, #3
 8008346:	0092      	lsls	r2, r2, #2
 8008348:	4093      	lsls	r3, r2
 800834a:	693a      	ldr	r2, [r7, #16]
 800834c:	4313      	orrs	r3, r2
 800834e:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8008350:	4936      	ldr	r1, [pc, #216]	; (800842c <HAL_GPIO_Init+0x330>)
 8008352:	697b      	ldr	r3, [r7, #20]
 8008354:	089b      	lsrs	r3, r3, #2
 8008356:	3302      	adds	r3, #2
 8008358:	693a      	ldr	r2, [r7, #16]
 800835a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 800835e:	4b3a      	ldr	r3, [pc, #232]	; (8008448 <HAL_GPIO_Init+0x34c>)
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	43db      	mvns	r3, r3
 8008368:	693a      	ldr	r2, [r7, #16]
 800836a:	4013      	ands	r3, r2
 800836c:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800836e:	683b      	ldr	r3, [r7, #0]
 8008370:	685b      	ldr	r3, [r3, #4]
 8008372:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008376:	2b00      	cmp	r3, #0
 8008378:	d003      	beq.n	8008382 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 800837a:	693a      	ldr	r2, [r7, #16]
 800837c:	68fb      	ldr	r3, [r7, #12]
 800837e:	4313      	orrs	r3, r2
 8008380:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8008382:	4a31      	ldr	r2, [pc, #196]	; (8008448 <HAL_GPIO_Init+0x34c>)
 8008384:	693b      	ldr	r3, [r7, #16]
 8008386:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR1;
 8008388:	4b2f      	ldr	r3, [pc, #188]	; (8008448 <HAL_GPIO_Init+0x34c>)
 800838a:	685b      	ldr	r3, [r3, #4]
 800838c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800838e:	68fb      	ldr	r3, [r7, #12]
 8008390:	43db      	mvns	r3, r3
 8008392:	693a      	ldr	r2, [r7, #16]
 8008394:	4013      	ands	r3, r2
 8008396:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8008398:	683b      	ldr	r3, [r7, #0]
 800839a:	685b      	ldr	r3, [r3, #4]
 800839c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80083a0:	2b00      	cmp	r3, #0
 80083a2:	d003      	beq.n	80083ac <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 80083a4:	693a      	ldr	r2, [r7, #16]
 80083a6:	68fb      	ldr	r3, [r7, #12]
 80083a8:	4313      	orrs	r3, r2
 80083aa:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 80083ac:	4a26      	ldr	r2, [pc, #152]	; (8008448 <HAL_GPIO_Init+0x34c>)
 80083ae:	693b      	ldr	r3, [r7, #16]
 80083b0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80083b2:	4b25      	ldr	r3, [pc, #148]	; (8008448 <HAL_GPIO_Init+0x34c>)
 80083b4:	689b      	ldr	r3, [r3, #8]
 80083b6:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80083b8:	68fb      	ldr	r3, [r7, #12]
 80083ba:	43db      	mvns	r3, r3
 80083bc:	693a      	ldr	r2, [r7, #16]
 80083be:	4013      	ands	r3, r2
 80083c0:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80083c2:	683b      	ldr	r3, [r7, #0]
 80083c4:	685b      	ldr	r3, [r3, #4]
 80083c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80083ca:	2b00      	cmp	r3, #0
 80083cc:	d003      	beq.n	80083d6 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 80083ce:	693a      	ldr	r2, [r7, #16]
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	4313      	orrs	r3, r2
 80083d4:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80083d6:	4a1c      	ldr	r2, [pc, #112]	; (8008448 <HAL_GPIO_Init+0x34c>)
 80083d8:	693b      	ldr	r3, [r7, #16]
 80083da:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80083dc:	4b1a      	ldr	r3, [pc, #104]	; (8008448 <HAL_GPIO_Init+0x34c>)
 80083de:	68db      	ldr	r3, [r3, #12]
 80083e0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80083e2:	68fb      	ldr	r3, [r7, #12]
 80083e4:	43db      	mvns	r3, r3
 80083e6:	693a      	ldr	r2, [r7, #16]
 80083e8:	4013      	ands	r3, r2
 80083ea:	613b      	str	r3, [r7, #16]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80083ec:	683b      	ldr	r3, [r7, #0]
 80083ee:	685b      	ldr	r3, [r3, #4]
 80083f0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80083f4:	2b00      	cmp	r3, #0
 80083f6:	d003      	beq.n	8008400 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 80083f8:	693a      	ldr	r2, [r7, #16]
 80083fa:	68fb      	ldr	r3, [r7, #12]
 80083fc:	4313      	orrs	r3, r2
 80083fe:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8008400:	4a11      	ldr	r2, [pc, #68]	; (8008448 <HAL_GPIO_Init+0x34c>)
 8008402:	693b      	ldr	r3, [r7, #16]
 8008404:	60d3      	str	r3, [r2, #12]
      }
    }

    position++;
 8008406:	697b      	ldr	r3, [r7, #20]
 8008408:	3301      	adds	r3, #1
 800840a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800840c:	683b      	ldr	r3, [r7, #0]
 800840e:	681a      	ldr	r2, [r3, #0]
 8008410:	697b      	ldr	r3, [r7, #20]
 8008412:	fa22 f303 	lsr.w	r3, r2, r3
 8008416:	2b00      	cmp	r3, #0
 8008418:	f47f ae78 	bne.w	800810c <HAL_GPIO_Init+0x10>
  }
}
 800841c:	bf00      	nop
 800841e:	371c      	adds	r7, #28
 8008420:	46bd      	mov	sp, r7
 8008422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008426:	4770      	bx	lr
 8008428:	40021000 	.word	0x40021000
 800842c:	40010000 	.word	0x40010000
 8008430:	48000400 	.word	0x48000400
 8008434:	48000800 	.word	0x48000800
 8008438:	48000c00 	.word	0x48000c00
 800843c:	48001000 	.word	0x48001000
 8008440:	48001400 	.word	0x48001400
 8008444:	48001800 	.word	0x48001800
 8008448:	40010400 	.word	0x40010400

0800844c <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 800844c:	b480      	push	{r7}
 800844e:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8008450:	4b04      	ldr	r3, [pc, #16]	; (8008464 <HAL_PWREx_GetVoltageRange+0x18>)
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 8008458:	4618      	mov	r0, r3
 800845a:	46bd      	mov	sp, r7
 800845c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008460:	4770      	bx	lr
 8008462:	bf00      	nop
 8008464:	40007000 	.word	0x40007000

08008468 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8008468:	b480      	push	{r7}
 800846a:	b085      	sub	sp, #20
 800846c:	af00      	add	r7, sp, #0
 800846e:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008476:	d130      	bne.n	80084da <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 8008478:	4b23      	ldr	r3, [pc, #140]	; (8008508 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800847a:	681b      	ldr	r3, [r3, #0]
 800847c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008480:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008484:	d038      	beq.n	80084f8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8008486:	4b20      	ldr	r3, [pc, #128]	; (8008508 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800848e:	4a1e      	ldr	r2, [pc, #120]	; (8008508 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8008490:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008494:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8008496:	4b1d      	ldr	r3, [pc, #116]	; (800850c <HAL_PWREx_ControlVoltageScaling+0xa4>)
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	2232      	movs	r2, #50	; 0x32
 800849c:	fb02 f303 	mul.w	r3, r2, r3
 80084a0:	4a1b      	ldr	r2, [pc, #108]	; (8008510 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 80084a2:	fba2 2303 	umull	r2, r3, r2, r3
 80084a6:	0c9b      	lsrs	r3, r3, #18
 80084a8:	3301      	adds	r3, #1
 80084aa:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80084ac:	e002      	b.n	80084b4 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80084ae:	68fb      	ldr	r3, [r7, #12]
 80084b0:	3b01      	subs	r3, #1
 80084b2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80084b4:	4b14      	ldr	r3, [pc, #80]	; (8008508 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80084b6:	695b      	ldr	r3, [r3, #20]
 80084b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80084bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80084c0:	d102      	bne.n	80084c8 <HAL_PWREx_ControlVoltageScaling+0x60>
 80084c2:	68fb      	ldr	r3, [r7, #12]
 80084c4:	2b00      	cmp	r3, #0
 80084c6:	d1f2      	bne.n	80084ae <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80084c8:	4b0f      	ldr	r3, [pc, #60]	; (8008508 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80084ca:	695b      	ldr	r3, [r3, #20]
 80084cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80084d0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80084d4:	d110      	bne.n	80084f8 <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80084d6:	2303      	movs	r3, #3
 80084d8:	e00f      	b.n	80084fa <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80084da:	4b0b      	ldr	r3, [pc, #44]	; (8008508 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80084e2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80084e6:	d007      	beq.n	80084f8 <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80084e8:	4b07      	ldr	r3, [pc, #28]	; (8008508 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80084f0:	4a05      	ldr	r2, [pc, #20]	; (8008508 <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80084f2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80084f6:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80084f8:	2300      	movs	r3, #0
}
 80084fa:	4618      	mov	r0, r3
 80084fc:	3714      	adds	r7, #20
 80084fe:	46bd      	mov	sp, r7
 8008500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008504:	4770      	bx	lr
 8008506:	bf00      	nop
 8008508:	40007000 	.word	0x40007000
 800850c:	20000000 	.word	0x20000000
 8008510:	431bde83 	.word	0x431bde83

08008514 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008514:	b580      	push	{r7, lr}
 8008516:	b088      	sub	sp, #32
 8008518:	af00      	add	r7, sp, #0
 800851a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	2b00      	cmp	r3, #0
 8008520:	d101      	bne.n	8008526 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008522:	2301      	movs	r3, #1
 8008524:	e3d4      	b.n	8008cd0 <HAL_RCC_OscConfig+0x7bc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008526:	4ba1      	ldr	r3, [pc, #644]	; (80087ac <HAL_RCC_OscConfig+0x298>)
 8008528:	689b      	ldr	r3, [r3, #8]
 800852a:	f003 030c 	and.w	r3, r3, #12
 800852e:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008530:	4b9e      	ldr	r3, [pc, #632]	; (80087ac <HAL_RCC_OscConfig+0x298>)
 8008532:	68db      	ldr	r3, [r3, #12]
 8008534:	f003 0303 	and.w	r3, r3, #3
 8008538:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	681b      	ldr	r3, [r3, #0]
 800853e:	f003 0310 	and.w	r3, r3, #16
 8008542:	2b00      	cmp	r3, #0
 8008544:	f000 80e4 	beq.w	8008710 <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8008548:	69bb      	ldr	r3, [r7, #24]
 800854a:	2b00      	cmp	r3, #0
 800854c:	d007      	beq.n	800855e <HAL_RCC_OscConfig+0x4a>
 800854e:	69bb      	ldr	r3, [r7, #24]
 8008550:	2b0c      	cmp	r3, #12
 8008552:	f040 808b 	bne.w	800866c <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 8008556:	697b      	ldr	r3, [r7, #20]
 8008558:	2b01      	cmp	r3, #1
 800855a:	f040 8087 	bne.w	800866c <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800855e:	4b93      	ldr	r3, [pc, #588]	; (80087ac <HAL_RCC_OscConfig+0x298>)
 8008560:	681b      	ldr	r3, [r3, #0]
 8008562:	f003 0302 	and.w	r3, r3, #2
 8008566:	2b00      	cmp	r3, #0
 8008568:	d005      	beq.n	8008576 <HAL_RCC_OscConfig+0x62>
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	699b      	ldr	r3, [r3, #24]
 800856e:	2b00      	cmp	r3, #0
 8008570:	d101      	bne.n	8008576 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 8008572:	2301      	movs	r3, #1
 8008574:	e3ac      	b.n	8008cd0 <HAL_RCC_OscConfig+0x7bc>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	6a1a      	ldr	r2, [r3, #32]
 800857a:	4b8c      	ldr	r3, [pc, #560]	; (80087ac <HAL_RCC_OscConfig+0x298>)
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	f003 0308 	and.w	r3, r3, #8
 8008582:	2b00      	cmp	r3, #0
 8008584:	d004      	beq.n	8008590 <HAL_RCC_OscConfig+0x7c>
 8008586:	4b89      	ldr	r3, [pc, #548]	; (80087ac <HAL_RCC_OscConfig+0x298>)
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800858e:	e005      	b.n	800859c <HAL_RCC_OscConfig+0x88>
 8008590:	4b86      	ldr	r3, [pc, #536]	; (80087ac <HAL_RCC_OscConfig+0x298>)
 8008592:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008596:	091b      	lsrs	r3, r3, #4
 8008598:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800859c:	4293      	cmp	r3, r2
 800859e:	d223      	bcs.n	80085e8 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	6a1b      	ldr	r3, [r3, #32]
 80085a4:	4618      	mov	r0, r3
 80085a6:	f000 fd3f 	bl	8009028 <RCC_SetFlashLatencyFromMSIRange>
 80085aa:	4603      	mov	r3, r0
 80085ac:	2b00      	cmp	r3, #0
 80085ae:	d001      	beq.n	80085b4 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 80085b0:	2301      	movs	r3, #1
 80085b2:	e38d      	b.n	8008cd0 <HAL_RCC_OscConfig+0x7bc>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80085b4:	4b7d      	ldr	r3, [pc, #500]	; (80087ac <HAL_RCC_OscConfig+0x298>)
 80085b6:	681b      	ldr	r3, [r3, #0]
 80085b8:	4a7c      	ldr	r2, [pc, #496]	; (80087ac <HAL_RCC_OscConfig+0x298>)
 80085ba:	f043 0308 	orr.w	r3, r3, #8
 80085be:	6013      	str	r3, [r2, #0]
 80085c0:	4b7a      	ldr	r3, [pc, #488]	; (80087ac <HAL_RCC_OscConfig+0x298>)
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	6a1b      	ldr	r3, [r3, #32]
 80085cc:	4977      	ldr	r1, [pc, #476]	; (80087ac <HAL_RCC_OscConfig+0x298>)
 80085ce:	4313      	orrs	r3, r2
 80085d0:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80085d2:	4b76      	ldr	r3, [pc, #472]	; (80087ac <HAL_RCC_OscConfig+0x298>)
 80085d4:	685b      	ldr	r3, [r3, #4]
 80085d6:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80085da:	687b      	ldr	r3, [r7, #4]
 80085dc:	69db      	ldr	r3, [r3, #28]
 80085de:	021b      	lsls	r3, r3, #8
 80085e0:	4972      	ldr	r1, [pc, #456]	; (80087ac <HAL_RCC_OscConfig+0x298>)
 80085e2:	4313      	orrs	r3, r2
 80085e4:	604b      	str	r3, [r1, #4]
 80085e6:	e025      	b.n	8008634 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80085e8:	4b70      	ldr	r3, [pc, #448]	; (80087ac <HAL_RCC_OscConfig+0x298>)
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	4a6f      	ldr	r2, [pc, #444]	; (80087ac <HAL_RCC_OscConfig+0x298>)
 80085ee:	f043 0308 	orr.w	r3, r3, #8
 80085f2:	6013      	str	r3, [r2, #0]
 80085f4:	4b6d      	ldr	r3, [pc, #436]	; (80087ac <HAL_RCC_OscConfig+0x298>)
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	6a1b      	ldr	r3, [r3, #32]
 8008600:	496a      	ldr	r1, [pc, #424]	; (80087ac <HAL_RCC_OscConfig+0x298>)
 8008602:	4313      	orrs	r3, r2
 8008604:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8008606:	4b69      	ldr	r3, [pc, #420]	; (80087ac <HAL_RCC_OscConfig+0x298>)
 8008608:	685b      	ldr	r3, [r3, #4]
 800860a:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	69db      	ldr	r3, [r3, #28]
 8008612:	021b      	lsls	r3, r3, #8
 8008614:	4965      	ldr	r1, [pc, #404]	; (80087ac <HAL_RCC_OscConfig+0x298>)
 8008616:	4313      	orrs	r3, r2
 8008618:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 800861a:	69bb      	ldr	r3, [r7, #24]
 800861c:	2b00      	cmp	r3, #0
 800861e:	d109      	bne.n	8008634 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	6a1b      	ldr	r3, [r3, #32]
 8008624:	4618      	mov	r0, r3
 8008626:	f000 fcff 	bl	8009028 <RCC_SetFlashLatencyFromMSIRange>
 800862a:	4603      	mov	r3, r0
 800862c:	2b00      	cmp	r3, #0
 800862e:	d001      	beq.n	8008634 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 8008630:	2301      	movs	r3, #1
 8008632:	e34d      	b.n	8008cd0 <HAL_RCC_OscConfig+0x7bc>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8008634:	f000 fc36 	bl	8008ea4 <HAL_RCC_GetSysClockFreq>
 8008638:	4601      	mov	r1, r0
 800863a:	4b5c      	ldr	r3, [pc, #368]	; (80087ac <HAL_RCC_OscConfig+0x298>)
 800863c:	689b      	ldr	r3, [r3, #8]
 800863e:	091b      	lsrs	r3, r3, #4
 8008640:	f003 030f 	and.w	r3, r3, #15
 8008644:	4a5a      	ldr	r2, [pc, #360]	; (80087b0 <HAL_RCC_OscConfig+0x29c>)
 8008646:	5cd3      	ldrb	r3, [r2, r3]
 8008648:	f003 031f 	and.w	r3, r3, #31
 800864c:	fa21 f303 	lsr.w	r3, r1, r3
 8008650:	4a58      	ldr	r2, [pc, #352]	; (80087b4 <HAL_RCC_OscConfig+0x2a0>)
 8008652:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 8008654:	4b58      	ldr	r3, [pc, #352]	; (80087b8 <HAL_RCC_OscConfig+0x2a4>)
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	4618      	mov	r0, r3
 800865a:	f7ff fb27 	bl	8007cac <HAL_InitTick>
 800865e:	4603      	mov	r3, r0
 8008660:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8008662:	7bfb      	ldrb	r3, [r7, #15]
 8008664:	2b00      	cmp	r3, #0
 8008666:	d052      	beq.n	800870e <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 8008668:	7bfb      	ldrb	r3, [r7, #15]
 800866a:	e331      	b.n	8008cd0 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	699b      	ldr	r3, [r3, #24]
 8008670:	2b00      	cmp	r3, #0
 8008672:	d032      	beq.n	80086da <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8008674:	4b4d      	ldr	r3, [pc, #308]	; (80087ac <HAL_RCC_OscConfig+0x298>)
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	4a4c      	ldr	r2, [pc, #304]	; (80087ac <HAL_RCC_OscConfig+0x298>)
 800867a:	f043 0301 	orr.w	r3, r3, #1
 800867e:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8008680:	f7ff fb60 	bl	8007d44 <HAL_GetTick>
 8008684:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8008686:	e008      	b.n	800869a <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8008688:	f7ff fb5c 	bl	8007d44 <HAL_GetTick>
 800868c:	4602      	mov	r2, r0
 800868e:	693b      	ldr	r3, [r7, #16]
 8008690:	1ad3      	subs	r3, r2, r3
 8008692:	2b02      	cmp	r3, #2
 8008694:	d901      	bls.n	800869a <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8008696:	2303      	movs	r3, #3
 8008698:	e31a      	b.n	8008cd0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800869a:	4b44      	ldr	r3, [pc, #272]	; (80087ac <HAL_RCC_OscConfig+0x298>)
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	f003 0302 	and.w	r3, r3, #2
 80086a2:	2b00      	cmp	r3, #0
 80086a4:	d0f0      	beq.n	8008688 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80086a6:	4b41      	ldr	r3, [pc, #260]	; (80087ac <HAL_RCC_OscConfig+0x298>)
 80086a8:	681b      	ldr	r3, [r3, #0]
 80086aa:	4a40      	ldr	r2, [pc, #256]	; (80087ac <HAL_RCC_OscConfig+0x298>)
 80086ac:	f043 0308 	orr.w	r3, r3, #8
 80086b0:	6013      	str	r3, [r2, #0]
 80086b2:	4b3e      	ldr	r3, [pc, #248]	; (80087ac <HAL_RCC_OscConfig+0x298>)
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	6a1b      	ldr	r3, [r3, #32]
 80086be:	493b      	ldr	r1, [pc, #236]	; (80087ac <HAL_RCC_OscConfig+0x298>)
 80086c0:	4313      	orrs	r3, r2
 80086c2:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80086c4:	4b39      	ldr	r3, [pc, #228]	; (80087ac <HAL_RCC_OscConfig+0x298>)
 80086c6:	685b      	ldr	r3, [r3, #4]
 80086c8:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	69db      	ldr	r3, [r3, #28]
 80086d0:	021b      	lsls	r3, r3, #8
 80086d2:	4936      	ldr	r1, [pc, #216]	; (80087ac <HAL_RCC_OscConfig+0x298>)
 80086d4:	4313      	orrs	r3, r2
 80086d6:	604b      	str	r3, [r1, #4]
 80086d8:	e01a      	b.n	8008710 <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80086da:	4b34      	ldr	r3, [pc, #208]	; (80087ac <HAL_RCC_OscConfig+0x298>)
 80086dc:	681b      	ldr	r3, [r3, #0]
 80086de:	4a33      	ldr	r2, [pc, #204]	; (80087ac <HAL_RCC_OscConfig+0x298>)
 80086e0:	f023 0301 	bic.w	r3, r3, #1
 80086e4:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 80086e6:	f7ff fb2d 	bl	8007d44 <HAL_GetTick>
 80086ea:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 80086ec:	e008      	b.n	8008700 <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80086ee:	f7ff fb29 	bl	8007d44 <HAL_GetTick>
 80086f2:	4602      	mov	r2, r0
 80086f4:	693b      	ldr	r3, [r7, #16]
 80086f6:	1ad3      	subs	r3, r2, r3
 80086f8:	2b02      	cmp	r3, #2
 80086fa:	d901      	bls.n	8008700 <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 80086fc:	2303      	movs	r3, #3
 80086fe:	e2e7      	b.n	8008cd0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8008700:	4b2a      	ldr	r3, [pc, #168]	; (80087ac <HAL_RCC_OscConfig+0x298>)
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	f003 0302 	and.w	r3, r3, #2
 8008708:	2b00      	cmp	r3, #0
 800870a:	d1f0      	bne.n	80086ee <HAL_RCC_OscConfig+0x1da>
 800870c:	e000      	b.n	8008710 <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800870e:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008710:	687b      	ldr	r3, [r7, #4]
 8008712:	681b      	ldr	r3, [r3, #0]
 8008714:	f003 0301 	and.w	r3, r3, #1
 8008718:	2b00      	cmp	r3, #0
 800871a:	d074      	beq.n	8008806 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 800871c:	69bb      	ldr	r3, [r7, #24]
 800871e:	2b08      	cmp	r3, #8
 8008720:	d005      	beq.n	800872e <HAL_RCC_OscConfig+0x21a>
 8008722:	69bb      	ldr	r3, [r7, #24]
 8008724:	2b0c      	cmp	r3, #12
 8008726:	d10e      	bne.n	8008746 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 8008728:	697b      	ldr	r3, [r7, #20]
 800872a:	2b03      	cmp	r3, #3
 800872c:	d10b      	bne.n	8008746 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800872e:	4b1f      	ldr	r3, [pc, #124]	; (80087ac <HAL_RCC_OscConfig+0x298>)
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008736:	2b00      	cmp	r3, #0
 8008738:	d064      	beq.n	8008804 <HAL_RCC_OscConfig+0x2f0>
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	685b      	ldr	r3, [r3, #4]
 800873e:	2b00      	cmp	r3, #0
 8008740:	d160      	bne.n	8008804 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 8008742:	2301      	movs	r3, #1
 8008744:	e2c4      	b.n	8008cd0 <HAL_RCC_OscConfig+0x7bc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	685b      	ldr	r3, [r3, #4]
 800874a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800874e:	d106      	bne.n	800875e <HAL_RCC_OscConfig+0x24a>
 8008750:	4b16      	ldr	r3, [pc, #88]	; (80087ac <HAL_RCC_OscConfig+0x298>)
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	4a15      	ldr	r2, [pc, #84]	; (80087ac <HAL_RCC_OscConfig+0x298>)
 8008756:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800875a:	6013      	str	r3, [r2, #0]
 800875c:	e01d      	b.n	800879a <HAL_RCC_OscConfig+0x286>
 800875e:	687b      	ldr	r3, [r7, #4]
 8008760:	685b      	ldr	r3, [r3, #4]
 8008762:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008766:	d10c      	bne.n	8008782 <HAL_RCC_OscConfig+0x26e>
 8008768:	4b10      	ldr	r3, [pc, #64]	; (80087ac <HAL_RCC_OscConfig+0x298>)
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	4a0f      	ldr	r2, [pc, #60]	; (80087ac <HAL_RCC_OscConfig+0x298>)
 800876e:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008772:	6013      	str	r3, [r2, #0]
 8008774:	4b0d      	ldr	r3, [pc, #52]	; (80087ac <HAL_RCC_OscConfig+0x298>)
 8008776:	681b      	ldr	r3, [r3, #0]
 8008778:	4a0c      	ldr	r2, [pc, #48]	; (80087ac <HAL_RCC_OscConfig+0x298>)
 800877a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800877e:	6013      	str	r3, [r2, #0]
 8008780:	e00b      	b.n	800879a <HAL_RCC_OscConfig+0x286>
 8008782:	4b0a      	ldr	r3, [pc, #40]	; (80087ac <HAL_RCC_OscConfig+0x298>)
 8008784:	681b      	ldr	r3, [r3, #0]
 8008786:	4a09      	ldr	r2, [pc, #36]	; (80087ac <HAL_RCC_OscConfig+0x298>)
 8008788:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800878c:	6013      	str	r3, [r2, #0]
 800878e:	4b07      	ldr	r3, [pc, #28]	; (80087ac <HAL_RCC_OscConfig+0x298>)
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	4a06      	ldr	r2, [pc, #24]	; (80087ac <HAL_RCC_OscConfig+0x298>)
 8008794:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008798:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	685b      	ldr	r3, [r3, #4]
 800879e:	2b00      	cmp	r3, #0
 80087a0:	d01c      	beq.n	80087dc <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80087a2:	f7ff facf 	bl	8007d44 <HAL_GetTick>
 80087a6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80087a8:	e011      	b.n	80087ce <HAL_RCC_OscConfig+0x2ba>
 80087aa:	bf00      	nop
 80087ac:	40021000 	.word	0x40021000
 80087b0:	0800e3bc 	.word	0x0800e3bc
 80087b4:	20000000 	.word	0x20000000
 80087b8:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80087bc:	f7ff fac2 	bl	8007d44 <HAL_GetTick>
 80087c0:	4602      	mov	r2, r0
 80087c2:	693b      	ldr	r3, [r7, #16]
 80087c4:	1ad3      	subs	r3, r2, r3
 80087c6:	2b64      	cmp	r3, #100	; 0x64
 80087c8:	d901      	bls.n	80087ce <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 80087ca:	2303      	movs	r3, #3
 80087cc:	e280      	b.n	8008cd0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80087ce:	4baf      	ldr	r3, [pc, #700]	; (8008a8c <HAL_RCC_OscConfig+0x578>)
 80087d0:	681b      	ldr	r3, [r3, #0]
 80087d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d0f0      	beq.n	80087bc <HAL_RCC_OscConfig+0x2a8>
 80087da:	e014      	b.n	8008806 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80087dc:	f7ff fab2 	bl	8007d44 <HAL_GetTick>
 80087e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80087e2:	e008      	b.n	80087f6 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80087e4:	f7ff faae 	bl	8007d44 <HAL_GetTick>
 80087e8:	4602      	mov	r2, r0
 80087ea:	693b      	ldr	r3, [r7, #16]
 80087ec:	1ad3      	subs	r3, r2, r3
 80087ee:	2b64      	cmp	r3, #100	; 0x64
 80087f0:	d901      	bls.n	80087f6 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 80087f2:	2303      	movs	r3, #3
 80087f4:	e26c      	b.n	8008cd0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80087f6:	4ba5      	ldr	r3, [pc, #660]	; (8008a8c <HAL_RCC_OscConfig+0x578>)
 80087f8:	681b      	ldr	r3, [r3, #0]
 80087fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d1f0      	bne.n	80087e4 <HAL_RCC_OscConfig+0x2d0>
 8008802:	e000      	b.n	8008806 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008804:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	f003 0302 	and.w	r3, r3, #2
 800880e:	2b00      	cmp	r3, #0
 8008810:	d060      	beq.n	80088d4 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8008812:	69bb      	ldr	r3, [r7, #24]
 8008814:	2b04      	cmp	r3, #4
 8008816:	d005      	beq.n	8008824 <HAL_RCC_OscConfig+0x310>
 8008818:	69bb      	ldr	r3, [r7, #24]
 800881a:	2b0c      	cmp	r3, #12
 800881c:	d119      	bne.n	8008852 <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 800881e:	697b      	ldr	r3, [r7, #20]
 8008820:	2b02      	cmp	r3, #2
 8008822:	d116      	bne.n	8008852 <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008824:	4b99      	ldr	r3, [pc, #612]	; (8008a8c <HAL_RCC_OscConfig+0x578>)
 8008826:	681b      	ldr	r3, [r3, #0]
 8008828:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800882c:	2b00      	cmp	r3, #0
 800882e:	d005      	beq.n	800883c <HAL_RCC_OscConfig+0x328>
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	68db      	ldr	r3, [r3, #12]
 8008834:	2b00      	cmp	r3, #0
 8008836:	d101      	bne.n	800883c <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8008838:	2301      	movs	r3, #1
 800883a:	e249      	b.n	8008cd0 <HAL_RCC_OscConfig+0x7bc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800883c:	4b93      	ldr	r3, [pc, #588]	; (8008a8c <HAL_RCC_OscConfig+0x578>)
 800883e:	685b      	ldr	r3, [r3, #4]
 8008840:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8008844:	687b      	ldr	r3, [r7, #4]
 8008846:	691b      	ldr	r3, [r3, #16]
 8008848:	061b      	lsls	r3, r3, #24
 800884a:	4990      	ldr	r1, [pc, #576]	; (8008a8c <HAL_RCC_OscConfig+0x578>)
 800884c:	4313      	orrs	r3, r2
 800884e:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8008850:	e040      	b.n	80088d4 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	68db      	ldr	r3, [r3, #12]
 8008856:	2b00      	cmp	r3, #0
 8008858:	d023      	beq.n	80088a2 <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800885a:	4b8c      	ldr	r3, [pc, #560]	; (8008a8c <HAL_RCC_OscConfig+0x578>)
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	4a8b      	ldr	r2, [pc, #556]	; (8008a8c <HAL_RCC_OscConfig+0x578>)
 8008860:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008864:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008866:	f7ff fa6d 	bl	8007d44 <HAL_GetTick>
 800886a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800886c:	e008      	b.n	8008880 <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800886e:	f7ff fa69 	bl	8007d44 <HAL_GetTick>
 8008872:	4602      	mov	r2, r0
 8008874:	693b      	ldr	r3, [r7, #16]
 8008876:	1ad3      	subs	r3, r2, r3
 8008878:	2b02      	cmp	r3, #2
 800887a:	d901      	bls.n	8008880 <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 800887c:	2303      	movs	r3, #3
 800887e:	e227      	b.n	8008cd0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008880:	4b82      	ldr	r3, [pc, #520]	; (8008a8c <HAL_RCC_OscConfig+0x578>)
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008888:	2b00      	cmp	r3, #0
 800888a:	d0f0      	beq.n	800886e <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800888c:	4b7f      	ldr	r3, [pc, #508]	; (8008a8c <HAL_RCC_OscConfig+0x578>)
 800888e:	685b      	ldr	r3, [r3, #4]
 8008890:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	691b      	ldr	r3, [r3, #16]
 8008898:	061b      	lsls	r3, r3, #24
 800889a:	497c      	ldr	r1, [pc, #496]	; (8008a8c <HAL_RCC_OscConfig+0x578>)
 800889c:	4313      	orrs	r3, r2
 800889e:	604b      	str	r3, [r1, #4]
 80088a0:	e018      	b.n	80088d4 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80088a2:	4b7a      	ldr	r3, [pc, #488]	; (8008a8c <HAL_RCC_OscConfig+0x578>)
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	4a79      	ldr	r2, [pc, #484]	; (8008a8c <HAL_RCC_OscConfig+0x578>)
 80088a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80088ac:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80088ae:	f7ff fa49 	bl	8007d44 <HAL_GetTick>
 80088b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80088b4:	e008      	b.n	80088c8 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80088b6:	f7ff fa45 	bl	8007d44 <HAL_GetTick>
 80088ba:	4602      	mov	r2, r0
 80088bc:	693b      	ldr	r3, [r7, #16]
 80088be:	1ad3      	subs	r3, r2, r3
 80088c0:	2b02      	cmp	r3, #2
 80088c2:	d901      	bls.n	80088c8 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 80088c4:	2303      	movs	r3, #3
 80088c6:	e203      	b.n	8008cd0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80088c8:	4b70      	ldr	r3, [pc, #448]	; (8008a8c <HAL_RCC_OscConfig+0x578>)
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d1f0      	bne.n	80088b6 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	f003 0308 	and.w	r3, r3, #8
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d03c      	beq.n	800895a <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	695b      	ldr	r3, [r3, #20]
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	d01c      	beq.n	8008922 <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80088e8:	4b68      	ldr	r3, [pc, #416]	; (8008a8c <HAL_RCC_OscConfig+0x578>)
 80088ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80088ee:	4a67      	ldr	r2, [pc, #412]	; (8008a8c <HAL_RCC_OscConfig+0x578>)
 80088f0:	f043 0301 	orr.w	r3, r3, #1
 80088f4:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80088f8:	f7ff fa24 	bl	8007d44 <HAL_GetTick>
 80088fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80088fe:	e008      	b.n	8008912 <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008900:	f7ff fa20 	bl	8007d44 <HAL_GetTick>
 8008904:	4602      	mov	r2, r0
 8008906:	693b      	ldr	r3, [r7, #16]
 8008908:	1ad3      	subs	r3, r2, r3
 800890a:	2b02      	cmp	r3, #2
 800890c:	d901      	bls.n	8008912 <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 800890e:	2303      	movs	r3, #3
 8008910:	e1de      	b.n	8008cd0 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8008912:	4b5e      	ldr	r3, [pc, #376]	; (8008a8c <HAL_RCC_OscConfig+0x578>)
 8008914:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008918:	f003 0302 	and.w	r3, r3, #2
 800891c:	2b00      	cmp	r3, #0
 800891e:	d0ef      	beq.n	8008900 <HAL_RCC_OscConfig+0x3ec>
 8008920:	e01b      	b.n	800895a <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008922:	4b5a      	ldr	r3, [pc, #360]	; (8008a8c <HAL_RCC_OscConfig+0x578>)
 8008924:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008928:	4a58      	ldr	r2, [pc, #352]	; (8008a8c <HAL_RCC_OscConfig+0x578>)
 800892a:	f023 0301 	bic.w	r3, r3, #1
 800892e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008932:	f7ff fa07 	bl	8007d44 <HAL_GetTick>
 8008936:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8008938:	e008      	b.n	800894c <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800893a:	f7ff fa03 	bl	8007d44 <HAL_GetTick>
 800893e:	4602      	mov	r2, r0
 8008940:	693b      	ldr	r3, [r7, #16]
 8008942:	1ad3      	subs	r3, r2, r3
 8008944:	2b02      	cmp	r3, #2
 8008946:	d901      	bls.n	800894c <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8008948:	2303      	movs	r3, #3
 800894a:	e1c1      	b.n	8008cd0 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800894c:	4b4f      	ldr	r3, [pc, #316]	; (8008a8c <HAL_RCC_OscConfig+0x578>)
 800894e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008952:	f003 0302 	and.w	r3, r3, #2
 8008956:	2b00      	cmp	r3, #0
 8008958:	d1ef      	bne.n	800893a <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800895a:	687b      	ldr	r3, [r7, #4]
 800895c:	681b      	ldr	r3, [r3, #0]
 800895e:	f003 0304 	and.w	r3, r3, #4
 8008962:	2b00      	cmp	r3, #0
 8008964:	f000 80a6 	beq.w	8008ab4 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8008968:	2300      	movs	r3, #0
 800896a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 800896c:	4b47      	ldr	r3, [pc, #284]	; (8008a8c <HAL_RCC_OscConfig+0x578>)
 800896e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008970:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008974:	2b00      	cmp	r3, #0
 8008976:	d10d      	bne.n	8008994 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8008978:	4b44      	ldr	r3, [pc, #272]	; (8008a8c <HAL_RCC_OscConfig+0x578>)
 800897a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800897c:	4a43      	ldr	r2, [pc, #268]	; (8008a8c <HAL_RCC_OscConfig+0x578>)
 800897e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008982:	6593      	str	r3, [r2, #88]	; 0x58
 8008984:	4b41      	ldr	r3, [pc, #260]	; (8008a8c <HAL_RCC_OscConfig+0x578>)
 8008986:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008988:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800898c:	60bb      	str	r3, [r7, #8]
 800898e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008990:	2301      	movs	r3, #1
 8008992:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008994:	4b3e      	ldr	r3, [pc, #248]	; (8008a90 <HAL_RCC_OscConfig+0x57c>)
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800899c:	2b00      	cmp	r3, #0
 800899e:	d118      	bne.n	80089d2 <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80089a0:	4b3b      	ldr	r3, [pc, #236]	; (8008a90 <HAL_RCC_OscConfig+0x57c>)
 80089a2:	681b      	ldr	r3, [r3, #0]
 80089a4:	4a3a      	ldr	r2, [pc, #232]	; (8008a90 <HAL_RCC_OscConfig+0x57c>)
 80089a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80089aa:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80089ac:	f7ff f9ca 	bl	8007d44 <HAL_GetTick>
 80089b0:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80089b2:	e008      	b.n	80089c6 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80089b4:	f7ff f9c6 	bl	8007d44 <HAL_GetTick>
 80089b8:	4602      	mov	r2, r0
 80089ba:	693b      	ldr	r3, [r7, #16]
 80089bc:	1ad3      	subs	r3, r2, r3
 80089be:	2b02      	cmp	r3, #2
 80089c0:	d901      	bls.n	80089c6 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 80089c2:	2303      	movs	r3, #3
 80089c4:	e184      	b.n	8008cd0 <HAL_RCC_OscConfig+0x7bc>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80089c6:	4b32      	ldr	r3, [pc, #200]	; (8008a90 <HAL_RCC_OscConfig+0x57c>)
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d0f0      	beq.n	80089b4 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80089d2:	687b      	ldr	r3, [r7, #4]
 80089d4:	689b      	ldr	r3, [r3, #8]
 80089d6:	2b01      	cmp	r3, #1
 80089d8:	d108      	bne.n	80089ec <HAL_RCC_OscConfig+0x4d8>
 80089da:	4b2c      	ldr	r3, [pc, #176]	; (8008a8c <HAL_RCC_OscConfig+0x578>)
 80089dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80089e0:	4a2a      	ldr	r2, [pc, #168]	; (8008a8c <HAL_RCC_OscConfig+0x578>)
 80089e2:	f043 0301 	orr.w	r3, r3, #1
 80089e6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80089ea:	e024      	b.n	8008a36 <HAL_RCC_OscConfig+0x522>
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	689b      	ldr	r3, [r3, #8]
 80089f0:	2b05      	cmp	r3, #5
 80089f2:	d110      	bne.n	8008a16 <HAL_RCC_OscConfig+0x502>
 80089f4:	4b25      	ldr	r3, [pc, #148]	; (8008a8c <HAL_RCC_OscConfig+0x578>)
 80089f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80089fa:	4a24      	ldr	r2, [pc, #144]	; (8008a8c <HAL_RCC_OscConfig+0x578>)
 80089fc:	f043 0304 	orr.w	r3, r3, #4
 8008a00:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8008a04:	4b21      	ldr	r3, [pc, #132]	; (8008a8c <HAL_RCC_OscConfig+0x578>)
 8008a06:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008a0a:	4a20      	ldr	r2, [pc, #128]	; (8008a8c <HAL_RCC_OscConfig+0x578>)
 8008a0c:	f043 0301 	orr.w	r3, r3, #1
 8008a10:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8008a14:	e00f      	b.n	8008a36 <HAL_RCC_OscConfig+0x522>
 8008a16:	4b1d      	ldr	r3, [pc, #116]	; (8008a8c <HAL_RCC_OscConfig+0x578>)
 8008a18:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008a1c:	4a1b      	ldr	r2, [pc, #108]	; (8008a8c <HAL_RCC_OscConfig+0x578>)
 8008a1e:	f023 0301 	bic.w	r3, r3, #1
 8008a22:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8008a26:	4b19      	ldr	r3, [pc, #100]	; (8008a8c <HAL_RCC_OscConfig+0x578>)
 8008a28:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008a2c:	4a17      	ldr	r2, [pc, #92]	; (8008a8c <HAL_RCC_OscConfig+0x578>)
 8008a2e:	f023 0304 	bic.w	r3, r3, #4
 8008a32:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	689b      	ldr	r3, [r3, #8]
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d016      	beq.n	8008a6c <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008a3e:	f7ff f981 	bl	8007d44 <HAL_GetTick>
 8008a42:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008a44:	e00a      	b.n	8008a5c <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008a46:	f7ff f97d 	bl	8007d44 <HAL_GetTick>
 8008a4a:	4602      	mov	r2, r0
 8008a4c:	693b      	ldr	r3, [r7, #16]
 8008a4e:	1ad3      	subs	r3, r2, r3
 8008a50:	f241 3288 	movw	r2, #5000	; 0x1388
 8008a54:	4293      	cmp	r3, r2
 8008a56:	d901      	bls.n	8008a5c <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8008a58:	2303      	movs	r3, #3
 8008a5a:	e139      	b.n	8008cd0 <HAL_RCC_OscConfig+0x7bc>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8008a5c:	4b0b      	ldr	r3, [pc, #44]	; (8008a8c <HAL_RCC_OscConfig+0x578>)
 8008a5e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008a62:	f003 0302 	and.w	r3, r3, #2
 8008a66:	2b00      	cmp	r3, #0
 8008a68:	d0ed      	beq.n	8008a46 <HAL_RCC_OscConfig+0x532>
 8008a6a:	e01a      	b.n	8008aa2 <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008a6c:	f7ff f96a 	bl	8007d44 <HAL_GetTick>
 8008a70:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008a72:	e00f      	b.n	8008a94 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008a74:	f7ff f966 	bl	8007d44 <HAL_GetTick>
 8008a78:	4602      	mov	r2, r0
 8008a7a:	693b      	ldr	r3, [r7, #16]
 8008a7c:	1ad3      	subs	r3, r2, r3
 8008a7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008a82:	4293      	cmp	r3, r2
 8008a84:	d906      	bls.n	8008a94 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8008a86:	2303      	movs	r3, #3
 8008a88:	e122      	b.n	8008cd0 <HAL_RCC_OscConfig+0x7bc>
 8008a8a:	bf00      	nop
 8008a8c:	40021000 	.word	0x40021000
 8008a90:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8008a94:	4b90      	ldr	r3, [pc, #576]	; (8008cd8 <HAL_RCC_OscConfig+0x7c4>)
 8008a96:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8008a9a:	f003 0302 	and.w	r3, r3, #2
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	d1e8      	bne.n	8008a74 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8008aa2:	7ffb      	ldrb	r3, [r7, #31]
 8008aa4:	2b01      	cmp	r3, #1
 8008aa6:	d105      	bne.n	8008ab4 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8008aa8:	4b8b      	ldr	r3, [pc, #556]	; (8008cd8 <HAL_RCC_OscConfig+0x7c4>)
 8008aaa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008aac:	4a8a      	ldr	r2, [pc, #552]	; (8008cd8 <HAL_RCC_OscConfig+0x7c4>)
 8008aae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008ab2:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8008ab4:	687b      	ldr	r3, [r7, #4]
 8008ab6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ab8:	2b00      	cmp	r3, #0
 8008aba:	f000 8108 	beq.w	8008cce <HAL_RCC_OscConfig+0x7ba>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ac2:	2b02      	cmp	r3, #2
 8008ac4:	f040 80d0 	bne.w	8008c68 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8008ac8:	4b83      	ldr	r3, [pc, #524]	; (8008cd8 <HAL_RCC_OscConfig+0x7c4>)
 8008aca:	68db      	ldr	r3, [r3, #12]
 8008acc:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8008ace:	697b      	ldr	r3, [r7, #20]
 8008ad0:	f003 0203 	and.w	r2, r3, #3
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008ad8:	429a      	cmp	r2, r3
 8008ada:	d130      	bne.n	8008b3e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008adc:	697b      	ldr	r3, [r7, #20]
 8008ade:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ae6:	3b01      	subs	r3, #1
 8008ae8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8008aea:	429a      	cmp	r2, r3
 8008aec:	d127      	bne.n	8008b3e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008aee:	697b      	ldr	r3, [r7, #20]
 8008af0:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008af8:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8008afa:	429a      	cmp	r2, r3
 8008afc:	d11f      	bne.n	8008b3e <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8008afe:	697b      	ldr	r3, [r7, #20]
 8008b00:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008b04:	687a      	ldr	r2, [r7, #4]
 8008b06:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008b08:	2a07      	cmp	r2, #7
 8008b0a:	bf14      	ite	ne
 8008b0c:	2201      	movne	r2, #1
 8008b0e:	2200      	moveq	r2, #0
 8008b10:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008b12:	4293      	cmp	r3, r2
 8008b14:	d113      	bne.n	8008b3e <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008b16:	697b      	ldr	r3, [r7, #20]
 8008b18:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008b20:	085b      	lsrs	r3, r3, #1
 8008b22:	3b01      	subs	r3, #1
 8008b24:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8008b26:	429a      	cmp	r2, r3
 8008b28:	d109      	bne.n	8008b3e <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8008b2a:	697b      	ldr	r3, [r7, #20]
 8008b2c:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b34:	085b      	lsrs	r3, r3, #1
 8008b36:	3b01      	subs	r3, #1
 8008b38:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8008b3a:	429a      	cmp	r2, r3
 8008b3c:	d06e      	beq.n	8008c1c <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8008b3e:	69bb      	ldr	r3, [r7, #24]
 8008b40:	2b0c      	cmp	r3, #12
 8008b42:	d069      	beq.n	8008c18 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8008b44:	4b64      	ldr	r3, [pc, #400]	; (8008cd8 <HAL_RCC_OscConfig+0x7c4>)
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008b4c:	2b00      	cmp	r3, #0
 8008b4e:	d105      	bne.n	8008b5c <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8008b50:	4b61      	ldr	r3, [pc, #388]	; (8008cd8 <HAL_RCC_OscConfig+0x7c4>)
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d001      	beq.n	8008b60 <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8008b5c:	2301      	movs	r3, #1
 8008b5e:	e0b7      	b.n	8008cd0 <HAL_RCC_OscConfig+0x7bc>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8008b60:	4b5d      	ldr	r3, [pc, #372]	; (8008cd8 <HAL_RCC_OscConfig+0x7c4>)
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	4a5c      	ldr	r2, [pc, #368]	; (8008cd8 <HAL_RCC_OscConfig+0x7c4>)
 8008b66:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008b6a:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8008b6c:	f7ff f8ea 	bl	8007d44 <HAL_GetTick>
 8008b70:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008b72:	e008      	b.n	8008b86 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008b74:	f7ff f8e6 	bl	8007d44 <HAL_GetTick>
 8008b78:	4602      	mov	r2, r0
 8008b7a:	693b      	ldr	r3, [r7, #16]
 8008b7c:	1ad3      	subs	r3, r2, r3
 8008b7e:	2b02      	cmp	r3, #2
 8008b80:	d901      	bls.n	8008b86 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8008b82:	2303      	movs	r3, #3
 8008b84:	e0a4      	b.n	8008cd0 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008b86:	4b54      	ldr	r3, [pc, #336]	; (8008cd8 <HAL_RCC_OscConfig+0x7c4>)
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d1f0      	bne.n	8008b74 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008b92:	4b51      	ldr	r3, [pc, #324]	; (8008cd8 <HAL_RCC_OscConfig+0x7c4>)
 8008b94:	68da      	ldr	r2, [r3, #12]
 8008b96:	4b51      	ldr	r3, [pc, #324]	; (8008cdc <HAL_RCC_OscConfig+0x7c8>)
 8008b98:	4013      	ands	r3, r2
 8008b9a:	687a      	ldr	r2, [r7, #4]
 8008b9c:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8008b9e:	687a      	ldr	r2, [r7, #4]
 8008ba0:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8008ba2:	3a01      	subs	r2, #1
 8008ba4:	0112      	lsls	r2, r2, #4
 8008ba6:	4311      	orrs	r1, r2
 8008ba8:	687a      	ldr	r2, [r7, #4]
 8008baa:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8008bac:	0212      	lsls	r2, r2, #8
 8008bae:	4311      	orrs	r1, r2
 8008bb0:	687a      	ldr	r2, [r7, #4]
 8008bb2:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8008bb4:	0852      	lsrs	r2, r2, #1
 8008bb6:	3a01      	subs	r2, #1
 8008bb8:	0552      	lsls	r2, r2, #21
 8008bba:	4311      	orrs	r1, r2
 8008bbc:	687a      	ldr	r2, [r7, #4]
 8008bbe:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8008bc0:	0852      	lsrs	r2, r2, #1
 8008bc2:	3a01      	subs	r2, #1
 8008bc4:	0652      	lsls	r2, r2, #25
 8008bc6:	4311      	orrs	r1, r2
 8008bc8:	687a      	ldr	r2, [r7, #4]
 8008bca:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008bcc:	0912      	lsrs	r2, r2, #4
 8008bce:	0452      	lsls	r2, r2, #17
 8008bd0:	430a      	orrs	r2, r1
 8008bd2:	4941      	ldr	r1, [pc, #260]	; (8008cd8 <HAL_RCC_OscConfig+0x7c4>)
 8008bd4:	4313      	orrs	r3, r2
 8008bd6:	60cb      	str	r3, [r1, #12]
#endif
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8008bd8:	4b3f      	ldr	r3, [pc, #252]	; (8008cd8 <HAL_RCC_OscConfig+0x7c4>)
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	4a3e      	ldr	r2, [pc, #248]	; (8008cd8 <HAL_RCC_OscConfig+0x7c4>)
 8008bde:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008be2:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008be4:	4b3c      	ldr	r3, [pc, #240]	; (8008cd8 <HAL_RCC_OscConfig+0x7c4>)
 8008be6:	68db      	ldr	r3, [r3, #12]
 8008be8:	4a3b      	ldr	r2, [pc, #236]	; (8008cd8 <HAL_RCC_OscConfig+0x7c4>)
 8008bea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008bee:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8008bf0:	f7ff f8a8 	bl	8007d44 <HAL_GetTick>
 8008bf4:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008bf6:	e008      	b.n	8008c0a <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008bf8:	f7ff f8a4 	bl	8007d44 <HAL_GetTick>
 8008bfc:	4602      	mov	r2, r0
 8008bfe:	693b      	ldr	r3, [r7, #16]
 8008c00:	1ad3      	subs	r3, r2, r3
 8008c02:	2b02      	cmp	r3, #2
 8008c04:	d901      	bls.n	8008c0a <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8008c06:	2303      	movs	r3, #3
 8008c08:	e062      	b.n	8008cd0 <HAL_RCC_OscConfig+0x7bc>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008c0a:	4b33      	ldr	r3, [pc, #204]	; (8008cd8 <HAL_RCC_OscConfig+0x7c4>)
 8008c0c:	681b      	ldr	r3, [r3, #0]
 8008c0e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d0f0      	beq.n	8008bf8 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8008c16:	e05a      	b.n	8008cce <HAL_RCC_OscConfig+0x7ba>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8008c18:	2301      	movs	r3, #1
 8008c1a:	e059      	b.n	8008cd0 <HAL_RCC_OscConfig+0x7bc>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008c1c:	4b2e      	ldr	r3, [pc, #184]	; (8008cd8 <HAL_RCC_OscConfig+0x7c4>)
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d152      	bne.n	8008cce <HAL_RCC_OscConfig+0x7ba>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8008c28:	4b2b      	ldr	r3, [pc, #172]	; (8008cd8 <HAL_RCC_OscConfig+0x7c4>)
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	4a2a      	ldr	r2, [pc, #168]	; (8008cd8 <HAL_RCC_OscConfig+0x7c4>)
 8008c2e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008c32:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8008c34:	4b28      	ldr	r3, [pc, #160]	; (8008cd8 <HAL_RCC_OscConfig+0x7c4>)
 8008c36:	68db      	ldr	r3, [r3, #12]
 8008c38:	4a27      	ldr	r2, [pc, #156]	; (8008cd8 <HAL_RCC_OscConfig+0x7c4>)
 8008c3a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8008c3e:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8008c40:	f7ff f880 	bl	8007d44 <HAL_GetTick>
 8008c44:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008c46:	e008      	b.n	8008c5a <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008c48:	f7ff f87c 	bl	8007d44 <HAL_GetTick>
 8008c4c:	4602      	mov	r2, r0
 8008c4e:	693b      	ldr	r3, [r7, #16]
 8008c50:	1ad3      	subs	r3, r2, r3
 8008c52:	2b02      	cmp	r3, #2
 8008c54:	d901      	bls.n	8008c5a <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8008c56:	2303      	movs	r3, #3
 8008c58:	e03a      	b.n	8008cd0 <HAL_RCC_OscConfig+0x7bc>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008c5a:	4b1f      	ldr	r3, [pc, #124]	; (8008cd8 <HAL_RCC_OscConfig+0x7c4>)
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008c62:	2b00      	cmp	r3, #0
 8008c64:	d0f0      	beq.n	8008c48 <HAL_RCC_OscConfig+0x734>
 8008c66:	e032      	b.n	8008cce <HAL_RCC_OscConfig+0x7ba>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8008c68:	69bb      	ldr	r3, [r7, #24]
 8008c6a:	2b0c      	cmp	r3, #12
 8008c6c:	d02d      	beq.n	8008cca <HAL_RCC_OscConfig+0x7b6>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008c6e:	4b1a      	ldr	r3, [pc, #104]	; (8008cd8 <HAL_RCC_OscConfig+0x7c4>)
 8008c70:	681b      	ldr	r3, [r3, #0]
 8008c72:	4a19      	ldr	r2, [pc, #100]	; (8008cd8 <HAL_RCC_OscConfig+0x7c4>)
 8008c74:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8008c78:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
#if defined(RCC_PLLSAI1_SUPPORT) && defined(RCC_CR_PLLSAI2RDY)
        if(READ_BIT(RCC->CR, (RCC_CR_PLLSAI1RDY | RCC_CR_PLLSAI2RDY)) == 0U)
 8008c7a:	4b17      	ldr	r3, [pc, #92]	; (8008cd8 <HAL_RCC_OscConfig+0x7c4>)
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	f003 5320 	and.w	r3, r3, #671088640	; 0x28000000
 8008c82:	2b00      	cmp	r3, #0
 8008c84:	d105      	bne.n	8008c92 <HAL_RCC_OscConfig+0x77e>
        {
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8008c86:	4b14      	ldr	r3, [pc, #80]	; (8008cd8 <HAL_RCC_OscConfig+0x7c4>)
 8008c88:	68db      	ldr	r3, [r3, #12]
 8008c8a:	4a13      	ldr	r2, [pc, #76]	; (8008cd8 <HAL_RCC_OscConfig+0x7c4>)
 8008c8c:	f023 0303 	bic.w	r3, r3, #3
 8008c90:	60d3      	str	r3, [r2, #12]
#else
        MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
#endif /* RCC_PLLSAI1_SUPPORT && RCC_CR_PLLSAI2RDY */

#if defined(RCC_PLLSAI2_SUPPORT)
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8008c92:	4b11      	ldr	r3, [pc, #68]	; (8008cd8 <HAL_RCC_OscConfig+0x7c4>)
 8008c94:	68db      	ldr	r3, [r3, #12]
 8008c96:	4a10      	ldr	r2, [pc, #64]	; (8008cd8 <HAL_RCC_OscConfig+0x7c4>)
 8008c98:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8008c9c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008ca0:	60d3      	str	r3, [r2, #12]
#else
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK);
#endif /* RCC_PLLSAI2_SUPPORT */

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ca2:	f7ff f84f 	bl	8007d44 <HAL_GetTick>
 8008ca6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008ca8:	e008      	b.n	8008cbc <HAL_RCC_OscConfig+0x7a8>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008caa:	f7ff f84b 	bl	8007d44 <HAL_GetTick>
 8008cae:	4602      	mov	r2, r0
 8008cb0:	693b      	ldr	r3, [r7, #16]
 8008cb2:	1ad3      	subs	r3, r2, r3
 8008cb4:	2b02      	cmp	r3, #2
 8008cb6:	d901      	bls.n	8008cbc <HAL_RCC_OscConfig+0x7a8>
          {
            return HAL_TIMEOUT;
 8008cb8:	2303      	movs	r3, #3
 8008cba:	e009      	b.n	8008cd0 <HAL_RCC_OscConfig+0x7bc>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8008cbc:	4b06      	ldr	r3, [pc, #24]	; (8008cd8 <HAL_RCC_OscConfig+0x7c4>)
 8008cbe:	681b      	ldr	r3, [r3, #0]
 8008cc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d1f0      	bne.n	8008caa <HAL_RCC_OscConfig+0x796>
 8008cc8:	e001      	b.n	8008cce <HAL_RCC_OscConfig+0x7ba>
        }
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8008cca:	2301      	movs	r3, #1
 8008ccc:	e000      	b.n	8008cd0 <HAL_RCC_OscConfig+0x7bc>
      }
    }
  }
  return HAL_OK;
 8008cce:	2300      	movs	r3, #0
}
 8008cd0:	4618      	mov	r0, r3
 8008cd2:	3720      	adds	r7, #32
 8008cd4:	46bd      	mov	sp, r7
 8008cd6:	bd80      	pop	{r7, pc}
 8008cd8:	40021000 	.word	0x40021000
 8008cdc:	f99d808c 	.word	0xf99d808c

08008ce0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008ce0:	b580      	push	{r7, lr}
 8008ce2:	b084      	sub	sp, #16
 8008ce4:	af00      	add	r7, sp, #0
 8008ce6:	6078      	str	r0, [r7, #4]
 8008ce8:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008cea:	687b      	ldr	r3, [r7, #4]
 8008cec:	2b00      	cmp	r3, #0
 8008cee:	d101      	bne.n	8008cf4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008cf0:	2301      	movs	r3, #1
 8008cf2:	e0c8      	b.n	8008e86 <HAL_RCC_ClockConfig+0x1a6>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008cf4:	4b66      	ldr	r3, [pc, #408]	; (8008e90 <HAL_RCC_ClockConfig+0x1b0>)
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	f003 0307 	and.w	r3, r3, #7
 8008cfc:	683a      	ldr	r2, [r7, #0]
 8008cfe:	429a      	cmp	r2, r3
 8008d00:	d910      	bls.n	8008d24 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008d02:	4b63      	ldr	r3, [pc, #396]	; (8008e90 <HAL_RCC_ClockConfig+0x1b0>)
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	f023 0207 	bic.w	r2, r3, #7
 8008d0a:	4961      	ldr	r1, [pc, #388]	; (8008e90 <HAL_RCC_ClockConfig+0x1b0>)
 8008d0c:	683b      	ldr	r3, [r7, #0]
 8008d0e:	4313      	orrs	r3, r2
 8008d10:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008d12:	4b5f      	ldr	r3, [pc, #380]	; (8008e90 <HAL_RCC_ClockConfig+0x1b0>)
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	f003 0307 	and.w	r3, r3, #7
 8008d1a:	683a      	ldr	r2, [r7, #0]
 8008d1c:	429a      	cmp	r2, r3
 8008d1e:	d001      	beq.n	8008d24 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8008d20:	2301      	movs	r3, #1
 8008d22:	e0b0      	b.n	8008e86 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	681b      	ldr	r3, [r3, #0]
 8008d28:	f003 0301 	and.w	r3, r3, #1
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d04c      	beq.n	8008dca <HAL_RCC_ClockConfig+0xea>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	685b      	ldr	r3, [r3, #4]
 8008d34:	2b03      	cmp	r3, #3
 8008d36:	d107      	bne.n	8008d48 <HAL_RCC_ClockConfig+0x68>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8008d38:	4b56      	ldr	r3, [pc, #344]	; (8008e94 <HAL_RCC_ClockConfig+0x1b4>)
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008d40:	2b00      	cmp	r3, #0
 8008d42:	d121      	bne.n	8008d88 <HAL_RCC_ClockConfig+0xa8>
      {
        return HAL_ERROR;
 8008d44:	2301      	movs	r3, #1
 8008d46:	e09e      	b.n	8008e86 <HAL_RCC_ClockConfig+0x1a6>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	685b      	ldr	r3, [r3, #4]
 8008d4c:	2b02      	cmp	r3, #2
 8008d4e:	d107      	bne.n	8008d60 <HAL_RCC_ClockConfig+0x80>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8008d50:	4b50      	ldr	r3, [pc, #320]	; (8008e94 <HAL_RCC_ClockConfig+0x1b4>)
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d115      	bne.n	8008d88 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8008d5c:	2301      	movs	r3, #1
 8008d5e:	e092      	b.n	8008e86 <HAL_RCC_ClockConfig+0x1a6>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	685b      	ldr	r3, [r3, #4]
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d107      	bne.n	8008d78 <HAL_RCC_ClockConfig+0x98>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8008d68:	4b4a      	ldr	r3, [pc, #296]	; (8008e94 <HAL_RCC_ClockConfig+0x1b4>)
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	f003 0302 	and.w	r3, r3, #2
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	d109      	bne.n	8008d88 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8008d74:	2301      	movs	r3, #1
 8008d76:	e086      	b.n	8008e86 <HAL_RCC_ClockConfig+0x1a6>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8008d78:	4b46      	ldr	r3, [pc, #280]	; (8008e94 <HAL_RCC_ClockConfig+0x1b4>)
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008d80:	2b00      	cmp	r3, #0
 8008d82:	d101      	bne.n	8008d88 <HAL_RCC_ClockConfig+0xa8>
        {
          return HAL_ERROR;
 8008d84:	2301      	movs	r3, #1
 8008d86:	e07e      	b.n	8008e86 <HAL_RCC_ClockConfig+0x1a6>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8008d88:	4b42      	ldr	r3, [pc, #264]	; (8008e94 <HAL_RCC_ClockConfig+0x1b4>)
 8008d8a:	689b      	ldr	r3, [r3, #8]
 8008d8c:	f023 0203 	bic.w	r2, r3, #3
 8008d90:	687b      	ldr	r3, [r7, #4]
 8008d92:	685b      	ldr	r3, [r3, #4]
 8008d94:	493f      	ldr	r1, [pc, #252]	; (8008e94 <HAL_RCC_ClockConfig+0x1b4>)
 8008d96:	4313      	orrs	r3, r2
 8008d98:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008d9a:	f7fe ffd3 	bl	8007d44 <HAL_GetTick>
 8008d9e:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008da0:	e00a      	b.n	8008db8 <HAL_RCC_ClockConfig+0xd8>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008da2:	f7fe ffcf 	bl	8007d44 <HAL_GetTick>
 8008da6:	4602      	mov	r2, r0
 8008da8:	68fb      	ldr	r3, [r7, #12]
 8008daa:	1ad3      	subs	r3, r2, r3
 8008dac:	f241 3288 	movw	r2, #5000	; 0x1388
 8008db0:	4293      	cmp	r3, r2
 8008db2:	d901      	bls.n	8008db8 <HAL_RCC_ClockConfig+0xd8>
      {
        return HAL_TIMEOUT;
 8008db4:	2303      	movs	r3, #3
 8008db6:	e066      	b.n	8008e86 <HAL_RCC_ClockConfig+0x1a6>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008db8:	4b36      	ldr	r3, [pc, #216]	; (8008e94 <HAL_RCC_ClockConfig+0x1b4>)
 8008dba:	689b      	ldr	r3, [r3, #8]
 8008dbc:	f003 020c 	and.w	r2, r3, #12
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	685b      	ldr	r3, [r3, #4]
 8008dc4:	009b      	lsls	r3, r3, #2
 8008dc6:	429a      	cmp	r2, r3
 8008dc8:	d1eb      	bne.n	8008da2 <HAL_RCC_ClockConfig+0xc2>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	f003 0302 	and.w	r3, r3, #2
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d008      	beq.n	8008de8 <HAL_RCC_ClockConfig+0x108>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008dd6:	4b2f      	ldr	r3, [pc, #188]	; (8008e94 <HAL_RCC_ClockConfig+0x1b4>)
 8008dd8:	689b      	ldr	r3, [r3, #8]
 8008dda:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	689b      	ldr	r3, [r3, #8]
 8008de2:	492c      	ldr	r1, [pc, #176]	; (8008e94 <HAL_RCC_ClockConfig+0x1b4>)
 8008de4:	4313      	orrs	r3, r2
 8008de6:	608b      	str	r3, [r1, #8]
    }
  }
#endif

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008de8:	4b29      	ldr	r3, [pc, #164]	; (8008e90 <HAL_RCC_ClockConfig+0x1b0>)
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	f003 0307 	and.w	r3, r3, #7
 8008df0:	683a      	ldr	r2, [r7, #0]
 8008df2:	429a      	cmp	r2, r3
 8008df4:	d210      	bcs.n	8008e18 <HAL_RCC_ClockConfig+0x138>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008df6:	4b26      	ldr	r3, [pc, #152]	; (8008e90 <HAL_RCC_ClockConfig+0x1b0>)
 8008df8:	681b      	ldr	r3, [r3, #0]
 8008dfa:	f023 0207 	bic.w	r2, r3, #7
 8008dfe:	4924      	ldr	r1, [pc, #144]	; (8008e90 <HAL_RCC_ClockConfig+0x1b0>)
 8008e00:	683b      	ldr	r3, [r7, #0]
 8008e02:	4313      	orrs	r3, r2
 8008e04:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008e06:	4b22      	ldr	r3, [pc, #136]	; (8008e90 <HAL_RCC_ClockConfig+0x1b0>)
 8008e08:	681b      	ldr	r3, [r3, #0]
 8008e0a:	f003 0307 	and.w	r3, r3, #7
 8008e0e:	683a      	ldr	r2, [r7, #0]
 8008e10:	429a      	cmp	r2, r3
 8008e12:	d001      	beq.n	8008e18 <HAL_RCC_ClockConfig+0x138>
    {
      return HAL_ERROR;
 8008e14:	2301      	movs	r3, #1
 8008e16:	e036      	b.n	8008e86 <HAL_RCC_ClockConfig+0x1a6>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	f003 0304 	and.w	r3, r3, #4
 8008e20:	2b00      	cmp	r3, #0
 8008e22:	d008      	beq.n	8008e36 <HAL_RCC_ClockConfig+0x156>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008e24:	4b1b      	ldr	r3, [pc, #108]	; (8008e94 <HAL_RCC_ClockConfig+0x1b4>)
 8008e26:	689b      	ldr	r3, [r3, #8]
 8008e28:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	68db      	ldr	r3, [r3, #12]
 8008e30:	4918      	ldr	r1, [pc, #96]	; (8008e94 <HAL_RCC_ClockConfig+0x1b4>)
 8008e32:	4313      	orrs	r3, r2
 8008e34:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008e36:	687b      	ldr	r3, [r7, #4]
 8008e38:	681b      	ldr	r3, [r3, #0]
 8008e3a:	f003 0308 	and.w	r3, r3, #8
 8008e3e:	2b00      	cmp	r3, #0
 8008e40:	d009      	beq.n	8008e56 <HAL_RCC_ClockConfig+0x176>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008e42:	4b14      	ldr	r3, [pc, #80]	; (8008e94 <HAL_RCC_ClockConfig+0x1b4>)
 8008e44:	689b      	ldr	r3, [r3, #8]
 8008e46:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	691b      	ldr	r3, [r3, #16]
 8008e4e:	00db      	lsls	r3, r3, #3
 8008e50:	4910      	ldr	r1, [pc, #64]	; (8008e94 <HAL_RCC_ClockConfig+0x1b4>)
 8008e52:	4313      	orrs	r3, r2
 8008e54:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8008e56:	f000 f825 	bl	8008ea4 <HAL_RCC_GetSysClockFreq>
 8008e5a:	4601      	mov	r1, r0
 8008e5c:	4b0d      	ldr	r3, [pc, #52]	; (8008e94 <HAL_RCC_ClockConfig+0x1b4>)
 8008e5e:	689b      	ldr	r3, [r3, #8]
 8008e60:	091b      	lsrs	r3, r3, #4
 8008e62:	f003 030f 	and.w	r3, r3, #15
 8008e66:	4a0c      	ldr	r2, [pc, #48]	; (8008e98 <HAL_RCC_ClockConfig+0x1b8>)
 8008e68:	5cd3      	ldrb	r3, [r2, r3]
 8008e6a:	f003 031f 	and.w	r3, r3, #31
 8008e6e:	fa21 f303 	lsr.w	r3, r1, r3
 8008e72:	4a0a      	ldr	r2, [pc, #40]	; (8008e9c <HAL_RCC_ClockConfig+0x1bc>)
 8008e74:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8008e76:	4b0a      	ldr	r3, [pc, #40]	; (8008ea0 <HAL_RCC_ClockConfig+0x1c0>)
 8008e78:	681b      	ldr	r3, [r3, #0]
 8008e7a:	4618      	mov	r0, r3
 8008e7c:	f7fe ff16 	bl	8007cac <HAL_InitTick>
 8008e80:	4603      	mov	r3, r0
 8008e82:	72fb      	strb	r3, [r7, #11]

  return status;
 8008e84:	7afb      	ldrb	r3, [r7, #11]
}
 8008e86:	4618      	mov	r0, r3
 8008e88:	3710      	adds	r7, #16
 8008e8a:	46bd      	mov	sp, r7
 8008e8c:	bd80      	pop	{r7, pc}
 8008e8e:	bf00      	nop
 8008e90:	40022000 	.word	0x40022000
 8008e94:	40021000 	.word	0x40021000
 8008e98:	0800e3bc 	.word	0x0800e3bc
 8008e9c:	20000000 	.word	0x20000000
 8008ea0:	20000004 	.word	0x20000004

08008ea4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008ea4:	b480      	push	{r7}
 8008ea6:	b089      	sub	sp, #36	; 0x24
 8008ea8:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 8008eaa:	2300      	movs	r3, #0
 8008eac:	61fb      	str	r3, [r7, #28]
 8008eae:	2300      	movs	r3, #0
 8008eb0:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8008eb2:	4b3d      	ldr	r3, [pc, #244]	; (8008fa8 <HAL_RCC_GetSysClockFreq+0x104>)
 8008eb4:	689b      	ldr	r3, [r3, #8]
 8008eb6:	f003 030c 	and.w	r3, r3, #12
 8008eba:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8008ebc:	4b3a      	ldr	r3, [pc, #232]	; (8008fa8 <HAL_RCC_GetSysClockFreq+0x104>)
 8008ebe:	68db      	ldr	r3, [r3, #12]
 8008ec0:	f003 0303 	and.w	r3, r3, #3
 8008ec4:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8008ec6:	693b      	ldr	r3, [r7, #16]
 8008ec8:	2b00      	cmp	r3, #0
 8008eca:	d005      	beq.n	8008ed8 <HAL_RCC_GetSysClockFreq+0x34>
 8008ecc:	693b      	ldr	r3, [r7, #16]
 8008ece:	2b0c      	cmp	r3, #12
 8008ed0:	d121      	bne.n	8008f16 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8008ed2:	68fb      	ldr	r3, [r7, #12]
 8008ed4:	2b01      	cmp	r3, #1
 8008ed6:	d11e      	bne.n	8008f16 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8008ed8:	4b33      	ldr	r3, [pc, #204]	; (8008fa8 <HAL_RCC_GetSysClockFreq+0x104>)
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	f003 0308 	and.w	r3, r3, #8
 8008ee0:	2b00      	cmp	r3, #0
 8008ee2:	d107      	bne.n	8008ef4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8008ee4:	4b30      	ldr	r3, [pc, #192]	; (8008fa8 <HAL_RCC_GetSysClockFreq+0x104>)
 8008ee6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8008eea:	0a1b      	lsrs	r3, r3, #8
 8008eec:	f003 030f 	and.w	r3, r3, #15
 8008ef0:	61fb      	str	r3, [r7, #28]
 8008ef2:	e005      	b.n	8008f00 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 8008ef4:	4b2c      	ldr	r3, [pc, #176]	; (8008fa8 <HAL_RCC_GetSysClockFreq+0x104>)
 8008ef6:	681b      	ldr	r3, [r3, #0]
 8008ef8:	091b      	lsrs	r3, r3, #4
 8008efa:	f003 030f 	and.w	r3, r3, #15
 8008efe:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 8008f00:	4a2a      	ldr	r2, [pc, #168]	; (8008fac <HAL_RCC_GetSysClockFreq+0x108>)
 8008f02:	69fb      	ldr	r3, [r7, #28]
 8008f04:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008f08:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8008f0a:	693b      	ldr	r3, [r7, #16]
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	d10d      	bne.n	8008f2c <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 8008f10:	69fb      	ldr	r3, [r7, #28]
 8008f12:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 8008f14:	e00a      	b.n	8008f2c <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 8008f16:	693b      	ldr	r3, [r7, #16]
 8008f18:	2b04      	cmp	r3, #4
 8008f1a:	d102      	bne.n	8008f22 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8008f1c:	4b24      	ldr	r3, [pc, #144]	; (8008fb0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8008f1e:	61bb      	str	r3, [r7, #24]
 8008f20:	e004      	b.n	8008f2c <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 8008f22:	693b      	ldr	r3, [r7, #16]
 8008f24:	2b08      	cmp	r3, #8
 8008f26:	d101      	bne.n	8008f2c <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8008f28:	4b22      	ldr	r3, [pc, #136]	; (8008fb4 <HAL_RCC_GetSysClockFreq+0x110>)
 8008f2a:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 8008f2c:	693b      	ldr	r3, [r7, #16]
 8008f2e:	2b0c      	cmp	r3, #12
 8008f30:	d133      	bne.n	8008f9a <HAL_RCC_GetSysClockFreq+0xf6>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8008f32:	4b1d      	ldr	r3, [pc, #116]	; (8008fa8 <HAL_RCC_GetSysClockFreq+0x104>)
 8008f34:	68db      	ldr	r3, [r3, #12]
 8008f36:	f003 0303 	and.w	r3, r3, #3
 8008f3a:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8008f3c:	68bb      	ldr	r3, [r7, #8]
 8008f3e:	2b02      	cmp	r3, #2
 8008f40:	d002      	beq.n	8008f48 <HAL_RCC_GetSysClockFreq+0xa4>
 8008f42:	2b03      	cmp	r3, #3
 8008f44:	d003      	beq.n	8008f4e <HAL_RCC_GetSysClockFreq+0xaa>
 8008f46:	e005      	b.n	8008f54 <HAL_RCC_GetSysClockFreq+0xb0>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 8008f48:	4b19      	ldr	r3, [pc, #100]	; (8008fb0 <HAL_RCC_GetSysClockFreq+0x10c>)
 8008f4a:	617b      	str	r3, [r7, #20]
      break;
 8008f4c:	e005      	b.n	8008f5a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8008f4e:	4b19      	ldr	r3, [pc, #100]	; (8008fb4 <HAL_RCC_GetSysClockFreq+0x110>)
 8008f50:	617b      	str	r3, [r7, #20]
      break;
 8008f52:	e002      	b.n	8008f5a <HAL_RCC_GetSysClockFreq+0xb6>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8008f54:	69fb      	ldr	r3, [r7, #28]
 8008f56:	617b      	str	r3, [r7, #20]
      break;
 8008f58:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8008f5a:	4b13      	ldr	r3, [pc, #76]	; (8008fa8 <HAL_RCC_GetSysClockFreq+0x104>)
 8008f5c:	68db      	ldr	r3, [r3, #12]
 8008f5e:	091b      	lsrs	r3, r3, #4
 8008f60:	f003 0307 	and.w	r3, r3, #7
 8008f64:	3301      	adds	r3, #1
 8008f66:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 8008f68:	4b0f      	ldr	r3, [pc, #60]	; (8008fa8 <HAL_RCC_GetSysClockFreq+0x104>)
 8008f6a:	68db      	ldr	r3, [r3, #12]
 8008f6c:	0a1b      	lsrs	r3, r3, #8
 8008f6e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008f72:	697a      	ldr	r2, [r7, #20]
 8008f74:	fb02 f203 	mul.w	r2, r2, r3
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f7e:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8008f80:	4b09      	ldr	r3, [pc, #36]	; (8008fa8 <HAL_RCC_GetSysClockFreq+0x104>)
 8008f82:	68db      	ldr	r3, [r3, #12]
 8008f84:	0e5b      	lsrs	r3, r3, #25
 8008f86:	f003 0303 	and.w	r3, r3, #3
 8008f8a:	3301      	adds	r3, #1
 8008f8c:	005b      	lsls	r3, r3, #1
 8008f8e:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8008f90:	697a      	ldr	r2, [r7, #20]
 8008f92:	683b      	ldr	r3, [r7, #0]
 8008f94:	fbb2 f3f3 	udiv	r3, r2, r3
 8008f98:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 8008f9a:	69bb      	ldr	r3, [r7, #24]
}
 8008f9c:	4618      	mov	r0, r3
 8008f9e:	3724      	adds	r7, #36	; 0x24
 8008fa0:	46bd      	mov	sp, r7
 8008fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa6:	4770      	bx	lr
 8008fa8:	40021000 	.word	0x40021000
 8008fac:	0800e3d4 	.word	0x0800e3d4
 8008fb0:	00f42400 	.word	0x00f42400
 8008fb4:	007a1200 	.word	0x007a1200

08008fb8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008fb8:	b480      	push	{r7}
 8008fba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008fbc:	4b03      	ldr	r3, [pc, #12]	; (8008fcc <HAL_RCC_GetHCLKFreq+0x14>)
 8008fbe:	681b      	ldr	r3, [r3, #0]
}
 8008fc0:	4618      	mov	r0, r3
 8008fc2:	46bd      	mov	sp, r7
 8008fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc8:	4770      	bx	lr
 8008fca:	bf00      	nop
 8008fcc:	20000000 	.word	0x20000000

08008fd0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008fd0:	b580      	push	{r7, lr}
 8008fd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8008fd4:	f7ff fff0 	bl	8008fb8 <HAL_RCC_GetHCLKFreq>
 8008fd8:	4601      	mov	r1, r0
 8008fda:	4b06      	ldr	r3, [pc, #24]	; (8008ff4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008fdc:	689b      	ldr	r3, [r3, #8]
 8008fde:	0a1b      	lsrs	r3, r3, #8
 8008fe0:	f003 0307 	and.w	r3, r3, #7
 8008fe4:	4a04      	ldr	r2, [pc, #16]	; (8008ff8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8008fe6:	5cd3      	ldrb	r3, [r2, r3]
 8008fe8:	f003 031f 	and.w	r3, r3, #31
 8008fec:	fa21 f303 	lsr.w	r3, r1, r3
}
 8008ff0:	4618      	mov	r0, r3
 8008ff2:	bd80      	pop	{r7, pc}
 8008ff4:	40021000 	.word	0x40021000
 8008ff8:	0800e3cc 	.word	0x0800e3cc

08008ffc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008ffc:	b580      	push	{r7, lr}
 8008ffe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8009000:	f7ff ffda 	bl	8008fb8 <HAL_RCC_GetHCLKFreq>
 8009004:	4601      	mov	r1, r0
 8009006:	4b06      	ldr	r3, [pc, #24]	; (8009020 <HAL_RCC_GetPCLK2Freq+0x24>)
 8009008:	689b      	ldr	r3, [r3, #8]
 800900a:	0adb      	lsrs	r3, r3, #11
 800900c:	f003 0307 	and.w	r3, r3, #7
 8009010:	4a04      	ldr	r2, [pc, #16]	; (8009024 <HAL_RCC_GetPCLK2Freq+0x28>)
 8009012:	5cd3      	ldrb	r3, [r2, r3]
 8009014:	f003 031f 	and.w	r3, r3, #31
 8009018:	fa21 f303 	lsr.w	r3, r1, r3
}
 800901c:	4618      	mov	r0, r3
 800901e:	bd80      	pop	{r7, pc}
 8009020:	40021000 	.word	0x40021000
 8009024:	0800e3cc 	.word	0x0800e3cc

08009028 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 8009028:	b580      	push	{r7, lr}
 800902a:	b086      	sub	sp, #24
 800902c:	af00      	add	r7, sp, #0
 800902e:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 8009030:	2300      	movs	r3, #0
 8009032:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 8009034:	4b2a      	ldr	r3, [pc, #168]	; (80090e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8009036:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009038:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800903c:	2b00      	cmp	r3, #0
 800903e:	d003      	beq.n	8009048 <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 8009040:	f7ff fa04 	bl	800844c <HAL_PWREx_GetVoltageRange>
 8009044:	6178      	str	r0, [r7, #20]
 8009046:	e014      	b.n	8009072 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 8009048:	4b25      	ldr	r3, [pc, #148]	; (80090e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800904a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800904c:	4a24      	ldr	r2, [pc, #144]	; (80090e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800904e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009052:	6593      	str	r3, [r2, #88]	; 0x58
 8009054:	4b22      	ldr	r3, [pc, #136]	; (80090e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8009056:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009058:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800905c:	60fb      	str	r3, [r7, #12]
 800905e:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8009060:	f7ff f9f4 	bl	800844c <HAL_PWREx_GetVoltageRange>
 8009064:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 8009066:	4b1e      	ldr	r3, [pc, #120]	; (80090e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8009068:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800906a:	4a1d      	ldr	r2, [pc, #116]	; (80090e0 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800906c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009070:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8009072:	697b      	ldr	r3, [r7, #20]
 8009074:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009078:	d10b      	bne.n	8009092 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800907a:	687b      	ldr	r3, [r7, #4]
 800907c:	2b80      	cmp	r3, #128	; 0x80
 800907e:	d919      	bls.n	80090b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8009080:	687b      	ldr	r3, [r7, #4]
 8009082:	2ba0      	cmp	r3, #160	; 0xa0
 8009084:	d902      	bls.n	800908c <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8009086:	2302      	movs	r3, #2
 8009088:	613b      	str	r3, [r7, #16]
 800908a:	e013      	b.n	80090b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 800908c:	2301      	movs	r3, #1
 800908e:	613b      	str	r3, [r7, #16]
 8009090:	e010      	b.n	80090b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	2b80      	cmp	r3, #128	; 0x80
 8009096:	d902      	bls.n	800909e <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 8009098:	2303      	movs	r3, #3
 800909a:	613b      	str	r3, [r7, #16]
 800909c:	e00a      	b.n	80090b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	2b80      	cmp	r3, #128	; 0x80
 80090a2:	d102      	bne.n	80090aa <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 80090a4:	2302      	movs	r3, #2
 80090a6:	613b      	str	r3, [r7, #16]
 80090a8:	e004      	b.n	80090b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	2b70      	cmp	r3, #112	; 0x70
 80090ae:	d101      	bne.n	80090b4 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 80090b0:	2301      	movs	r3, #1
 80090b2:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 80090b4:	4b0b      	ldr	r3, [pc, #44]	; (80090e4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	f023 0207 	bic.w	r2, r3, #7
 80090bc:	4909      	ldr	r1, [pc, #36]	; (80090e4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80090be:	693b      	ldr	r3, [r7, #16]
 80090c0:	4313      	orrs	r3, r2
 80090c2:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 80090c4:	4b07      	ldr	r3, [pc, #28]	; (80090e4 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	f003 0307 	and.w	r3, r3, #7
 80090cc:	693a      	ldr	r2, [r7, #16]
 80090ce:	429a      	cmp	r2, r3
 80090d0:	d001      	beq.n	80090d6 <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 80090d2:	2301      	movs	r3, #1
 80090d4:	e000      	b.n	80090d8 <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 80090d6:	2300      	movs	r3, #0
}
 80090d8:	4618      	mov	r0, r3
 80090da:	3718      	adds	r7, #24
 80090dc:	46bd      	mov	sp, r7
 80090de:	bd80      	pop	{r7, pc}
 80090e0:	40021000 	.word	0x40021000
 80090e4:	40022000 	.word	0x40022000

080090e8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80090e8:	b580      	push	{r7, lr}
 80090ea:	b086      	sub	sp, #24
 80090ec:	af00      	add	r7, sp, #0
 80090ee:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80090f0:	2300      	movs	r3, #0
 80090f2:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80090f4:	2300      	movs	r3, #0
 80090f6:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009100:	2b00      	cmp	r3, #0
 8009102:	d03f      	beq.n	8009184 <HAL_RCCEx_PeriphCLKConfig+0x9c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009108:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800910c:	d01c      	beq.n	8009148 <HAL_RCCEx_PeriphCLKConfig+0x60>
 800910e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009112:	d802      	bhi.n	800911a <HAL_RCCEx_PeriphCLKConfig+0x32>
 8009114:	2b00      	cmp	r3, #0
 8009116:	d00e      	beq.n	8009136 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 8009118:	e01f      	b.n	800915a <HAL_RCCEx_PeriphCLKConfig+0x72>
 800911a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800911e:	d003      	beq.n	8009128 <HAL_RCCEx_PeriphCLKConfig+0x40>
 8009120:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8009124:	d01c      	beq.n	8009160 <HAL_RCCEx_PeriphCLKConfig+0x78>
 8009126:	e018      	b.n	800915a <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8009128:	4b85      	ldr	r3, [pc, #532]	; (8009340 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800912a:	68db      	ldr	r3, [r3, #12]
 800912c:	4a84      	ldr	r2, [pc, #528]	; (8009340 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800912e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009132:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 8009134:	e015      	b.n	8009162 <HAL_RCCEx_PeriphCLKConfig+0x7a>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	3304      	adds	r3, #4
 800913a:	2100      	movs	r1, #0
 800913c:	4618      	mov	r0, r3
 800913e:	f000 fab9 	bl	80096b4 <RCCEx_PLLSAI1_Config>
 8009142:	4603      	mov	r3, r0
 8009144:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8009146:	e00c      	b.n	8009162 <HAL_RCCEx_PeriphCLKConfig+0x7a>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	3320      	adds	r3, #32
 800914c:	2100      	movs	r1, #0
 800914e:	4618      	mov	r0, r3
 8009150:	f000 fba0 	bl	8009894 <RCCEx_PLLSAI2_Config>
 8009154:	4603      	mov	r3, r0
 8009156:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8009158:	e003      	b.n	8009162 <HAL_RCCEx_PeriphCLKConfig+0x7a>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 800915a:	2301      	movs	r3, #1
 800915c:	74fb      	strb	r3, [r7, #19]
      break;
 800915e:	e000      	b.n	8009162 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      break;
 8009160:	bf00      	nop
    }

    if(ret == HAL_OK)
 8009162:	7cfb      	ldrb	r3, [r7, #19]
 8009164:	2b00      	cmp	r3, #0
 8009166:	d10b      	bne.n	8009180 <HAL_RCCEx_PeriphCLKConfig+0x98>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8009168:	4b75      	ldr	r3, [pc, #468]	; (8009340 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800916a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800916e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8009172:	687b      	ldr	r3, [r7, #4]
 8009174:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009176:	4972      	ldr	r1, [pc, #456]	; (8009340 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8009178:	4313      	orrs	r3, r2
 800917a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800917e:	e001      	b.n	8009184 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009180:	7cfb      	ldrb	r3, [r7, #19]
 8009182:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800918c:	2b00      	cmp	r3, #0
 800918e:	d03f      	beq.n	8009210 <HAL_RCCEx_PeriphCLKConfig+0x128>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8009190:	687b      	ldr	r3, [r7, #4]
 8009192:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009194:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8009198:	d01c      	beq.n	80091d4 <HAL_RCCEx_PeriphCLKConfig+0xec>
 800919a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800919e:	d802      	bhi.n	80091a6 <HAL_RCCEx_PeriphCLKConfig+0xbe>
 80091a0:	2b00      	cmp	r3, #0
 80091a2:	d00e      	beq.n	80091c2 <HAL_RCCEx_PeriphCLKConfig+0xda>
 80091a4:	e01f      	b.n	80091e6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
 80091a6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80091aa:	d003      	beq.n	80091b4 <HAL_RCCEx_PeriphCLKConfig+0xcc>
 80091ac:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 80091b0:	d01c      	beq.n	80091ec <HAL_RCCEx_PeriphCLKConfig+0x104>
 80091b2:	e018      	b.n	80091e6 <HAL_RCCEx_PeriphCLKConfig+0xfe>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80091b4:	4b62      	ldr	r3, [pc, #392]	; (8009340 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80091b6:	68db      	ldr	r3, [r3, #12]
 80091b8:	4a61      	ldr	r2, [pc, #388]	; (8009340 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80091ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80091be:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80091c0:	e015      	b.n	80091ee <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	3304      	adds	r3, #4
 80091c6:	2100      	movs	r1, #0
 80091c8:	4618      	mov	r0, r3
 80091ca:	f000 fa73 	bl	80096b4 <RCCEx_PLLSAI1_Config>
 80091ce:	4603      	mov	r3, r0
 80091d0:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80091d2:	e00c      	b.n	80091ee <HAL_RCCEx_PeriphCLKConfig+0x106>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	3320      	adds	r3, #32
 80091d8:	2100      	movs	r1, #0
 80091da:	4618      	mov	r0, r3
 80091dc:	f000 fb5a 	bl	8009894 <RCCEx_PLLSAI2_Config>
 80091e0:	4603      	mov	r3, r0
 80091e2:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80091e4:	e003      	b.n	80091ee <HAL_RCCEx_PeriphCLKConfig+0x106>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80091e6:	2301      	movs	r3, #1
 80091e8:	74fb      	strb	r3, [r7, #19]
      break;
 80091ea:	e000      	b.n	80091ee <HAL_RCCEx_PeriphCLKConfig+0x106>
      break;
 80091ec:	bf00      	nop
    }

    if(ret == HAL_OK)
 80091ee:	7cfb      	ldrb	r3, [r7, #19]
 80091f0:	2b00      	cmp	r3, #0
 80091f2:	d10b      	bne.n	800920c <HAL_RCCEx_PeriphCLKConfig+0x124>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80091f4:	4b52      	ldr	r3, [pc, #328]	; (8009340 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80091f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80091fa:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009202:	494f      	ldr	r1, [pc, #316]	; (8009340 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8009204:	4313      	orrs	r3, r2
 8009206:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 800920a:	e001      	b.n	8009210 <HAL_RCCEx_PeriphCLKConfig+0x128>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800920c:	7cfb      	ldrb	r3, [r7, #19]
 800920e:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009218:	2b00      	cmp	r3, #0
 800921a:	f000 80a0 	beq.w	800935e <HAL_RCCEx_PeriphCLKConfig+0x276>
  {
    FlagStatus       pwrclkchanged = RESET;
 800921e:	2300      	movs	r3, #0
 8009220:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8009222:	4b47      	ldr	r3, [pc, #284]	; (8009340 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8009224:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009226:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800922a:	2b00      	cmp	r3, #0
 800922c:	d101      	bne.n	8009232 <HAL_RCCEx_PeriphCLKConfig+0x14a>
 800922e:	2301      	movs	r3, #1
 8009230:	e000      	b.n	8009234 <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8009232:	2300      	movs	r3, #0
 8009234:	2b00      	cmp	r3, #0
 8009236:	d00d      	beq.n	8009254 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009238:	4b41      	ldr	r3, [pc, #260]	; (8009340 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800923a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800923c:	4a40      	ldr	r2, [pc, #256]	; (8009340 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800923e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009242:	6593      	str	r3, [r2, #88]	; 0x58
 8009244:	4b3e      	ldr	r3, [pc, #248]	; (8009340 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8009246:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009248:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800924c:	60bb      	str	r3, [r7, #8]
 800924e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8009250:	2301      	movs	r3, #1
 8009252:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8009254:	4b3b      	ldr	r3, [pc, #236]	; (8009344 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	4a3a      	ldr	r2, [pc, #232]	; (8009344 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800925a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800925e:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009260:	f7fe fd70 	bl	8007d44 <HAL_GetTick>
 8009264:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8009266:	e009      	b.n	800927c <HAL_RCCEx_PeriphCLKConfig+0x194>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009268:	f7fe fd6c 	bl	8007d44 <HAL_GetTick>
 800926c:	4602      	mov	r2, r0
 800926e:	68fb      	ldr	r3, [r7, #12]
 8009270:	1ad3      	subs	r3, r2, r3
 8009272:	2b02      	cmp	r3, #2
 8009274:	d902      	bls.n	800927c <HAL_RCCEx_PeriphCLKConfig+0x194>
      {
        ret = HAL_TIMEOUT;
 8009276:	2303      	movs	r3, #3
 8009278:	74fb      	strb	r3, [r7, #19]
        break;
 800927a:	e005      	b.n	8009288 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 800927c:	4b31      	ldr	r3, [pc, #196]	; (8009344 <HAL_RCCEx_PeriphCLKConfig+0x25c>)
 800927e:	681b      	ldr	r3, [r3, #0]
 8009280:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009284:	2b00      	cmp	r3, #0
 8009286:	d0ef      	beq.n	8009268 <HAL_RCCEx_PeriphCLKConfig+0x180>
      }
    }

    if(ret == HAL_OK)
 8009288:	7cfb      	ldrb	r3, [r7, #19]
 800928a:	2b00      	cmp	r3, #0
 800928c:	d15c      	bne.n	8009348 <HAL_RCCEx_PeriphCLKConfig+0x260>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800928e:	4b2c      	ldr	r3, [pc, #176]	; (8009340 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8009290:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009294:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009298:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 800929a:	697b      	ldr	r3, [r7, #20]
 800929c:	2b00      	cmp	r3, #0
 800929e:	d01f      	beq.n	80092e0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80092a6:	697a      	ldr	r2, [r7, #20]
 80092a8:	429a      	cmp	r2, r3
 80092aa:	d019      	beq.n	80092e0 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80092ac:	4b24      	ldr	r3, [pc, #144]	; (8009340 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80092ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80092b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80092b6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80092b8:	4b21      	ldr	r3, [pc, #132]	; (8009340 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80092ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80092be:	4a20      	ldr	r2, [pc, #128]	; (8009340 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80092c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80092c4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80092c8:	4b1d      	ldr	r3, [pc, #116]	; (8009340 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80092ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80092ce:	4a1c      	ldr	r2, [pc, #112]	; (8009340 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80092d0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80092d4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80092d8:	4a19      	ldr	r2, [pc, #100]	; (8009340 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 80092da:	697b      	ldr	r3, [r7, #20]
 80092dc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80092e0:	697b      	ldr	r3, [r7, #20]
 80092e2:	f003 0301 	and.w	r3, r3, #1
 80092e6:	2b00      	cmp	r3, #0
 80092e8:	d016      	beq.n	8009318 <HAL_RCCEx_PeriphCLKConfig+0x230>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80092ea:	f7fe fd2b 	bl	8007d44 <HAL_GetTick>
 80092ee:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80092f0:	e00b      	b.n	800930a <HAL_RCCEx_PeriphCLKConfig+0x222>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80092f2:	f7fe fd27 	bl	8007d44 <HAL_GetTick>
 80092f6:	4602      	mov	r2, r0
 80092f8:	68fb      	ldr	r3, [r7, #12]
 80092fa:	1ad3      	subs	r3, r2, r3
 80092fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8009300:	4293      	cmp	r3, r2
 8009302:	d902      	bls.n	800930a <HAL_RCCEx_PeriphCLKConfig+0x222>
          {
            ret = HAL_TIMEOUT;
 8009304:	2303      	movs	r3, #3
 8009306:	74fb      	strb	r3, [r7, #19]
            break;
 8009308:	e006      	b.n	8009318 <HAL_RCCEx_PeriphCLKConfig+0x230>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800930a:	4b0d      	ldr	r3, [pc, #52]	; (8009340 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800930c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009310:	f003 0302 	and.w	r3, r3, #2
 8009314:	2b00      	cmp	r3, #0
 8009316:	d0ec      	beq.n	80092f2 <HAL_RCCEx_PeriphCLKConfig+0x20a>
          }
        }
      }

      if(ret == HAL_OK)
 8009318:	7cfb      	ldrb	r3, [r7, #19]
 800931a:	2b00      	cmp	r3, #0
 800931c:	d10c      	bne.n	8009338 <HAL_RCCEx_PeriphCLKConfig+0x250>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800931e:	4b08      	ldr	r3, [pc, #32]	; (8009340 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8009320:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009324:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800932e:	4904      	ldr	r1, [pc, #16]	; (8009340 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 8009330:	4313      	orrs	r3, r2
 8009332:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8009336:	e009      	b.n	800934c <HAL_RCCEx_PeriphCLKConfig+0x264>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8009338:	7cfb      	ldrb	r3, [r7, #19]
 800933a:	74bb      	strb	r3, [r7, #18]
 800933c:	e006      	b.n	800934c <HAL_RCCEx_PeriphCLKConfig+0x264>
 800933e:	bf00      	nop
 8009340:	40021000 	.word	0x40021000
 8009344:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8009348:	7cfb      	ldrb	r3, [r7, #19]
 800934a:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800934c:	7c7b      	ldrb	r3, [r7, #17]
 800934e:	2b01      	cmp	r3, #1
 8009350:	d105      	bne.n	800935e <HAL_RCCEx_PeriphCLKConfig+0x276>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009352:	4b9e      	ldr	r3, [pc, #632]	; (80095cc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8009354:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009356:	4a9d      	ldr	r2, [pc, #628]	; (80095cc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8009358:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800935c:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	f003 0301 	and.w	r3, r3, #1
 8009366:	2b00      	cmp	r3, #0
 8009368:	d00a      	beq.n	8009380 <HAL_RCCEx_PeriphCLKConfig+0x298>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800936a:	4b98      	ldr	r3, [pc, #608]	; (80095cc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800936c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009370:	f023 0203 	bic.w	r2, r3, #3
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009378:	4994      	ldr	r1, [pc, #592]	; (80095cc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800937a:	4313      	orrs	r3, r2
 800937c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	f003 0302 	and.w	r3, r3, #2
 8009388:	2b00      	cmp	r3, #0
 800938a:	d00a      	beq.n	80093a2 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800938c:	4b8f      	ldr	r3, [pc, #572]	; (80095cc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800938e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009392:	f023 020c 	bic.w	r2, r3, #12
 8009396:	687b      	ldr	r3, [r7, #4]
 8009398:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800939a:	498c      	ldr	r1, [pc, #560]	; (80095cc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800939c:	4313      	orrs	r3, r2
 800939e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	f003 0304 	and.w	r3, r3, #4
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d00a      	beq.n	80093c4 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80093ae:	4b87      	ldr	r3, [pc, #540]	; (80095cc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80093b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80093b4:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093bc:	4983      	ldr	r1, [pc, #524]	; (80095cc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80093be:	4313      	orrs	r3, r2
 80093c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	f003 0308 	and.w	r3, r3, #8
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d00a      	beq.n	80093e6 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80093d0:	4b7e      	ldr	r3, [pc, #504]	; (80095cc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80093d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80093d6:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80093de:	497b      	ldr	r1, [pc, #492]	; (80095cc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80093e0:	4313      	orrs	r3, r2
 80093e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	681b      	ldr	r3, [r3, #0]
 80093ea:	f003 0310 	and.w	r3, r3, #16
 80093ee:	2b00      	cmp	r3, #0
 80093f0:	d00a      	beq.n	8009408 <HAL_RCCEx_PeriphCLKConfig+0x320>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80093f2:	4b76      	ldr	r3, [pc, #472]	; (80095cc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80093f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80093f8:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80093fc:	687b      	ldr	r3, [r7, #4]
 80093fe:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009400:	4972      	ldr	r1, [pc, #456]	; (80095cc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8009402:	4313      	orrs	r3, r2
 8009404:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	f003 0320 	and.w	r3, r3, #32
 8009410:	2b00      	cmp	r3, #0
 8009412:	d00a      	beq.n	800942a <HAL_RCCEx_PeriphCLKConfig+0x342>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8009414:	4b6d      	ldr	r3, [pc, #436]	; (80095cc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8009416:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800941a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009422:	496a      	ldr	r1, [pc, #424]	; (80095cc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8009424:	4313      	orrs	r3, r2
 8009426:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	681b      	ldr	r3, [r3, #0]
 800942e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009432:	2b00      	cmp	r3, #0
 8009434:	d00a      	beq.n	800944c <HAL_RCCEx_PeriphCLKConfig+0x364>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009436:	4b65      	ldr	r3, [pc, #404]	; (80095cc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8009438:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800943c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009444:	4961      	ldr	r1, [pc, #388]	; (80095cc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8009446:	4313      	orrs	r3, r2
 8009448:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009454:	2b00      	cmp	r3, #0
 8009456:	d00a      	beq.n	800946e <HAL_RCCEx_PeriphCLKConfig+0x386>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8009458:	4b5c      	ldr	r3, [pc, #368]	; (80095cc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800945a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800945e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009462:	687b      	ldr	r3, [r7, #4]
 8009464:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009466:	4959      	ldr	r1, [pc, #356]	; (80095cc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8009468:	4313      	orrs	r3, r2
 800946a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	681b      	ldr	r3, [r3, #0]
 8009472:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009476:	2b00      	cmp	r3, #0
 8009478:	d00a      	beq.n	8009490 <HAL_RCCEx_PeriphCLKConfig+0x3a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800947a:	4b54      	ldr	r3, [pc, #336]	; (80095cc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800947c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009480:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8009484:	687b      	ldr	r3, [r7, #4]
 8009486:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009488:	4950      	ldr	r1, [pc, #320]	; (80095cc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800948a:	4313      	orrs	r3, r2
 800948c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009498:	2b00      	cmp	r3, #0
 800949a:	d00a      	beq.n	80094b2 <HAL_RCCEx_PeriphCLKConfig+0x3ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800949c:	4b4b      	ldr	r3, [pc, #300]	; (80095cc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800949e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80094a2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80094aa:	4948      	ldr	r1, [pc, #288]	; (80095cc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80094ac:	4313      	orrs	r3, r2
 80094ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80094b2:	687b      	ldr	r3, [r7, #4]
 80094b4:	681b      	ldr	r3, [r3, #0]
 80094b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	d00a      	beq.n	80094d4 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80094be:	4b43      	ldr	r3, [pc, #268]	; (80095cc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80094c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80094c4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80094cc:	493f      	ldr	r1, [pc, #252]	; (80095cc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80094ce:	4313      	orrs	r3, r2
 80094d0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d028      	beq.n	8009532 <HAL_RCCEx_PeriphCLKConfig+0x44a>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80094e0:	4b3a      	ldr	r3, [pc, #232]	; (80095cc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80094e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80094e6:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80094ee:	4937      	ldr	r1, [pc, #220]	; (80095cc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80094f0:	4313      	orrs	r3, r2
 80094f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80094f6:	687b      	ldr	r3, [r7, #4]
 80094f8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80094fa:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80094fe:	d106      	bne.n	800950e <HAL_RCCEx_PeriphCLKConfig+0x426>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8009500:	4b32      	ldr	r3, [pc, #200]	; (80095cc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8009502:	68db      	ldr	r3, [r3, #12]
 8009504:	4a31      	ldr	r2, [pc, #196]	; (80095cc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8009506:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800950a:	60d3      	str	r3, [r2, #12]
 800950c:	e011      	b.n	8009532 <HAL_RCCEx_PeriphCLKConfig+0x44a>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009512:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009516:	d10c      	bne.n	8009532 <HAL_RCCEx_PeriphCLKConfig+0x44a>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	3304      	adds	r3, #4
 800951c:	2101      	movs	r1, #1
 800951e:	4618      	mov	r0, r3
 8009520:	f000 f8c8 	bl	80096b4 <RCCEx_PLLSAI1_Config>
 8009524:	4603      	mov	r3, r0
 8009526:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 8009528:	7cfb      	ldrb	r3, [r7, #19]
 800952a:	2b00      	cmp	r3, #0
 800952c:	d001      	beq.n	8009532 <HAL_RCCEx_PeriphCLKConfig+0x44a>
        {
          /* set overall return value */
          status = ret;
 800952e:	7cfb      	ldrb	r3, [r7, #19]
 8009530:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 8009532:	687b      	ldr	r3, [r7, #4]
 8009534:	681b      	ldr	r3, [r3, #0]
 8009536:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800953a:	2b00      	cmp	r3, #0
 800953c:	d028      	beq.n	8009590 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 800953e:	4b23      	ldr	r3, [pc, #140]	; (80095cc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8009540:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009544:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8009548:	687b      	ldr	r3, [r7, #4]
 800954a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800954c:	491f      	ldr	r1, [pc, #124]	; (80095cc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800954e:	4313      	orrs	r3, r2
 8009550:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009558:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800955c:	d106      	bne.n	800956c <HAL_RCCEx_PeriphCLKConfig+0x484>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800955e:	4b1b      	ldr	r3, [pc, #108]	; (80095cc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8009560:	68db      	ldr	r3, [r3, #12]
 8009562:	4a1a      	ldr	r2, [pc, #104]	; (80095cc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 8009564:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8009568:	60d3      	str	r3, [r2, #12]
 800956a:	e011      	b.n	8009590 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 800956c:	687b      	ldr	r3, [r7, #4]
 800956e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009570:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8009574:	d10c      	bne.n	8009590 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8009576:	687b      	ldr	r3, [r7, #4]
 8009578:	3304      	adds	r3, #4
 800957a:	2101      	movs	r1, #1
 800957c:	4618      	mov	r0, r3
 800957e:	f000 f899 	bl	80096b4 <RCCEx_PLLSAI1_Config>
 8009582:	4603      	mov	r3, r0
 8009584:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8009586:	7cfb      	ldrb	r3, [r7, #19]
 8009588:	2b00      	cmp	r3, #0
 800958a:	d001      	beq.n	8009590 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* set overall return value */
        status = ret;
 800958c:	7cfb      	ldrb	r3, [r7, #19]
 800958e:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009598:	2b00      	cmp	r3, #0
 800959a:	d02b      	beq.n	80095f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800959c:	4b0b      	ldr	r3, [pc, #44]	; (80095cc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 800959e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80095a2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80095a6:	687b      	ldr	r3, [r7, #4]
 80095a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80095aa:	4908      	ldr	r1, [pc, #32]	; (80095cc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80095ac:	4313      	orrs	r3, r2
 80095ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80095b6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80095ba:	d109      	bne.n	80095d0 <HAL_RCCEx_PeriphCLKConfig+0x4e8>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80095bc:	4b03      	ldr	r3, [pc, #12]	; (80095cc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80095be:	68db      	ldr	r3, [r3, #12]
 80095c0:	4a02      	ldr	r2, [pc, #8]	; (80095cc <HAL_RCCEx_PeriphCLKConfig+0x4e4>)
 80095c2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80095c6:	60d3      	str	r3, [r2, #12]
 80095c8:	e014      	b.n	80095f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
 80095ca:	bf00      	nop
 80095cc:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80095d4:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80095d8:	d10c      	bne.n	80095f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	3304      	adds	r3, #4
 80095de:	2101      	movs	r1, #1
 80095e0:	4618      	mov	r0, r3
 80095e2:	f000 f867 	bl	80096b4 <RCCEx_PLLSAI1_Config>
 80095e6:	4603      	mov	r3, r0
 80095e8:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80095ea:	7cfb      	ldrb	r3, [r7, #19]
 80095ec:	2b00      	cmp	r3, #0
 80095ee:	d001      	beq.n	80095f4 <HAL_RCCEx_PeriphCLKConfig+0x50c>
      {
        /* set overall return value */
        status = ret;
 80095f0:	7cfb      	ldrb	r3, [r7, #19]
 80095f2:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	681b      	ldr	r3, [r3, #0]
 80095f8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d02f      	beq.n	8009660 <HAL_RCCEx_PeriphCLKConfig+0x578>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8009600:	4b2b      	ldr	r3, [pc, #172]	; (80096b0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009602:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009606:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800960e:	4928      	ldr	r1, [pc, #160]	; (80096b0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009610:	4313      	orrs	r3, r2
 8009612:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800961a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800961e:	d10d      	bne.n	800963c <HAL_RCCEx_PeriphCLKConfig+0x554>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	3304      	adds	r3, #4
 8009624:	2102      	movs	r1, #2
 8009626:	4618      	mov	r0, r3
 8009628:	f000 f844 	bl	80096b4 <RCCEx_PLLSAI1_Config>
 800962c:	4603      	mov	r3, r0
 800962e:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8009630:	7cfb      	ldrb	r3, [r7, #19]
 8009632:	2b00      	cmp	r3, #0
 8009634:	d014      	beq.n	8009660 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 8009636:	7cfb      	ldrb	r3, [r7, #19]
 8009638:	74bb      	strb	r3, [r7, #18]
 800963a:	e011      	b.n	8009660 <HAL_RCCEx_PeriphCLKConfig+0x578>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 800963c:	687b      	ldr	r3, [r7, #4]
 800963e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009640:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009644:	d10c      	bne.n	8009660 <HAL_RCCEx_PeriphCLKConfig+0x578>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	3320      	adds	r3, #32
 800964a:	2102      	movs	r1, #2
 800964c:	4618      	mov	r0, r3
 800964e:	f000 f921 	bl	8009894 <RCCEx_PLLSAI2_Config>
 8009652:	4603      	mov	r3, r0
 8009654:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8009656:	7cfb      	ldrb	r3, [r7, #19]
 8009658:	2b00      	cmp	r3, #0
 800965a:	d001      	beq.n	8009660 <HAL_RCCEx_PeriphCLKConfig+0x578>
      {
        /* set overall return value */
        status = ret;
 800965c:	7cfb      	ldrb	r3, [r7, #19]
 800965e:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009668:	2b00      	cmp	r3, #0
 800966a:	d00a      	beq.n	8009682 <HAL_RCCEx_PeriphCLKConfig+0x59a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800966c:	4b10      	ldr	r3, [pc, #64]	; (80096b0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800966e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009672:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8009676:	687b      	ldr	r3, [r7, #4]
 8009678:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800967a:	490d      	ldr	r1, [pc, #52]	; (80096b0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800967c:	4313      	orrs	r3, r2
 800967e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8009682:	687b      	ldr	r3, [r7, #4]
 8009684:	681b      	ldr	r3, [r3, #0]
 8009686:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800968a:	2b00      	cmp	r3, #0
 800968c:	d00b      	beq.n	80096a6 <HAL_RCCEx_PeriphCLKConfig+0x5be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800968e:	4b08      	ldr	r3, [pc, #32]	; (80096b0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8009690:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009694:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800969e:	4904      	ldr	r1, [pc, #16]	; (80096b0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80096a0:	4313      	orrs	r3, r2
 80096a2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 80096a6:	7cbb      	ldrb	r3, [r7, #18]
}
 80096a8:	4618      	mov	r0, r3
 80096aa:	3718      	adds	r7, #24
 80096ac:	46bd      	mov	sp, r7
 80096ae:	bd80      	pop	{r7, pc}
 80096b0:	40021000 	.word	0x40021000

080096b4 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 80096b4:	b580      	push	{r7, lr}
 80096b6:	b084      	sub	sp, #16
 80096b8:	af00      	add	r7, sp, #0
 80096ba:	6078      	str	r0, [r7, #4]
 80096bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 80096be:	2300      	movs	r3, #0
 80096c0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80096c2:	4b73      	ldr	r3, [pc, #460]	; (8009890 <RCCEx_PLLSAI1_Config+0x1dc>)
 80096c4:	68db      	ldr	r3, [r3, #12]
 80096c6:	f003 0303 	and.w	r3, r3, #3
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	d018      	beq.n	8009700 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 80096ce:	4b70      	ldr	r3, [pc, #448]	; (8009890 <RCCEx_PLLSAI1_Config+0x1dc>)
 80096d0:	68db      	ldr	r3, [r3, #12]
 80096d2:	f003 0203 	and.w	r2, r3, #3
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	681b      	ldr	r3, [r3, #0]
 80096da:	429a      	cmp	r2, r3
 80096dc:	d10d      	bne.n	80096fa <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 80096de:	687b      	ldr	r3, [r7, #4]
 80096e0:	681b      	ldr	r3, [r3, #0]
       ||
 80096e2:	2b00      	cmp	r3, #0
 80096e4:	d009      	beq.n	80096fa <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 80096e6:	4b6a      	ldr	r3, [pc, #424]	; (8009890 <RCCEx_PLLSAI1_Config+0x1dc>)
 80096e8:	68db      	ldr	r3, [r3, #12]
 80096ea:	091b      	lsrs	r3, r3, #4
 80096ec:	f003 0307 	and.w	r3, r3, #7
 80096f0:	1c5a      	adds	r2, r3, #1
 80096f2:	687b      	ldr	r3, [r7, #4]
 80096f4:	685b      	ldr	r3, [r3, #4]
       ||
 80096f6:	429a      	cmp	r2, r3
 80096f8:	d044      	beq.n	8009784 <RCCEx_PLLSAI1_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 80096fa:	2301      	movs	r3, #1
 80096fc:	73fb      	strb	r3, [r7, #15]
 80096fe:	e041      	b.n	8009784 <RCCEx_PLLSAI1_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	2b02      	cmp	r3, #2
 8009706:	d00c      	beq.n	8009722 <RCCEx_PLLSAI1_Config+0x6e>
 8009708:	2b03      	cmp	r3, #3
 800970a:	d013      	beq.n	8009734 <RCCEx_PLLSAI1_Config+0x80>
 800970c:	2b01      	cmp	r3, #1
 800970e:	d120      	bne.n	8009752 <RCCEx_PLLSAI1_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 8009710:	4b5f      	ldr	r3, [pc, #380]	; (8009890 <RCCEx_PLLSAI1_Config+0x1dc>)
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	f003 0302 	and.w	r3, r3, #2
 8009718:	2b00      	cmp	r3, #0
 800971a:	d11d      	bne.n	8009758 <RCCEx_PLLSAI1_Config+0xa4>
      {
        status = HAL_ERROR;
 800971c:	2301      	movs	r3, #1
 800971e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009720:	e01a      	b.n	8009758 <RCCEx_PLLSAI1_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8009722:	4b5b      	ldr	r3, [pc, #364]	; (8009890 <RCCEx_PLLSAI1_Config+0x1dc>)
 8009724:	681b      	ldr	r3, [r3, #0]
 8009726:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800972a:	2b00      	cmp	r3, #0
 800972c:	d116      	bne.n	800975c <RCCEx_PLLSAI1_Config+0xa8>
      {
        status = HAL_ERROR;
 800972e:	2301      	movs	r3, #1
 8009730:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009732:	e013      	b.n	800975c <RCCEx_PLLSAI1_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8009734:	4b56      	ldr	r3, [pc, #344]	; (8009890 <RCCEx_PLLSAI1_Config+0x1dc>)
 8009736:	681b      	ldr	r3, [r3, #0]
 8009738:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800973c:	2b00      	cmp	r3, #0
 800973e:	d10f      	bne.n	8009760 <RCCEx_PLLSAI1_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8009740:	4b53      	ldr	r3, [pc, #332]	; (8009890 <RCCEx_PLLSAI1_Config+0x1dc>)
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009748:	2b00      	cmp	r3, #0
 800974a:	d109      	bne.n	8009760 <RCCEx_PLLSAI1_Config+0xac>
        {
          status = HAL_ERROR;
 800974c:	2301      	movs	r3, #1
 800974e:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8009750:	e006      	b.n	8009760 <RCCEx_PLLSAI1_Config+0xac>
    default:
      status = HAL_ERROR;
 8009752:	2301      	movs	r3, #1
 8009754:	73fb      	strb	r3, [r7, #15]
      break;
 8009756:	e004      	b.n	8009762 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8009758:	bf00      	nop
 800975a:	e002      	b.n	8009762 <RCCEx_PLLSAI1_Config+0xae>
      break;
 800975c:	bf00      	nop
 800975e:	e000      	b.n	8009762 <RCCEx_PLLSAI1_Config+0xae>
      break;
 8009760:	bf00      	nop
    }

    if(status == HAL_OK)
 8009762:	7bfb      	ldrb	r3, [r7, #15]
 8009764:	2b00      	cmp	r3, #0
 8009766:	d10d      	bne.n	8009784 <RCCEx_PLLSAI1_Config+0xd0>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8009768:	4b49      	ldr	r3, [pc, #292]	; (8009890 <RCCEx_PLLSAI1_Config+0x1dc>)
 800976a:	68db      	ldr	r3, [r3, #12]
 800976c:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	6819      	ldr	r1, [r3, #0]
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	685b      	ldr	r3, [r3, #4]
 8009778:	3b01      	subs	r3, #1
 800977a:	011b      	lsls	r3, r3, #4
 800977c:	430b      	orrs	r3, r1
 800977e:	4944      	ldr	r1, [pc, #272]	; (8009890 <RCCEx_PLLSAI1_Config+0x1dc>)
 8009780:	4313      	orrs	r3, r2
 8009782:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8009784:	7bfb      	ldrb	r3, [r7, #15]
 8009786:	2b00      	cmp	r3, #0
 8009788:	d17d      	bne.n	8009886 <RCCEx_PLLSAI1_Config+0x1d2>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 800978a:	4b41      	ldr	r3, [pc, #260]	; (8009890 <RCCEx_PLLSAI1_Config+0x1dc>)
 800978c:	681b      	ldr	r3, [r3, #0]
 800978e:	4a40      	ldr	r2, [pc, #256]	; (8009890 <RCCEx_PLLSAI1_Config+0x1dc>)
 8009790:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009794:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009796:	f7fe fad5 	bl	8007d44 <HAL_GetTick>
 800979a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 800979c:	e009      	b.n	80097b2 <RCCEx_PLLSAI1_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 800979e:	f7fe fad1 	bl	8007d44 <HAL_GetTick>
 80097a2:	4602      	mov	r2, r0
 80097a4:	68bb      	ldr	r3, [r7, #8]
 80097a6:	1ad3      	subs	r3, r2, r3
 80097a8:	2b02      	cmp	r3, #2
 80097aa:	d902      	bls.n	80097b2 <RCCEx_PLLSAI1_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 80097ac:	2303      	movs	r3, #3
 80097ae:	73fb      	strb	r3, [r7, #15]
        break;
 80097b0:	e005      	b.n	80097be <RCCEx_PLLSAI1_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 80097b2:	4b37      	ldr	r3, [pc, #220]	; (8009890 <RCCEx_PLLSAI1_Config+0x1dc>)
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80097ba:	2b00      	cmp	r3, #0
 80097bc:	d1ef      	bne.n	800979e <RCCEx_PLLSAI1_Config+0xea>
      }
    }

    if(status == HAL_OK)
 80097be:	7bfb      	ldrb	r3, [r7, #15]
 80097c0:	2b00      	cmp	r3, #0
 80097c2:	d160      	bne.n	8009886 <RCCEx_PLLSAI1_Config+0x1d2>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80097c4:	683b      	ldr	r3, [r7, #0]
 80097c6:	2b00      	cmp	r3, #0
 80097c8:	d111      	bne.n	80097ee <RCCEx_PLLSAI1_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80097ca:	4b31      	ldr	r3, [pc, #196]	; (8009890 <RCCEx_PLLSAI1_Config+0x1dc>)
 80097cc:	691b      	ldr	r3, [r3, #16]
 80097ce:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80097d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80097d6:	687a      	ldr	r2, [r7, #4]
 80097d8:	6892      	ldr	r2, [r2, #8]
 80097da:	0211      	lsls	r1, r2, #8
 80097dc:	687a      	ldr	r2, [r7, #4]
 80097de:	68d2      	ldr	r2, [r2, #12]
 80097e0:	0912      	lsrs	r2, r2, #4
 80097e2:	0452      	lsls	r2, r2, #17
 80097e4:	430a      	orrs	r2, r1
 80097e6:	492a      	ldr	r1, [pc, #168]	; (8009890 <RCCEx_PLLSAI1_Config+0x1dc>)
 80097e8:	4313      	orrs	r3, r2
 80097ea:	610b      	str	r3, [r1, #16]
 80097ec:	e027      	b.n	800983e <RCCEx_PLLSAI1_Config+0x18a>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80097ee:	683b      	ldr	r3, [r7, #0]
 80097f0:	2b01      	cmp	r3, #1
 80097f2:	d112      	bne.n	800981a <RCCEx_PLLSAI1_Config+0x166>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80097f4:	4b26      	ldr	r3, [pc, #152]	; (8009890 <RCCEx_PLLSAI1_Config+0x1dc>)
 80097f6:	691b      	ldr	r3, [r3, #16]
 80097f8:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80097fc:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8009800:	687a      	ldr	r2, [r7, #4]
 8009802:	6892      	ldr	r2, [r2, #8]
 8009804:	0211      	lsls	r1, r2, #8
 8009806:	687a      	ldr	r2, [r7, #4]
 8009808:	6912      	ldr	r2, [r2, #16]
 800980a:	0852      	lsrs	r2, r2, #1
 800980c:	3a01      	subs	r2, #1
 800980e:	0552      	lsls	r2, r2, #21
 8009810:	430a      	orrs	r2, r1
 8009812:	491f      	ldr	r1, [pc, #124]	; (8009890 <RCCEx_PLLSAI1_Config+0x1dc>)
 8009814:	4313      	orrs	r3, r2
 8009816:	610b      	str	r3, [r1, #16]
 8009818:	e011      	b.n	800983e <RCCEx_PLLSAI1_Config+0x18a>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 800981a:	4b1d      	ldr	r3, [pc, #116]	; (8009890 <RCCEx_PLLSAI1_Config+0x1dc>)
 800981c:	691b      	ldr	r3, [r3, #16]
 800981e:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8009822:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8009826:	687a      	ldr	r2, [r7, #4]
 8009828:	6892      	ldr	r2, [r2, #8]
 800982a:	0211      	lsls	r1, r2, #8
 800982c:	687a      	ldr	r2, [r7, #4]
 800982e:	6952      	ldr	r2, [r2, #20]
 8009830:	0852      	lsrs	r2, r2, #1
 8009832:	3a01      	subs	r2, #1
 8009834:	0652      	lsls	r2, r2, #25
 8009836:	430a      	orrs	r2, r1
 8009838:	4915      	ldr	r1, [pc, #84]	; (8009890 <RCCEx_PLLSAI1_Config+0x1dc>)
 800983a:	4313      	orrs	r3, r2
 800983c:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 800983e:	4b14      	ldr	r3, [pc, #80]	; (8009890 <RCCEx_PLLSAI1_Config+0x1dc>)
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	4a13      	ldr	r2, [pc, #76]	; (8009890 <RCCEx_PLLSAI1_Config+0x1dc>)
 8009844:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009848:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800984a:	f7fe fa7b 	bl	8007d44 <HAL_GetTick>
 800984e:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8009850:	e009      	b.n	8009866 <RCCEx_PLLSAI1_Config+0x1b2>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8009852:	f7fe fa77 	bl	8007d44 <HAL_GetTick>
 8009856:	4602      	mov	r2, r0
 8009858:	68bb      	ldr	r3, [r7, #8]
 800985a:	1ad3      	subs	r3, r2, r3
 800985c:	2b02      	cmp	r3, #2
 800985e:	d902      	bls.n	8009866 <RCCEx_PLLSAI1_Config+0x1b2>
        {
          status = HAL_TIMEOUT;
 8009860:	2303      	movs	r3, #3
 8009862:	73fb      	strb	r3, [r7, #15]
          break;
 8009864:	e005      	b.n	8009872 <RCCEx_PLLSAI1_Config+0x1be>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8009866:	4b0a      	ldr	r3, [pc, #40]	; (8009890 <RCCEx_PLLSAI1_Config+0x1dc>)
 8009868:	681b      	ldr	r3, [r3, #0]
 800986a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800986e:	2b00      	cmp	r3, #0
 8009870:	d0ef      	beq.n	8009852 <RCCEx_PLLSAI1_Config+0x19e>
        }
      }

      if(status == HAL_OK)
 8009872:	7bfb      	ldrb	r3, [r7, #15]
 8009874:	2b00      	cmp	r3, #0
 8009876:	d106      	bne.n	8009886 <RCCEx_PLLSAI1_Config+0x1d2>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 8009878:	4b05      	ldr	r3, [pc, #20]	; (8009890 <RCCEx_PLLSAI1_Config+0x1dc>)
 800987a:	691a      	ldr	r2, [r3, #16]
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	699b      	ldr	r3, [r3, #24]
 8009880:	4903      	ldr	r1, [pc, #12]	; (8009890 <RCCEx_PLLSAI1_Config+0x1dc>)
 8009882:	4313      	orrs	r3, r2
 8009884:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 8009886:	7bfb      	ldrb	r3, [r7, #15]
}
 8009888:	4618      	mov	r0, r3
 800988a:	3710      	adds	r7, #16
 800988c:	46bd      	mov	sp, r7
 800988e:	bd80      	pop	{r7, pc}
 8009890:	40021000 	.word	0x40021000

08009894 <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 8009894:	b580      	push	{r7, lr}
 8009896:	b084      	sub	sp, #16
 8009898:	af00      	add	r7, sp, #0
 800989a:	6078      	str	r0, [r7, #4]
 800989c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800989e:	2300      	movs	r3, #0
 80098a0:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 80098a2:	4b68      	ldr	r3, [pc, #416]	; (8009a44 <RCCEx_PLLSAI2_Config+0x1b0>)
 80098a4:	68db      	ldr	r3, [r3, #12]
 80098a6:	f003 0303 	and.w	r3, r3, #3
 80098aa:	2b00      	cmp	r3, #0
 80098ac:	d018      	beq.n	80098e0 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 80098ae:	4b65      	ldr	r3, [pc, #404]	; (8009a44 <RCCEx_PLLSAI2_Config+0x1b0>)
 80098b0:	68db      	ldr	r3, [r3, #12]
 80098b2:	f003 0203 	and.w	r2, r3, #3
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	681b      	ldr	r3, [r3, #0]
 80098ba:	429a      	cmp	r2, r3
 80098bc:	d10d      	bne.n	80098da <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	681b      	ldr	r3, [r3, #0]
       ||
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d009      	beq.n	80098da <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 80098c6:	4b5f      	ldr	r3, [pc, #380]	; (8009a44 <RCCEx_PLLSAI2_Config+0x1b0>)
 80098c8:	68db      	ldr	r3, [r3, #12]
 80098ca:	091b      	lsrs	r3, r3, #4
 80098cc:	f003 0307 	and.w	r3, r3, #7
 80098d0:	1c5a      	adds	r2, r3, #1
 80098d2:	687b      	ldr	r3, [r7, #4]
 80098d4:	685b      	ldr	r3, [r3, #4]
       ||
 80098d6:	429a      	cmp	r2, r3
 80098d8:	d044      	beq.n	8009964 <RCCEx_PLLSAI2_Config+0xd0>
#endif
      )
    {
      status = HAL_ERROR;
 80098da:	2301      	movs	r3, #1
 80098dc:	73fb      	strb	r3, [r7, #15]
 80098de:	e041      	b.n	8009964 <RCCEx_PLLSAI2_Config+0xd0>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	681b      	ldr	r3, [r3, #0]
 80098e4:	2b02      	cmp	r3, #2
 80098e6:	d00c      	beq.n	8009902 <RCCEx_PLLSAI2_Config+0x6e>
 80098e8:	2b03      	cmp	r3, #3
 80098ea:	d013      	beq.n	8009914 <RCCEx_PLLSAI2_Config+0x80>
 80098ec:	2b01      	cmp	r3, #1
 80098ee:	d120      	bne.n	8009932 <RCCEx_PLLSAI2_Config+0x9e>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80098f0:	4b54      	ldr	r3, [pc, #336]	; (8009a44 <RCCEx_PLLSAI2_Config+0x1b0>)
 80098f2:	681b      	ldr	r3, [r3, #0]
 80098f4:	f003 0302 	and.w	r3, r3, #2
 80098f8:	2b00      	cmp	r3, #0
 80098fa:	d11d      	bne.n	8009938 <RCCEx_PLLSAI2_Config+0xa4>
      {
        status = HAL_ERROR;
 80098fc:	2301      	movs	r3, #1
 80098fe:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009900:	e01a      	b.n	8009938 <RCCEx_PLLSAI2_Config+0xa4>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 8009902:	4b50      	ldr	r3, [pc, #320]	; (8009a44 <RCCEx_PLLSAI2_Config+0x1b0>)
 8009904:	681b      	ldr	r3, [r3, #0]
 8009906:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800990a:	2b00      	cmp	r3, #0
 800990c:	d116      	bne.n	800993c <RCCEx_PLLSAI2_Config+0xa8>
      {
        status = HAL_ERROR;
 800990e:	2301      	movs	r3, #1
 8009910:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009912:	e013      	b.n	800993c <RCCEx_PLLSAI2_Config+0xa8>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 8009914:	4b4b      	ldr	r3, [pc, #300]	; (8009a44 <RCCEx_PLLSAI2_Config+0x1b0>)
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800991c:	2b00      	cmp	r3, #0
 800991e:	d10f      	bne.n	8009940 <RCCEx_PLLSAI2_Config+0xac>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 8009920:	4b48      	ldr	r3, [pc, #288]	; (8009a44 <RCCEx_PLLSAI2_Config+0x1b0>)
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009928:	2b00      	cmp	r3, #0
 800992a:	d109      	bne.n	8009940 <RCCEx_PLLSAI2_Config+0xac>
        {
          status = HAL_ERROR;
 800992c:	2301      	movs	r3, #1
 800992e:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8009930:	e006      	b.n	8009940 <RCCEx_PLLSAI2_Config+0xac>
    default:
      status = HAL_ERROR;
 8009932:	2301      	movs	r3, #1
 8009934:	73fb      	strb	r3, [r7, #15]
      break;
 8009936:	e004      	b.n	8009942 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8009938:	bf00      	nop
 800993a:	e002      	b.n	8009942 <RCCEx_PLLSAI2_Config+0xae>
      break;
 800993c:	bf00      	nop
 800993e:	e000      	b.n	8009942 <RCCEx_PLLSAI2_Config+0xae>
      break;
 8009940:	bf00      	nop
    }

    if(status == HAL_OK)
 8009942:	7bfb      	ldrb	r3, [r7, #15]
 8009944:	2b00      	cmp	r3, #0
 8009946:	d10d      	bne.n	8009964 <RCCEx_PLLSAI2_Config+0xd0>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8009948:	4b3e      	ldr	r3, [pc, #248]	; (8009a44 <RCCEx_PLLSAI2_Config+0x1b0>)
 800994a:	68db      	ldr	r3, [r3, #12]
 800994c:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8009950:	687b      	ldr	r3, [r7, #4]
 8009952:	6819      	ldr	r1, [r3, #0]
 8009954:	687b      	ldr	r3, [r7, #4]
 8009956:	685b      	ldr	r3, [r3, #4]
 8009958:	3b01      	subs	r3, #1
 800995a:	011b      	lsls	r3, r3, #4
 800995c:	430b      	orrs	r3, r1
 800995e:	4939      	ldr	r1, [pc, #228]	; (8009a44 <RCCEx_PLLSAI2_Config+0x1b0>)
 8009960:	4313      	orrs	r3, r2
 8009962:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8009964:	7bfb      	ldrb	r3, [r7, #15]
 8009966:	2b00      	cmp	r3, #0
 8009968:	d167      	bne.n	8009a3a <RCCEx_PLLSAI2_Config+0x1a6>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 800996a:	4b36      	ldr	r3, [pc, #216]	; (8009a44 <RCCEx_PLLSAI2_Config+0x1b0>)
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	4a35      	ldr	r2, [pc, #212]	; (8009a44 <RCCEx_PLLSAI2_Config+0x1b0>)
 8009970:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009974:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009976:	f7fe f9e5 	bl	8007d44 <HAL_GetTick>
 800997a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800997c:	e009      	b.n	8009992 <RCCEx_PLLSAI2_Config+0xfe>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800997e:	f7fe f9e1 	bl	8007d44 <HAL_GetTick>
 8009982:	4602      	mov	r2, r0
 8009984:	68bb      	ldr	r3, [r7, #8]
 8009986:	1ad3      	subs	r3, r2, r3
 8009988:	2b02      	cmp	r3, #2
 800998a:	d902      	bls.n	8009992 <RCCEx_PLLSAI2_Config+0xfe>
      {
        status = HAL_TIMEOUT;
 800998c:	2303      	movs	r3, #3
 800998e:	73fb      	strb	r3, [r7, #15]
        break;
 8009990:	e005      	b.n	800999e <RCCEx_PLLSAI2_Config+0x10a>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8009992:	4b2c      	ldr	r3, [pc, #176]	; (8009a44 <RCCEx_PLLSAI2_Config+0x1b0>)
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800999a:	2b00      	cmp	r3, #0
 800999c:	d1ef      	bne.n	800997e <RCCEx_PLLSAI2_Config+0xea>
      }
    }

    if(status == HAL_OK)
 800999e:	7bfb      	ldrb	r3, [r7, #15]
 80099a0:	2b00      	cmp	r3, #0
 80099a2:	d14a      	bne.n	8009a3a <RCCEx_PLLSAI2_Config+0x1a6>
    {
      if(Divider == DIVIDER_P_UPDATE)
 80099a4:	683b      	ldr	r3, [r7, #0]
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	d111      	bne.n	80099ce <RCCEx_PLLSAI2_Config+0x13a>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80099aa:	4b26      	ldr	r3, [pc, #152]	; (8009a44 <RCCEx_PLLSAI2_Config+0x1b0>)
 80099ac:	695b      	ldr	r3, [r3, #20]
 80099ae:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 80099b2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80099b6:	687a      	ldr	r2, [r7, #4]
 80099b8:	6892      	ldr	r2, [r2, #8]
 80099ba:	0211      	lsls	r1, r2, #8
 80099bc:	687a      	ldr	r2, [r7, #4]
 80099be:	68d2      	ldr	r2, [r2, #12]
 80099c0:	0912      	lsrs	r2, r2, #4
 80099c2:	0452      	lsls	r2, r2, #17
 80099c4:	430a      	orrs	r2, r1
 80099c6:	491f      	ldr	r1, [pc, #124]	; (8009a44 <RCCEx_PLLSAI2_Config+0x1b0>)
 80099c8:	4313      	orrs	r3, r2
 80099ca:	614b      	str	r3, [r1, #20]
 80099cc:	e011      	b.n	80099f2 <RCCEx_PLLSAI2_Config+0x15e>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 80099ce:	4b1d      	ldr	r3, [pc, #116]	; (8009a44 <RCCEx_PLLSAI2_Config+0x1b0>)
 80099d0:	695b      	ldr	r3, [r3, #20]
 80099d2:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80099d6:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80099da:	687a      	ldr	r2, [r7, #4]
 80099dc:	6892      	ldr	r2, [r2, #8]
 80099de:	0211      	lsls	r1, r2, #8
 80099e0:	687a      	ldr	r2, [r7, #4]
 80099e2:	6912      	ldr	r2, [r2, #16]
 80099e4:	0852      	lsrs	r2, r2, #1
 80099e6:	3a01      	subs	r2, #1
 80099e8:	0652      	lsls	r2, r2, #25
 80099ea:	430a      	orrs	r2, r1
 80099ec:	4915      	ldr	r1, [pc, #84]	; (8009a44 <RCCEx_PLLSAI2_Config+0x1b0>)
 80099ee:	4313      	orrs	r3, r2
 80099f0:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80099f2:	4b14      	ldr	r3, [pc, #80]	; (8009a44 <RCCEx_PLLSAI2_Config+0x1b0>)
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	4a13      	ldr	r2, [pc, #76]	; (8009a44 <RCCEx_PLLSAI2_Config+0x1b0>)
 80099f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80099fc:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80099fe:	f7fe f9a1 	bl	8007d44 <HAL_GetTick>
 8009a02:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8009a04:	e009      	b.n	8009a1a <RCCEx_PLLSAI2_Config+0x186>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 8009a06:	f7fe f99d 	bl	8007d44 <HAL_GetTick>
 8009a0a:	4602      	mov	r2, r0
 8009a0c:	68bb      	ldr	r3, [r7, #8]
 8009a0e:	1ad3      	subs	r3, r2, r3
 8009a10:	2b02      	cmp	r3, #2
 8009a12:	d902      	bls.n	8009a1a <RCCEx_PLLSAI2_Config+0x186>
        {
          status = HAL_TIMEOUT;
 8009a14:	2303      	movs	r3, #3
 8009a16:	73fb      	strb	r3, [r7, #15]
          break;
 8009a18:	e005      	b.n	8009a26 <RCCEx_PLLSAI2_Config+0x192>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 8009a1a:	4b0a      	ldr	r3, [pc, #40]	; (8009a44 <RCCEx_PLLSAI2_Config+0x1b0>)
 8009a1c:	681b      	ldr	r3, [r3, #0]
 8009a1e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009a22:	2b00      	cmp	r3, #0
 8009a24:	d0ef      	beq.n	8009a06 <RCCEx_PLLSAI2_Config+0x172>
        }
      }

      if(status == HAL_OK)
 8009a26:	7bfb      	ldrb	r3, [r7, #15]
 8009a28:	2b00      	cmp	r3, #0
 8009a2a:	d106      	bne.n	8009a3a <RCCEx_PLLSAI2_Config+0x1a6>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 8009a2c:	4b05      	ldr	r3, [pc, #20]	; (8009a44 <RCCEx_PLLSAI2_Config+0x1b0>)
 8009a2e:	695a      	ldr	r2, [r3, #20]
 8009a30:	687b      	ldr	r3, [r7, #4]
 8009a32:	695b      	ldr	r3, [r3, #20]
 8009a34:	4903      	ldr	r1, [pc, #12]	; (8009a44 <RCCEx_PLLSAI2_Config+0x1b0>)
 8009a36:	4313      	orrs	r3, r2
 8009a38:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 8009a3a:	7bfb      	ldrb	r3, [r7, #15]
}
 8009a3c:	4618      	mov	r0, r3
 8009a3e:	3710      	adds	r7, #16
 8009a40:	46bd      	mov	sp, r7
 8009a42:	bd80      	pop	{r7, pc}
 8009a44:	40021000 	.word	0x40021000

08009a48 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009a48:	b580      	push	{r7, lr}
 8009a4a:	b082      	sub	sp, #8
 8009a4c:	af00      	add	r7, sp, #0
 8009a4e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	2b00      	cmp	r3, #0
 8009a54:	d101      	bne.n	8009a5a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009a56:	2301      	movs	r3, #1
 8009a58:	e040      	b.n	8009adc <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8009a5a:	687b      	ldr	r3, [r7, #4]
 8009a5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009a5e:	2b00      	cmp	r3, #0
 8009a60:	d106      	bne.n	8009a70 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009a62:	687b      	ldr	r3, [r7, #4]
 8009a64:	2200      	movs	r2, #0
 8009a66:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009a6a:	6878      	ldr	r0, [r7, #4]
 8009a6c:	f7fe f834 	bl	8007ad8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	2224      	movs	r2, #36	; 0x24
 8009a74:	675a      	str	r2, [r3, #116]	; 0x74

  __HAL_UART_DISABLE(huart);
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	681a      	ldr	r2, [r3, #0]
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	f022 0201 	bic.w	r2, r2, #1
 8009a84:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8009a86:	6878      	ldr	r0, [r7, #4]
 8009a88:	f000 f98c 	bl	8009da4 <UART_SetConfig>
 8009a8c:	4603      	mov	r3, r0
 8009a8e:	2b01      	cmp	r3, #1
 8009a90:	d101      	bne.n	8009a96 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8009a92:	2301      	movs	r3, #1
 8009a94:	e022      	b.n	8009adc <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009a9a:	2b00      	cmp	r3, #0
 8009a9c:	d002      	beq.n	8009aa4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8009a9e:	6878      	ldr	r0, [r7, #4]
 8009aa0:	f000 fcf2 	bl	800a488 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	685a      	ldr	r2, [r3, #4]
 8009aaa:	687b      	ldr	r3, [r7, #4]
 8009aac:	681b      	ldr	r3, [r3, #0]
 8009aae:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009ab2:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	689a      	ldr	r2, [r3, #8]
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009ac2:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	681b      	ldr	r3, [r3, #0]
 8009ac8:	681a      	ldr	r2, [r3, #0]
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	f042 0201 	orr.w	r2, r2, #1
 8009ad2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8009ad4:	6878      	ldr	r0, [r7, #4]
 8009ad6:	f000 fd79 	bl	800a5cc <UART_CheckIdleState>
 8009ada:	4603      	mov	r3, r0
}
 8009adc:	4618      	mov	r0, r3
 8009ade:	3708      	adds	r7, #8
 8009ae0:	46bd      	mov	sp, r7
 8009ae2:	bd80      	pop	{r7, pc}

08009ae4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009ae4:	b580      	push	{r7, lr}
 8009ae6:	b08a      	sub	sp, #40	; 0x28
 8009ae8:	af02      	add	r7, sp, #8
 8009aea:	60f8      	str	r0, [r7, #12]
 8009aec:	60b9      	str	r1, [r7, #8]
 8009aee:	603b      	str	r3, [r7, #0]
 8009af0:	4613      	mov	r3, r2
 8009af2:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009af4:	68fb      	ldr	r3, [r7, #12]
 8009af6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009af8:	2b20      	cmp	r3, #32
 8009afa:	f040 8081 	bne.w	8009c00 <HAL_UART_Transmit+0x11c>
  {
    if ((pData == NULL) || (Size == 0U))
 8009afe:	68bb      	ldr	r3, [r7, #8]
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d002      	beq.n	8009b0a <HAL_UART_Transmit+0x26>
 8009b04:	88fb      	ldrh	r3, [r7, #6]
 8009b06:	2b00      	cmp	r3, #0
 8009b08:	d101      	bne.n	8009b0e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8009b0a:	2301      	movs	r3, #1
 8009b0c:	e079      	b.n	8009c02 <HAL_UART_Transmit+0x11e>
    }

    __HAL_LOCK(huart);
 8009b0e:	68fb      	ldr	r3, [r7, #12]
 8009b10:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8009b14:	2b01      	cmp	r3, #1
 8009b16:	d101      	bne.n	8009b1c <HAL_UART_Transmit+0x38>
 8009b18:	2302      	movs	r3, #2
 8009b1a:	e072      	b.n	8009c02 <HAL_UART_Transmit+0x11e>
 8009b1c:	68fb      	ldr	r3, [r7, #12]
 8009b1e:	2201      	movs	r2, #1
 8009b20:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	2200      	movs	r2, #0
 8009b28:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009b2a:	68fb      	ldr	r3, [r7, #12]
 8009b2c:	2221      	movs	r2, #33	; 0x21
 8009b2e:	675a      	str	r2, [r3, #116]	; 0x74

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8009b30:	f7fe f908 	bl	8007d44 <HAL_GetTick>
 8009b34:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8009b36:	68fb      	ldr	r3, [r7, #12]
 8009b38:	88fa      	ldrh	r2, [r7, #6]
 8009b3a:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	88fa      	ldrh	r2, [r7, #6]
 8009b42:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	689b      	ldr	r3, [r3, #8]
 8009b4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009b4e:	d108      	bne.n	8009b62 <HAL_UART_Transmit+0x7e>
 8009b50:	68fb      	ldr	r3, [r7, #12]
 8009b52:	691b      	ldr	r3, [r3, #16]
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d104      	bne.n	8009b62 <HAL_UART_Transmit+0x7e>
    {
      pdata8bits  = NULL;
 8009b58:	2300      	movs	r3, #0
 8009b5a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8009b5c:	68bb      	ldr	r3, [r7, #8]
 8009b5e:	61bb      	str	r3, [r7, #24]
 8009b60:	e003      	b.n	8009b6a <HAL_UART_Transmit+0x86>
    }
    else
    {
      pdata8bits  = pData;
 8009b62:	68bb      	ldr	r3, [r7, #8]
 8009b64:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009b66:	2300      	movs	r3, #0
 8009b68:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8009b6a:	68fb      	ldr	r3, [r7, #12]
 8009b6c:	2200      	movs	r2, #0
 8009b6e:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    while (huart->TxXferCount > 0U)
 8009b72:	e02d      	b.n	8009bd0 <HAL_UART_Transmit+0xec>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009b74:	683b      	ldr	r3, [r7, #0]
 8009b76:	9300      	str	r3, [sp, #0]
 8009b78:	697b      	ldr	r3, [r7, #20]
 8009b7a:	2200      	movs	r2, #0
 8009b7c:	2180      	movs	r1, #128	; 0x80
 8009b7e:	68f8      	ldr	r0, [r7, #12]
 8009b80:	f000 fd69 	bl	800a656 <UART_WaitOnFlagUntilTimeout>
 8009b84:	4603      	mov	r3, r0
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	d001      	beq.n	8009b8e <HAL_UART_Transmit+0xaa>
      {
        return HAL_TIMEOUT;
 8009b8a:	2303      	movs	r3, #3
 8009b8c:	e039      	b.n	8009c02 <HAL_UART_Transmit+0x11e>
      }
      if (pdata8bits == NULL)
 8009b8e:	69fb      	ldr	r3, [r7, #28]
 8009b90:	2b00      	cmp	r3, #0
 8009b92:	d10b      	bne.n	8009bac <HAL_UART_Transmit+0xc8>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009b94:	69bb      	ldr	r3, [r7, #24]
 8009b96:	881a      	ldrh	r2, [r3, #0]
 8009b98:	68fb      	ldr	r3, [r7, #12]
 8009b9a:	681b      	ldr	r3, [r3, #0]
 8009b9c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009ba0:	b292      	uxth	r2, r2
 8009ba2:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8009ba4:	69bb      	ldr	r3, [r7, #24]
 8009ba6:	3302      	adds	r3, #2
 8009ba8:	61bb      	str	r3, [r7, #24]
 8009baa:	e008      	b.n	8009bbe <HAL_UART_Transmit+0xda>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8009bac:	69fb      	ldr	r3, [r7, #28]
 8009bae:	781a      	ldrb	r2, [r3, #0]
 8009bb0:	68fb      	ldr	r3, [r7, #12]
 8009bb2:	681b      	ldr	r3, [r3, #0]
 8009bb4:	b292      	uxth	r2, r2
 8009bb6:	851a      	strh	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8009bb8:	69fb      	ldr	r3, [r7, #28]
 8009bba:	3301      	adds	r3, #1
 8009bbc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009bbe:	68fb      	ldr	r3, [r7, #12]
 8009bc0:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009bc4:	b29b      	uxth	r3, r3
 8009bc6:	3b01      	subs	r3, #1
 8009bc8:	b29a      	uxth	r2, r3
 8009bca:	68fb      	ldr	r3, [r7, #12]
 8009bcc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8009bd0:	68fb      	ldr	r3, [r7, #12]
 8009bd2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8009bd6:	b29b      	uxth	r3, r3
 8009bd8:	2b00      	cmp	r3, #0
 8009bda:	d1cb      	bne.n	8009b74 <HAL_UART_Transmit+0x90>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009bdc:	683b      	ldr	r3, [r7, #0]
 8009bde:	9300      	str	r3, [sp, #0]
 8009be0:	697b      	ldr	r3, [r7, #20]
 8009be2:	2200      	movs	r2, #0
 8009be4:	2140      	movs	r1, #64	; 0x40
 8009be6:	68f8      	ldr	r0, [r7, #12]
 8009be8:	f000 fd35 	bl	800a656 <UART_WaitOnFlagUntilTimeout>
 8009bec:	4603      	mov	r3, r0
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d001      	beq.n	8009bf6 <HAL_UART_Transmit+0x112>
    {
      return HAL_TIMEOUT;
 8009bf2:	2303      	movs	r3, #3
 8009bf4:	e005      	b.n	8009c02 <HAL_UART_Transmit+0x11e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	2220      	movs	r2, #32
 8009bfa:	675a      	str	r2, [r3, #116]	; 0x74

    return HAL_OK;
 8009bfc:	2300      	movs	r3, #0
 8009bfe:	e000      	b.n	8009c02 <HAL_UART_Transmit+0x11e>
  }
  else
  {
    return HAL_BUSY;
 8009c00:	2302      	movs	r3, #2
  }
}
 8009c02:	4618      	mov	r0, r3
 8009c04:	3720      	adds	r7, #32
 8009c06:	46bd      	mov	sp, r7
 8009c08:	bd80      	pop	{r7, pc}

08009c0a <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009c0a:	b580      	push	{r7, lr}
 8009c0c:	b08a      	sub	sp, #40	; 0x28
 8009c0e:	af02      	add	r7, sp, #8
 8009c10:	60f8      	str	r0, [r7, #12]
 8009c12:	60b9      	str	r1, [r7, #8]
 8009c14:	603b      	str	r3, [r7, #0]
 8009c16:	4613      	mov	r3, r2
 8009c18:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009c1a:	68fb      	ldr	r3, [r7, #12]
 8009c1c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009c1e:	2b20      	cmp	r3, #32
 8009c20:	f040 80bb 	bne.w	8009d9a <HAL_UART_Receive+0x190>
  {
    if ((pData == NULL) || (Size == 0U))
 8009c24:	68bb      	ldr	r3, [r7, #8]
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d002      	beq.n	8009c30 <HAL_UART_Receive+0x26>
 8009c2a:	88fb      	ldrh	r3, [r7, #6]
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d101      	bne.n	8009c34 <HAL_UART_Receive+0x2a>
    {
      return  HAL_ERROR;
 8009c30:	2301      	movs	r3, #1
 8009c32:	e0b3      	b.n	8009d9c <HAL_UART_Receive+0x192>
    }

    __HAL_LOCK(huart);
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	f893 3070 	ldrb.w	r3, [r3, #112]	; 0x70
 8009c3a:	2b01      	cmp	r3, #1
 8009c3c:	d101      	bne.n	8009c42 <HAL_UART_Receive+0x38>
 8009c3e:	2302      	movs	r3, #2
 8009c40:	e0ac      	b.n	8009d9c <HAL_UART_Receive+0x192>
 8009c42:	68fb      	ldr	r3, [r7, #12]
 8009c44:	2201      	movs	r2, #1
 8009c46:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009c4a:	68fb      	ldr	r3, [r7, #12]
 8009c4c:	2200      	movs	r2, #0
 8009c4e:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009c50:	68fb      	ldr	r3, [r7, #12]
 8009c52:	2222      	movs	r2, #34	; 0x22
 8009c54:	679a      	str	r2, [r3, #120]	; 0x78

    /* Init tickstart for timeout managment*/
    tickstart = HAL_GetTick();
 8009c56:	f7fe f875 	bl	8007d44 <HAL_GetTick>
 8009c5a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	88fa      	ldrh	r2, [r7, #6]
 8009c60:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8009c64:	68fb      	ldr	r3, [r7, #12]
 8009c66:	88fa      	ldrh	r2, [r7, #6]
 8009c68:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	689b      	ldr	r3, [r3, #8]
 8009c70:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009c74:	d10e      	bne.n	8009c94 <HAL_UART_Receive+0x8a>
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	691b      	ldr	r3, [r3, #16]
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d105      	bne.n	8009c8a <HAL_UART_Receive+0x80>
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	f240 12ff 	movw	r2, #511	; 0x1ff
 8009c84:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009c88:	e02d      	b.n	8009ce6 <HAL_UART_Receive+0xdc>
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	22ff      	movs	r2, #255	; 0xff
 8009c8e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009c92:	e028      	b.n	8009ce6 <HAL_UART_Receive+0xdc>
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	689b      	ldr	r3, [r3, #8]
 8009c98:	2b00      	cmp	r3, #0
 8009c9a:	d10d      	bne.n	8009cb8 <HAL_UART_Receive+0xae>
 8009c9c:	68fb      	ldr	r3, [r7, #12]
 8009c9e:	691b      	ldr	r3, [r3, #16]
 8009ca0:	2b00      	cmp	r3, #0
 8009ca2:	d104      	bne.n	8009cae <HAL_UART_Receive+0xa4>
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	22ff      	movs	r2, #255	; 0xff
 8009ca8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009cac:	e01b      	b.n	8009ce6 <HAL_UART_Receive+0xdc>
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	227f      	movs	r2, #127	; 0x7f
 8009cb2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009cb6:	e016      	b.n	8009ce6 <HAL_UART_Receive+0xdc>
 8009cb8:	68fb      	ldr	r3, [r7, #12]
 8009cba:	689b      	ldr	r3, [r3, #8]
 8009cbc:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8009cc0:	d10d      	bne.n	8009cde <HAL_UART_Receive+0xd4>
 8009cc2:	68fb      	ldr	r3, [r7, #12]
 8009cc4:	691b      	ldr	r3, [r3, #16]
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d104      	bne.n	8009cd4 <HAL_UART_Receive+0xca>
 8009cca:	68fb      	ldr	r3, [r7, #12]
 8009ccc:	227f      	movs	r2, #127	; 0x7f
 8009cce:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009cd2:	e008      	b.n	8009ce6 <HAL_UART_Receive+0xdc>
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	223f      	movs	r2, #63	; 0x3f
 8009cd8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8009cdc:	e003      	b.n	8009ce6 <HAL_UART_Receive+0xdc>
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	2200      	movs	r2, #0
 8009ce2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8009ce6:	68fb      	ldr	r3, [r7, #12]
 8009ce8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009cec:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009cee:	68fb      	ldr	r3, [r7, #12]
 8009cf0:	689b      	ldr	r3, [r3, #8]
 8009cf2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009cf6:	d108      	bne.n	8009d0a <HAL_UART_Receive+0x100>
 8009cf8:	68fb      	ldr	r3, [r7, #12]
 8009cfa:	691b      	ldr	r3, [r3, #16]
 8009cfc:	2b00      	cmp	r3, #0
 8009cfe:	d104      	bne.n	8009d0a <HAL_UART_Receive+0x100>
    {
      pdata8bits  = NULL;
 8009d00:	2300      	movs	r3, #0
 8009d02:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8009d04:	68bb      	ldr	r3, [r7, #8]
 8009d06:	61bb      	str	r3, [r7, #24]
 8009d08:	e003      	b.n	8009d12 <HAL_UART_Receive+0x108>
    }
    else
    {
      pdata8bits  = pData;
 8009d0a:	68bb      	ldr	r3, [r7, #8]
 8009d0c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009d0e:	2300      	movs	r3, #0
 8009d10:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8009d12:	68fb      	ldr	r3, [r7, #12]
 8009d14:	2200      	movs	r2, #0
 8009d16:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8009d1a:	e033      	b.n	8009d84 <HAL_UART_Receive+0x17a>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8009d1c:	683b      	ldr	r3, [r7, #0]
 8009d1e:	9300      	str	r3, [sp, #0]
 8009d20:	697b      	ldr	r3, [r7, #20]
 8009d22:	2200      	movs	r2, #0
 8009d24:	2120      	movs	r1, #32
 8009d26:	68f8      	ldr	r0, [r7, #12]
 8009d28:	f000 fc95 	bl	800a656 <UART_WaitOnFlagUntilTimeout>
 8009d2c:	4603      	mov	r3, r0
 8009d2e:	2b00      	cmp	r3, #0
 8009d30:	d001      	beq.n	8009d36 <HAL_UART_Receive+0x12c>
      {
        return HAL_TIMEOUT;
 8009d32:	2303      	movs	r3, #3
 8009d34:	e032      	b.n	8009d9c <HAL_UART_Receive+0x192>
      }
      if (pdata8bits == NULL)
 8009d36:	69fb      	ldr	r3, [r7, #28]
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d10c      	bne.n	8009d56 <HAL_UART_Receive+0x14c>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8009d3c:	68fb      	ldr	r3, [r7, #12]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8009d42:	b29a      	uxth	r2, r3
 8009d44:	8a7b      	ldrh	r3, [r7, #18]
 8009d46:	4013      	ands	r3, r2
 8009d48:	b29a      	uxth	r2, r3
 8009d4a:	69bb      	ldr	r3, [r7, #24]
 8009d4c:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8009d4e:	69bb      	ldr	r3, [r7, #24]
 8009d50:	3302      	adds	r3, #2
 8009d52:	61bb      	str	r3, [r7, #24]
 8009d54:	e00d      	b.n	8009d72 <HAL_UART_Receive+0x168>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8009d5c:	b29b      	uxth	r3, r3
 8009d5e:	b2da      	uxtb	r2, r3
 8009d60:	8a7b      	ldrh	r3, [r7, #18]
 8009d62:	b2db      	uxtb	r3, r3
 8009d64:	4013      	ands	r3, r2
 8009d66:	b2da      	uxtb	r2, r3
 8009d68:	69fb      	ldr	r3, [r7, #28]
 8009d6a:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8009d6c:	69fb      	ldr	r3, [r7, #28]
 8009d6e:	3301      	adds	r3, #1
 8009d70:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8009d72:	68fb      	ldr	r3, [r7, #12]
 8009d74:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009d78:	b29b      	uxth	r3, r3
 8009d7a:	3b01      	subs	r3, #1
 8009d7c:	b29a      	uxth	r2, r3
 8009d7e:	68fb      	ldr	r3, [r7, #12]
 8009d80:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8009d8a:	b29b      	uxth	r3, r3
 8009d8c:	2b00      	cmp	r3, #0
 8009d8e:	d1c5      	bne.n	8009d1c <HAL_UART_Receive+0x112>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8009d90:	68fb      	ldr	r3, [r7, #12]
 8009d92:	2220      	movs	r2, #32
 8009d94:	679a      	str	r2, [r3, #120]	; 0x78

    return HAL_OK;
 8009d96:	2300      	movs	r3, #0
 8009d98:	e000      	b.n	8009d9c <HAL_UART_Receive+0x192>
  }
  else
  {
    return HAL_BUSY;
 8009d9a:	2302      	movs	r3, #2
  }
}
 8009d9c:	4618      	mov	r0, r3
 8009d9e:	3720      	adds	r7, #32
 8009da0:	46bd      	mov	sp, r7
 8009da2:	bd80      	pop	{r7, pc}

08009da4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009da4:	e92d 4890 	stmdb	sp!, {r4, r7, fp, lr}
 8009da8:	b08a      	sub	sp, #40	; 0x28
 8009daa:	af00      	add	r7, sp, #0
 8009dac:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv                   = 0x00000000U;
 8009dae:	2300      	movs	r3, #0
 8009db0:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef ret               = HAL_OK;
 8009db2:	2300      	movs	r3, #0
 8009db4:	76fb      	strb	r3, [r7, #27]
  uint32_t lpuart_ker_ck_pres         = 0x00000000U;
 8009db6:	2300      	movs	r3, #0
 8009db8:	617b      	str	r3, [r7, #20]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8009dba:	687b      	ldr	r3, [r7, #4]
 8009dbc:	689a      	ldr	r2, [r3, #8]
 8009dbe:	687b      	ldr	r3, [r7, #4]
 8009dc0:	691b      	ldr	r3, [r3, #16]
 8009dc2:	431a      	orrs	r2, r3
 8009dc4:	687b      	ldr	r3, [r7, #4]
 8009dc6:	695b      	ldr	r3, [r3, #20]
 8009dc8:	431a      	orrs	r2, r3
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	69db      	ldr	r3, [r3, #28]
 8009dce:	4313      	orrs	r3, r2
 8009dd0:	627b      	str	r3, [r7, #36]	; 0x24
#if defined(USART_CR1_FIFOEN)
  tmpreg |= (uint32_t)huart->FifoMode;
#endif /* USART_CR1_FIFOEN */
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	681b      	ldr	r3, [r3, #0]
 8009dd6:	681a      	ldr	r2, [r3, #0]
 8009dd8:	4bb8      	ldr	r3, [pc, #736]	; (800a0bc <UART_SetConfig+0x318>)
 8009dda:	4013      	ands	r3, r2
 8009ddc:	687a      	ldr	r2, [r7, #4]
 8009dde:	6812      	ldr	r2, [r2, #0]
 8009de0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8009de2:	430b      	orrs	r3, r1
 8009de4:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	685b      	ldr	r3, [r3, #4]
 8009dec:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	68da      	ldr	r2, [r3, #12]
 8009df4:	687b      	ldr	r3, [r7, #4]
 8009df6:	681b      	ldr	r3, [r3, #0]
 8009df8:	430a      	orrs	r2, r1
 8009dfa:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	699b      	ldr	r3, [r3, #24]
 8009e00:	627b      	str	r3, [r7, #36]	; 0x24

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	4aae      	ldr	r2, [pc, #696]	; (800a0c0 <UART_SetConfig+0x31c>)
 8009e08:	4293      	cmp	r3, r2
 8009e0a:	d004      	beq.n	8009e16 <UART_SetConfig+0x72>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	6a1b      	ldr	r3, [r3, #32]
 8009e10:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e12:	4313      	orrs	r3, r2
 8009e14:	627b      	str	r3, [r7, #36]	; 0x24
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	689b      	ldr	r3, [r3, #8]
 8009e1c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009e26:	430a      	orrs	r2, r1
 8009e28:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	4aa5      	ldr	r2, [pc, #660]	; (800a0c4 <UART_SetConfig+0x320>)
 8009e30:	4293      	cmp	r3, r2
 8009e32:	d126      	bne.n	8009e82 <UART_SetConfig+0xde>
 8009e34:	4ba4      	ldr	r3, [pc, #656]	; (800a0c8 <UART_SetConfig+0x324>)
 8009e36:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e3a:	f003 0303 	and.w	r3, r3, #3
 8009e3e:	2b03      	cmp	r3, #3
 8009e40:	d81a      	bhi.n	8009e78 <UART_SetConfig+0xd4>
 8009e42:	a201      	add	r2, pc, #4	; (adr r2, 8009e48 <UART_SetConfig+0xa4>)
 8009e44:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009e48:	08009e59 	.word	0x08009e59
 8009e4c:	08009e69 	.word	0x08009e69
 8009e50:	08009e61 	.word	0x08009e61
 8009e54:	08009e71 	.word	0x08009e71
 8009e58:	2301      	movs	r3, #1
 8009e5a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009e5e:	e105      	b.n	800a06c <UART_SetConfig+0x2c8>
 8009e60:	2302      	movs	r3, #2
 8009e62:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009e66:	e101      	b.n	800a06c <UART_SetConfig+0x2c8>
 8009e68:	2304      	movs	r3, #4
 8009e6a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009e6e:	e0fd      	b.n	800a06c <UART_SetConfig+0x2c8>
 8009e70:	2308      	movs	r3, #8
 8009e72:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009e76:	e0f9      	b.n	800a06c <UART_SetConfig+0x2c8>
 8009e78:	2310      	movs	r3, #16
 8009e7a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009e7e:	bf00      	nop
 8009e80:	e0f4      	b.n	800a06c <UART_SetConfig+0x2c8>
 8009e82:	687b      	ldr	r3, [r7, #4]
 8009e84:	681b      	ldr	r3, [r3, #0]
 8009e86:	4a91      	ldr	r2, [pc, #580]	; (800a0cc <UART_SetConfig+0x328>)
 8009e88:	4293      	cmp	r3, r2
 8009e8a:	d138      	bne.n	8009efe <UART_SetConfig+0x15a>
 8009e8c:	4b8e      	ldr	r3, [pc, #568]	; (800a0c8 <UART_SetConfig+0x324>)
 8009e8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e92:	f003 030c 	and.w	r3, r3, #12
 8009e96:	2b0c      	cmp	r3, #12
 8009e98:	d82c      	bhi.n	8009ef4 <UART_SetConfig+0x150>
 8009e9a:	a201      	add	r2, pc, #4	; (adr r2, 8009ea0 <UART_SetConfig+0xfc>)
 8009e9c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009ea0:	08009ed5 	.word	0x08009ed5
 8009ea4:	08009ef5 	.word	0x08009ef5
 8009ea8:	08009ef5 	.word	0x08009ef5
 8009eac:	08009ef5 	.word	0x08009ef5
 8009eb0:	08009ee5 	.word	0x08009ee5
 8009eb4:	08009ef5 	.word	0x08009ef5
 8009eb8:	08009ef5 	.word	0x08009ef5
 8009ebc:	08009ef5 	.word	0x08009ef5
 8009ec0:	08009edd 	.word	0x08009edd
 8009ec4:	08009ef5 	.word	0x08009ef5
 8009ec8:	08009ef5 	.word	0x08009ef5
 8009ecc:	08009ef5 	.word	0x08009ef5
 8009ed0:	08009eed 	.word	0x08009eed
 8009ed4:	2300      	movs	r3, #0
 8009ed6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009eda:	e0c7      	b.n	800a06c <UART_SetConfig+0x2c8>
 8009edc:	2302      	movs	r3, #2
 8009ede:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009ee2:	e0c3      	b.n	800a06c <UART_SetConfig+0x2c8>
 8009ee4:	2304      	movs	r3, #4
 8009ee6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009eea:	e0bf      	b.n	800a06c <UART_SetConfig+0x2c8>
 8009eec:	2308      	movs	r3, #8
 8009eee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009ef2:	e0bb      	b.n	800a06c <UART_SetConfig+0x2c8>
 8009ef4:	2310      	movs	r3, #16
 8009ef6:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009efa:	bf00      	nop
 8009efc:	e0b6      	b.n	800a06c <UART_SetConfig+0x2c8>
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	4a73      	ldr	r2, [pc, #460]	; (800a0d0 <UART_SetConfig+0x32c>)
 8009f04:	4293      	cmp	r3, r2
 8009f06:	d125      	bne.n	8009f54 <UART_SetConfig+0x1b0>
 8009f08:	4b6f      	ldr	r3, [pc, #444]	; (800a0c8 <UART_SetConfig+0x324>)
 8009f0a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f0e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8009f12:	2b10      	cmp	r3, #16
 8009f14:	d011      	beq.n	8009f3a <UART_SetConfig+0x196>
 8009f16:	2b10      	cmp	r3, #16
 8009f18:	d802      	bhi.n	8009f20 <UART_SetConfig+0x17c>
 8009f1a:	2b00      	cmp	r3, #0
 8009f1c:	d005      	beq.n	8009f2a <UART_SetConfig+0x186>
 8009f1e:	e014      	b.n	8009f4a <UART_SetConfig+0x1a6>
 8009f20:	2b20      	cmp	r3, #32
 8009f22:	d006      	beq.n	8009f32 <UART_SetConfig+0x18e>
 8009f24:	2b30      	cmp	r3, #48	; 0x30
 8009f26:	d00c      	beq.n	8009f42 <UART_SetConfig+0x19e>
 8009f28:	e00f      	b.n	8009f4a <UART_SetConfig+0x1a6>
 8009f2a:	2300      	movs	r3, #0
 8009f2c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009f30:	e09c      	b.n	800a06c <UART_SetConfig+0x2c8>
 8009f32:	2302      	movs	r3, #2
 8009f34:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009f38:	e098      	b.n	800a06c <UART_SetConfig+0x2c8>
 8009f3a:	2304      	movs	r3, #4
 8009f3c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009f40:	e094      	b.n	800a06c <UART_SetConfig+0x2c8>
 8009f42:	2308      	movs	r3, #8
 8009f44:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009f48:	e090      	b.n	800a06c <UART_SetConfig+0x2c8>
 8009f4a:	2310      	movs	r3, #16
 8009f4c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009f50:	bf00      	nop
 8009f52:	e08b      	b.n	800a06c <UART_SetConfig+0x2c8>
 8009f54:	687b      	ldr	r3, [r7, #4]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	4a5e      	ldr	r2, [pc, #376]	; (800a0d4 <UART_SetConfig+0x330>)
 8009f5a:	4293      	cmp	r3, r2
 8009f5c:	d125      	bne.n	8009faa <UART_SetConfig+0x206>
 8009f5e:	4b5a      	ldr	r3, [pc, #360]	; (800a0c8 <UART_SetConfig+0x324>)
 8009f60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009f64:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8009f68:	2b40      	cmp	r3, #64	; 0x40
 8009f6a:	d011      	beq.n	8009f90 <UART_SetConfig+0x1ec>
 8009f6c:	2b40      	cmp	r3, #64	; 0x40
 8009f6e:	d802      	bhi.n	8009f76 <UART_SetConfig+0x1d2>
 8009f70:	2b00      	cmp	r3, #0
 8009f72:	d005      	beq.n	8009f80 <UART_SetConfig+0x1dc>
 8009f74:	e014      	b.n	8009fa0 <UART_SetConfig+0x1fc>
 8009f76:	2b80      	cmp	r3, #128	; 0x80
 8009f78:	d006      	beq.n	8009f88 <UART_SetConfig+0x1e4>
 8009f7a:	2bc0      	cmp	r3, #192	; 0xc0
 8009f7c:	d00c      	beq.n	8009f98 <UART_SetConfig+0x1f4>
 8009f7e:	e00f      	b.n	8009fa0 <UART_SetConfig+0x1fc>
 8009f80:	2300      	movs	r3, #0
 8009f82:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009f86:	e071      	b.n	800a06c <UART_SetConfig+0x2c8>
 8009f88:	2302      	movs	r3, #2
 8009f8a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009f8e:	e06d      	b.n	800a06c <UART_SetConfig+0x2c8>
 8009f90:	2304      	movs	r3, #4
 8009f92:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009f96:	e069      	b.n	800a06c <UART_SetConfig+0x2c8>
 8009f98:	2308      	movs	r3, #8
 8009f9a:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009f9e:	e065      	b.n	800a06c <UART_SetConfig+0x2c8>
 8009fa0:	2310      	movs	r3, #16
 8009fa2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009fa6:	bf00      	nop
 8009fa8:	e060      	b.n	800a06c <UART_SetConfig+0x2c8>
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	681b      	ldr	r3, [r3, #0]
 8009fae:	4a4a      	ldr	r2, [pc, #296]	; (800a0d8 <UART_SetConfig+0x334>)
 8009fb0:	4293      	cmp	r3, r2
 8009fb2:	d129      	bne.n	800a008 <UART_SetConfig+0x264>
 8009fb4:	4b44      	ldr	r3, [pc, #272]	; (800a0c8 <UART_SetConfig+0x324>)
 8009fb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009fba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009fbe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009fc2:	d014      	beq.n	8009fee <UART_SetConfig+0x24a>
 8009fc4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009fc8:	d802      	bhi.n	8009fd0 <UART_SetConfig+0x22c>
 8009fca:	2b00      	cmp	r3, #0
 8009fcc:	d007      	beq.n	8009fde <UART_SetConfig+0x23a>
 8009fce:	e016      	b.n	8009ffe <UART_SetConfig+0x25a>
 8009fd0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8009fd4:	d007      	beq.n	8009fe6 <UART_SetConfig+0x242>
 8009fd6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8009fda:	d00c      	beq.n	8009ff6 <UART_SetConfig+0x252>
 8009fdc:	e00f      	b.n	8009ffe <UART_SetConfig+0x25a>
 8009fde:	2300      	movs	r3, #0
 8009fe0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009fe4:	e042      	b.n	800a06c <UART_SetConfig+0x2c8>
 8009fe6:	2302      	movs	r3, #2
 8009fe8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009fec:	e03e      	b.n	800a06c <UART_SetConfig+0x2c8>
 8009fee:	2304      	movs	r3, #4
 8009ff0:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009ff4:	e03a      	b.n	800a06c <UART_SetConfig+0x2c8>
 8009ff6:	2308      	movs	r3, #8
 8009ff8:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 8009ffc:	e036      	b.n	800a06c <UART_SetConfig+0x2c8>
 8009ffe:	2310      	movs	r3, #16
 800a000:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a004:	bf00      	nop
 800a006:	e031      	b.n	800a06c <UART_SetConfig+0x2c8>
 800a008:	687b      	ldr	r3, [r7, #4]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	4a2c      	ldr	r2, [pc, #176]	; (800a0c0 <UART_SetConfig+0x31c>)
 800a00e:	4293      	cmp	r3, r2
 800a010:	d129      	bne.n	800a066 <UART_SetConfig+0x2c2>
 800a012:	4b2d      	ldr	r3, [pc, #180]	; (800a0c8 <UART_SetConfig+0x324>)
 800a014:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800a018:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800a01c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a020:	d014      	beq.n	800a04c <UART_SetConfig+0x2a8>
 800a022:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800a026:	d802      	bhi.n	800a02e <UART_SetConfig+0x28a>
 800a028:	2b00      	cmp	r3, #0
 800a02a:	d007      	beq.n	800a03c <UART_SetConfig+0x298>
 800a02c:	e016      	b.n	800a05c <UART_SetConfig+0x2b8>
 800a02e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a032:	d007      	beq.n	800a044 <UART_SetConfig+0x2a0>
 800a034:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800a038:	d00c      	beq.n	800a054 <UART_SetConfig+0x2b0>
 800a03a:	e00f      	b.n	800a05c <UART_SetConfig+0x2b8>
 800a03c:	2300      	movs	r3, #0
 800a03e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a042:	e013      	b.n	800a06c <UART_SetConfig+0x2c8>
 800a044:	2302      	movs	r3, #2
 800a046:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a04a:	e00f      	b.n	800a06c <UART_SetConfig+0x2c8>
 800a04c:	2304      	movs	r3, #4
 800a04e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a052:	e00b      	b.n	800a06c <UART_SetConfig+0x2c8>
 800a054:	2308      	movs	r3, #8
 800a056:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a05a:	e007      	b.n	800a06c <UART_SetConfig+0x2c8>
 800a05c:	2310      	movs	r3, #16
 800a05e:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
 800a062:	bf00      	nop
 800a064:	e002      	b.n	800a06c <UART_SetConfig+0x2c8>
 800a066:	2310      	movs	r3, #16
 800a068:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800a06c:	687b      	ldr	r3, [r7, #4]
 800a06e:	681b      	ldr	r3, [r3, #0]
 800a070:	4a13      	ldr	r2, [pc, #76]	; (800a0c0 <UART_SetConfig+0x31c>)
 800a072:	4293      	cmp	r3, r2
 800a074:	f040 80fe 	bne.w	800a274 <UART_SetConfig+0x4d0>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800a078:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a07c:	2b08      	cmp	r3, #8
 800a07e:	d837      	bhi.n	800a0f0 <UART_SetConfig+0x34c>
 800a080:	a201      	add	r2, pc, #4	; (adr r2, 800a088 <UART_SetConfig+0x2e4>)
 800a082:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a086:	bf00      	nop
 800a088:	0800a0ad 	.word	0x0800a0ad
 800a08c:	0800a0f1 	.word	0x0800a0f1
 800a090:	0800a0b5 	.word	0x0800a0b5
 800a094:	0800a0f1 	.word	0x0800a0f1
 800a098:	0800a0e1 	.word	0x0800a0e1
 800a09c:	0800a0f1 	.word	0x0800a0f1
 800a0a0:	0800a0f1 	.word	0x0800a0f1
 800a0a4:	0800a0f1 	.word	0x0800a0f1
 800a0a8:	0800a0e9 	.word	0x0800a0e9
    {
      case UART_CLOCKSOURCE_PCLK1:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetPCLK1Freq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetPCLK1Freq();
 800a0ac:	f7fe ff90 	bl	8008fd0 <HAL_RCC_GetPCLK1Freq>
 800a0b0:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800a0b2:	e020      	b.n	800a0f6 <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)HSI_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)HSI_VALUE;
 800a0b4:	4b09      	ldr	r3, [pc, #36]	; (800a0dc <UART_SetConfig+0x338>)
 800a0b6:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800a0b8:	e01d      	b.n	800a0f6 <UART_SetConfig+0x352>
 800a0ba:	bf00      	nop
 800a0bc:	efff69f3 	.word	0xefff69f3
 800a0c0:	40008000 	.word	0x40008000
 800a0c4:	40013800 	.word	0x40013800
 800a0c8:	40021000 	.word	0x40021000
 800a0cc:	40004400 	.word	0x40004400
 800a0d0:	40004800 	.word	0x40004800
 800a0d4:	40004c00 	.word	0x40004c00
 800a0d8:	40005000 	.word	0x40005000
 800a0dc:	00f42400 	.word	0x00f42400
      case UART_CLOCKSOURCE_SYSCLK:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = (HAL_RCC_GetSysClockFreq() / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = HAL_RCC_GetSysClockFreq();
 800a0e0:	f7fe fee0 	bl	8008ea4 <HAL_RCC_GetSysClockFreq>
 800a0e4:	6178      	str	r0, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800a0e6:	e006      	b.n	800a0f6 <UART_SetConfig+0x352>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        lpuart_ker_ck_pres = ((uint32_t)LSE_VALUE / UART_GET_DIV_FACTOR(huart->Init.ClockPrescaler));
#else
        lpuart_ker_ck_pres = (uint32_t)LSE_VALUE;
 800a0e8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800a0ec:	617b      	str	r3, [r7, #20]
#endif /* USART_PRESC_PRESCALER */
        break;
 800a0ee:	e002      	b.n	800a0f6 <UART_SetConfig+0x352>
      default:
        ret = HAL_ERROR;
 800a0f0:	2301      	movs	r3, #1
 800a0f2:	76fb      	strb	r3, [r7, #27]
        break;
 800a0f4:	bf00      	nop
    }

    /* if proper clock source reported */
    if (lpuart_ker_ck_pres != 0U)
 800a0f6:	697b      	ldr	r3, [r7, #20]
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	f000 81b9 	beq.w	800a470 <UART_SetConfig+0x6cc>
    {
      /* ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a0fe:	687b      	ldr	r3, [r7, #4]
 800a100:	685a      	ldr	r2, [r3, #4]
 800a102:	4613      	mov	r3, r2
 800a104:	005b      	lsls	r3, r3, #1
 800a106:	4413      	add	r3, r2
 800a108:	697a      	ldr	r2, [r7, #20]
 800a10a:	429a      	cmp	r2, r3
 800a10c:	d305      	bcc.n	800a11a <UART_SetConfig+0x376>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800a10e:	687b      	ldr	r3, [r7, #4]
 800a110:	685b      	ldr	r3, [r3, #4]
 800a112:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800a114:	697a      	ldr	r2, [r7, #20]
 800a116:	429a      	cmp	r2, r3
 800a118:	d902      	bls.n	800a120 <UART_SetConfig+0x37c>
      {
        ret = HAL_ERROR;
 800a11a:	2301      	movs	r3, #1
 800a11c:	76fb      	strb	r3, [r7, #27]
 800a11e:	e1a7      	b.n	800a470 <UART_SetConfig+0x6cc>
      }
      else
      {
        switch (clocksource)
 800a120:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a124:	2b08      	cmp	r3, #8
 800a126:	f200 8092 	bhi.w	800a24e <UART_SetConfig+0x4aa>
 800a12a:	a201      	add	r2, pc, #4	; (adr r2, 800a130 <UART_SetConfig+0x38c>)
 800a12c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a130:	0800a155 	.word	0x0800a155
 800a134:	0800a24f 	.word	0x0800a24f
 800a138:	0800a1a3 	.word	0x0800a1a3
 800a13c:	0800a24f 	.word	0x0800a24f
 800a140:	0800a1d7 	.word	0x0800a1d7
 800a144:	0800a24f 	.word	0x0800a24f
 800a148:	0800a24f 	.word	0x0800a24f
 800a14c:	0800a24f 	.word	0x0800a24f
 800a150:	0800a225 	.word	0x0800a225
        {
          case UART_CLOCKSOURCE_PCLK1:
            pclk = HAL_RCC_GetPCLK1Freq();
 800a154:	f7fe ff3c 	bl	8008fd0 <HAL_RCC_GetPCLK1Freq>
 800a158:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800a15a:	693b      	ldr	r3, [r7, #16]
 800a15c:	4619      	mov	r1, r3
 800a15e:	f04f 0200 	mov.w	r2, #0
 800a162:	f04f 0300 	mov.w	r3, #0
 800a166:	f04f 0400 	mov.w	r4, #0
 800a16a:	0214      	lsls	r4, r2, #8
 800a16c:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800a170:	020b      	lsls	r3, r1, #8
 800a172:	687a      	ldr	r2, [r7, #4]
 800a174:	6852      	ldr	r2, [r2, #4]
 800a176:	0852      	lsrs	r2, r2, #1
 800a178:	4611      	mov	r1, r2
 800a17a:	f04f 0200 	mov.w	r2, #0
 800a17e:	eb13 0b01 	adds.w	fp, r3, r1
 800a182:	eb44 0c02 	adc.w	ip, r4, r2
 800a186:	4658      	mov	r0, fp
 800a188:	4661      	mov	r1, ip
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	685b      	ldr	r3, [r3, #4]
 800a18e:	f04f 0400 	mov.w	r4, #0
 800a192:	461a      	mov	r2, r3
 800a194:	4623      	mov	r3, r4
 800a196:	f7fd f829 	bl	80071ec <__aeabi_uldivmod>
 800a19a:	4603      	mov	r3, r0
 800a19c:	460c      	mov	r4, r1
 800a19e:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 800a1a0:	e058      	b.n	800a254 <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(HSI_VALUE, huart->Init.BaudRate));
 800a1a2:	687b      	ldr	r3, [r7, #4]
 800a1a4:	685b      	ldr	r3, [r3, #4]
 800a1a6:	085b      	lsrs	r3, r3, #1
 800a1a8:	f04f 0400 	mov.w	r4, #0
 800a1ac:	49ae      	ldr	r1, [pc, #696]	; (800a468 <UART_SetConfig+0x6c4>)
 800a1ae:	f04f 0200 	mov.w	r2, #0
 800a1b2:	eb13 0b01 	adds.w	fp, r3, r1
 800a1b6:	eb44 0c02 	adc.w	ip, r4, r2
 800a1ba:	4658      	mov	r0, fp
 800a1bc:	4661      	mov	r1, ip
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	685b      	ldr	r3, [r3, #4]
 800a1c2:	f04f 0400 	mov.w	r4, #0
 800a1c6:	461a      	mov	r2, r3
 800a1c8:	4623      	mov	r3, r4
 800a1ca:	f7fd f80f 	bl	80071ec <__aeabi_uldivmod>
 800a1ce:	4603      	mov	r3, r0
 800a1d0:	460c      	mov	r4, r1
 800a1d2:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 800a1d4:	e03e      	b.n	800a254 <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_SYSCLK:
            pclk = HAL_RCC_GetSysClockFreq();
 800a1d6:	f7fe fe65 	bl	8008ea4 <HAL_RCC_GetSysClockFreq>
 800a1da:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800a1dc:	693b      	ldr	r3, [r7, #16]
 800a1de:	4619      	mov	r1, r3
 800a1e0:	f04f 0200 	mov.w	r2, #0
 800a1e4:	f04f 0300 	mov.w	r3, #0
 800a1e8:	f04f 0400 	mov.w	r4, #0
 800a1ec:	0214      	lsls	r4, r2, #8
 800a1ee:	ea44 6411 	orr.w	r4, r4, r1, lsr #24
 800a1f2:	020b      	lsls	r3, r1, #8
 800a1f4:	687a      	ldr	r2, [r7, #4]
 800a1f6:	6852      	ldr	r2, [r2, #4]
 800a1f8:	0852      	lsrs	r2, r2, #1
 800a1fa:	4611      	mov	r1, r2
 800a1fc:	f04f 0200 	mov.w	r2, #0
 800a200:	eb13 0b01 	adds.w	fp, r3, r1
 800a204:	eb44 0c02 	adc.w	ip, r4, r2
 800a208:	4658      	mov	r0, fp
 800a20a:	4661      	mov	r1, ip
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	685b      	ldr	r3, [r3, #4]
 800a210:	f04f 0400 	mov.w	r4, #0
 800a214:	461a      	mov	r2, r3
 800a216:	4623      	mov	r3, r4
 800a218:	f7fc ffe8 	bl	80071ec <__aeabi_uldivmod>
 800a21c:	4603      	mov	r3, r0
 800a21e:	460c      	mov	r4, r1
 800a220:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 800a222:	e017      	b.n	800a254 <UART_SetConfig+0x4b0>
          case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
            usartdiv = (uint32_t)(UART_DIV_LPUART(LSE_VALUE, huart->Init.BaudRate));
 800a224:	687b      	ldr	r3, [r7, #4]
 800a226:	685b      	ldr	r3, [r3, #4]
 800a228:	085b      	lsrs	r3, r3, #1
 800a22a:	f04f 0400 	mov.w	r4, #0
 800a22e:	f513 0000 	adds.w	r0, r3, #8388608	; 0x800000
 800a232:	f144 0100 	adc.w	r1, r4, #0
 800a236:	687b      	ldr	r3, [r7, #4]
 800a238:	685b      	ldr	r3, [r3, #4]
 800a23a:	f04f 0400 	mov.w	r4, #0
 800a23e:	461a      	mov	r2, r3
 800a240:	4623      	mov	r3, r4
 800a242:	f7fc ffd3 	bl	80071ec <__aeabi_uldivmod>
 800a246:	4603      	mov	r3, r0
 800a248:	460c      	mov	r4, r1
 800a24a:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
            break;
 800a24c:	e002      	b.n	800a254 <UART_SetConfig+0x4b0>
          default:
            ret = HAL_ERROR;
 800a24e:	2301      	movs	r3, #1
 800a250:	76fb      	strb	r3, [r7, #27]
            break;
 800a252:	bf00      	nop
        }

        /* It is forbidden to write values lower than 0x300 in the LPUART_BRR register */
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800a254:	69fb      	ldr	r3, [r7, #28]
 800a256:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800a25a:	d308      	bcc.n	800a26e <UART_SetConfig+0x4ca>
 800a25c:	69fb      	ldr	r3, [r7, #28]
 800a25e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a262:	d204      	bcs.n	800a26e <UART_SetConfig+0x4ca>
        {
          huart->Instance->BRR = usartdiv;
 800a264:	687b      	ldr	r3, [r7, #4]
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	69fa      	ldr	r2, [r7, #28]
 800a26a:	60da      	str	r2, [r3, #12]
 800a26c:	e100      	b.n	800a470 <UART_SetConfig+0x6cc>
        }
        else
        {
          ret = HAL_ERROR;
 800a26e:	2301      	movs	r3, #1
 800a270:	76fb      	strb	r3, [r7, #27]
 800a272:	e0fd      	b.n	800a470 <UART_SetConfig+0x6cc>
        }
      } /*   if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) || (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (lpuart_ker_ck_pres != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a274:	687b      	ldr	r3, [r7, #4]
 800a276:	69db      	ldr	r3, [r3, #28]
 800a278:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a27c:	f040 8084 	bne.w	800a388 <UART_SetConfig+0x5e4>
  {
    switch (clocksource)
 800a280:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a284:	2b08      	cmp	r3, #8
 800a286:	d85f      	bhi.n	800a348 <UART_SetConfig+0x5a4>
 800a288:	a201      	add	r2, pc, #4	; (adr r2, 800a290 <UART_SetConfig+0x4ec>)
 800a28a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a28e:	bf00      	nop
 800a290:	0800a2b5 	.word	0x0800a2b5
 800a294:	0800a2d5 	.word	0x0800a2d5
 800a298:	0800a2f5 	.word	0x0800a2f5
 800a29c:	0800a349 	.word	0x0800a349
 800a2a0:	0800a311 	.word	0x0800a311
 800a2a4:	0800a349 	.word	0x0800a349
 800a2a8:	0800a349 	.word	0x0800a349
 800a2ac:	0800a349 	.word	0x0800a349
 800a2b0:	0800a331 	.word	0x0800a331
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a2b4:	f7fe fe8c 	bl	8008fd0 <HAL_RCC_GetPCLK1Freq>
 800a2b8:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a2ba:	693b      	ldr	r3, [r7, #16]
 800a2bc:	005a      	lsls	r2, r3, #1
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	685b      	ldr	r3, [r3, #4]
 800a2c2:	085b      	lsrs	r3, r3, #1
 800a2c4:	441a      	add	r2, r3
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	685b      	ldr	r3, [r3, #4]
 800a2ca:	fbb2 f3f3 	udiv	r3, r2, r3
 800a2ce:	b29b      	uxth	r3, r3
 800a2d0:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800a2d2:	e03c      	b.n	800a34e <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a2d4:	f7fe fe92 	bl	8008ffc <HAL_RCC_GetPCLK2Freq>
 800a2d8:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a2da:	693b      	ldr	r3, [r7, #16]
 800a2dc:	005a      	lsls	r2, r3, #1
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	685b      	ldr	r3, [r3, #4]
 800a2e2:	085b      	lsrs	r3, r3, #1
 800a2e4:	441a      	add	r2, r3
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	685b      	ldr	r3, [r3, #4]
 800a2ea:	fbb2 f3f3 	udiv	r3, r2, r3
 800a2ee:	b29b      	uxth	r3, r3
 800a2f0:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800a2f2:	e02c      	b.n	800a34e <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(HSI_VALUE, huart->Init.BaudRate));
 800a2f4:	687b      	ldr	r3, [r7, #4]
 800a2f6:	685b      	ldr	r3, [r3, #4]
 800a2f8:	085b      	lsrs	r3, r3, #1
 800a2fa:	f103 73f4 	add.w	r3, r3, #31981568	; 0x1e80000
 800a2fe:	f503 4390 	add.w	r3, r3, #18432	; 0x4800
 800a302:	687a      	ldr	r2, [r7, #4]
 800a304:	6852      	ldr	r2, [r2, #4]
 800a306:	fbb3 f3f2 	udiv	r3, r3, r2
 800a30a:	b29b      	uxth	r3, r3
 800a30c:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800a30e:	e01e      	b.n	800a34e <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a310:	f7fe fdc8 	bl	8008ea4 <HAL_RCC_GetSysClockFreq>
 800a314:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800a316:	693b      	ldr	r3, [r7, #16]
 800a318:	005a      	lsls	r2, r3, #1
 800a31a:	687b      	ldr	r3, [r7, #4]
 800a31c:	685b      	ldr	r3, [r3, #4]
 800a31e:	085b      	lsrs	r3, r3, #1
 800a320:	441a      	add	r2, r3
 800a322:	687b      	ldr	r3, [r7, #4]
 800a324:	685b      	ldr	r3, [r3, #4]
 800a326:	fbb2 f3f3 	udiv	r3, r2, r3
 800a32a:	b29b      	uxth	r3, r3
 800a32c:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800a32e:	e00e      	b.n	800a34e <UART_SetConfig+0x5aa>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING8(LSE_VALUE, huart->Init.BaudRate));
 800a330:	687b      	ldr	r3, [r7, #4]
 800a332:	685b      	ldr	r3, [r3, #4]
 800a334:	085b      	lsrs	r3, r3, #1
 800a336:	f503 3280 	add.w	r2, r3, #65536	; 0x10000
 800a33a:	687b      	ldr	r3, [r7, #4]
 800a33c:	685b      	ldr	r3, [r3, #4]
 800a33e:	fbb2 f3f3 	udiv	r3, r2, r3
 800a342:	b29b      	uxth	r3, r3
 800a344:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800a346:	e002      	b.n	800a34e <UART_SetConfig+0x5aa>
      default:
        ret = HAL_ERROR;
 800a348:	2301      	movs	r3, #1
 800a34a:	76fb      	strb	r3, [r7, #27]
        break;
 800a34c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a34e:	69fb      	ldr	r3, [r7, #28]
 800a350:	2b0f      	cmp	r3, #15
 800a352:	d916      	bls.n	800a382 <UART_SetConfig+0x5de>
 800a354:	69fb      	ldr	r3, [r7, #28]
 800a356:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a35a:	d212      	bcs.n	800a382 <UART_SetConfig+0x5de>
    {
      brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800a35c:	69fb      	ldr	r3, [r7, #28]
 800a35e:	b29b      	uxth	r3, r3
 800a360:	f023 030f 	bic.w	r3, r3, #15
 800a364:	81fb      	strh	r3, [r7, #14]
      brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800a366:	69fb      	ldr	r3, [r7, #28]
 800a368:	085b      	lsrs	r3, r3, #1
 800a36a:	b29b      	uxth	r3, r3
 800a36c:	f003 0307 	and.w	r3, r3, #7
 800a370:	b29a      	uxth	r2, r3
 800a372:	89fb      	ldrh	r3, [r7, #14]
 800a374:	4313      	orrs	r3, r2
 800a376:	81fb      	strh	r3, [r7, #14]
      huart->Instance->BRR = brrtemp;
 800a378:	687b      	ldr	r3, [r7, #4]
 800a37a:	681b      	ldr	r3, [r3, #0]
 800a37c:	89fa      	ldrh	r2, [r7, #14]
 800a37e:	60da      	str	r2, [r3, #12]
 800a380:	e076      	b.n	800a470 <UART_SetConfig+0x6cc>
    }
    else
    {
      ret = HAL_ERROR;
 800a382:	2301      	movs	r3, #1
 800a384:	76fb      	strb	r3, [r7, #27]
 800a386:	e073      	b.n	800a470 <UART_SetConfig+0x6cc>
    }
  }
  else
  {
    switch (clocksource)
 800a388:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800a38c:	2b08      	cmp	r3, #8
 800a38e:	d85c      	bhi.n	800a44a <UART_SetConfig+0x6a6>
 800a390:	a201      	add	r2, pc, #4	; (adr r2, 800a398 <UART_SetConfig+0x5f4>)
 800a392:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a396:	bf00      	nop
 800a398:	0800a3bd 	.word	0x0800a3bd
 800a39c:	0800a3db 	.word	0x0800a3db
 800a3a0:	0800a3f9 	.word	0x0800a3f9
 800a3a4:	0800a44b 	.word	0x0800a44b
 800a3a8:	0800a415 	.word	0x0800a415
 800a3ac:	0800a44b 	.word	0x0800a44b
 800a3b0:	0800a44b 	.word	0x0800a44b
 800a3b4:	0800a44b 	.word	0x0800a44b
 800a3b8:	0800a433 	.word	0x0800a433
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800a3bc:	f7fe fe08 	bl	8008fd0 <HAL_RCC_GetPCLK1Freq>
 800a3c0:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	685b      	ldr	r3, [r3, #4]
 800a3c6:	085a      	lsrs	r2, r3, #1
 800a3c8:	693b      	ldr	r3, [r7, #16]
 800a3ca:	441a      	add	r2, r3
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	685b      	ldr	r3, [r3, #4]
 800a3d0:	fbb2 f3f3 	udiv	r3, r2, r3
 800a3d4:	b29b      	uxth	r3, r3
 800a3d6:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800a3d8:	e03a      	b.n	800a450 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800a3da:	f7fe fe0f 	bl	8008ffc <HAL_RCC_GetPCLK2Freq>
 800a3de:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a3e0:	687b      	ldr	r3, [r7, #4]
 800a3e2:	685b      	ldr	r3, [r3, #4]
 800a3e4:	085a      	lsrs	r2, r3, #1
 800a3e6:	693b      	ldr	r3, [r7, #16]
 800a3e8:	441a      	add	r2, r3
 800a3ea:	687b      	ldr	r3, [r7, #4]
 800a3ec:	685b      	ldr	r3, [r3, #4]
 800a3ee:	fbb2 f3f3 	udiv	r3, r2, r3
 800a3f2:	b29b      	uxth	r3, r3
 800a3f4:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800a3f6:	e02b      	b.n	800a450 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_HSI:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(HSI_VALUE, huart->Init.BaudRate));
 800a3f8:	687b      	ldr	r3, [r7, #4]
 800a3fa:	685b      	ldr	r3, [r3, #4]
 800a3fc:	085b      	lsrs	r3, r3, #1
 800a3fe:	f503 0374 	add.w	r3, r3, #15990784	; 0xf40000
 800a402:	f503 5310 	add.w	r3, r3, #9216	; 0x2400
 800a406:	687a      	ldr	r2, [r7, #4]
 800a408:	6852      	ldr	r2, [r2, #4]
 800a40a:	fbb3 f3f2 	udiv	r3, r3, r2
 800a40e:	b29b      	uxth	r3, r3
 800a410:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800a412:	e01d      	b.n	800a450 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800a414:	f7fe fd46 	bl	8008ea4 <HAL_RCC_GetSysClockFreq>
 800a418:	6138      	str	r0, [r7, #16]
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	685b      	ldr	r3, [r3, #4]
 800a41e:	085a      	lsrs	r2, r3, #1
 800a420:	693b      	ldr	r3, [r7, #16]
 800a422:	441a      	add	r2, r3
 800a424:	687b      	ldr	r3, [r7, #4]
 800a426:	685b      	ldr	r3, [r3, #4]
 800a428:	fbb2 f3f3 	udiv	r3, r2, r3
 800a42c:	b29b      	uxth	r3, r3
 800a42e:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800a430:	e00e      	b.n	800a450 <UART_SetConfig+0x6ac>
      case UART_CLOCKSOURCE_LSE:
#if defined(USART_PRESC_PRESCALER)
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16((uint32_t)LSE_VALUE, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
        usartdiv = (uint16_t)(UART_DIV_SAMPLING16(LSE_VALUE, huart->Init.BaudRate));
 800a432:	687b      	ldr	r3, [r7, #4]
 800a434:	685b      	ldr	r3, [r3, #4]
 800a436:	085b      	lsrs	r3, r3, #1
 800a438:	f503 4200 	add.w	r2, r3, #32768	; 0x8000
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	685b      	ldr	r3, [r3, #4]
 800a440:	fbb2 f3f3 	udiv	r3, r2, r3
 800a444:	b29b      	uxth	r3, r3
 800a446:	61fb      	str	r3, [r7, #28]
#endif /* USART_PRESC_PRESCALER */
        break;
 800a448:	e002      	b.n	800a450 <UART_SetConfig+0x6ac>
      default:
        ret = HAL_ERROR;
 800a44a:	2301      	movs	r3, #1
 800a44c:	76fb      	strb	r3, [r7, #27]
        break;
 800a44e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800a450:	69fb      	ldr	r3, [r7, #28]
 800a452:	2b0f      	cmp	r3, #15
 800a454:	d90a      	bls.n	800a46c <UART_SetConfig+0x6c8>
 800a456:	69fb      	ldr	r3, [r7, #28]
 800a458:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a45c:	d206      	bcs.n	800a46c <UART_SetConfig+0x6c8>
    {
      huart->Instance->BRR = usartdiv;
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	681b      	ldr	r3, [r3, #0]
 800a462:	69fa      	ldr	r2, [r7, #28]
 800a464:	60da      	str	r2, [r3, #12]
 800a466:	e003      	b.n	800a470 <UART_SetConfig+0x6cc>
 800a468:	f4240000 	.word	0xf4240000
    }
    else
    {
      ret = HAL_ERROR;
 800a46c:	2301      	movs	r3, #1
 800a46e:	76fb      	strb	r3, [r7, #27]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800a470:	687b      	ldr	r3, [r7, #4]
 800a472:	2200      	movs	r2, #0
 800a474:	661a      	str	r2, [r3, #96]	; 0x60
  huart->TxISR = NULL;
 800a476:	687b      	ldr	r3, [r7, #4]
 800a478:	2200      	movs	r2, #0
 800a47a:	665a      	str	r2, [r3, #100]	; 0x64

  return ret;
 800a47c:	7efb      	ldrb	r3, [r7, #27]
}
 800a47e:	4618      	mov	r0, r3
 800a480:	3728      	adds	r7, #40	; 0x28
 800a482:	46bd      	mov	sp, r7
 800a484:	e8bd 8890 	ldmia.w	sp!, {r4, r7, fp, pc}

0800a488 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800a488:	b480      	push	{r7}
 800a48a:	b083      	sub	sp, #12
 800a48c:	af00      	add	r7, sp, #0
 800a48e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a494:	f003 0301 	and.w	r3, r3, #1
 800a498:	2b00      	cmp	r3, #0
 800a49a:	d00a      	beq.n	800a4b2 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800a49c:	687b      	ldr	r3, [r7, #4]
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	685b      	ldr	r3, [r3, #4]
 800a4a2:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800a4a6:	687b      	ldr	r3, [r7, #4]
 800a4a8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800a4aa:	687b      	ldr	r3, [r7, #4]
 800a4ac:	681b      	ldr	r3, [r3, #0]
 800a4ae:	430a      	orrs	r2, r1
 800a4b0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4b6:	f003 0302 	and.w	r3, r3, #2
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	d00a      	beq.n	800a4d4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800a4be:	687b      	ldr	r3, [r7, #4]
 800a4c0:	681b      	ldr	r3, [r3, #0]
 800a4c2:	685b      	ldr	r3, [r3, #4]
 800a4c4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800a4c8:	687b      	ldr	r3, [r7, #4]
 800a4ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	430a      	orrs	r2, r1
 800a4d2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4d8:	f003 0304 	and.w	r3, r3, #4
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d00a      	beq.n	800a4f6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	685b      	ldr	r3, [r3, #4]
 800a4e6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	430a      	orrs	r2, r1
 800a4f4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800a4f6:	687b      	ldr	r3, [r7, #4]
 800a4f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a4fa:	f003 0308 	and.w	r3, r3, #8
 800a4fe:	2b00      	cmp	r3, #0
 800a500:	d00a      	beq.n	800a518 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800a502:	687b      	ldr	r3, [r7, #4]
 800a504:	681b      	ldr	r3, [r3, #0]
 800a506:	685b      	ldr	r3, [r3, #4]
 800a508:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800a50c:	687b      	ldr	r3, [r7, #4]
 800a50e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	681b      	ldr	r3, [r3, #0]
 800a514:	430a      	orrs	r2, r1
 800a516:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a51c:	f003 0310 	and.w	r3, r3, #16
 800a520:	2b00      	cmp	r3, #0
 800a522:	d00a      	beq.n	800a53a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800a524:	687b      	ldr	r3, [r7, #4]
 800a526:	681b      	ldr	r3, [r3, #0]
 800a528:	689b      	ldr	r3, [r3, #8]
 800a52a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800a52e:	687b      	ldr	r3, [r7, #4]
 800a530:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	430a      	orrs	r2, r1
 800a538:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800a53a:	687b      	ldr	r3, [r7, #4]
 800a53c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a53e:	f003 0320 	and.w	r3, r3, #32
 800a542:	2b00      	cmp	r3, #0
 800a544:	d00a      	beq.n	800a55c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	681b      	ldr	r3, [r3, #0]
 800a54a:	689b      	ldr	r3, [r3, #8]
 800a54c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	430a      	orrs	r2, r1
 800a55a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a560:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a564:	2b00      	cmp	r3, #0
 800a566:	d01a      	beq.n	800a59e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800a568:	687b      	ldr	r3, [r7, #4]
 800a56a:	681b      	ldr	r3, [r3, #0]
 800a56c:	685b      	ldr	r3, [r3, #4]
 800a56e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	430a      	orrs	r2, r1
 800a57c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a582:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800a586:	d10a      	bne.n	800a59e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	681b      	ldr	r3, [r3, #0]
 800a58c:	685b      	ldr	r3, [r3, #4]
 800a58e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800a596:	687b      	ldr	r3, [r7, #4]
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	430a      	orrs	r2, r1
 800a59c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a5a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a5a6:	2b00      	cmp	r3, #0
 800a5a8:	d00a      	beq.n	800a5c0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	685b      	ldr	r3, [r3, #4]
 800a5b0:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800a5b4:	687b      	ldr	r3, [r7, #4]
 800a5b6:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	430a      	orrs	r2, r1
 800a5be:	605a      	str	r2, [r3, #4]
  }
}
 800a5c0:	bf00      	nop
 800a5c2:	370c      	adds	r7, #12
 800a5c4:	46bd      	mov	sp, r7
 800a5c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5ca:	4770      	bx	lr

0800a5cc <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800a5cc:	b580      	push	{r7, lr}
 800a5ce:	b086      	sub	sp, #24
 800a5d0:	af02      	add	r7, sp, #8
 800a5d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a5d4:	687b      	ldr	r3, [r7, #4]
 800a5d6:	2200      	movs	r2, #0
 800a5d8:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Init tickstart for timeout managment*/
  tickstart = HAL_GetTick();
 800a5da:	f7fd fbb3 	bl	8007d44 <HAL_GetTick>
 800a5de:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	681b      	ldr	r3, [r3, #0]
 800a5e6:	f003 0308 	and.w	r3, r3, #8
 800a5ea:	2b08      	cmp	r3, #8
 800a5ec:	d10e      	bne.n	800a60c <UART_CheckIdleState+0x40>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a5ee:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a5f2:	9300      	str	r3, [sp, #0]
 800a5f4:	68fb      	ldr	r3, [r7, #12]
 800a5f6:	2200      	movs	r2, #0
 800a5f8:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a5fc:	6878      	ldr	r0, [r7, #4]
 800a5fe:	f000 f82a 	bl	800a656 <UART_WaitOnFlagUntilTimeout>
 800a602:	4603      	mov	r3, r0
 800a604:	2b00      	cmp	r3, #0
 800a606:	d001      	beq.n	800a60c <UART_CheckIdleState+0x40>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a608:	2303      	movs	r3, #3
 800a60a:	e020      	b.n	800a64e <UART_CheckIdleState+0x82>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	f003 0304 	and.w	r3, r3, #4
 800a616:	2b04      	cmp	r3, #4
 800a618:	d10e      	bne.n	800a638 <UART_CheckIdleState+0x6c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800a61a:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800a61e:	9300      	str	r3, [sp, #0]
 800a620:	68fb      	ldr	r3, [r7, #12]
 800a622:	2200      	movs	r2, #0
 800a624:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 800a628:	6878      	ldr	r0, [r7, #4]
 800a62a:	f000 f814 	bl	800a656 <UART_WaitOnFlagUntilTimeout>
 800a62e:	4603      	mov	r3, r0
 800a630:	2b00      	cmp	r3, #0
 800a632:	d001      	beq.n	800a638 <UART_CheckIdleState+0x6c>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800a634:	2303      	movs	r3, #3
 800a636:	e00a      	b.n	800a64e <UART_CheckIdleState+0x82>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	2220      	movs	r2, #32
 800a63c:	675a      	str	r2, [r3, #116]	; 0x74
  huart->RxState = HAL_UART_STATE_READY;
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	2220      	movs	r2, #32
 800a642:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UNLOCK(huart);
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	2200      	movs	r2, #0
 800a648:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

  return HAL_OK;
 800a64c:	2300      	movs	r3, #0
}
 800a64e:	4618      	mov	r0, r3
 800a650:	3710      	adds	r7, #16
 800a652:	46bd      	mov	sp, r7
 800a654:	bd80      	pop	{r7, pc}

0800a656 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800a656:	b580      	push	{r7, lr}
 800a658:	b084      	sub	sp, #16
 800a65a:	af00      	add	r7, sp, #0
 800a65c:	60f8      	str	r0, [r7, #12]
 800a65e:	60b9      	str	r1, [r7, #8]
 800a660:	603b      	str	r3, [r7, #0]
 800a662:	4613      	mov	r3, r2
 800a664:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a666:	e05d      	b.n	800a724 <UART_WaitOnFlagUntilTimeout+0xce>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a668:	69bb      	ldr	r3, [r7, #24]
 800a66a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a66e:	d059      	beq.n	800a724 <UART_WaitOnFlagUntilTimeout+0xce>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800a670:	f7fd fb68 	bl	8007d44 <HAL_GetTick>
 800a674:	4602      	mov	r2, r0
 800a676:	683b      	ldr	r3, [r7, #0]
 800a678:	1ad3      	subs	r3, r2, r3
 800a67a:	69ba      	ldr	r2, [r7, #24]
 800a67c:	429a      	cmp	r2, r3
 800a67e:	d302      	bcc.n	800a686 <UART_WaitOnFlagUntilTimeout+0x30>
 800a680:	69bb      	ldr	r3, [r7, #24]
 800a682:	2b00      	cmp	r3, #0
 800a684:	d11b      	bne.n	800a6be <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	681b      	ldr	r3, [r3, #0]
 800a68a:	681a      	ldr	r2, [r3, #0]
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	681b      	ldr	r3, [r3, #0]
 800a690:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a694:	601a      	str	r2, [r3, #0]
#endif /* USART_CR1_FIFOEN */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a696:	68fb      	ldr	r3, [r7, #12]
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	689a      	ldr	r2, [r3, #8]
 800a69c:	68fb      	ldr	r3, [r7, #12]
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	f022 0201 	bic.w	r2, r2, #1
 800a6a4:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 800a6a6:	68fb      	ldr	r3, [r7, #12]
 800a6a8:	2220      	movs	r2, #32
 800a6aa:	675a      	str	r2, [r3, #116]	; 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800a6ac:	68fb      	ldr	r3, [r7, #12]
 800a6ae:	2220      	movs	r2, #32
 800a6b0:	679a      	str	r2, [r3, #120]	; 0x78

        __HAL_UNLOCK(huart);
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	2200      	movs	r2, #0
 800a6b6:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70

        return HAL_TIMEOUT;
 800a6ba:	2303      	movs	r3, #3
 800a6bc:	e042      	b.n	800a744 <UART_WaitOnFlagUntilTimeout+0xee>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	681b      	ldr	r3, [r3, #0]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	f003 0304 	and.w	r3, r3, #4
 800a6c8:	2b00      	cmp	r3, #0
 800a6ca:	d02b      	beq.n	800a724 <UART_WaitOnFlagUntilTimeout+0xce>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800a6cc:	68fb      	ldr	r3, [r7, #12]
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	69db      	ldr	r3, [r3, #28]
 800a6d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800a6d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800a6da:	d123      	bne.n	800a724 <UART_WaitOnFlagUntilTimeout+0xce>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	681b      	ldr	r3, [r3, #0]
 800a6e0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800a6e4:	621a      	str	r2, [r3, #32]
          
          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_TXEIE_TXFNFIE));
#else
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a6e6:	68fb      	ldr	r3, [r7, #12]
 800a6e8:	681b      	ldr	r3, [r3, #0]
 800a6ea:	681a      	ldr	r2, [r3, #0]
 800a6ec:	68fb      	ldr	r3, [r7, #12]
 800a6ee:	681b      	ldr	r3, [r3, #0]
 800a6f0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800a6f4:	601a      	str	r2, [r3, #0]
#endif
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a6f6:	68fb      	ldr	r3, [r7, #12]
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	689a      	ldr	r2, [r3, #8]
 800a6fc:	68fb      	ldr	r3, [r7, #12]
 800a6fe:	681b      	ldr	r3, [r3, #0]
 800a700:	f022 0201 	bic.w	r2, r2, #1
 800a704:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800a706:	68fb      	ldr	r3, [r7, #12]
 800a708:	2220      	movs	r2, #32
 800a70a:	675a      	str	r2, [r3, #116]	; 0x74
          huart->RxState = HAL_UART_STATE_READY;
 800a70c:	68fb      	ldr	r3, [r7, #12]
 800a70e:	2220      	movs	r2, #32
 800a710:	679a      	str	r2, [r3, #120]	; 0x78
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800a712:	68fb      	ldr	r3, [r7, #12]
 800a714:	2220      	movs	r2, #32
 800a716:	67da      	str	r2, [r3, #124]	; 0x7c
          
          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800a718:	68fb      	ldr	r3, [r7, #12]
 800a71a:	2200      	movs	r2, #0
 800a71c:	f883 2070 	strb.w	r2, [r3, #112]	; 0x70
          
          return HAL_TIMEOUT;
 800a720:	2303      	movs	r3, #3
 800a722:	e00f      	b.n	800a744 <UART_WaitOnFlagUntilTimeout+0xee>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a724:	68fb      	ldr	r3, [r7, #12]
 800a726:	681b      	ldr	r3, [r3, #0]
 800a728:	69da      	ldr	r2, [r3, #28]
 800a72a:	68bb      	ldr	r3, [r7, #8]
 800a72c:	4013      	ands	r3, r2
 800a72e:	68ba      	ldr	r2, [r7, #8]
 800a730:	429a      	cmp	r2, r3
 800a732:	bf0c      	ite	eq
 800a734:	2301      	moveq	r3, #1
 800a736:	2300      	movne	r3, #0
 800a738:	b2db      	uxtb	r3, r3
 800a73a:	461a      	mov	r2, r3
 800a73c:	79fb      	ldrb	r3, [r7, #7]
 800a73e:	429a      	cmp	r2, r3
 800a740:	d092      	beq.n	800a668 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800a742:	2300      	movs	r3, #0
}
 800a744:	4618      	mov	r0, r3
 800a746:	3710      	adds	r7, #16
 800a748:	46bd      	mov	sp, r7
 800a74a:	bd80      	pop	{r7, pc}

0800a74c <aiInit>:

/*
 * Init function to create and initialize a NN.
 */
int aiInit(const ai_u8* activations)
{
 800a74c:	b580      	push	{r7, lr}
 800a74e:	b090      	sub	sp, #64	; 0x40
 800a750:	af00      	add	r7, sp, #0
 800a752:	6078      	str	r0, [r7, #4]
    ai_error err;

    /* 1 - Specific AI data structure to provide the references of the
     * activation/working memory chunk and the weights/bias parameters */
    const ai_network_params params = {
 800a754:	4b28      	ldr	r3, [pc, #160]	; (800a7f8 <aiInit+0xac>)
 800a756:	60fb      	str	r3, [r7, #12]
 800a758:	2301      	movs	r3, #1
 800a75a:	823b      	strh	r3, [r7, #16]
 800a75c:	2301      	movs	r3, #1
 800a75e:	827b      	strh	r3, [r7, #18]
 800a760:	2301      	movs	r3, #1
 800a762:	82bb      	strh	r3, [r7, #20]
 800a764:	4b25      	ldr	r3, [pc, #148]	; (800a7fc <aiInit+0xb0>)
 800a766:	61bb      	str	r3, [r7, #24]
            AI_KERAS_N_BN_DATA_WEIGHTS(ai_keras_n_bn_data_weights_get()),
 800a768:	f000 fb14 	bl	800ad94 <ai_keras_n_bn_data_weights_get>
 800a76c:	4603      	mov	r3, r0
    const ai_network_params params = {
 800a76e:	61fb      	str	r3, [r7, #28]
 800a770:	2300      	movs	r3, #0
 800a772:	623b      	str	r3, [r7, #32]
 800a774:	4b22      	ldr	r3, [pc, #136]	; (800a800 <aiInit+0xb4>)
 800a776:	627b      	str	r3, [r7, #36]	; 0x24
 800a778:	2301      	movs	r3, #1
 800a77a:	853b      	strh	r3, [r7, #40]	; 0x28
 800a77c:	2301      	movs	r3, #1
 800a77e:	857b      	strh	r3, [r7, #42]	; 0x2a
 800a780:	2301      	movs	r3, #1
 800a782:	85bb      	strh	r3, [r7, #44]	; 0x2c
 800a784:	f642 63b8 	movw	r3, #11960	; 0x2eb8
 800a788:	633b      	str	r3, [r7, #48]	; 0x30
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	637b      	str	r3, [r7, #52]	; 0x34
 800a78e:	2300      	movs	r3, #0
 800a790:	63bb      	str	r3, [r7, #56]	; 0x38
            AI_KERAS_N_BN_DATA_ACTIVATIONS(activations)
    };

    /* 2 - Create an instance of the NN */
    err = ai_keras_n_bn_create(&keras_n_bn, AI_KERAS_N_BN_DATA_CONFIG);
 800a792:	2100      	movs	r1, #0
 800a794:	481b      	ldr	r0, [pc, #108]	; (800a804 <aiInit+0xb8>)
 800a796:	f000 fa97 	bl	800acc8 <ai_keras_n_bn_create>
 800a79a:	4603      	mov	r3, r0
 800a79c:	63fb      	str	r3, [r7, #60]	; 0x3c
    if (err.type != AI_ERROR_NONE) {
 800a79e:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 800a7a2:	2b00      	cmp	r3, #0
 800a7a4:	d002      	beq.n	800a7ac <aiInit+0x60>
	    return -1;
 800a7a6:	f04f 33ff 	mov.w	r3, #4294967295
 800a7aa:	e020      	b.n	800a7ee <aiInit+0xa2>
    }

    /* 3 - Initialize the NN - Ready to be used */
    if (!ai_keras_n_bn_init(keras_n_bn, &params)) {
 800a7ac:	4b15      	ldr	r3, [pc, #84]	; (800a804 <aiInit+0xb8>)
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	f107 020c 	add.w	r2, r7, #12
 800a7b4:	4611      	mov	r1, r2
 800a7b6:	4618      	mov	r0, r3
 800a7b8:	f000 faa8 	bl	800ad0c <ai_keras_n_bn_init>
 800a7bc:	4603      	mov	r3, r0
 800a7be:	f083 0301 	eor.w	r3, r3, #1
 800a7c2:	b2db      	uxtb	r3, r3
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d011      	beq.n	800a7ec <aiInit+0xa0>
        err = ai_keras_n_bn_get_error(keras_n_bn);
 800a7c8:	4b0e      	ldr	r3, [pc, #56]	; (800a804 <aiInit+0xb8>)
 800a7ca:	681b      	ldr	r3, [r3, #0]
 800a7cc:	4618      	mov	r0, r3
 800a7ce:	f000 fa6f 	bl	800acb0 <ai_keras_n_bn_get_error>
 800a7d2:	4603      	mov	r3, r0
 800a7d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        ai_keras_n_bn_destroy(keras_n_bn);
 800a7d6:	4b0b      	ldr	r3, [pc, #44]	; (800a804 <aiInit+0xb8>)
 800a7d8:	681b      	ldr	r3, [r3, #0]
 800a7da:	4618      	mov	r0, r3
 800a7dc:	f000 fa8a 	bl	800acf4 <ai_keras_n_bn_destroy>
        keras_n_bn = AI_HANDLE_NULL;
 800a7e0:	4b08      	ldr	r3, [pc, #32]	; (800a804 <aiInit+0xb8>)
 800a7e2:	2200      	movs	r2, #0
 800a7e4:	601a      	str	r2, [r3, #0]
	    return -2;
 800a7e6:	f06f 0301 	mvn.w	r3, #1
 800a7ea:	e000      	b.n	800a7ee <aiInit+0xa2>
    }

    return 0;
 800a7ec:	2300      	movs	r3, #0
}
 800a7ee:	4618      	mov	r0, r3
 800a7f0:	3740      	adds	r7, #64	; 0x40
 800a7f2:	46bd      	mov	sp, r7
 800a7f4:	bd80      	pop	{r7, pc}
 800a7f6:	bf00      	nop
 800a7f8:	40040440 	.word	0x40040440
 800a7fc:	00064fd4 	.word	0x00064fd4
 800a800:	00040440 	.word	0x00040440
 800a804:	20000e84 	.word	0x20000e84

0800a808 <aiRun>:

/*
 * Run function to execute an inference.
 */
int aiRun(const void *in_data, void *out_data)
{
 800a808:	b580      	push	{r7, lr}
 800a80a:	b084      	sub	sp, #16
 800a80c:	af00      	add	r7, sp, #0
 800a80e:	6078      	str	r0, [r7, #4]
 800a810:	6039      	str	r1, [r7, #0]
    ai_i32 nbatch;
    ai_error err;

    /* Parameters checking */
    if (!in_data || !out_data || !keras_n_bn)
 800a812:	687b      	ldr	r3, [r7, #4]
 800a814:	2b00      	cmp	r3, #0
 800a816:	d006      	beq.n	800a826 <aiRun+0x1e>
 800a818:	683b      	ldr	r3, [r7, #0]
 800a81a:	2b00      	cmp	r3, #0
 800a81c:	d003      	beq.n	800a826 <aiRun+0x1e>
 800a81e:	4b17      	ldr	r3, [pc, #92]	; (800a87c <aiRun+0x74>)
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	2b00      	cmp	r3, #0
 800a824:	d102      	bne.n	800a82c <aiRun+0x24>
        return -1;
 800a826:	f04f 33ff 	mov.w	r3, #4294967295
 800a82a:	e022      	b.n	800a872 <aiRun+0x6a>

    /* Initialize input/output buffer handlers */
    ai_input[0].n_batches = 1;
 800a82c:	4b14      	ldr	r3, [pc, #80]	; (800a880 <aiRun+0x78>)
 800a82e:	2201      	movs	r2, #1
 800a830:	809a      	strh	r2, [r3, #4]
    ai_input[0].data = AI_HANDLE_PTR(in_data);
 800a832:	4a13      	ldr	r2, [pc, #76]	; (800a880 <aiRun+0x78>)
 800a834:	687b      	ldr	r3, [r7, #4]
 800a836:	6113      	str	r3, [r2, #16]
    ai_output[0].n_batches = 1;
 800a838:	4b12      	ldr	r3, [pc, #72]	; (800a884 <aiRun+0x7c>)
 800a83a:	2201      	movs	r2, #1
 800a83c:	809a      	strh	r2, [r3, #4]
    ai_output[0].data = AI_HANDLE_PTR(out_data);
 800a83e:	4a11      	ldr	r2, [pc, #68]	; (800a884 <aiRun+0x7c>)
 800a840:	683b      	ldr	r3, [r7, #0]
 800a842:	6113      	str	r3, [r2, #16]

    /* 2 - Perform the inference */
    nbatch = ai_keras_n_bn_run(keras_n_bn, &ai_input[0], &ai_output[0]);
 800a844:	4b0d      	ldr	r3, [pc, #52]	; (800a87c <aiRun+0x74>)
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	4a0e      	ldr	r2, [pc, #56]	; (800a884 <aiRun+0x7c>)
 800a84a:	490d      	ldr	r1, [pc, #52]	; (800a880 <aiRun+0x78>)
 800a84c:	4618      	mov	r0, r3
 800a84e:	f000 fa90 	bl	800ad72 <ai_keras_n_bn_run>
 800a852:	60f8      	str	r0, [r7, #12]
    if (nbatch != 1) {
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	2b01      	cmp	r3, #1
 800a858:	d00a      	beq.n	800a870 <aiRun+0x68>
        err = ai_keras_n_bn_get_error(keras_n_bn);
 800a85a:	4b08      	ldr	r3, [pc, #32]	; (800a87c <aiRun+0x74>)
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	4618      	mov	r0, r3
 800a860:	f000 fa26 	bl	800acb0 <ai_keras_n_bn_get_error>
 800a864:	4603      	mov	r3, r0
 800a866:	60bb      	str	r3, [r7, #8]
        // ...
        return err.code;
 800a868:	68bb      	ldr	r3, [r7, #8]
 800a86a:	f3c3 2317 	ubfx	r3, r3, #8, #24
 800a86e:	e000      	b.n	800a872 <aiRun+0x6a>
    }

    return 0;
 800a870:	2300      	movs	r3, #0
}
 800a872:	4618      	mov	r0, r3
 800a874:	3710      	adds	r7, #16
 800a876:	46bd      	mov	sp, r7
 800a878:	bd80      	pop	{r7, pc}
 800a87a:	bf00      	nop
 800a87c:	20000e84 	.word	0x20000e84
 800a880:	2000000c 	.word	0x2000000c
 800a884:	20000024 	.word	0x20000024

0800a888 <MX_X_CUBE_AI_Init>:

/*************************************************************************
  *
  */
void MX_X_CUBE_AI_Init(void)
{
 800a888:	b580      	push	{r7, lr}
 800a88a:	af00      	add	r7, sp, #0
    /* Activation/working buffer is allocated as a static memory chunk
     * (bss section) */
    AI_ALIGNED(4)
    static ai_u8 activations[AI_KERAS_N_BN_DATA_ACTIVATIONS_SIZE];

    aiInit(activations);
 800a88c:	4802      	ldr	r0, [pc, #8]	; (800a898 <MX_X_CUBE_AI_Init+0x10>)
 800a88e:	f7ff ff5d 	bl	800a74c <aiInit>
    /* USER CODE END 0 */
}
 800a892:	bf00      	nop
 800a894:	bd80      	pop	{r7, pc}
 800a896:	bf00      	nop
 800a898:	20000e88 	.word	0x20000e88

0800a89c <keras_n_bn_configure_activations>:


AI_DECLARE_STATIC
ai_bool keras_n_bn_configure_activations(
  ai_network* net_ctx, const ai_buffer* activation_buffer)
{
 800a89c:	b480      	push	{r7}
 800a89e:	b085      	sub	sp, #20
 800a8a0:	af00      	add	r7, sp, #0
 800a8a2:	6078      	str	r0, [r7, #4]
 800a8a4:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx &&  activation_buffer && activation_buffer->data)

  ai_ptr activations = AI_PTR(AI_PTR_ALIGN(activation_buffer->data, 4));
 800a8a6:	683b      	ldr	r3, [r7, #0]
 800a8a8:	691b      	ldr	r3, [r3, #16]
 800a8aa:	3303      	adds	r3, #3
 800a8ac:	f023 0303 	bic.w	r3, r3, #3
 800a8b0:	60fb      	str	r3, [r7, #12]
  AI_ASSERT(activations)
  AI_UNUSED(net_ctx)

  {
    /* Updating activations (byte) offsets */
    conv2d_6_scratch0_array.data = AI_PTR(activations + 7960);
 800a8b2:	68fb      	ldr	r3, [r7, #12]
 800a8b4:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 800a8b8:	3318      	adds	r3, #24
 800a8ba:	4a47      	ldr	r2, [pc, #284]	; (800a9d8 <keras_n_bn_configure_activations+0x13c>)
 800a8bc:	6093      	str	r3, [r2, #8]
    conv2d_6_scratch0_array.data_start = AI_PTR(activations + 7960);
 800a8be:	68fb      	ldr	r3, [r7, #12]
 800a8c0:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 800a8c4:	3318      	adds	r3, #24
 800a8c6:	4a44      	ldr	r2, [pc, #272]	; (800a9d8 <keras_n_bn_configure_activations+0x13c>)
 800a8c8:	60d3      	str	r3, [r2, #12]
    conv2d_5_scratch0_array.data = AI_PTR(activations + 7960);
 800a8ca:	68fb      	ldr	r3, [r7, #12]
 800a8cc:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 800a8d0:	3318      	adds	r3, #24
 800a8d2:	4a42      	ldr	r2, [pc, #264]	; (800a9dc <keras_n_bn_configure_activations+0x140>)
 800a8d4:	6093      	str	r3, [r2, #8]
    conv2d_5_scratch0_array.data_start = AI_PTR(activations + 7960);
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 800a8dc:	3318      	adds	r3, #24
 800a8de:	4a3f      	ldr	r2, [pc, #252]	; (800a9dc <keras_n_bn_configure_activations+0x140>)
 800a8e0:	60d3      	str	r3, [r2, #12]
    conv2d_4_scratch0_array.data = AI_PTR(activations + 7960);
 800a8e2:	68fb      	ldr	r3, [r7, #12]
 800a8e4:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 800a8e8:	3318      	adds	r3, #24
 800a8ea:	4a3d      	ldr	r2, [pc, #244]	; (800a9e0 <keras_n_bn_configure_activations+0x144>)
 800a8ec:	6093      	str	r3, [r2, #8]
    conv2d_4_scratch0_array.data_start = AI_PTR(activations + 7960);
 800a8ee:	68fb      	ldr	r3, [r7, #12]
 800a8f0:	f503 53f8 	add.w	r3, r3, #7936	; 0x1f00
 800a8f4:	3318      	adds	r3, #24
 800a8f6:	4a3a      	ldr	r2, [pc, #232]	; (800a9e0 <keras_n_bn_configure_activations+0x144>)
 800a8f8:	60d3      	str	r3, [r2, #12]
    input_0_output_array.data = AI_PTR(NULL);
 800a8fa:	4b3a      	ldr	r3, [pc, #232]	; (800a9e4 <keras_n_bn_configure_activations+0x148>)
 800a8fc:	2200      	movs	r2, #0
 800a8fe:	609a      	str	r2, [r3, #8]
    input_0_output_array.data_start = AI_PTR(NULL);
 800a900:	4b38      	ldr	r3, [pc, #224]	; (800a9e4 <keras_n_bn_configure_activations+0x148>)
 800a902:	2200      	movs	r2, #0
 800a904:	60da      	str	r2, [r3, #12]
    conv2d_4_output_array.data = AI_PTR(activations + 1200);
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	f503 6396 	add.w	r3, r3, #1200	; 0x4b0
 800a90c:	4a36      	ldr	r2, [pc, #216]	; (800a9e8 <keras_n_bn_configure_activations+0x14c>)
 800a90e:	6093      	str	r3, [r2, #8]
    conv2d_4_output_array.data_start = AI_PTR(activations + 1200);
 800a910:	68fb      	ldr	r3, [r7, #12]
 800a912:	f503 6396 	add.w	r3, r3, #1200	; 0x4b0
 800a916:	4a34      	ldr	r2, [pc, #208]	; (800a9e8 <keras_n_bn_configure_activations+0x14c>)
 800a918:	60d3      	str	r3, [r2, #12]
    batch_normalization_1_output_array.data = AI_PTR(activations + 1200);
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	f503 6396 	add.w	r3, r3, #1200	; 0x4b0
 800a920:	4a32      	ldr	r2, [pc, #200]	; (800a9ec <keras_n_bn_configure_activations+0x150>)
 800a922:	6093      	str	r3, [r2, #8]
    batch_normalization_1_output_array.data_start = AI_PTR(activations + 1200);
 800a924:	68fb      	ldr	r3, [r7, #12]
 800a926:	f503 6396 	add.w	r3, r3, #1200	; 0x4b0
 800a92a:	4a30      	ldr	r2, [pc, #192]	; (800a9ec <keras_n_bn_configure_activations+0x150>)
 800a92c:	60d3      	str	r3, [r2, #12]
    conv2d_5_output_array.data = AI_PTR(activations + 0);
 800a92e:	4a30      	ldr	r2, [pc, #192]	; (800a9f0 <keras_n_bn_configure_activations+0x154>)
 800a930:	68fb      	ldr	r3, [r7, #12]
 800a932:	6093      	str	r3, [r2, #8]
    conv2d_5_output_array.data_start = AI_PTR(activations + 0);
 800a934:	4a2e      	ldr	r2, [pc, #184]	; (800a9f0 <keras_n_bn_configure_activations+0x154>)
 800a936:	68fb      	ldr	r3, [r7, #12]
 800a938:	60d3      	str	r3, [r2, #12]
    batch_normalization_2_output_array.data = AI_PTR(activations + 0);
 800a93a:	4a2e      	ldr	r2, [pc, #184]	; (800a9f4 <keras_n_bn_configure_activations+0x158>)
 800a93c:	68fb      	ldr	r3, [r7, #12]
 800a93e:	6093      	str	r3, [r2, #8]
    batch_normalization_2_output_array.data_start = AI_PTR(activations + 0);
 800a940:	4a2c      	ldr	r2, [pc, #176]	; (800a9f4 <keras_n_bn_configure_activations+0x158>)
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	60d3      	str	r3, [r2, #12]
    conv2d_6_output_array.data = AI_PTR(activations + 7560);
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	f503 53ec 	add.w	r3, r3, #7552	; 0x1d80
 800a94c:	3308      	adds	r3, #8
 800a94e:	4a2a      	ldr	r2, [pc, #168]	; (800a9f8 <keras_n_bn_configure_activations+0x15c>)
 800a950:	6093      	str	r3, [r2, #8]
    conv2d_6_output_array.data_start = AI_PTR(activations + 7560);
 800a952:	68fb      	ldr	r3, [r7, #12]
 800a954:	f503 53ec 	add.w	r3, r3, #7552	; 0x1d80
 800a958:	3308      	adds	r3, #8
 800a95a:	4a27      	ldr	r2, [pc, #156]	; (800a9f8 <keras_n_bn_configure_activations+0x15c>)
 800a95c:	60d3      	str	r3, [r2, #12]
    batch_normalization_3_output_array.data = AI_PTR(activations + 7560);
 800a95e:	68fb      	ldr	r3, [r7, #12]
 800a960:	f503 53ec 	add.w	r3, r3, #7552	; 0x1d80
 800a964:	3308      	adds	r3, #8
 800a966:	4a25      	ldr	r2, [pc, #148]	; (800a9fc <keras_n_bn_configure_activations+0x160>)
 800a968:	6093      	str	r3, [r2, #8]
    batch_normalization_3_output_array.data_start = AI_PTR(activations + 7560);
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	f503 53ec 	add.w	r3, r3, #7552	; 0x1d80
 800a970:	3308      	adds	r3, #8
 800a972:	4a22      	ldr	r2, [pc, #136]	; (800a9fc <keras_n_bn_configure_activations+0x160>)
 800a974:	60d3      	str	r3, [r2, #12]
    dense_3_output_array.data = AI_PTR(activations + 7160);
 800a976:	68fb      	ldr	r3, [r7, #12]
 800a978:	f503 53df 	add.w	r3, r3, #7136	; 0x1be0
 800a97c:	3318      	adds	r3, #24
 800a97e:	4a20      	ldr	r2, [pc, #128]	; (800aa00 <keras_n_bn_configure_activations+0x164>)
 800a980:	6093      	str	r3, [r2, #8]
    dense_3_output_array.data_start = AI_PTR(activations + 7160);
 800a982:	68fb      	ldr	r3, [r7, #12]
 800a984:	f503 53df 	add.w	r3, r3, #7136	; 0x1be0
 800a988:	3318      	adds	r3, #24
 800a98a:	4a1d      	ldr	r2, [pc, #116]	; (800aa00 <keras_n_bn_configure_activations+0x164>)
 800a98c:	60d3      	str	r3, [r2, #12]
    activation_9_output_array.data = AI_PTR(activations + 7160);
 800a98e:	68fb      	ldr	r3, [r7, #12]
 800a990:	f503 53df 	add.w	r3, r3, #7136	; 0x1be0
 800a994:	3318      	adds	r3, #24
 800a996:	4a1b      	ldr	r2, [pc, #108]	; (800aa04 <keras_n_bn_configure_activations+0x168>)
 800a998:	6093      	str	r3, [r2, #8]
    activation_9_output_array.data_start = AI_PTR(activations + 7160);
 800a99a:	68fb      	ldr	r3, [r7, #12]
 800a99c:	f503 53df 	add.w	r3, r3, #7136	; 0x1be0
 800a9a0:	3318      	adds	r3, #24
 800a9a2:	4a18      	ldr	r2, [pc, #96]	; (800aa04 <keras_n_bn_configure_activations+0x168>)
 800a9a4:	60d3      	str	r3, [r2, #12]
    dense_4_output_array.data = AI_PTR(activations + 6988);
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	f503 53da 	add.w	r3, r3, #6976	; 0x1b40
 800a9ac:	330c      	adds	r3, #12
 800a9ae:	4a16      	ldr	r2, [pc, #88]	; (800aa08 <keras_n_bn_configure_activations+0x16c>)
 800a9b0:	6093      	str	r3, [r2, #8]
    dense_4_output_array.data_start = AI_PTR(activations + 6988);
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	f503 53da 	add.w	r3, r3, #6976	; 0x1b40
 800a9b8:	330c      	adds	r3, #12
 800a9ba:	4a13      	ldr	r2, [pc, #76]	; (800aa08 <keras_n_bn_configure_activations+0x16c>)
 800a9bc:	60d3      	str	r3, [r2, #12]
    activation_10_output_array.data = AI_PTR(NULL);
 800a9be:	4b13      	ldr	r3, [pc, #76]	; (800aa0c <keras_n_bn_configure_activations+0x170>)
 800a9c0:	2200      	movs	r2, #0
 800a9c2:	609a      	str	r2, [r3, #8]
    activation_10_output_array.data_start = AI_PTR(NULL);
 800a9c4:	4b11      	ldr	r3, [pc, #68]	; (800aa0c <keras_n_bn_configure_activations+0x170>)
 800a9c6:	2200      	movs	r2, #0
 800a9c8:	60da      	str	r2, [r3, #12]
    
  }
  return true;
 800a9ca:	2301      	movs	r3, #1
}
 800a9cc:	4618      	mov	r0, r3
 800a9ce:	3714      	adds	r7, #20
 800a9d0:	46bd      	mov	sp, r7
 800a9d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9d6:	4770      	bx	lr
 800a9d8:	20000094 	.word	0x20000094
 800a9dc:	200000a4 	.word	0x200000a4
 800a9e0:	200000b4 	.word	0x200000b4
 800a9e4:	200001c4 	.word	0x200001c4
 800a9e8:	200001d4 	.word	0x200001d4
 800a9ec:	200001e4 	.word	0x200001e4
 800a9f0:	200001f4 	.word	0x200001f4
 800a9f4:	20000204 	.word	0x20000204
 800a9f8:	20000214 	.word	0x20000214
 800a9fc:	20000224 	.word	0x20000224
 800aa00:	20000234 	.word	0x20000234
 800aa04:	20000244 	.word	0x20000244
 800aa08:	20000254 	.word	0x20000254
 800aa0c:	20000264 	.word	0x20000264

0800aa10 <keras_n_bn_configure_weights>:


AI_DECLARE_STATIC
ai_bool keras_n_bn_configure_weights(
  ai_network* net_ctx, const ai_buffer* weights_buffer)
{
 800aa10:	b480      	push	{r7}
 800aa12:	b085      	sub	sp, #20
 800aa14:	af00      	add	r7, sp, #0
 800aa16:	6078      	str	r0, [r7, #4]
 800aa18:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx &&  weights_buffer && weights_buffer->data)

  ai_ptr weights = AI_PTR(weights_buffer->data);
 800aa1a:	683b      	ldr	r3, [r7, #0]
 800aa1c:	691b      	ldr	r3, [r3, #16]
 800aa1e:	60fb      	str	r3, [r7, #12]
  AI_UNUSED(net_ctx)

  {
    /* Updating weights (byte) offsets */
    
    dense_4_bias_array.format |= AI_FMT_FLAG_CONST;
 800aa20:	4b93      	ldr	r3, [pc, #588]	; (800ac70 <keras_n_bn_configure_weights+0x260>)
 800aa22:	681b      	ldr	r3, [r3, #0]
 800aa24:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800aa28:	4a91      	ldr	r2, [pc, #580]	; (800ac70 <keras_n_bn_configure_weights+0x260>)
 800aa2a:	6013      	str	r3, [r2, #0]
    dense_4_bias_array.data = AI_PTR(weights + 413480);
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	f503 23c9 	add.w	r3, r3, #411648	; 0x64800
 800aa32:	f503 63e5 	add.w	r3, r3, #1832	; 0x728
 800aa36:	4a8e      	ldr	r2, [pc, #568]	; (800ac70 <keras_n_bn_configure_weights+0x260>)
 800aa38:	6093      	str	r3, [r2, #8]
    dense_4_bias_array.data_start = AI_PTR(weights + 413480);
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	f503 23c9 	add.w	r3, r3, #411648	; 0x64800
 800aa40:	f503 63e5 	add.w	r3, r3, #1832	; 0x728
 800aa44:	4a8a      	ldr	r2, [pc, #552]	; (800ac70 <keras_n_bn_configure_weights+0x260>)
 800aa46:	60d3      	str	r3, [r2, #12]
    dense_4_weights_array.format |= AI_FMT_FLAG_CONST;
 800aa48:	4b8a      	ldr	r3, [pc, #552]	; (800ac74 <keras_n_bn_configure_weights+0x264>)
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800aa50:	4a88      	ldr	r2, [pc, #544]	; (800ac74 <keras_n_bn_configure_weights+0x264>)
 800aa52:	6013      	str	r3, [r2, #0]
    dense_4_weights_array.data = AI_PTR(weights + 396280);
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	f503 23c1 	add.w	r3, r3, #395264	; 0x60800
 800aa5a:	f503 737e 	add.w	r3, r3, #1016	; 0x3f8
 800aa5e:	4a85      	ldr	r2, [pc, #532]	; (800ac74 <keras_n_bn_configure_weights+0x264>)
 800aa60:	6093      	str	r3, [r2, #8]
    dense_4_weights_array.data_start = AI_PTR(weights + 396280);
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	f503 23c1 	add.w	r3, r3, #395264	; 0x60800
 800aa68:	f503 737e 	add.w	r3, r3, #1016	; 0x3f8
 800aa6c:	4a81      	ldr	r2, [pc, #516]	; (800ac74 <keras_n_bn_configure_weights+0x264>)
 800aa6e:	60d3      	str	r3, [r2, #12]
    dense_3_bias_array.format |= AI_FMT_FLAG_CONST;
 800aa70:	4b81      	ldr	r3, [pc, #516]	; (800ac78 <keras_n_bn_configure_weights+0x268>)
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800aa78:	4a7f      	ldr	r2, [pc, #508]	; (800ac78 <keras_n_bn_configure_weights+0x268>)
 800aa7a:	6013      	str	r3, [r2, #0]
    dense_3_bias_array.data = AI_PTR(weights + 395880);
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	f503 23c1 	add.w	r3, r3, #395264	; 0x60800
 800aa82:	f503 731a 	add.w	r3, r3, #616	; 0x268
 800aa86:	4a7c      	ldr	r2, [pc, #496]	; (800ac78 <keras_n_bn_configure_weights+0x268>)
 800aa88:	6093      	str	r3, [r2, #8]
    dense_3_bias_array.data_start = AI_PTR(weights + 395880);
 800aa8a:	68fb      	ldr	r3, [r7, #12]
 800aa8c:	f503 23c1 	add.w	r3, r3, #395264	; 0x60800
 800aa90:	f503 731a 	add.w	r3, r3, #616	; 0x268
 800aa94:	4a78      	ldr	r2, [pc, #480]	; (800ac78 <keras_n_bn_configure_weights+0x268>)
 800aa96:	60d3      	str	r3, [r2, #12]
    dense_3_weights_array.format |= AI_FMT_FLAG_CONST;
 800aa98:	4b78      	ldr	r3, [pc, #480]	; (800ac7c <keras_n_bn_configure_weights+0x26c>)
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800aaa0:	4a76      	ldr	r2, [pc, #472]	; (800ac7c <keras_n_bn_configure_weights+0x26c>)
 800aaa2:	6013      	str	r3, [r2, #0]
    dense_3_weights_array.data = AI_PTR(weights + 355880);
 800aaa4:	68fb      	ldr	r3, [r7, #12]
 800aaa6:	f503 23ad 	add.w	r3, r3, #354304	; 0x56800
 800aaaa:	f503 63c5 	add.w	r3, r3, #1576	; 0x628
 800aaae:	4a73      	ldr	r2, [pc, #460]	; (800ac7c <keras_n_bn_configure_weights+0x26c>)
 800aab0:	6093      	str	r3, [r2, #8]
    dense_3_weights_array.data_start = AI_PTR(weights + 355880);
 800aab2:	68fb      	ldr	r3, [r7, #12]
 800aab4:	f503 23ad 	add.w	r3, r3, #354304	; 0x56800
 800aab8:	f503 63c5 	add.w	r3, r3, #1576	; 0x628
 800aabc:	4a6f      	ldr	r2, [pc, #444]	; (800ac7c <keras_n_bn_configure_weights+0x26c>)
 800aabe:	60d3      	str	r3, [r2, #12]
    batch_normalization_3_bias_array.format |= AI_FMT_FLAG_CONST;
 800aac0:	4b6f      	ldr	r3, [pc, #444]	; (800ac80 <keras_n_bn_configure_weights+0x270>)
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800aac8:	4a6d      	ldr	r2, [pc, #436]	; (800ac80 <keras_n_bn_configure_weights+0x270>)
 800aaca:	6013      	str	r3, [r2, #0]
    batch_normalization_3_bias_array.data = AI_PTR(weights + 355480);
 800aacc:	68fb      	ldr	r3, [r7, #12]
 800aace:	f503 23ad 	add.w	r3, r3, #354304	; 0x56800
 800aad2:	f503 6393 	add.w	r3, r3, #1176	; 0x498
 800aad6:	4a6a      	ldr	r2, [pc, #424]	; (800ac80 <keras_n_bn_configure_weights+0x270>)
 800aad8:	6093      	str	r3, [r2, #8]
    batch_normalization_3_bias_array.data_start = AI_PTR(weights + 355480);
 800aada:	68fb      	ldr	r3, [r7, #12]
 800aadc:	f503 23ad 	add.w	r3, r3, #354304	; 0x56800
 800aae0:	f503 6393 	add.w	r3, r3, #1176	; 0x498
 800aae4:	4a66      	ldr	r2, [pc, #408]	; (800ac80 <keras_n_bn_configure_weights+0x270>)
 800aae6:	60d3      	str	r3, [r2, #12]
    batch_normalization_3_scale_array.format |= AI_FMT_FLAG_CONST;
 800aae8:	4b66      	ldr	r3, [pc, #408]	; (800ac84 <keras_n_bn_configure_weights+0x274>)
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800aaf0:	4a64      	ldr	r2, [pc, #400]	; (800ac84 <keras_n_bn_configure_weights+0x274>)
 800aaf2:	6013      	str	r3, [r2, #0]
    batch_normalization_3_scale_array.data = AI_PTR(weights + 355080);
 800aaf4:	68fb      	ldr	r3, [r7, #12]
 800aaf6:	f503 23ad 	add.w	r3, r3, #354304	; 0x56800
 800aafa:	f503 7342 	add.w	r3, r3, #776	; 0x308
 800aafe:	4a61      	ldr	r2, [pc, #388]	; (800ac84 <keras_n_bn_configure_weights+0x274>)
 800ab00:	6093      	str	r3, [r2, #8]
    batch_normalization_3_scale_array.data_start = AI_PTR(weights + 355080);
 800ab02:	68fb      	ldr	r3, [r7, #12]
 800ab04:	f503 23ad 	add.w	r3, r3, #354304	; 0x56800
 800ab08:	f503 7342 	add.w	r3, r3, #776	; 0x308
 800ab0c:	4a5d      	ldr	r2, [pc, #372]	; (800ac84 <keras_n_bn_configure_weights+0x274>)
 800ab0e:	60d3      	str	r3, [r2, #12]
    conv2d_6_bias_array.format |= AI_FMT_FLAG_CONST;
 800ab10:	4b5d      	ldr	r3, [pc, #372]	; (800ac88 <keras_n_bn_configure_weights+0x278>)
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ab18:	4a5b      	ldr	r2, [pc, #364]	; (800ac88 <keras_n_bn_configure_weights+0x278>)
 800ab1a:	6013      	str	r3, [r2, #0]
    conv2d_6_bias_array.data = AI_PTR(weights + 354680);
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	f503 23ad 	add.w	r3, r3, #354304	; 0x56800
 800ab22:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800ab26:	4a58      	ldr	r2, [pc, #352]	; (800ac88 <keras_n_bn_configure_weights+0x278>)
 800ab28:	6093      	str	r3, [r2, #8]
    conv2d_6_bias_array.data_start = AI_PTR(weights + 354680);
 800ab2a:	68fb      	ldr	r3, [r7, #12]
 800ab2c:	f503 23ad 	add.w	r3, r3, #354304	; 0x56800
 800ab30:	f503 73bc 	add.w	r3, r3, #376	; 0x178
 800ab34:	4a54      	ldr	r2, [pc, #336]	; (800ac88 <keras_n_bn_configure_weights+0x278>)
 800ab36:	60d3      	str	r3, [r2, #12]
    conv2d_6_weights_array.format |= AI_FMT_FLAG_CONST;
 800ab38:	4b54      	ldr	r3, [pc, #336]	; (800ac8c <keras_n_bn_configure_weights+0x27c>)
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ab40:	4a52      	ldr	r2, [pc, #328]	; (800ac8c <keras_n_bn_configure_weights+0x27c>)
 800ab42:	6013      	str	r3, [r2, #0]
    conv2d_6_weights_array.data = AI_PTR(weights + 34680);
 800ab44:	68fb      	ldr	r3, [r7, #12]
 800ab46:	f503 4307 	add.w	r3, r3, #34560	; 0x8700
 800ab4a:	3378      	adds	r3, #120	; 0x78
 800ab4c:	4a4f      	ldr	r2, [pc, #316]	; (800ac8c <keras_n_bn_configure_weights+0x27c>)
 800ab4e:	6093      	str	r3, [r2, #8]
    conv2d_6_weights_array.data_start = AI_PTR(weights + 34680);
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	f503 4307 	add.w	r3, r3, #34560	; 0x8700
 800ab56:	3378      	adds	r3, #120	; 0x78
 800ab58:	4a4c      	ldr	r2, [pc, #304]	; (800ac8c <keras_n_bn_configure_weights+0x27c>)
 800ab5a:	60d3      	str	r3, [r2, #12]
    batch_normalization_2_bias_array.format |= AI_FMT_FLAG_CONST;
 800ab5c:	4b4c      	ldr	r3, [pc, #304]	; (800ac90 <keras_n_bn_configure_weights+0x280>)
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ab64:	4a4a      	ldr	r2, [pc, #296]	; (800ac90 <keras_n_bn_configure_weights+0x280>)
 800ab66:	6013      	str	r3, [r2, #0]
    batch_normalization_2_bias_array.data = AI_PTR(weights + 34480);
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	f503 4306 	add.w	r3, r3, #34304	; 0x8600
 800ab6e:	33b0      	adds	r3, #176	; 0xb0
 800ab70:	4a47      	ldr	r2, [pc, #284]	; (800ac90 <keras_n_bn_configure_weights+0x280>)
 800ab72:	6093      	str	r3, [r2, #8]
    batch_normalization_2_bias_array.data_start = AI_PTR(weights + 34480);
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	f503 4306 	add.w	r3, r3, #34304	; 0x8600
 800ab7a:	33b0      	adds	r3, #176	; 0xb0
 800ab7c:	4a44      	ldr	r2, [pc, #272]	; (800ac90 <keras_n_bn_configure_weights+0x280>)
 800ab7e:	60d3      	str	r3, [r2, #12]
    batch_normalization_2_scale_array.format |= AI_FMT_FLAG_CONST;
 800ab80:	4b44      	ldr	r3, [pc, #272]	; (800ac94 <keras_n_bn_configure_weights+0x284>)
 800ab82:	681b      	ldr	r3, [r3, #0]
 800ab84:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ab88:	4a42      	ldr	r2, [pc, #264]	; (800ac94 <keras_n_bn_configure_weights+0x284>)
 800ab8a:	6013      	str	r3, [r2, #0]
    batch_normalization_2_scale_array.data = AI_PTR(weights + 34280);
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	f503 4305 	add.w	r3, r3, #34048	; 0x8500
 800ab92:	33e8      	adds	r3, #232	; 0xe8
 800ab94:	4a3f      	ldr	r2, [pc, #252]	; (800ac94 <keras_n_bn_configure_weights+0x284>)
 800ab96:	6093      	str	r3, [r2, #8]
    batch_normalization_2_scale_array.data_start = AI_PTR(weights + 34280);
 800ab98:	68fb      	ldr	r3, [r7, #12]
 800ab9a:	f503 4305 	add.w	r3, r3, #34048	; 0x8500
 800ab9e:	33e8      	adds	r3, #232	; 0xe8
 800aba0:	4a3c      	ldr	r2, [pc, #240]	; (800ac94 <keras_n_bn_configure_weights+0x284>)
 800aba2:	60d3      	str	r3, [r2, #12]
    conv2d_5_bias_array.format |= AI_FMT_FLAG_CONST;
 800aba4:	4b3c      	ldr	r3, [pc, #240]	; (800ac98 <keras_n_bn_configure_weights+0x288>)
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800abac:	4a3a      	ldr	r2, [pc, #232]	; (800ac98 <keras_n_bn_configure_weights+0x288>)
 800abae:	6013      	str	r3, [r2, #0]
    conv2d_5_bias_array.data = AI_PTR(weights + 34080);
 800abb0:	68fb      	ldr	r3, [r7, #12]
 800abb2:	f503 4305 	add.w	r3, r3, #34048	; 0x8500
 800abb6:	3320      	adds	r3, #32
 800abb8:	4a37      	ldr	r2, [pc, #220]	; (800ac98 <keras_n_bn_configure_weights+0x288>)
 800abba:	6093      	str	r3, [r2, #8]
    conv2d_5_bias_array.data_start = AI_PTR(weights + 34080);
 800abbc:	68fb      	ldr	r3, [r7, #12]
 800abbe:	f503 4305 	add.w	r3, r3, #34048	; 0x8500
 800abc2:	3320      	adds	r3, #32
 800abc4:	4a34      	ldr	r2, [pc, #208]	; (800ac98 <keras_n_bn_configure_weights+0x288>)
 800abc6:	60d3      	str	r3, [r2, #12]
    conv2d_5_weights_array.format |= AI_FMT_FLAG_CONST;
 800abc8:	4b34      	ldr	r3, [pc, #208]	; (800ac9c <keras_n_bn_configure_weights+0x28c>)
 800abca:	681b      	ldr	r3, [r3, #0]
 800abcc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800abd0:	4a32      	ldr	r2, [pc, #200]	; (800ac9c <keras_n_bn_configure_weights+0x28c>)
 800abd2:	6013      	str	r3, [r2, #0]
    conv2d_5_weights_array.data = AI_PTR(weights + 2080);
 800abd4:	68fb      	ldr	r3, [r7, #12]
 800abd6:	f503 6302 	add.w	r3, r3, #2080	; 0x820
 800abda:	4a30      	ldr	r2, [pc, #192]	; (800ac9c <keras_n_bn_configure_weights+0x28c>)
 800abdc:	6093      	str	r3, [r2, #8]
    conv2d_5_weights_array.data_start = AI_PTR(weights + 2080);
 800abde:	68fb      	ldr	r3, [r7, #12]
 800abe0:	f503 6302 	add.w	r3, r3, #2080	; 0x820
 800abe4:	4a2d      	ldr	r2, [pc, #180]	; (800ac9c <keras_n_bn_configure_weights+0x28c>)
 800abe6:	60d3      	str	r3, [r2, #12]
    batch_normalization_1_bias_array.format |= AI_FMT_FLAG_CONST;
 800abe8:	4b2d      	ldr	r3, [pc, #180]	; (800aca0 <keras_n_bn_configure_weights+0x290>)
 800abea:	681b      	ldr	r3, [r3, #0]
 800abec:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800abf0:	4a2b      	ldr	r2, [pc, #172]	; (800aca0 <keras_n_bn_configure_weights+0x290>)
 800abf2:	6013      	str	r3, [r2, #0]
    batch_normalization_1_bias_array.data = AI_PTR(weights + 2040);
 800abf4:	68fb      	ldr	r3, [r7, #12]
 800abf6:	f503 63ff 	add.w	r3, r3, #2040	; 0x7f8
 800abfa:	4a29      	ldr	r2, [pc, #164]	; (800aca0 <keras_n_bn_configure_weights+0x290>)
 800abfc:	6093      	str	r3, [r2, #8]
    batch_normalization_1_bias_array.data_start = AI_PTR(weights + 2040);
 800abfe:	68fb      	ldr	r3, [r7, #12]
 800ac00:	f503 63ff 	add.w	r3, r3, #2040	; 0x7f8
 800ac04:	4a26      	ldr	r2, [pc, #152]	; (800aca0 <keras_n_bn_configure_weights+0x290>)
 800ac06:	60d3      	str	r3, [r2, #12]
    batch_normalization_1_scale_array.format |= AI_FMT_FLAG_CONST;
 800ac08:	4b26      	ldr	r3, [pc, #152]	; (800aca4 <keras_n_bn_configure_weights+0x294>)
 800ac0a:	681b      	ldr	r3, [r3, #0]
 800ac0c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ac10:	4a24      	ldr	r2, [pc, #144]	; (800aca4 <keras_n_bn_configure_weights+0x294>)
 800ac12:	6013      	str	r3, [r2, #0]
    batch_normalization_1_scale_array.data = AI_PTR(weights + 2000);
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 800ac1a:	4a22      	ldr	r2, [pc, #136]	; (800aca4 <keras_n_bn_configure_weights+0x294>)
 800ac1c:	6093      	str	r3, [r2, #8]
    batch_normalization_1_scale_array.data_start = AI_PTR(weights + 2000);
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 800ac24:	4a1f      	ldr	r2, [pc, #124]	; (800aca4 <keras_n_bn_configure_weights+0x294>)
 800ac26:	60d3      	str	r3, [r2, #12]
    conv2d_4_bias_array.format |= AI_FMT_FLAG_CONST;
 800ac28:	4b1f      	ldr	r3, [pc, #124]	; (800aca8 <keras_n_bn_configure_weights+0x298>)
 800ac2a:	681b      	ldr	r3, [r3, #0]
 800ac2c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ac30:	4a1d      	ldr	r2, [pc, #116]	; (800aca8 <keras_n_bn_configure_weights+0x298>)
 800ac32:	6013      	str	r3, [r2, #0]
    conv2d_4_bias_array.data = AI_PTR(weights + 1960);
 800ac34:	68fb      	ldr	r3, [r7, #12]
 800ac36:	f503 63f5 	add.w	r3, r3, #1960	; 0x7a8
 800ac3a:	4a1b      	ldr	r2, [pc, #108]	; (800aca8 <keras_n_bn_configure_weights+0x298>)
 800ac3c:	6093      	str	r3, [r2, #8]
    conv2d_4_bias_array.data_start = AI_PTR(weights + 1960);
 800ac3e:	68fb      	ldr	r3, [r7, #12]
 800ac40:	f503 63f5 	add.w	r3, r3, #1960	; 0x7a8
 800ac44:	4a18      	ldr	r2, [pc, #96]	; (800aca8 <keras_n_bn_configure_weights+0x298>)
 800ac46:	60d3      	str	r3, [r2, #12]
    conv2d_4_weights_array.format |= AI_FMT_FLAG_CONST;
 800ac48:	4b18      	ldr	r3, [pc, #96]	; (800acac <keras_n_bn_configure_weights+0x29c>)
 800ac4a:	681b      	ldr	r3, [r3, #0]
 800ac4c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800ac50:	4a16      	ldr	r2, [pc, #88]	; (800acac <keras_n_bn_configure_weights+0x29c>)
 800ac52:	6013      	str	r3, [r2, #0]
    conv2d_4_weights_array.data = AI_PTR(weights + 0);
 800ac54:	4a15      	ldr	r2, [pc, #84]	; (800acac <keras_n_bn_configure_weights+0x29c>)
 800ac56:	68fb      	ldr	r3, [r7, #12]
 800ac58:	6093      	str	r3, [r2, #8]
    conv2d_4_weights_array.data_start = AI_PTR(weights + 0);
 800ac5a:	4a14      	ldr	r2, [pc, #80]	; (800acac <keras_n_bn_configure_weights+0x29c>)
 800ac5c:	68fb      	ldr	r3, [r7, #12]
 800ac5e:	60d3      	str	r3, [r2, #12]
  }

  return true;
 800ac60:	2301      	movs	r3, #1
}
 800ac62:	4618      	mov	r0, r3
 800ac64:	3714      	adds	r7, #20
 800ac66:	46bd      	mov	sp, r7
 800ac68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac6c:	4770      	bx	lr
 800ac6e:	bf00      	nop
 800ac70:	200000c4 	.word	0x200000c4
 800ac74:	200000d4 	.word	0x200000d4
 800ac78:	200000e4 	.word	0x200000e4
 800ac7c:	200000f4 	.word	0x200000f4
 800ac80:	20000104 	.word	0x20000104
 800ac84:	20000114 	.word	0x20000114
 800ac88:	20000124 	.word	0x20000124
 800ac8c:	20000134 	.word	0x20000134
 800ac90:	20000144 	.word	0x20000144
 800ac94:	20000154 	.word	0x20000154
 800ac98:	20000164 	.word	0x20000164
 800ac9c:	20000174 	.word	0x20000174
 800aca0:	20000184 	.word	0x20000184
 800aca4:	20000194 	.word	0x20000194
 800aca8:	200001a4 	.word	0x200001a4
 800acac:	200001b4 	.word	0x200001b4

0800acb0 <ai_keras_n_bn_get_error>:
  return false;
}

AI_API_ENTRY
ai_error ai_keras_n_bn_get_error(ai_handle network)
{
 800acb0:	b580      	push	{r7, lr}
 800acb2:	b082      	sub	sp, #8
 800acb4:	af00      	add	r7, sp, #0
 800acb6:	6078      	str	r0, [r7, #4]
  return ai_platform_network_get_error(network);
 800acb8:	6878      	ldr	r0, [r7, #4]
 800acba:	f7f5 fb80 	bl	80003be <ai_platform_network_get_error>
 800acbe:	4603      	mov	r3, r0
}
 800acc0:	4618      	mov	r0, r3
 800acc2:	3708      	adds	r7, #8
 800acc4:	46bd      	mov	sp, r7
 800acc6:	bd80      	pop	{r7, pc}

0800acc8 <ai_keras_n_bn_create>:

AI_API_ENTRY
ai_error ai_keras_n_bn_create(
  ai_handle* network, const ai_buffer* network_config)
{
 800acc8:	b580      	push	{r7, lr}
 800acca:	b084      	sub	sp, #16
 800accc:	af02      	add	r7, sp, #8
 800acce:	6078      	str	r0, [r7, #4]
 800acd0:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 800acd2:	2300      	movs	r3, #0
 800acd4:	9301      	str	r3, [sp, #4]
 800acd6:	2303      	movs	r3, #3
 800acd8:	9300      	str	r3, [sp, #0]
 800acda:	2301      	movs	r3, #1
 800acdc:	4a04      	ldr	r2, [pc, #16]	; (800acf0 <ai_keras_n_bn_create+0x28>)
 800acde:	6839      	ldr	r1, [r7, #0]
 800ace0:	6878      	ldr	r0, [r7, #4]
 800ace2:	f7f5 fc57 	bl	8000594 <ai_platform_network_create>
 800ace6:	4603      	mov	r3, r0
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 800ace8:	4618      	mov	r0, r3
 800acea:	3708      	adds	r7, #8
 800acec:	46bd      	mov	sp, r7
 800acee:	bd80      	pop	{r7, pc}
 800acf0:	2000003c 	.word	0x2000003c

0800acf4 <ai_keras_n_bn_destroy>:

AI_API_ENTRY
ai_handle ai_keras_n_bn_destroy(ai_handle network)
{
 800acf4:	b580      	push	{r7, lr}
 800acf6:	b082      	sub	sp, #8
 800acf8:	af00      	add	r7, sp, #0
 800acfa:	6078      	str	r0, [r7, #4]
  return ai_platform_network_destroy(network);
 800acfc:	6878      	ldr	r0, [r7, #4]
 800acfe:	f7f5 fc8e 	bl	800061e <ai_platform_network_destroy>
 800ad02:	4603      	mov	r3, r0
}
 800ad04:	4618      	mov	r0, r3
 800ad06:	3708      	adds	r7, #8
 800ad08:	46bd      	mov	sp, r7
 800ad0a:	bd80      	pop	{r7, pc}

0800ad0c <ai_keras_n_bn_init>:

AI_API_ENTRY
ai_bool ai_keras_n_bn_init(
  ai_handle network, const ai_network_params* params)
{
 800ad0c:	b580      	push	{r7, lr}
 800ad0e:	b084      	sub	sp, #16
 800ad10:	af00      	add	r7, sp, #0
 800ad12:	6078      	str	r0, [r7, #4]
 800ad14:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = ai_platform_network_init(network, params);
 800ad16:	6839      	ldr	r1, [r7, #0]
 800ad18:	6878      	ldr	r0, [r7, #4]
 800ad1a:	f7f5 fca3 	bl	8000664 <ai_platform_network_init>
 800ad1e:	60f8      	str	r0, [r7, #12]
  if ( !net_ctx ) return false;
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	2b00      	cmp	r3, #0
 800ad24:	d101      	bne.n	800ad2a <ai_keras_n_bn_init+0x1e>
 800ad26:	2300      	movs	r3, #0
 800ad28:	e01f      	b.n	800ad6a <ai_keras_n_bn_init+0x5e>

  ai_bool ok = true;
 800ad2a:	2301      	movs	r3, #1
 800ad2c:	72fb      	strb	r3, [r7, #11]
  ok &= keras_n_bn_configure_weights(net_ctx, &params->params);
 800ad2e:	683b      	ldr	r3, [r7, #0]
 800ad30:	4619      	mov	r1, r3
 800ad32:	68f8      	ldr	r0, [r7, #12]
 800ad34:	f7ff fe6c 	bl	800aa10 <keras_n_bn_configure_weights>
 800ad38:	4603      	mov	r3, r0
 800ad3a:	461a      	mov	r2, r3
 800ad3c:	7afb      	ldrb	r3, [r7, #11]
 800ad3e:	4013      	ands	r3, r2
 800ad40:	2b00      	cmp	r3, #0
 800ad42:	bf14      	ite	ne
 800ad44:	2301      	movne	r3, #1
 800ad46:	2300      	moveq	r3, #0
 800ad48:	72fb      	strb	r3, [r7, #11]
  ok &= keras_n_bn_configure_activations(net_ctx, &params->activations);
 800ad4a:	683b      	ldr	r3, [r7, #0]
 800ad4c:	3318      	adds	r3, #24
 800ad4e:	4619      	mov	r1, r3
 800ad50:	68f8      	ldr	r0, [r7, #12]
 800ad52:	f7ff fda3 	bl	800a89c <keras_n_bn_configure_activations>
 800ad56:	4603      	mov	r3, r0
 800ad58:	461a      	mov	r2, r3
 800ad5a:	7afb      	ldrb	r3, [r7, #11]
 800ad5c:	4013      	ands	r3, r2
 800ad5e:	2b00      	cmp	r3, #0
 800ad60:	bf14      	ite	ne
 800ad62:	2301      	movne	r3, #1
 800ad64:	2300      	moveq	r3, #0
 800ad66:	72fb      	strb	r3, [r7, #11]

  return ok;
 800ad68:	7afb      	ldrb	r3, [r7, #11]
}
 800ad6a:	4618      	mov	r0, r3
 800ad6c:	3710      	adds	r7, #16
 800ad6e:	46bd      	mov	sp, r7
 800ad70:	bd80      	pop	{r7, pc}

0800ad72 <ai_keras_n_bn_run>:


AI_API_ENTRY
ai_i32 ai_keras_n_bn_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 800ad72:	b580      	push	{r7, lr}
 800ad74:	b084      	sub	sp, #16
 800ad76:	af00      	add	r7, sp, #0
 800ad78:	60f8      	str	r0, [r7, #12]
 800ad7a:	60b9      	str	r1, [r7, #8]
 800ad7c:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 800ad7e:	687a      	ldr	r2, [r7, #4]
 800ad80:	68b9      	ldr	r1, [r7, #8]
 800ad82:	68f8      	ldr	r0, [r7, #12]
 800ad84:	f7f5 fcca 	bl	800071c <ai_platform_network_process>
 800ad88:	4603      	mov	r3, r0
}
 800ad8a:	4618      	mov	r0, r3
 800ad8c:	3710      	adds	r7, #16
 800ad8e:	46bd      	mov	sp, r7
 800ad90:	bd80      	pop	{r7, pc}
	...

0800ad94 <ai_keras_n_bn_data_weights_get>:
#include "keras_n_bn_data.h"

ai_handle ai_keras_n_bn_data_weights_get(void)
{
 800ad94:	b480      	push	{r7}
 800ad96:	af00      	add	r7, sp, #0
    0x40, 0x43, 0x3d, 0x86, 0xf3, 0x90, 0x3c, 0xf4, 0xc9,
    0x12, 0xbd, 0x40, 0x03, 0xe0, 0xbd, 0xe2, 0x6b, 0xb6,
    0x3c, 0x06, 0x81, 0x2a, 0x3c, 0xce, 0x5d, 0x62, 0xbc
  };

  return AI_HANDLE_PTR(s_keras_n_bn_weights);
 800ad98:	4b02      	ldr	r3, [pc, #8]	; (800ada4 <ai_keras_n_bn_data_weights_get+0x10>)

}
 800ad9a:	4618      	mov	r0, r3
 800ad9c:	46bd      	mov	sp, r7
 800ad9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ada2:	4770      	bx	lr
 800ada4:	0800e454 	.word	0x0800e454

0800ada8 <__aeabi_memclr>:
 800ada8:	2200      	movs	r2, #0
 800adaa:	f7fb bdb3 	b.w	8006914 <__aeabi_memset>

0800adae <__aeabi_memcpy>:
 800adae:	f000 b83a 	b.w	800ae26 <memcpy>
	...

0800adb4 <__errno>:
 800adb4:	4b01      	ldr	r3, [pc, #4]	; (800adbc <__errno+0x8>)
 800adb6:	6818      	ldr	r0, [r3, #0]
 800adb8:	4770      	bx	lr
 800adba:	bf00      	nop
 800adbc:	20000df4 	.word	0x20000df4

0800adc0 <__libc_init_array>:
 800adc0:	b570      	push	{r4, r5, r6, lr}
 800adc2:	4e0d      	ldr	r6, [pc, #52]	; (800adf8 <__libc_init_array+0x38>)
 800adc4:	4c0d      	ldr	r4, [pc, #52]	; (800adfc <__libc_init_array+0x3c>)
 800adc6:	1ba4      	subs	r4, r4, r6
 800adc8:	10a4      	asrs	r4, r4, #2
 800adca:	2500      	movs	r5, #0
 800adcc:	42a5      	cmp	r5, r4
 800adce:	d109      	bne.n	800ade4 <__libc_init_array+0x24>
 800add0:	4e0b      	ldr	r6, [pc, #44]	; (800ae00 <__libc_init_array+0x40>)
 800add2:	4c0c      	ldr	r4, [pc, #48]	; (800ae04 <__libc_init_array+0x44>)
 800add4:	f003 fa96 	bl	800e304 <_init>
 800add8:	1ba4      	subs	r4, r4, r6
 800adda:	10a4      	asrs	r4, r4, #2
 800addc:	2500      	movs	r5, #0
 800adde:	42a5      	cmp	r5, r4
 800ade0:	d105      	bne.n	800adee <__libc_init_array+0x2e>
 800ade2:	bd70      	pop	{r4, r5, r6, pc}
 800ade4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800ade8:	4798      	blx	r3
 800adea:	3501      	adds	r5, #1
 800adec:	e7ee      	b.n	800adcc <__libc_init_array+0xc>
 800adee:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800adf2:	4798      	blx	r3
 800adf4:	3501      	adds	r5, #1
 800adf6:	e7f2      	b.n	800adde <__libc_init_array+0x1e>
 800adf8:	08073898 	.word	0x08073898
 800adfc:	08073898 	.word	0x08073898
 800ae00:	08073898 	.word	0x08073898
 800ae04:	0807389c 	.word	0x0807389c

0800ae08 <memcmp>:
 800ae08:	b530      	push	{r4, r5, lr}
 800ae0a:	2400      	movs	r4, #0
 800ae0c:	42a2      	cmp	r2, r4
 800ae0e:	d101      	bne.n	800ae14 <memcmp+0xc>
 800ae10:	2000      	movs	r0, #0
 800ae12:	e007      	b.n	800ae24 <memcmp+0x1c>
 800ae14:	5d03      	ldrb	r3, [r0, r4]
 800ae16:	3401      	adds	r4, #1
 800ae18:	190d      	adds	r5, r1, r4
 800ae1a:	f815 5c01 	ldrb.w	r5, [r5, #-1]
 800ae1e:	42ab      	cmp	r3, r5
 800ae20:	d0f4      	beq.n	800ae0c <memcmp+0x4>
 800ae22:	1b58      	subs	r0, r3, r5
 800ae24:	bd30      	pop	{r4, r5, pc}

0800ae26 <memcpy>:
 800ae26:	b510      	push	{r4, lr}
 800ae28:	1e43      	subs	r3, r0, #1
 800ae2a:	440a      	add	r2, r1
 800ae2c:	4291      	cmp	r1, r2
 800ae2e:	d100      	bne.n	800ae32 <memcpy+0xc>
 800ae30:	bd10      	pop	{r4, pc}
 800ae32:	f811 4b01 	ldrb.w	r4, [r1], #1
 800ae36:	f803 4f01 	strb.w	r4, [r3, #1]!
 800ae3a:	e7f7      	b.n	800ae2c <memcpy+0x6>

0800ae3c <memset>:
 800ae3c:	4402      	add	r2, r0
 800ae3e:	4603      	mov	r3, r0
 800ae40:	4293      	cmp	r3, r2
 800ae42:	d100      	bne.n	800ae46 <memset+0xa>
 800ae44:	4770      	bx	lr
 800ae46:	f803 1b01 	strb.w	r1, [r3], #1
 800ae4a:	e7f9      	b.n	800ae40 <memset+0x4>

0800ae4c <asinhf>:
 800ae4c:	b510      	push	{r4, lr}
 800ae4e:	ee10 4a10 	vmov	r4, s0
 800ae52:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800ae56:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800ae5a:	ed2d 8b04 	vpush	{d8-d9}
 800ae5e:	eeb0 8a40 	vmov.f32	s16, s0
 800ae62:	db06      	blt.n	800ae72 <asinhf+0x26>
 800ae64:	ee30 8a00 	vadd.f32	s16, s0, s0
 800ae68:	eeb0 0a48 	vmov.f32	s0, s16
 800ae6c:	ecbd 8b04 	vpop	{d8-d9}
 800ae70:	bd10      	pop	{r4, pc}
 800ae72:	f1b3 5f46 	cmp.w	r3, #830472192	; 0x31800000
 800ae76:	da21      	bge.n	800aebc <asinhf+0x70>
 800ae78:	eddf 7a26 	vldr	s15, [pc, #152]	; 800af14 <asinhf+0xc8>
 800ae7c:	ee70 7a27 	vadd.f32	s15, s0, s15
 800ae80:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800ae84:	eef4 7ac7 	vcmpe.f32	s15, s14
 800ae88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ae8c:	dcec      	bgt.n	800ae68 <asinhf+0x1c>
 800ae8e:	eeb0 0a48 	vmov.f32	s0, s16
 800ae92:	f000 fb77 	bl	800b584 <fabsf>
 800ae96:	ee68 8a08 	vmul.f32	s17, s16, s16
 800ae9a:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 800ae9e:	eeb0 9a40 	vmov.f32	s18, s0
 800aea2:	ee38 0a88 	vadd.f32	s0, s17, s16
 800aea6:	f002 fc11 	bl	800d6cc <__ieee754_sqrtf>
 800aeaa:	ee30 8a08 	vadd.f32	s16, s0, s16
 800aeae:	ee88 0a88 	vdiv.f32	s0, s17, s16
 800aeb2:	ee30 0a09 	vadd.f32	s0, s0, s18
 800aeb6:	f000 fbaf 	bl	800b618 <log1pf>
 800aeba:	e028      	b.n	800af0e <asinhf+0xc2>
 800aebc:	f1b3 4f9b 	cmp.w	r3, #1300234240	; 0x4d800000
 800aec0:	dd0c      	ble.n	800aedc <asinhf+0x90>
 800aec2:	f000 fb5f 	bl	800b584 <fabsf>
 800aec6:	f001 feb9 	bl	800cc3c <__ieee754_logf>
 800aeca:	ed9f 8a13 	vldr	s16, [pc, #76]	; 800af18 <asinhf+0xcc>
 800aece:	ee30 8a08 	vadd.f32	s16, s0, s16
 800aed2:	2c00      	cmp	r4, #0
 800aed4:	bfd8      	it	le
 800aed6:	eeb1 8a48 	vnegle.f32	s16, s16
 800aeda:	e7c5      	b.n	800ae68 <asinhf+0x1c>
 800aedc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800aee0:	ddd5      	ble.n	800ae8e <asinhf+0x42>
 800aee2:	f000 fb4f 	bl	800b584 <fabsf>
 800aee6:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 800aeea:	eef0 8a40 	vmov.f32	s17, s0
 800aeee:	eeb0 0a49 	vmov.f32	s0, s18
 800aef2:	eea8 0a08 	vfma.f32	s0, s16, s16
 800aef6:	f002 fbe9 	bl	800d6cc <__ieee754_sqrtf>
 800aefa:	ee70 7a28 	vadd.f32	s15, s0, s17
 800aefe:	ee89 0a27 	vdiv.f32	s0, s18, s15
 800af02:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 800af06:	eea8 0aa7 	vfma.f32	s0, s17, s15
 800af0a:	f001 fe97 	bl	800cc3c <__ieee754_logf>
 800af0e:	eeb0 8a40 	vmov.f32	s16, s0
 800af12:	e7de      	b.n	800aed2 <asinhf+0x86>
 800af14:	7149f2ca 	.word	0x7149f2ca
 800af18:	3f317218 	.word	0x3f317218

0800af1c <atanf>:
 800af1c:	b538      	push	{r3, r4, r5, lr}
 800af1e:	ee10 5a10 	vmov	r5, s0
 800af22:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800af26:	f1b4 4fa1 	cmp.w	r4, #1350565888	; 0x50800000
 800af2a:	eef0 7a40 	vmov.f32	s15, s0
 800af2e:	db10      	blt.n	800af52 <atanf+0x36>
 800af30:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800af34:	dd04      	ble.n	800af40 <atanf+0x24>
 800af36:	ee70 7a00 	vadd.f32	s15, s0, s0
 800af3a:	eeb0 0a67 	vmov.f32	s0, s15
 800af3e:	bd38      	pop	{r3, r4, r5, pc}
 800af40:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 800b078 <atanf+0x15c>
 800af44:	eddf 7a4d 	vldr	s15, [pc, #308]	; 800b07c <atanf+0x160>
 800af48:	2d00      	cmp	r5, #0
 800af4a:	bfd8      	it	le
 800af4c:	eef0 7a47 	vmovle.f32	s15, s14
 800af50:	e7f3      	b.n	800af3a <atanf+0x1e>
 800af52:	4b4b      	ldr	r3, [pc, #300]	; (800b080 <atanf+0x164>)
 800af54:	429c      	cmp	r4, r3
 800af56:	dc10      	bgt.n	800af7a <atanf+0x5e>
 800af58:	f1b4 5f44 	cmp.w	r4, #822083584	; 0x31000000
 800af5c:	da0a      	bge.n	800af74 <atanf+0x58>
 800af5e:	ed9f 7a49 	vldr	s14, [pc, #292]	; 800b084 <atanf+0x168>
 800af62:	ee30 7a07 	vadd.f32	s14, s0, s14
 800af66:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800af6a:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800af6e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800af72:	dce2      	bgt.n	800af3a <atanf+0x1e>
 800af74:	f04f 33ff 	mov.w	r3, #4294967295
 800af78:	e013      	b.n	800afa2 <atanf+0x86>
 800af7a:	f000 fb03 	bl	800b584 <fabsf>
 800af7e:	4b42      	ldr	r3, [pc, #264]	; (800b088 <atanf+0x16c>)
 800af80:	429c      	cmp	r4, r3
 800af82:	dc4f      	bgt.n	800b024 <atanf+0x108>
 800af84:	f5a3 03d0 	sub.w	r3, r3, #6815744	; 0x680000
 800af88:	429c      	cmp	r4, r3
 800af8a:	dc41      	bgt.n	800b010 <atanf+0xf4>
 800af8c:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 800af90:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800af94:	eea0 7a27 	vfma.f32	s14, s0, s15
 800af98:	2300      	movs	r3, #0
 800af9a:	ee30 0a27 	vadd.f32	s0, s0, s15
 800af9e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800afa2:	1c5a      	adds	r2, r3, #1
 800afa4:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800afa8:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800b08c <atanf+0x170>
 800afac:	eddf 5a38 	vldr	s11, [pc, #224]	; 800b090 <atanf+0x174>
 800afb0:	ed9f 5a38 	vldr	s10, [pc, #224]	; 800b094 <atanf+0x178>
 800afb4:	ee66 6a06 	vmul.f32	s13, s12, s12
 800afb8:	eee6 5a87 	vfma.f32	s11, s13, s14
 800afbc:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800b098 <atanf+0x17c>
 800afc0:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800afc4:	eddf 5a35 	vldr	s11, [pc, #212]	; 800b09c <atanf+0x180>
 800afc8:	eee7 5a26 	vfma.f32	s11, s14, s13
 800afcc:	ed9f 7a34 	vldr	s14, [pc, #208]	; 800b0a0 <atanf+0x184>
 800afd0:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800afd4:	eddf 5a33 	vldr	s11, [pc, #204]	; 800b0a4 <atanf+0x188>
 800afd8:	eee7 5a26 	vfma.f32	s11, s14, s13
 800afdc:	ed9f 7a32 	vldr	s14, [pc, #200]	; 800b0a8 <atanf+0x18c>
 800afe0:	eea6 5a87 	vfma.f32	s10, s13, s14
 800afe4:	ed9f 7a31 	vldr	s14, [pc, #196]	; 800b0ac <atanf+0x190>
 800afe8:	eea5 7a26 	vfma.f32	s14, s10, s13
 800afec:	ed9f 5a30 	vldr	s10, [pc, #192]	; 800b0b0 <atanf+0x194>
 800aff0:	eea7 5a26 	vfma.f32	s10, s14, s13
 800aff4:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 800b0b4 <atanf+0x198>
 800aff8:	eea5 7a26 	vfma.f32	s14, s10, s13
 800affc:	ee27 7a26 	vmul.f32	s14, s14, s13
 800b000:	eea5 7a86 	vfma.f32	s14, s11, s12
 800b004:	ee27 7a27 	vmul.f32	s14, s14, s15
 800b008:	d121      	bne.n	800b04e <atanf+0x132>
 800b00a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800b00e:	e794      	b.n	800af3a <atanf+0x1e>
 800b010:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800b014:	ee30 7a67 	vsub.f32	s14, s0, s15
 800b018:	ee30 0a27 	vadd.f32	s0, s0, s15
 800b01c:	2301      	movs	r3, #1
 800b01e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800b022:	e7be      	b.n	800afa2 <atanf+0x86>
 800b024:	4b24      	ldr	r3, [pc, #144]	; (800b0b8 <atanf+0x19c>)
 800b026:	429c      	cmp	r4, r3
 800b028:	dc0b      	bgt.n	800b042 <atanf+0x126>
 800b02a:	eef7 7a08 	vmov.f32	s15, #120	; 0x3fc00000  1.5
 800b02e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b032:	eea0 7a27 	vfma.f32	s14, s0, s15
 800b036:	2302      	movs	r3, #2
 800b038:	ee70 6a67 	vsub.f32	s13, s0, s15
 800b03c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800b040:	e7af      	b.n	800afa2 <atanf+0x86>
 800b042:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800b046:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800b04a:	2303      	movs	r3, #3
 800b04c:	e7a9      	b.n	800afa2 <atanf+0x86>
 800b04e:	4a1b      	ldr	r2, [pc, #108]	; (800b0bc <atanf+0x1a0>)
 800b050:	491b      	ldr	r1, [pc, #108]	; (800b0c0 <atanf+0x1a4>)
 800b052:	009b      	lsls	r3, r3, #2
 800b054:	441a      	add	r2, r3
 800b056:	440b      	add	r3, r1
 800b058:	edd3 6a00 	vldr	s13, [r3]
 800b05c:	ee37 7a66 	vsub.f32	s14, s14, s13
 800b060:	2d00      	cmp	r5, #0
 800b062:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b066:	ed92 7a00 	vldr	s14, [r2]
 800b06a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800b06e:	bfb8      	it	lt
 800b070:	eef1 7a67 	vneglt.f32	s15, s15
 800b074:	e761      	b.n	800af3a <atanf+0x1e>
 800b076:	bf00      	nop
 800b078:	bfc90fdb 	.word	0xbfc90fdb
 800b07c:	3fc90fdb 	.word	0x3fc90fdb
 800b080:	3edfffff 	.word	0x3edfffff
 800b084:	7149f2ca 	.word	0x7149f2ca
 800b088:	3f97ffff 	.word	0x3f97ffff
 800b08c:	3c8569d7 	.word	0x3c8569d7
 800b090:	3d4bda59 	.word	0x3d4bda59
 800b094:	bd6ef16b 	.word	0xbd6ef16b
 800b098:	3d886b35 	.word	0x3d886b35
 800b09c:	3dba2e6e 	.word	0x3dba2e6e
 800b0a0:	3e124925 	.word	0x3e124925
 800b0a4:	3eaaaaab 	.word	0x3eaaaaab
 800b0a8:	bd15a221 	.word	0xbd15a221
 800b0ac:	bd9d8795 	.word	0xbd9d8795
 800b0b0:	bde38e38 	.word	0xbde38e38
 800b0b4:	be4ccccd 	.word	0xbe4ccccd
 800b0b8:	401bffff 	.word	0x401bffff
 800b0bc:	08073428 	.word	0x08073428
 800b0c0:	08073438 	.word	0x08073438

0800b0c4 <ceilf>:
 800b0c4:	ee10 3a10 	vmov	r3, s0
 800b0c8:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800b0cc:	0dca      	lsrs	r2, r1, #23
 800b0ce:	3a7f      	subs	r2, #127	; 0x7f
 800b0d0:	2a16      	cmp	r2, #22
 800b0d2:	dc2a      	bgt.n	800b12a <ceilf+0x66>
 800b0d4:	2a00      	cmp	r2, #0
 800b0d6:	da11      	bge.n	800b0fc <ceilf+0x38>
 800b0d8:	eddf 7a18 	vldr	s15, [pc, #96]	; 800b13c <ceilf+0x78>
 800b0dc:	ee30 0a27 	vadd.f32	s0, s0, s15
 800b0e0:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800b0e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b0e8:	dd05      	ble.n	800b0f6 <ceilf+0x32>
 800b0ea:	2b00      	cmp	r3, #0
 800b0ec:	db23      	blt.n	800b136 <ceilf+0x72>
 800b0ee:	2900      	cmp	r1, #0
 800b0f0:	bf18      	it	ne
 800b0f2:	f04f 537e 	movne.w	r3, #1065353216	; 0x3f800000
 800b0f6:	ee00 3a10 	vmov	s0, r3
 800b0fa:	4770      	bx	lr
 800b0fc:	4910      	ldr	r1, [pc, #64]	; (800b140 <ceilf+0x7c>)
 800b0fe:	4111      	asrs	r1, r2
 800b100:	420b      	tst	r3, r1
 800b102:	d0fa      	beq.n	800b0fa <ceilf+0x36>
 800b104:	eddf 7a0d 	vldr	s15, [pc, #52]	; 800b13c <ceilf+0x78>
 800b108:	ee30 0a27 	vadd.f32	s0, s0, s15
 800b10c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800b110:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b114:	ddef      	ble.n	800b0f6 <ceilf+0x32>
 800b116:	2b00      	cmp	r3, #0
 800b118:	bfc2      	ittt	gt
 800b11a:	f44f 0000 	movgt.w	r0, #8388608	; 0x800000
 800b11e:	fa40 f202 	asrgt.w	r2, r0, r2
 800b122:	189b      	addgt	r3, r3, r2
 800b124:	ea23 0301 	bic.w	r3, r3, r1
 800b128:	e7e5      	b.n	800b0f6 <ceilf+0x32>
 800b12a:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800b12e:	d3e4      	bcc.n	800b0fa <ceilf+0x36>
 800b130:	ee30 0a00 	vadd.f32	s0, s0, s0
 800b134:	4770      	bx	lr
 800b136:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 800b13a:	e7dc      	b.n	800b0f6 <ceilf+0x32>
 800b13c:	7149f2ca 	.word	0x7149f2ca
 800b140:	007fffff 	.word	0x007fffff

0800b144 <cosf>:
 800b144:	ee10 3a10 	vmov	r3, s0
 800b148:	b507      	push	{r0, r1, r2, lr}
 800b14a:	4a1c      	ldr	r2, [pc, #112]	; (800b1bc <cosf+0x78>)
 800b14c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b150:	4293      	cmp	r3, r2
 800b152:	dc04      	bgt.n	800b15e <cosf+0x1a>
 800b154:	eddf 0a1a 	vldr	s1, [pc, #104]	; 800b1c0 <cosf+0x7c>
 800b158:	f002 fabc 	bl	800d6d4 <__kernel_cosf>
 800b15c:	e004      	b.n	800b168 <cosf+0x24>
 800b15e:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800b162:	db04      	blt.n	800b16e <cosf+0x2a>
 800b164:	ee30 0a40 	vsub.f32	s0, s0, s0
 800b168:	b003      	add	sp, #12
 800b16a:	f85d fb04 	ldr.w	pc, [sp], #4
 800b16e:	4668      	mov	r0, sp
 800b170:	f002 f912 	bl	800d398 <__ieee754_rem_pio2f>
 800b174:	f000 0003 	and.w	r0, r0, #3
 800b178:	2801      	cmp	r0, #1
 800b17a:	d007      	beq.n	800b18c <cosf+0x48>
 800b17c:	2802      	cmp	r0, #2
 800b17e:	d00e      	beq.n	800b19e <cosf+0x5a>
 800b180:	b9a0      	cbnz	r0, 800b1ac <cosf+0x68>
 800b182:	eddd 0a01 	vldr	s1, [sp, #4]
 800b186:	ed9d 0a00 	vldr	s0, [sp]
 800b18a:	e7e5      	b.n	800b158 <cosf+0x14>
 800b18c:	eddd 0a01 	vldr	s1, [sp, #4]
 800b190:	ed9d 0a00 	vldr	s0, [sp]
 800b194:	f002 fd7e 	bl	800dc94 <__kernel_sinf>
 800b198:	eeb1 0a40 	vneg.f32	s0, s0
 800b19c:	e7e4      	b.n	800b168 <cosf+0x24>
 800b19e:	eddd 0a01 	vldr	s1, [sp, #4]
 800b1a2:	ed9d 0a00 	vldr	s0, [sp]
 800b1a6:	f002 fa95 	bl	800d6d4 <__kernel_cosf>
 800b1aa:	e7f5      	b.n	800b198 <cosf+0x54>
 800b1ac:	2001      	movs	r0, #1
 800b1ae:	eddd 0a01 	vldr	s1, [sp, #4]
 800b1b2:	ed9d 0a00 	vldr	s0, [sp]
 800b1b6:	f002 fd6d 	bl	800dc94 <__kernel_sinf>
 800b1ba:	e7d5      	b.n	800b168 <cosf+0x24>
 800b1bc:	3f490fd8 	.word	0x3f490fd8
 800b1c0:	00000000 	.word	0x00000000

0800b1c4 <erff>:
 800b1c4:	b538      	push	{r3, r4, r5, lr}
 800b1c6:	ee10 4a10 	vmov	r4, s0
 800b1ca:	f024 4500 	bic.w	r5, r4, #2147483648	; 0x80000000
 800b1ce:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800b1d2:	ed2d 8b06 	vpush	{d8-d10}
 800b1d6:	eef0 7a40 	vmov.f32	s15, s0
 800b1da:	db12      	blt.n	800b202 <erff+0x3e>
 800b1dc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b1e0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800b1e4:	0fe4      	lsrs	r4, r4, #31
 800b1e6:	0064      	lsls	r4, r4, #1
 800b1e8:	f1c4 0301 	rsb	r3, r4, #1
 800b1ec:	ee00 3a10 	vmov	s0, r3
 800b1f0:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 800b1f4:	ee70 7a07 	vadd.f32	s15, s0, s14
 800b1f8:	ecbd 8b06 	vpop	{d8-d10}
 800b1fc:	eeb0 0a67 	vmov.f32	s0, s15
 800b200:	bd38      	pop	{r3, r4, r5, pc}
 800b202:	4ba4      	ldr	r3, [pc, #656]	; (800b494 <erff+0x2d0>)
 800b204:	429d      	cmp	r5, r3
 800b206:	dc4a      	bgt.n	800b29e <erff+0xda>
 800b208:	f1b5 5f46 	cmp.w	r5, #830472192	; 0x31800000
 800b20c:	da16      	bge.n	800b23c <erff+0x78>
 800b20e:	f1b5 6f80 	cmp.w	r5, #67108864	; 0x4000000
 800b212:	da0e      	bge.n	800b232 <erff+0x6e>
 800b214:	ed9f 0aa0 	vldr	s0, [pc, #640]	; 800b498 <erff+0x2d4>
 800b218:	ee27 0a80 	vmul.f32	s0, s15, s0
 800b21c:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 800b220:	eea7 0a87 	vfma.f32	s0, s15, s14
 800b224:	eef0 7a40 	vmov.f32	s15, s0
 800b228:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 800b22c:	ee67 7a80 	vmul.f32	s15, s15, s0
 800b230:	e7e2      	b.n	800b1f8 <erff+0x34>
 800b232:	ed9f 7a9a 	vldr	s14, [pc, #616]	; 800b49c <erff+0x2d8>
 800b236:	eee0 7a07 	vfma.f32	s15, s0, s14
 800b23a:	e7dd      	b.n	800b1f8 <erff+0x34>
 800b23c:	ee20 7a00 	vmul.f32	s14, s0, s0
 800b240:	ed9f 6a97 	vldr	s12, [pc, #604]	; 800b4a0 <erff+0x2dc>
 800b244:	eddf 6a97 	vldr	s13, [pc, #604]	; 800b4a4 <erff+0x2e0>
 800b248:	eddf 5a97 	vldr	s11, [pc, #604]	; 800b4a8 <erff+0x2e4>
 800b24c:	eee7 6a06 	vfma.f32	s13, s14, s12
 800b250:	ed9f 6a96 	vldr	s12, [pc, #600]	; 800b4ac <erff+0x2e8>
 800b254:	eea6 6a87 	vfma.f32	s12, s13, s14
 800b258:	eddf 6a95 	vldr	s13, [pc, #596]	; 800b4b0 <erff+0x2ec>
 800b25c:	eee6 6a07 	vfma.f32	s13, s12, s14
 800b260:	ed9f 6a8e 	vldr	s12, [pc, #568]	; 800b49c <erff+0x2d8>
 800b264:	eea6 6a87 	vfma.f32	s12, s13, s14
 800b268:	eddf 6a92 	vldr	s13, [pc, #584]	; 800b4b4 <erff+0x2f0>
 800b26c:	eee7 6a25 	vfma.f32	s13, s14, s11
 800b270:	eddf 5a91 	vldr	s11, [pc, #580]	; 800b4b8 <erff+0x2f4>
 800b274:	eee6 5a87 	vfma.f32	s11, s13, s14
 800b278:	eddf 6a90 	vldr	s13, [pc, #576]	; 800b4bc <erff+0x2f8>
 800b27c:	eee5 6a87 	vfma.f32	s13, s11, s14
 800b280:	eddf 5a8f 	vldr	s11, [pc, #572]	; 800b4c0 <erff+0x2fc>
 800b284:	eee6 5a87 	vfma.f32	s11, s13, s14
 800b288:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800b28c:	eee5 6a87 	vfma.f32	s13, s11, s14
 800b290:	eeb0 7a66 	vmov.f32	s14, s13
 800b294:	eec6 6a07 	vdiv.f32	s13, s12, s14
 800b298:	eee0 7a26 	vfma.f32	s15, s0, s13
 800b29c:	e7ac      	b.n	800b1f8 <erff+0x34>
 800b29e:	4b89      	ldr	r3, [pc, #548]	; (800b4c4 <erff+0x300>)
 800b2a0:	429d      	cmp	r5, r3
 800b2a2:	dc44      	bgt.n	800b32e <erff+0x16a>
 800b2a4:	f000 f96e 	bl	800b584 <fabsf>
 800b2a8:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800b2ac:	ee30 0a67 	vsub.f32	s0, s0, s15
 800b2b0:	ed9f 7a85 	vldr	s14, [pc, #532]	; 800b4c8 <erff+0x304>
 800b2b4:	eddf 6a85 	vldr	s13, [pc, #532]	; 800b4cc <erff+0x308>
 800b2b8:	ed9f 6a85 	vldr	s12, [pc, #532]	; 800b4d0 <erff+0x30c>
 800b2bc:	eee0 6a07 	vfma.f32	s13, s0, s14
 800b2c0:	2c00      	cmp	r4, #0
 800b2c2:	ed9f 7a84 	vldr	s14, [pc, #528]	; 800b4d4 <erff+0x310>
 800b2c6:	eea6 7a80 	vfma.f32	s14, s13, s0
 800b2ca:	eddf 6a83 	vldr	s13, [pc, #524]	; 800b4d8 <erff+0x314>
 800b2ce:	eee7 6a00 	vfma.f32	s13, s14, s0
 800b2d2:	ed9f 7a82 	vldr	s14, [pc, #520]	; 800b4dc <erff+0x318>
 800b2d6:	eea6 7a80 	vfma.f32	s14, s13, s0
 800b2da:	eddf 6a81 	vldr	s13, [pc, #516]	; 800b4e0 <erff+0x31c>
 800b2de:	eee7 6a00 	vfma.f32	s13, s14, s0
 800b2e2:	ed9f 7a80 	vldr	s14, [pc, #512]	; 800b4e4 <erff+0x320>
 800b2e6:	eea6 7a80 	vfma.f32	s14, s13, s0
 800b2ea:	eddf 6a7f 	vldr	s13, [pc, #508]	; 800b4e8 <erff+0x324>
 800b2ee:	eee0 6a06 	vfma.f32	s13, s0, s12
 800b2f2:	ed9f 6a7e 	vldr	s12, [pc, #504]	; 800b4ec <erff+0x328>
 800b2f6:	eea6 6a80 	vfma.f32	s12, s13, s0
 800b2fa:	eddf 6a7d 	vldr	s13, [pc, #500]	; 800b4f0 <erff+0x32c>
 800b2fe:	eee6 6a00 	vfma.f32	s13, s12, s0
 800b302:	ed9f 6a7c 	vldr	s12, [pc, #496]	; 800b4f4 <erff+0x330>
 800b306:	eea6 6a80 	vfma.f32	s12, s13, s0
 800b30a:	eddf 6a7b 	vldr	s13, [pc, #492]	; 800b4f8 <erff+0x334>
 800b30e:	eee6 6a00 	vfma.f32	s13, s12, s0
 800b312:	eee6 7a80 	vfma.f32	s15, s13, s0
 800b316:	ee87 0a27 	vdiv.f32	s0, s14, s15
 800b31a:	bfab      	itete	ge
 800b31c:	eddf 7a77 	vldrge	s15, [pc, #476]	; 800b4fc <erff+0x338>
 800b320:	eddf 7a77 	vldrlt	s15, [pc, #476]	; 800b500 <erff+0x33c>
 800b324:	ee70 7a27 	vaddge.f32	s15, s0, s15
 800b328:	ee77 7ac0 	vsublt.f32	s15, s15, s0
 800b32c:	e764      	b.n	800b1f8 <erff+0x34>
 800b32e:	4b75      	ldr	r3, [pc, #468]	; (800b504 <erff+0x340>)
 800b330:	429d      	cmp	r5, r3
 800b332:	dd08      	ble.n	800b346 <erff+0x182>
 800b334:	2c00      	cmp	r4, #0
 800b336:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800b33a:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 800b33e:	bfa8      	it	ge
 800b340:	eef0 7a40 	vmovge.f32	s15, s0
 800b344:	e758      	b.n	800b1f8 <erff+0x34>
 800b346:	f000 f91d 	bl	800b584 <fabsf>
 800b34a:	4b6f      	ldr	r3, [pc, #444]	; (800b508 <erff+0x344>)
 800b34c:	ee60 7a00 	vmul.f32	s15, s0, s0
 800b350:	eeb0 9a40 	vmov.f32	s18, s0
 800b354:	429d      	cmp	r5, r3
 800b356:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800b35a:	ee80 7a27 	vdiv.f32	s14, s0, s15
 800b35e:	eef0 8a40 	vmov.f32	s17, s0
 800b362:	dc64      	bgt.n	800b42e <erff+0x26a>
 800b364:	eddf 7a69 	vldr	s15, [pc, #420]	; 800b50c <erff+0x348>
 800b368:	eddf 6a69 	vldr	s13, [pc, #420]	; 800b510 <erff+0x34c>
 800b36c:	eddf 9a69 	vldr	s19, [pc, #420]	; 800b514 <erff+0x350>
 800b370:	eee7 6a27 	vfma.f32	s13, s14, s15
 800b374:	eddf 7a68 	vldr	s15, [pc, #416]	; 800b518 <erff+0x354>
 800b378:	eee6 7a87 	vfma.f32	s15, s13, s14
 800b37c:	eddf 6a67 	vldr	s13, [pc, #412]	; 800b51c <erff+0x358>
 800b380:	eee7 6a87 	vfma.f32	s13, s15, s14
 800b384:	eddf 7a66 	vldr	s15, [pc, #408]	; 800b520 <erff+0x35c>
 800b388:	eee6 7a87 	vfma.f32	s15, s13, s14
 800b38c:	eddf 6a65 	vldr	s13, [pc, #404]	; 800b524 <erff+0x360>
 800b390:	eee7 6a87 	vfma.f32	s13, s15, s14
 800b394:	eddf 7a64 	vldr	s15, [pc, #400]	; 800b528 <erff+0x364>
 800b398:	eee6 7a87 	vfma.f32	s15, s13, s14
 800b39c:	eddf 6a63 	vldr	s13, [pc, #396]	; 800b52c <erff+0x368>
 800b3a0:	eee7 9a87 	vfma.f32	s19, s15, s14
 800b3a4:	eddf 7a62 	vldr	s15, [pc, #392]	; 800b530 <erff+0x36c>
 800b3a8:	eee7 7a26 	vfma.f32	s15, s14, s13
 800b3ac:	eddf 6a61 	vldr	s13, [pc, #388]	; 800b534 <erff+0x370>
 800b3b0:	eee7 6a87 	vfma.f32	s13, s15, s14
 800b3b4:	eddf 7a60 	vldr	s15, [pc, #384]	; 800b538 <erff+0x374>
 800b3b8:	eee6 7a87 	vfma.f32	s15, s13, s14
 800b3bc:	eddf 6a5f 	vldr	s13, [pc, #380]	; 800b53c <erff+0x378>
 800b3c0:	eee7 6a87 	vfma.f32	s13, s15, s14
 800b3c4:	eddf 7a5e 	vldr	s15, [pc, #376]	; 800b540 <erff+0x37c>
 800b3c8:	eee6 7a87 	vfma.f32	s15, s13, s14
 800b3cc:	eddf 6a5d 	vldr	s13, [pc, #372]	; 800b544 <erff+0x380>
 800b3d0:	eee7 6a87 	vfma.f32	s13, s15, s14
 800b3d4:	eddf 7a5c 	vldr	s15, [pc, #368]	; 800b548 <erff+0x384>
 800b3d8:	ee19 3a10 	vmov	r3, s18
 800b3dc:	eee6 7a87 	vfma.f32	s15, s13, s14
 800b3e0:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800b3e4:	f023 030f 	bic.w	r3, r3, #15
 800b3e8:	ee08 3a10 	vmov	s16, r3
 800b3ec:	eef0 aa68 	vmov.f32	s21, s17
 800b3f0:	eebe 0a02 	vmov.f32	s0, #226	; 0xbf100000 -0.5625000
 800b3f4:	eee7 aa87 	vfma.f32	s21, s15, s14
 800b3f8:	eea8 0a48 	vfms.f32	s0, s16, s16
 800b3fc:	f001 fac2 	bl	800c984 <__ieee754_expf>
 800b400:	eeb0 aa40 	vmov.f32	s20, s0
 800b404:	ee89 0aaa 	vdiv.f32	s0, s19, s21
 800b408:	ee78 7a49 	vsub.f32	s15, s16, s18
 800b40c:	ee38 8a09 	vadd.f32	s16, s16, s18
 800b410:	eea7 0a88 	vfma.f32	s0, s15, s16
 800b414:	f001 fab6 	bl	800c984 <__ieee754_expf>
 800b418:	ee2a 0a00 	vmul.f32	s0, s20, s0
 800b41c:	2c00      	cmp	r4, #0
 800b41e:	eec0 7a09 	vdiv.f32	s15, s0, s18
 800b422:	bfac      	ite	ge
 800b424:	ee78 7ae7 	vsubge.f32	s15, s17, s15
 800b428:	ee77 7ae8 	vsublt.f32	s15, s15, s17
 800b42c:	e6e4      	b.n	800b1f8 <erff+0x34>
 800b42e:	eddf 6a47 	vldr	s13, [pc, #284]	; 800b54c <erff+0x388>
 800b432:	eddf 7a47 	vldr	s15, [pc, #284]	; 800b550 <erff+0x38c>
 800b436:	eddf 9a47 	vldr	s19, [pc, #284]	; 800b554 <erff+0x390>
 800b43a:	eee7 7a26 	vfma.f32	s15, s14, s13
 800b43e:	eddf 6a46 	vldr	s13, [pc, #280]	; 800b558 <erff+0x394>
 800b442:	eee7 6a87 	vfma.f32	s13, s15, s14
 800b446:	eddf 7a45 	vldr	s15, [pc, #276]	; 800b55c <erff+0x398>
 800b44a:	eee6 7a87 	vfma.f32	s15, s13, s14
 800b44e:	eddf 6a44 	vldr	s13, [pc, #272]	; 800b560 <erff+0x39c>
 800b452:	eee7 6a87 	vfma.f32	s13, s15, s14
 800b456:	eddf 7a43 	vldr	s15, [pc, #268]	; 800b564 <erff+0x3a0>
 800b45a:	eee6 7a87 	vfma.f32	s15, s13, s14
 800b45e:	eddf 6a42 	vldr	s13, [pc, #264]	; 800b568 <erff+0x3a4>
 800b462:	eee7 9a87 	vfma.f32	s19, s15, s14
 800b466:	eddf 7a41 	vldr	s15, [pc, #260]	; 800b56c <erff+0x3a8>
 800b46a:	eee7 6a27 	vfma.f32	s13, s14, s15
 800b46e:	eddf 7a40 	vldr	s15, [pc, #256]	; 800b570 <erff+0x3ac>
 800b472:	eee6 7a87 	vfma.f32	s15, s13, s14
 800b476:	eddf 6a3f 	vldr	s13, [pc, #252]	; 800b574 <erff+0x3b0>
 800b47a:	eee7 6a87 	vfma.f32	s13, s15, s14
 800b47e:	eddf 7a3e 	vldr	s15, [pc, #248]	; 800b578 <erff+0x3b4>
 800b482:	eee6 7a87 	vfma.f32	s15, s13, s14
 800b486:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800b57c <erff+0x3b8>
 800b48a:	eee7 6a87 	vfma.f32	s13, s15, s14
 800b48e:	eddf 7a3c 	vldr	s15, [pc, #240]	; 800b580 <erff+0x3bc>
 800b492:	e7a1      	b.n	800b3d8 <erff+0x214>
 800b494:	3f57ffff 	.word	0x3f57ffff
 800b498:	3f8375d4 	.word	0x3f8375d4
 800b49c:	3e0375d4 	.word	0x3e0375d4
 800b4a0:	b7c756b1 	.word	0xb7c756b1
 800b4a4:	bbbd1489 	.word	0xbbbd1489
 800b4a8:	b684e21a 	.word	0xb684e21a
 800b4ac:	bce9528f 	.word	0xbce9528f
 800b4b0:	bea66beb 	.word	0xbea66beb
 800b4b4:	390aee49 	.word	0x390aee49
 800b4b8:	3ba68116 	.word	0x3ba68116
 800b4bc:	3d852a63 	.word	0x3d852a63
 800b4c0:	3ecbbbce 	.word	0x3ecbbbce
 800b4c4:	3f9fffff 	.word	0x3f9fffff
 800b4c8:	bb0df9c0 	.word	0xbb0df9c0
 800b4cc:	3d1151b3 	.word	0x3d1151b3
 800b4d0:	3c445aa3 	.word	0x3c445aa3
 800b4d4:	bde31cc2 	.word	0xbde31cc2
 800b4d8:	3ea2fe54 	.word	0x3ea2fe54
 800b4dc:	bebe9208 	.word	0xbebe9208
 800b4e0:	3ed46805 	.word	0x3ed46805
 800b4e4:	bb1acdc6 	.word	0xbb1acdc6
 800b4e8:	3c5f6e13 	.word	0x3c5f6e13
 800b4ec:	3e013307 	.word	0x3e013307
 800b4f0:	3d931ae7 	.word	0x3d931ae7
 800b4f4:	3f0a5785 	.word	0x3f0a5785
 800b4f8:	3dd9f331 	.word	0x3dd9f331
 800b4fc:	3f58560b 	.word	0x3f58560b
 800b500:	bf58560b 	.word	0xbf58560b
 800b504:	40bfffff 	.word	0x40bfffff
 800b508:	4036db6d 	.word	0x4036db6d
 800b50c:	c11d077e 	.word	0xc11d077e
 800b510:	c2a2932b 	.word	0xc2a2932b
 800b514:	bc21a093 	.word	0xbc21a093
 800b518:	c3389ae7 	.word	0xc3389ae7
 800b51c:	c322658c 	.word	0xc322658c
 800b520:	c2798057 	.word	0xc2798057
 800b524:	c128f022 	.word	0xc128f022
 800b528:	bf31a0b7 	.word	0xbf31a0b7
 800b52c:	bd777f97 	.word	0xbd777f97
 800b530:	40d23f7c 	.word	0x40d23f7c
 800b534:	42d9451f 	.word	0x42d9451f
 800b538:	43d6810b 	.word	0x43d6810b
 800b53c:	442158c9 	.word	0x442158c9
 800b540:	43d9486f 	.word	0x43d9486f
 800b544:	4309a863 	.word	0x4309a863
 800b548:	419d35ce 	.word	0x419d35ce
 800b54c:	c3f1c275 	.word	0xc3f1c275
 800b550:	c480230b 	.word	0xc480230b
 800b554:	bc21a092 	.word	0xbc21a092
 800b558:	c41f6441 	.word	0xc41f6441
 800b55c:	c320a2ea 	.word	0xc320a2ea
 800b560:	c18e104b 	.word	0xc18e104b
 800b564:	bf4c9dd4 	.word	0xbf4c9dd4
 800b568:	43ed43a7 	.word	0x43ed43a7
 800b56c:	c1b38712 	.word	0xc1b38712
 800b570:	451f90ce 	.word	0x451f90ce
 800b574:	4547fdbb 	.word	0x4547fdbb
 800b578:	44c01759 	.word	0x44c01759
 800b57c:	43a2e571 	.word	0x43a2e571
 800b580:	41f2b459 	.word	0x41f2b459

0800b584 <fabsf>:
 800b584:	ee10 3a10 	vmov	r3, s0
 800b588:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b58c:	ee00 3a10 	vmov	s0, r3
 800b590:	4770      	bx	lr
	...

0800b594 <floorf>:
 800b594:	ee10 3a10 	vmov	r3, s0
 800b598:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800b59c:	0dca      	lsrs	r2, r1, #23
 800b59e:	3a7f      	subs	r2, #127	; 0x7f
 800b5a0:	2a16      	cmp	r2, #22
 800b5a2:	dc2a      	bgt.n	800b5fa <floorf+0x66>
 800b5a4:	2a00      	cmp	r2, #0
 800b5a6:	da11      	bge.n	800b5cc <floorf+0x38>
 800b5a8:	eddf 7a18 	vldr	s15, [pc, #96]	; 800b60c <floorf+0x78>
 800b5ac:	ee30 0a27 	vadd.f32	s0, s0, s15
 800b5b0:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800b5b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b5b8:	dd05      	ble.n	800b5c6 <floorf+0x32>
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	da23      	bge.n	800b606 <floorf+0x72>
 800b5be:	4a14      	ldr	r2, [pc, #80]	; (800b610 <floorf+0x7c>)
 800b5c0:	2900      	cmp	r1, #0
 800b5c2:	bf18      	it	ne
 800b5c4:	4613      	movne	r3, r2
 800b5c6:	ee00 3a10 	vmov	s0, r3
 800b5ca:	4770      	bx	lr
 800b5cc:	4911      	ldr	r1, [pc, #68]	; (800b614 <floorf+0x80>)
 800b5ce:	4111      	asrs	r1, r2
 800b5d0:	420b      	tst	r3, r1
 800b5d2:	d0fa      	beq.n	800b5ca <floorf+0x36>
 800b5d4:	eddf 7a0d 	vldr	s15, [pc, #52]	; 800b60c <floorf+0x78>
 800b5d8:	ee30 0a27 	vadd.f32	s0, s0, s15
 800b5dc:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800b5e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b5e4:	ddef      	ble.n	800b5c6 <floorf+0x32>
 800b5e6:	2b00      	cmp	r3, #0
 800b5e8:	bfbe      	ittt	lt
 800b5ea:	f44f 0000 	movlt.w	r0, #8388608	; 0x800000
 800b5ee:	fa40 f202 	asrlt.w	r2, r0, r2
 800b5f2:	189b      	addlt	r3, r3, r2
 800b5f4:	ea23 0301 	bic.w	r3, r3, r1
 800b5f8:	e7e5      	b.n	800b5c6 <floorf+0x32>
 800b5fa:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800b5fe:	d3e4      	bcc.n	800b5ca <floorf+0x36>
 800b600:	ee30 0a00 	vadd.f32	s0, s0, s0
 800b604:	4770      	bx	lr
 800b606:	2300      	movs	r3, #0
 800b608:	e7dd      	b.n	800b5c6 <floorf+0x32>
 800b60a:	bf00      	nop
 800b60c:	7149f2ca 	.word	0x7149f2ca
 800b610:	bf800000 	.word	0xbf800000
 800b614:	007fffff 	.word	0x007fffff

0800b618 <log1pf>:
 800b618:	ee10 2a10 	vmov	r2, s0
 800b61c:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 800b620:	db02      	blt.n	800b628 <log1pf+0x10>
 800b622:	ee30 0a00 	vadd.f32	s0, s0, s0
 800b626:	4770      	bx	lr
 800b628:	4b70      	ldr	r3, [pc, #448]	; (800b7ec <log1pf+0x1d4>)
 800b62a:	429a      	cmp	r2, r3
 800b62c:	dc78      	bgt.n	800b720 <log1pf+0x108>
 800b62e:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 800b632:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 800b636:	db12      	blt.n	800b65e <log1pf+0x46>
 800b638:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 800b63c:	eeb4 0a67 	vcmp.f32	s0, s15
 800b640:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b644:	bf05      	ittet	eq
 800b646:	ed9f 7a6a 	vldreq	s14, [pc, #424]	; 800b7f0 <log1pf+0x1d8>
 800b64a:	eddf 7a6a 	vldreq	s15, [pc, #424]	; 800b7f4 <log1pf+0x1dc>
 800b64e:	ee70 7a40 	vsubne.f32	s15, s0, s0
 800b652:	ee87 0a27 	vdiveq.f32	s0, s14, s15
 800b656:	bf18      	it	ne
 800b658:	ee87 0aa7 	vdivne.f32	s0, s15, s15
 800b65c:	4770      	bx	lr
 800b65e:	f1b3 5f44 	cmp.w	r3, #822083584	; 0x31000000
 800b662:	da13      	bge.n	800b68c <log1pf+0x74>
 800b664:	eddf 7a64 	vldr	s15, [pc, #400]	; 800b7f8 <log1pf+0x1e0>
 800b668:	ee70 7a27 	vadd.f32	s15, s0, s15
 800b66c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800b670:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b674:	dd03      	ble.n	800b67e <log1pf+0x66>
 800b676:	f1b3 5f12 	cmp.w	r3, #612368384	; 0x24800000
 800b67a:	f2c0 80b6 	blt.w	800b7ea <log1pf+0x1d2>
 800b67e:	ee20 7a40 	vnmul.f32	s14, s0, s0
 800b682:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800b686:	eea7 0a27 	vfma.f32	s0, s14, s15
 800b68a:	4770      	bx	lr
 800b68c:	4b5b      	ldr	r3, [pc, #364]	; (800b7fc <log1pf+0x1e4>)
 800b68e:	441a      	add	r2, r3
 800b690:	429a      	cmp	r2, r3
 800b692:	d84d      	bhi.n	800b730 <log1pf+0x118>
 800b694:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800b698:	ee30 7a27 	vadd.f32	s14, s0, s15
 800b69c:	ee17 2a10 	vmov	r2, s14
 800b6a0:	15d3      	asrs	r3, r2, #23
 800b6a2:	3b7f      	subs	r3, #127	; 0x7f
 800b6a4:	2b00      	cmp	r3, #0
 800b6a6:	bfcb      	itete	gt
 800b6a8:	ee37 0a40 	vsubgt.f32	s0, s14, s0
 800b6ac:	ee77 7a67 	vsuble.f32	s15, s14, s15
 800b6b0:	ee37 0ac0 	vsubgt.f32	s0, s15, s0
 800b6b4:	ee30 0a67 	vsuble.f32	s0, s0, s15
 800b6b8:	eec0 6a07 	vdiv.f32	s13, s0, s14
 800b6bc:	4950      	ldr	r1, [pc, #320]	; (800b800 <log1pf+0x1e8>)
 800b6be:	f3c2 0216 	ubfx	r2, r2, #0, #23
 800b6c2:	428a      	cmp	r2, r1
 800b6c4:	bfc9      	itett	gt
 800b6c6:	f042 517c 	orrgt.w	r1, r2, #1056964608	; 0x3f000000
 800b6ca:	f042 517e 	orrle.w	r1, r2, #1065353216	; 0x3f800000
 800b6ce:	f5c2 0200 	rsbgt	r2, r2, #8388608	; 0x800000
 800b6d2:	3301      	addgt	r3, #1
 800b6d4:	bfc8      	it	gt
 800b6d6:	1092      	asrgt	r2, r2, #2
 800b6d8:	ee07 1a90 	vmov	s15, r1
 800b6dc:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800b6e0:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800b6e4:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800b6e8:	ee20 7a07 	vmul.f32	s14, s0, s14
 800b6ec:	ee27 7a00 	vmul.f32	s14, s14, s0
 800b6f0:	2a00      	cmp	r2, #0
 800b6f2:	d13d      	bne.n	800b770 <log1pf+0x158>
 800b6f4:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800b6f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800b6fc:	d11b      	bne.n	800b736 <log1pf+0x11e>
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d071      	beq.n	800b7e6 <log1pf+0x1ce>
 800b702:	ee07 3a90 	vmov	s15, r3
 800b706:	ed9f 7a3f 	vldr	s14, [pc, #252]	; 800b804 <log1pf+0x1ec>
 800b70a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b70e:	eee7 6a87 	vfma.f32	s13, s15, s14
 800b712:	ed9f 7a3d 	vldr	s14, [pc, #244]	; 800b808 <log1pf+0x1f0>
 800b716:	eeb0 0a66 	vmov.f32	s0, s13
 800b71a:	eea7 0a87 	vfma.f32	s0, s15, s14
 800b71e:	4770      	bx	lr
 800b720:	f1b2 4fb4 	cmp.w	r2, #1509949440	; 0x5a000000
 800b724:	dbb6      	blt.n	800b694 <log1pf+0x7c>
 800b726:	15d3      	asrs	r3, r2, #23
 800b728:	3b7f      	subs	r3, #127	; 0x7f
 800b72a:	eddf 6a32 	vldr	s13, [pc, #200]	; 800b7f4 <log1pf+0x1dc>
 800b72e:	e7c5      	b.n	800b6bc <log1pf+0xa4>
 800b730:	2201      	movs	r2, #1
 800b732:	2300      	movs	r3, #0
 800b734:	e7d6      	b.n	800b6e4 <log1pf+0xcc>
 800b736:	eddf 7a35 	vldr	s15, [pc, #212]	; 800b80c <log1pf+0x1f4>
 800b73a:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800b73e:	eea0 6a67 	vfms.f32	s12, s0, s15
 800b742:	ee26 6a07 	vmul.f32	s12, s12, s14
 800b746:	b913      	cbnz	r3, 800b74e <log1pf+0x136>
 800b748:	ee30 0a46 	vsub.f32	s0, s0, s12
 800b74c:	4770      	bx	lr
 800b74e:	ee07 3a90 	vmov	s15, r3
 800b752:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 800b804 <log1pf+0x1ec>
 800b756:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b75a:	eee7 6a87 	vfma.f32	s13, s15, s14
 800b75e:	ee36 7a66 	vsub.f32	s14, s12, s13
 800b762:	ee37 0a40 	vsub.f32	s0, s14, s0
 800b766:	ed9f 7a28 	vldr	s14, [pc, #160]	; 800b808 <log1pf+0x1f0>
 800b76a:	ee97 0a87 	vfnms.f32	s0, s15, s14
 800b76e:	4770      	bx	lr
 800b770:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 800b774:	ee70 7a27 	vadd.f32	s15, s0, s15
 800b778:	ed9f 6a25 	vldr	s12, [pc, #148]	; 800b810 <log1pf+0x1f8>
 800b77c:	ed9f 5a25 	vldr	s10, [pc, #148]	; 800b814 <log1pf+0x1fc>
 800b780:	eec0 5a27 	vdiv.f32	s11, s0, s15
 800b784:	ee65 7aa5 	vmul.f32	s15, s11, s11
 800b788:	eea7 5a86 	vfma.f32	s10, s15, s12
 800b78c:	ed9f 6a22 	vldr	s12, [pc, #136]	; 800b818 <log1pf+0x200>
 800b790:	eea5 6a27 	vfma.f32	s12, s10, s15
 800b794:	ed9f 5a21 	vldr	s10, [pc, #132]	; 800b81c <log1pf+0x204>
 800b798:	eea6 5a27 	vfma.f32	s10, s12, s15
 800b79c:	ed9f 6a20 	vldr	s12, [pc, #128]	; 800b820 <log1pf+0x208>
 800b7a0:	eea5 6a27 	vfma.f32	s12, s10, s15
 800b7a4:	ed9f 5a1f 	vldr	s10, [pc, #124]	; 800b824 <log1pf+0x20c>
 800b7a8:	eea6 5a27 	vfma.f32	s10, s12, s15
 800b7ac:	ed9f 6a17 	vldr	s12, [pc, #92]	; 800b80c <log1pf+0x1f4>
 800b7b0:	eea5 6a27 	vfma.f32	s12, s10, s15
 800b7b4:	eeb0 5a47 	vmov.f32	s10, s14
 800b7b8:	eea6 5a27 	vfma.f32	s10, s12, s15
 800b7bc:	ee25 6a25 	vmul.f32	s12, s10, s11
 800b7c0:	b923      	cbnz	r3, 800b7cc <log1pf+0x1b4>
 800b7c2:	ee37 7a46 	vsub.f32	s14, s14, s12
 800b7c6:	ee30 0a47 	vsub.f32	s0, s0, s14
 800b7ca:	4770      	bx	lr
 800b7cc:	ee07 3a90 	vmov	s15, r3
 800b7d0:	eddf 5a0c 	vldr	s11, [pc, #48]	; 800b804 <log1pf+0x1ec>
 800b7d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b7d8:	eee7 6aa5 	vfma.f32	s13, s15, s11
 800b7dc:	ee76 6a86 	vadd.f32	s13, s13, s12
 800b7e0:	ee37 7a66 	vsub.f32	s14, s14, s13
 800b7e4:	e7bd      	b.n	800b762 <log1pf+0x14a>
 800b7e6:	ed9f 0a03 	vldr	s0, [pc, #12]	; 800b7f4 <log1pf+0x1dc>
 800b7ea:	4770      	bx	lr
 800b7ec:	3ed413d6 	.word	0x3ed413d6
 800b7f0:	cc000000 	.word	0xcc000000
 800b7f4:	00000000 	.word	0x00000000
 800b7f8:	4c000000 	.word	0x4c000000
 800b7fc:	416a09e0 	.word	0x416a09e0
 800b800:	003504f6 	.word	0x003504f6
 800b804:	3717f7d1 	.word	0x3717f7d1
 800b808:	3f317180 	.word	0x3f317180
 800b80c:	3f2aaaab 	.word	0x3f2aaaab
 800b810:	3e178897 	.word	0x3e178897
 800b814:	3e1cd04f 	.word	0x3e1cd04f
 800b818:	3e3a3325 	.word	0x3e3a3325
 800b81c:	3e638e29 	.word	0x3e638e29
 800b820:	3e924925 	.word	0x3e924925
 800b824:	3ecccccd 	.word	0x3ecccccd

0800b828 <roundf>:
 800b828:	ee10 0a10 	vmov	r0, s0
 800b82c:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 800b830:	f1a3 027f 	sub.w	r2, r3, #127	; 0x7f
 800b834:	2a16      	cmp	r2, #22
 800b836:	dc15      	bgt.n	800b864 <roundf+0x3c>
 800b838:	2a00      	cmp	r2, #0
 800b83a:	da08      	bge.n	800b84e <roundf+0x26>
 800b83c:	3201      	adds	r2, #1
 800b83e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 800b842:	d101      	bne.n	800b848 <roundf+0x20>
 800b844:	f043 537e 	orr.w	r3, r3, #1065353216	; 0x3f800000
 800b848:	ee00 3a10 	vmov	s0, r3
 800b84c:	4770      	bx	lr
 800b84e:	4908      	ldr	r1, [pc, #32]	; (800b870 <roundf+0x48>)
 800b850:	4111      	asrs	r1, r2
 800b852:	4208      	tst	r0, r1
 800b854:	d0fa      	beq.n	800b84c <roundf+0x24>
 800b856:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800b85a:	4113      	asrs	r3, r2
 800b85c:	4403      	add	r3, r0
 800b85e:	ea23 0301 	bic.w	r3, r3, r1
 800b862:	e7f1      	b.n	800b848 <roundf+0x20>
 800b864:	2a80      	cmp	r2, #128	; 0x80
 800b866:	d1f1      	bne.n	800b84c <roundf+0x24>
 800b868:	ee30 0a00 	vadd.f32	s0, s0, s0
 800b86c:	4770      	bx	lr
 800b86e:	bf00      	nop
 800b870:	007fffff 	.word	0x007fffff

0800b874 <sinf>:
 800b874:	ee10 3a10 	vmov	r3, s0
 800b878:	b507      	push	{r0, r1, r2, lr}
 800b87a:	4a1d      	ldr	r2, [pc, #116]	; (800b8f0 <sinf+0x7c>)
 800b87c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b880:	4293      	cmp	r3, r2
 800b882:	dc05      	bgt.n	800b890 <sinf+0x1c>
 800b884:	eddf 0a1b 	vldr	s1, [pc, #108]	; 800b8f4 <sinf+0x80>
 800b888:	2000      	movs	r0, #0
 800b88a:	f002 fa03 	bl	800dc94 <__kernel_sinf>
 800b88e:	e004      	b.n	800b89a <sinf+0x26>
 800b890:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800b894:	db04      	blt.n	800b8a0 <sinf+0x2c>
 800b896:	ee30 0a40 	vsub.f32	s0, s0, s0
 800b89a:	b003      	add	sp, #12
 800b89c:	f85d fb04 	ldr.w	pc, [sp], #4
 800b8a0:	4668      	mov	r0, sp
 800b8a2:	f001 fd79 	bl	800d398 <__ieee754_rem_pio2f>
 800b8a6:	f000 0003 	and.w	r0, r0, #3
 800b8aa:	2801      	cmp	r0, #1
 800b8ac:	d008      	beq.n	800b8c0 <sinf+0x4c>
 800b8ae:	2802      	cmp	r0, #2
 800b8b0:	d00d      	beq.n	800b8ce <sinf+0x5a>
 800b8b2:	b9b0      	cbnz	r0, 800b8e2 <sinf+0x6e>
 800b8b4:	2001      	movs	r0, #1
 800b8b6:	eddd 0a01 	vldr	s1, [sp, #4]
 800b8ba:	ed9d 0a00 	vldr	s0, [sp]
 800b8be:	e7e4      	b.n	800b88a <sinf+0x16>
 800b8c0:	eddd 0a01 	vldr	s1, [sp, #4]
 800b8c4:	ed9d 0a00 	vldr	s0, [sp]
 800b8c8:	f001 ff04 	bl	800d6d4 <__kernel_cosf>
 800b8cc:	e7e5      	b.n	800b89a <sinf+0x26>
 800b8ce:	2001      	movs	r0, #1
 800b8d0:	eddd 0a01 	vldr	s1, [sp, #4]
 800b8d4:	ed9d 0a00 	vldr	s0, [sp]
 800b8d8:	f002 f9dc 	bl	800dc94 <__kernel_sinf>
 800b8dc:	eeb1 0a40 	vneg.f32	s0, s0
 800b8e0:	e7db      	b.n	800b89a <sinf+0x26>
 800b8e2:	eddd 0a01 	vldr	s1, [sp, #4]
 800b8e6:	ed9d 0a00 	vldr	s0, [sp]
 800b8ea:	f001 fef3 	bl	800d6d4 <__kernel_cosf>
 800b8ee:	e7f5      	b.n	800b8dc <sinf+0x68>
 800b8f0:	3f490fd8 	.word	0x3f490fd8
 800b8f4:	00000000 	.word	0x00000000

0800b8f8 <tanf>:
 800b8f8:	ee10 3a10 	vmov	r3, s0
 800b8fc:	b507      	push	{r0, r1, r2, lr}
 800b8fe:	4a10      	ldr	r2, [pc, #64]	; (800b940 <tanf+0x48>)
 800b900:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b904:	4293      	cmp	r3, r2
 800b906:	dc05      	bgt.n	800b914 <tanf+0x1c>
 800b908:	eddf 0a0e 	vldr	s1, [pc, #56]	; 800b944 <tanf+0x4c>
 800b90c:	2001      	movs	r0, #1
 800b90e:	f002 fa09 	bl	800dd24 <__kernel_tanf>
 800b912:	e004      	b.n	800b91e <tanf+0x26>
 800b914:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800b918:	db04      	blt.n	800b924 <tanf+0x2c>
 800b91a:	ee30 0a40 	vsub.f32	s0, s0, s0
 800b91e:	b003      	add	sp, #12
 800b920:	f85d fb04 	ldr.w	pc, [sp], #4
 800b924:	4668      	mov	r0, sp
 800b926:	f001 fd37 	bl	800d398 <__ieee754_rem_pio2f>
 800b92a:	0040      	lsls	r0, r0, #1
 800b92c:	f000 0002 	and.w	r0, r0, #2
 800b930:	f1c0 0001 	rsb	r0, r0, #1
 800b934:	eddd 0a01 	vldr	s1, [sp, #4]
 800b938:	ed9d 0a00 	vldr	s0, [sp]
 800b93c:	e7e7      	b.n	800b90e <tanf+0x16>
 800b93e:	bf00      	nop
 800b940:	3f490fda 	.word	0x3f490fda
 800b944:	00000000 	.word	0x00000000

0800b948 <tanhf>:
 800b948:	b510      	push	{r4, lr}
 800b94a:	ee10 4a10 	vmov	r4, s0
 800b94e:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800b952:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800b956:	ed2d 8b02 	vpush	{d8}
 800b95a:	eef0 7a40 	vmov.f32	s15, s0
 800b95e:	db0c      	blt.n	800b97a <tanhf+0x32>
 800b960:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800b964:	ee87 0a27 	vdiv.f32	s0, s14, s15
 800b968:	2c00      	cmp	r4, #0
 800b96a:	bfac      	ite	ge
 800b96c:	ee30 0a07 	vaddge.f32	s0, s0, s14
 800b970:	ee30 0a47 	vsublt.f32	s0, s0, s14
 800b974:	ecbd 8b02 	vpop	{d8}
 800b978:	bd10      	pop	{r4, pc}
 800b97a:	4a1b      	ldr	r2, [pc, #108]	; (800b9e8 <tanhf+0xa0>)
 800b97c:	4293      	cmp	r3, r2
 800b97e:	dc30      	bgt.n	800b9e2 <tanhf+0x9a>
 800b980:	f1b3 5f10 	cmp.w	r3, #603979776	; 0x24000000
 800b984:	da06      	bge.n	800b994 <tanhf+0x4c>
 800b986:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800b98a:	ee37 0a80 	vadd.f32	s0, s15, s0
 800b98e:	ee20 0a27 	vmul.f32	s0, s0, s15
 800b992:	e7ef      	b.n	800b974 <tanhf+0x2c>
 800b994:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 800b998:	eeb0 8a00 	vmov.f32	s16, #0	; 0x40000000  2.0
 800b99c:	db12      	blt.n	800b9c4 <tanhf+0x7c>
 800b99e:	f7ff fdf1 	bl	800b584 <fabsf>
 800b9a2:	ee30 0a00 	vadd.f32	s0, s0, s0
 800b9a6:	f002 faab 	bl	800df00 <expm1f>
 800b9aa:	ee30 0a08 	vadd.f32	s0, s0, s16
 800b9ae:	eec8 7a00 	vdiv.f32	s15, s16, s0
 800b9b2:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800b9b6:	ee30 0a67 	vsub.f32	s0, s0, s15
 800b9ba:	2c00      	cmp	r4, #0
 800b9bc:	bfb8      	it	lt
 800b9be:	eeb1 0a40 	vneglt.f32	s0, s0
 800b9c2:	e7d7      	b.n	800b974 <tanhf+0x2c>
 800b9c4:	f7ff fdde 	bl	800b584 <fabsf>
 800b9c8:	eef8 7a00 	vmov.f32	s15, #128	; 0xc0000000 -2.0
 800b9cc:	ee20 0a27 	vmul.f32	s0, s0, s15
 800b9d0:	f002 fa96 	bl	800df00 <expm1f>
 800b9d4:	ee70 7a08 	vadd.f32	s15, s0, s16
 800b9d8:	eeb1 7a40 	vneg.f32	s14, s0
 800b9dc:	ee87 0a27 	vdiv.f32	s0, s14, s15
 800b9e0:	e7eb      	b.n	800b9ba <tanhf+0x72>
 800b9e2:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800b9e6:	e7e8      	b.n	800b9ba <tanhf+0x72>
 800b9e8:	41afffff 	.word	0x41afffff

0800b9ec <acosf>:
 800b9ec:	b510      	push	{r4, lr}
 800b9ee:	ed2d 8b02 	vpush	{d8}
 800b9f2:	4c27      	ldr	r4, [pc, #156]	; (800ba90 <acosf+0xa4>)
 800b9f4:	b08a      	sub	sp, #40	; 0x28
 800b9f6:	eeb0 8a40 	vmov.f32	s16, s0
 800b9fa:	f000 fce1 	bl	800c3c0 <__ieee754_acosf>
 800b9fe:	f994 3000 	ldrsb.w	r3, [r4]
 800ba02:	3301      	adds	r3, #1
 800ba04:	eef0 8a40 	vmov.f32	s17, s0
 800ba08:	d03c      	beq.n	800ba84 <acosf+0x98>
 800ba0a:	eeb4 8a48 	vcmp.f32	s16, s16
 800ba0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba12:	d637      	bvs.n	800ba84 <acosf+0x98>
 800ba14:	eeb0 0a48 	vmov.f32	s0, s16
 800ba18:	f7ff fdb4 	bl	800b584 <fabsf>
 800ba1c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800ba20:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800ba24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ba28:	dd2c      	ble.n	800ba84 <acosf+0x98>
 800ba2a:	2301      	movs	r3, #1
 800ba2c:	9300      	str	r3, [sp, #0]
 800ba2e:	4b19      	ldr	r3, [pc, #100]	; (800ba94 <acosf+0xa8>)
 800ba30:	9301      	str	r3, [sp, #4]
 800ba32:	ee18 0a10 	vmov	r0, s16
 800ba36:	2300      	movs	r3, #0
 800ba38:	9308      	str	r3, [sp, #32]
 800ba3a:	f7fb f91d 	bl	8006c78 <__aeabi_f2d>
 800ba3e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ba42:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ba46:	4814      	ldr	r0, [pc, #80]	; (800ba98 <acosf+0xac>)
 800ba48:	f002 fa52 	bl	800def0 <nan>
 800ba4c:	f994 3000 	ldrsb.w	r3, [r4]
 800ba50:	2b02      	cmp	r3, #2
 800ba52:	ed8d 0b06 	vstr	d0, [sp, #24]
 800ba56:	d104      	bne.n	800ba62 <acosf+0x76>
 800ba58:	f7ff f9ac 	bl	800adb4 <__errno>
 800ba5c:	2321      	movs	r3, #33	; 0x21
 800ba5e:	6003      	str	r3, [r0, #0]
 800ba60:	e004      	b.n	800ba6c <acosf+0x80>
 800ba62:	4668      	mov	r0, sp
 800ba64:	f002 fa42 	bl	800deec <matherr>
 800ba68:	2800      	cmp	r0, #0
 800ba6a:	d0f5      	beq.n	800ba58 <acosf+0x6c>
 800ba6c:	9b08      	ldr	r3, [sp, #32]
 800ba6e:	b11b      	cbz	r3, 800ba78 <acosf+0x8c>
 800ba70:	f7ff f9a0 	bl	800adb4 <__errno>
 800ba74:	9b08      	ldr	r3, [sp, #32]
 800ba76:	6003      	str	r3, [r0, #0]
 800ba78:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ba7c:	f7fb fb66 	bl	800714c <__aeabi_d2f>
 800ba80:	ee08 0a90 	vmov	s17, r0
 800ba84:	eeb0 0a68 	vmov.f32	s0, s17
 800ba88:	b00a      	add	sp, #40	; 0x28
 800ba8a:	ecbd 8b02 	vpop	{d8}
 800ba8e:	bd10      	pop	{r4, pc}
 800ba90:	20000e58 	.word	0x20000e58
 800ba94:	08073448 	.word	0x08073448
 800ba98:	0807346c 	.word	0x0807346c

0800ba9c <acoshf>:
 800ba9c:	b510      	push	{r4, lr}
 800ba9e:	ed2d 8b02 	vpush	{d8}
 800baa2:	b08a      	sub	sp, #40	; 0x28
 800baa4:	eeb0 8a40 	vmov.f32	s16, s0
 800baa8:	f000 fd86 	bl	800c5b8 <__ieee754_acoshf>
 800baac:	4b21      	ldr	r3, [pc, #132]	; (800bb34 <acoshf+0x98>)
 800baae:	f993 4000 	ldrsb.w	r4, [r3]
 800bab2:	1c63      	adds	r3, r4, #1
 800bab4:	d039      	beq.n	800bb2a <acoshf+0x8e>
 800bab6:	eeb4 8a48 	vcmp.f32	s16, s16
 800baba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800babe:	d634      	bvs.n	800bb2a <acoshf+0x8e>
 800bac0:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800bac4:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800bac8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bacc:	d52d      	bpl.n	800bb2a <acoshf+0x8e>
 800bace:	2301      	movs	r3, #1
 800bad0:	9300      	str	r3, [sp, #0]
 800bad2:	4b19      	ldr	r3, [pc, #100]	; (800bb38 <acoshf+0x9c>)
 800bad4:	9301      	str	r3, [sp, #4]
 800bad6:	ee18 0a10 	vmov	r0, s16
 800bada:	2300      	movs	r3, #0
 800badc:	9308      	str	r3, [sp, #32]
 800bade:	f7fb f8cb 	bl	8006c78 <__aeabi_f2d>
 800bae2:	2200      	movs	r2, #0
 800bae4:	2300      	movs	r3, #0
 800bae6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800baea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800baee:	4610      	mov	r0, r2
 800baf0:	4619      	mov	r1, r3
 800baf2:	f7fb fa43 	bl	8006f7c <__aeabi_ddiv>
 800baf6:	2c02      	cmp	r4, #2
 800baf8:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800bafc:	d104      	bne.n	800bb08 <acoshf+0x6c>
 800bafe:	f7ff f959 	bl	800adb4 <__errno>
 800bb02:	2321      	movs	r3, #33	; 0x21
 800bb04:	6003      	str	r3, [r0, #0]
 800bb06:	e004      	b.n	800bb12 <acoshf+0x76>
 800bb08:	4668      	mov	r0, sp
 800bb0a:	f002 f9ef 	bl	800deec <matherr>
 800bb0e:	2800      	cmp	r0, #0
 800bb10:	d0f5      	beq.n	800bafe <acoshf+0x62>
 800bb12:	9b08      	ldr	r3, [sp, #32]
 800bb14:	b11b      	cbz	r3, 800bb1e <acoshf+0x82>
 800bb16:	f7ff f94d 	bl	800adb4 <__errno>
 800bb1a:	9b08      	ldr	r3, [sp, #32]
 800bb1c:	6003      	str	r3, [r0, #0]
 800bb1e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bb22:	f7fb fb13 	bl	800714c <__aeabi_d2f>
 800bb26:	ee00 0a10 	vmov	s0, r0
 800bb2a:	b00a      	add	sp, #40	; 0x28
 800bb2c:	ecbd 8b02 	vpop	{d8}
 800bb30:	bd10      	pop	{r4, pc}
 800bb32:	bf00      	nop
 800bb34:	20000e58 	.word	0x20000e58
 800bb38:	0807344e 	.word	0x0807344e

0800bb3c <asinf>:
 800bb3c:	b510      	push	{r4, lr}
 800bb3e:	ed2d 8b02 	vpush	{d8}
 800bb42:	4c27      	ldr	r4, [pc, #156]	; (800bbe0 <asinf+0xa4>)
 800bb44:	b08a      	sub	sp, #40	; 0x28
 800bb46:	eeb0 8a40 	vmov.f32	s16, s0
 800bb4a:	f000 fd89 	bl	800c660 <__ieee754_asinf>
 800bb4e:	f994 3000 	ldrsb.w	r3, [r4]
 800bb52:	3301      	adds	r3, #1
 800bb54:	eef0 8a40 	vmov.f32	s17, s0
 800bb58:	d03c      	beq.n	800bbd4 <asinf+0x98>
 800bb5a:	eeb4 8a48 	vcmp.f32	s16, s16
 800bb5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb62:	d637      	bvs.n	800bbd4 <asinf+0x98>
 800bb64:	eeb0 0a48 	vmov.f32	s0, s16
 800bb68:	f7ff fd0c 	bl	800b584 <fabsf>
 800bb6c:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800bb70:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800bb74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bb78:	dd2c      	ble.n	800bbd4 <asinf+0x98>
 800bb7a:	2301      	movs	r3, #1
 800bb7c:	9300      	str	r3, [sp, #0]
 800bb7e:	4b19      	ldr	r3, [pc, #100]	; (800bbe4 <asinf+0xa8>)
 800bb80:	9301      	str	r3, [sp, #4]
 800bb82:	ee18 0a10 	vmov	r0, s16
 800bb86:	2300      	movs	r3, #0
 800bb88:	9308      	str	r3, [sp, #32]
 800bb8a:	f7fb f875 	bl	8006c78 <__aeabi_f2d>
 800bb8e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bb92:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bb96:	4814      	ldr	r0, [pc, #80]	; (800bbe8 <asinf+0xac>)
 800bb98:	f002 f9aa 	bl	800def0 <nan>
 800bb9c:	f994 3000 	ldrsb.w	r3, [r4]
 800bba0:	2b02      	cmp	r3, #2
 800bba2:	ed8d 0b06 	vstr	d0, [sp, #24]
 800bba6:	d104      	bne.n	800bbb2 <asinf+0x76>
 800bba8:	f7ff f904 	bl	800adb4 <__errno>
 800bbac:	2321      	movs	r3, #33	; 0x21
 800bbae:	6003      	str	r3, [r0, #0]
 800bbb0:	e004      	b.n	800bbbc <asinf+0x80>
 800bbb2:	4668      	mov	r0, sp
 800bbb4:	f002 f99a 	bl	800deec <matherr>
 800bbb8:	2800      	cmp	r0, #0
 800bbba:	d0f5      	beq.n	800bba8 <asinf+0x6c>
 800bbbc:	9b08      	ldr	r3, [sp, #32]
 800bbbe:	b11b      	cbz	r3, 800bbc8 <asinf+0x8c>
 800bbc0:	f7ff f8f8 	bl	800adb4 <__errno>
 800bbc4:	9b08      	ldr	r3, [sp, #32]
 800bbc6:	6003      	str	r3, [r0, #0]
 800bbc8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bbcc:	f7fb fabe 	bl	800714c <__aeabi_d2f>
 800bbd0:	ee08 0a90 	vmov	s17, r0
 800bbd4:	eeb0 0a68 	vmov.f32	s0, s17
 800bbd8:	b00a      	add	sp, #40	; 0x28
 800bbda:	ecbd 8b02 	vpop	{d8}
 800bbde:	bd10      	pop	{r4, pc}
 800bbe0:	20000e58 	.word	0x20000e58
 800bbe4:	08073455 	.word	0x08073455
 800bbe8:	0807346c 	.word	0x0807346c

0800bbec <atanhf>:
 800bbec:	b570      	push	{r4, r5, r6, lr}
 800bbee:	ed2d 8b04 	vpush	{d8-d9}
 800bbf2:	4c36      	ldr	r4, [pc, #216]	; (800bccc <atanhf+0xe0>)
 800bbf4:	b08a      	sub	sp, #40	; 0x28
 800bbf6:	eeb0 8a40 	vmov.f32	s16, s0
 800bbfa:	f000 fe19 	bl	800c830 <__ieee754_atanhf>
 800bbfe:	f994 3000 	ldrsb.w	r3, [r4]
 800bc02:	3301      	adds	r3, #1
 800bc04:	eef0 8a40 	vmov.f32	s17, s0
 800bc08:	d059      	beq.n	800bcbe <atanhf+0xd2>
 800bc0a:	eeb4 8a48 	vcmp.f32	s16, s16
 800bc0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc12:	d654      	bvs.n	800bcbe <atanhf+0xd2>
 800bc14:	eeb0 0a48 	vmov.f32	s0, s16
 800bc18:	f7ff fcb4 	bl	800b584 <fabsf>
 800bc1c:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 800bc20:	eeb4 0ac9 	vcmpe.f32	s0, s18
 800bc24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc28:	eef0 9a40 	vmov.f32	s19, s0
 800bc2c:	db47      	blt.n	800bcbe <atanhf+0xd2>
 800bc2e:	ee18 0a10 	vmov	r0, s16
 800bc32:	f7fb f821 	bl	8006c78 <__aeabi_f2d>
 800bc36:	eef4 9ac9 	vcmpe.f32	s19, s18
 800bc3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bc3e:	4602      	mov	r2, r0
 800bc40:	460b      	mov	r3, r1
 800bc42:	f994 4000 	ldrsb.w	r4, [r4]
 800bc46:	4d22      	ldr	r5, [pc, #136]	; (800bcd0 <atanhf+0xe4>)
 800bc48:	dd17      	ble.n	800bc7a <atanhf+0x8e>
 800bc4a:	2101      	movs	r1, #1
 800bc4c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800bc50:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800bc54:	e9cd 1500 	strd	r1, r5, [sp]
 800bc58:	2200      	movs	r2, #0
 800bc5a:	2100      	movs	r1, #0
 800bc5c:	2300      	movs	r3, #0
 800bc5e:	9108      	str	r1, [sp, #32]
 800bc60:	4610      	mov	r0, r2
 800bc62:	4619      	mov	r1, r3
 800bc64:	f7fb f98a 	bl	8006f7c <__aeabi_ddiv>
 800bc68:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800bc6c:	2c02      	cmp	r4, #2
 800bc6e:	d115      	bne.n	800bc9c <atanhf+0xb0>
 800bc70:	f7ff f8a0 	bl	800adb4 <__errno>
 800bc74:	2321      	movs	r3, #33	; 0x21
 800bc76:	6003      	str	r3, [r0, #0]
 800bc78:	e015      	b.n	800bca6 <atanhf+0xba>
 800bc7a:	2602      	movs	r6, #2
 800bc7c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800bc80:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800bc84:	e9cd 6500 	strd	r6, r5, [sp]
 800bc88:	2200      	movs	r2, #0
 800bc8a:	2500      	movs	r5, #0
 800bc8c:	2300      	movs	r3, #0
 800bc8e:	9508      	str	r5, [sp, #32]
 800bc90:	f7fb f974 	bl	8006f7c <__aeabi_ddiv>
 800bc94:	42b4      	cmp	r4, r6
 800bc96:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800bc9a:	e7e8      	b.n	800bc6e <atanhf+0x82>
 800bc9c:	4668      	mov	r0, sp
 800bc9e:	f002 f925 	bl	800deec <matherr>
 800bca2:	2800      	cmp	r0, #0
 800bca4:	d0e4      	beq.n	800bc70 <atanhf+0x84>
 800bca6:	9b08      	ldr	r3, [sp, #32]
 800bca8:	b11b      	cbz	r3, 800bcb2 <atanhf+0xc6>
 800bcaa:	f7ff f883 	bl	800adb4 <__errno>
 800bcae:	9b08      	ldr	r3, [sp, #32]
 800bcb0:	6003      	str	r3, [r0, #0]
 800bcb2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bcb6:	f7fb fa49 	bl	800714c <__aeabi_d2f>
 800bcba:	ee08 0a90 	vmov	s17, r0
 800bcbe:	eeb0 0a68 	vmov.f32	s0, s17
 800bcc2:	b00a      	add	sp, #40	; 0x28
 800bcc4:	ecbd 8b04 	vpop	{d8-d9}
 800bcc8:	bd70      	pop	{r4, r5, r6, pc}
 800bcca:	bf00      	nop
 800bccc:	20000e58 	.word	0x20000e58
 800bcd0:	0807345b 	.word	0x0807345b

0800bcd4 <coshf>:
 800bcd4:	b510      	push	{r4, lr}
 800bcd6:	ed2d 8b02 	vpush	{d8}
 800bcda:	4c29      	ldr	r4, [pc, #164]	; (800bd80 <coshf+0xac>)
 800bcdc:	b08a      	sub	sp, #40	; 0x28
 800bcde:	eeb0 8a40 	vmov.f32	s16, s0
 800bce2:	f000 fdeb 	bl	800c8bc <__ieee754_coshf>
 800bce6:	f994 3000 	ldrsb.w	r3, [r4]
 800bcea:	3301      	adds	r3, #1
 800bcec:	eef0 8a40 	vmov.f32	s17, s0
 800bcf0:	d035      	beq.n	800bd5e <coshf+0x8a>
 800bcf2:	eeb4 8a48 	vcmp.f32	s16, s16
 800bcf6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bcfa:	d630      	bvs.n	800bd5e <coshf+0x8a>
 800bcfc:	eeb0 0a48 	vmov.f32	s0, s16
 800bd00:	f7ff fc40 	bl	800b584 <fabsf>
 800bd04:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800bd84 <coshf+0xb0>
 800bd08:	eeb4 0ae7 	vcmpe.f32	s0, s15
 800bd0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bd10:	dd25      	ble.n	800bd5e <coshf+0x8a>
 800bd12:	2303      	movs	r3, #3
 800bd14:	9300      	str	r3, [sp, #0]
 800bd16:	4b1c      	ldr	r3, [pc, #112]	; (800bd88 <coshf+0xb4>)
 800bd18:	9301      	str	r3, [sp, #4]
 800bd1a:	ee18 0a10 	vmov	r0, s16
 800bd1e:	2300      	movs	r3, #0
 800bd20:	9308      	str	r3, [sp, #32]
 800bd22:	f7fa ffa9 	bl	8006c78 <__aeabi_f2d>
 800bd26:	f994 3000 	ldrsb.w	r3, [r4]
 800bd2a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bd2e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bd32:	b9d3      	cbnz	r3, 800bd6a <coshf+0x96>
 800bd34:	4b15      	ldr	r3, [pc, #84]	; (800bd8c <coshf+0xb8>)
 800bd36:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800bd3a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800bd3e:	4668      	mov	r0, sp
 800bd40:	f002 f8d4 	bl	800deec <matherr>
 800bd44:	b1b8      	cbz	r0, 800bd76 <coshf+0xa2>
 800bd46:	9b08      	ldr	r3, [sp, #32]
 800bd48:	b11b      	cbz	r3, 800bd52 <coshf+0x7e>
 800bd4a:	f7ff f833 	bl	800adb4 <__errno>
 800bd4e:	9b08      	ldr	r3, [sp, #32]
 800bd50:	6003      	str	r3, [r0, #0]
 800bd52:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bd56:	f7fb f9f9 	bl	800714c <__aeabi_d2f>
 800bd5a:	ee08 0a90 	vmov	s17, r0
 800bd5e:	eeb0 0a68 	vmov.f32	s0, s17
 800bd62:	b00a      	add	sp, #40	; 0x28
 800bd64:	ecbd 8b02 	vpop	{d8}
 800bd68:	bd10      	pop	{r4, pc}
 800bd6a:	4909      	ldr	r1, [pc, #36]	; (800bd90 <coshf+0xbc>)
 800bd6c:	2000      	movs	r0, #0
 800bd6e:	2b02      	cmp	r3, #2
 800bd70:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800bd74:	d1e3      	bne.n	800bd3e <coshf+0x6a>
 800bd76:	f7ff f81d 	bl	800adb4 <__errno>
 800bd7a:	2322      	movs	r3, #34	; 0x22
 800bd7c:	6003      	str	r3, [r0, #0]
 800bd7e:	e7e2      	b.n	800bd46 <coshf+0x72>
 800bd80:	20000e58 	.word	0x20000e58
 800bd84:	42b2d4fc 	.word	0x42b2d4fc
 800bd88:	0807344f 	.word	0x0807344f
 800bd8c:	47efffff 	.word	0x47efffff
 800bd90:	7ff00000 	.word	0x7ff00000

0800bd94 <expf>:
 800bd94:	b530      	push	{r4, r5, lr}
 800bd96:	ed2d 8b02 	vpush	{d8}
 800bd9a:	4d35      	ldr	r5, [pc, #212]	; (800be70 <expf+0xdc>)
 800bd9c:	b08b      	sub	sp, #44	; 0x2c
 800bd9e:	eeb0 8a40 	vmov.f32	s16, s0
 800bda2:	f000 fdef 	bl	800c984 <__ieee754_expf>
 800bda6:	f995 3000 	ldrsb.w	r3, [r5]
 800bdaa:	3301      	adds	r3, #1
 800bdac:	ee10 4a10 	vmov	r4, s0
 800bdb0:	d030      	beq.n	800be14 <expf+0x80>
 800bdb2:	eeb0 0a48 	vmov.f32	s0, s16
 800bdb6:	f002 f9cf 	bl	800e158 <finitef>
 800bdba:	b358      	cbz	r0, 800be14 <expf+0x80>
 800bdbc:	eddf 7a2d 	vldr	s15, [pc, #180]	; 800be74 <expf+0xe0>
 800bdc0:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800bdc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bdc8:	dd35      	ble.n	800be36 <expf+0xa2>
 800bdca:	2303      	movs	r3, #3
 800bdcc:	9300      	str	r3, [sp, #0]
 800bdce:	4b2a      	ldr	r3, [pc, #168]	; (800be78 <expf+0xe4>)
 800bdd0:	9301      	str	r3, [sp, #4]
 800bdd2:	ee18 0a10 	vmov	r0, s16
 800bdd6:	2300      	movs	r3, #0
 800bdd8:	9308      	str	r3, [sp, #32]
 800bdda:	f7fa ff4d 	bl	8006c78 <__aeabi_f2d>
 800bdde:	f995 3000 	ldrsb.w	r3, [r5]
 800bde2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bde6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bdea:	b9cb      	cbnz	r3, 800be20 <expf+0x8c>
 800bdec:	4b23      	ldr	r3, [pc, #140]	; (800be7c <expf+0xe8>)
 800bdee:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800bdf2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800bdf6:	4668      	mov	r0, sp
 800bdf8:	f002 f878 	bl	800deec <matherr>
 800bdfc:	b1b0      	cbz	r0, 800be2c <expf+0x98>
 800bdfe:	9b08      	ldr	r3, [sp, #32]
 800be00:	b11b      	cbz	r3, 800be0a <expf+0x76>
 800be02:	f7fe ffd7 	bl	800adb4 <__errno>
 800be06:	9b08      	ldr	r3, [sp, #32]
 800be08:	6003      	str	r3, [r0, #0]
 800be0a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800be0e:	f7fb f99d 	bl	800714c <__aeabi_d2f>
 800be12:	4604      	mov	r4, r0
 800be14:	ee00 4a10 	vmov	s0, r4
 800be18:	b00b      	add	sp, #44	; 0x2c
 800be1a:	ecbd 8b02 	vpop	{d8}
 800be1e:	bd30      	pop	{r4, r5, pc}
 800be20:	4917      	ldr	r1, [pc, #92]	; (800be80 <expf+0xec>)
 800be22:	2000      	movs	r0, #0
 800be24:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800be28:	2b02      	cmp	r3, #2
 800be2a:	d1e4      	bne.n	800bdf6 <expf+0x62>
 800be2c:	f7fe ffc2 	bl	800adb4 <__errno>
 800be30:	2322      	movs	r3, #34	; 0x22
 800be32:	6003      	str	r3, [r0, #0]
 800be34:	e7e3      	b.n	800bdfe <expf+0x6a>
 800be36:	eddf 7a13 	vldr	s15, [pc, #76]	; 800be84 <expf+0xf0>
 800be3a:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800be3e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800be42:	d5e7      	bpl.n	800be14 <expf+0x80>
 800be44:	2304      	movs	r3, #4
 800be46:	9300      	str	r3, [sp, #0]
 800be48:	4b0b      	ldr	r3, [pc, #44]	; (800be78 <expf+0xe4>)
 800be4a:	9301      	str	r3, [sp, #4]
 800be4c:	ee18 0a10 	vmov	r0, s16
 800be50:	2300      	movs	r3, #0
 800be52:	9308      	str	r3, [sp, #32]
 800be54:	f7fa ff10 	bl	8006c78 <__aeabi_f2d>
 800be58:	2300      	movs	r3, #0
 800be5a:	2200      	movs	r2, #0
 800be5c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800be60:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800be64:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800be68:	f995 3000 	ldrsb.w	r3, [r5]
 800be6c:	e7dc      	b.n	800be28 <expf+0x94>
 800be6e:	bf00      	nop
 800be70:	20000e58 	.word	0x20000e58
 800be74:	42b17180 	.word	0x42b17180
 800be78:	08073462 	.word	0x08073462
 800be7c:	47efffff 	.word	0x47efffff
 800be80:	7ff00000 	.word	0x7ff00000
 800be84:	c2cff1b5 	.word	0xc2cff1b5

0800be88 <fmodf>:
 800be88:	b5d0      	push	{r4, r6, r7, lr}
 800be8a:	ed2d 8b02 	vpush	{d8}
 800be8e:	b08a      	sub	sp, #40	; 0x28
 800be90:	eef0 8a40 	vmov.f32	s17, s0
 800be94:	eeb0 8a60 	vmov.f32	s16, s1
 800be98:	f000 fe48 	bl	800cb2c <__ieee754_fmodf>
 800be9c:	4b26      	ldr	r3, [pc, #152]	; (800bf38 <fmodf+0xb0>)
 800be9e:	f993 4000 	ldrsb.w	r4, [r3]
 800bea2:	1c63      	adds	r3, r4, #1
 800bea4:	d035      	beq.n	800bf12 <fmodf+0x8a>
 800bea6:	eeb4 8a48 	vcmp.f32	s16, s16
 800beaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800beae:	d630      	bvs.n	800bf12 <fmodf+0x8a>
 800beb0:	eef4 8a68 	vcmp.f32	s17, s17
 800beb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800beb8:	d62b      	bvs.n	800bf12 <fmodf+0x8a>
 800beba:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800bebe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bec2:	d126      	bne.n	800bf12 <fmodf+0x8a>
 800bec4:	2301      	movs	r3, #1
 800bec6:	9300      	str	r3, [sp, #0]
 800bec8:	4b1c      	ldr	r3, [pc, #112]	; (800bf3c <fmodf+0xb4>)
 800beca:	9301      	str	r3, [sp, #4]
 800becc:	ee18 0a90 	vmov	r0, s17
 800bed0:	2300      	movs	r3, #0
 800bed2:	9308      	str	r3, [sp, #32]
 800bed4:	f7fa fed0 	bl	8006c78 <__aeabi_f2d>
 800bed8:	4606      	mov	r6, r0
 800beda:	460f      	mov	r7, r1
 800bedc:	ee18 0a10 	vmov	r0, s16
 800bee0:	e9cd 6702 	strd	r6, r7, [sp, #8]
 800bee4:	f7fa fec8 	bl	8006c78 <__aeabi_f2d>
 800bee8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800beec:	b9ac      	cbnz	r4, 800bf1a <fmodf+0x92>
 800beee:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800bef2:	4668      	mov	r0, sp
 800bef4:	f001 fffa 	bl	800deec <matherr>
 800bef8:	b1c8      	cbz	r0, 800bf2e <fmodf+0xa6>
 800befa:	9b08      	ldr	r3, [sp, #32]
 800befc:	b11b      	cbz	r3, 800bf06 <fmodf+0x7e>
 800befe:	f7fe ff59 	bl	800adb4 <__errno>
 800bf02:	9b08      	ldr	r3, [sp, #32]
 800bf04:	6003      	str	r3, [r0, #0]
 800bf06:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bf0a:	f7fb f91f 	bl	800714c <__aeabi_d2f>
 800bf0e:	ee00 0a10 	vmov	s0, r0
 800bf12:	b00a      	add	sp, #40	; 0x28
 800bf14:	ecbd 8b02 	vpop	{d8}
 800bf18:	bdd0      	pop	{r4, r6, r7, pc}
 800bf1a:	2200      	movs	r2, #0
 800bf1c:	2300      	movs	r3, #0
 800bf1e:	4610      	mov	r0, r2
 800bf20:	4619      	mov	r1, r3
 800bf22:	f7fb f82b 	bl	8006f7c <__aeabi_ddiv>
 800bf26:	2c02      	cmp	r4, #2
 800bf28:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800bf2c:	d1e1      	bne.n	800bef2 <fmodf+0x6a>
 800bf2e:	f7fe ff41 	bl	800adb4 <__errno>
 800bf32:	2321      	movs	r3, #33	; 0x21
 800bf34:	6003      	str	r3, [r0, #0]
 800bf36:	e7e0      	b.n	800befa <fmodf+0x72>
 800bf38:	20000e58 	.word	0x20000e58
 800bf3c:	08073467 	.word	0x08073467

0800bf40 <logf>:
 800bf40:	b510      	push	{r4, lr}
 800bf42:	ed2d 8b02 	vpush	{d8}
 800bf46:	b08a      	sub	sp, #40	; 0x28
 800bf48:	eeb0 8a40 	vmov.f32	s16, s0
 800bf4c:	f000 fe76 	bl	800cc3c <__ieee754_logf>
 800bf50:	4b31      	ldr	r3, [pc, #196]	; (800c018 <logf+0xd8>)
 800bf52:	f993 4000 	ldrsb.w	r4, [r3]
 800bf56:	1c63      	adds	r3, r4, #1
 800bf58:	d059      	beq.n	800c00e <logf+0xce>
 800bf5a:	eeb4 8a48 	vcmp.f32	s16, s16
 800bf5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf62:	d654      	bvs.n	800c00e <logf+0xce>
 800bf64:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800bf68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf6c:	dc4f      	bgt.n	800c00e <logf+0xce>
 800bf6e:	4b2b      	ldr	r3, [pc, #172]	; (800c01c <logf+0xdc>)
 800bf70:	9301      	str	r3, [sp, #4]
 800bf72:	ee18 0a10 	vmov	r0, s16
 800bf76:	2300      	movs	r3, #0
 800bf78:	9308      	str	r3, [sp, #32]
 800bf7a:	f7fa fe7d 	bl	8006c78 <__aeabi_f2d>
 800bf7e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bf82:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bf86:	b994      	cbnz	r4, 800bfae <logf+0x6e>
 800bf88:	4b25      	ldr	r3, [pc, #148]	; (800c020 <logf+0xe0>)
 800bf8a:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800bf8e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800bf92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bf96:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800bf9a:	d025      	beq.n	800bfe8 <logf+0xa8>
 800bf9c:	2301      	movs	r3, #1
 800bf9e:	2c02      	cmp	r4, #2
 800bfa0:	9300      	str	r3, [sp, #0]
 800bfa2:	d116      	bne.n	800bfd2 <logf+0x92>
 800bfa4:	f7fe ff06 	bl	800adb4 <__errno>
 800bfa8:	2321      	movs	r3, #33	; 0x21
 800bfaa:	6003      	str	r3, [r0, #0]
 800bfac:	e016      	b.n	800bfdc <logf+0x9c>
 800bfae:	4b1d      	ldr	r3, [pc, #116]	; (800c024 <logf+0xe4>)
 800bfb0:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800bfb4:	2200      	movs	r2, #0
 800bfb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800bfba:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800bfbe:	d1ed      	bne.n	800bf9c <logf+0x5c>
 800bfc0:	2302      	movs	r3, #2
 800bfc2:	429c      	cmp	r4, r3
 800bfc4:	9300      	str	r3, [sp, #0]
 800bfc6:	d111      	bne.n	800bfec <logf+0xac>
 800bfc8:	f7fe fef4 	bl	800adb4 <__errno>
 800bfcc:	2322      	movs	r3, #34	; 0x22
 800bfce:	6003      	str	r3, [r0, #0]
 800bfd0:	e011      	b.n	800bff6 <logf+0xb6>
 800bfd2:	4668      	mov	r0, sp
 800bfd4:	f001 ff8a 	bl	800deec <matherr>
 800bfd8:	2800      	cmp	r0, #0
 800bfda:	d0e3      	beq.n	800bfa4 <logf+0x64>
 800bfdc:	4812      	ldr	r0, [pc, #72]	; (800c028 <logf+0xe8>)
 800bfde:	f001 ff87 	bl	800def0 <nan>
 800bfe2:	ed8d 0b06 	vstr	d0, [sp, #24]
 800bfe6:	e006      	b.n	800bff6 <logf+0xb6>
 800bfe8:	2302      	movs	r3, #2
 800bfea:	9300      	str	r3, [sp, #0]
 800bfec:	4668      	mov	r0, sp
 800bfee:	f001 ff7d 	bl	800deec <matherr>
 800bff2:	2800      	cmp	r0, #0
 800bff4:	d0e8      	beq.n	800bfc8 <logf+0x88>
 800bff6:	9b08      	ldr	r3, [sp, #32]
 800bff8:	b11b      	cbz	r3, 800c002 <logf+0xc2>
 800bffa:	f7fe fedb 	bl	800adb4 <__errno>
 800bffe:	9b08      	ldr	r3, [sp, #32]
 800c000:	6003      	str	r3, [r0, #0]
 800c002:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c006:	f7fb f8a1 	bl	800714c <__aeabi_d2f>
 800c00a:	ee00 0a10 	vmov	s0, r0
 800c00e:	b00a      	add	sp, #40	; 0x28
 800c010:	ecbd 8b02 	vpop	{d8}
 800c014:	bd10      	pop	{r4, pc}
 800c016:	bf00      	nop
 800c018:	20000e58 	.word	0x20000e58
 800c01c:	0807346d 	.word	0x0807346d
 800c020:	c7efffff 	.word	0xc7efffff
 800c024:	fff00000 	.word	0xfff00000
 800c028:	0807346c 	.word	0x0807346c

0800c02c <powf>:
 800c02c:	e92d 4370 	stmdb	sp!, {r4, r5, r6, r8, r9, lr}
 800c030:	ed2d 8b04 	vpush	{d8-d9}
 800c034:	4ca7      	ldr	r4, [pc, #668]	; (800c2d4 <powf+0x2a8>)
 800c036:	b08a      	sub	sp, #40	; 0x28
 800c038:	eef0 8a40 	vmov.f32	s17, s0
 800c03c:	eeb0 8a60 	vmov.f32	s16, s1
 800c040:	f000 feea 	bl	800ce18 <__ieee754_powf>
 800c044:	f994 5000 	ldrsb.w	r5, [r4]
 800c048:	1c6b      	adds	r3, r5, #1
 800c04a:	eeb0 9a40 	vmov.f32	s18, s0
 800c04e:	4626      	mov	r6, r4
 800c050:	d05f      	beq.n	800c112 <powf+0xe6>
 800c052:	eeb4 8a48 	vcmp.f32	s16, s16
 800c056:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c05a:	d65a      	bvs.n	800c112 <powf+0xe6>
 800c05c:	eef4 8a68 	vcmp.f32	s17, s17
 800c060:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c064:	d721      	bvc.n	800c0aa <powf+0x7e>
 800c066:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800c06a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c06e:	d150      	bne.n	800c112 <powf+0xe6>
 800c070:	2301      	movs	r3, #1
 800c072:	9300      	str	r3, [sp, #0]
 800c074:	4b98      	ldr	r3, [pc, #608]	; (800c2d8 <powf+0x2ac>)
 800c076:	9301      	str	r3, [sp, #4]
 800c078:	ee18 0a90 	vmov	r0, s17
 800c07c:	2300      	movs	r3, #0
 800c07e:	9308      	str	r3, [sp, #32]
 800c080:	f7fa fdfa 	bl	8006c78 <__aeabi_f2d>
 800c084:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c088:	ee18 0a10 	vmov	r0, s16
 800c08c:	f7fa fdf4 	bl	8006c78 <__aeabi_f2d>
 800c090:	4b92      	ldr	r3, [pc, #584]	; (800c2dc <powf+0x2b0>)
 800c092:	2200      	movs	r2, #0
 800c094:	2d02      	cmp	r5, #2
 800c096:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c09a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800c09e:	d032      	beq.n	800c106 <powf+0xda>
 800c0a0:	4668      	mov	r0, sp
 800c0a2:	f001 ff23 	bl	800deec <matherr>
 800c0a6:	bb40      	cbnz	r0, 800c0fa <powf+0xce>
 800c0a8:	e065      	b.n	800c176 <powf+0x14a>
 800c0aa:	eddf 9a8d 	vldr	s19, [pc, #564]	; 800c2e0 <powf+0x2b4>
 800c0ae:	eef4 8a69 	vcmp.f32	s17, s19
 800c0b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c0b6:	d163      	bne.n	800c180 <powf+0x154>
 800c0b8:	eeb4 8a69 	vcmp.f32	s16, s19
 800c0bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c0c0:	d12e      	bne.n	800c120 <powf+0xf4>
 800c0c2:	2301      	movs	r3, #1
 800c0c4:	9300      	str	r3, [sp, #0]
 800c0c6:	4b84      	ldr	r3, [pc, #528]	; (800c2d8 <powf+0x2ac>)
 800c0c8:	9301      	str	r3, [sp, #4]
 800c0ca:	ee18 0a90 	vmov	r0, s17
 800c0ce:	2300      	movs	r3, #0
 800c0d0:	9308      	str	r3, [sp, #32]
 800c0d2:	f7fa fdd1 	bl	8006c78 <__aeabi_f2d>
 800c0d6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c0da:	ee18 0a10 	vmov	r0, s16
 800c0de:	f7fa fdcb 	bl	8006c78 <__aeabi_f2d>
 800c0e2:	2200      	movs	r2, #0
 800c0e4:	2300      	movs	r3, #0
 800c0e6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c0ea:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800c0ee:	2d00      	cmp	r5, #0
 800c0f0:	d0d6      	beq.n	800c0a0 <powf+0x74>
 800c0f2:	4b7a      	ldr	r3, [pc, #488]	; (800c2dc <powf+0x2b0>)
 800c0f4:	2200      	movs	r2, #0
 800c0f6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800c0fa:	9b08      	ldr	r3, [sp, #32]
 800c0fc:	b11b      	cbz	r3, 800c106 <powf+0xda>
 800c0fe:	f7fe fe59 	bl	800adb4 <__errno>
 800c102:	9b08      	ldr	r3, [sp, #32]
 800c104:	6003      	str	r3, [r0, #0]
 800c106:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c10a:	f7fb f81f 	bl	800714c <__aeabi_d2f>
 800c10e:	ee09 0a10 	vmov	s18, r0
 800c112:	eeb0 0a49 	vmov.f32	s0, s18
 800c116:	b00a      	add	sp, #40	; 0x28
 800c118:	ecbd 8b04 	vpop	{d8-d9}
 800c11c:	e8bd 8370 	ldmia.w	sp!, {r4, r5, r6, r8, r9, pc}
 800c120:	eeb0 0a48 	vmov.f32	s0, s16
 800c124:	f002 f818 	bl	800e158 <finitef>
 800c128:	2800      	cmp	r0, #0
 800c12a:	d0f2      	beq.n	800c112 <powf+0xe6>
 800c12c:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800c130:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c134:	d5ed      	bpl.n	800c112 <powf+0xe6>
 800c136:	2301      	movs	r3, #1
 800c138:	9300      	str	r3, [sp, #0]
 800c13a:	4b67      	ldr	r3, [pc, #412]	; (800c2d8 <powf+0x2ac>)
 800c13c:	9301      	str	r3, [sp, #4]
 800c13e:	ee18 0a90 	vmov	r0, s17
 800c142:	2300      	movs	r3, #0
 800c144:	9308      	str	r3, [sp, #32]
 800c146:	f7fa fd97 	bl	8006c78 <__aeabi_f2d>
 800c14a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c14e:	ee18 0a10 	vmov	r0, s16
 800c152:	f7fa fd91 	bl	8006c78 <__aeabi_f2d>
 800c156:	f994 3000 	ldrsb.w	r3, [r4]
 800c15a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c15e:	b923      	cbnz	r3, 800c16a <powf+0x13e>
 800c160:	2200      	movs	r2, #0
 800c162:	2300      	movs	r3, #0
 800c164:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800c168:	e79a      	b.n	800c0a0 <powf+0x74>
 800c16a:	495e      	ldr	r1, [pc, #376]	; (800c2e4 <powf+0x2b8>)
 800c16c:	2000      	movs	r0, #0
 800c16e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800c172:	2b02      	cmp	r3, #2
 800c174:	d194      	bne.n	800c0a0 <powf+0x74>
 800c176:	f7fe fe1d 	bl	800adb4 <__errno>
 800c17a:	2321      	movs	r3, #33	; 0x21
 800c17c:	6003      	str	r3, [r0, #0]
 800c17e:	e7bc      	b.n	800c0fa <powf+0xce>
 800c180:	f001 ffea 	bl	800e158 <finitef>
 800c184:	4605      	mov	r5, r0
 800c186:	2800      	cmp	r0, #0
 800c188:	d173      	bne.n	800c272 <powf+0x246>
 800c18a:	eeb0 0a68 	vmov.f32	s0, s17
 800c18e:	f001 ffe3 	bl	800e158 <finitef>
 800c192:	2800      	cmp	r0, #0
 800c194:	d06d      	beq.n	800c272 <powf+0x246>
 800c196:	eeb0 0a48 	vmov.f32	s0, s16
 800c19a:	f001 ffdd 	bl	800e158 <finitef>
 800c19e:	2800      	cmp	r0, #0
 800c1a0:	d067      	beq.n	800c272 <powf+0x246>
 800c1a2:	ee18 0a90 	vmov	r0, s17
 800c1a6:	f7fa fd67 	bl	8006c78 <__aeabi_f2d>
 800c1aa:	4680      	mov	r8, r0
 800c1ac:	ee18 0a10 	vmov	r0, s16
 800c1b0:	4689      	mov	r9, r1
 800c1b2:	f7fa fd61 	bl	8006c78 <__aeabi_f2d>
 800c1b6:	eeb4 9a49 	vcmp.f32	s18, s18
 800c1ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c1be:	f994 4000 	ldrsb.w	r4, [r4]
 800c1c2:	4b45      	ldr	r3, [pc, #276]	; (800c2d8 <powf+0x2ac>)
 800c1c4:	d713      	bvc.n	800c1ee <powf+0x1c2>
 800c1c6:	2201      	movs	r2, #1
 800c1c8:	e9cd 2300 	strd	r2, r3, [sp]
 800c1cc:	9508      	str	r5, [sp, #32]
 800c1ce:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800c1d2:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c1d6:	2c00      	cmp	r4, #0
 800c1d8:	d0c2      	beq.n	800c160 <powf+0x134>
 800c1da:	eec9 7aa9 	vdiv.f32	s15, s19, s19
 800c1de:	ee17 0a90 	vmov	r0, s15
 800c1e2:	f7fa fd49 	bl	8006c78 <__aeabi_f2d>
 800c1e6:	2c02      	cmp	r4, #2
 800c1e8:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800c1ec:	e7c2      	b.n	800c174 <powf+0x148>
 800c1ee:	2203      	movs	r2, #3
 800c1f0:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800c1f4:	e9cd 2300 	strd	r2, r3, [sp]
 800c1f8:	9508      	str	r5, [sp, #32]
 800c1fa:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800c1fe:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c202:	ee28 8a27 	vmul.f32	s16, s16, s15
 800c206:	b9fc      	cbnz	r4, 800c248 <powf+0x21c>
 800c208:	4b37      	ldr	r3, [pc, #220]	; (800c2e8 <powf+0x2bc>)
 800c20a:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 800c20e:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800c212:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c216:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800c21a:	d553      	bpl.n	800c2c4 <powf+0x298>
 800c21c:	eeb0 0a48 	vmov.f32	s0, s16
 800c220:	f001 ffaa 	bl	800e178 <rintf>
 800c224:	eeb4 0a48 	vcmp.f32	s0, s16
 800c228:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c22c:	d004      	beq.n	800c238 <powf+0x20c>
 800c22e:	4b2f      	ldr	r3, [pc, #188]	; (800c2ec <powf+0x2c0>)
 800c230:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800c234:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800c238:	f996 3000 	ldrsb.w	r3, [r6]
 800c23c:	2b02      	cmp	r3, #2
 800c23e:	d141      	bne.n	800c2c4 <powf+0x298>
 800c240:	f7fe fdb8 	bl	800adb4 <__errno>
 800c244:	2322      	movs	r3, #34	; 0x22
 800c246:	e799      	b.n	800c17c <powf+0x150>
 800c248:	4b29      	ldr	r3, [pc, #164]	; (800c2f0 <powf+0x2c4>)
 800c24a:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 800c24e:	2200      	movs	r2, #0
 800c250:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c254:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800c258:	d5ee      	bpl.n	800c238 <powf+0x20c>
 800c25a:	eeb0 0a48 	vmov.f32	s0, s16
 800c25e:	f001 ff8b 	bl	800e178 <rintf>
 800c262:	eeb4 0a48 	vcmp.f32	s0, s16
 800c266:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c26a:	d0e5      	beq.n	800c238 <powf+0x20c>
 800c26c:	2200      	movs	r2, #0
 800c26e:	4b1d      	ldr	r3, [pc, #116]	; (800c2e4 <powf+0x2b8>)
 800c270:	e7e0      	b.n	800c234 <powf+0x208>
 800c272:	eeb5 9a40 	vcmp.f32	s18, #0.0
 800c276:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c27a:	f47f af4a 	bne.w	800c112 <powf+0xe6>
 800c27e:	eeb0 0a68 	vmov.f32	s0, s17
 800c282:	f001 ff69 	bl	800e158 <finitef>
 800c286:	2800      	cmp	r0, #0
 800c288:	f43f af43 	beq.w	800c112 <powf+0xe6>
 800c28c:	eeb0 0a48 	vmov.f32	s0, s16
 800c290:	f001 ff62 	bl	800e158 <finitef>
 800c294:	2800      	cmp	r0, #0
 800c296:	f43f af3c 	beq.w	800c112 <powf+0xe6>
 800c29a:	2304      	movs	r3, #4
 800c29c:	9300      	str	r3, [sp, #0]
 800c29e:	4b0e      	ldr	r3, [pc, #56]	; (800c2d8 <powf+0x2ac>)
 800c2a0:	9301      	str	r3, [sp, #4]
 800c2a2:	ee18 0a90 	vmov	r0, s17
 800c2a6:	2300      	movs	r3, #0
 800c2a8:	9308      	str	r3, [sp, #32]
 800c2aa:	f7fa fce5 	bl	8006c78 <__aeabi_f2d>
 800c2ae:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c2b2:	ee18 0a10 	vmov	r0, s16
 800c2b6:	f7fa fcdf 	bl	8006c78 <__aeabi_f2d>
 800c2ba:	2200      	movs	r2, #0
 800c2bc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c2c0:	2300      	movs	r3, #0
 800c2c2:	e7b7      	b.n	800c234 <powf+0x208>
 800c2c4:	4668      	mov	r0, sp
 800c2c6:	f001 fe11 	bl	800deec <matherr>
 800c2ca:	2800      	cmp	r0, #0
 800c2cc:	f47f af15 	bne.w	800c0fa <powf+0xce>
 800c2d0:	e7b6      	b.n	800c240 <powf+0x214>
 800c2d2:	bf00      	nop
 800c2d4:	20000e58 	.word	0x20000e58
 800c2d8:	08073472 	.word	0x08073472
 800c2dc:	3ff00000 	.word	0x3ff00000
 800c2e0:	00000000 	.word	0x00000000
 800c2e4:	fff00000 	.word	0xfff00000
 800c2e8:	47efffff 	.word	0x47efffff
 800c2ec:	c7efffff 	.word	0xc7efffff
 800c2f0:	7ff00000 	.word	0x7ff00000

0800c2f4 <sinhf>:
 800c2f4:	b530      	push	{r4, r5, lr}
 800c2f6:	ed2d 8b02 	vpush	{d8}
 800c2fa:	4c2b      	ldr	r4, [pc, #172]	; (800c3a8 <sinhf+0xb4>)
 800c2fc:	b08b      	sub	sp, #44	; 0x2c
 800c2fe:	eeb0 8a40 	vmov.f32	s16, s0
 800c302:	f001 f975 	bl	800d5f0 <__ieee754_sinhf>
 800c306:	f994 3000 	ldrsb.w	r3, [r4]
 800c30a:	3301      	adds	r3, #1
 800c30c:	eef0 8a40 	vmov.f32	s17, s0
 800c310:	d034      	beq.n	800c37c <sinhf+0x88>
 800c312:	f001 ff21 	bl	800e158 <finitef>
 800c316:	4605      	mov	r5, r0
 800c318:	2800      	cmp	r0, #0
 800c31a:	d12f      	bne.n	800c37c <sinhf+0x88>
 800c31c:	eeb0 0a48 	vmov.f32	s0, s16
 800c320:	f001 ff1a 	bl	800e158 <finitef>
 800c324:	b350      	cbz	r0, 800c37c <sinhf+0x88>
 800c326:	2303      	movs	r3, #3
 800c328:	9300      	str	r3, [sp, #0]
 800c32a:	ee18 0a10 	vmov	r0, s16
 800c32e:	4b1f      	ldr	r3, [pc, #124]	; (800c3ac <sinhf+0xb8>)
 800c330:	9301      	str	r3, [sp, #4]
 800c332:	9508      	str	r5, [sp, #32]
 800c334:	f7fa fca0 	bl	8006c78 <__aeabi_f2d>
 800c338:	f994 3000 	ldrsb.w	r3, [r4]
 800c33c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c340:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c344:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800c348:	b9f3      	cbnz	r3, 800c388 <sinhf+0x94>
 800c34a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c34e:	bfd4      	ite	le
 800c350:	4b17      	ldrle	r3, [pc, #92]	; (800c3b0 <sinhf+0xbc>)
 800c352:	4b18      	ldrgt	r3, [pc, #96]	; (800c3b4 <sinhf+0xc0>)
 800c354:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
 800c358:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800c35c:	4668      	mov	r0, sp
 800c35e:	f001 fdc5 	bl	800deec <matherr>
 800c362:	b1d8      	cbz	r0, 800c39c <sinhf+0xa8>
 800c364:	9b08      	ldr	r3, [sp, #32]
 800c366:	b11b      	cbz	r3, 800c370 <sinhf+0x7c>
 800c368:	f7fe fd24 	bl	800adb4 <__errno>
 800c36c:	9b08      	ldr	r3, [sp, #32]
 800c36e:	6003      	str	r3, [r0, #0]
 800c370:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c374:	f7fa feea 	bl	800714c <__aeabi_d2f>
 800c378:	ee08 0a90 	vmov	s17, r0
 800c37c:	eeb0 0a68 	vmov.f32	s0, s17
 800c380:	b00b      	add	sp, #44	; 0x2c
 800c382:	ecbd 8b02 	vpop	{d8}
 800c386:	bd30      	pop	{r4, r5, pc}
 800c388:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c38c:	bfd4      	ite	le
 800c38e:	490a      	ldrle	r1, [pc, #40]	; (800c3b8 <sinhf+0xc4>)
 800c390:	490a      	ldrgt	r1, [pc, #40]	; (800c3bc <sinhf+0xc8>)
 800c392:	2000      	movs	r0, #0
 800c394:	2b02      	cmp	r3, #2
 800c396:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800c39a:	d1df      	bne.n	800c35c <sinhf+0x68>
 800c39c:	f7fe fd0a 	bl	800adb4 <__errno>
 800c3a0:	2322      	movs	r3, #34	; 0x22
 800c3a2:	6003      	str	r3, [r0, #0]
 800c3a4:	e7de      	b.n	800c364 <sinhf+0x70>
 800c3a6:	bf00      	nop
 800c3a8:	20000e58 	.word	0x20000e58
 800c3ac:	08073477 	.word	0x08073477
 800c3b0:	c7efffff 	.word	0xc7efffff
 800c3b4:	47efffff 	.word	0x47efffff
 800c3b8:	fff00000 	.word	0xfff00000
 800c3bc:	7ff00000 	.word	0x7ff00000

0800c3c0 <__ieee754_acosf>:
 800c3c0:	b508      	push	{r3, lr}
 800c3c2:	ee10 3a10 	vmov	r3, s0
 800c3c6:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800c3ca:	f1b2 5f7e 	cmp.w	r2, #1065353216	; 0x3f800000
 800c3ce:	ed2d 8b0c 	vpush	{d8-d13}
 800c3d2:	d10a      	bne.n	800c3ea <__ieee754_acosf+0x2a>
 800c3d4:	ed9f 0a67 	vldr	s0, [pc, #412]	; 800c574 <__ieee754_acosf+0x1b4>
 800c3d8:	ed9f 8a67 	vldr	s16, [pc, #412]	; 800c578 <__ieee754_acosf+0x1b8>
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	bfd8      	it	le
 800c3e0:	eeb0 0a48 	vmovle.f32	s0, s16
 800c3e4:	ecbd 8b0c 	vpop	{d8-d13}
 800c3e8:	bd08      	pop	{r3, pc}
 800c3ea:	dd04      	ble.n	800c3f6 <__ieee754_acosf+0x36>
 800c3ec:	ee30 8a40 	vsub.f32	s16, s0, s0
 800c3f0:	ee88 0a08 	vdiv.f32	s0, s16, s16
 800c3f4:	e7f6      	b.n	800c3e4 <__ieee754_acosf+0x24>
 800c3f6:	f1b2 5f7c 	cmp.w	r2, #1056964608	; 0x3f000000
 800c3fa:	da3e      	bge.n	800c47a <__ieee754_acosf+0xba>
 800c3fc:	f1b2 5f0c 	cmp.w	r2, #587202560	; 0x23000000
 800c400:	f340 80b5 	ble.w	800c56e <__ieee754_acosf+0x1ae>
 800c404:	ee60 7a00 	vmul.f32	s15, s0, s0
 800c408:	eddf 6a5c 	vldr	s13, [pc, #368]	; 800c57c <__ieee754_acosf+0x1bc>
 800c40c:	ed9f 7a5c 	vldr	s14, [pc, #368]	; 800c580 <__ieee754_acosf+0x1c0>
 800c410:	ed9f 6a5c 	vldr	s12, [pc, #368]	; 800c584 <__ieee754_acosf+0x1c4>
 800c414:	ed9f 8a5c 	vldr	s16, [pc, #368]	; 800c588 <__ieee754_acosf+0x1c8>
 800c418:	eea7 7aa6 	vfma.f32	s14, s15, s13
 800c41c:	eddf 6a5b 	vldr	s13, [pc, #364]	; 800c58c <__ieee754_acosf+0x1cc>
 800c420:	eee7 6a27 	vfma.f32	s13, s14, s15
 800c424:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 800c590 <__ieee754_acosf+0x1d0>
 800c428:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800c42c:	eddf 6a59 	vldr	s13, [pc, #356]	; 800c594 <__ieee754_acosf+0x1d4>
 800c430:	eee7 6a27 	vfma.f32	s13, s14, s15
 800c434:	ed9f 7a58 	vldr	s14, [pc, #352]	; 800c598 <__ieee754_acosf+0x1d8>
 800c438:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800c43c:	eddf 6a57 	vldr	s13, [pc, #348]	; 800c59c <__ieee754_acosf+0x1dc>
 800c440:	eea7 6aa6 	vfma.f32	s12, s15, s13
 800c444:	eddf 6a56 	vldr	s13, [pc, #344]	; 800c5a0 <__ieee754_acosf+0x1e0>
 800c448:	eee6 6a27 	vfma.f32	s13, s12, s15
 800c44c:	ed9f 6a55 	vldr	s12, [pc, #340]	; 800c5a4 <__ieee754_acosf+0x1e4>
 800c450:	eea6 6aa7 	vfma.f32	s12, s13, s15
 800c454:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800c458:	eee6 6a27 	vfma.f32	s13, s12, s15
 800c45c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c460:	eef0 7a66 	vmov.f32	s15, s13
 800c464:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800c468:	eea0 8a66 	vfms.f32	s16, s0, s13
 800c46c:	ee30 8a48 	vsub.f32	s16, s0, s16
 800c470:	ed9f 0a4d 	vldr	s0, [pc, #308]	; 800c5a8 <__ieee754_acosf+0x1e8>
 800c474:	ee30 0a48 	vsub.f32	s0, s0, s16
 800c478:	e7b4      	b.n	800c3e4 <__ieee754_acosf+0x24>
 800c47a:	2b00      	cmp	r3, #0
 800c47c:	eddf da3f 	vldr	s27, [pc, #252]	; 800c57c <__ieee754_acosf+0x1bc>
 800c480:	eddf ca3f 	vldr	s25, [pc, #252]	; 800c580 <__ieee754_acosf+0x1c0>
 800c484:	ed9f ca41 	vldr	s24, [pc, #260]	; 800c58c <__ieee754_acosf+0x1cc>
 800c488:	eddf ba41 	vldr	s23, [pc, #260]	; 800c590 <__ieee754_acosf+0x1d0>
 800c48c:	ed9f ba41 	vldr	s22, [pc, #260]	; 800c594 <__ieee754_acosf+0x1d4>
 800c490:	eddf 8a41 	vldr	s17, [pc, #260]	; 800c598 <__ieee754_acosf+0x1d8>
 800c494:	ed9f da41 	vldr	s26, [pc, #260]	; 800c59c <__ieee754_acosf+0x1dc>
 800c498:	eddf aa3a 	vldr	s21, [pc, #232]	; 800c584 <__ieee754_acosf+0x1c4>
 800c49c:	ed9f aa40 	vldr	s20, [pc, #256]	; 800c5a0 <__ieee754_acosf+0x1e0>
 800c4a0:	eddf 9a40 	vldr	s19, [pc, #256]	; 800c5a4 <__ieee754_acosf+0x1e4>
 800c4a4:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 800c4a8:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800c4ac:	da28      	bge.n	800c500 <__ieee754_acosf+0x140>
 800c4ae:	ee30 0a09 	vadd.f32	s0, s0, s18
 800c4b2:	ee20 0a27 	vmul.f32	s0, s0, s15
 800c4b6:	eee0 ca2d 	vfma.f32	s25, s0, s27
 800c4ba:	eee0 aa0d 	vfma.f32	s21, s0, s26
 800c4be:	eeac ca80 	vfma.f32	s24, s25, s0
 800c4c2:	eeaa aa80 	vfma.f32	s20, s21, s0
 800c4c6:	eeec ba00 	vfma.f32	s23, s24, s0
 800c4ca:	eeea 9a00 	vfma.f32	s19, s20, s0
 800c4ce:	eeab ba80 	vfma.f32	s22, s23, s0
 800c4d2:	eea9 9a80 	vfma.f32	s18, s19, s0
 800c4d6:	eeeb 8a00 	vfma.f32	s17, s22, s0
 800c4da:	ee68 8a80 	vmul.f32	s17, s17, s0
 800c4de:	f001 f8f5 	bl	800d6cc <__ieee754_sqrtf>
 800c4e2:	ee88 7a89 	vdiv.f32	s14, s17, s18
 800c4e6:	eddf 7a31 	vldr	s15, [pc, #196]	; 800c5ac <__ieee754_acosf+0x1ec>
 800c4ea:	eee0 7a07 	vfma.f32	s15, s0, s14
 800c4ee:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800c4f2:	ee77 7a80 	vadd.f32	s15, s15, s0
 800c4f6:	ed9f 0a2e 	vldr	s0, [pc, #184]	; 800c5b0 <__ieee754_acosf+0x1f0>
 800c4fa:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800c4fe:	e771      	b.n	800c3e4 <__ieee754_acosf+0x24>
 800c500:	ee39 8a40 	vsub.f32	s16, s18, s0
 800c504:	ee28 8a27 	vmul.f32	s16, s16, s15
 800c508:	eeb0 0a48 	vmov.f32	s0, s16
 800c50c:	f001 f8de 	bl	800d6cc <__ieee754_sqrtf>
 800c510:	eee8 ca2d 	vfma.f32	s25, s16, s27
 800c514:	eee8 aa0d 	vfma.f32	s21, s16, s26
 800c518:	eeac ca88 	vfma.f32	s24, s25, s16
 800c51c:	eeaa aa88 	vfma.f32	s20, s21, s16
 800c520:	eeec ba08 	vfma.f32	s23, s24, s16
 800c524:	ee10 3a10 	vmov	r3, s0
 800c528:	eeab ba88 	vfma.f32	s22, s23, s16
 800c52c:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800c530:	f023 030f 	bic.w	r3, r3, #15
 800c534:	eeea 9a08 	vfma.f32	s19, s20, s16
 800c538:	ee07 3a90 	vmov	s15, r3
 800c53c:	eeeb 8a08 	vfma.f32	s17, s22, s16
 800c540:	eeb0 6a48 	vmov.f32	s12, s16
 800c544:	eea7 6ae7 	vfms.f32	s12, s15, s15
 800c548:	eea9 9a88 	vfma.f32	s18, s19, s16
 800c54c:	ee70 6a27 	vadd.f32	s13, s0, s15
 800c550:	ee68 8a88 	vmul.f32	s17, s17, s16
 800c554:	eeb0 7a40 	vmov.f32	s14, s0
 800c558:	ee86 0a26 	vdiv.f32	s0, s12, s13
 800c55c:	eec8 6a89 	vdiv.f32	s13, s17, s18
 800c560:	eea7 0a26 	vfma.f32	s0, s14, s13
 800c564:	ee30 0a27 	vadd.f32	s0, s0, s15
 800c568:	ee30 0a00 	vadd.f32	s0, s0, s0
 800c56c:	e73a      	b.n	800c3e4 <__ieee754_acosf+0x24>
 800c56e:	ed9f 0a11 	vldr	s0, [pc, #68]	; 800c5b4 <__ieee754_acosf+0x1f4>
 800c572:	e737      	b.n	800c3e4 <__ieee754_acosf+0x24>
 800c574:	00000000 	.word	0x00000000
 800c578:	40490fdb 	.word	0x40490fdb
 800c57c:	3811ef08 	.word	0x3811ef08
 800c580:	3a4f7f04 	.word	0x3a4f7f04
 800c584:	bf303361 	.word	0xbf303361
 800c588:	33a22168 	.word	0x33a22168
 800c58c:	bd241146 	.word	0xbd241146
 800c590:	3e4e0aa8 	.word	0x3e4e0aa8
 800c594:	bea6b090 	.word	0xbea6b090
 800c598:	3e2aaaab 	.word	0x3e2aaaab
 800c59c:	3d9dc62e 	.word	0x3d9dc62e
 800c5a0:	4001572d 	.word	0x4001572d
 800c5a4:	c019d139 	.word	0xc019d139
 800c5a8:	3fc90fda 	.word	0x3fc90fda
 800c5ac:	b3a22168 	.word	0xb3a22168
 800c5b0:	40490fda 	.word	0x40490fda
 800c5b4:	3fc90fdb 	.word	0x3fc90fdb

0800c5b8 <__ieee754_acoshf>:
 800c5b8:	b508      	push	{r3, lr}
 800c5ba:	ee10 3a10 	vmov	r3, s0
 800c5be:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 800c5c2:	ed2d 8b04 	vpush	{d8-d9}
 800c5c6:	eeb0 8a40 	vmov.f32	s16, s0
 800c5ca:	da06      	bge.n	800c5da <__ieee754_acoshf+0x22>
 800c5cc:	ee30 8a40 	vsub.f32	s16, s0, s0
 800c5d0:	ee88 0a08 	vdiv.f32	s0, s16, s16
 800c5d4:	ecbd 8b04 	vpop	{d8-d9}
 800c5d8:	bd08      	pop	{r3, pc}
 800c5da:	f1b3 4f9b 	cmp.w	r3, #1300234240	; 0x4d800000
 800c5de:	db0c      	blt.n	800c5fa <__ieee754_acoshf+0x42>
 800c5e0:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800c5e4:	db02      	blt.n	800c5ec <__ieee754_acoshf+0x34>
 800c5e6:	ee30 0a00 	vadd.f32	s0, s0, s0
 800c5ea:	e7f3      	b.n	800c5d4 <__ieee754_acoshf+0x1c>
 800c5ec:	f000 fb26 	bl	800cc3c <__ieee754_logf>
 800c5f0:	ed9f 8a19 	vldr	s16, [pc, #100]	; 800c658 <__ieee754_acoshf+0xa0>
 800c5f4:	ee30 0a08 	vadd.f32	s0, s0, s16
 800c5f8:	e7ec      	b.n	800c5d4 <__ieee754_acoshf+0x1c>
 800c5fa:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 800c5fe:	d028      	beq.n	800c652 <__ieee754_acoshf+0x9a>
 800c600:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c604:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 800c608:	eef0 8a00 	vmov.f32	s17, #0	; 0x40000000  2.0
 800c60c:	dd11      	ble.n	800c632 <__ieee754_acoshf+0x7a>
 800c60e:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 800c612:	eea8 0a08 	vfma.f32	s0, s16, s16
 800c616:	f001 f859 	bl	800d6cc <__ieee754_sqrtf>
 800c61a:	ee70 7a08 	vadd.f32	s15, s0, s16
 800c61e:	ee89 0a27 	vdiv.f32	s0, s18, s15
 800c622:	ee98 0a28 	vfnms.f32	s0, s16, s17
 800c626:	ecbd 8b04 	vpop	{d8-d9}
 800c62a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800c62e:	f000 bb05 	b.w	800cc3c <__ieee754_logf>
 800c632:	ee30 8a49 	vsub.f32	s16, s0, s18
 800c636:	ee28 0a08 	vmul.f32	s0, s16, s16
 800c63a:	eea8 0a28 	vfma.f32	s0, s16, s17
 800c63e:	f001 f845 	bl	800d6cc <__ieee754_sqrtf>
 800c642:	ee30 0a08 	vadd.f32	s0, s0, s16
 800c646:	ecbd 8b04 	vpop	{d8-d9}
 800c64a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800c64e:	f7fe bfe3 	b.w	800b618 <log1pf>
 800c652:	ed9f 0a02 	vldr	s0, [pc, #8]	; 800c65c <__ieee754_acoshf+0xa4>
 800c656:	e7bd      	b.n	800c5d4 <__ieee754_acoshf+0x1c>
 800c658:	3f317218 	.word	0x3f317218
 800c65c:	00000000 	.word	0x00000000

0800c660 <__ieee754_asinf>:
 800c660:	b538      	push	{r3, r4, r5, lr}
 800c662:	ee10 5a10 	vmov	r5, s0
 800c666:	f025 4400 	bic.w	r4, r5, #2147483648	; 0x80000000
 800c66a:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 800c66e:	ed2d 8b04 	vpush	{d8-d9}
 800c672:	d10c      	bne.n	800c68e <__ieee754_asinf+0x2e>
 800c674:	eddf 7a5e 	vldr	s15, [pc, #376]	; 800c7f0 <__ieee754_asinf+0x190>
 800c678:	ed9f 7a5e 	vldr	s14, [pc, #376]	; 800c7f4 <__ieee754_asinf+0x194>
 800c67c:	ee60 7a27 	vmul.f32	s15, s0, s15
 800c680:	eee0 7a07 	vfma.f32	s15, s0, s14
 800c684:	eeb0 0a67 	vmov.f32	s0, s15
 800c688:	ecbd 8b04 	vpop	{d8-d9}
 800c68c:	bd38      	pop	{r3, r4, r5, pc}
 800c68e:	dd04      	ble.n	800c69a <__ieee754_asinf+0x3a>
 800c690:	ee70 7a40 	vsub.f32	s15, s0, s0
 800c694:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800c698:	e7f6      	b.n	800c688 <__ieee754_asinf+0x28>
 800c69a:	f1b4 5f7c 	cmp.w	r4, #1056964608	; 0x3f000000
 800c69e:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 800c6a2:	da0b      	bge.n	800c6bc <__ieee754_asinf+0x5c>
 800c6a4:	f1b4 5f48 	cmp.w	r4, #838860800	; 0x32000000
 800c6a8:	da52      	bge.n	800c750 <__ieee754_asinf+0xf0>
 800c6aa:	eddf 7a53 	vldr	s15, [pc, #332]	; 800c7f8 <__ieee754_asinf+0x198>
 800c6ae:	ee70 7a27 	vadd.f32	s15, s0, s15
 800c6b2:	eef4 7ae8 	vcmpe.f32	s15, s17
 800c6b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c6ba:	dce5      	bgt.n	800c688 <__ieee754_asinf+0x28>
 800c6bc:	f7fe ff62 	bl	800b584 <fabsf>
 800c6c0:	ee38 0ac0 	vsub.f32	s0, s17, s0
 800c6c4:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 800c6c8:	ee20 8a08 	vmul.f32	s16, s0, s16
 800c6cc:	eddf 7a4b 	vldr	s15, [pc, #300]	; 800c7fc <__ieee754_asinf+0x19c>
 800c6d0:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 800c800 <__ieee754_asinf+0x1a0>
 800c6d4:	ed9f 9a4b 	vldr	s18, [pc, #300]	; 800c804 <__ieee754_asinf+0x1a4>
 800c6d8:	eea8 7a27 	vfma.f32	s14, s16, s15
 800c6dc:	eddf 7a4a 	vldr	s15, [pc, #296]	; 800c808 <__ieee754_asinf+0x1a8>
 800c6e0:	eee7 7a08 	vfma.f32	s15, s14, s16
 800c6e4:	ed9f 7a49 	vldr	s14, [pc, #292]	; 800c80c <__ieee754_asinf+0x1ac>
 800c6e8:	eea7 7a88 	vfma.f32	s14, s15, s16
 800c6ec:	eddf 7a48 	vldr	s15, [pc, #288]	; 800c810 <__ieee754_asinf+0x1b0>
 800c6f0:	eee7 7a08 	vfma.f32	s15, s14, s16
 800c6f4:	ed9f 7a47 	vldr	s14, [pc, #284]	; 800c814 <__ieee754_asinf+0x1b4>
 800c6f8:	eea7 9a88 	vfma.f32	s18, s15, s16
 800c6fc:	eddf 7a46 	vldr	s15, [pc, #280]	; 800c818 <__ieee754_asinf+0x1b8>
 800c700:	eee8 7a07 	vfma.f32	s15, s16, s14
 800c704:	ed9f 7a45 	vldr	s14, [pc, #276]	; 800c81c <__ieee754_asinf+0x1bc>
 800c708:	eea7 7a88 	vfma.f32	s14, s15, s16
 800c70c:	eddf 7a44 	vldr	s15, [pc, #272]	; 800c820 <__ieee754_asinf+0x1c0>
 800c710:	eee7 7a08 	vfma.f32	s15, s14, s16
 800c714:	eeb0 0a48 	vmov.f32	s0, s16
 800c718:	eee7 8a88 	vfma.f32	s17, s15, s16
 800c71c:	f000 ffd6 	bl	800d6cc <__ieee754_sqrtf>
 800c720:	4b40      	ldr	r3, [pc, #256]	; (800c824 <__ieee754_asinf+0x1c4>)
 800c722:	ee29 9a08 	vmul.f32	s18, s18, s16
 800c726:	429c      	cmp	r4, r3
 800c728:	ee89 6a28 	vdiv.f32	s12, s18, s17
 800c72c:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 800c730:	dd3d      	ble.n	800c7ae <__ieee754_asinf+0x14e>
 800c732:	eea0 0a06 	vfma.f32	s0, s0, s12
 800c736:	eddf 7a3c 	vldr	s15, [pc, #240]	; 800c828 <__ieee754_asinf+0x1c8>
 800c73a:	eee0 7a07 	vfma.f32	s15, s0, s14
 800c73e:	ed9f 0a2d 	vldr	s0, [pc, #180]	; 800c7f4 <__ieee754_asinf+0x194>
 800c742:	ee30 0a67 	vsub.f32	s0, s0, s15
 800c746:	2d00      	cmp	r5, #0
 800c748:	bfd8      	it	le
 800c74a:	eeb1 0a40 	vnegle.f32	s0, s0
 800c74e:	e79b      	b.n	800c688 <__ieee754_asinf+0x28>
 800c750:	ee60 7a00 	vmul.f32	s15, s0, s0
 800c754:	eddf 6a29 	vldr	s13, [pc, #164]	; 800c7fc <__ieee754_asinf+0x19c>
 800c758:	ed9f 7a29 	vldr	s14, [pc, #164]	; 800c800 <__ieee754_asinf+0x1a0>
 800c75c:	ed9f 6a2d 	vldr	s12, [pc, #180]	; 800c814 <__ieee754_asinf+0x1b4>
 800c760:	eea7 7aa6 	vfma.f32	s14, s15, s13
 800c764:	eddf 6a28 	vldr	s13, [pc, #160]	; 800c808 <__ieee754_asinf+0x1a8>
 800c768:	eee7 6a27 	vfma.f32	s13, s14, s15
 800c76c:	ed9f 7a27 	vldr	s14, [pc, #156]	; 800c80c <__ieee754_asinf+0x1ac>
 800c770:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800c774:	eddf 6a26 	vldr	s13, [pc, #152]	; 800c810 <__ieee754_asinf+0x1b0>
 800c778:	eee7 6a27 	vfma.f32	s13, s14, s15
 800c77c:	ed9f 7a21 	vldr	s14, [pc, #132]	; 800c804 <__ieee754_asinf+0x1a4>
 800c780:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800c784:	eddf 6a24 	vldr	s13, [pc, #144]	; 800c818 <__ieee754_asinf+0x1b8>
 800c788:	eee7 6a86 	vfma.f32	s13, s15, s12
 800c78c:	ed9f 6a23 	vldr	s12, [pc, #140]	; 800c81c <__ieee754_asinf+0x1bc>
 800c790:	eea6 6aa7 	vfma.f32	s12, s13, s15
 800c794:	eddf 6a22 	vldr	s13, [pc, #136]	; 800c820 <__ieee754_asinf+0x1c0>
 800c798:	eee6 6a27 	vfma.f32	s13, s12, s15
 800c79c:	ee27 7a27 	vmul.f32	s14, s14, s15
 800c7a0:	eee6 8aa7 	vfma.f32	s17, s13, s15
 800c7a4:	eec7 7a28 	vdiv.f32	s15, s14, s17
 800c7a8:	eea0 0a27 	vfma.f32	s0, s0, s15
 800c7ac:	e76c      	b.n	800c688 <__ieee754_asinf+0x28>
 800c7ae:	ee10 3a10 	vmov	r3, s0
 800c7b2:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800c7b6:	f023 030f 	bic.w	r3, r3, #15
 800c7ba:	ee07 3a90 	vmov	s15, r3
 800c7be:	eef1 6a67 	vneg.f32	s13, s15
 800c7c2:	eea6 8aa7 	vfma.f32	s16, s13, s15
 800c7c6:	ee70 5a00 	vadd.f32	s11, s0, s0
 800c7ca:	ee37 0a80 	vadd.f32	s0, s15, s0
 800c7ce:	eddf 7a08 	vldr	s15, [pc, #32]	; 800c7f0 <__ieee754_asinf+0x190>
 800c7d2:	ee88 5a00 	vdiv.f32	s10, s16, s0
 800c7d6:	ed9f 0a15 	vldr	s0, [pc, #84]	; 800c82c <__ieee754_asinf+0x1cc>
 800c7da:	eee5 7a47 	vfms.f32	s15, s10, s14
 800c7de:	eed5 7a86 	vfnms.f32	s15, s11, s12
 800c7e2:	eeb0 6a40 	vmov.f32	s12, s0
 800c7e6:	eea6 6a87 	vfma.f32	s12, s13, s14
 800c7ea:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800c7ee:	e7a8      	b.n	800c742 <__ieee754_asinf+0xe2>
 800c7f0:	b33bbd2e 	.word	0xb33bbd2e
 800c7f4:	3fc90fdb 	.word	0x3fc90fdb
 800c7f8:	7149f2ca 	.word	0x7149f2ca
 800c7fc:	3811ef08 	.word	0x3811ef08
 800c800:	3a4f7f04 	.word	0x3a4f7f04
 800c804:	3e2aaaab 	.word	0x3e2aaaab
 800c808:	bd241146 	.word	0xbd241146
 800c80c:	3e4e0aa8 	.word	0x3e4e0aa8
 800c810:	bea6b090 	.word	0xbea6b090
 800c814:	3d9dc62e 	.word	0x3d9dc62e
 800c818:	bf303361 	.word	0xbf303361
 800c81c:	4001572d 	.word	0x4001572d
 800c820:	c019d139 	.word	0xc019d139
 800c824:	3f799999 	.word	0x3f799999
 800c828:	333bbd2e 	.word	0x333bbd2e
 800c82c:	3f490fdb 	.word	0x3f490fdb

0800c830 <__ieee754_atanhf>:
 800c830:	b510      	push	{r4, lr}
 800c832:	ee10 4a10 	vmov	r4, s0
 800c836:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800c83a:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 800c83e:	ed2d 8b02 	vpush	{d8}
 800c842:	dd06      	ble.n	800c852 <__ieee754_atanhf+0x22>
 800c844:	ee70 7a40 	vsub.f32	s15, s0, s0
 800c848:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800c84c:	ecbd 8b02 	vpop	{d8}
 800c850:	bd10      	pop	{r4, pc}
 800c852:	d104      	bne.n	800c85e <__ieee754_atanhf+0x2e>
 800c854:	eddf 7a17 	vldr	s15, [pc, #92]	; 800c8b4 <__ieee754_atanhf+0x84>
 800c858:	ee80 0a27 	vdiv.f32	s0, s0, s15
 800c85c:	e7f6      	b.n	800c84c <__ieee754_atanhf+0x1c>
 800c85e:	f1b3 5f46 	cmp.w	r3, #830472192	; 0x31800000
 800c862:	da08      	bge.n	800c876 <__ieee754_atanhf+0x46>
 800c864:	eddf 7a14 	vldr	s15, [pc, #80]	; 800c8b8 <__ieee754_atanhf+0x88>
 800c868:	ee70 7a27 	vadd.f32	s15, s0, s15
 800c86c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800c870:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800c874:	dcea      	bgt.n	800c84c <__ieee754_atanhf+0x1c>
 800c876:	ee07 3a90 	vmov	s15, r3
 800c87a:	ee37 0aa7 	vadd.f32	s0, s15, s15
 800c87e:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 800c882:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c886:	ee37 7a67 	vsub.f32	s14, s14, s15
 800c88a:	bfb6      	itet	lt
 800c88c:	ee60 7a27 	vmullt.f32	s15, s0, s15
 800c890:	ee80 0a07 	vdivge.f32	s0, s0, s14
 800c894:	eec7 6a87 	vdivlt.f32	s13, s15, s14
 800c898:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 800c89c:	bfb8      	it	lt
 800c89e:	ee36 0a80 	vaddlt.f32	s0, s13, s0
 800c8a2:	f7fe feb9 	bl	800b618 <log1pf>
 800c8a6:	ee20 0a08 	vmul.f32	s0, s0, s16
 800c8aa:	2c00      	cmp	r4, #0
 800c8ac:	bfb8      	it	lt
 800c8ae:	eeb1 0a40 	vneglt.f32	s0, s0
 800c8b2:	e7cb      	b.n	800c84c <__ieee754_atanhf+0x1c>
 800c8b4:	00000000 	.word	0x00000000
 800c8b8:	7149f2ca 	.word	0x7149f2ca

0800c8bc <__ieee754_coshf>:
 800c8bc:	b510      	push	{r4, lr}
 800c8be:	ee10 4a10 	vmov	r4, s0
 800c8c2:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 800c8c6:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800c8ca:	ed2d 8b02 	vpush	{d8}
 800c8ce:	db04      	blt.n	800c8da <__ieee754_coshf+0x1e>
 800c8d0:	ee20 0a00 	vmul.f32	s0, s0, s0
 800c8d4:	ecbd 8b02 	vpop	{d8}
 800c8d8:	bd10      	pop	{r4, pc}
 800c8da:	4b25      	ldr	r3, [pc, #148]	; (800c970 <__ieee754_coshf+0xb4>)
 800c8dc:	429c      	cmp	r4, r3
 800c8de:	dc15      	bgt.n	800c90c <__ieee754_coshf+0x50>
 800c8e0:	f7fe fe50 	bl	800b584 <fabsf>
 800c8e4:	f001 fb0c 	bl	800df00 <expm1f>
 800c8e8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800c8ec:	f1b4 5f10 	cmp.w	r4, #603979776	; 0x24000000
 800c8f0:	eef0 7a40 	vmov.f32	s15, s0
 800c8f4:	ee30 0a07 	vadd.f32	s0, s0, s14
 800c8f8:	dbec      	blt.n	800c8d4 <__ieee754_coshf+0x18>
 800c8fa:	ee30 0a00 	vadd.f32	s0, s0, s0
 800c8fe:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800c902:	eec7 6a80 	vdiv.f32	s13, s15, s0
 800c906:	ee36 0a87 	vadd.f32	s0, s13, s14
 800c90a:	e7e3      	b.n	800c8d4 <__ieee754_coshf+0x18>
 800c90c:	4b19      	ldr	r3, [pc, #100]	; (800c974 <__ieee754_coshf+0xb8>)
 800c90e:	429c      	cmp	r4, r3
 800c910:	dc0c      	bgt.n	800c92c <__ieee754_coshf+0x70>
 800c912:	f7fe fe37 	bl	800b584 <fabsf>
 800c916:	f000 f835 	bl	800c984 <__ieee754_expf>
 800c91a:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800c91e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800c922:	eee0 7a07 	vfma.f32	s15, s0, s14
 800c926:	eeb0 0a67 	vmov.f32	s0, s15
 800c92a:	e7d3      	b.n	800c8d4 <__ieee754_coshf+0x18>
 800c92c:	4b12      	ldr	r3, [pc, #72]	; (800c978 <__ieee754_coshf+0xbc>)
 800c92e:	429c      	cmp	r4, r3
 800c930:	dc08      	bgt.n	800c944 <__ieee754_coshf+0x88>
 800c932:	f7fe fe27 	bl	800b584 <fabsf>
 800c936:	f000 f825 	bl	800c984 <__ieee754_expf>
 800c93a:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800c93e:	ee20 0a27 	vmul.f32	s0, s0, s15
 800c942:	e7c7      	b.n	800c8d4 <__ieee754_coshf+0x18>
 800c944:	4b0d      	ldr	r3, [pc, #52]	; (800c97c <__ieee754_coshf+0xc0>)
 800c946:	429c      	cmp	r4, r3
 800c948:	dc0c      	bgt.n	800c964 <__ieee754_coshf+0xa8>
 800c94a:	f7fe fe1b 	bl	800b584 <fabsf>
 800c94e:	eeb6 8a00 	vmov.f32	s16, #96	; 0x3f000000  0.5
 800c952:	ee20 0a08 	vmul.f32	s0, s0, s16
 800c956:	f000 f815 	bl	800c984 <__ieee754_expf>
 800c95a:	ee20 8a08 	vmul.f32	s16, s0, s16
 800c95e:	ee28 0a00 	vmul.f32	s0, s16, s0
 800c962:	e7b7      	b.n	800c8d4 <__ieee754_coshf+0x18>
 800c964:	ed9f 0a06 	vldr	s0, [pc, #24]	; 800c980 <__ieee754_coshf+0xc4>
 800c968:	ee20 0a00 	vmul.f32	s0, s0, s0
 800c96c:	e7b2      	b.n	800c8d4 <__ieee754_coshf+0x18>
 800c96e:	bf00      	nop
 800c970:	3eb17217 	.word	0x3eb17217
 800c974:	41afffff 	.word	0x41afffff
 800c978:	42b17217 	.word	0x42b17217
 800c97c:	42b2d4fc 	.word	0x42b2d4fc
 800c980:	7149f2ca 	.word	0x7149f2ca

0800c984 <__ieee754_expf>:
 800c984:	ee10 2a10 	vmov	r2, s0
 800c988:	f022 4100 	bic.w	r1, r2, #2147483648	; 0x80000000
 800c98c:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800c990:	d902      	bls.n	800c998 <__ieee754_expf+0x14>
 800c992:	ee30 0a00 	vadd.f32	s0, s0, s0
 800c996:	4770      	bx	lr
 800c998:	ea4f 73d2 	mov.w	r3, r2, lsr #31
 800c99c:	d106      	bne.n	800c9ac <__ieee754_expf+0x28>
 800c99e:	eddf 7a51 	vldr	s15, [pc, #324]	; 800cae4 <__ieee754_expf+0x160>
 800c9a2:	2b00      	cmp	r3, #0
 800c9a4:	bf18      	it	ne
 800c9a6:	eeb0 0a67 	vmovne.f32	s0, s15
 800c9aa:	4770      	bx	lr
 800c9ac:	484e      	ldr	r0, [pc, #312]	; (800cae8 <__ieee754_expf+0x164>)
 800c9ae:	4282      	cmp	r2, r0
 800c9b0:	dd04      	ble.n	800c9bc <__ieee754_expf+0x38>
 800c9b2:	ed9f 0a4e 	vldr	s0, [pc, #312]	; 800caec <__ieee754_expf+0x168>
 800c9b6:	ee20 0a00 	vmul.f32	s0, s0, s0
 800c9ba:	4770      	bx	lr
 800c9bc:	2a00      	cmp	r2, #0
 800c9be:	da03      	bge.n	800c9c8 <__ieee754_expf+0x44>
 800c9c0:	4a4b      	ldr	r2, [pc, #300]	; (800caf0 <__ieee754_expf+0x16c>)
 800c9c2:	4291      	cmp	r1, r2
 800c9c4:	f200 808a 	bhi.w	800cadc <__ieee754_expf+0x158>
 800c9c8:	4a4a      	ldr	r2, [pc, #296]	; (800caf4 <__ieee754_expf+0x170>)
 800c9ca:	4291      	cmp	r1, r2
 800c9cc:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800c9d0:	d954      	bls.n	800ca7c <__ieee754_expf+0xf8>
 800c9d2:	4a49      	ldr	r2, [pc, #292]	; (800caf8 <__ieee754_expf+0x174>)
 800c9d4:	4291      	cmp	r1, r2
 800c9d6:	ea4f 0283 	mov.w	r2, r3, lsl #2
 800c9da:	d836      	bhi.n	800ca4a <__ieee754_expf+0xc6>
 800c9dc:	4947      	ldr	r1, [pc, #284]	; (800cafc <__ieee754_expf+0x178>)
 800c9de:	4411      	add	r1, r2
 800c9e0:	ed91 7a00 	vldr	s14, [r1]
 800c9e4:	4946      	ldr	r1, [pc, #280]	; (800cb00 <__ieee754_expf+0x17c>)
 800c9e6:	440a      	add	r2, r1
 800c9e8:	edd2 7a00 	vldr	s15, [r2]
 800c9ec:	ee30 7a47 	vsub.f32	s14, s0, s14
 800c9f0:	f1c3 0201 	rsb	r2, r3, #1
 800c9f4:	1ad2      	subs	r2, r2, r3
 800c9f6:	ee37 0a67 	vsub.f32	s0, s14, s15
 800c9fa:	ee60 6a00 	vmul.f32	s13, s0, s0
 800c9fe:	eddf 5a41 	vldr	s11, [pc, #260]	; 800cb04 <__ieee754_expf+0x180>
 800ca02:	ed9f 5a41 	vldr	s10, [pc, #260]	; 800cb08 <__ieee754_expf+0x184>
 800ca06:	eea6 5aa5 	vfma.f32	s10, s13, s11
 800ca0a:	eddf 5a40 	vldr	s11, [pc, #256]	; 800cb0c <__ieee754_expf+0x188>
 800ca0e:	eee5 5a26 	vfma.f32	s11, s10, s13
 800ca12:	ed9f 5a3f 	vldr	s10, [pc, #252]	; 800cb10 <__ieee754_expf+0x18c>
 800ca16:	eea5 5aa6 	vfma.f32	s10, s11, s13
 800ca1a:	eddf 5a3e 	vldr	s11, [pc, #248]	; 800cb14 <__ieee754_expf+0x190>
 800ca1e:	eee5 5a26 	vfma.f32	s11, s10, s13
 800ca22:	eeb0 5a40 	vmov.f32	s10, s0
 800ca26:	eea5 5ae6 	vfms.f32	s10, s11, s13
 800ca2a:	eef0 5a00 	vmov.f32	s11, #0	; 0x40000000  2.0
 800ca2e:	eef0 6a45 	vmov.f32	s13, s10
 800ca32:	ee20 5a05 	vmul.f32	s10, s0, s10
 800ca36:	bb92      	cbnz	r2, 800ca9e <__ieee754_expf+0x11a>
 800ca38:	ee76 6ae5 	vsub.f32	s13, s13, s11
 800ca3c:	eec5 7a26 	vdiv.f32	s15, s10, s13
 800ca40:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800ca44:	ee36 0a40 	vsub.f32	s0, s12, s0
 800ca48:	4770      	bx	lr
 800ca4a:	4b33      	ldr	r3, [pc, #204]	; (800cb18 <__ieee754_expf+0x194>)
 800ca4c:	ed9f 7a33 	vldr	s14, [pc, #204]	; 800cb1c <__ieee754_expf+0x198>
 800ca50:	4413      	add	r3, r2
 800ca52:	edd3 7a00 	vldr	s15, [r3]
 800ca56:	eee0 7a07 	vfma.f32	s15, s0, s14
 800ca5a:	ed9f 7a31 	vldr	s14, [pc, #196]	; 800cb20 <__ieee754_expf+0x19c>
 800ca5e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800ca62:	ee17 2a90 	vmov	r2, s15
 800ca66:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ca6a:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800ca6e:	eeb0 7a40 	vmov.f32	s14, s0
 800ca72:	ed9f 0a2c 	vldr	s0, [pc, #176]	; 800cb24 <__ieee754_expf+0x1a0>
 800ca76:	ee67 7a80 	vmul.f32	s15, s15, s0
 800ca7a:	e7bc      	b.n	800c9f6 <__ieee754_expf+0x72>
 800ca7c:	f1b1 5f46 	cmp.w	r1, #830472192	; 0x31800000
 800ca80:	d20b      	bcs.n	800ca9a <__ieee754_expf+0x116>
 800ca82:	eddf 6a1a 	vldr	s13, [pc, #104]	; 800caec <__ieee754_expf+0x168>
 800ca86:	ee70 6a26 	vadd.f32	s13, s0, s13
 800ca8a:	eef4 6ac6 	vcmpe.f32	s13, s12
 800ca8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ca92:	dd02      	ble.n	800ca9a <__ieee754_expf+0x116>
 800ca94:	ee30 0a06 	vadd.f32	s0, s0, s12
 800ca98:	4770      	bx	lr
 800ca9a:	2200      	movs	r2, #0
 800ca9c:	e7ad      	b.n	800c9fa <__ieee754_expf+0x76>
 800ca9e:	ee75 6ae6 	vsub.f32	s13, s11, s13
 800caa2:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 800caa6:	ee85 0a26 	vdiv.f32	s0, s10, s13
 800caaa:	bfb8      	it	lt
 800caac:	3264      	addlt	r2, #100	; 0x64
 800caae:	ee77 7ac0 	vsub.f32	s15, s15, s0
 800cab2:	ee37 0ac7 	vsub.f32	s0, s15, s14
 800cab6:	ee76 7a40 	vsub.f32	s15, s12, s0
 800caba:	ee17 3a90 	vmov	r3, s15
 800cabe:	bfab      	itete	ge
 800cac0:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 800cac4:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 800cac8:	ee00 3a10 	vmovge	s0, r3
 800cacc:	eddf 7a16 	vldrlt	s15, [pc, #88]	; 800cb28 <__ieee754_expf+0x1a4>
 800cad0:	bfbc      	itt	lt
 800cad2:	ee00 3a10 	vmovlt	s0, r3
 800cad6:	ee20 0a27 	vmullt.f32	s0, s0, s15
 800cada:	4770      	bx	lr
 800cadc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800cae4 <__ieee754_expf+0x160>
 800cae0:	4770      	bx	lr
 800cae2:	bf00      	nop
 800cae4:	00000000 	.word	0x00000000
 800cae8:	42b17217 	.word	0x42b17217
 800caec:	7149f2ca 	.word	0x7149f2ca
 800caf0:	42cff1b5 	.word	0x42cff1b5
 800caf4:	3eb17218 	.word	0x3eb17218
 800caf8:	3f851591 	.word	0x3f851591
 800cafc:	08073488 	.word	0x08073488
 800cb00:	08073490 	.word	0x08073490
 800cb04:	3331bb4c 	.word	0x3331bb4c
 800cb08:	b5ddea0e 	.word	0xb5ddea0e
 800cb0c:	388ab355 	.word	0x388ab355
 800cb10:	bb360b61 	.word	0xbb360b61
 800cb14:	3e2aaaab 	.word	0x3e2aaaab
 800cb18:	08073480 	.word	0x08073480
 800cb1c:	3fb8aa3b 	.word	0x3fb8aa3b
 800cb20:	3f317180 	.word	0x3f317180
 800cb24:	3717f7d1 	.word	0x3717f7d1
 800cb28:	0d800000 	.word	0x0d800000

0800cb2c <__ieee754_fmodf>:
 800cb2c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800cb2e:	ee10 6a90 	vmov	r6, s1
 800cb32:	f036 4500 	bics.w	r5, r6, #2147483648	; 0x80000000
 800cb36:	ee10 3a10 	vmov	r3, s0
 800cb3a:	d009      	beq.n	800cb50 <__ieee754_fmodf+0x24>
 800cb3c:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800cb40:	f1b1 4fff 	cmp.w	r1, #2139095040	; 0x7f800000
 800cb44:	ee10 7a10 	vmov	r7, s0
 800cb48:	da02      	bge.n	800cb50 <__ieee754_fmodf+0x24>
 800cb4a:	f1b5 4fff 	cmp.w	r5, #2139095040	; 0x7f800000
 800cb4e:	dd0a      	ble.n	800cb66 <__ieee754_fmodf+0x3a>
 800cb50:	ee07 3a90 	vmov	s15, r3
 800cb54:	ee67 0aa0 	vmul.f32	s1, s15, s1
 800cb58:	eec0 7aa0 	vdiv.f32	s15, s1, s1
 800cb5c:	ee17 3a90 	vmov	r3, s15
 800cb60:	ee00 3a10 	vmov	s0, r3
 800cb64:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cb66:	42a9      	cmp	r1, r5
 800cb68:	dbfa      	blt.n	800cb60 <__ieee754_fmodf+0x34>
 800cb6a:	f003 4400 	and.w	r4, r3, #2147483648	; 0x80000000
 800cb6e:	d105      	bne.n	800cb7c <__ieee754_fmodf+0x50>
 800cb70:	4a30      	ldr	r2, [pc, #192]	; (800cc34 <__ieee754_fmodf+0x108>)
 800cb72:	0fe3      	lsrs	r3, r4, #31
 800cb74:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800cb78:	681b      	ldr	r3, [r3, #0]
 800cb7a:	e7f1      	b.n	800cb60 <__ieee754_fmodf+0x34>
 800cb7c:	4b2e      	ldr	r3, [pc, #184]	; (800cc38 <__ieee754_fmodf+0x10c>)
 800cb7e:	4299      	cmp	r1, r3
 800cb80:	dc3e      	bgt.n	800cc00 <__ieee754_fmodf+0xd4>
 800cb82:	020a      	lsls	r2, r1, #8
 800cb84:	f06f 007d 	mvn.w	r0, #125	; 0x7d
 800cb88:	2a00      	cmp	r2, #0
 800cb8a:	dc36      	bgt.n	800cbfa <__ieee754_fmodf+0xce>
 800cb8c:	429d      	cmp	r5, r3
 800cb8e:	dc3a      	bgt.n	800cc06 <__ieee754_fmodf+0xda>
 800cb90:	022b      	lsls	r3, r5, #8
 800cb92:	f06f 027d 	mvn.w	r2, #125	; 0x7d
 800cb96:	005b      	lsls	r3, r3, #1
 800cb98:	f102 32ff 	add.w	r2, r2, #4294967295
 800cb9c:	d5fb      	bpl.n	800cb96 <__ieee754_fmodf+0x6a>
 800cb9e:	f110 0f7e 	cmn.w	r0, #126	; 0x7e
 800cba2:	bfbb      	ittet	lt
 800cba4:	f06f 037d 	mvnlt.w	r3, #125	; 0x7d
 800cba8:	1a1b      	sublt	r3, r3, r0
 800cbaa:	f3c7 0116 	ubfxge	r1, r7, #0, #23
 800cbae:	4099      	lsllt	r1, r3
 800cbb0:	bfa8      	it	ge
 800cbb2:	f441 0100 	orrge.w	r1, r1, #8388608	; 0x800000
 800cbb6:	f112 0f7e 	cmn.w	r2, #126	; 0x7e
 800cbba:	bfb5      	itete	lt
 800cbbc:	f06f 037d 	mvnlt.w	r3, #125	; 0x7d
 800cbc0:	f3c6 0516 	ubfxge	r5, r6, #0, #23
 800cbc4:	1a9b      	sublt	r3, r3, r2
 800cbc6:	f445 0500 	orrge.w	r5, r5, #8388608	; 0x800000
 800cbca:	bfb8      	it	lt
 800cbcc:	409d      	lsllt	r5, r3
 800cbce:	1a80      	subs	r0, r0, r2
 800cbd0:	1b4b      	subs	r3, r1, r5
 800cbd2:	b9d8      	cbnz	r0, 800cc0c <__ieee754_fmodf+0xe0>
 800cbd4:	ea33 0323 	bics.w	r3, r3, r3, asr #32
 800cbd8:	bf28      	it	cs
 800cbda:	460b      	movcs	r3, r1
 800cbdc:	2b00      	cmp	r3, #0
 800cbde:	d0c7      	beq.n	800cb70 <__ieee754_fmodf+0x44>
 800cbe0:	4915      	ldr	r1, [pc, #84]	; (800cc38 <__ieee754_fmodf+0x10c>)
 800cbe2:	428b      	cmp	r3, r1
 800cbe4:	dd1a      	ble.n	800cc1c <__ieee754_fmodf+0xf0>
 800cbe6:	f112 0f7e 	cmn.w	r2, #126	; 0x7e
 800cbea:	db1a      	blt.n	800cc22 <__ieee754_fmodf+0xf6>
 800cbec:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 800cbf0:	4323      	orrs	r3, r4
 800cbf2:	327f      	adds	r2, #127	; 0x7f
 800cbf4:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 800cbf8:	e7b2      	b.n	800cb60 <__ieee754_fmodf+0x34>
 800cbfa:	3801      	subs	r0, #1
 800cbfc:	0052      	lsls	r2, r2, #1
 800cbfe:	e7c3      	b.n	800cb88 <__ieee754_fmodf+0x5c>
 800cc00:	15c8      	asrs	r0, r1, #23
 800cc02:	387f      	subs	r0, #127	; 0x7f
 800cc04:	e7c2      	b.n	800cb8c <__ieee754_fmodf+0x60>
 800cc06:	15ea      	asrs	r2, r5, #23
 800cc08:	3a7f      	subs	r2, #127	; 0x7f
 800cc0a:	e7c8      	b.n	800cb9e <__ieee754_fmodf+0x72>
 800cc0c:	2b00      	cmp	r3, #0
 800cc0e:	da02      	bge.n	800cc16 <__ieee754_fmodf+0xea>
 800cc10:	0049      	lsls	r1, r1, #1
 800cc12:	3801      	subs	r0, #1
 800cc14:	e7dc      	b.n	800cbd0 <__ieee754_fmodf+0xa4>
 800cc16:	d0ab      	beq.n	800cb70 <__ieee754_fmodf+0x44>
 800cc18:	0059      	lsls	r1, r3, #1
 800cc1a:	e7fa      	b.n	800cc12 <__ieee754_fmodf+0xe6>
 800cc1c:	005b      	lsls	r3, r3, #1
 800cc1e:	3a01      	subs	r2, #1
 800cc20:	e7df      	b.n	800cbe2 <__ieee754_fmodf+0xb6>
 800cc22:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800cc26:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800cc2a:	3282      	adds	r2, #130	; 0x82
 800cc2c:	4113      	asrs	r3, r2
 800cc2e:	4323      	orrs	r3, r4
 800cc30:	e796      	b.n	800cb60 <__ieee754_fmodf+0x34>
 800cc32:	bf00      	nop
 800cc34:	08073498 	.word	0x08073498
 800cc38:	007fffff 	.word	0x007fffff

0800cc3c <__ieee754_logf>:
 800cc3c:	ee10 3a10 	vmov	r3, s0
 800cc40:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800cc44:	d106      	bne.n	800cc54 <__ieee754_logf+0x18>
 800cc46:	ed9f 7a65 	vldr	s14, [pc, #404]	; 800cddc <__ieee754_logf+0x1a0>
 800cc4a:	eddf 7a65 	vldr	s15, [pc, #404]	; 800cde0 <__ieee754_logf+0x1a4>
 800cc4e:	ee87 0a27 	vdiv.f32	s0, s14, s15
 800cc52:	4770      	bx	lr
 800cc54:	2b00      	cmp	r3, #0
 800cc56:	da02      	bge.n	800cc5e <__ieee754_logf+0x22>
 800cc58:	ee30 7a40 	vsub.f32	s14, s0, s0
 800cc5c:	e7f5      	b.n	800cc4a <__ieee754_logf+0xe>
 800cc5e:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800cc62:	db02      	blt.n	800cc6a <__ieee754_logf+0x2e>
 800cc64:	ee30 0a00 	vadd.f32	s0, s0, s0
 800cc68:	4770      	bx	lr
 800cc6a:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800cc6e:	bfbf      	itttt	lt
 800cc70:	eddf 7a5c 	vldrlt	s15, [pc, #368]	; 800cde4 <__ieee754_logf+0x1a8>
 800cc74:	ee60 7a27 	vmullt.f32	s15, s0, s15
 800cc78:	f06f 0118 	mvnlt.w	r1, #24
 800cc7c:	ee17 3a90 	vmovlt	r3, s15
 800cc80:	ea4f 52e3 	mov.w	r2, r3, asr #23
 800cc84:	bfa8      	it	ge
 800cc86:	2100      	movge	r1, #0
 800cc88:	3a7f      	subs	r2, #127	; 0x7f
 800cc8a:	440a      	add	r2, r1
 800cc8c:	4956      	ldr	r1, [pc, #344]	; (800cde8 <__ieee754_logf+0x1ac>)
 800cc8e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 800cc92:	4419      	add	r1, r3
 800cc94:	f401 0100 	and.w	r1, r1, #8388608	; 0x800000
 800cc98:	eb02 52d1 	add.w	r2, r2, r1, lsr #23
 800cc9c:	f081 517e 	eor.w	r1, r1, #1065353216	; 0x3f800000
 800cca0:	4319      	orrs	r1, r3
 800cca2:	ee07 1a90 	vmov	s15, r1
 800cca6:	f103 010f 	add.w	r1, r3, #15
 800ccaa:	f3c1 0116 	ubfx	r1, r1, #0, #23
 800ccae:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800ccb2:	290f      	cmp	r1, #15
 800ccb4:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800ccb8:	dc31      	bgt.n	800cd1e <__ieee754_logf+0xe2>
 800ccba:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800ccbe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ccc2:	d10f      	bne.n	800cce4 <__ieee754_logf+0xa8>
 800ccc4:	2a00      	cmp	r2, #0
 800ccc6:	f000 8085 	beq.w	800cdd4 <__ieee754_logf+0x198>
 800ccca:	ee07 2a90 	vmov	s15, r2
 800ccce:	ed9f 0a47 	vldr	s0, [pc, #284]	; 800cdec <__ieee754_logf+0x1b0>
 800ccd2:	ed9f 7a47 	vldr	s14, [pc, #284]	; 800cdf0 <__ieee754_logf+0x1b4>
 800ccd6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800ccda:	ee27 0a80 	vmul.f32	s0, s15, s0
 800ccde:	eea7 0a87 	vfma.f32	s0, s15, s14
 800cce2:	4770      	bx	lr
 800cce4:	eddf 7a43 	vldr	s15, [pc, #268]	; 800cdf4 <__ieee754_logf+0x1b8>
 800cce8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800ccec:	eea0 7a67 	vfms.f32	s14, s0, s15
 800ccf0:	ee60 7a00 	vmul.f32	s15, s0, s0
 800ccf4:	ee27 7a27 	vmul.f32	s14, s14, s15
 800ccf8:	b912      	cbnz	r2, 800cd00 <__ieee754_logf+0xc4>
 800ccfa:	ee30 0a47 	vsub.f32	s0, s0, s14
 800ccfe:	4770      	bx	lr
 800cd00:	ee07 2a90 	vmov	s15, r2
 800cd04:	eddf 6a39 	vldr	s13, [pc, #228]	; 800cdec <__ieee754_logf+0x1b0>
 800cd08:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800cd0c:	eea7 7ae6 	vfms.f32	s14, s15, s13
 800cd10:	ee37 0a40 	vsub.f32	s0, s14, s0
 800cd14:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800cdf0 <__ieee754_logf+0x1b4>
 800cd18:	ee97 0a87 	vfnms.f32	s0, s15, s14
 800cd1c:	4770      	bx	lr
 800cd1e:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
 800cd22:	ee70 7a27 	vadd.f32	s15, s0, s15
 800cd26:	eddf 5a34 	vldr	s11, [pc, #208]	; 800cdf8 <__ieee754_logf+0x1bc>
 800cd2a:	eddf 4a34 	vldr	s9, [pc, #208]	; 800cdfc <__ieee754_logf+0x1c0>
 800cd2e:	4934      	ldr	r1, [pc, #208]	; (800ce00 <__ieee754_logf+0x1c4>)
 800cd30:	ee80 6a27 	vdiv.f32	s12, s0, s15
 800cd34:	4419      	add	r1, r3
 800cd36:	f5c3 1357 	rsb	r3, r3, #3522560	; 0x35c000
 800cd3a:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800cd3e:	430b      	orrs	r3, r1
 800cd40:	2b00      	cmp	r3, #0
 800cd42:	ee07 2a90 	vmov	s15, r2
 800cd46:	ee26 5a06 	vmul.f32	s10, s12, s12
 800cd4a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800cd4e:	ee25 7a05 	vmul.f32	s14, s10, s10
 800cd52:	eddf 7a2c 	vldr	s15, [pc, #176]	; 800ce04 <__ieee754_logf+0x1c8>
 800cd56:	eee7 7a25 	vfma.f32	s15, s14, s11
 800cd5a:	eddf 5a2b 	vldr	s11, [pc, #172]	; 800ce08 <__ieee754_logf+0x1cc>
 800cd5e:	eee7 5a87 	vfma.f32	s11, s15, s14
 800cd62:	eddf 7a2a 	vldr	s15, [pc, #168]	; 800ce0c <__ieee754_logf+0x1d0>
 800cd66:	eee7 7a24 	vfma.f32	s15, s14, s9
 800cd6a:	eddf 4a29 	vldr	s9, [pc, #164]	; 800ce10 <__ieee754_logf+0x1d4>
 800cd6e:	eee7 4a87 	vfma.f32	s9, s15, s14
 800cd72:	eddf 7a28 	vldr	s15, [pc, #160]	; 800ce14 <__ieee754_logf+0x1d8>
 800cd76:	eee4 7a87 	vfma.f32	s15, s9, s14
 800cd7a:	ee67 7a85 	vmul.f32	s15, s15, s10
 800cd7e:	eee5 7a87 	vfma.f32	s15, s11, s14
 800cd82:	dd1c      	ble.n	800cdbe <__ieee754_logf+0x182>
 800cd84:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800cd88:	ee20 7a07 	vmul.f32	s14, s0, s14
 800cd8c:	ee27 7a00 	vmul.f32	s14, s14, s0
 800cd90:	ee77 7a87 	vadd.f32	s15, s15, s14
 800cd94:	ee67 7a86 	vmul.f32	s15, s15, s12
 800cd98:	b922      	cbnz	r2, 800cda4 <__ieee754_logf+0x168>
 800cd9a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cd9e:	ee30 0a67 	vsub.f32	s0, s0, s15
 800cda2:	4770      	bx	lr
 800cda4:	ed9f 6a11 	vldr	s12, [pc, #68]	; 800cdec <__ieee754_logf+0x1b0>
 800cda8:	eee6 7a86 	vfma.f32	s15, s13, s12
 800cdac:	ee77 7a67 	vsub.f32	s15, s14, s15
 800cdb0:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800cdb4:	eddf 7a0e 	vldr	s15, [pc, #56]	; 800cdf0 <__ieee754_logf+0x1b4>
 800cdb8:	ee96 0aa7 	vfnms.f32	s0, s13, s15
 800cdbc:	4770      	bx	lr
 800cdbe:	ee70 7a67 	vsub.f32	s15, s0, s15
 800cdc2:	ee67 7a86 	vmul.f32	s15, s15, s12
 800cdc6:	2a00      	cmp	r2, #0
 800cdc8:	d0e9      	beq.n	800cd9e <__ieee754_logf+0x162>
 800cdca:	ed9f 7a08 	vldr	s14, [pc, #32]	; 800cdec <__ieee754_logf+0x1b0>
 800cdce:	eee6 7ac7 	vfms.f32	s15, s13, s14
 800cdd2:	e7ed      	b.n	800cdb0 <__ieee754_logf+0x174>
 800cdd4:	ed9f 0a02 	vldr	s0, [pc, #8]	; 800cde0 <__ieee754_logf+0x1a4>
 800cdd8:	4770      	bx	lr
 800cdda:	bf00      	nop
 800cddc:	cc000000 	.word	0xcc000000
 800cde0:	00000000 	.word	0x00000000
 800cde4:	4c000000 	.word	0x4c000000
 800cde8:	004afb20 	.word	0x004afb20
 800cdec:	3717f7d1 	.word	0x3717f7d1
 800cdf0:	3f317180 	.word	0x3f317180
 800cdf4:	3eaaaaab 	.word	0x3eaaaaab
 800cdf8:	3e1cd04f 	.word	0x3e1cd04f
 800cdfc:	3e178897 	.word	0x3e178897
 800ce00:	ffcf5c30 	.word	0xffcf5c30
 800ce04:	3e638e29 	.word	0x3e638e29
 800ce08:	3ecccccd 	.word	0x3ecccccd
 800ce0c:	3e3a3325 	.word	0x3e3a3325
 800ce10:	3e924925 	.word	0x3e924925
 800ce14:	3f2aaaab 	.word	0x3f2aaaab

0800ce18 <__ieee754_powf>:
 800ce18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ce1c:	ee10 5a90 	vmov	r5, s1
 800ce20:	f035 4700 	bics.w	r7, r5, #2147483648	; 0x80000000
 800ce24:	ed2d 8b02 	vpush	{d8}
 800ce28:	eeb0 8a40 	vmov.f32	s16, s0
 800ce2c:	eef0 8a60 	vmov.f32	s17, s1
 800ce30:	f000 8293 	beq.w	800d35a <__ieee754_powf+0x542>
 800ce34:	ee10 8a10 	vmov	r8, s0
 800ce38:	f028 4400 	bic.w	r4, r8, #2147483648	; 0x80000000
 800ce3c:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800ce40:	dc06      	bgt.n	800ce50 <__ieee754_powf+0x38>
 800ce42:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 800ce46:	dd0a      	ble.n	800ce5e <__ieee754_powf+0x46>
 800ce48:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 800ce4c:	f000 8285 	beq.w	800d35a <__ieee754_powf+0x542>
 800ce50:	ecbd 8b02 	vpop	{d8}
 800ce54:	48d9      	ldr	r0, [pc, #868]	; (800d1bc <__ieee754_powf+0x3a4>)
 800ce56:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ce5a:	f001 b987 	b.w	800e16c <nanf>
 800ce5e:	f1b8 0f00 	cmp.w	r8, #0
 800ce62:	da1d      	bge.n	800cea0 <__ieee754_powf+0x88>
 800ce64:	f1b7 4f97 	cmp.w	r7, #1266679808	; 0x4b800000
 800ce68:	da2c      	bge.n	800cec4 <__ieee754_powf+0xac>
 800ce6a:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 800ce6e:	db30      	blt.n	800ced2 <__ieee754_powf+0xba>
 800ce70:	15fb      	asrs	r3, r7, #23
 800ce72:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 800ce76:	fa47 f603 	asr.w	r6, r7, r3
 800ce7a:	fa06 f303 	lsl.w	r3, r6, r3
 800ce7e:	42bb      	cmp	r3, r7
 800ce80:	d127      	bne.n	800ced2 <__ieee754_powf+0xba>
 800ce82:	f006 0601 	and.w	r6, r6, #1
 800ce86:	f1c6 0602 	rsb	r6, r6, #2
 800ce8a:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 800ce8e:	d122      	bne.n	800ced6 <__ieee754_powf+0xbe>
 800ce90:	2d00      	cmp	r5, #0
 800ce92:	f280 8268 	bge.w	800d366 <__ieee754_powf+0x54e>
 800ce96:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800ce9a:	ee87 0a88 	vdiv.f32	s0, s15, s16
 800ce9e:	e00d      	b.n	800cebc <__ieee754_powf+0xa4>
 800cea0:	2600      	movs	r6, #0
 800cea2:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 800cea6:	d1f0      	bne.n	800ce8a <__ieee754_powf+0x72>
 800cea8:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 800ceac:	f000 8255 	beq.w	800d35a <__ieee754_powf+0x542>
 800ceb0:	dd0a      	ble.n	800cec8 <__ieee754_powf+0xb0>
 800ceb2:	2d00      	cmp	r5, #0
 800ceb4:	f280 8254 	bge.w	800d360 <__ieee754_powf+0x548>
 800ceb8:	ed9f 0ac1 	vldr	s0, [pc, #772]	; 800d1c0 <__ieee754_powf+0x3a8>
 800cebc:	ecbd 8b02 	vpop	{d8}
 800cec0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cec4:	2602      	movs	r6, #2
 800cec6:	e7ec      	b.n	800cea2 <__ieee754_powf+0x8a>
 800cec8:	2d00      	cmp	r5, #0
 800ceca:	daf5      	bge.n	800ceb8 <__ieee754_powf+0xa0>
 800cecc:	eeb1 0a68 	vneg.f32	s0, s17
 800ced0:	e7f4      	b.n	800cebc <__ieee754_powf+0xa4>
 800ced2:	2600      	movs	r6, #0
 800ced4:	e7d9      	b.n	800ce8a <__ieee754_powf+0x72>
 800ced6:	f1b5 4f80 	cmp.w	r5, #1073741824	; 0x40000000
 800ceda:	d102      	bne.n	800cee2 <__ieee754_powf+0xca>
 800cedc:	ee28 0a08 	vmul.f32	s0, s16, s16
 800cee0:	e7ec      	b.n	800cebc <__ieee754_powf+0xa4>
 800cee2:	f1b5 5f7c 	cmp.w	r5, #1056964608	; 0x3f000000
 800cee6:	eeb0 0a48 	vmov.f32	s0, s16
 800ceea:	d108      	bne.n	800cefe <__ieee754_powf+0xe6>
 800ceec:	f1b8 0f00 	cmp.w	r8, #0
 800cef0:	db05      	blt.n	800cefe <__ieee754_powf+0xe6>
 800cef2:	ecbd 8b02 	vpop	{d8}
 800cef6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800cefa:	f000 bbe7 	b.w	800d6cc <__ieee754_sqrtf>
 800cefe:	f7fe fb41 	bl	800b584 <fabsf>
 800cf02:	b124      	cbz	r4, 800cf0e <__ieee754_powf+0xf6>
 800cf04:	f028 4340 	bic.w	r3, r8, #3221225472	; 0xc0000000
 800cf08:	f1b3 5f7e 	cmp.w	r3, #1065353216	; 0x3f800000
 800cf0c:	d117      	bne.n	800cf3e <__ieee754_powf+0x126>
 800cf0e:	2d00      	cmp	r5, #0
 800cf10:	bfbc      	itt	lt
 800cf12:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 800cf16:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 800cf1a:	f1b8 0f00 	cmp.w	r8, #0
 800cf1e:	dacd      	bge.n	800cebc <__ieee754_powf+0xa4>
 800cf20:	f1a4 547e 	sub.w	r4, r4, #1065353216	; 0x3f800000
 800cf24:	ea54 0306 	orrs.w	r3, r4, r6
 800cf28:	d104      	bne.n	800cf34 <__ieee754_powf+0x11c>
 800cf2a:	ee70 7a40 	vsub.f32	s15, s0, s0
 800cf2e:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800cf32:	e7c3      	b.n	800cebc <__ieee754_powf+0xa4>
 800cf34:	2e01      	cmp	r6, #1
 800cf36:	d1c1      	bne.n	800cebc <__ieee754_powf+0xa4>
 800cf38:	eeb1 0a40 	vneg.f32	s0, s0
 800cf3c:	e7be      	b.n	800cebc <__ieee754_powf+0xa4>
 800cf3e:	ea4f 70d8 	mov.w	r0, r8, lsr #31
 800cf42:	3801      	subs	r0, #1
 800cf44:	ea56 0300 	orrs.w	r3, r6, r0
 800cf48:	d104      	bne.n	800cf54 <__ieee754_powf+0x13c>
 800cf4a:	ee38 8a48 	vsub.f32	s16, s16, s16
 800cf4e:	ee88 0a08 	vdiv.f32	s0, s16, s16
 800cf52:	e7b3      	b.n	800cebc <__ieee754_powf+0xa4>
 800cf54:	f1b7 4f9a 	cmp.w	r7, #1291845632	; 0x4d000000
 800cf58:	dd6d      	ble.n	800d036 <__ieee754_powf+0x21e>
 800cf5a:	4b9a      	ldr	r3, [pc, #616]	; (800d1c4 <__ieee754_powf+0x3ac>)
 800cf5c:	429c      	cmp	r4, r3
 800cf5e:	dc06      	bgt.n	800cf6e <__ieee754_powf+0x156>
 800cf60:	2d00      	cmp	r5, #0
 800cf62:	daa9      	bge.n	800ceb8 <__ieee754_powf+0xa0>
 800cf64:	ed9f 0a98 	vldr	s0, [pc, #608]	; 800d1c8 <__ieee754_powf+0x3b0>
 800cf68:	ee20 0a00 	vmul.f32	s0, s0, s0
 800cf6c:	e7a6      	b.n	800cebc <__ieee754_powf+0xa4>
 800cf6e:	4b97      	ldr	r3, [pc, #604]	; (800d1cc <__ieee754_powf+0x3b4>)
 800cf70:	429c      	cmp	r4, r3
 800cf72:	dd02      	ble.n	800cf7a <__ieee754_powf+0x162>
 800cf74:	2d00      	cmp	r5, #0
 800cf76:	dcf5      	bgt.n	800cf64 <__ieee754_powf+0x14c>
 800cf78:	e79e      	b.n	800ceb8 <__ieee754_powf+0xa0>
 800cf7a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800cf7e:	ee30 0a67 	vsub.f32	s0, s0, s15
 800cf82:	ed9f 7a93 	vldr	s14, [pc, #588]	; 800d1d0 <__ieee754_powf+0x3b8>
 800cf86:	eef1 6a40 	vneg.f32	s13, s0
 800cf8a:	eef5 7a00 	vmov.f32	s15, #80	; 0x3e800000  0.250
 800cf8e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800cf92:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800cf96:	eee7 7a40 	vfms.f32	s15, s14, s0
 800cf9a:	ee60 0a00 	vmul.f32	s1, s0, s0
 800cf9e:	ed9f 7a8d 	vldr	s14, [pc, #564]	; 800d1d4 <__ieee754_powf+0x3bc>
 800cfa2:	ee67 0aa0 	vmul.f32	s1, s15, s1
 800cfa6:	eddf 7a8c 	vldr	s15, [pc, #560]	; 800d1d8 <__ieee754_powf+0x3c0>
 800cfaa:	ee67 7ae0 	vnmul.f32	s15, s15, s1
 800cfae:	eee0 7a07 	vfma.f32	s15, s0, s14
 800cfb2:	ed9f 7a8a 	vldr	s14, [pc, #552]	; 800d1dc <__ieee754_powf+0x3c4>
 800cfb6:	eeb0 6a67 	vmov.f32	s12, s15
 800cfba:	eea0 6a07 	vfma.f32	s12, s0, s14
 800cfbe:	ee16 3a10 	vmov	r3, s12
 800cfc2:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800cfc6:	f023 030f 	bic.w	r3, r3, #15
 800cfca:	ee00 3a90 	vmov	s1, r3
 800cfce:	eee6 0a87 	vfma.f32	s1, s13, s14
 800cfd2:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800cfd6:	f425 657f 	bic.w	r5, r5, #4080	; 0xff0
 800cfda:	f025 050f 	bic.w	r5, r5, #15
 800cfde:	ee07 5a10 	vmov	s14, r5
 800cfe2:	ee67 0aa8 	vmul.f32	s1, s15, s17
 800cfe6:	ee38 7ac7 	vsub.f32	s14, s17, s14
 800cfea:	ee07 3a90 	vmov	s15, r3
 800cfee:	eee7 0a27 	vfma.f32	s1, s14, s15
 800cff2:	3e01      	subs	r6, #1
 800cff4:	ea56 0200 	orrs.w	r2, r6, r0
 800cff8:	ee07 5a10 	vmov	s14, r5
 800cffc:	ee67 7a87 	vmul.f32	s15, s15, s14
 800d000:	eeb7 8a00 	vmov.f32	s16, #112	; 0x3f800000  1.0
 800d004:	ee30 7aa7 	vadd.f32	s14, s1, s15
 800d008:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 800d00c:	ee17 4a10 	vmov	r4, s14
 800d010:	bf08      	it	eq
 800d012:	eeb0 8a40 	vmoveq.f32	s16, s0
 800d016:	2c00      	cmp	r4, #0
 800d018:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800d01c:	f340 8184 	ble.w	800d328 <__ieee754_powf+0x510>
 800d020:	f1b3 4f86 	cmp.w	r3, #1124073472	; 0x43000000
 800d024:	f340 80fc 	ble.w	800d220 <__ieee754_powf+0x408>
 800d028:	eddf 7a67 	vldr	s15, [pc, #412]	; 800d1c8 <__ieee754_powf+0x3b0>
 800d02c:	ee28 0a27 	vmul.f32	s0, s16, s15
 800d030:	ee20 0a27 	vmul.f32	s0, s0, s15
 800d034:	e742      	b.n	800cebc <__ieee754_powf+0xa4>
 800d036:	f5b4 0f00 	cmp.w	r4, #8388608	; 0x800000
 800d03a:	bfbf      	itttt	lt
 800d03c:	eddf 7a68 	vldrlt	s15, [pc, #416]	; 800d1e0 <__ieee754_powf+0x3c8>
 800d040:	ee60 7a27 	vmullt.f32	s15, s0, s15
 800d044:	f06f 0217 	mvnlt.w	r2, #23
 800d048:	ee17 4a90 	vmovlt	r4, s15
 800d04c:	ea4f 53e4 	mov.w	r3, r4, asr #23
 800d050:	bfa8      	it	ge
 800d052:	2200      	movge	r2, #0
 800d054:	3b7f      	subs	r3, #127	; 0x7f
 800d056:	4413      	add	r3, r2
 800d058:	4a62      	ldr	r2, [pc, #392]	; (800d1e4 <__ieee754_powf+0x3cc>)
 800d05a:	f3c4 0416 	ubfx	r4, r4, #0, #23
 800d05e:	4294      	cmp	r4, r2
 800d060:	f044 517e 	orr.w	r1, r4, #1065353216	; 0x3f800000
 800d064:	dd06      	ble.n	800d074 <__ieee754_powf+0x25c>
 800d066:	4a60      	ldr	r2, [pc, #384]	; (800d1e8 <__ieee754_powf+0x3d0>)
 800d068:	4294      	cmp	r4, r2
 800d06a:	f340 80a5 	ble.w	800d1b8 <__ieee754_powf+0x3a0>
 800d06e:	3301      	adds	r3, #1
 800d070:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 800d074:	2400      	movs	r4, #0
 800d076:	4a5d      	ldr	r2, [pc, #372]	; (800d1ec <__ieee754_powf+0x3d4>)
 800d078:	00a7      	lsls	r7, r4, #2
 800d07a:	443a      	add	r2, r7
 800d07c:	ee07 1a90 	vmov	s15, r1
 800d080:	ed92 7a00 	vldr	s14, [r2]
 800d084:	4a5a      	ldr	r2, [pc, #360]	; (800d1f0 <__ieee754_powf+0x3d8>)
 800d086:	ee37 6a27 	vadd.f32	s12, s14, s15
 800d08a:	eeb7 5a00 	vmov.f32	s10, #112	; 0x3f800000  1.0
 800d08e:	eec5 6a06 	vdiv.f32	s13, s10, s12
 800d092:	1049      	asrs	r1, r1, #1
 800d094:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 800d098:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 800d09c:	eb01 5144 	add.w	r1, r1, r4, lsl #21
 800d0a0:	ee77 5ac7 	vsub.f32	s11, s15, s14
 800d0a4:	ee06 1a10 	vmov	s12, r1
 800d0a8:	ee65 4aa6 	vmul.f32	s9, s11, s13
 800d0ac:	ee14 ca90 	vmov	ip, s9
 800d0b0:	ea02 0c0c 	and.w	ip, r2, ip
 800d0b4:	ee05 ca10 	vmov	s10, ip
 800d0b8:	eeb1 4a45 	vneg.f32	s8, s10
 800d0bc:	eee4 5a06 	vfma.f32	s11, s8, s12
 800d0c0:	ee36 6a47 	vsub.f32	s12, s12, s14
 800d0c4:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 800d1f4 <__ieee754_powf+0x3dc>
 800d0c8:	ee37 6ac6 	vsub.f32	s12, s15, s12
 800d0cc:	ee64 7aa4 	vmul.f32	s15, s9, s9
 800d0d0:	eee4 5a06 	vfma.f32	s11, s8, s12
 800d0d4:	ee67 3aa7 	vmul.f32	s7, s15, s15
 800d0d8:	ee25 6aa6 	vmul.f32	s12, s11, s13
 800d0dc:	eddf 5a46 	vldr	s11, [pc, #280]	; 800d1f8 <__ieee754_powf+0x3e0>
 800d0e0:	eea7 7aa5 	vfma.f32	s14, s15, s11
 800d0e4:	eddf 5a45 	vldr	s11, [pc, #276]	; 800d1fc <__ieee754_powf+0x3e4>
 800d0e8:	eee7 5a27 	vfma.f32	s11, s14, s15
 800d0ec:	ed9f 7a38 	vldr	s14, [pc, #224]	; 800d1d0 <__ieee754_powf+0x3b8>
 800d0f0:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800d0f4:	eddf 5a42 	vldr	s11, [pc, #264]	; 800d200 <__ieee754_powf+0x3e8>
 800d0f8:	eee7 5a27 	vfma.f32	s11, s14, s15
 800d0fc:	ed9f 7a41 	vldr	s14, [pc, #260]	; 800d204 <__ieee754_powf+0x3ec>
 800d100:	ee75 6a24 	vadd.f32	s13, s10, s9
 800d104:	eea5 7aa7 	vfma.f32	s14, s11, s15
 800d108:	ee66 6a86 	vmul.f32	s13, s13, s12
 800d10c:	eef0 5a08 	vmov.f32	s11, #8	; 0x40400000  3.0
 800d110:	eef0 7a65 	vmov.f32	s15, s11
 800d114:	eee3 6a87 	vfma.f32	s13, s7, s14
 800d118:	eee5 7a05 	vfma.f32	s15, s10, s10
 800d11c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800d120:	ee17 1a90 	vmov	r1, s15
 800d124:	4011      	ands	r1, r2
 800d126:	ee07 1a90 	vmov	s15, r1
 800d12a:	ee37 7ae5 	vsub.f32	s14, s15, s11
 800d12e:	eddf 5a36 	vldr	s11, [pc, #216]	; 800d208 <__ieee754_powf+0x3f0>
 800d132:	eea4 7a05 	vfma.f32	s14, s8, s10
 800d136:	ee36 7ac7 	vsub.f32	s14, s13, s14
 800d13a:	ee27 7a24 	vmul.f32	s14, s14, s9
 800d13e:	eea7 7a86 	vfma.f32	s14, s15, s12
 800d142:	eeb0 6a47 	vmov.f32	s12, s14
 800d146:	eea5 6a27 	vfma.f32	s12, s10, s15
 800d14a:	ee16 1a10 	vmov	r1, s12
 800d14e:	4011      	ands	r1, r2
 800d150:	ee06 1a90 	vmov	s13, r1
 800d154:	eee4 6a27 	vfma.f32	s13, s8, s15
 800d158:	eddf 7a2c 	vldr	s15, [pc, #176]	; 800d20c <__ieee754_powf+0x3f4>
 800d15c:	ee37 7a66 	vsub.f32	s14, s14, s13
 800d160:	ee06 1a10 	vmov	s12, r1
 800d164:	ee27 7a27 	vmul.f32	s14, s14, s15
 800d168:	eddf 7a29 	vldr	s15, [pc, #164]	; 800d210 <__ieee754_powf+0x3f8>
 800d16c:	4929      	ldr	r1, [pc, #164]	; (800d214 <__ieee754_powf+0x3fc>)
 800d16e:	eea6 7a27 	vfma.f32	s14, s12, s15
 800d172:	4439      	add	r1, r7
 800d174:	edd1 7a00 	vldr	s15, [r1]
 800d178:	ee37 7a27 	vadd.f32	s14, s14, s15
 800d17c:	ee07 3a90 	vmov	s15, r3
 800d180:	eef0 0a47 	vmov.f32	s1, s14
 800d184:	4b24      	ldr	r3, [pc, #144]	; (800d218 <__ieee754_powf+0x400>)
 800d186:	eee6 0a25 	vfma.f32	s1, s12, s11
 800d18a:	443b      	add	r3, r7
 800d18c:	ed93 5a00 	vldr	s10, [r3]
 800d190:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800d194:	ee70 0a85 	vadd.f32	s1, s1, s10
 800d198:	ee70 7aa6 	vadd.f32	s15, s1, s13
 800d19c:	ee17 3a90 	vmov	r3, s15
 800d1a0:	4013      	ands	r3, r2
 800d1a2:	ee07 3a90 	vmov	s15, r3
 800d1a6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800d1aa:	ee77 7ac5 	vsub.f32	s15, s15, s10
 800d1ae:	eee6 7a65 	vfms.f32	s15, s12, s11
 800d1b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d1b6:	e70e      	b.n	800cfd6 <__ieee754_powf+0x1be>
 800d1b8:	2401      	movs	r4, #1
 800d1ba:	e75c      	b.n	800d076 <__ieee754_powf+0x25e>
 800d1bc:	0807346c 	.word	0x0807346c
 800d1c0:	00000000 	.word	0x00000000
 800d1c4:	3f7ffff7 	.word	0x3f7ffff7
 800d1c8:	7149f2ca 	.word	0x7149f2ca
 800d1cc:	3f800007 	.word	0x3f800007
 800d1d0:	3eaaaaab 	.word	0x3eaaaaab
 800d1d4:	36eca570 	.word	0x36eca570
 800d1d8:	3fb8aa3b 	.word	0x3fb8aa3b
 800d1dc:	3fb8aa00 	.word	0x3fb8aa00
 800d1e0:	4b800000 	.word	0x4b800000
 800d1e4:	001cc471 	.word	0x001cc471
 800d1e8:	005db3d6 	.word	0x005db3d6
 800d1ec:	080734a0 	.word	0x080734a0
 800d1f0:	fffff000 	.word	0xfffff000
 800d1f4:	3e6c3255 	.word	0x3e6c3255
 800d1f8:	3e53f142 	.word	0x3e53f142
 800d1fc:	3e8ba305 	.word	0x3e8ba305
 800d200:	3edb6db7 	.word	0x3edb6db7
 800d204:	3f19999a 	.word	0x3f19999a
 800d208:	3f763800 	.word	0x3f763800
 800d20c:	3f76384f 	.word	0x3f76384f
 800d210:	369dc3a0 	.word	0x369dc3a0
 800d214:	080734b0 	.word	0x080734b0
 800d218:	080734a8 	.word	0x080734a8
 800d21c:	3338aa3c 	.word	0x3338aa3c
 800d220:	f040 8092 	bne.w	800d348 <__ieee754_powf+0x530>
 800d224:	ed5f 6a03 	vldr	s13, [pc, #-12]	; 800d21c <__ieee754_powf+0x404>
 800d228:	ee37 7a67 	vsub.f32	s14, s14, s15
 800d22c:	ee70 6aa6 	vadd.f32	s13, s1, s13
 800d230:	eef4 6ac7 	vcmpe.f32	s13, s14
 800d234:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d238:	f73f aef6 	bgt.w	800d028 <__ieee754_powf+0x210>
 800d23c:	15db      	asrs	r3, r3, #23
 800d23e:	f1a3 007e 	sub.w	r0, r3, #126	; 0x7e
 800d242:	f44f 0300 	mov.w	r3, #8388608	; 0x800000
 800d246:	4103      	asrs	r3, r0
 800d248:	4423      	add	r3, r4
 800d24a:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800d24e:	4947      	ldr	r1, [pc, #284]	; (800d36c <__ieee754_powf+0x554>)
 800d250:	3a7f      	subs	r2, #127	; 0x7f
 800d252:	4111      	asrs	r1, r2
 800d254:	ea23 0101 	bic.w	r1, r3, r1
 800d258:	f3c3 0016 	ubfx	r0, r3, #0, #23
 800d25c:	ee07 1a10 	vmov	s14, r1
 800d260:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 800d264:	f1c2 0217 	rsb	r2, r2, #23
 800d268:	4110      	asrs	r0, r2
 800d26a:	2c00      	cmp	r4, #0
 800d26c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d270:	bfb8      	it	lt
 800d272:	4240      	neglt	r0, r0
 800d274:	ee37 7aa0 	vadd.f32	s14, s15, s1
 800d278:	eddf 6a3d 	vldr	s13, [pc, #244]	; 800d370 <__ieee754_powf+0x558>
 800d27c:	ee17 3a10 	vmov	r3, s14
 800d280:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800d284:	f023 030f 	bic.w	r3, r3, #15
 800d288:	ee07 3a10 	vmov	s14, r3
 800d28c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d290:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800d294:	eddf 7a37 	vldr	s15, [pc, #220]	; 800d374 <__ieee754_powf+0x55c>
 800d298:	ee67 7a27 	vmul.f32	s15, s14, s15
 800d29c:	eee0 7aa6 	vfma.f32	s15, s1, s13
 800d2a0:	eddf 6a35 	vldr	s13, [pc, #212]	; 800d378 <__ieee754_powf+0x560>
 800d2a4:	eeb0 0a67 	vmov.f32	s0, s15
 800d2a8:	eea7 0a26 	vfma.f32	s0, s14, s13
 800d2ac:	eeb0 6a40 	vmov.f32	s12, s0
 800d2b0:	eea7 6a66 	vfms.f32	s12, s14, s13
 800d2b4:	ee20 7a00 	vmul.f32	s14, s0, s0
 800d2b8:	ee77 7ac6 	vsub.f32	s15, s15, s12
 800d2bc:	eddf 6a2f 	vldr	s13, [pc, #188]	; 800d37c <__ieee754_powf+0x564>
 800d2c0:	ed9f 6a2f 	vldr	s12, [pc, #188]	; 800d380 <__ieee754_powf+0x568>
 800d2c4:	eea7 6a26 	vfma.f32	s12, s14, s13
 800d2c8:	eddf 6a2e 	vldr	s13, [pc, #184]	; 800d384 <__ieee754_powf+0x56c>
 800d2cc:	eee6 6a07 	vfma.f32	s13, s12, s14
 800d2d0:	ed9f 6a2d 	vldr	s12, [pc, #180]	; 800d388 <__ieee754_powf+0x570>
 800d2d4:	eea6 6a87 	vfma.f32	s12, s13, s14
 800d2d8:	eddf 6a2c 	vldr	s13, [pc, #176]	; 800d38c <__ieee754_powf+0x574>
 800d2dc:	eee6 6a07 	vfma.f32	s13, s12, s14
 800d2e0:	eeb0 6a40 	vmov.f32	s12, s0
 800d2e4:	eea6 6ac7 	vfms.f32	s12, s13, s14
 800d2e8:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800d2ec:	eeb0 7a46 	vmov.f32	s14, s12
 800d2f0:	ee77 6a66 	vsub.f32	s13, s14, s13
 800d2f4:	ee20 6a06 	vmul.f32	s12, s0, s12
 800d2f8:	eee0 7a27 	vfma.f32	s15, s0, s15
 800d2fc:	ee86 7a26 	vdiv.f32	s14, s12, s13
 800d300:	ee77 7a67 	vsub.f32	s15, s14, s15
 800d304:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800d308:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800d30c:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800d310:	ee10 3a10 	vmov	r3, s0
 800d314:	eb03 53c0 	add.w	r3, r3, r0, lsl #23
 800d318:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800d31c:	da1a      	bge.n	800d354 <__ieee754_powf+0x53c>
 800d31e:	f000 ff85 	bl	800e22c <scalbnf>
 800d322:	ee20 0a08 	vmul.f32	s0, s0, s16
 800d326:	e5c9      	b.n	800cebc <__ieee754_powf+0xa4>
 800d328:	4a19      	ldr	r2, [pc, #100]	; (800d390 <__ieee754_powf+0x578>)
 800d32a:	4293      	cmp	r3, r2
 800d32c:	dd02      	ble.n	800d334 <__ieee754_powf+0x51c>
 800d32e:	eddf 7a19 	vldr	s15, [pc, #100]	; 800d394 <__ieee754_powf+0x57c>
 800d332:	e67b      	b.n	800d02c <__ieee754_powf+0x214>
 800d334:	d108      	bne.n	800d348 <__ieee754_powf+0x530>
 800d336:	ee37 7a67 	vsub.f32	s14, s14, s15
 800d33a:	eeb4 7ae0 	vcmpe.f32	s14, s1
 800d33e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d342:	f6ff af7b 	blt.w	800d23c <__ieee754_powf+0x424>
 800d346:	e7f2      	b.n	800d32e <__ieee754_powf+0x516>
 800d348:	f1b3 5f7c 	cmp.w	r3, #1056964608	; 0x3f000000
 800d34c:	f73f af76 	bgt.w	800d23c <__ieee754_powf+0x424>
 800d350:	2000      	movs	r0, #0
 800d352:	e78f      	b.n	800d274 <__ieee754_powf+0x45c>
 800d354:	ee00 3a10 	vmov	s0, r3
 800d358:	e7e3      	b.n	800d322 <__ieee754_powf+0x50a>
 800d35a:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800d35e:	e5ad      	b.n	800cebc <__ieee754_powf+0xa4>
 800d360:	eeb0 0a68 	vmov.f32	s0, s17
 800d364:	e5aa      	b.n	800cebc <__ieee754_powf+0xa4>
 800d366:	eeb0 0a48 	vmov.f32	s0, s16
 800d36a:	e5a7      	b.n	800cebc <__ieee754_powf+0xa4>
 800d36c:	007fffff 	.word	0x007fffff
 800d370:	3f317218 	.word	0x3f317218
 800d374:	35bfbe8c 	.word	0x35bfbe8c
 800d378:	3f317200 	.word	0x3f317200
 800d37c:	3331bb4c 	.word	0x3331bb4c
 800d380:	b5ddea0e 	.word	0xb5ddea0e
 800d384:	388ab355 	.word	0x388ab355
 800d388:	bb360b61 	.word	0xbb360b61
 800d38c:	3e2aaaab 	.word	0x3e2aaaab
 800d390:	43160000 	.word	0x43160000
 800d394:	0da24260 	.word	0x0da24260

0800d398 <__ieee754_rem_pio2f>:
 800d398:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d39a:	ee10 6a10 	vmov	r6, s0
 800d39e:	4b86      	ldr	r3, [pc, #536]	; (800d5b8 <__ieee754_rem_pio2f+0x220>)
 800d3a0:	f026 4400 	bic.w	r4, r6, #2147483648	; 0x80000000
 800d3a4:	429c      	cmp	r4, r3
 800d3a6:	b087      	sub	sp, #28
 800d3a8:	4605      	mov	r5, r0
 800d3aa:	dc05      	bgt.n	800d3b8 <__ieee754_rem_pio2f+0x20>
 800d3ac:	2300      	movs	r3, #0
 800d3ae:	ed85 0a00 	vstr	s0, [r5]
 800d3b2:	6043      	str	r3, [r0, #4]
 800d3b4:	2000      	movs	r0, #0
 800d3b6:	e020      	b.n	800d3fa <__ieee754_rem_pio2f+0x62>
 800d3b8:	4b80      	ldr	r3, [pc, #512]	; (800d5bc <__ieee754_rem_pio2f+0x224>)
 800d3ba:	429c      	cmp	r4, r3
 800d3bc:	dc38      	bgt.n	800d430 <__ieee754_rem_pio2f+0x98>
 800d3be:	2e00      	cmp	r6, #0
 800d3c0:	f024 040f 	bic.w	r4, r4, #15
 800d3c4:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 800d5c0 <__ieee754_rem_pio2f+0x228>
 800d3c8:	4b7e      	ldr	r3, [pc, #504]	; (800d5c4 <__ieee754_rem_pio2f+0x22c>)
 800d3ca:	dd18      	ble.n	800d3fe <__ieee754_rem_pio2f+0x66>
 800d3cc:	429c      	cmp	r4, r3
 800d3ce:	ee70 7a47 	vsub.f32	s15, s0, s14
 800d3d2:	bf09      	itett	eq
 800d3d4:	ed9f 7a7c 	vldreq	s14, [pc, #496]	; 800d5c8 <__ieee754_rem_pio2f+0x230>
 800d3d8:	ed9f 7a7c 	vldrne	s14, [pc, #496]	; 800d5cc <__ieee754_rem_pio2f+0x234>
 800d3dc:	ee77 7ac7 	vsubeq.f32	s15, s15, s14
 800d3e0:	ed9f 7a7b 	vldreq	s14, [pc, #492]	; 800d5d0 <__ieee754_rem_pio2f+0x238>
 800d3e4:	ee77 6ac7 	vsub.f32	s13, s15, s14
 800d3e8:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800d3ec:	edc0 6a00 	vstr	s13, [r0]
 800d3f0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d3f4:	edc0 7a01 	vstr	s15, [r0, #4]
 800d3f8:	2001      	movs	r0, #1
 800d3fa:	b007      	add	sp, #28
 800d3fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d3fe:	429c      	cmp	r4, r3
 800d400:	ee70 7a07 	vadd.f32	s15, s0, s14
 800d404:	bf09      	itett	eq
 800d406:	ed9f 7a70 	vldreq	s14, [pc, #448]	; 800d5c8 <__ieee754_rem_pio2f+0x230>
 800d40a:	ed9f 7a70 	vldrne	s14, [pc, #448]	; 800d5cc <__ieee754_rem_pio2f+0x234>
 800d40e:	ee77 7a87 	vaddeq.f32	s15, s15, s14
 800d412:	ed9f 7a6f 	vldreq	s14, [pc, #444]	; 800d5d0 <__ieee754_rem_pio2f+0x238>
 800d416:	ee77 6a87 	vadd.f32	s13, s15, s14
 800d41a:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800d41e:	edc0 6a00 	vstr	s13, [r0]
 800d422:	ee77 7a87 	vadd.f32	s15, s15, s14
 800d426:	edc0 7a01 	vstr	s15, [r0, #4]
 800d42a:	f04f 30ff 	mov.w	r0, #4294967295
 800d42e:	e7e4      	b.n	800d3fa <__ieee754_rem_pio2f+0x62>
 800d430:	4b68      	ldr	r3, [pc, #416]	; (800d5d4 <__ieee754_rem_pio2f+0x23c>)
 800d432:	429c      	cmp	r4, r3
 800d434:	dc71      	bgt.n	800d51a <__ieee754_rem_pio2f+0x182>
 800d436:	f7fe f8a5 	bl	800b584 <fabsf>
 800d43a:	ed9f 7a67 	vldr	s14, [pc, #412]	; 800d5d8 <__ieee754_rem_pio2f+0x240>
 800d43e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800d442:	eee0 7a07 	vfma.f32	s15, s0, s14
 800d446:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d44a:	eeb8 6ae7 	vcvt.f32.s32	s12, s15
 800d44e:	ee17 0a90 	vmov	r0, s15
 800d452:	eddf 7a5b 	vldr	s15, [pc, #364]	; 800d5c0 <__ieee754_rem_pio2f+0x228>
 800d456:	eeb1 7a46 	vneg.f32	s14, s12
 800d45a:	eea7 0a27 	vfma.f32	s0, s14, s15
 800d45e:	281f      	cmp	r0, #31
 800d460:	eddf 7a5a 	vldr	s15, [pc, #360]	; 800d5cc <__ieee754_rem_pio2f+0x234>
 800d464:	ee66 7a27 	vmul.f32	s15, s12, s15
 800d468:	ee70 6a67 	vsub.f32	s13, s0, s15
 800d46c:	ee16 3a90 	vmov	r3, s13
 800d470:	dc1c      	bgt.n	800d4ac <__ieee754_rem_pio2f+0x114>
 800d472:	1e47      	subs	r7, r0, #1
 800d474:	4959      	ldr	r1, [pc, #356]	; (800d5dc <__ieee754_rem_pio2f+0x244>)
 800d476:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
 800d47a:	f024 02ff 	bic.w	r2, r4, #255	; 0xff
 800d47e:	428a      	cmp	r2, r1
 800d480:	d014      	beq.n	800d4ac <__ieee754_rem_pio2f+0x114>
 800d482:	602b      	str	r3, [r5, #0]
 800d484:	ed95 7a00 	vldr	s14, [r5]
 800d488:	ee30 0a47 	vsub.f32	s0, s0, s14
 800d48c:	2e00      	cmp	r6, #0
 800d48e:	ee30 0a67 	vsub.f32	s0, s0, s15
 800d492:	ed85 0a01 	vstr	s0, [r5, #4]
 800d496:	dab0      	bge.n	800d3fa <__ieee754_rem_pio2f+0x62>
 800d498:	eeb1 7a47 	vneg.f32	s14, s14
 800d49c:	eeb1 0a40 	vneg.f32	s0, s0
 800d4a0:	ed85 7a00 	vstr	s14, [r5]
 800d4a4:	ed85 0a01 	vstr	s0, [r5, #4]
 800d4a8:	4240      	negs	r0, r0
 800d4aa:	e7a6      	b.n	800d3fa <__ieee754_rem_pio2f+0x62>
 800d4ac:	15e4      	asrs	r4, r4, #23
 800d4ae:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800d4b2:	1aa2      	subs	r2, r4, r2
 800d4b4:	2a08      	cmp	r2, #8
 800d4b6:	dde4      	ble.n	800d482 <__ieee754_rem_pio2f+0xea>
 800d4b8:	eddf 7a43 	vldr	s15, [pc, #268]	; 800d5c8 <__ieee754_rem_pio2f+0x230>
 800d4bc:	eef0 6a40 	vmov.f32	s13, s0
 800d4c0:	eee7 6a27 	vfma.f32	s13, s14, s15
 800d4c4:	ee30 0a66 	vsub.f32	s0, s0, s13
 800d4c8:	eea7 0a27 	vfma.f32	s0, s14, s15
 800d4cc:	eddf 7a40 	vldr	s15, [pc, #256]	; 800d5d0 <__ieee754_rem_pio2f+0x238>
 800d4d0:	ee96 0a27 	vfnms.f32	s0, s12, s15
 800d4d4:	ee76 5ac0 	vsub.f32	s11, s13, s0
 800d4d8:	eef0 7a40 	vmov.f32	s15, s0
 800d4dc:	ee15 3a90 	vmov	r3, s11
 800d4e0:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 800d4e4:	1aa4      	subs	r4, r4, r2
 800d4e6:	2c19      	cmp	r4, #25
 800d4e8:	dc04      	bgt.n	800d4f4 <__ieee754_rem_pio2f+0x15c>
 800d4ea:	edc5 5a00 	vstr	s11, [r5]
 800d4ee:	eeb0 0a66 	vmov.f32	s0, s13
 800d4f2:	e7c7      	b.n	800d484 <__ieee754_rem_pio2f+0xec>
 800d4f4:	eddf 5a3a 	vldr	s11, [pc, #232]	; 800d5e0 <__ieee754_rem_pio2f+0x248>
 800d4f8:	eeb0 0a66 	vmov.f32	s0, s13
 800d4fc:	eea7 0a25 	vfma.f32	s0, s14, s11
 800d500:	ee76 7ac0 	vsub.f32	s15, s13, s0
 800d504:	eee7 7a25 	vfma.f32	s15, s14, s11
 800d508:	ed9f 7a36 	vldr	s14, [pc, #216]	; 800d5e4 <__ieee754_rem_pio2f+0x24c>
 800d50c:	eed6 7a07 	vfnms.f32	s15, s12, s14
 800d510:	ee30 7a67 	vsub.f32	s14, s0, s15
 800d514:	ed85 7a00 	vstr	s14, [r5]
 800d518:	e7b4      	b.n	800d484 <__ieee754_rem_pio2f+0xec>
 800d51a:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800d51e:	db06      	blt.n	800d52e <__ieee754_rem_pio2f+0x196>
 800d520:	ee70 7a40 	vsub.f32	s15, s0, s0
 800d524:	edc0 7a01 	vstr	s15, [r0, #4]
 800d528:	edc0 7a00 	vstr	s15, [r0]
 800d52c:	e742      	b.n	800d3b4 <__ieee754_rem_pio2f+0x1c>
 800d52e:	15e2      	asrs	r2, r4, #23
 800d530:	3a86      	subs	r2, #134	; 0x86
 800d532:	eba4 53c2 	sub.w	r3, r4, r2, lsl #23
 800d536:	ee07 3a90 	vmov	s15, r3
 800d53a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800d53e:	eddf 6a2a 	vldr	s13, [pc, #168]	; 800d5e8 <__ieee754_rem_pio2f+0x250>
 800d542:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800d546:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d54a:	ed8d 7a03 	vstr	s14, [sp, #12]
 800d54e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800d552:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 800d556:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800d55a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d55e:	ed8d 7a04 	vstr	s14, [sp, #16]
 800d562:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800d566:	eef5 7a40 	vcmp.f32	s15, #0.0
 800d56a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d56e:	edcd 7a05 	vstr	s15, [sp, #20]
 800d572:	d11e      	bne.n	800d5b2 <__ieee754_rem_pio2f+0x21a>
 800d574:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800d578:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d57c:	bf0c      	ite	eq
 800d57e:	2301      	moveq	r3, #1
 800d580:	2302      	movne	r3, #2
 800d582:	491a      	ldr	r1, [pc, #104]	; (800d5ec <__ieee754_rem_pio2f+0x254>)
 800d584:	9101      	str	r1, [sp, #4]
 800d586:	2102      	movs	r1, #2
 800d588:	9100      	str	r1, [sp, #0]
 800d58a:	a803      	add	r0, sp, #12
 800d58c:	4629      	mov	r1, r5
 800d58e:	f000 f8ff 	bl	800d790 <__kernel_rem_pio2f>
 800d592:	2e00      	cmp	r6, #0
 800d594:	f6bf af31 	bge.w	800d3fa <__ieee754_rem_pio2f+0x62>
 800d598:	edd5 7a00 	vldr	s15, [r5]
 800d59c:	eef1 7a67 	vneg.f32	s15, s15
 800d5a0:	edc5 7a00 	vstr	s15, [r5]
 800d5a4:	edd5 7a01 	vldr	s15, [r5, #4]
 800d5a8:	eef1 7a67 	vneg.f32	s15, s15
 800d5ac:	edc5 7a01 	vstr	s15, [r5, #4]
 800d5b0:	e77a      	b.n	800d4a8 <__ieee754_rem_pio2f+0x110>
 800d5b2:	2303      	movs	r3, #3
 800d5b4:	e7e5      	b.n	800d582 <__ieee754_rem_pio2f+0x1ea>
 800d5b6:	bf00      	nop
 800d5b8:	3f490fd8 	.word	0x3f490fd8
 800d5bc:	4016cbe3 	.word	0x4016cbe3
 800d5c0:	3fc90f80 	.word	0x3fc90f80
 800d5c4:	3fc90fd0 	.word	0x3fc90fd0
 800d5c8:	37354400 	.word	0x37354400
 800d5cc:	37354443 	.word	0x37354443
 800d5d0:	2e85a308 	.word	0x2e85a308
 800d5d4:	43490f80 	.word	0x43490f80
 800d5d8:	3f22f984 	.word	0x3f22f984
 800d5dc:	080734b8 	.word	0x080734b8
 800d5e0:	2e85a300 	.word	0x2e85a300
 800d5e4:	248d3132 	.word	0x248d3132
 800d5e8:	43800000 	.word	0x43800000
 800d5ec:	08073538 	.word	0x08073538

0800d5f0 <__ieee754_sinhf>:
 800d5f0:	b510      	push	{r4, lr}
 800d5f2:	ee10 3a10 	vmov	r3, s0
 800d5f6:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 800d5fa:	f1b4 4fff 	cmp.w	r4, #2139095040	; 0x7f800000
 800d5fe:	ed2d 8b02 	vpush	{d8}
 800d602:	eef0 7a40 	vmov.f32	s15, s0
 800d606:	db06      	blt.n	800d616 <__ieee754_sinhf+0x26>
 800d608:	ee70 7a00 	vadd.f32	s15, s0, s0
 800d60c:	ecbd 8b02 	vpop	{d8}
 800d610:	eeb0 0a67 	vmov.f32	s0, s15
 800d614:	bd10      	pop	{r4, pc}
 800d616:	2b00      	cmp	r3, #0
 800d618:	4b28      	ldr	r3, [pc, #160]	; (800d6bc <__ieee754_sinhf+0xcc>)
 800d61a:	eef6 8a00 	vmov.f32	s17, #96	; 0x3f000000  0.5
 800d61e:	eebe 8a00 	vmov.f32	s16, #224	; 0xbf000000 -0.5
 800d622:	bfa8      	it	ge
 800d624:	eeb0 8a68 	vmovge.f32	s16, s17
 800d628:	429c      	cmp	r4, r3
 800d62a:	dc2a      	bgt.n	800d682 <__ieee754_sinhf+0x92>
 800d62c:	f1b4 5f46 	cmp.w	r4, #830472192	; 0x31800000
 800d630:	eef7 8a00 	vmov.f32	s17, #112	; 0x3f800000  1.0
 800d634:	da08      	bge.n	800d648 <__ieee754_sinhf+0x58>
 800d636:	ed9f 7a22 	vldr	s14, [pc, #136]	; 800d6c0 <__ieee754_sinhf+0xd0>
 800d63a:	ee30 7a07 	vadd.f32	s14, s0, s14
 800d63e:	eeb4 7ae8 	vcmpe.f32	s14, s17
 800d642:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d646:	dce1      	bgt.n	800d60c <__ieee754_sinhf+0x1c>
 800d648:	eeb0 0a67 	vmov.f32	s0, s15
 800d64c:	f7fd ff9a 	bl	800b584 <fabsf>
 800d650:	f000 fc56 	bl	800df00 <expm1f>
 800d654:	f1b4 5f7e 	cmp.w	r4, #1065353216	; 0x3f800000
 800d658:	bfbb      	ittet	lt
 800d65a:	ee20 7a00 	vmullt.f32	s14, s0, s0
 800d65e:	ee70 8a28 	vaddlt.f32	s17, s0, s17
 800d662:	ee70 8a28 	vaddge.f32	s17, s0, s17
 800d666:	eec7 7a28 	vdivlt.f32	s15, s14, s17
 800d66a:	bfad      	iteet	ge
 800d66c:	eec0 7a28 	vdivge.f32	s15, s0, s17
 800d670:	eeb0 7a00 	vmovlt.f32	s14, #0	; 0x40000000  2.0
 800d674:	eed0 7a07 	vfnmslt.f32	s15, s0, s14
 800d678:	ee77 7a80 	vaddge.f32	s15, s15, s0
 800d67c:	ee67 7a88 	vmul.f32	s15, s15, s16
 800d680:	e7c4      	b.n	800d60c <__ieee754_sinhf+0x1c>
 800d682:	4b10      	ldr	r3, [pc, #64]	; (800d6c4 <__ieee754_sinhf+0xd4>)
 800d684:	429c      	cmp	r4, r3
 800d686:	dc06      	bgt.n	800d696 <__ieee754_sinhf+0xa6>
 800d688:	f7fd ff7c 	bl	800b584 <fabsf>
 800d68c:	f7ff f97a 	bl	800c984 <__ieee754_expf>
 800d690:	ee60 7a08 	vmul.f32	s15, s0, s16
 800d694:	e7ba      	b.n	800d60c <__ieee754_sinhf+0x1c>
 800d696:	4b0c      	ldr	r3, [pc, #48]	; (800d6c8 <__ieee754_sinhf+0xd8>)
 800d698:	429c      	cmp	r4, r3
 800d69a:	dc0a      	bgt.n	800d6b2 <__ieee754_sinhf+0xc2>
 800d69c:	f7fd ff72 	bl	800b584 <fabsf>
 800d6a0:	ee20 0a28 	vmul.f32	s0, s0, s17
 800d6a4:	f7ff f96e 	bl	800c984 <__ieee754_expf>
 800d6a8:	ee68 7a00 	vmul.f32	s15, s16, s0
 800d6ac:	ee67 7a80 	vmul.f32	s15, s15, s0
 800d6b0:	e7ac      	b.n	800d60c <__ieee754_sinhf+0x1c>
 800d6b2:	ed9f 7a03 	vldr	s14, [pc, #12]	; 800d6c0 <__ieee754_sinhf+0xd0>
 800d6b6:	ee60 7a07 	vmul.f32	s15, s0, s14
 800d6ba:	e7a7      	b.n	800d60c <__ieee754_sinhf+0x1c>
 800d6bc:	41afffff 	.word	0x41afffff
 800d6c0:	7cf0bdc2 	.word	0x7cf0bdc2
 800d6c4:	42b17217 	.word	0x42b17217
 800d6c8:	42b2d4fc 	.word	0x42b2d4fc

0800d6cc <__ieee754_sqrtf>:
 800d6cc:	eeb1 0ac0 	vsqrt.f32	s0, s0
 800d6d0:	4770      	bx	lr
	...

0800d6d4 <__kernel_cosf>:
 800d6d4:	ee10 3a10 	vmov	r3, s0
 800d6d8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800d6dc:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800d6e0:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800d6e4:	da05      	bge.n	800d6f2 <__kernel_cosf+0x1e>
 800d6e6:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800d6ea:	ee17 2a90 	vmov	r2, s15
 800d6ee:	2a00      	cmp	r2, #0
 800d6f0:	d03b      	beq.n	800d76a <__kernel_cosf+0x96>
 800d6f2:	ee20 6a00 	vmul.f32	s12, s0, s0
 800d6f6:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800d6fa:	eddf 5a1d 	vldr	s11, [pc, #116]	; 800d770 <__kernel_cosf+0x9c>
 800d6fe:	4a1d      	ldr	r2, [pc, #116]	; (800d774 <__kernel_cosf+0xa0>)
 800d700:	ee66 7a07 	vmul.f32	s15, s12, s14
 800d704:	ed9f 7a1c 	vldr	s14, [pc, #112]	; 800d778 <__kernel_cosf+0xa4>
 800d708:	eea6 7a25 	vfma.f32	s14, s12, s11
 800d70c:	4293      	cmp	r3, r2
 800d70e:	eddf 5a1b 	vldr	s11, [pc, #108]	; 800d77c <__kernel_cosf+0xa8>
 800d712:	eee7 5a06 	vfma.f32	s11, s14, s12
 800d716:	ed9f 7a1a 	vldr	s14, [pc, #104]	; 800d780 <__kernel_cosf+0xac>
 800d71a:	eea5 7a86 	vfma.f32	s14, s11, s12
 800d71e:	eddf 5a19 	vldr	s11, [pc, #100]	; 800d784 <__kernel_cosf+0xb0>
 800d722:	eee7 5a06 	vfma.f32	s11, s14, s12
 800d726:	ed9f 7a18 	vldr	s14, [pc, #96]	; 800d788 <__kernel_cosf+0xb4>
 800d72a:	eea5 7a86 	vfma.f32	s14, s11, s12
 800d72e:	ee60 0ac0 	vnmul.f32	s1, s1, s0
 800d732:	ee27 7a06 	vmul.f32	s14, s14, s12
 800d736:	eee6 0a07 	vfma.f32	s1, s12, s14
 800d73a:	dc04      	bgt.n	800d746 <__kernel_cosf+0x72>
 800d73c:	ee77 0ae0 	vsub.f32	s1, s15, s1
 800d740:	ee36 0ae0 	vsub.f32	s0, s13, s1
 800d744:	4770      	bx	lr
 800d746:	4a11      	ldr	r2, [pc, #68]	; (800d78c <__kernel_cosf+0xb8>)
 800d748:	4293      	cmp	r3, r2
 800d74a:	bfda      	itte	le
 800d74c:	f103 437f 	addle.w	r3, r3, #4278190080	; 0xff000000
 800d750:	ee07 3a10 	vmovle	s14, r3
 800d754:	eeb5 7a02 	vmovgt.f32	s14, #82	; 0x3e900000  0.2812500
 800d758:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800d75c:	ee36 0ac7 	vsub.f32	s0, s13, s14
 800d760:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800d764:	ee30 0a67 	vsub.f32	s0, s0, s15
 800d768:	4770      	bx	lr
 800d76a:	eeb0 0a66 	vmov.f32	s0, s13
 800d76e:	4770      	bx	lr
 800d770:	ad47d74e 	.word	0xad47d74e
 800d774:	3e999999 	.word	0x3e999999
 800d778:	310f74f6 	.word	0x310f74f6
 800d77c:	b493f27c 	.word	0xb493f27c
 800d780:	37d00d01 	.word	0x37d00d01
 800d784:	bab60b61 	.word	0xbab60b61
 800d788:	3d2aaaab 	.word	0x3d2aaaab
 800d78c:	3f480000 	.word	0x3f480000

0800d790 <__kernel_rem_pio2f>:
 800d790:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d794:	ed2d 8b04 	vpush	{d8-d9}
 800d798:	b0d7      	sub	sp, #348	; 0x15c
 800d79a:	469b      	mov	fp, r3
 800d79c:	460e      	mov	r6, r1
 800d79e:	4bbe      	ldr	r3, [pc, #760]	; (800da98 <__kernel_rem_pio2f+0x308>)
 800d7a0:	9964      	ldr	r1, [sp, #400]	; 0x190
 800d7a2:	9002      	str	r0, [sp, #8]
 800d7a4:	f853 9021 	ldr.w	r9, [r3, r1, lsl #2]
 800d7a8:	9865      	ldr	r0, [sp, #404]	; 0x194
 800d7aa:	ed9f 7abf 	vldr	s14, [pc, #764]	; 800daa8 <__kernel_rem_pio2f+0x318>
 800d7ae:	1ed1      	subs	r1, r2, #3
 800d7b0:	2308      	movs	r3, #8
 800d7b2:	fb91 f1f3 	sdiv	r1, r1, r3
 800d7b6:	ea21 71e1 	bic.w	r1, r1, r1, asr #31
 800d7ba:	f10b 3aff 	add.w	sl, fp, #4294967295
 800d7be:	1c4c      	adds	r4, r1, #1
 800d7c0:	eba2 04c4 	sub.w	r4, r2, r4, lsl #3
 800d7c4:	eba1 050a 	sub.w	r5, r1, sl
 800d7c8:	aa1a      	add	r2, sp, #104	; 0x68
 800d7ca:	eb09 070a 	add.w	r7, r9, sl
 800d7ce:	eb00 0c85 	add.w	ip, r0, r5, lsl #2
 800d7d2:	4696      	mov	lr, r2
 800d7d4:	2300      	movs	r3, #0
 800d7d6:	42bb      	cmp	r3, r7
 800d7d8:	dd0f      	ble.n	800d7fa <__kernel_rem_pio2f+0x6a>
 800d7da:	af42      	add	r7, sp, #264	; 0x108
 800d7dc:	2200      	movs	r2, #0
 800d7de:	454a      	cmp	r2, r9
 800d7e0:	dc27      	bgt.n	800d832 <__kernel_rem_pio2f+0xa2>
 800d7e2:	f10d 0c68 	add.w	ip, sp, #104	; 0x68
 800d7e6:	eb0b 0302 	add.w	r3, fp, r2
 800d7ea:	eb0c 0383 	add.w	r3, ip, r3, lsl #2
 800d7ee:	9d02      	ldr	r5, [sp, #8]
 800d7f0:	eddf 7aad 	vldr	s15, [pc, #692]	; 800daa8 <__kernel_rem_pio2f+0x318>
 800d7f4:	f04f 0c00 	mov.w	ip, #0
 800d7f8:	e015      	b.n	800d826 <__kernel_rem_pio2f+0x96>
 800d7fa:	42dd      	cmn	r5, r3
 800d7fc:	bf5d      	ittte	pl
 800d7fe:	f85c 2023 	ldrpl.w	r2, [ip, r3, lsl #2]
 800d802:	ee07 2a90 	vmovpl	s15, r2
 800d806:	eef8 7ae7 	vcvtpl.f32.s32	s15, s15
 800d80a:	eef0 7a47 	vmovmi.f32	s15, s14
 800d80e:	ecee 7a01 	vstmia	lr!, {s15}
 800d812:	3301      	adds	r3, #1
 800d814:	e7df      	b.n	800d7d6 <__kernel_rem_pio2f+0x46>
 800d816:	ecf5 6a01 	vldmia	r5!, {s13}
 800d81a:	ed33 7a01 	vldmdb	r3!, {s14}
 800d81e:	eee6 7a87 	vfma.f32	s15, s13, s14
 800d822:	f10c 0c01 	add.w	ip, ip, #1
 800d826:	45d4      	cmp	ip, sl
 800d828:	ddf5      	ble.n	800d816 <__kernel_rem_pio2f+0x86>
 800d82a:	ece7 7a01 	vstmia	r7!, {s15}
 800d82e:	3201      	adds	r2, #1
 800d830:	e7d5      	b.n	800d7de <__kernel_rem_pio2f+0x4e>
 800d832:	ab06      	add	r3, sp, #24
 800d834:	eb03 0389 	add.w	r3, r3, r9, lsl #2
 800d838:	9304      	str	r3, [sp, #16]
 800d83a:	eddf 8a9a 	vldr	s17, [pc, #616]	; 800daa4 <__kernel_rem_pio2f+0x314>
 800d83e:	ed9f 9a98 	vldr	s18, [pc, #608]	; 800daa0 <__kernel_rem_pio2f+0x310>
 800d842:	eb00 0381 	add.w	r3, r0, r1, lsl #2
 800d846:	9303      	str	r3, [sp, #12]
 800d848:	464d      	mov	r5, r9
 800d84a:	ab56      	add	r3, sp, #344	; 0x158
 800d84c:	f105 4780 	add.w	r7, r5, #1073741824	; 0x40000000
 800d850:	eb03 0385 	add.w	r3, r3, r5, lsl #2
 800d854:	3f01      	subs	r7, #1
 800d856:	ed13 0a14 	vldr	s0, [r3, #-80]	; 0xffffffb0
 800d85a:	00bf      	lsls	r7, r7, #2
 800d85c:	ab56      	add	r3, sp, #344	; 0x158
 800d85e:	19da      	adds	r2, r3, r7
 800d860:	3a4c      	subs	r2, #76	; 0x4c
 800d862:	2300      	movs	r3, #0
 800d864:	1ae9      	subs	r1, r5, r3
 800d866:	2900      	cmp	r1, #0
 800d868:	dc4c      	bgt.n	800d904 <__kernel_rem_pio2f+0x174>
 800d86a:	4620      	mov	r0, r4
 800d86c:	f000 fcde 	bl	800e22c <scalbnf>
 800d870:	eeb0 8a40 	vmov.f32	s16, s0
 800d874:	eeb4 0a00 	vmov.f32	s0, #64	; 0x3e000000  0.125
 800d878:	ee28 0a00 	vmul.f32	s0, s16, s0
 800d87c:	f7fd fe8a 	bl	800b594 <floorf>
 800d880:	eef2 7a00 	vmov.f32	s15, #32	; 0x41000000  8.0
 800d884:	eea0 8a67 	vfms.f32	s16, s0, s15
 800d888:	2c00      	cmp	r4, #0
 800d88a:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800d88e:	edcd 7a01 	vstr	s15, [sp, #4]
 800d892:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d896:	ee38 8a67 	vsub.f32	s16, s16, s15
 800d89a:	dd48      	ble.n	800d92e <__kernel_rem_pio2f+0x19e>
 800d89c:	1e69      	subs	r1, r5, #1
 800d89e:	ab06      	add	r3, sp, #24
 800d8a0:	f1c4 0008 	rsb	r0, r4, #8
 800d8a4:	f853 c021 	ldr.w	ip, [r3, r1, lsl #2]
 800d8a8:	9a01      	ldr	r2, [sp, #4]
 800d8aa:	fa4c f300 	asr.w	r3, ip, r0
 800d8ae:	441a      	add	r2, r3
 800d8b0:	4083      	lsls	r3, r0
 800d8b2:	9201      	str	r2, [sp, #4]
 800d8b4:	ebac 0203 	sub.w	r2, ip, r3
 800d8b8:	ab06      	add	r3, sp, #24
 800d8ba:	f843 2021 	str.w	r2, [r3, r1, lsl #2]
 800d8be:	f1c4 0307 	rsb	r3, r4, #7
 800d8c2:	fa42 f803 	asr.w	r8, r2, r3
 800d8c6:	f1b8 0f00 	cmp.w	r8, #0
 800d8ca:	dd41      	ble.n	800d950 <__kernel_rem_pio2f+0x1c0>
 800d8cc:	9b01      	ldr	r3, [sp, #4]
 800d8ce:	2000      	movs	r0, #0
 800d8d0:	3301      	adds	r3, #1
 800d8d2:	9301      	str	r3, [sp, #4]
 800d8d4:	4601      	mov	r1, r0
 800d8d6:	4285      	cmp	r5, r0
 800d8d8:	dc6d      	bgt.n	800d9b6 <__kernel_rem_pio2f+0x226>
 800d8da:	2c00      	cmp	r4, #0
 800d8dc:	dd04      	ble.n	800d8e8 <__kernel_rem_pio2f+0x158>
 800d8de:	2c01      	cmp	r4, #1
 800d8e0:	d07e      	beq.n	800d9e0 <__kernel_rem_pio2f+0x250>
 800d8e2:	2c02      	cmp	r4, #2
 800d8e4:	f000 8086 	beq.w	800d9f4 <__kernel_rem_pio2f+0x264>
 800d8e8:	f1b8 0f02 	cmp.w	r8, #2
 800d8ec:	d130      	bne.n	800d950 <__kernel_rem_pio2f+0x1c0>
 800d8ee:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800d8f2:	ee30 8a48 	vsub.f32	s16, s0, s16
 800d8f6:	b359      	cbz	r1, 800d950 <__kernel_rem_pio2f+0x1c0>
 800d8f8:	4620      	mov	r0, r4
 800d8fa:	f000 fc97 	bl	800e22c <scalbnf>
 800d8fe:	ee38 8a40 	vsub.f32	s16, s16, s0
 800d902:	e025      	b.n	800d950 <__kernel_rem_pio2f+0x1c0>
 800d904:	ee60 7a28 	vmul.f32	s15, s0, s17
 800d908:	a806      	add	r0, sp, #24
 800d90a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800d90e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800d912:	eea7 0ac9 	vfms.f32	s0, s15, s18
 800d916:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800d91a:	ee10 1a10 	vmov	r1, s0
 800d91e:	ed32 0a01 	vldmdb	r2!, {s0}
 800d922:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
 800d926:	ee37 0a80 	vadd.f32	s0, s15, s0
 800d92a:	3301      	adds	r3, #1
 800d92c:	e79a      	b.n	800d864 <__kernel_rem_pio2f+0xd4>
 800d92e:	d106      	bne.n	800d93e <__kernel_rem_pio2f+0x1ae>
 800d930:	1e6b      	subs	r3, r5, #1
 800d932:	aa06      	add	r2, sp, #24
 800d934:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800d938:	ea4f 2822 	mov.w	r8, r2, asr #8
 800d93c:	e7c3      	b.n	800d8c6 <__kernel_rem_pio2f+0x136>
 800d93e:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800d942:	eeb4 8ae7 	vcmpe.f32	s16, s15
 800d946:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d94a:	da31      	bge.n	800d9b0 <__kernel_rem_pio2f+0x220>
 800d94c:	f04f 0800 	mov.w	r8, #0
 800d950:	eeb5 8a40 	vcmp.f32	s16, #0.0
 800d954:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800d958:	f040 80a8 	bne.w	800daac <__kernel_rem_pio2f+0x31c>
 800d95c:	1e6b      	subs	r3, r5, #1
 800d95e:	4618      	mov	r0, r3
 800d960:	2200      	movs	r2, #0
 800d962:	4548      	cmp	r0, r9
 800d964:	da4d      	bge.n	800da02 <__kernel_rem_pio2f+0x272>
 800d966:	2a00      	cmp	r2, #0
 800d968:	f000 8087 	beq.w	800da7a <__kernel_rem_pio2f+0x2ea>
 800d96c:	aa06      	add	r2, sp, #24
 800d96e:	3c08      	subs	r4, #8
 800d970:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800d974:	2900      	cmp	r1, #0
 800d976:	f000 808d 	beq.w	800da94 <__kernel_rem_pio2f+0x304>
 800d97a:	4620      	mov	r0, r4
 800d97c:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 800d980:	9302      	str	r3, [sp, #8]
 800d982:	f000 fc53 	bl	800e22c <scalbnf>
 800d986:	9b02      	ldr	r3, [sp, #8]
 800d988:	ed9f 7a46 	vldr	s14, [pc, #280]	; 800daa4 <__kernel_rem_pio2f+0x314>
 800d98c:	0099      	lsls	r1, r3, #2
 800d98e:	aa42      	add	r2, sp, #264	; 0x108
 800d990:	1850      	adds	r0, r2, r1
 800d992:	1d05      	adds	r5, r0, #4
 800d994:	461c      	mov	r4, r3
 800d996:	2c00      	cmp	r4, #0
 800d998:	f280 80b8 	bge.w	800db0c <__kernel_rem_pio2f+0x37c>
 800d99c:	2500      	movs	r5, #0
 800d99e:	1b5c      	subs	r4, r3, r5
 800d9a0:	2c00      	cmp	r4, #0
 800d9a2:	f2c0 80d8 	blt.w	800db56 <__kernel_rem_pio2f+0x3c6>
 800d9a6:	4f3d      	ldr	r7, [pc, #244]	; (800da9c <__kernel_rem_pio2f+0x30c>)
 800d9a8:	eddf 7a3f 	vldr	s15, [pc, #252]	; 800daa8 <__kernel_rem_pio2f+0x318>
 800d9ac:	2400      	movs	r4, #0
 800d9ae:	e0c6      	b.n	800db3e <__kernel_rem_pio2f+0x3ae>
 800d9b0:	f04f 0802 	mov.w	r8, #2
 800d9b4:	e78a      	b.n	800d8cc <__kernel_rem_pio2f+0x13c>
 800d9b6:	ab06      	add	r3, sp, #24
 800d9b8:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800d9bc:	b949      	cbnz	r1, 800d9d2 <__kernel_rem_pio2f+0x242>
 800d9be:	b12b      	cbz	r3, 800d9cc <__kernel_rem_pio2f+0x23c>
 800d9c0:	aa06      	add	r2, sp, #24
 800d9c2:	f5c3 7380 	rsb	r3, r3, #256	; 0x100
 800d9c6:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 800d9ca:	2301      	movs	r3, #1
 800d9cc:	3001      	adds	r0, #1
 800d9ce:	4619      	mov	r1, r3
 800d9d0:	e781      	b.n	800d8d6 <__kernel_rem_pio2f+0x146>
 800d9d2:	aa06      	add	r2, sp, #24
 800d9d4:	f1c3 03ff 	rsb	r3, r3, #255	; 0xff
 800d9d8:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 800d9dc:	460b      	mov	r3, r1
 800d9de:	e7f5      	b.n	800d9cc <__kernel_rem_pio2f+0x23c>
 800d9e0:	1e68      	subs	r0, r5, #1
 800d9e2:	ab06      	add	r3, sp, #24
 800d9e4:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800d9e8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800d9ec:	aa06      	add	r2, sp, #24
 800d9ee:	f842 3020 	str.w	r3, [r2, r0, lsl #2]
 800d9f2:	e779      	b.n	800d8e8 <__kernel_rem_pio2f+0x158>
 800d9f4:	1e68      	subs	r0, r5, #1
 800d9f6:	ab06      	add	r3, sp, #24
 800d9f8:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 800d9fc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800da00:	e7f4      	b.n	800d9ec <__kernel_rem_pio2f+0x25c>
 800da02:	a906      	add	r1, sp, #24
 800da04:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 800da08:	3801      	subs	r0, #1
 800da0a:	430a      	orrs	r2, r1
 800da0c:	e7a9      	b.n	800d962 <__kernel_rem_pio2f+0x1d2>
 800da0e:	f10c 0c01 	add.w	ip, ip, #1
 800da12:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800da16:	2a00      	cmp	r2, #0
 800da18:	d0f9      	beq.n	800da0e <__kernel_rem_pio2f+0x27e>
 800da1a:	eb0b 0305 	add.w	r3, fp, r5
 800da1e:	aa1a      	add	r2, sp, #104	; 0x68
 800da20:	009b      	lsls	r3, r3, #2
 800da22:	1898      	adds	r0, r3, r2
 800da24:	3004      	adds	r0, #4
 800da26:	1c69      	adds	r1, r5, #1
 800da28:	3704      	adds	r7, #4
 800da2a:	2200      	movs	r2, #0
 800da2c:	4465      	add	r5, ip
 800da2e:	9005      	str	r0, [sp, #20]
 800da30:	428d      	cmp	r5, r1
 800da32:	f6ff af0a 	blt.w	800d84a <__kernel_rem_pio2f+0xba>
 800da36:	a81a      	add	r0, sp, #104	; 0x68
 800da38:	eb02 0c03 	add.w	ip, r2, r3
 800da3c:	4484      	add	ip, r0
 800da3e:	9803      	ldr	r0, [sp, #12]
 800da40:	f8dd e008 	ldr.w	lr, [sp, #8]
 800da44:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
 800da48:	9001      	str	r0, [sp, #4]
 800da4a:	ee07 0a90 	vmov	s15, r0
 800da4e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800da52:	9805      	ldr	r0, [sp, #20]
 800da54:	edcc 7a00 	vstr	s15, [ip]
 800da58:	eddf 7a13 	vldr	s15, [pc, #76]	; 800daa8 <__kernel_rem_pio2f+0x318>
 800da5c:	eb00 0802 	add.w	r8, r0, r2
 800da60:	f04f 0c00 	mov.w	ip, #0
 800da64:	45d4      	cmp	ip, sl
 800da66:	dd0c      	ble.n	800da82 <__kernel_rem_pio2f+0x2f2>
 800da68:	eb02 0c07 	add.w	ip, r2, r7
 800da6c:	a842      	add	r0, sp, #264	; 0x108
 800da6e:	4484      	add	ip, r0
 800da70:	edcc 7a01 	vstr	s15, [ip, #4]
 800da74:	3101      	adds	r1, #1
 800da76:	3204      	adds	r2, #4
 800da78:	e7da      	b.n	800da30 <__kernel_rem_pio2f+0x2a0>
 800da7a:	9b04      	ldr	r3, [sp, #16]
 800da7c:	f04f 0c01 	mov.w	ip, #1
 800da80:	e7c7      	b.n	800da12 <__kernel_rem_pio2f+0x282>
 800da82:	ecfe 6a01 	vldmia	lr!, {s13}
 800da86:	ed38 7a01 	vldmdb	r8!, {s14}
 800da8a:	f10c 0c01 	add.w	ip, ip, #1
 800da8e:	eee6 7a87 	vfma.f32	s15, s13, s14
 800da92:	e7e7      	b.n	800da64 <__kernel_rem_pio2f+0x2d4>
 800da94:	3b01      	subs	r3, #1
 800da96:	e769      	b.n	800d96c <__kernel_rem_pio2f+0x1dc>
 800da98:	0807387c 	.word	0x0807387c
 800da9c:	08073850 	.word	0x08073850
 800daa0:	43800000 	.word	0x43800000
 800daa4:	3b800000 	.word	0x3b800000
 800daa8:	00000000 	.word	0x00000000
 800daac:	4260      	negs	r0, r4
 800daae:	eeb0 0a48 	vmov.f32	s0, s16
 800dab2:	f000 fbbb 	bl	800e22c <scalbnf>
 800dab6:	ed1f 7a06 	vldr	s14, [pc, #-24]	; 800daa0 <__kernel_rem_pio2f+0x310>
 800daba:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800dabe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800dac2:	db1a      	blt.n	800dafa <__kernel_rem_pio2f+0x36a>
 800dac4:	ed5f 7a09 	vldr	s15, [pc, #-36]	; 800daa4 <__kernel_rem_pio2f+0x314>
 800dac8:	ee60 7a27 	vmul.f32	s15, s0, s15
 800dacc:	aa06      	add	r2, sp, #24
 800dace:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800dad2:	a906      	add	r1, sp, #24
 800dad4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800dad8:	3408      	adds	r4, #8
 800dada:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800dade:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800dae2:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800dae6:	ee10 3a10 	vmov	r3, s0
 800daea:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 800daee:	1c6b      	adds	r3, r5, #1
 800daf0:	ee17 2a90 	vmov	r2, s15
 800daf4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800daf8:	e73f      	b.n	800d97a <__kernel_rem_pio2f+0x1ea>
 800dafa:	eebd 0ac0 	vcvt.s32.f32	s0, s0
 800dafe:	aa06      	add	r2, sp, #24
 800db00:	ee10 3a10 	vmov	r3, s0
 800db04:	f842 3025 	str.w	r3, [r2, r5, lsl #2]
 800db08:	462b      	mov	r3, r5
 800db0a:	e736      	b.n	800d97a <__kernel_rem_pio2f+0x1ea>
 800db0c:	aa06      	add	r2, sp, #24
 800db0e:	f852 2024 	ldr.w	r2, [r2, r4, lsl #2]
 800db12:	9202      	str	r2, [sp, #8]
 800db14:	ee07 2a90 	vmov	s15, r2
 800db18:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800db1c:	3c01      	subs	r4, #1
 800db1e:	ee67 7a80 	vmul.f32	s15, s15, s0
 800db22:	ee20 0a07 	vmul.f32	s0, s0, s14
 800db26:	ed65 7a01 	vstmdb	r5!, {s15}
 800db2a:	e734      	b.n	800d996 <__kernel_rem_pio2f+0x206>
 800db2c:	eb00 0c84 	add.w	ip, r0, r4, lsl #2
 800db30:	ecf7 6a01 	vldmia	r7!, {s13}
 800db34:	ed9c 7a00 	vldr	s14, [ip]
 800db38:	eee6 7a87 	vfma.f32	s15, s13, s14
 800db3c:	3401      	adds	r4, #1
 800db3e:	454c      	cmp	r4, r9
 800db40:	dc01      	bgt.n	800db46 <__kernel_rem_pio2f+0x3b6>
 800db42:	42a5      	cmp	r5, r4
 800db44:	daf2      	bge.n	800db2c <__kernel_rem_pio2f+0x39c>
 800db46:	aa56      	add	r2, sp, #344	; 0x158
 800db48:	eb02 0485 	add.w	r4, r2, r5, lsl #2
 800db4c:	ed44 7a28 	vstr	s15, [r4, #-160]	; 0xffffff60
 800db50:	3501      	adds	r5, #1
 800db52:	3804      	subs	r0, #4
 800db54:	e723      	b.n	800d99e <__kernel_rem_pio2f+0x20e>
 800db56:	9a64      	ldr	r2, [sp, #400]	; 0x190
 800db58:	2a03      	cmp	r2, #3
 800db5a:	d84d      	bhi.n	800dbf8 <__kernel_rem_pio2f+0x468>
 800db5c:	e8df f002 	tbb	[pc, r2]
 800db60:	021f1f3e 	.word	0x021f1f3e
 800db64:	aa56      	add	r2, sp, #344	; 0x158
 800db66:	4411      	add	r1, r2
 800db68:	399c      	subs	r1, #156	; 0x9c
 800db6a:	4608      	mov	r0, r1
 800db6c:	461c      	mov	r4, r3
 800db6e:	2c00      	cmp	r4, #0
 800db70:	dc5f      	bgt.n	800dc32 <__kernel_rem_pio2f+0x4a2>
 800db72:	4608      	mov	r0, r1
 800db74:	461c      	mov	r4, r3
 800db76:	2c01      	cmp	r4, #1
 800db78:	dc6b      	bgt.n	800dc52 <__kernel_rem_pio2f+0x4c2>
 800db7a:	ed5f 7a35 	vldr	s15, [pc, #-212]	; 800daa8 <__kernel_rem_pio2f+0x318>
 800db7e:	2b01      	cmp	r3, #1
 800db80:	dc77      	bgt.n	800dc72 <__kernel_rem_pio2f+0x4e2>
 800db82:	eddd 6a2e 	vldr	s13, [sp, #184]	; 0xb8
 800db86:	ed9d 7a2f 	vldr	s14, [sp, #188]	; 0xbc
 800db8a:	f1b8 0f00 	cmp.w	r8, #0
 800db8e:	d176      	bne.n	800dc7e <__kernel_rem_pio2f+0x4ee>
 800db90:	edc6 6a00 	vstr	s13, [r6]
 800db94:	ed86 7a01 	vstr	s14, [r6, #4]
 800db98:	edc6 7a02 	vstr	s15, [r6, #8]
 800db9c:	e02c      	b.n	800dbf8 <__kernel_rem_pio2f+0x468>
 800db9e:	aa56      	add	r2, sp, #344	; 0x158
 800dba0:	4411      	add	r1, r2
 800dba2:	ed1f 7a3f 	vldr	s14, [pc, #-252]	; 800daa8 <__kernel_rem_pio2f+0x318>
 800dba6:	399c      	subs	r1, #156	; 0x9c
 800dba8:	4618      	mov	r0, r3
 800dbaa:	2800      	cmp	r0, #0
 800dbac:	da32      	bge.n	800dc14 <__kernel_rem_pio2f+0x484>
 800dbae:	f1b8 0f00 	cmp.w	r8, #0
 800dbb2:	d035      	beq.n	800dc20 <__kernel_rem_pio2f+0x490>
 800dbb4:	eef1 7a47 	vneg.f32	s15, s14
 800dbb8:	edc6 7a00 	vstr	s15, [r6]
 800dbbc:	eddd 7a2e 	vldr	s15, [sp, #184]	; 0xb8
 800dbc0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800dbc4:	a82f      	add	r0, sp, #188	; 0xbc
 800dbc6:	2101      	movs	r1, #1
 800dbc8:	428b      	cmp	r3, r1
 800dbca:	da2c      	bge.n	800dc26 <__kernel_rem_pio2f+0x496>
 800dbcc:	f1b8 0f00 	cmp.w	r8, #0
 800dbd0:	d001      	beq.n	800dbd6 <__kernel_rem_pio2f+0x446>
 800dbd2:	eef1 7a67 	vneg.f32	s15, s15
 800dbd6:	edc6 7a01 	vstr	s15, [r6, #4]
 800dbda:	e00d      	b.n	800dbf8 <__kernel_rem_pio2f+0x468>
 800dbdc:	aa56      	add	r2, sp, #344	; 0x158
 800dbde:	4411      	add	r1, r2
 800dbe0:	ed5f 7a4f 	vldr	s15, [pc, #-316]	; 800daa8 <__kernel_rem_pio2f+0x318>
 800dbe4:	399c      	subs	r1, #156	; 0x9c
 800dbe6:	2b00      	cmp	r3, #0
 800dbe8:	da0e      	bge.n	800dc08 <__kernel_rem_pio2f+0x478>
 800dbea:	f1b8 0f00 	cmp.w	r8, #0
 800dbee:	d001      	beq.n	800dbf4 <__kernel_rem_pio2f+0x464>
 800dbf0:	eef1 7a67 	vneg.f32	s15, s15
 800dbf4:	edc6 7a00 	vstr	s15, [r6]
 800dbf8:	9b01      	ldr	r3, [sp, #4]
 800dbfa:	f003 0007 	and.w	r0, r3, #7
 800dbfe:	b057      	add	sp, #348	; 0x15c
 800dc00:	ecbd 8b04 	vpop	{d8-d9}
 800dc04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc08:	ed31 7a01 	vldmdb	r1!, {s14}
 800dc0c:	3b01      	subs	r3, #1
 800dc0e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800dc12:	e7e8      	b.n	800dbe6 <__kernel_rem_pio2f+0x456>
 800dc14:	ed71 7a01 	vldmdb	r1!, {s15}
 800dc18:	3801      	subs	r0, #1
 800dc1a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800dc1e:	e7c4      	b.n	800dbaa <__kernel_rem_pio2f+0x41a>
 800dc20:	eef0 7a47 	vmov.f32	s15, s14
 800dc24:	e7c8      	b.n	800dbb8 <__kernel_rem_pio2f+0x428>
 800dc26:	ecb0 7a01 	vldmia	r0!, {s14}
 800dc2a:	3101      	adds	r1, #1
 800dc2c:	ee77 7a87 	vadd.f32	s15, s15, s14
 800dc30:	e7ca      	b.n	800dbc8 <__kernel_rem_pio2f+0x438>
 800dc32:	ed50 7a02 	vldr	s15, [r0, #-8]
 800dc36:	ed70 6a01 	vldmdb	r0!, {s13}
 800dc3a:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800dc3e:	3c01      	subs	r4, #1
 800dc40:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800dc44:	ed00 7a01 	vstr	s14, [r0, #-4]
 800dc48:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dc4c:	edc0 7a00 	vstr	s15, [r0]
 800dc50:	e78d      	b.n	800db6e <__kernel_rem_pio2f+0x3de>
 800dc52:	ed50 7a02 	vldr	s15, [r0, #-8]
 800dc56:	ed70 6a01 	vldmdb	r0!, {s13}
 800dc5a:	ee37 7aa6 	vadd.f32	s14, s15, s13
 800dc5e:	3c01      	subs	r4, #1
 800dc60:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800dc64:	ed00 7a01 	vstr	s14, [r0, #-4]
 800dc68:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800dc6c:	edc0 7a00 	vstr	s15, [r0]
 800dc70:	e781      	b.n	800db76 <__kernel_rem_pio2f+0x3e6>
 800dc72:	ed31 7a01 	vldmdb	r1!, {s14}
 800dc76:	3b01      	subs	r3, #1
 800dc78:	ee77 7a87 	vadd.f32	s15, s15, s14
 800dc7c:	e77f      	b.n	800db7e <__kernel_rem_pio2f+0x3ee>
 800dc7e:	eef1 6a66 	vneg.f32	s13, s13
 800dc82:	eeb1 7a47 	vneg.f32	s14, s14
 800dc86:	edc6 6a00 	vstr	s13, [r6]
 800dc8a:	ed86 7a01 	vstr	s14, [r6, #4]
 800dc8e:	eef1 7a67 	vneg.f32	s15, s15
 800dc92:	e781      	b.n	800db98 <__kernel_rem_pio2f+0x408>

0800dc94 <__kernel_sinf>:
 800dc94:	ee10 3a10 	vmov	r3, s0
 800dc98:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800dc9c:	f1b3 5f48 	cmp.w	r3, #838860800	; 0x32000000
 800dca0:	da04      	bge.n	800dcac <__kernel_sinf+0x18>
 800dca2:	eefd 7ac0 	vcvt.s32.f32	s15, s0
 800dca6:	ee17 3a90 	vmov	r3, s15
 800dcaa:	b35b      	cbz	r3, 800dd04 <__kernel_sinf+0x70>
 800dcac:	ee20 7a00 	vmul.f32	s14, s0, s0
 800dcb0:	eddf 7a15 	vldr	s15, [pc, #84]	; 800dd08 <__kernel_sinf+0x74>
 800dcb4:	ed9f 6a15 	vldr	s12, [pc, #84]	; 800dd0c <__kernel_sinf+0x78>
 800dcb8:	eea7 6a27 	vfma.f32	s12, s14, s15
 800dcbc:	eddf 7a14 	vldr	s15, [pc, #80]	; 800dd10 <__kernel_sinf+0x7c>
 800dcc0:	eee6 7a07 	vfma.f32	s15, s12, s14
 800dcc4:	ed9f 6a13 	vldr	s12, [pc, #76]	; 800dd14 <__kernel_sinf+0x80>
 800dcc8:	eea7 6a87 	vfma.f32	s12, s15, s14
 800dccc:	eddf 7a12 	vldr	s15, [pc, #72]	; 800dd18 <__kernel_sinf+0x84>
 800dcd0:	ee60 6a07 	vmul.f32	s13, s0, s14
 800dcd4:	eee6 7a07 	vfma.f32	s15, s12, s14
 800dcd8:	b930      	cbnz	r0, 800dce8 <__kernel_sinf+0x54>
 800dcda:	ed9f 6a10 	vldr	s12, [pc, #64]	; 800dd1c <__kernel_sinf+0x88>
 800dcde:	eea7 6a27 	vfma.f32	s12, s14, s15
 800dce2:	eea6 0a26 	vfma.f32	s0, s12, s13
 800dce6:	4770      	bx	lr
 800dce8:	ee67 7ae6 	vnmul.f32	s15, s15, s13
 800dcec:	eeb6 6a00 	vmov.f32	s12, #96	; 0x3f000000  0.5
 800dcf0:	eee0 7a86 	vfma.f32	s15, s1, s12
 800dcf4:	eed7 0a87 	vfnms.f32	s1, s15, s14
 800dcf8:	eddf 7a09 	vldr	s15, [pc, #36]	; 800dd20 <__kernel_sinf+0x8c>
 800dcfc:	eee6 0aa7 	vfma.f32	s1, s13, s15
 800dd00:	ee30 0a60 	vsub.f32	s0, s0, s1
 800dd04:	4770      	bx	lr
 800dd06:	bf00      	nop
 800dd08:	2f2ec9d3 	.word	0x2f2ec9d3
 800dd0c:	b2d72f34 	.word	0xb2d72f34
 800dd10:	3638ef1b 	.word	0x3638ef1b
 800dd14:	b9500d01 	.word	0xb9500d01
 800dd18:	3c088889 	.word	0x3c088889
 800dd1c:	be2aaaab 	.word	0xbe2aaaab
 800dd20:	3e2aaaab 	.word	0x3e2aaaab

0800dd24 <__kernel_tanf>:
 800dd24:	b508      	push	{r3, lr}
 800dd26:	ee10 3a10 	vmov	r3, s0
 800dd2a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800dd2e:	f1b2 5f46 	cmp.w	r2, #830472192	; 0x31800000
 800dd32:	eef0 7a40 	vmov.f32	s15, s0
 800dd36:	da17      	bge.n	800dd68 <__kernel_tanf+0x44>
 800dd38:	eebd 7ac0 	vcvt.s32.f32	s14, s0
 800dd3c:	ee17 1a10 	vmov	r1, s14
 800dd40:	bb41      	cbnz	r1, 800dd94 <__kernel_tanf+0x70>
 800dd42:	1c43      	adds	r3, r0, #1
 800dd44:	4313      	orrs	r3, r2
 800dd46:	d108      	bne.n	800dd5a <__kernel_tanf+0x36>
 800dd48:	f7fd fc1c 	bl	800b584 <fabsf>
 800dd4c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800dd50:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800dd54:	eeb0 0a67 	vmov.f32	s0, s15
 800dd58:	bd08      	pop	{r3, pc}
 800dd5a:	2801      	cmp	r0, #1
 800dd5c:	d0fa      	beq.n	800dd54 <__kernel_tanf+0x30>
 800dd5e:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800dd62:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800dd66:	e7f5      	b.n	800dd54 <__kernel_tanf+0x30>
 800dd68:	494e      	ldr	r1, [pc, #312]	; (800dea4 <__kernel_tanf+0x180>)
 800dd6a:	428a      	cmp	r2, r1
 800dd6c:	dd12      	ble.n	800dd94 <__kernel_tanf+0x70>
 800dd6e:	2b00      	cmp	r3, #0
 800dd70:	ed9f 7a4d 	vldr	s14, [pc, #308]	; 800dea8 <__kernel_tanf+0x184>
 800dd74:	bfb8      	it	lt
 800dd76:	eef1 7a40 	vneglt.f32	s15, s0
 800dd7a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800dd7e:	ed9f 7a4b 	vldr	s14, [pc, #300]	; 800deac <__kernel_tanf+0x188>
 800dd82:	bfb8      	it	lt
 800dd84:	eef1 0a60 	vneglt.f32	s1, s1
 800dd88:	ee77 0a60 	vsub.f32	s1, s14, s1
 800dd8c:	ee70 7aa7 	vadd.f32	s15, s1, s15
 800dd90:	eddf 0a47 	vldr	s1, [pc, #284]	; 800deb0 <__kernel_tanf+0x18c>
 800dd94:	ed9f 6a47 	vldr	s12, [pc, #284]	; 800deb4 <__kernel_tanf+0x190>
 800dd98:	eddf 5a47 	vldr	s11, [pc, #284]	; 800deb8 <__kernel_tanf+0x194>
 800dd9c:	ed9f 5a47 	vldr	s10, [pc, #284]	; 800debc <__kernel_tanf+0x198>
 800dda0:	4940      	ldr	r1, [pc, #256]	; (800dea4 <__kernel_tanf+0x180>)
 800dda2:	ee67 6aa7 	vmul.f32	s13, s15, s15
 800dda6:	428a      	cmp	r2, r1
 800dda8:	ee26 7aa6 	vmul.f32	s14, s13, s13
 800ddac:	ee67 4aa6 	vmul.f32	s9, s15, s13
 800ddb0:	eee7 5a06 	vfma.f32	s11, s14, s12
 800ddb4:	ed9f 6a42 	vldr	s12, [pc, #264]	; 800dec0 <__kernel_tanf+0x19c>
 800ddb8:	eea5 6a87 	vfma.f32	s12, s11, s14
 800ddbc:	eddf 5a41 	vldr	s11, [pc, #260]	; 800dec4 <__kernel_tanf+0x1a0>
 800ddc0:	eee6 5a07 	vfma.f32	s11, s12, s14
 800ddc4:	ed9f 6a40 	vldr	s12, [pc, #256]	; 800dec8 <__kernel_tanf+0x1a4>
 800ddc8:	eea5 6a87 	vfma.f32	s12, s11, s14
 800ddcc:	eddf 5a3f 	vldr	s11, [pc, #252]	; 800decc <__kernel_tanf+0x1a8>
 800ddd0:	eee6 5a07 	vfma.f32	s11, s12, s14
 800ddd4:	ed9f 6a3e 	vldr	s12, [pc, #248]	; 800ded0 <__kernel_tanf+0x1ac>
 800ddd8:	eea7 6a05 	vfma.f32	s12, s14, s10
 800dddc:	ed9f 5a3d 	vldr	s10, [pc, #244]	; 800ded4 <__kernel_tanf+0x1b0>
 800dde0:	eea6 5a07 	vfma.f32	s10, s12, s14
 800dde4:	ed9f 6a3c 	vldr	s12, [pc, #240]	; 800ded8 <__kernel_tanf+0x1b4>
 800dde8:	eea5 6a07 	vfma.f32	s12, s10, s14
 800ddec:	ed9f 5a3b 	vldr	s10, [pc, #236]	; 800dedc <__kernel_tanf+0x1b8>
 800ddf0:	eea6 5a07 	vfma.f32	s10, s12, s14
 800ddf4:	ed9f 6a3a 	vldr	s12, [pc, #232]	; 800dee0 <__kernel_tanf+0x1bc>
 800ddf8:	eea5 6a07 	vfma.f32	s12, s10, s14
 800ddfc:	eeb0 7a46 	vmov.f32	s14, s12
 800de00:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800de04:	eeb0 6a60 	vmov.f32	s12, s1
 800de08:	eea7 6a24 	vfma.f32	s12, s14, s9
 800de0c:	ed9f 7a35 	vldr	s14, [pc, #212]	; 800dee4 <__kernel_tanf+0x1c0>
 800de10:	eee6 0a26 	vfma.f32	s1, s12, s13
 800de14:	eee4 0a87 	vfma.f32	s1, s9, s14
 800de18:	ee77 6aa0 	vadd.f32	s13, s15, s1
 800de1c:	dd1d      	ble.n	800de5a <__kernel_tanf+0x136>
 800de1e:	ee07 0a10 	vmov	s14, r0
 800de22:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800de26:	ee66 5aa6 	vmul.f32	s11, s13, s13
 800de2a:	ee76 6a87 	vadd.f32	s13, s13, s14
 800de2e:	179b      	asrs	r3, r3, #30
 800de30:	ee85 6aa6 	vdiv.f32	s12, s11, s13
 800de34:	f003 0302 	and.w	r3, r3, #2
 800de38:	f1c3 0301 	rsb	r3, r3, #1
 800de3c:	eef0 6a00 	vmov.f32	s13, #0	; 0x40000000  2.0
 800de40:	ee76 0a60 	vsub.f32	s1, s12, s1
 800de44:	ee77 7ae0 	vsub.f32	s15, s15, s1
 800de48:	eea7 7ae6 	vfms.f32	s14, s15, s13
 800de4c:	ee07 3a90 	vmov	s15, r3
 800de50:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800de54:	ee67 7a27 	vmul.f32	s15, s14, s15
 800de58:	e77c      	b.n	800dd54 <__kernel_tanf+0x30>
 800de5a:	2801      	cmp	r0, #1
 800de5c:	d01f      	beq.n	800de9e <__kernel_tanf+0x17a>
 800de5e:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 800de62:	eec7 5a26 	vdiv.f32	s11, s14, s13
 800de66:	4b20      	ldr	r3, [pc, #128]	; (800dee8 <__kernel_tanf+0x1c4>)
 800de68:	ee16 2a90 	vmov	r2, s13
 800de6c:	401a      	ands	r2, r3
 800de6e:	ee06 2a10 	vmov	s12, r2
 800de72:	ee15 2a90 	vmov	r2, s11
 800de76:	4013      	ands	r3, r2
 800de78:	ee07 3a10 	vmov	s14, r3
 800de7c:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800de80:	eee6 6a07 	vfma.f32	s13, s12, s14
 800de84:	ee76 7a67 	vsub.f32	s15, s12, s15
 800de88:	ee70 0ae7 	vsub.f32	s1, s1, s15
 800de8c:	eef0 7a66 	vmov.f32	s15, s13
 800de90:	eee7 7a20 	vfma.f32	s15, s14, s1
 800de94:	eea7 7aa5 	vfma.f32	s14, s15, s11
 800de98:	eef0 7a47 	vmov.f32	s15, s14
 800de9c:	e75a      	b.n	800dd54 <__kernel_tanf+0x30>
 800de9e:	eef0 7a66 	vmov.f32	s15, s13
 800dea2:	e757      	b.n	800dd54 <__kernel_tanf+0x30>
 800dea4:	3f2ca13f 	.word	0x3f2ca13f
 800dea8:	3f490fda 	.word	0x3f490fda
 800deac:	33222168 	.word	0x33222168
 800deb0:	00000000 	.word	0x00000000
 800deb4:	37d95384 	.word	0x37d95384
 800deb8:	3895c07a 	.word	0x3895c07a
 800debc:	b79bae5f 	.word	0xb79bae5f
 800dec0:	398137b9 	.word	0x398137b9
 800dec4:	3abede48 	.word	0x3abede48
 800dec8:	3c11371f 	.word	0x3c11371f
 800decc:	3d5d0dd1 	.word	0x3d5d0dd1
 800ded0:	38a3f445 	.word	0x38a3f445
 800ded4:	3a1a26c8 	.word	0x3a1a26c8
 800ded8:	3b6b6916 	.word	0x3b6b6916
 800dedc:	3cb327a4 	.word	0x3cb327a4
 800dee0:	3e088889 	.word	0x3e088889
 800dee4:	3eaaaaab 	.word	0x3eaaaaab
 800dee8:	fffff000 	.word	0xfffff000

0800deec <matherr>:
 800deec:	2000      	movs	r0, #0
 800deee:	4770      	bx	lr

0800def0 <nan>:
 800def0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800def8 <nan+0x8>
 800def4:	4770      	bx	lr
 800def6:	bf00      	nop
 800def8:	00000000 	.word	0x00000000
 800defc:	7ff80000 	.word	0x7ff80000

0800df00 <expm1f>:
 800df00:	ee10 2a10 	vmov	r2, s0
 800df04:	4985      	ldr	r1, [pc, #532]	; (800e11c <expm1f+0x21c>)
 800df06:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 800df0a:	428b      	cmp	r3, r1
 800df0c:	d924      	bls.n	800df58 <expm1f+0x58>
 800df0e:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800df12:	d902      	bls.n	800df1a <expm1f+0x1a>
 800df14:	ee30 0a00 	vadd.f32	s0, s0, s0
 800df18:	4770      	bx	lr
 800df1a:	d106      	bne.n	800df2a <expm1f+0x2a>
 800df1c:	2a00      	cmp	r2, #0
 800df1e:	eeff 7a00 	vmov.f32	s15, #240	; 0xbf800000 -1.0
 800df22:	bfb8      	it	lt
 800df24:	eeb0 0a67 	vmovlt.f32	s0, s15
 800df28:	4770      	bx	lr
 800df2a:	2a00      	cmp	r2, #0
 800df2c:	db08      	blt.n	800df40 <expm1f+0x40>
 800df2e:	4a7c      	ldr	r2, [pc, #496]	; (800e120 <expm1f+0x220>)
 800df30:	4293      	cmp	r3, r2
 800df32:	f240 80eb 	bls.w	800e10c <expm1f+0x20c>
 800df36:	ed9f 0a7b 	vldr	s0, [pc, #492]	; 800e124 <expm1f+0x224>
 800df3a:	ee20 0a00 	vmul.f32	s0, s0, s0
 800df3e:	4770      	bx	lr
 800df40:	eddf 7a79 	vldr	s15, [pc, #484]	; 800e128 <expm1f+0x228>
 800df44:	ee70 7a27 	vadd.f32	s15, s0, s15
 800df48:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800df4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800df50:	d554      	bpl.n	800dffc <expm1f+0xfc>
 800df52:	eebf 0a00 	vmov.f32	s0, #240	; 0xbf800000 -1.0
 800df56:	4770      	bx	lr
 800df58:	4974      	ldr	r1, [pc, #464]	; (800e12c <expm1f+0x22c>)
 800df5a:	428b      	cmp	r3, r1
 800df5c:	d96d      	bls.n	800e03a <expm1f+0x13a>
 800df5e:	4974      	ldr	r1, [pc, #464]	; (800e130 <expm1f+0x230>)
 800df60:	428b      	cmp	r3, r1
 800df62:	d84b      	bhi.n	800dffc <expm1f+0xfc>
 800df64:	ed9f 7a73 	vldr	s14, [pc, #460]	; 800e134 <expm1f+0x234>
 800df68:	2a00      	cmp	r2, #0
 800df6a:	bfa7      	ittee	ge
 800df6c:	ee30 7a47 	vsubge.f32	s14, s0, s14
 800df70:	eddf 7a71 	vldrge	s15, [pc, #452]	; 800e138 <expm1f+0x238>
 800df74:	eddf 7a71 	vldrlt	s15, [pc, #452]	; 800e13c <expm1f+0x23c>
 800df78:	ee30 7a07 	vaddlt.f32	s14, s0, s14
 800df7c:	bfac      	ite	ge
 800df7e:	2301      	movge	r3, #1
 800df80:	f04f 33ff 	movlt.w	r3, #4294967295
 800df84:	ee37 0a67 	vsub.f32	s0, s14, s15
 800df88:	ee37 7a40 	vsub.f32	s14, s14, s0
 800df8c:	ee77 7a67 	vsub.f32	s15, s14, s15
 800df90:	eef6 5a00 	vmov.f32	s11, #96	; 0x3f000000  0.5
 800df94:	ee20 5a25 	vmul.f32	s10, s0, s11
 800df98:	eddf 6a69 	vldr	s13, [pc, #420]	; 800e140 <expm1f+0x240>
 800df9c:	ed9f 6a69 	vldr	s12, [pc, #420]	; 800e144 <expm1f+0x244>
 800dfa0:	ee20 7a05 	vmul.f32	s14, s0, s10
 800dfa4:	eea7 6a26 	vfma.f32	s12, s14, s13
 800dfa8:	eddf 6a67 	vldr	s13, [pc, #412]	; 800e148 <expm1f+0x248>
 800dfac:	eee6 6a07 	vfma.f32	s13, s12, s14
 800dfb0:	ed9f 6a66 	vldr	s12, [pc, #408]	; 800e14c <expm1f+0x24c>
 800dfb4:	eea6 6a87 	vfma.f32	s12, s13, s14
 800dfb8:	eddf 6a65 	vldr	s13, [pc, #404]	; 800e150 <expm1f+0x250>
 800dfbc:	eee6 6a07 	vfma.f32	s13, s12, s14
 800dfc0:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 800dfc4:	eef0 4a46 	vmov.f32	s9, s12
 800dfc8:	eee6 4a87 	vfma.f32	s9, s13, s14
 800dfcc:	eef0 6a64 	vmov.f32	s13, s9
 800dfd0:	eef0 4a08 	vmov.f32	s9, #8	; 0x40400000  3.0
 800dfd4:	eee5 4a66 	vfms.f32	s9, s10, s13
 800dfd8:	ee36 5ae4 	vsub.f32	s10, s13, s9
 800dfdc:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 800dfe0:	eee0 6a64 	vfms.f32	s13, s0, s9
 800dfe4:	eef0 4a66 	vmov.f32	s9, s13
 800dfe8:	eec5 6a24 	vdiv.f32	s13, s10, s9
 800dfec:	ee66 6a87 	vmul.f32	s13, s13, s14
 800dff0:	bb8b      	cbnz	r3, 800e056 <expm1f+0x156>
 800dff2:	eef0 7a47 	vmov.f32	s15, s14
 800dff6:	eed0 7a26 	vfnms.f32	s15, s0, s13
 800dffa:	e027      	b.n	800e04c <expm1f+0x14c>
 800dffc:	eddf 7a55 	vldr	s15, [pc, #340]	; 800e154 <expm1f+0x254>
 800e000:	2a00      	cmp	r2, #0
 800e002:	ee20 7a27 	vmul.f32	s14, s0, s15
 800e006:	eef6 6a00 	vmov.f32	s13, #96	; 0x3f000000  0.5
 800e00a:	eefe 7a00 	vmov.f32	s15, #224	; 0xbf000000 -0.5
 800e00e:	bfa8      	it	ge
 800e010:	eef0 7a66 	vmovge.f32	s15, s13
 800e014:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e018:	ed9f 7a46 	vldr	s14, [pc, #280]	; 800e134 <expm1f+0x234>
 800e01c:	eddf 6a46 	vldr	s13, [pc, #280]	; 800e138 <expm1f+0x238>
 800e020:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800e024:	ee17 3a90 	vmov	r3, s15
 800e028:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800e02c:	eea7 0ac7 	vfms.f32	s0, s15, s14
 800e030:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800e034:	eeb0 7a40 	vmov.f32	s14, s0
 800e038:	e7a4      	b.n	800df84 <expm1f+0x84>
 800e03a:	f1b3 5f4c 	cmp.w	r3, #855638016	; 0x33000000
 800e03e:	d208      	bcs.n	800e052 <expm1f+0x152>
 800e040:	eddf 7a38 	vldr	s15, [pc, #224]	; 800e124 <expm1f+0x224>
 800e044:	ee70 7a27 	vadd.f32	s15, s0, s15
 800e048:	ee77 7ae7 	vsub.f32	s15, s15, s15
 800e04c:	ee30 0a67 	vsub.f32	s0, s0, s15
 800e050:	4770      	bx	lr
 800e052:	2300      	movs	r3, #0
 800e054:	e79c      	b.n	800df90 <expm1f+0x90>
 800e056:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800e05a:	1c5a      	adds	r2, r3, #1
 800e05c:	eed6 7a80 	vfnms.f32	s15, s13, s0
 800e060:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800e064:	d106      	bne.n	800e074 <expm1f+0x174>
 800e066:	ee70 7a67 	vsub.f32	s15, s0, s15
 800e06a:	eebe 0a00 	vmov.f32	s0, #224	; 0xbf000000 -0.5
 800e06e:	eea7 0aa5 	vfma.f32	s0, s15, s11
 800e072:	4770      	bx	lr
 800e074:	2b01      	cmp	r3, #1
 800e076:	d118      	bne.n	800e0aa <expm1f+0x1aa>
 800e078:	eebd 7a00 	vmov.f32	s14, #208	; 0xbe800000 -0.250
 800e07c:	eeb4 0ac7 	vcmpe.f32	s0, s14
 800e080:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800e084:	bf41      	itttt	mi
 800e086:	ee30 0a25 	vaddmi.f32	s0, s0, s11
 800e08a:	ee37 0ac0 	vsubmi.f32	s0, s15, s0
 800e08e:	eef8 7a00 	vmovmi.f32	s15, #128	; 0xc0000000 -2.0
 800e092:	ee20 0a27 	vmulmi.f32	s0, s0, s15
 800e096:	bf5f      	itttt	pl
 800e098:	ee30 0a67 	vsubpl.f32	s0, s0, s15
 800e09c:	eef0 7a00 	vmovpl.f32	s15, #0	; 0x40000000  2.0
 800e0a0:	eea0 6a27 	vfmapl.f32	s12, s0, s15
 800e0a4:	eeb0 0a46 	vmovpl.f32	s0, s12
 800e0a8:	4770      	bx	lr
 800e0aa:	1c5a      	adds	r2, r3, #1
 800e0ac:	2a39      	cmp	r2, #57	; 0x39
 800e0ae:	ea4f 51c3 	mov.w	r1, r3, lsl #23
 800e0b2:	d90b      	bls.n	800e0cc <expm1f+0x1cc>
 800e0b4:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800e0b8:	ee36 0a40 	vsub.f32	s0, s12, s0
 800e0bc:	ee10 3a10 	vmov	r3, s0
 800e0c0:	440b      	add	r3, r1
 800e0c2:	ee00 3a10 	vmov	s0, r3
 800e0c6:	ee30 0a46 	vsub.f32	s0, s0, s12
 800e0ca:	4770      	bx	lr
 800e0cc:	2b16      	cmp	r3, #22
 800e0ce:	dc11      	bgt.n	800e0f4 <expm1f+0x1f4>
 800e0d0:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800e0d4:	fa42 f303 	asr.w	r3, r2, r3
 800e0d8:	f1c3 537e 	rsb	r3, r3, #1065353216	; 0x3f800000
 800e0dc:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800e0e0:	ee07 3a90 	vmov	s15, r3
 800e0e4:	ee37 0ac0 	vsub.f32	s0, s15, s0
 800e0e8:	ee10 3a10 	vmov	r3, s0
 800e0ec:	440b      	add	r3, r1
 800e0ee:	ee00 3a10 	vmov	s0, r3
 800e0f2:	4770      	bx	lr
 800e0f4:	f1c3 037f 	rsb	r3, r3, #127	; 0x7f
 800e0f8:	05db      	lsls	r3, r3, #23
 800e0fa:	ee07 3a10 	vmov	s14, r3
 800e0fe:	ee77 7a87 	vadd.f32	s15, s15, s14
 800e102:	ee30 0a67 	vsub.f32	s0, s0, s15
 800e106:	ee30 0a06 	vadd.f32	s0, s0, s12
 800e10a:	e7ed      	b.n	800e0e8 <expm1f+0x1e8>
 800e10c:	eddf 7a11 	vldr	s15, [pc, #68]	; 800e154 <expm1f+0x254>
 800e110:	ee20 7a27 	vmul.f32	s14, s0, s15
 800e114:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 800e118:	e77c      	b.n	800e014 <expm1f+0x114>
 800e11a:	bf00      	nop
 800e11c:	4195b843 	.word	0x4195b843
 800e120:	42b17217 	.word	0x42b17217
 800e124:	7149f2ca 	.word	0x7149f2ca
 800e128:	0da24260 	.word	0x0da24260
 800e12c:	3eb17218 	.word	0x3eb17218
 800e130:	3f851591 	.word	0x3f851591
 800e134:	3f317180 	.word	0x3f317180
 800e138:	3717f7d1 	.word	0x3717f7d1
 800e13c:	b717f7d1 	.word	0xb717f7d1
 800e140:	b457edbb 	.word	0xb457edbb
 800e144:	36867e54 	.word	0x36867e54
 800e148:	b8a670cd 	.word	0xb8a670cd
 800e14c:	3ad00d01 	.word	0x3ad00d01
 800e150:	bd088889 	.word	0xbd088889
 800e154:	3fb8aa3b 	.word	0x3fb8aa3b

0800e158 <finitef>:
 800e158:	ee10 3a10 	vmov	r3, s0
 800e15c:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 800e160:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 800e164:	bfac      	ite	ge
 800e166:	2000      	movge	r0, #0
 800e168:	2001      	movlt	r0, #1
 800e16a:	4770      	bx	lr

0800e16c <nanf>:
 800e16c:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800e174 <nanf+0x8>
 800e170:	4770      	bx	lr
 800e172:	bf00      	nop
 800e174:	7fc00000 	.word	0x7fc00000

0800e178 <rintf>:
 800e178:	b513      	push	{r0, r1, r4, lr}
 800e17a:	ee10 1a10 	vmov	r1, s0
 800e17e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800e182:	0ddc      	lsrs	r4, r3, #23
 800e184:	3c7f      	subs	r4, #127	; 0x7f
 800e186:	2c16      	cmp	r4, #22
 800e188:	dc46      	bgt.n	800e218 <rintf+0xa0>
 800e18a:	b32b      	cbz	r3, 800e1d8 <rintf+0x60>
 800e18c:	2c00      	cmp	r4, #0
 800e18e:	ee10 2a10 	vmov	r2, s0
 800e192:	ea4f 70d1 	mov.w	r0, r1, lsr #31
 800e196:	da21      	bge.n	800e1dc <rintf+0x64>
 800e198:	f3c1 0316 	ubfx	r3, r1, #0, #23
 800e19c:	425b      	negs	r3, r3
 800e19e:	4a21      	ldr	r2, [pc, #132]	; (800e224 <rintf+0xac>)
 800e1a0:	0a5b      	lsrs	r3, r3, #9
 800e1a2:	0d09      	lsrs	r1, r1, #20
 800e1a4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800e1a8:	0509      	lsls	r1, r1, #20
 800e1aa:	430b      	orrs	r3, r1
 800e1ac:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 800e1b0:	ee07 3a90 	vmov	s15, r3
 800e1b4:	edd2 6a00 	vldr	s13, [r2]
 800e1b8:	ee36 7aa7 	vadd.f32	s14, s13, s15
 800e1bc:	ed8d 7a01 	vstr	s14, [sp, #4]
 800e1c0:	eddd 7a01 	vldr	s15, [sp, #4]
 800e1c4:	ee77 7ae6 	vsub.f32	s15, s15, s13
 800e1c8:	ee17 3a90 	vmov	r3, s15
 800e1cc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e1d0:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
 800e1d4:	ee00 3a10 	vmov	s0, r3
 800e1d8:	b002      	add	sp, #8
 800e1da:	bd10      	pop	{r4, pc}
 800e1dc:	4b12      	ldr	r3, [pc, #72]	; (800e228 <rintf+0xb0>)
 800e1de:	4123      	asrs	r3, r4
 800e1e0:	4219      	tst	r1, r3
 800e1e2:	d0f9      	beq.n	800e1d8 <rintf+0x60>
 800e1e4:	085b      	lsrs	r3, r3, #1
 800e1e6:	4219      	tst	r1, r3
 800e1e8:	d006      	beq.n	800e1f8 <rintf+0x80>
 800e1ea:	ea21 0203 	bic.w	r2, r1, r3
 800e1ee:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800e1f2:	fa43 f404 	asr.w	r4, r3, r4
 800e1f6:	4322      	orrs	r2, r4
 800e1f8:	4b0a      	ldr	r3, [pc, #40]	; (800e224 <rintf+0xac>)
 800e1fa:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800e1fe:	ed90 7a00 	vldr	s14, [r0]
 800e202:	ee07 2a90 	vmov	s15, r2
 800e206:	ee77 7a27 	vadd.f32	s15, s14, s15
 800e20a:	edcd 7a01 	vstr	s15, [sp, #4]
 800e20e:	ed9d 0a01 	vldr	s0, [sp, #4]
 800e212:	ee30 0a47 	vsub.f32	s0, s0, s14
 800e216:	e7df      	b.n	800e1d8 <rintf+0x60>
 800e218:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800e21c:	d3dc      	bcc.n	800e1d8 <rintf+0x60>
 800e21e:	ee30 0a00 	vadd.f32	s0, s0, s0
 800e222:	e7d9      	b.n	800e1d8 <rintf+0x60>
 800e224:	08073888 	.word	0x08073888
 800e228:	007fffff 	.word	0x007fffff

0800e22c <scalbnf>:
 800e22c:	b508      	push	{r3, lr}
 800e22e:	ee10 2a10 	vmov	r2, s0
 800e232:	f032 4300 	bics.w	r3, r2, #2147483648	; 0x80000000
 800e236:	ed2d 8b02 	vpush	{d8}
 800e23a:	eef0 0a40 	vmov.f32	s1, s0
 800e23e:	d004      	beq.n	800e24a <scalbnf+0x1e>
 800e240:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 800e244:	d306      	bcc.n	800e254 <scalbnf+0x28>
 800e246:	ee70 0a00 	vadd.f32	s1, s0, s0
 800e24a:	ecbd 8b02 	vpop	{d8}
 800e24e:	eeb0 0a60 	vmov.f32	s0, s1
 800e252:	bd08      	pop	{r3, pc}
 800e254:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 800e258:	d21c      	bcs.n	800e294 <scalbnf+0x68>
 800e25a:	4b1f      	ldr	r3, [pc, #124]	; (800e2d8 <scalbnf+0xac>)
 800e25c:	eddf 7a1f 	vldr	s15, [pc, #124]	; 800e2dc <scalbnf+0xb0>
 800e260:	4298      	cmp	r0, r3
 800e262:	ee60 0a27 	vmul.f32	s1, s0, s15
 800e266:	db10      	blt.n	800e28a <scalbnf+0x5e>
 800e268:	ee10 2a90 	vmov	r2, s1
 800e26c:	f3c2 53c7 	ubfx	r3, r2, #23, #8
 800e270:	3b19      	subs	r3, #25
 800e272:	4403      	add	r3, r0
 800e274:	2bfe      	cmp	r3, #254	; 0xfe
 800e276:	dd0f      	ble.n	800e298 <scalbnf+0x6c>
 800e278:	ed9f 8a19 	vldr	s16, [pc, #100]	; 800e2e0 <scalbnf+0xb4>
 800e27c:	eeb0 0a48 	vmov.f32	s0, s16
 800e280:	f000 f834 	bl	800e2ec <copysignf>
 800e284:	ee60 0a08 	vmul.f32	s1, s0, s16
 800e288:	e7df      	b.n	800e24a <scalbnf+0x1e>
 800e28a:	eddf 7a16 	vldr	s15, [pc, #88]	; 800e2e4 <scalbnf+0xb8>
 800e28e:	ee60 0aa7 	vmul.f32	s1, s1, s15
 800e292:	e7da      	b.n	800e24a <scalbnf+0x1e>
 800e294:	0ddb      	lsrs	r3, r3, #23
 800e296:	e7ec      	b.n	800e272 <scalbnf+0x46>
 800e298:	2b00      	cmp	r3, #0
 800e29a:	dd06      	ble.n	800e2aa <scalbnf+0x7e>
 800e29c:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 800e2a0:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 800e2a4:	ee00 3a90 	vmov	s1, r3
 800e2a8:	e7cf      	b.n	800e24a <scalbnf+0x1e>
 800e2aa:	f113 0f16 	cmn.w	r3, #22
 800e2ae:	da06      	bge.n	800e2be <scalbnf+0x92>
 800e2b0:	f24c 3350 	movw	r3, #50000	; 0xc350
 800e2b4:	4298      	cmp	r0, r3
 800e2b6:	dcdf      	bgt.n	800e278 <scalbnf+0x4c>
 800e2b8:	ed9f 8a0a 	vldr	s16, [pc, #40]	; 800e2e4 <scalbnf+0xb8>
 800e2bc:	e7de      	b.n	800e27c <scalbnf+0x50>
 800e2be:	3319      	adds	r3, #25
 800e2c0:	f022 42ff 	bic.w	r2, r2, #2139095040	; 0x7f800000
 800e2c4:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 800e2c8:	eddf 7a07 	vldr	s15, [pc, #28]	; 800e2e8 <scalbnf+0xbc>
 800e2cc:	ee07 3a10 	vmov	s14, r3
 800e2d0:	ee67 0a27 	vmul.f32	s1, s14, s15
 800e2d4:	e7b9      	b.n	800e24a <scalbnf+0x1e>
 800e2d6:	bf00      	nop
 800e2d8:	ffff3cb0 	.word	0xffff3cb0
 800e2dc:	4c000000 	.word	0x4c000000
 800e2e0:	7149f2ca 	.word	0x7149f2ca
 800e2e4:	0da24260 	.word	0x0da24260
 800e2e8:	33000000 	.word	0x33000000

0800e2ec <copysignf>:
 800e2ec:	ee10 3a10 	vmov	r3, s0
 800e2f0:	ee10 2a90 	vmov	r2, s1
 800e2f4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800e2f8:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800e2fc:	4313      	orrs	r3, r2
 800e2fe:	ee00 3a10 	vmov	s0, r3
 800e302:	4770      	bx	lr

0800e304 <_init>:
 800e304:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e306:	bf00      	nop
 800e308:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e30a:	bc08      	pop	{r3}
 800e30c:	469e      	mov	lr, r3
 800e30e:	4770      	bx	lr

0800e310 <_fini>:
 800e310:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e312:	bf00      	nop
 800e314:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800e316:	bc08      	pop	{r3}
 800e318:	469e      	mov	lr, r3
 800e31a:	4770      	bx	lr
